<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Module::Build::API - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Module-Build",3]);
    _gaq.push(["_setCustomVar",5,"Release","Module-Build-0.40",3]);
    _gaq.push(["_setCustomVar",4,"Document","Module::Build::API",3]);
    _gaq.push(["_setCustomVar",1,"Author","LEONT",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Module::Build::API">permalink</a></div>
  <a href="/~leont/">Leon Timmermans</a> &gt;
  <a href="/~leont/Module-Build-0.40/">Module-Build-0.40</a> &gt;
  Module::Build::API
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/573321de2787b0d0b5230927d2a2b61e?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/L/LE/LEONT/Module-Build-0.40.tar.gz">Module-Build-0.40.tar.gz</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~LEONT/Module-Build-0.40/lib/Module/Build/API.pod">Annotate this POD
(2)
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 6</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 87</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 8</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Module-Build">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
<span class="noprint">
  <a href="/src/LEONT/Module-Build-0.40/lib/Module/Build/API.pod">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#CONSTRUCTORS'>CONSTRUCTORS</a>
    <li class='indexItem indexItem2'><a href='#METHODS'>METHODS</a>
    <li class='indexItem indexItem2'><a href='#Autogenerated_Accessors'>Autogenerated Accessors</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#MODULE_METADATA'>MODULE METADATA</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Module::Build::API - API Reference for Module Authors</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>I list here some of the most important methods in <code>Module::Build</code>.
Normally you won&#39;t need to deal with these methods unless you want to subclass <code>Module::Build</code>.
But since one of the reasons I created this module in the first place was so that subclassing is possible (and easy),
I will certainly write more docs as the interface stabilizes.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTORS"
>CONSTRUCTORS</a></h2>

<dl>
<dt><a name='current'></a><a name="current()"
>current()</a></dt>

<dd>
<p>[version 0.20]</p>

<p>This method returns a reasonable facsimile of the currently-executing <code>Module::Build</code> object representing the current build.
You can use this object to query its <a href="#notes()" class="podlinkpod"
>&#34;notes()&#34;</a> method,
inquire about installed modules,
and so on.
This is a great way to share information between different parts of your build process.
For instance,
you can ask the user a question during <code>perl Build.PL</code>,
then use their answer during a regression test:</p>

<pre class="sh_perl">  # In Build.PL:
  my $color = $build-&#62;prompt(&#34;What is your favorite color?&#34;);
  $build-&#62;notes(color =&#62; $color);

  # In t/colortest.t:
  use Module::Build;
  my $build = Module::Build-&#62;current;
  my $color = $build-&#62;notes(&#39;color&#39;);
  ...</pre>

<p>The way the <code>current()</code> method is currently implemented, there may be slight differences between the <code>$build</code> object in Build.PL and the one in <code>t/colortest.t</code>. It is our goal to minimize these differences in future releases of Module::Build, so please report any anomalies you find.</p>

<p>One important caveat: in its current implementation, <code>current()</code> will <b>NOT</b> work correctly if you have changed out of the directory that <code>Module::Build</code> was invoked from.</p>

<dt><a name='new'></a><a name="new()"
>new()</a></dt>

<dd>
<p>[version 0.03]</p>

<p>Creates a new Module::Build object. Arguments to the new() method are listed below. Most arguments are optional, but you must provide either the <a href="#module_name" class="podlinkpod"
>&#34;module_name&#34;</a> argument, or <a href="#dist_name" class="podlinkpod"
>&#34;dist_name&#34;</a> and one of <a href="#dist_version" class="podlinkpod"
>&#34;dist_version&#34;</a> or <a href="#dist_version_from" class="podlinkpod"
>&#34;dist_version_from&#34;</a>. In other words, you must provide enough information to determine both a distribution name and version.</p>

<dl>
<dt><a name="add_to_cleanup"
>add_to_cleanup</a></dt>

<dd>
<p>[version 0.19]</p>

<p>An array reference of files to be cleaned up when the <code>clean</code> action is performed. See also the <a href="#add_to_cleanup(@files)" class="podlinkpod"
>add_to_cleanup()</a> method.</p>

<dt><a name="auto_configure_requires"
>auto_configure_requires</a></dt>

<dd>
<p>[version 0.34]</p>

<p>This parameter determines whether Module::Build will add itself automatically to configure_requires (and build_requires) if Module::Build is not already there. The required version will be the last &#39;major&#39; release, as defined by the decimal version truncated to two decimal places (e.g. 0.34, instead of 0.3402). The default value is true.</p>

<dt><a name="auto_features"
>auto_features</a></dt>

<dd>
<p>[version 0.26]</p>

<p>This parameter supports the setting of features (see <a href="#feature($name)" class="podlinkpod"
>&#34;feature($name)&#34;</a>) automatically based on a set of prerequisites. For instance, for a module that could optionally use either MySQL or PostgreSQL databases, you might use <code>auto_features</code> like this:</p>

<pre class="sh_perl">  my $build = Module::Build-&#62;new
    (
     ...other stuff here...
     auto_features =&#62; {
       pg_support    =&#62; {
                         description =&#62; &#34;Interface with Postgres databases&#34;,
                         requires    =&#62; { &#39;DBD::Pg&#39; =&#62; 23.3,
                                          &#39;DateTime::Format::Pg&#39; =&#62; 0 },
                        },
       mysql_support =&#62; {
                         description =&#62; &#34;Interface with MySQL databases&#34;,
                         requires    =&#62; { &#39;DBD::mysql&#39; =&#62; 17.9,
                                          &#39;DateTime::Format::MySQL&#39; =&#62; 0 },
                        },
     }
    );</pre>

<p>For each feature named, the required prerequisites will be checked, and if there are no failures, the feature will be enabled (set to <code>1</code>). Otherwise the failures will be displayed to the user and the feature will be disabled (set to <code>0</code>).</p>

<p>See the documentation for <a href="#requires" class="podlinkpod"
>&#34;requires&#34;</a> for the details of how requirements can be specified.</p>

<dt><a name="autosplit"
>autosplit</a></dt>

<dd>
<p>[version 0.04]</p>

<p>An optional <code>autosplit</code> argument specifies a file which should be run through the <a href="/perldoc?AutoSplit#autosplit" class="podlinkpod"
>AutoSplit::autosplit()</a> function. If multiple files should be split, the argument may be given as an array of the files to split.</p>

<p>In general I don&#39;t consider autosplitting a great idea, because it&#39;s not always clear that autosplitting achieves its intended performance benefits. It may even harm performance in environments like mod_perl, where as much as possible of a module&#39;s code should be loaded during startup.</p>

<dt><a name="build_class"
>build_class</a></dt>

<dd>
<p>[version 0.28]</p>

<p>The Module::Build class or subclass to use in the build script. Defaults to &#34;Module::Build&#34; or the class name passed to or created by a call to <a href="#subclass()" class="podlinkpod"
>&#34;subclass()&#34;</a>. This property is useful if you&#39;re writing a custom Module::Build subclass and have a bootstrapping problem--that is, your subclass requires modules that may not be installed when <code>perl Build.PL</code> is executed, but you&#39;ve listed in <a href="#build_requires" class="podlinkpod"
>&#34;build_requires&#34;</a> so that they should be available when <code>./Build</code> is executed.</p>

<dt><a name="build_requires"
>build_requires</a></dt>

<dd>
<p>[version 0.07]</p>

<p>Modules listed in this section are necessary to build and install the given module, but are not necessary for regular usage of it. This is actually an important distinction - it allows for tighter control over the body of installed modules, and facilitates correct dependency checking on binary/packaged distributions of the module.</p>

<p>See the documentation for <a href="/~leont/Module-Build-0.40/lib/Module/Build/Authoring.pod#PREREQUISITES" class="podlinkpod"
>&#34;PREREQUISITES&#34; in Module::Build::Authoring</a> for the details of how requirements can be specified.</p>

<dt><a name="configure_requires"
>configure_requires</a></dt>

<dd>
<p>[version 0.30]</p>

<p>Modules listed in this section must be installed <i>before</i> configuring this distribution (i.e. before running the <em>Build.PL</em> script). This might be a specific minimum version of <code>Module::Build</code> or any other module the <em>Build.PL</em> needs in order to do its stuff. Clients like <code>CPAN.pm</code> or <code>CPANPLUS</code> will be expected to pick <code>configure_requires</code> out of the <em>META.yml</em> file and install these items before running the <code>Build.PL</code>.</p>

<p>Module::Build may automatically add itself to configure_requires. See <a href="#auto_configure_requires" class="podlinkpod"
>&#34;auto_configure_requires&#34;</a> for details.</p>

<p>See the documentation for <a href="/~leont/Module-Build-0.40/lib/Module/Build/Authoring.pod#PREREQUISITES" class="podlinkpod"
>&#34;PREREQUISITES&#34; in Module::Build::Authoring</a> for the details of how requirements can be specified.</p>

<dt><a name="create_packlist"
>create_packlist</a></dt>

<dd>
<p>[version 0.28]</p>

<p>If true, this parameter tells Module::Build to create a <em>.packlist</em> file during the <code>install</code> action, just like <code>ExtUtils::MakeMaker</code> does. The file is created in a subdirectory of the <code>arch</code> installation location. It is used by some other tools (CPAN, CPANPLUS, etc.) for determining what files are part of an install.</p>

<p>The default value is true. This parameter was introduced in Module::Build version 0.2609; previously no packlists were ever created by Module::Build.</p>

<dt><a name="c_source"
>c_source</a></dt>

<dd>
<p>[version 0.04]</p>

<p>An optional <code>c_source</code> argument specifies a directory which contains C source files that the rest of the build may depend on. Any <code>.c</code> files in the directory will be compiled to object files. The directory will be added to the search path during the compilation and linking phases of any C or XS files.</p>

<p>[version 0.3604]</p>

<p>A list of directories can be supplied using an anonymous array reference of strings.</p>

<dt><a name="conflicts"
>conflicts</a></dt>

<dd>
<p>[version 0.07]</p>

<p>Modules listed in this section conflict in some serious way with the given module. <code>Module::Build</code> (or some higher-level tool) will refuse to install the given module if the given module/version is also installed.</p>

<p>See the documentation for <a href="/~leont/Module-Build-0.40/lib/Module/Build/Authoring.pod#PREREQUISITES" class="podlinkpod"
>&#34;PREREQUISITES&#34; in Module::Build::Authoring</a> for the details of how requirements can be specified.</p>

<dt><a name="create_license"
>create_license</a></dt>

<dd>
<p>[version 0.31]</p>

<p>This parameter tells Module::Build to automatically create a <em>LICENSE</em> file at the top level of your distribution, containing the full text of the author&#39;s chosen license. This requires <code>Software::License</code> on the author&#39;s machine, and further requires that the <code>license</code> parameter specifies a license that it knows about.</p>

<dt><a name="create_makefile_pl"
>create_makefile_pl</a></dt>

<dd>
<p>[version 0.19]</p>

<p>This parameter lets you use <code>Module::Build::Compat</code> during the <code>distdir</code> (or <code>dist</code>) action to automatically create a Makefile.PL for compatibility with <code>ExtUtils::MakeMaker</code>. The parameter&#39;s value should be one of the styles named in the <a href="/~leont/Module-Build-0.40/lib/Module/Build/Compat.pm" class="podlinkpod"
>Module::Build::Compat</a> documentation.</p>

<dt><a name="create_readme"
>create_readme</a></dt>

<dd>
<p>[version 0.22]</p>

<p>This parameter tells Module::Build to automatically create a <em>README</em> file at the top level of your distribution. Currently it will simply use <code>Pod::Text</code> (or <code>Pod::Readme</code> if it&#39;s installed) on the file indicated by <code>dist_version_from</code> and put the result in the <em>README</em> file. This is by no means the only recommended style for writing a <em>README</em>, but it seems to be one common one used on the CPAN.</p>

<p>If you generate a <em>README</em> in this way, it&#39;s probably a good idea to create a separate <em>INSTALL</em> file if that information isn&#39;t in the generated <em>README</em>.</p>

<dt><a name="dist_abstract"
>dist_abstract</a></dt>

<dd>
<p>[version 0.20]</p>

<p>This should be a short description of the distribution. This is used when generating metadata for <em>META.yml</em> and PPD files. If it is not given then <code>Module::Build</code> looks in the POD of the module from which it gets the distribution&#39;s version. If it finds a POD section marked &#34;=head1 NAME&#34;, then it looks for the first line matching <code>\s+-\s+(.+)</code>, and uses the captured text as the abstract.</p>

<dt><a name="dist_author"
>dist_author</a></dt>

<dd>
<p>[version 0.20]</p>

<p>This should be something like &#34;John Doe &#60;jdoe@example.com&#62;&#34;, or if there are multiple authors, an anonymous array of strings may be specified. This is used when generating metadata for <em>META.yml</em> and PPD files. If this is not specified, then <code>Module::Build</code> looks at the module from which it gets the distribution&#39;s version. If it finds a POD section marked &#34;=head1 AUTHOR&#34;, then it uses the contents of this section.</p>

<dt><a name="dist_name"
>dist_name</a></dt>

<dd>
<p>[version 0.11]</p>

<p>Specifies the name for this distribution. Most authors won&#39;t need to set this directly, they can use <code>module_name</code> to set <code>dist_name</code> to a reasonable default. However, some agglomerative distributions like <code>libwww-perl</code> or <code>bioperl</code> have names that don&#39;t correspond directly to a module name, so <code>dist_name</code> can be set independently.</p>

<dt><a name="dist_suffix"
>dist_suffix</a></dt>

<dd>
<p>[version 0.37]</p>

<p>Specifies an optional suffix to include after the version number in the distribution directory (and tarball) name. The only suffix currently recognized by PAUSE is &#39;TRIAL&#39;, which indicates that the distribution should not be indexed. For example:</p>

<pre class="sh_perl">  Foo-Bar-1.23-TRIAL.tar.gz</pre>

<p>This will automatically do the &#34;right thing&#34; depending on <code>dist_version</code> and <code>release_status</code>. When <code>dist_version</code> does not have an underscore and <code>release_status</code> is not &#39;stable&#39;, then <code>dist_suffix</code> will default to &#39;TRIAL&#39;. Otherwise it will default to the empty string, disabling the suffix.</p>

<p>In general, authors should only set this if they <b>must</b> override the default behavior for some particular purpose.</p>

<dt><a name="dist_version"
>dist_version</a></dt>

<dd>
<p>[version 0.11]</p>

<p>Specifies a version number for the distribution. See <a href="#module_name" class="podlinkpod"
>&#34;module_name&#34;</a> or <a href="#dist_version_from" class="podlinkpod"
>&#34;dist_version_from&#34;</a> for ways to have this set automatically from a <code>$VERSION</code> variable in a module. One way or another, a version number needs to be set.</p>

<dt><a name="dist_version_from"
>dist_version_from</a></dt>

<dd>
<p>[version 0.11]</p>

<p>Specifies a file to look for the distribution version in. Most authors won&#39;t need to set this directly, they can use <a href="#module_name" class="podlinkpod"
>&#34;module_name&#34;</a> to set it to a reasonable default.</p>

<p>The version is extracted from the specified file according to the same rules as <a href="/perldoc?ExtUtils%3A%3AMakeMaker" class="podlinkpod"
>ExtUtils::MakeMaker</a> and <code>CPAN.pm</code>. It involves finding the first line that matches the regular expression</p>

<pre class="sh_perl">   /([\$*])(([\w\:\&#39;]*)\bVERSION)\b.*\=/</pre>

<p>eval()-ing that line, then checking the value of the <code>$VERSION</code> variable. Quite ugly, really, but all the modules on CPAN depend on this process, so there&#39;s no real opportunity to change to something better.</p>

<p>If the target file of <a href="#dist_version_from" class="podlinkpod"
>&#34;dist_version_from&#34;</a> contains more than one package declaration, the version returned will be the one matching the configured <a href="#module_name" class="podlinkpod"
>&#34;module_name&#34;</a>.</p>

<dt><a name="dynamic_config"
>dynamic_config</a></dt>

<dd>
<p>[version 0.07]</p>

<p>A boolean flag indicating whether the <em>Build.PL</em> file must be executed, or whether this module can be built, tested and installed solely from consulting its metadata file. The main reason to set this to a true value is that your module performs some dynamic configuration as part of its build/install process. If the flag is omitted, the <em>META.yml</em> spec says that installation tools should treat it as 1 (true), because this is a safer way to behave.</p>

<p>Currently <code>Module::Build</code> doesn&#39;t actually do anything with this flag - it&#39;s up to higher-level tools like <code>CPAN.pm</code> to do something useful with it. It can potentially bring lots of security, packaging, and convenience improvements.</p>

<dt><a name="extra_compiler_flags"
>extra_compiler_flags</a></dt>

<dd>
<dt><a name="extra_linker_flags"
>extra_linker_flags</a></dt>

<dd>
<p>[version 0.19]</p>

<p>These parameters can contain array references (or strings, in which case they will be split into arrays) to pass through to the compiler and linker phases when compiling/linking C code. For example, to tell the compiler that your code is C++, you might do:</p>

<pre class="sh_perl">  my $build = Module::Build-&#62;new
    (
     module_name          =&#62; &#39;Foo::Bar&#39;,
     extra_compiler_flags =&#62; [&#39;-x&#39;, &#39;c++&#39;],
    );</pre>

<p>To link your XS code against glib you might write something like:</p>

<pre class="sh_perl">  my $build = Module::Build-&#62;new
    (
     module_name          =&#62; &#39;Foo::Bar&#39;,
     dynamic_config       =&#62; 1,
     extra_compiler_flags =&#62; scalar `glib-config --cflags`,
     extra_linker_flags   =&#62; scalar `glib-config --libs`,
    );</pre>

<dt><a name="get_options"
>get_options</a></dt>

<dd>
<p>[version 0.26]</p>

<p>You can pass arbitrary command line options to <em>Build.PL</em> or <em>Build</em>, and they will be stored in the Module::Build object and can be accessed via the <a href="#args()" class="podlinkpod"
>&#34;args()&#34;</a> method. However, sometimes you want more flexibility out of your argument processing than this allows. In such cases, use the <code>get_options</code> parameter to pass in a hash reference of argument specifications, and the list of arguments to <em>Build.PL</em> or <em>Build</em> will be processed according to those specifications before they&#39;re passed on to <code>Module::Build</code>&#39;s own argument processing.</p>

<p>The supported option specification hash keys are:</p>

<dl>
<dt><a name="type"
>type</a></dt>

<dd>
<p>The type of option. The types are those supported by Getopt::Long; consult its documentation for a complete list. Typical types are <code>=s</code> for strings, <code>+</code> for additive options, and <code>!</code> for negatable options. If the type is not specified, it will be considered a boolean, i.e. no argument is taken and a value of 1 will be assigned when the option is encountered.</p>

<dt><a name="store"
>store</a></dt>

<dd>
<p>A reference to a scalar in which to store the value passed to the option. If not specified, the value will be stored under the option name in the hash returned by the <code>args()</code> method.</p>

<dt><a name="default"
>default</a></dt>

<dd>
<p>A default value for the option. If no default value is specified and no option is passed, then the option key will not exist in the hash returned by <code>args()</code>.</p>
</dd>
</dl>

<p>You can combine references to your own variables or subroutines with unreferenced specifications, for which the result will also be stored in the hash returned by <code>args()</code>. For example:</p>

<pre class="sh_perl">  my $loud = 0;
  my $build = Module::Build-&#62;new
    (
     module_name =&#62; &#39;Foo::Bar&#39;,
     get_options =&#62; {
                     Loud =&#62;     { store =&#62; \$loud },
                     Dbd  =&#62;     { type  =&#62; &#39;=s&#39;   },
                     Quantity =&#62; { type  =&#62; &#39;+&#39;    },
                    }
    );

  print STDERR &#34;HEY, ARE YOU LISTENING??\n&#34; if $loud;
  print &#34;We&#39;ll use the &#34;, $build-&#62;args(&#39;Dbd&#39;), &#34; DBI driver\n&#34;;
  print &#34;Are you sure you want that many?\n&#34;
    if $build-&#62;args(&#39;Quantity&#39;) &#62; 2;</pre>

<p>The arguments for such a specification can be called like so:</p>

<pre class="sh_perl">  perl Build.PL --Loud --Dbd=DBD::pg --Quantity --Quantity --Quantity</pre>

<p><b>WARNING:</b> Any option specifications that conflict with Module::Build&#39;s own options (defined by its properties) will throw an exception. Use capitalized option names to avoid unintended conflicts with future Module::Build options.</p>

<p>Consult the Getopt::Long documentation for details on its usage.</p>

<dt><a name="include_dirs"
>include_dirs</a></dt>

<dd>
<p>[version 0.24]</p>

<p>Specifies any additional directories in which to search for C header files. May be given as a string indicating a single directory, or as a list reference indicating multiple directories.</p>

<dt><a name="install_path"
>install_path</a></dt>

<dd>
<p>[version 0.19]</p>

<p>You can set paths for individual installable elements by using the <code>install_path</code> parameter:</p>

<pre class="sh_perl">  my $build = Module::Build-&#62;new
    (
     ...other stuff here...
     install_path =&#62; {
                      lib  =&#62; &#39;/foo/lib&#39;,
                      arch =&#62; &#39;/foo/lib/arch&#39;,
                     }
    );</pre>

<dt><a name="installdirs"
>installdirs</a></dt>

<dd>
<p>[version 0.19]</p>

<p>Determines where files are installed within the normal perl hierarchy as determined by <em>Config.pm</em>. Valid values are: <code>core</code>, <code>site</code>, <code>vendor</code>. The default is <code>site</code>. See <a href="/~leont/Module-Build-0.40/lib/Module/Build.pm#INSTALL_PATHS" class="podlinkpod"
>&#34;INSTALL PATHS&#34; in Module::Build</a></p>

<dt><a name="license"
>license</a></dt>

<dd>
<p>[version 0.07]</p>

<p>Specifies the licensing terms of your distribution.</p>

<p>As of Module::Build version 0.36_14, you may use a <a href="/perldoc?Software%3A%3ALicense" class="podlinkpod"
>Software::License</a> subclass name (e.g. &#39;Apache_2_0&#39;) instead of one of the keys below.</p>

<p>The legacy list of valid license values include:</p>

<dl>
<dt><a name="apache"
>apache</a></dt>

<dd>
<p>The distribution is licensed under the Apache License, Version 2.0 (<a href="http://apache.org/licenses/LICENSE-2.0" class="podlinkurl"
>http://apache.org/licenses/LICENSE-2.0</a>).</p>

<dt><a name="apache_1_1"
>apache_1_1</a></dt>

<dd>
<p>The distribution is licensed under the Apache Software License, Version 1.1 (<a href="http://apache.org/licenses/LICENSE-1.1" class="podlinkurl"
>http://apache.org/licenses/LICENSE-1.1</a>).</p>

<dt><a name="artistic"
>artistic</a></dt>

<dd>
<p>The distribution is licensed under the Artistic License, as specified by the <em>Artistic</em> file in the standard Perl distribution.</p>

<dt><a name="artistic_2"
>artistic_2</a></dt>

<dd>
<p>The distribution is licensed under the Artistic 2.0 License (<a href="http://opensource.org/licenses/artistic-license-2.0.php" class="podlinkurl"
>http://opensource.org/licenses/artistic-license-2.0.php</a>.)</p>

<dt><a name="bsd"
>bsd</a></dt>

<dd>
<p>The distribution is licensed under the BSD License (<a href="http://www.opensource.org/licenses/bsd-license.php" class="podlinkurl"
>http://www.opensource.org/licenses/bsd-license.php</a>).</p>

<dt><a name="gpl"
>gpl</a></dt>

<dd>
<p>The distribution is licensed under the terms of the GNU General Public License (<a href="http://www.opensource.org/licenses/gpl-license.php" class="podlinkurl"
>http://www.opensource.org/licenses/gpl-license.php</a>).</p>

<dt><a name="lgpl"
>lgpl</a></dt>

<dd>
<p>The distribution is licensed under the terms of the GNU Lesser General Public License (<a href="http://www.opensource.org/licenses/lgpl-license.php" class="podlinkurl"
>http://www.opensource.org/licenses/lgpl-license.php</a>).</p>

<dt><a name="mit"
>mit</a></dt>

<dd>
<p>The distribution is licensed under the MIT License (<a href="http://opensource.org/licenses/mit-license.php" class="podlinkurl"
>http://opensource.org/licenses/mit-license.php</a>).</p>

<dt><a name="mozilla"
>mozilla</a></dt>

<dd>
<p>The distribution is licensed under the Mozilla Public License. (<a href="http://opensource.org/licenses/mozilla1.0.php" class="podlinkurl"
>http://opensource.org/licenses/mozilla1.0.php</a> or <a href="http://opensource.org/licenses/mozilla1.1.php" class="podlinkurl"
>http://opensource.org/licenses/mozilla1.1.php</a>)</p>

<dt><a name="open_source"
>open_source</a></dt>

<dd>
<p>The distribution is licensed under some other Open Source Initiative-approved license listed at <a href="http://www.opensource.org/licenses/" class="podlinkurl"
>http://www.opensource.org/licenses/</a>.</p>

<dt><a name="perl"
>perl</a></dt>

<dd>
<p>The distribution may be copied and redistributed under the same terms as Perl itself (this is by far the most common licensing option for modules on CPAN). This is a dual license, in which the user may choose between either the GPL or the Artistic license.</p>

<dt><a name="restrictive"
>restrictive</a></dt>

<dd>
<p>The distribution may not be redistributed without special permission from the author and/or copyright holder.</p>

<dt><a name="unrestricted"
>unrestricted</a></dt>

<dd>
<p>The distribution is licensed under a license that is <b>not</b> approved by www.opensource.org but that allows distribution without restrictions.</p>
</dd>
</dl>

<p>Note that you must still include the terms of your license in your code and documentation - this field only sets the information that is included in distribution metadata to let automated tools figure out your licensing restrictions. Humans still need something to read. If you choose to provide this field, you should make sure that you keep it in sync with your written documentation if you ever change your licensing terms.</p>

<p>You may also use a license type of <code>unknown</code> if you don&#39;t wish to specify your terms in the metadata.</p>

<p>Also see the <code>create_license</code> parameter.</p>

<dt><a name="meta_add"
>meta_add</a></dt>

<dd>
<p>[version 0.28]</p>

<p>A hash of key/value pairs that should be added to the <em>META.yml</em> file during the <code>distmeta</code> action. Any existing entries with the same names will be overridden.</p>

<p>See the <a href="#MODULE_METADATA" class="podlinkpod"
>&#34;MODULE METADATA&#34;</a> section for details.</p>

<dt><a name="meta_merge"
>meta_merge</a></dt>

<dd>
<p>[version 0.28]</p>

<p>A hash of key/value pairs that should be merged into the <em>META.yml</em> file during the <code>distmeta</code> action. Any existing entries with the same names will be overridden.</p>

<p>The only difference between <code>meta_add</code> and <code>meta_merge</code> is their behavior on hash-valued and array-valued entries: <code>meta_add</code> will completely blow away the existing hash or array value, but <code>meta_merge</code> will merge the supplied data into the existing hash or array value.</p>

<p>See the <a href="#MODULE_METADATA" class="podlinkpod"
>&#34;MODULE METADATA&#34;</a> section for details.</p>

<dt><a name="module_name"
>module_name</a></dt>

<dd>
<p>[version 0.03]</p>

<p>The <code>module_name</code> is a shortcut for setting default values of <code>dist_name</code> and <code>dist_version_from</code>, reflecting the fact that the majority of CPAN distributions are centered around one &#34;main&#34; module. For instance, if you set <code>module_name</code> to <code>Foo::Bar</code>, then <code>dist_name</code> will default to <code>Foo-Bar</code> and <code>dist_version_from</code> will default to <code>lib/Foo/Bar.pm</code>. <code>dist_version_from</code> will in turn be used to set <code>dist_version</code>.</p>

<p>Setting <code>module_name</code> won&#39;t override a <code>dist_*</code> parameter you specify explicitly.</p>

<dt><a name="needs_compiler"
>needs_compiler</a></dt>

<dd>
<p>[version 0.36]</p>

<p>The <code>needs_compiler</code> parameter indicates whether a compiler is required to build the distsribution. The default is false, unless XS files are found or the <code>c_source</code> parameter is set, in which case it is true. If true, <a href="/perldoc?ExtUtils%3A%3ACBuilder" class="podlinkpod"
>ExtUtils::CBuilder</a> is automatically added to <code>build_requires</code> if needed.</p>

<p>For a distribution where a compiler is <i>optional</i>, e.g. a dual XS/pure-Perl distribution, <code>needs_compiler</code> should explicitly be set to a false value.</p>

<dt><a name="PL_files"
>PL_files</a></dt>

<dd>
<p>[version 0.06]</p>

<p>An optional parameter specifying a set of <code>.PL</code> files in your distribution. These will be run as Perl scripts prior to processing the rest of the files in your distribution with the name of the file they&#39;re generating as an argument. They are usually used as templates for creating other files dynamically, so that a file like <code>lib/Foo/Bar.pm.PL</code> might create the file <code>lib/Foo/Bar.pm</code>.</p>

<p>The files are specified with the <code>.PL</code> files as hash keys, and the file(s) they generate as hash values, like so:</p>

<pre class="sh_perl">  my $build = Module::Build-&#62;new
    (
     module_name =&#62; &#39;Foo::Bar&#39;,
     ...
     PL_files =&#62; { &#39;lib/Foo/Bar.pm.PL&#39; =&#62; &#39;lib/Foo/Bar.pm&#39; },
    );</pre>

<p>Note that the path specifications are <i>always</i> given in Unix-like format, not in the style of the local system.</p>

<p>If your <code>.PL</code> scripts don&#39;t create any files, or if they create files with unexpected names, or even if they create multiple files, you can indicate that so that Module::Build can properly handle these created files:</p>

<pre class="sh_perl">  PL_files =&#62; {
               &#39;lib/Foo/Bar.pm.PL&#39; =&#62; &#39;lib/Foo/Bar.pm&#39;,
               &#39;lib/something.PL&#39;  =&#62; [&#39;/lib/something&#39;, &#39;/lib/else&#39;],
               &#39;lib/funny.PL&#39;      =&#62; [],
              }</pre>

<p>Here&#39;s an example of a simple PL file.</p>

<pre class="sh_perl">    my $output_file = shift;
    open my $fh, &#34;&#62;&#34;, $output_file or die &#34;Can&#39;t open $output_file: $!&#34;;

    print $fh &#60;&#60;&#39;END&#39;;
    #!/usr/bin/perl

    print &#34;Hello, world!\n&#34;;
    END</pre>

<p>PL files are not installed by default, so its safe to put them in <em>lib/</em> and <em>bin/</em>.</p>

<dt><a name="pm_files"
>pm_files</a></dt>

<dd>
<p>[version 0.19]</p>

<p>An optional parameter specifying the set of <code>.pm</code> files in this distribution, specified as a hash reference whose keys are the files&#39; locations in the distributions, and whose values are their logical locations based on their package name, i.e. where they would be found in a &#34;normal&#34; Module::Build-style distribution. This parameter is mainly intended to support alternative layouts of files.</p>

<p>For instance, if you have an old-style <code>MakeMaker</code> distribution for a module called <code>Foo::Bar</code> and a <em>Bar.pm</em> file at the top level of the distribution, you could specify your layout in your <code>Build.PL</code> like this:</p>

<pre class="sh_perl">  my $build = Module::Build-&#62;new
    (
     module_name =&#62; &#39;Foo::Bar&#39;,
     ...
     pm_files =&#62; { &#39;Bar.pm&#39; =&#62; &#39;lib/Foo/Bar.pm&#39; },
    );</pre>

<p>Note that the values should include <code>lib/</code>, because this is where they would be found in a &#34;normal&#34; Module::Build-style distribution.</p>

<p>Note also that the path specifications are <i>always</i> given in Unix-like format, not in the style of the local system.</p>

<dt><a name="pod_files"
>pod_files</a></dt>

<dd>
<p>[version 0.19]</p>

<p>Just like <code>pm_files</code>, but used for specifying the set of <code>.pod</code> files in your distribution.</p>

<dt><a name="recommends"
>recommends</a></dt>

<dd>
<p>[version 0.08]</p>

<p>This is just like the <a href="#requires" class="podlinkpod"
>&#34;requires&#34;</a> argument, except that modules listed in this section aren&#39;t essential, just a good idea. We&#39;ll just print a friendly warning if one of these modules aren&#39;t found, but we&#39;ll continue running.</p>

<p>If a module is recommended but not required, all tests should still pass if the module isn&#39;t installed. This may mean that some tests may be skipped if recommended dependencies aren&#39;t present.</p>

<p>Automated tools like CPAN.pm should inform the user when recommended modules aren&#39;t installed, and it should offer to install them if it wants to be helpful.</p>

<p>See the documentation for <a href="/~leont/Module-Build-0.40/lib/Module/Build/Authoring.pod#PREREQUISITES" class="podlinkpod"
>&#34;PREREQUISITES&#34; in Module::Build::Authoring</a> for the details of how requirements can be specified.</p>

<dt><a name="recursive_test_files"
>recursive_test_files</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Normally, <code>Module::Build</code> does not search subdirectories when looking for tests to run. When this options is set it will search recursively in all subdirectories of the standard &#39;t&#39; test directory.</p>

<dt><a name="release_status"
>release_status</a></dt>

<dd>
<p>[version 0.37]</p>

<p>The CPAN Meta Spec version 2 adds <code>release_status</code> to allow authors to specify how a distribution should be indexed. Consistent with the spec, this parameter can only have one three values: &#39;stable&#39;, &#39;testing&#39; or &#39;unstable&#39;.</p>

<p>Unless explicitly set by the author, <code>release_status</code> will default to &#39;stable&#39; unless <code>dist_version</code> contains an underscore, in which case it will default to &#39;testing&#39;.</p>

<p>It is an error to specify a <code>release_status</code> of &#39;stable&#39; when <code>dist_version</code> contains an underscore character.</p>

<dt><a name="requires"
>requires</a></dt>

<dd>
<p>[version 0.07]</p>

<p>An optional <code>requires</code> argument specifies any module prerequisites that the current module depends on.</p>

<p>One note: currently <code>Module::Build</code> doesn&#39;t actually <i>require</i> the user to have dependencies installed, it just strongly urges. In the future we may require it. There&#39;s also a <a href="#recommends" class="podlinkpod"
>&#34;recommends&#34;</a> section for things that aren&#39;t absolutely required.</p>

<p>Automated tools like CPAN.pm should refuse to install a module if one of its dependencies isn&#39;t satisfied, unless a &#34;force&#34; command is given by the user. If the tools are helpful, they should also offer to install the dependencies.</p>

<p>A synonym for <code>requires</code> is <code>prereq</code>, to help succour people transitioning from <code>ExtUtils::MakeMaker</code>. The <code>requires</code> term is preferred, but the <code>prereq</code> term will remain valid in future distributions.</p>

<p>See the documentation for <a href="/~leont/Module-Build-0.40/lib/Module/Build/Authoring.pod#PREREQUISITES" class="podlinkpod"
>&#34;PREREQUISITES&#34; in Module::Build::Authoring</a> for the details of how requirements can be specified.</p>

<dt><a name="script_files"
>script_files</a></dt>

<dd>
<p>[version 0.18]</p>

<p>An optional parameter specifying a set of files that should be installed as executable Perl scripts when the module is installed. May be given as an array reference of the files, as a hash reference whose keys are the files (and whose values will currently be ignored), as a string giving the name of a directory in which to find scripts, or as a string giving the name of a single script file.</p>

<p>The default is to install any scripts found in a <em>bin</em> directory at the top level of the distribution, minus any keys of <a href="/perldoc?PL_files" class="podlinkpod"
>PL_files</a>.</p>

<p>For backward compatibility, you may use the parameter <code>scripts</code> instead of <code>script_files</code>. Please consider this usage deprecated, though it will continue to exist for several version releases.</p>

<dt><a name="share_dir"
>share_dir</a></dt>

<dd>
<p>[version 0.36]</p>

<p>An optional parameter specifying directories of static data files to be installed as read-only files for use with <a href="/perldoc?File%3A%3AShareDir" class="podlinkpod"
>File::ShareDir</a>. The <code>share_dir</code> property supports both distribution-level and module-level share files.</p>

<p>The simplest use of <code>share_dir</code> is to set it to a directory name or an arrayref of directory names containing files to be installed in the distribution-level share directory.</p>

<pre class="sh_perl">  share_dir =&#62; &#39;share&#39;</pre>

<p>Alternatively, if <code>share_dir</code> is a hashref, it may have <code>dist</code> or <code>module</code> keys providing full flexibility in defining how share directories should be installed.</p>

<pre class="sh_perl">  share_dir =&#62; {
    dist =&#62; [ &#39;examples&#39;, &#39;more_examples&#39; ],
    module =&#62; {
      Foo::Templates =&#62; [&#39;share/html&#39;, &#39;share/text&#39;],
      Foo::Config    =&#62; &#39;share/config&#39;,
    }
  }</pre>

<p>If <code>share_dir</code> is set, then File::ShareDir will automatically be added to the <code>requires</code> hash.</p>

<dt><a name="sign"
>sign</a></dt>

<dd>
<p>[version 0.16]</p>

<p>If a true value is specified for this parameter, <a href="/perldoc?Module%3A%3ASignature" class="podlinkpod"
>Module::Signature</a> will be used (via the &#39;distsign&#39; action) to create a SIGNATURE file for your distribution during the &#39;distdir&#39; action, and to add the SIGNATURE file to the MANIFEST (therefore, don&#39;t add it yourself).</p>

<p>The default value is false. In the future, the default may change to true if you have <code>Module::Signature</code> installed on your system.</p>

<dt><a name="tap_harness_args"
>tap_harness_args</a></dt>

<dd>
<p>[version 0.2808_03]</p>

<p>An optional parameter specifying parameters to be passed to TAP::Harness when running tests. Must be given as a hash reference of parameters; see the <a href="/perldoc?TAP%3A%3AHarness" class="podlinkpod"
>TAP::Harness</a> documentation for details. Note that specifying this parameter will implicitly set <code>use_tap_harness</code> to a true value. You must therefore be sure to add TAP::Harness as a requirement for your module in <a href="#build_requires" class="podlinkpod"
>&#34;build_requires&#34;</a>.</p>

<dt><a name="test_files"
>test_files</a></dt>

<dd>
<p>[version 0.23]</p>

<p>An optional parameter specifying a set of files that should be used as <code>Test::Harness</code>-style regression tests to be run during the <code>test</code> action. May be given as an array reference of the files, or as a hash reference whose keys are the files (and whose values will currently be ignored). If the argument is given as a single string (not in an array reference), that string will be treated as a <code>glob()</code> pattern specifying the files to use.</p>

<p>The default is to look for a <em>test.pl</em> script in the top-level directory of the distribution, and any files matching the glob pattern <code>*.t</code> in the <em>t/</em> subdirectory. If the <code>recursive_test_files</code> property is true, then the <code>t/</code> directory will be scanned recursively for <code>*.t</code> files.</p>

<dt><a name="use_tap_harness"
>use_tap_harness</a></dt>

<dd>
<p>[version 0.2808_03]</p>

<p>An optional parameter indicating whether or not to use TAP::Harness for testing rather than Test::Harness. Defaults to false. If set to true, you must therefore be sure to add TAP::Harness as a requirement for your module in <a href="#build_requires" class="podlinkpod"
>&#34;build_requires&#34;</a>. Implicitly set to a true value if <code>tap_harness_args</code> is specified.</p>

<dt><a name="xs_files"
>xs_files</a></dt>

<dd>
<p>[version 0.19]</p>

<p>Just like <code>pm_files</code>, but used for specifying the set of <code>.xs</code> files in your distribution.</p>
</dd>
</dl>

<dt><a name='new_from_context'></a><a name="new_from_context(%args)"
>new_from_context(%args)</a></dt>

<dd>
<p>[version 0.28]</p>

<p>When called from a directory containing a <em>Build.PL</em> script (in other words, the base directory of a distribution), this method will run the <em>Build.PL</em> and call <code>resume()</code> to return the resulting <code>Module::Build</code> object to the caller. Any key-value arguments given to <code>new_from_context()</code> are essentially like command line arguments given to the <em>Build.PL</em> script, so for example you could pass <code>verbose =&#62; 1</code> to this method to turn on verbosity.</p>

<dt><a name='resume'></a><a name="resume()"
>resume()</a></dt>

<dd>
<p>[version 0.03]</p>

<p>You&#39;ll probably never call this method directly, it&#39;s only called from the auto-generated <code>Build</code> script (and the <code>new_from_context</code> method). The <code>new()</code> method is only called once, when the user runs <code>perl Build.PL</code>. Thereafter, when the user runs <code>Build test</code> or another action, the <code>Module::Build</code> object is created using the <code>resume()</code> method to re-instantiate with the settings given earlier to <code>new()</code>.</p>

<dt><a name='subclass'></a><a name="subclass()"
>subclass()</a></dt>

<dd>
<p>[version 0.06]</p>

<p>This creates a new <code>Module::Build</code> subclass on the fly, as described in the <a href="/~leont/Module-Build-0.40/lib/Module/Build/Authoring.pod#SUBCLASSING" class="podlinkpod"
>&#34;SUBCLASSING&#34; in Module::Build::Authoring</a> section. The caller must provide either a <code>class</code> or <code>code</code> parameter, or both. The <code>class</code> parameter indicates the name to use for the new subclass, and defaults to <code>MyModuleBuilder</code>. The <code>code</code> parameter specifies Perl code to use as the body of the subclass.</p>

<dt><a name="add_property"
>add_property</a></dt>

<dd>
<p>[version 0.31]</p>

<pre class="sh_perl">  package &#39;My::Build&#39;;
  use base &#39;Module::Build&#39;;
  __PACKAGE__-&#62;add_property( &#39;pedantic&#39; );
  __PACKAGE__-&#62;add_property( answer =&#62; 42 );
  __PACKAGE__-&#62;add_property(
     &#39;epoch&#39;,
      default =&#62; sub { time },
      check   =&#62; sub {
          return 1 if /^\d+$/;
          shift-&#62;property_error( &#34;&#39;$_&#39; is not an epoch time&#34; );
          return 0;
      },
  );</pre>

<p>Adds a property to a Module::Build class. Properties are those attributes of a Module::Build object which can be passed to the constructor and which have accessors to get and set them. All of the core properties, such as <code>module_name</code> and <code>license</code>, are defined using this class method.</p>

<p>The first argument to <code>add_property()</code> is always the name of the property. The second argument can be either a default value for the property, or a list of key/value pairs. The supported keys are:</p>

<dl>
<dt><a name="default"
><code>default</code></a></dt>

<dd>
<p>The default value. May optionally be specified as a code reference, in which case the return value from the execution of the code reference will be used. If you need the default to be a code reference, just use a code reference to return it, e.g.:</p>

<pre class="sh_perl">      default =&#62; sub { sub { ... } },</pre>

<dt><a name="check"
><code>check</code></a></dt>

<dd>
<p>A code reference that checks that a value specified for the property is valid. During the execution of the code reference, the new value will be included in the <code>$_</code> variable. If the value is correct, the <code>check</code> code reference should return true. If the value is not correct, it sends an error message to <code>property_error()</code> and returns false.</p>
</dd>
</dl>

<p>When this method is called, a new property will be installed in the Module::Build class, and an accessor will be built to allow the property to be get or set on the build object.</p>

<pre class="sh_perl">  print $build-&#62;pedantic, $/;
  $build-&#62;pedantic(0);</pre>

<p>If the default value is a hash reference, this generates a special-case accessor method, wherein individual key/value pairs may be set or fetched:</p>

<pre class="sh_perl">  print &#34;stuff{foo} is: &#34;, $build-&#62;stuff( &#39;foo&#39; ), $/;
  $build-&#62;stuff( foo =&#62; &#39;bar&#39; );
  print $build-&#62;stuff( &#39;foo&#39; ), $/; # Outputs &#34;bar&#34;</pre>

<p>Of course, you can still set the entire hash reference at once, as well:</p>

<pre class="sh_perl">  $build-&#62;stuff( { foo =&#62; &#39;bar&#39;, baz =&#62; &#39;yo&#39; } );</pre>

<p>In either case, if a <code>check</code> has been specified for the property, it will be applied to the entire hash. So the check code reference should look something like:</p>

<pre class="sh_perl">      check =&#62; sub {
            return 1 if defined $_ &#38;&#38; exists $_-&#62;{foo};
            shift-&#62;property_error(qq{Property &#34;stuff&#34; needs &#34;foo&#34;});
            return 0;
      },</pre>

<dt><a name="property_error"
>property_error</a></dt>

<dd>
<p>[version 0.31]</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS</a></h2>

<dl>
<dt><a name='add_build_element'></a><a name="add_build_element($type)"
>add_build_element($type)</a></dt>

<dd>
<p>[version 0.26]</p>

<p>Adds a new type of entry to the build process. Accepts a single string specifying its type-name. There must also be a method defined to process things of that type, e.g. if you add a build element called <code>&#39;foo&#39;</code>, then you must also define a method called <code>process_foo_files()</code>.</p>

<p>See also <a href="/~leont/Module-Build-0.40/lib/Module/Build/Cookbook.pm#Adding_new_file_types_to_the_build_process" class="podlinkpod"
>&#34;Adding new file types to the build process&#34; in Module::Build::Cookbook</a>.</p>

<dt><a name='add_to_cleanup'></a><a name="add_to_cleanup(@files)"
>add_to_cleanup(@files)</a></dt>

<dd>
<p>[version 0.03]</p>

<p>You may call <code>$self-&#62;add_to_cleanup(@patterns)</code> to tell <code>Module::Build</code> that certain files should be removed when the user performs the <code>Build clean</code> action. The arguments to the method are patterns suitable for passing to Perl&#39;s <code>glob()</code> function, specified in either Unix format or the current machine&#39;s native format. It&#39;s usually convenient to use Unix format when you hard-code the filenames (e.g. in <em>Build.PL</em>) and the native format when the names are programmatically generated (e.g. in a testing script).</p>

<p>I decided to provide a dynamic method of the <code>$build</code> object, rather than just use a static list of files named in the <em>Build.PL</em>, because these static lists can get difficult to manage. I usually prefer to keep the responsibility for registering temporary files close to the code that creates them.</p>

<dt><a name='args'></a><a name="args()"
>args()</a></dt>

<dd>
<p>[version 0.26]</p>

<pre class="sh_perl">  my $args_href = $build-&#62;args;
  my %args = $build-&#62;args;
  my $arg_value = $build-&#62;args($key);
  $build-&#62;args($key, $value);</pre>

<p>This method is the preferred interface for retrieving the arguments passed via command line options to <em>Build.PL</em> or <em>Build</em>, minus the Module-Build specific options.</p>

<p>When called in in a scalar context with no arguments, this method returns a reference to the hash storing all of the arguments; in an array context, it returns the hash itself. When passed a single argument, it returns the value stored in the args hash for that option key. When called with two arguments, the second argument is assigned to the args hash under the key passed as the first argument.</p>

<dt><a name='autosplit_file'></a><a name="autosplit_file($from,_$to)"
>autosplit_file($from, $to)</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Invokes the <a href="/perldoc?AutoSplit" class="podlinkpod"
>AutoSplit</a> module on the <code>$from</code> file, sending the output to the <code>lib/auto</code> directory inside <code>$to</code>. <code>$to</code> is typically the <code>blib/</code> directory.</p>

<dt><a name='base_dir'></a><a name="base_dir()"
>base_dir()</a></dt>

<dd>
<p>[version 0.14]</p>

<p>Returns a string containing the root-level directory of this build, i.e. where the <code>Build.PL</code> script and the <code>lib</code> directory can be found. This is usually the same as the current working directory, because the <code>Build</code> script will <code>chdir()</code> into this directory as soon as it begins execution.</p>

<dt><a name='build_requires'></a><a name="build_requires()"
>build_requires()</a></dt>

<dd>
<p>[version 0.21]</p>

<p>Returns a hash reference indicating the <code>build_requires</code> prerequisites that were passed to the <code>new()</code> method.</p>

<dt><a name='can_action'></a><a name="can_action(_$action_)"
>can_action( $action )</a></dt>

<dd>
<p>Returns a reference to the method that defines <code>$action</code>, or false otherwise. This is handy for actions defined (or maybe not!) in subclasses.</p>

<p>[version 0.32_xx]</p>

<dt><a name='cbuilder'></a><a name="cbuilder()"
>cbuilder()</a></dt>

<dd>
<p>[version 0.2809]</p>

<p>Returns the internal ExtUtils::CBuilder object that can be used for compiling &#38; linking C code. If no such object is available (e.g. if the system has no compiler installed) an exception will be thrown.</p>

<dt><a name='check_installed_status'></a><a name="check_installed_status($module,_$version)"
>check_installed_status($module, $version)</a></dt>

<dd>
<p>[version 0.11]</p>

<p>This method returns a hash reference indicating whether a version dependency on a certain module is satisfied. The <code>$module</code> argument is given as a string like <code>&#34;Data::Dumper&#34;</code> or <code>&#34;perl&#34;</code>, and the <code>$version</code> argument can take any of the forms described in <a href="#requires" class="podlinkpod"
>&#34;requires&#34;</a> above. This allows very fine-grained version checking.</p>

<p>The returned hash reference has the following structure:</p>

<pre class="sh_perl">  {
   ok =&#62; $whether_the_dependency_is_satisfied,
   have =&#62; $version_already_installed,
   need =&#62; $version_requested, # Same as incoming $version argument
   message =&#62; $informative_error_message,
  }</pre>

<p>If no version of <code>$module</code> is currently installed, the <code>have</code> value will be the string <code>&#34;&#60;none&#62;&#34;</code>. Otherwise the <code>have</code> value will simply be the version of the installed module. Note that this means that if <code>$module</code> is installed but doesn&#39;t define a version number, the <code>have</code> value will be <code>undef</code> - this is why we don&#39;t use <code>undef</code> for the case when <code>$module</code> isn&#39;t installed at all.</p>

<p>This method may be called either as an object method (<code>$build-&#62;check_installed_status($module, $version)</code>) or as a class method (<code>Module::Build-&#62;check_installed_status($module, $version)</code>).</p>

<dt><a name='check_installed_version'></a><a name="check_installed_version($module,_$version)"
>check_installed_version($module, $version)</a></dt>

<dd>
<p>[version 0.05]</p>

<p>Like <a href="#check_installed_status($module,_$version)" class="podlinkpod"
>check_installed_status()</a>, but simply returns true or false depending on whether module <code>$module</code> satisfies the dependency <code>$version</code>.</p>

<p>If the check succeeds, the return value is the actual version of <code>$module</code> installed on the system. This allows you to do the following:</p>

<pre class="sh_perl">  my $installed = $build-&#62;check_installed_version(&#39;DBI&#39;, &#39;1.15&#39;);
  if ($installed) {
    print &#34;Congratulations, version $installed of DBI is installed.\n&#34;;
  } else {
    die &#34;Sorry, you must install DBI.\n&#34;;
  }</pre>

<p>If the check fails, we return false and set <code>$@</code> to an informative error message.</p>

<p>If <code>$version</code> is any non-true value (notably zero) and any version of <code>$module</code> is installed, we return true. In this case, if <code>$module</code> doesn&#39;t define a version, or if its version is zero, we return the special value &#34;0 but true&#34;, which is numerically zero, but logically true.</p>

<p>In general you might prefer to use <code>check_installed_status</code> if you need detailed information, or this method if you just need a yes/no answer.</p>

<dt><a name='compare_versions'></a><a name="compare_versions($v1,_$op,_$v2)"
>compare_versions($v1, $op, $v2)</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Compares two module versions <code>$v1</code> and <code>$v2</code> using the operator <code>$op</code>, which should be one of Perl&#39;s numeric operators like <code>!=</code> or <code>&#62;=</code> or the like. We do at least a halfway-decent job of handling versions that aren&#39;t strictly numeric, like <code>0.27_02</code>, but exotic stuff will likely cause problems.</p>

<p>In the future, the guts of this method might be replaced with a call out to <code>version.pm</code>.</p>

<dt><a name='config'></a><a name="config($key)"
>config($key)</a></dt>

<dd>
<dt><a name='config'></a><a name="config($key,_$value)"
>config($key, $value)</a></dt>

<dd>
<dt><a name='config'></a><a name="config()_[deprecated]"
>config() [deprecated]</a></dt>

<dd>
<p>[version 0.22]</p>

<p>With a single argument <code>$key</code>, returns the value associated with that key in the <code>Config.pm</code> hash, including any changes the author or user has specified.</p>

<p>With <code>$key</code> and <code>$value</code> arguments, sets the value for future callers of <code>config($key)</code>.</p>

<p>With no arguments, returns a hash reference containing all such key-value pairs. This usage is deprecated, though, because it&#39;s a resource hog and violates encapsulation.</p>

<dt><a name='config_data'></a><a name="config_data($name)"
>config_data($name)</a></dt>

<dd>
<dt><a name='config_data'></a><a name="config_data($name_=&#62;_$value)"
>config_data($name =&#62; $value)</a></dt>

<dd>
<p>[version 0.26]</p>

<p>With a single argument, returns the value of the configuration variable <code>$name</code>. With two arguments, sets the given configuration variable to the given value. The value may be any Perl scalar that&#39;s serializable with <code>Data::Dumper</code>. For instance, if you write a module that can use a MySQL or PostgreSQL back-end, you might create configuration variables called <code>mysql_connect</code> and <code>postgres_connect</code>, and set each to an array of connection parameters for <code>DBI-&#62;connect()</code>.</p>

<p>Configuration values set in this way using the Module::Build object will be available for querying during the build/test process and after installation via the generated <code>...::ConfigData</code> module, as <code>...::ConfigData-&#62;config($name)</code>.</p>

<p>The <a href="#feature($name)" class="podlinkpod"
>feature()</a> and <code>config_data()</code> methods represent Module::Build&#39;s main support for configuration of installed modules. See also <a href="/~leont/Module-Build-0.40/lib/Module/Build/Authoring.pod#SAVING_CONFIGURATION_INFORMATION" class="podlinkpod"
>&#34;SAVING CONFIGURATION INFORMATION&#34; in Module::Build::Authoring</a>.</p>

<dt><a name='conflicts'></a><a name="conflicts()"
>conflicts()</a></dt>

<dd>
<p>[version 0.21]</p>

<p>Returns a hash reference indicating the <code>conflicts</code> prerequisites that were passed to the <code>new()</code> method.</p>

<dt><a name='contains_pod'></a><a name="contains_pod($file)_[deprecated]"
>contains_pod($file) [deprecated]</a></dt>

<dd>
<p>[version 0.20]</p>

<p>[Deprecated] Please see <a href="/~leont/Module-Build-0.40/lib/Module/Build/ModuleInfo.pm" class="podlinkpod"
>Module::Build::ModuleInfo</a> instead.</p>

<p>Returns true if the given file appears to contain POD documentation. Currently this checks whether the file has a line beginning with &#39;=pod&#39;, &#39;=head&#39;, or &#39;=item&#39;, but the exact semantics may change in the future.</p>

<dt><a name='copy_if_modified'></a><a name="copy_if_modified(%parameters)"
>copy_if_modified(%parameters)</a></dt>

<dd>
<p>[version 0.19]</p>

<p>Takes the file in the <code>from</code> parameter and copies it to the file in the <code>to</code> parameter, or the directory in the <code>to_dir</code> parameter, if the file has changed since it was last copied (or if it doesn&#39;t exist in the new location). By default the entire directory structure of <code>from</code> will be copied into <code>to_dir</code>; an optional <code>flatten</code> parameter will copy into <code>to_dir</code> without doing so.</p>

<p>Returns the path to the destination file, or <code>undef</code> if nothing needed to be copied.</p>

<p>Any directories that need to be created in order to perform the copying will be automatically created.</p>

<p>The destination file is set to read-only. If the source file has the executable bit set, then the destination file will be made executable.</p>

<dt><a name='create_build_script'></a><a name="create_build_script()"
>create_build_script()</a></dt>

<dd>
<p>[version 0.05]</p>

<p>Creates an executable script called <code>Build</code> in the current directory that will be used to execute further user actions. This script is roughly analogous (in function, not in form) to the Makefile created by <code>ExtUtils::MakeMaker</code>. This method also creates some temporary data in a directory called <code>_build/</code>. Both of these will be removed when the <code>realclean</code> action is performed.</p>

<p>Among the files created in <code>_build/</code> is a <em>_build/prereqs</em> file containing the set of prerequisites for this distribution, as a hash of hashes. This file may be <code>eval()</code>-ed to obtain the authoritative set of prerequisites, which might be different from the contents of <em>META.yml</em> (because <em>Build.PL</em> might have set them dynamically). But fancy developers take heed: do not put any fancy custom runtime code in the <em>_build/prereqs</em> file, leave it as a static declaration containing only strings and numbers. Similarly, do not alter the structure of the internal <code>$self-&#62;{properties}{requires}</code> (etc.) data members, because that&#39;s where this data comes from.</p>

<dt><a name='current_action'></a><a name="current_action()"
>current_action()</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Returns the name of the currently-running action, such as &#34;build&#34; or &#34;test&#34;. This action is not necessarily the action that was originally invoked by the user. For example, if the user invoked the &#34;test&#34; action, current_action() would initially return &#34;test&#34;. However, action &#34;test&#34; depends on action &#34;code&#34;, so current_action() will return &#34;code&#34; while that dependency is being executed. Once that action has completed, current_action() will again return &#34;test&#34;.</p>

<p>If you need to know the name of the original action invoked by the user, see <a href="#invoked_action()" class="podlinkpod"
>&#34;invoked_action()&#34;</a> below.</p>

<dt><a name='depends_on'></a><a name="depends_on(@actions)"
>depends_on(@actions)</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Invokes the named action or list of actions in sequence. Using this method is preferred to calling the action explicitly because it performs some internal record-keeping, and it ensures that the same action is not invoked multiple times (note: in future versions of Module::Build it&#39;s conceivable that this run-only-once mechanism will be changed to something more intelligent).</p>

<p>Note that the name of this method is something of a misnomer; it should really be called something like <code>invoke_actions_unless_already_invoked()</code> or something, but for better or worse (perhaps better!) we were still thinking in <code>make</code>-like dependency terms when we created this method.</p>

<p>See also <a href="#dispatch($action,_%args)" class="podlinkpod"
>dispatch()</a>. The main distinction between the two is that <code>depends_on()</code> is meant to call an action from inside another action, whereas <code>dispatch()</code> is meant to set the very top action in motion.</p>

<dt><a name='dir_contains'></a><a name="dir_contains($first_dir,_$second_dir)"
>dir_contains($first_dir, $second_dir)</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Returns true if the first directory logically contains the second directory. This is just a convenience function because <code>File::Spec</code> doesn&#39;t really provide an easy way to figure this out (but <code>Path::Class</code> does...).</p>

<dt><a name='dispatch'></a><a name="dispatch($action,_%args)"
>dispatch($action, %args)</a></dt>

<dd>
<p>[version 0.03]</p>

<p>Invokes the build action <code>$action</code>. Optionally, a list of options and their values can be passed in. This is equivalent to invoking an action at the command line, passing in a list of options.</p>

<p>Custom options that have not been registered must be passed in as a hash reference in a key named &#34;args&#34;:</p>

<pre class="sh_perl">  $build-&#62;dispatch(&#39;foo&#39;, verbose =&#62; 1, args =&#62; { my_option =&#62; &#39;value&#39; });</pre>

<p>This method is intended to be used to programmatically invoke build actions, e.g. by applications controlling Module::Build-based builds rather than by subclasses.</p>

<p>See also <a href="#depends_on(@actions)" class="podlinkpod"
>depends_on()</a>. The main distinction between the two is that <code>depends_on()</code> is meant to call an action from inside another action, whereas <code>dispatch()</code> is meant to set the very top action in motion.</p>

<dt><a name='dist_dir'></a><a name="dist_dir()"
>dist_dir()</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Returns the name of the directory that will be created during the <code>dist</code> action. The name is derived from the <code>dist_name</code> and <code>dist_version</code> properties.</p>

<dt><a name='dist_name'></a><a name="dist_name()"
>dist_name()</a></dt>

<dd>
<p>[version 0.21]</p>

<p>Returns the name of the current distribution, as passed to the <code>new()</code> method in a <code>dist_name</code> or modified <code>module_name</code> parameter.</p>

<dt><a name='dist_version'></a><a name="dist_version()"
>dist_version()</a></dt>

<dd>
<p>[version 0.21]</p>

<p>Returns the version of the current distribution, as determined by the <code>new()</code> method from a <code>dist_version</code>, <code>dist_version_from</code>, or <code>module_name</code> parameter.</p>

<dt><a name='do_system'></a><a name="do_system($cmd,_@args)"
>do_system($cmd, @args)</a></dt>

<dd>
<p>[version 0.21]</p>

<p>This is a fairly simple wrapper around Perl&#39;s <code>system()</code> built-in command. Given a command and an array of optional arguments, this method will print the command to <code>STDOUT</code>, and then execute it using Perl&#39;s <code>system()</code>. It returns true or false to indicate success or failure (the opposite of how <code>system()</code> works, but more intuitive).</p>

<p>Note that if you supply a single argument to <code>do_system()</code>, it will/may be processed by the system&#39;s shell, and any special characters will do their special things. If you supply multiple arguments, no shell will get involved and the command will be executed directly.</p>

<dt><a name='feature'></a><a name="feature($name)"
>feature($name)</a></dt>

<dd>
<dt><a name='feature'></a><a name="feature($name_=&#62;_$value)"
>feature($name =&#62; $value)</a></dt>

<dd>
<p>[version 0.26]</p>

<p>With a single argument, returns true if the given feature is set. With two arguments, sets the given feature to the given boolean value. In this context, a &#34;feature&#34; is any optional functionality of an installed module. For instance, if you write a module that could optionally support a MySQL or PostgreSQL backend, you might create features called <code>mysql_support</code> and <code>postgres_support</code>, and set them to true/false depending on whether the user has the proper databases installed and configured.</p>

<p>Features set in this way using the Module::Build object will be available for querying during the build/test process and after installation via the generated <code>...::ConfigData</code> module, as <code>...::ConfigData-&#62;feature($name)</code>.</p>

<p>The <code>feature()</code> and <code>config_data()</code> methods represent Module::Build&#39;s main support for configuration of installed modules. See also <a href="/~leont/Module-Build-0.40/lib/Module/Build/Authoring.pod#SAVING_CONFIGURATION_INFORMATION" class="podlinkpod"
>&#34;SAVING CONFIGURATION INFORMATION&#34; in Module::Build::Authoring</a>.</p>

<dt><a name='fix_shebang_line'></a><a name="fix_shebang_line(@files)"
>fix_shebang_line(@files)</a></dt>

<dd>
<p>[version 0.??]</p>

<p>Modify any &#34;shebang&#34; line in the specified files to use the path to the perl executable being used for the current build. Files are modified in-place. The existing shebang line must have a command that contains &#34;<code>perl</code>&#34;; arguments to the command do not count. In particular, this means that the use of <code>#!/usr/bin/env perl</code> will not be changed.</p>

<p>For an explanation of shebang lines, see <a href="http://en.wikipedia.org/wiki/Shebang_%28Unix%29" class="podlinkurl"
>http://en.wikipedia.org/wiki/Shebang_%28Unix%29</a>.</p>

<dt><a name='have_c_compiler'></a><a name="have_c_compiler()"
>have_c_compiler()</a></dt>

<dd>
<p>[version 0.21]</p>

<p>Returns true if the current system seems to have a working C compiler. We currently determine this by attempting to compile a simple C source file and reporting whether the attempt was successful.</p>

<dt><a name='install_base_relpaths'></a><a name="install_base_relpaths()"
>install_base_relpaths()</a></dt>

<dd>
<dt><a name='install_base_relpaths'></a><a name="install_base_relpaths($type)"
>install_base_relpaths($type)</a></dt>

<dd>
<dt><a name='install_base_relpaths'></a><a name="install_base_relpaths($type_=&#62;_$path)"
>install_base_relpaths($type =&#62; $path)</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Set or retrieve the relative paths that are appended to <code>install_base</code> for any installable element. This is useful if you want to set the relative install path for custom build elements.</p>

<p>With no argument, it returns a reference to a hash containing all elements and their respective values. This hash should not be modified directly; use the multiple argument below form to change values.</p>

<p>The single argument form returns the value associated with the element <code>$type</code>.</p>

<p>The multiple argument form allows you to set the paths for element types. <code>$value</code> must be a relative path using Unix-like paths. (A series of directories separated by slashes, e.g. <code>foo/bar</code>.) The return value is a localized path based on <code>$value</code>.</p>

<p>Assigning the value <code>undef</code> to an element causes it to be removed.</p>

<dt><a name='install_destination'></a><a name="install_destination($type)"
>install_destination($type)</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Returns the directory in which items of type <code>$type</code> (e.g. <code>lib</code>, <code>arch</code>, <code>bin</code>, or anything else returned by the <a href="#install_types()" class="podlinkpod"
>&#34;install_types()&#34;</a> method) will be installed during the <code>install</code> action. Any settings for <code>install_path</code>, <code>install_base</code>, and <code>prefix</code> are taken into account when determining the return value.</p>

<dt><a name='install_path'></a><a name="install_path()"
>install_path()</a></dt>

<dd>
<dt><a name='install_path'></a><a name="install_path($type)"
>install_path($type)</a></dt>

<dd>
<dt><a name='install_path'></a><a name="install_path($type_=&#62;_$path)"
>install_path($type =&#62; $path)</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Set or retrieve paths for specific installable elements. This is useful when you want to examine any explicit install paths specified by the user on the command line, or if you want to set the install path for a specific installable element based on another attribute like <code>install_base()</code>.</p>

<p>With no argument, it returns a reference to a hash containing all elements and their respective values. This hash should not be modified directly; use the multiple argument below form to change values.</p>

<p>The single argument form returns the value associated with the element <code>$type</code>.</p>

<p>The multiple argument form allows you to set the paths for element types. The supplied <code>$path</code> should be an absolute path to install elements of <code>$type</code>. The return value is <code>$path</code>.</p>

<p>Assigning the value <code>undef</code> to an element causes it to be removed.</p>

<dt><a name='install_types'></a><a name="install_types()"
>install_types()</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Returns a list of installable types that this build knows about. These types each correspond to the name of a directory in <em>blib/</em>, and the list usually includes items such as <code>lib</code>, <code>arch</code>, <code>bin</code>, <code>script</code>, <code>libdoc</code>, <code>bindoc</code>, and if HTML documentation is to be built, <code>libhtml</code> and <code>binhtml</code>. Other user-defined types may also exist.</p>

<dt><a name='invoked_action'></a><a name="invoked_action()"
>invoked_action()</a></dt>

<dd>
<p>[version 0.28]</p>

<p>This is the name of the original action invoked by the user. This value is set when the user invokes <em>Build.PL</em>, the <em>Build</em> script, or programmatically through the <a href="#dispatch($action,_%args)" class="podlinkpod"
>dispatch()</a> method. It does not change as sub-actions are executed as dependencies are evaluated.</p>

<p>To get the name of the currently executing dependency, see <a href="#current_action()" class="podlinkpod"
>&#34;current_action()&#34;</a> above.</p>

<dt><a name='notes'></a><a name="notes()"
>notes()</a></dt>

<dd>
<dt><a name='notes'></a><a name="notes($key)"
>notes($key)</a></dt>

<dd>
<dt><a name='notes'></a><a name="notes($key_=&#62;_$value)"
>notes($key =&#62; $value)</a></dt>

<dd>
<p>[version 0.20]</p>

<p>The <code>notes()</code> value allows you to store your own persistent information about the build, and to share that information among different entities involved in the build. See the example in the <code>current()</code> method.</p>

<p>The <code>notes()</code> method is essentially a glorified hash access. With no arguments, <code>notes()</code> returns the entire hash of notes. With one argument, <code>notes($key)</code> returns the value associated with the given key. With two arguments, <code>notes($key, $value)</code> sets the value associated with the given key to <code>$value</code> and returns the new value.</p>

<p>The lifetime of the <code>notes</code> data is for &#34;a build&#34; - that is, the <code>notes</code> hash is created when <code>perl Build.PL</code> is run (or when the <code>new()</code> method is run, if the Module::Build Perl API is being used instead of called from a shell), and lasts until <code>perl Build.PL</code> is run again or the <code>clean</code> action is run.</p>

<dt><a name='orig_dir'></a><a name="orig_dir()"
>orig_dir()</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Returns a string containing the working directory that was in effect before the <em>Build</em> script chdir()-ed into the <code>base_dir</code>. This might be useful for writing wrapper tools that might need to chdir() back out.</p>

<dt><a name='os_type'></a><a name="os_type()"
>os_type()</a></dt>

<dd>
<p>[version 0.04]</p>

<p>If you&#39;re subclassing Module::Build and some code needs to alter its behavior based on the current platform, you may only need to know whether you&#39;re running on Windows, Unix, MacOS, VMS, etc., and not the fine-grained value of Perl&#39;s <code>$^O</code> variable. The <code>os_type()</code> method will return a string like <code>Windows</code>, <code>Unix</code>, <code>MacOS</code>, <code>VMS</code>, or whatever is appropriate. If you&#39;re running on an unknown platform, it will return <code>undef</code> - there shouldn&#39;t be many unknown platforms though.</p>

<dt><a name='is_vmsish'></a><a name="is_vmsish()"
>is_vmsish()</a></dt>

<dd>
<dt><a name='is_windowsish'></a><a name="is_windowsish()"
>is_windowsish()</a></dt>

<dd>
<dt><a name='is_unixish'></a><a name="is_unixish()"
>is_unixish()</a></dt>

<dd>
<p>Convenience functions that return a boolean value indicating whether this platform behaves respectively like VMS, Windows, or Unix. For arbitrary reasons other platforms don&#39;t get their own such functions, at least not yet.</p>

<dt><a name='prefix_relpaths'></a><a name="prefix_relpaths()"
>prefix_relpaths()</a></dt>

<dd>
<dt><a name='prefix_relpaths'></a><a name="prefix_relpaths($installdirs)"
>prefix_relpaths($installdirs)</a></dt>

<dd>
<dt><a name='prefix_relpaths'></a><a name="prefix_relpaths($installdirs,_$type)"
>prefix_relpaths($installdirs, $type)</a></dt>

<dd>
<dt><a name='prefix_relpaths'></a><a name="prefix_relpaths($installdirs,_$type_=&#62;_$path)"
>prefix_relpaths($installdirs, $type =&#62; $path)</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Set or retrieve the relative paths that are appended to <code>prefix</code> for any installable element. This is useful if you want to set the relative install path for custom build elements.</p>

<p>With no argument, it returns a reference to a hash containing all elements and their respective values as defined by the current <code>installdirs</code> setting.</p>

<p>With a single argument, it returns a reference to a hash containing all elements and their respective values as defined by <code>$installdirs</code>.</p>

<p>The hash returned by the above calls should not be modified directly; use the three-argument below form to change values.</p>

<p>The two argument form returns the value associated with the element <code>$type</code>.</p>

<p>The multiple argument form allows you to set the paths for element types. <code>$value</code> must be a relative path using Unix-like paths. (A series of directories separated by slashes, e.g. <code>foo/bar</code>.) The return value is a localized path based on <code>$value</code>.</p>

<p>Assigning the value <code>undef</code> to an element causes it to be removed.</p>

<dt><a name='get_metadata'></a><a name="get_metadata()"
>get_metadata()</a></dt>

<dd>
<p>[version 0.36]</p>

<p>This method returns a hash reference of metadata that can be used to create a YAML datastream. It is provided for authors to override or customize the fields of <em>META.yml</em>. E.g.</p>

<pre class="sh_perl">  package My::Builder;
  use base &#39;Module::Build&#39;;

  sub get_metadata {
    my $self, @args = @_;
    my $data = $self-&#62;SUPER::get_metadata(@args);
    $data-&#62;{custom_field} = &#39;foo&#39;;
    return $data;
  }</pre>

<p>Valid arguments include:</p>

<ul>
<li><code>fatal</code> -- indicates whether missing required metadata fields should be a fatal error or not. For META creation, it generally should, but for MYMETA creation for end-users, it should not be fatal.</li>

<li><code>auto</code> -- indicates whether any necessary configure_requires should be automatically added. This is used in META creation.</li>
</ul>

<p>This method is a wrapper around the old prepare_metadata API now that we no longer use YAML::Node to hold metadata.</p>

<dt><a name='prepare_metadata'></a><a name="prepare_metadata()_[deprecated]"
>prepare_metadata() [deprecated]</a></dt>

<dd>
<p>[version 0.36]</p>

<p>[Deprecated] As of 0.36, authors should use <code>get_metadata</code> instead. This method is preserved for backwards compatibility only.</p>

<p>It takes three positional arguments: a hashref (to which metadata will be added), an optional arrayref (to which metadata keys will be added in order if the arrayref exists), and a hashref of arguments (as provided to get_metadata). The latter argument is new as of 0.36. Earlier versions are always fatal on errors.</p>

<p>Prior to version 0.36, this method took a YAML::Node as an argument to hold assembled metadata.</p>

<dt><a name='prereq_failures'></a><a name="prereq_failures()"
>prereq_failures()</a></dt>

<dd>
<p>[version 0.11]</p>

<p>Returns a data structure containing information about any failed prerequisites (of any of the types described above), or <code>undef</code> if all prerequisites are met.</p>

<p>The data structure returned is a hash reference. The top level keys are the type of prerequisite failed, one of &#34;requires&#34;, &#34;build_requires&#34;, &#34;conflicts&#34;, or &#34;recommends&#34;. The associated values are hash references whose keys are the names of required (or conflicting) modules. The associated values of those are hash references indicating some information about the failure. For example:</p>

<pre class="sh_perl">  {
   have =&#62; &#39;0.42&#39;,
   need =&#62; &#39;0.59&#39;,
   message =&#62; &#39;Version 0.42 is installed, but we need version 0.59&#39;,
  }</pre>

<p>or</p>

<pre class="sh_perl">  {
   have =&#62; &#39;&#60;none&#62;&#39;,
   need =&#62; &#39;0.59&#39;,
   message =&#62; &#39;Prerequisite Foo isn&#39;t installed&#39;,
  }</pre>

<p>This hash has the same structure as the hash returned by the <code>check_installed_status()</code> method, except that in the case of &#34;conflicts&#34; dependencies we change the &#34;need&#34; key to &#34;conflicts&#34; and construct a proper message.</p>

<p>Examples:</p>

<pre class="sh_perl">  # Check a required dependency on Foo::Bar
  if ( $build-&#62;prereq_failures-&#62;{requires}{Foo::Bar} ) { ...

  # Check whether there were any failures
  if ( $build-&#62;prereq_failures ) { ...

  # Show messages for all failures
  my $failures = $build-&#62;prereq_failures;
  while (my ($type, $list) = each %$failures) {
    while (my ($name, $hash) = each %$list) {
      print &#34;Failure for $name: $hash-&#62;{message}\n&#34;;
    }
  }</pre>

<dt><a name='prereq_data'></a><a name="prereq_data()"
>prereq_data()</a></dt>

<dd>
<p>[version 0.32]</p>

<p>Returns a reference to a hash describing all prerequisites. The keys of the hash will be the various prerequisite types (&#39;requires&#39;, &#39;build_requires&#39;, &#39;configure_requires&#39;, &#39;recommends&#39;, or &#39;conflicts&#39;) and the values will be references to hashes of module names and version numbers. Only prerequisites types that are defined will be included. The <code>prereq_data</code> action is just a thin wrapper around the <code>prereq_data()</code> method and dumps the hash as a string that can be loaded using <code>eval()</code>.</p>

<dt><a name='prereq_report'></a><a name="prereq_report()"
>prereq_report()</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Returns a human-readable (table-form) string showing all prerequisites, the versions required, and the versions actually installed. This can be useful for reviewing the configuration of your system prior to a build, or when compiling data to send for a bug report. The <code>prereq_report</code> action is just a thin wrapper around the <code>prereq_report()</code> method.</p>

<dt><a name='prompt'></a><a name="prompt($message,_$default)"
>prompt($message, $default)</a></dt>

<dd>
<p>[version 0.12]</p>

<p>Asks the user a question and returns their response as a string. The first argument specifies the message to display to the user (for example, <code>&#34;Where do you keep your money?&#34;</code>). The second argument, which is optional, specifies a default answer (for example, <code>&#34;wallet&#34;</code>). The user will be asked the question once.</p>

<p>If <code>prompt()</code> detects that it is not running interactively and there is nothing on STDIN or if the PERL_MM_USE_DEFAULT environment variable is set to true, the $default will be used without prompting.</p>

<p>To prevent automated processes from blocking, the user must either set PERL_MM_USE_DEFAULT or attach something to STDIN (this can be a pipe/file containing a scripted set of answers or /dev/null.)</p>

<p>If no $default is provided an empty string will be used instead. In non-interactive mode, the absence of $default is an error (though explicitly passing <code>undef()</code> as the default is valid as of 0.27.)</p>

<p>This method may be called as a class or object method.</p>

<dt><a name='recommends'></a><a name="recommends()"
>recommends()</a></dt>

<dd>
<p>[version 0.21]</p>

<p>Returns a hash reference indicating the <code>recommends</code> prerequisites that were passed to the <code>new()</code> method.</p>

<dt><a name='requires'></a><a name="requires()"
>requires()</a></dt>

<dd>
<p>[version 0.21]</p>

<p>Returns a hash reference indicating the <code>requires</code> prerequisites that were passed to the <code>new()</code> method.</p>

<dt><a name='rscan_dir'></a><a name="rscan_dir($dir,_$pattern)"
>rscan_dir($dir, $pattern)</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Uses <code>File::Find</code> to traverse the directory <code>$dir</code>, returning a reference to an array of entries matching <code>$pattern</code>. <code>$pattern</code> may either be a regular expression (using <code>qr//</code> or just a plain string), or a reference to a subroutine that will return true for wanted entries. If <code>$pattern</code> is not given, all entries will be returned.</p>

<p>Examples:</p>

<pre class="sh_perl"> # All the *.pm files in lib/
 $m-&#62;rscan_dir(&#39;lib&#39;, qr/\.pm$/)

 # All the files in blib/ that aren&#39;t *.html files
 $m-&#62;rscan_dir(&#39;blib&#39;, sub {-f $_ and not /\.html$/});

 # All the files in t/
 $m-&#62;rscan_dir(&#39;t&#39;);</pre>

<dt><a name='runtime_params'></a><a name="runtime_params()"
>runtime_params()</a></dt>

<dd>
<dt><a name='runtime_params'></a><a name="runtime_params($key)"
>runtime_params($key)</a></dt>

<dd>
<p>[version 0.28]</p>

<p>The <code>runtime_params()</code> method stores the values passed on the command line for valid properties (that is, any command line options for which <code>valid_property()</code> returns a true value). The value on the command line may override the default value for a property, as well as any value specified in a call to <code>new()</code>. This allows you to programmatically tell if <code>perl Build.PL</code> or any execution of <code>./Build</code> had command line options specified that override valid properties.</p>

<p>The <code>runtime_params()</code> method is essentially a glorified read-only hash. With no arguments, <code>runtime_params()</code> returns the entire hash of properties specified on the command line. With one argument, <code>runtime_params($key)</code> returns the value associated with the given key.</p>

<p>The lifetime of the <code>runtime_params</code> data is for &#34;a build&#34; - that is, the <code>runtime_params</code> hash is created when <code>perl Build.PL</code> is run (or when the <code>new()</code> method is called, if the Module::Build Perl API is being used instead of called from a shell), and lasts until <code>perl Build.PL</code> is run again or the <code>clean</code> action is run.</p>

<dt><a name='script_files'></a><a name="script_files()"
>script_files()</a></dt>

<dd>
<p>[version 0.18]</p>

<p>Returns a hash reference whose keys are the perl script files to be installed, if any. This corresponds to the <code>script_files</code> parameter to the <code>new()</code> method. With an optional argument, this parameter may be set dynamically.</p>

<p>For backward compatibility, the <code>scripts()</code> method does exactly the same thing as <code>script_files()</code>. <code>scripts()</code> is deprecated, but it will stay around for several versions to give people time to transition.</p>

<dt><a name='up_to_date'></a><a name="up_to_date($source_file,_$derived_file)"
>up_to_date($source_file, $derived_file)</a></dt>

<dd>
<dt><a name='up_to_date'></a><a name="up_to_date(\@source_files,_\@derived_files)"
>up_to_date(\@source_files, \@derived_files)</a></dt>

<dd>
<p>[version 0.20]</p>

<p>This method can be used to compare a set of source files to a set of derived files. If any of the source files are newer than any of the derived files, it returns false. Additionally, if any of the derived files do not exist, it returns false. Otherwise it returns true.</p>

<p>The arguments may be either a scalar or an array reference of file names.</p>

<dt><a name='y_n'></a><a name="y_n($message,_$default)"
>y_n($message, $default)</a></dt>

<dd>
<p>[version 0.12]</p>

<p>Asks the user a yes/no question using <code>prompt()</code> and returns true or false accordingly. The user will be asked the question repeatedly until they give an answer that looks like &#34;yes&#34; or &#34;no&#34;.</p>

<p>The first argument specifies the message to display to the user (for example, <code>&#34;Shall I invest your money for you?&#34;</code>), and the second argument specifies the default answer (for example, <code>&#34;y&#34;</code>).</p>

<p>Note that the default is specified as a string like <code>&#34;y&#34;</code> or <code>&#34;n&#34;</code>, and the return value is a Perl boolean value like 1 or 0. I thought about this for a while and this seemed like the most useful way to do it.</p>

<p>This method may be called as a class or object method.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Autogenerated_Accessors"
>Autogenerated Accessors</a></h2>

<p>In addition to the aforementioned methods, there are also some get/set accessor methods for the following properties:</p>

<dl>
<dt><a name='PL_files'></a><a name="PL_files()"
>PL_files()</a></dt>

<dd>
<dt><a name='allow_mb_mismatch'></a><a name="allow_mb_mismatch()"
>allow_mb_mismatch()</a></dt>

<dd>
<dt><a name='auto_configure_requires'></a><a name="auto_configure_requires()"
>auto_configure_requires()</a></dt>

<dd>
<dt><a name='autosplit'></a><a name="autosplit()"
>autosplit()</a></dt>

<dd>
<dt><a name='base_dir'></a><a name="base_dir()"
>base_dir()</a></dt>

<dd>
<dt><a name='bindoc_dirs'></a><a name="bindoc_dirs()"
>bindoc_dirs()</a></dt>

<dd>
<dt><a name='blib'></a><a name="blib()"
>blib()</a></dt>

<dd>
<dt><a name='build_bat'></a><a name="build_bat()"
>build_bat()</a></dt>

<dd>
<dt><a name='build_class'></a><a name="build_class()"
>build_class()</a></dt>

<dd>
<dt><a name='build_elements'></a><a name="build_elements()"
>build_elements()</a></dt>

<dd>
<dt><a name='build_requires'></a><a name="build_requires()"
>build_requires()</a></dt>

<dd>
<dt><a name='build_script'></a><a name="build_script()"
>build_script()</a></dt>

<dd>
<dt><a name='bundle_inc'></a><a name="bundle_inc()"
>bundle_inc()</a></dt>

<dd>
<dt><a name='bundle_inc_preload'></a><a name="bundle_inc_preload()"
>bundle_inc_preload()</a></dt>

<dd>
<dt><a name='c_source'></a><a name="c_source()"
>c_source()</a></dt>

<dd>
<dt><a name='config_dir'></a><a name="config_dir()"
>config_dir()</a></dt>

<dd>
<dt><a name='configure_requires'></a><a name="configure_requires()"
>configure_requires()</a></dt>

<dd>
<dt><a name='conflicts'></a><a name="conflicts()"
>conflicts()</a></dt>

<dd>
<dt><a name='cpan_client'></a><a name="cpan_client()"
>cpan_client()</a></dt>

<dd>
<dt><a name='create_license'></a><a name="create_license()"
>create_license()</a></dt>

<dd>
<dt><a name='create_makefile_pl'></a><a name="create_makefile_pl()"
>create_makefile_pl()</a></dt>

<dd>
<dt><a name='create_packlist'></a><a name="create_packlist()"
>create_packlist()</a></dt>

<dd>
<dt><a name='create_readme'></a><a name="create_readme()"
>create_readme()</a></dt>

<dd>
<dt><a name='debug'></a><a name="debug()"
>debug()</a></dt>

<dd>
<dt><a name='debugger'></a><a name="debugger()"
>debugger()</a></dt>

<dd>
<dt><a name='destdir'></a><a name="destdir()"
>destdir()</a></dt>

<dd>
<dt><a name='dynamic_config'></a><a name="dynamic_config()"
>dynamic_config()</a></dt>

<dd>
<dt><a name='get_options'></a><a name="get_options()"
>get_options()</a></dt>

<dd>
<dt><a name='html_css'></a><a name="html_css()"
>html_css()</a></dt>

<dd>
<dt><a name='include_dirs'></a><a name="include_dirs()"
>include_dirs()</a></dt>

<dd>
<dt><a name='install_base'></a><a name="install_base()"
>install_base()</a></dt>

<dd>
<dt><a name='installdirs'></a><a name="installdirs()"
>installdirs()</a></dt>

<dd>
<dt><a name='libdoc_dirs'></a><a name="libdoc_dirs()"
>libdoc_dirs()</a></dt>

<dd>
<dt><a name='license'></a><a name="license()"
>license()</a></dt>

<dd>
<dt><a name='magic_number'></a><a name="magic_number()"
>magic_number()</a></dt>

<dd>
<dt><a name='mb_version'></a><a name="mb_version()"
>mb_version()</a></dt>

<dd>
<dt><a name='meta_add'></a><a name="meta_add()"
>meta_add()</a></dt>

<dd>
<dt><a name='meta_merge'></a><a name="meta_merge()"
>meta_merge()</a></dt>

<dd>
<dt><a name='metafile'></a><a name="metafile()"
>metafile()</a></dt>

<dd>
<dt><a name='metafile2'></a><a name="metafile2()"
>metafile2()</a></dt>

<dd>
<dt><a name='module_name'></a><a name="module_name()"
>module_name()</a></dt>

<dd>
<dt><a name='mymetafile'></a><a name="mymetafile()"
>mymetafile()</a></dt>

<dd>
<dt><a name='mymetafile2'></a><a name="mymetafile2()"
>mymetafile2()</a></dt>

<dd>
<dt><a name='needs_compiler'></a><a name="needs_compiler()"
>needs_compiler()</a></dt>

<dd>
<dt><a name='orig_dir'></a><a name="orig_dir()"
>orig_dir()</a></dt>

<dd>
<dt><a name='perl'></a><a name="perl()"
>perl()</a></dt>

<dd>
<dt><a name='pm_files'></a><a name="pm_files()"
>pm_files()</a></dt>

<dd>
<dt><a name='pod_files'></a><a name="pod_files()"
>pod_files()</a></dt>

<dd>
<dt><a name='pollute'></a><a name="pollute()"
>pollute()</a></dt>

<dd>
<dt><a name='prefix'></a><a name="prefix()"
>prefix()</a></dt>

<dd>
<dt><a name='prereq_action_types'></a><a name="prereq_action_types()"
>prereq_action_types()</a></dt>

<dd>
<dt><a name='program_name'></a><a name="program_name()"
>program_name()</a></dt>

<dd>
<dt><a name='quiet'></a><a name="quiet()"
>quiet()</a></dt>

<dd>
<dt><a name='recommends'></a><a name="recommends()"
>recommends()</a></dt>

<dd>
<dt><a name='recurse_into'></a><a name="recurse_into()"
>recurse_into()</a></dt>

<dd>
<dt><a name='recursive_test_files'></a><a name="recursive_test_files()"
>recursive_test_files()</a></dt>

<dd>
<dt><a name='requires'></a><a name="requires()"
>requires()</a></dt>

<dd>
<dt><a name='scripts'></a><a name="scripts()"
>scripts()</a></dt>

<dd>
<dt><a name='sign'></a><a name="sign()"
>sign()</a></dt>

<dd>
<dt><a name='tap_harness_args'></a><a name="tap_harness_args()"
>tap_harness_args()</a></dt>

<dd>
<dt><a name='test_file_exts'></a><a name="test_file_exts()"
>test_file_exts()</a></dt>

<dd>
<dt><a name='use_rcfile'></a><a name="use_rcfile()"
>use_rcfile()</a></dt>

<dd>
<dt><a name='use_tap_harness'></a><a name="use_tap_harness()"
>use_tap_harness()</a></dt>

<dd>
<dt><a name='verbose'></a><a name="verbose()"
>verbose()</a></dt>

<dd>
<dt><a name='xs_files'></a><a name="xs_files()"
>xs_files()</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MODULE_METADATA"
>MODULE METADATA <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you would like to add other useful metadata, <code>Module::Build</code> supports this with the <code>meta_add</code> and <code>meta_merge</code> arguments to <a href="#new()" class="podlinkpod"
>&#34;new()&#34;</a>. The authoritative list of supported metadata can be found at <a href="/perldoc?CPAN%3A%3AMETA%3A%3ASpec" class="podlinkpod"
>CPAN::META::Spec</a> but for convenience - here are a few of the more useful ones:</p>

<dl>
<dt><a name="keywords"
>keywords</a></dt>

<dd>
<p>For describing the distribution using keyword (or &#34;tags&#34;) in order to make CPAN.org indexing and search more efficient and useful.</p>

<dt><a name="resources"
>resources</a></dt>

<dd>
<p>A list of additional resources available for users of the distribution. This can include links to a homepage on the web, a bug tracker, the repository location, and even a subscription page for the distribution mailing list.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Ken Williams &#60;kwilliams@cpan.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2001-2006 Ken Williams. All rights reserved.</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perl(1), <a href="/~leont/Module-Build-0.40/lib/Module/Build.pm" class="podlinkpod"
>Module::Build</a>(3), <a href="/~leont/Module-Build-0.40/lib/Module/Build/Authoring.pod" class="podlinkpod"
>Module::Build::Authoring</a>(3), <a href="/~leont/Module-Build-0.40/lib/Module/Build/Cookbook.pm" class="podlinkpod"
>Module::Build::Cookbook</a>(3), <a href="/perldoc?ExtUtils%3A%3AMakeMaker" class="podlinkpod"
>ExtUtils::MakeMaker</a>(3)</p>

<p><em>META.yml</em> Specification: <a href="/perldoc?CPAN%3A%3AMETA%3A%3ASpec" class="podlinkpod"
>CPAN::META::Spec</a></p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78066 Uploads, 24686 Distributions
105900 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Document']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Document']);
    });
  });
</script>
<!-- Sun Apr 22 09:21:50 2012 GMT (0.319474935531616) @cpansearch1 -->
 </body>
</html>
