<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Proc::Simple - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Proc-Simple",3]);
    _gaq.push(["_setCustomVar",5,"Release","Proc-Simple-1.30",3]);
    _gaq.push(["_setCustomVar",3,"Module","Proc::Simple",3]);
    _gaq.push(["_setCustomVar",1,"Author","MSCHILLI",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Proc::Simple">permalink</a></div>
  <a href="/~mschilli/">Michael Schilli</a> &gt;
  <a href="/~mschilli/Proc-Simple-1.30/">Proc-Simple-1.30</a> &gt;
  Proc::Simple
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/57604f4f5170e143dd45ec8c93608e63?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/M/MS/MSCHILLI/Proc-Simple-1.30.tar.gz">Proc-Simple-1.30.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Proc%3A%3ASimple;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~MSCHILLI/Proc-Simple-1.30/Simple.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Net%3A%3ASNMP">Net::SNMP</a><br>
<a href="/perldoc?Proc%3A%3AReliable">Proc::Reliable</a><br>
<a href="/perldoc?Win32%3A%3AProcess">Win32::Process</a><br>
<a href="/perldoc?File%3A%3AFind">File::Find</a><br>
<a href="/perldoc?Proc%3A%3AShort">Proc::Short</a><br>
<a href="/perldoc?Proc%3A%3ASafePipe">Proc::SafePipe</a><br>
<a href="/perldoc?HTML%3A%3ATokeParser">HTML::TokeParser</a><br>
<a href="/perldoc?Proc%3A%3AFork">Proc::Fork</a><br>
<a href="/perldoc?Proc%3A%3ABackground">Proc::Background</a><br>
<a href="/perldoc?IPC%3A%3ARun">IPC::Run</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Proc%3A%3ASimple">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 4</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Proc-Simple">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.30 &nbsp;
<span class="noprint">
  <a href="/src/MSCHILLI/Proc-Simple-1.30/Simple.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <li class='indexItem indexItem1'><a href='#NOTE'>NOTE</a>
  <li class='indexItem indexItem1'><a href='#Shell_Processes'>Shell Processes</a>
  <li class='indexItem indexItem1'><a href='#Contributors'>Contributors</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#LICENSE'>LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Proc::Simple -- launch and control background processes</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">   use Proc::Simple;

   $myproc = Proc::Simple-&#62;new();        # Create a new process object

   $myproc-&#62;start(&#34;shell-command-line&#34;); # Launch an external program
   $myproc-&#62;start(&#34;command&#34;,             # Launch an external program
                  &#34;param&#34;, ...);         # with parameters
                                        
   $myproc-&#62;start(sub { ... });          # Launch a perl subroutine
   $myproc-&#62;start(\&#38;subroutine);         # Launch a perl subroutine
   $myproc-&#62;start(\&#38;subroutine,          # Launch a perl subroutine
                  $param, ...);          # with parameters

   $running = $myproc-&#62;poll();           # Poll Running Process

   $exit_status = $myproc-&#62;wait();       # Wait until process is done

   $proc-&#62;kill_on_destroy(1);            # Set kill on destroy
   $proc-&#62;signal_on_destroy(&#34;KILL&#34;);     # Specify signal to be sent
                                         # on destroy

   $myproc-&#62;kill();                      # Kill Process (SIGTERM)



   $myproc-&#62;kill(&#34;SIGUSR1&#34;);             # Send specified signal

   $myproc-&#62;exit_status();               # Return exit status of process


   Proc::Simple::debug($level);          # Turn debug on</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Proc::Simple package provides objects mimicing real-life processes from a user&#39;s point of view. A new process object is created by</p>

<pre class="sh_perl">   $myproc = Proc::Simple-&#62;new();</pre>

<p>Either external programs or perl subroutines can be launched and controlled as processes in the background.</p>

<p>A 10-second sleep process, for example, can be launched as an external program as in</p>

<pre class="sh_perl">   $myproc-&#62;start(&#34;/bin/sleep 10&#34;);    # or
   $myproc-&#62;start(&#34;/bin/sleep&#34;, &#34;10&#34;);</pre>

<p>or as a perl subroutine, as in</p>

<pre class="sh_perl">   sub mysleep { sleep(shift); }    # Define mysleep()
   $myproc-&#62;start(\&#38;mysleep, 10);   # Launch it.</pre>

<p>or even as</p>

<pre class="sh_perl">   $myproc-&#62;start(sub { sleep(10); });</pre>

<p>The <i>start</i> Method returns immediately after starting the specified process in background, i.e. there&#39;s no blocking. It returns <i>1</i> if the process has been launched successfully and <i>0</i> if not.</p>

<p>The <i>poll</i> method checks if the process is still running</p>

<pre class="sh_perl">   $running = $myproc-&#62;poll();</pre>

<p>and returns <i>1</i> if it is, <i>0</i> if it&#39;s not. Finally,</p>

<pre class="sh_perl">   $myproc-&#62;kill();</pre>

<p>terminates the process by sending it the SIGTERM signal. As an option, another signal can be specified.</p>

<pre class="sh_perl">   $myproc-&#62;kill(&#34;SIGUSR1&#34;);</pre>

<p>sends the SIGUSR1 signal to the running process. <i>kill</i> returns <i>1</i> if it succeeds in sending the signal, <i>0</i> if it doesn&#39;t.</p>

<p>The methods are discussed in more detail in the next section.</p>

<p>A destructor is provided so that a signal can be sent to the forked processes automatically should the process object be destroyed or if the process exits. By default this behaviour is turned off (see the kill_on_destroy and signal_on_destroy methods).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following methods are available:</p>

<dl>
<dt><a name='new'></a><a name="new_(Constructor)"
>new (Constructor)</a></dt>

<dd>
<p>Create a new instance of this class by writing</p>

<pre class="sh_perl">  $proc = new Proc::Simple;</pre>

<p>or</p>

<pre class="sh_perl">  $proc = Proc::Simple-&#62;new();</pre>

<p>It takes no arguments.</p>

<dt><a name="start"
>start</a></dt>

<dd>
<p>Launches a new process. The <code>start()</code> method can be used to launch both external programs (like <code>/bin/echo</code>) or one of your self-defined subroutines (like <code>foo()</code>) in a new process.</p>

<p>For an external program to be started, call</p>

<pre class="sh_perl"> $status = $proc-&#62;start(&#34;program-name&#34;);</pre>

<p>If you want to pass a couple of parameters to the launched program, there&#39;s two options: You can either pass them in one argument like in</p>

<pre class="sh_perl"> $status = $proc-&#62;start(&#34;/bin/echo hello world&#34;);</pre>

<p>or in several arguments like in</p>

<pre class="sh_perl"> $status = $proc-&#62;start(&#34;/bin/echo&#34;, &#34;hello&#34;, &#34;world&#34;);</pre>

<p>Just as in Perl&#39;s function <code>system()</code>, there&#39;s a big difference between the two methods: If you provide one argument containing a blank-separated command line, your shell is going to process any meta-characters (if you choose to use some) before the process is actually launched:</p>

<pre class="sh_perl"> $status = $proc-&#62;start(&#34;/bin/ls -l /etc/initt*&#34;);</pre>

<p>will expand <code>/etc/initt*</code> to <code>/etc/inittab</code> before running the <code>ls</code> command. If, on the other hand, you say</p>

<pre class="sh_perl"> $status = $proc-&#62;start(&#34;/bin/ls&#34;, &#34;-l&#34;, &#34;*&#34;);</pre>

<p>the <code>*</code> will stay unexpanded, meaning you&#39;ll look for a file with the literal name <code>*</code> (which is unlikely to exist on your system unless you deliberately create confusingly named files :). For more info on this, look up <code>perldoc -f exec</code>.</p>

<p>If, on the other hand, you want to start a Perl subroutine in the background, simply provide the function reference like</p>

<pre class="sh_perl"> $status = $proc-&#62;start(\&#38;your_function);</pre>

<p>or supply an unnamed subroutine:</p>

<pre class="sh_perl"> $status = $proc-&#62;start( sub { sleep(1) } );</pre>

<p>You can also provide additional parameters to be passed to the function:</p>

<pre class="sh_perl"> $status = $proc-&#62;start(\&#38;printme, &#34;hello&#34;, &#34;world&#34;);</pre>

<p>The <i>start</i> Method returns immediately after starting the specified process in background, i.e. non-blocking mode. It returns <i>1</i> if the process has been launched successfully and <i>0</i> if not.</p>

<dt><a name="poll"
>poll</a></dt>

<dd>
<p>The <i>poll</i> method checks if the process is still running</p>

<pre class="sh_perl">   $running = $myproc-&#62;poll();</pre>

<p>and returns <i>1</i> if it is, <i>0</i> if it&#39;s not.</p>

<dt><a name="kill"
>kill</a></dt>

<dd>
<p>The kill() method:</p>

<pre class="sh_perl">   $myproc-&#62;kill();</pre>

<p>terminates the process by sending it the SIGTERM signal. As an option, another signal can be specified.</p>

<pre class="sh_perl">   $myproc-&#62;kill(&#34;SIGUSR1&#34;);</pre>

<p>sends the SIGUSR1 signal to the running process. <i>kill</i> returns <i>1</i> if it succeeds in sending the signal, <i>0</i> if it doesn&#39;t.</p>

<dt><a name="kill_on_destroy"
>kill_on_destroy</a></dt>

<dd>
<p>Set a flag to determine whether the process attached to this object should be killed when the object is destroyed. By default, this flag is set to false. The current value is returned.</p>

<pre class="sh_perl">  $current = $proc-&#62;kill_on_destroy;
  $proc-&#62;kill_on_destroy(1); # Set flag to true
  $proc-&#62;kill_on_destroy(0); # Set flag to false</pre>

<dt><a name="signal_on_destroy"
>signal_on_destroy</a></dt>

<dd>
<p>Method to set the signal that will be sent to the process when the object is destroyed (Assuming kill_on_destroy is true). Returns the current setting.</p>

<pre class="sh_perl">  $current = $proc-&#62;signal_on_destroy;
  $proc-&#62;signal_on_destroy(&#34;KILL&#34;);</pre>

<dt><a name="redirect_output"
>redirect_output</a></dt>

<dd>
<p>Redirects stdout and/or stderr output to a file. Specify undef to leave the stderr/stdout handles of the process alone.</p>

<pre class="sh_perl">  # stdout to a file, left stderr unchanged
  $proc-&#62;redirect_output (&#34;/tmp/someapp.stdout&#34;, undef);
  
  # stderr to a file, left stdout unchanged
  $proc-&#62;redirect_output (undef, &#34;/tmp/someapp.stderr&#34;);
  
  # stdout and stderr to a separate file
  $proc-&#62;redirect_output (&#34;/tmp/someapp.stdout&#34;, &#34;/tmp/someapp.stderr&#34;);</pre>

<p>Call this method before running the start method.</p>

<dt><a name="pid"
>pid</a></dt>

<dd>
<p>Returns the pid of the forked process associated with this object</p>

<pre class="sh_perl">  $pid = $proc-&#62;pid;</pre>

<dt><a name="t0"
>t0</a></dt>

<dd>
<p>Returns the start time() of the forked process associated with this object</p>

<pre class="sh_perl">  $t0 = $proc-&#62;t0();</pre>

<dt><a name="t1"
>t1</a></dt>

<dd>
<p>Returns the stop time() of the forked process associated with this object</p>

<pre class="sh_perl">  $t1 = $proc-&#62;t1();</pre>

<dt><a name='DESTROY'></a><a name="DESTROY_(Destructor)"
>DESTROY (Destructor)</a></dt>

<dd>
<p>Object destructor. This method is called when the object is destroyed (eg with &#34;undef&#34; or on exiting perl). If kill_on_destroy is true the process associated with the object is sent the signal_on_destroy signal (SIGTERM if undefined).</p>

<dt><a name="exit_status"
>exit_status</a></dt>

<dd>
<p>Returns the exit status of the process as the $! variable indicates. If the process is still running, <code>undef</code> is returned.</p>

<dt><a name="wait"
>wait</a></dt>

<dd>
<p>The <i>wait</i> method:</p>

<pre class="sh_perl">   $exit_status = $myproc-&#62;wait();</pre>

<p>waits until the process is done and returns its exit status.</p>

<dt><a name="debug"
>debug</a></dt>

<dd>
<p>Switches debug messages on and off -- Proc::Simple::debug(1) switches them on, Proc::Simple::debug(0) keeps Proc::Simple quiet.</p>

<dt><a name="cleanup"
>cleanup</a></dt>

<dd>
<p>Proc::Simple keeps around data of terminated processes, e.g. you can check via <code>t0()</code> and <code>t1()</code> how long a process ran, even if it&#39;s long gone. Over time, this data keeps occupying more and more memory and if you have a long-running program, you might want to run <code>Proc::Simple-&#62;cleanup()</code> every once in a while to get rid of data pertaining to processes no longer in use.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTE"
>NOTE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Please keep in mind that there is no guarantee that the SIGTERM signal really terminates a process. Processes can have signal handlers defined that avoid the shutdown. If in doubt, whether a process still exists, check it repeatedly with the <i>poll</i> routine after sending the signal.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Shell_Processes"
>Shell Processes <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you pass a shell program to Proc::Simple, it&#39;ll use <code>exec()</code> to launch it. As noted in Perl&#39;s <code>exec()</code> manpage, simple commands for the one-argument version of <code>exec()</code> will be passed to <code>execvp()</code> directly, while commands containing characters like <code>;</code> or <code>*</code> will be passed to a shell to make sure those get the shell expansion treatment.</p>

<p>This has the interesting side effect that if you launch something like</p>

<pre class="sh_perl">    $p-&#62;start(&#34;./womper *&#34;);</pre>

<p>then you&#39;ll see two processes in your process list:</p>

<pre class="sh_perl">    $ ps auxww | grep womper
    mschilli  9126 11:21 0:00 sh -c ./womper *
    mschilli  9127 11:21 0:00 /usr/local/bin/perl -w ./womper ...</pre>

<p>A regular <code>kill()</code> on the process PID would only kill the first process, but Proc::Simple&#39;s <code>kill()</code> will use a negative signal and send it to the first process (9126). Since it has marked the process as a process group leader when it created it previously (via setsid()), this will cause both processes above to receive the signal sent by <code>kill()</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Contributors"
>Contributors <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Tim Jenness &#60;t.jenness@jach.hawaii.edu&#62; did kill_on_destroy/signal_on_destroy/pid</p>

<p>Mark R. Southern &#60;mark_southern@merck.com&#62; worked on EXIT_STATUS tracking</p>

<p>Tobias Jahn &#60;tjahn@users.sourceforge.net&#62; added redirection to stdout/stderr</p>

<p>Clauss Strauch &#60;Clauss_Strauch@aquila.fac.cs.cmu.edu&#62; suggested the multi-arg start()-methods.</p>

<p>Chip Capelik contributed a patch with the wait() method.</p>

<p>Jeff Holt provided a patch for time tracking with t0() and t1().</p>

<p>Brad Cavanagh fixed RT33440 (unreliable $?)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    1996, Mike Schilli &#60;cpan@perlmeister.com&#62;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE"
>LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 1996-2011 by Mike Schilli, all rights reserved. This program is free software, you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78283 Uploads, 24725 Distributions
106015 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 06:44:20 2012 GMT (0.095818042755127) @cpansearch1 -->
 </body>
</html>
