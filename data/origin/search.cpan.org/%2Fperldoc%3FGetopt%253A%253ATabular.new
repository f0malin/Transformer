<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Getopt::Tabular - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Getopt-Tabular",3]);
    _gaq.push(["_setCustomVar",5,"Release","Getopt-Tabular-0.3",3]);
    _gaq.push(["_setCustomVar",3,"Module","Getopt::Tabular",3]);
    _gaq.push(["_setCustomVar",1,"Author","GWARD",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Getopt::Tabular">permalink</a></div>
  <a href="/~gward/">Greg Ward</a> &gt;
  <a href="/~gward/Getopt-Tabular-0.3/">Getopt-Tabular-0.3</a> &gt;
  Getopt::Tabular
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/6d8e296937e7f5887f8518201c7b322a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/G/GW/GWARD/Getopt-Tabular-0.3.tar.gz">Getopt-Tabular-0.3.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Getopt%3A%3ATabular;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~GWARD/Getopt-Tabular-0.3/Tabular.pod">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Getopt%3A%3ATiny">Getopt::Tiny</a><br>
<a href="/perldoc?Getopt%3A%3ALong">Getopt::Long</a><br>
<a href="/perldoc?Getopt%3A%3AGetArgs">Getopt::GetArgs</a><br>
<a href="/perldoc?Getopt%3A%3AStd">Getopt::Std</a><br>
<a href="/perldoc?Getopt%3A%3AArgvFile">Getopt::ArgvFile</a><br>
<a href="/perldoc?Getopt%3A%3ASimple">Getopt::Simple</a><br>
<a href="/perldoc?Getopt%3A%3ARegex">Getopt::Regex</a><br>
<a href="/perldoc?Getopt%3A%3AAttribute">Getopt::Attribute</a><br>
<a href="/perldoc?Getopt%3A%3ADeclare">Getopt::Declare</a><br>
<a href="/perldoc?CGI%3A%3AApplication">CGI::Application</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Getopt%3A%3ATabular">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Getopt-Tabular">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.3 &nbsp;
<span class="noprint">
  <a href="/src/GWARD/Getopt-Tabular-0.3/Tabular.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#FEATURES'>FEATURES</a>
  <li class='indexItem indexItem1'><a href='#BASIC_OPERATION'>BASIC OPERATION</a>
  <li class='indexItem indexItem1'><a href='#OPTION_TABLE_ENTRIES'>OPTION TABLE ENTRIES</a>
  <li class='indexItem indexItem1'><a href='#OPTION_TYPES'>OPTION TYPES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Argument-driven_option_types'>Argument-driven option types</a>
    <li class='indexItem indexItem2'><a href='#Constant-valued_option_types'>Constant-valued option types</a>
    <li class='indexItem indexItem2'><a href='#Other_option_types'>Other option types</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#ERROR_HANDLING'>ERROR HANDLING</a>
  <li class='indexItem indexItem1'><a href='#HELP_TEXT'>HELP TEXT</a>
  <li class='indexItem indexItem1'><a href='#SPOOF_MODE'>SPOOF MODE</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Getopt::Tabular - table-driven argument parsing for Perl 5</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use Getopt::Tabular;</pre>

<p>(or)</p>

<pre class="sh_perl">    use Getopt::Tabular qw/GetOptions 
                           SetHelp SetHelpOption 
                           SetError GetError/;

    ...

    &#38;Getopt::Tabular::SetHelp (long_help, usage_string);

    @opt_table = (
                  [section_description, &#34;section&#34;],
                  [option, type, num_values, option_data, help_string],
                  ...
                 );
    &#38;GetOptions (\@opt_table, \@ARGV [, \@newARGV]) || exit 1;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>Getopt::Tabular</b> is a Perl 5 module for table-driven argument parsing, vaguely inspired by John Ousterhout&#39;s Tk_ParseArgv. All you really need to do to use the package is set up a table describing all your command-line options, and call &#38;GetOptions with three arguments: a reference to your option table, a reference to <code>@ARGV</code> (or something like it), and an optional third array reference (say, to <code>@newARGV</code>). &#38;GetOptions will process all arguments in <code>@ARGV</code>, and copy any leftover arguments (i.e. those that are not options or arguments to some option) to the <code>@newARGV</code> array. (If the <code>@newARGV</code> argument is not supplied, <code>GetOptions</code> will replace <code>@ARGV</code> with the stripped-down argument list.) If there are any invalid options, <code>GetOptions</code> will print an error message and return 0.</p>

<p>Before I tell you all about why Getopt::Tabular is a wonderful thing, let me explain some of the terminology that will keep popping up here.</p>

<dl>
<dt><a name="argument"
>argument</a></dt>

<dd>
<p>any single word appearing on the command-line, i.e. one element of the <code>@ARGV</code> array.</p>

<dt><a name="option"
>option</a></dt>

<dd>
<p>an argument that starts with a certain sequence of characters; the default is &#34;-&#34;. (If you like GNU-style options, you can change this to &#34;--&#34;.) In most Getopt::Tabular-based applications, options can come anywhere on the command line, and their order is unimportant (unless one option overrides a previous option). Also, Getopt::Tabular will allow any non-ambiguous abbreviation of options.</p>

<dt><a name='option'></a><a name="option_argument"
>option argument</a></dt>

<dd>
<p>(or <i>value</i>) an argument that immediately follows certain types of options. For instance, if <code>-foo</code> is a scalar-valued integer option, and <code>-foo 3</code> appears on the command line, then <code>3</code> will be the argument to <code>-foo</code>.</p>

<dt><a name='option'></a><a name="option_type"
>option type</a></dt>

<dd>
<p>controls how <code>GetOptions</code> deals with an option and the arguments that follow it. (Actually, for most option types, the type interacts with the <code>num_values</code> field, which determines whether the option is scalar- or vector-valued. This will be fully explained in due course.)</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FEATURES"
>FEATURES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Now for the advertising, i.e. why Getopt::Tabular is a good thing.</p>

<ul>
<li>Command-line arguments are carefully type-checked, both by pattern and number---e.g. if an option requires two integers, GetOptions makes sure that exactly two integers follow it!</li>

<li>The valid command-line arguments are specified in a data structure separate from the call to GetOptions; this makes it easier to have very long lists of options, and to parse options from multiple sources (e.g. the command line, an environment variable, and a configuration file).</li>

<li>Getopt::Tabular can intelligently generate help text based on your option descriptions.</li>

<li>The type system is extensible, and if you can define your desired argument type using a single Perl regular expression then it&#39;s particularly easy to extend.</li>

<li>To make your program look smarter, options can be abbreviated and come in any order.</li>

<li>
<pre class="sh_perl"> You can parse options in a &#34;spoof&#34; mode that has no side-effects -- this
is useful for making a validation pass over the command line without
actually doing anything.</pre>
</li>
</ul>

<p>In general, I have found that Getopt::Tabular tends to encourage programs with long lists of sophisticated options, leading to great flexibility, intelligent operation, and the potential for insanely long command lines.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BASIC_OPERATION"
>BASIC OPERATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The basic operation of Getopt::Tabular is driven by an <i>option table</i>, which is just a list of <i>option descriptions</i> (otherwise known as option table entries, or just entries). Each option description tells <code>GetOptions</code> everything it needs to know when it encounters a particular option on the command line. For instance,</p>

<pre class="sh_perl">    [&#34;-foo&#34;, &#34;integer&#34;, 2, \@Foo, &#34;set the foo values&#34;]</pre>

<p>means that whenever <code>-foo</code> is seen on the command line, <code>GetOptions</code> is to make sure that the next two arguments are integers, and copy them into the caller&#39;s <code>@Foo</code> array. (Well, really into the <code>@Foo</code> array where the option table is defined. This is almost always the same as <code>GetOptions</code>&#39; caller, though.)</p>

<p>Typically, you&#39;ll group a bunch of option descriptions together like this:</p>

<pre class="sh_perl">    @options = 
        ([&#34;-range&#34;, &#34;integer&#34;, 2, \@Range, 
          &#34;set the range of allowed values&#34;],
         [&#34;-file&#34;, &#34;string&#34;, 1, \$File,
           &#34;set the output file&#34;],
         [&#34;-clobber&#34;, &#34;boolean&#34;, 0, \$Clobber,
           &#34;clobber existing files&#34;], 
         ...
        );</pre>

<p>and then call <code>GetOptions</code> like this:</p>

<pre class="sh_perl">    &#38;GetOptions (\@options, \@ARGV) || exit 1;</pre>

<p>which replaces <code>@ARGV</code> with a new array containing all the arguments left-over after options and their arguments have been removed. You can also call <code>GetOptions</code> with three arguments, like this:</p>

<pre class="sh_perl">    &#38;GetOptions (\@options, \@ARGV, \@newARGV) || exit 1;</pre>

<p>in which case <code>@ARGV</code> is untouched, and <code>@newARGV</code> gets the leftover arguments.</p>

<p>In case of error, <code>GetOptions</code> prints enough information for the user to figure out what&#39;s going wrong. If you supply one, it&#39;ll even print out a brief usage message in case of error. Thus, it&#39;s enough to just <code>exit 1</code> when <code>GetOptions</code> indicates an error by returning 0.</p>

<p>Detailed descriptions of the contents of an option table entry are given next, followed by the complete run-down of available types, full details on error handling, and how help text is generated.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OPTION_TABLE_ENTRIES"
>OPTION TABLE ENTRIES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The fields in the option table control how arguments are parsed, so it&#39;s important to understand each one in turn. First, the format of entries in the table is fairly rigid, even though this isn&#39;t really necessary with Perl. It&#39;s done that way to make the Getopt::Tabular code a little easier; the drawback is that some entries will have unused values (e.g. the <code>num_values</code> field is never used for boolean options, but you still have to put something there as a place-holder). The fields are as follows:</p>

<dl>
<dt><a name="option"
>option</a></dt>

<dd>
<p>This is the option name, e.g. &#34;-verbose&#34; or &#34;-some_value&#34;. For most option types, this is simply an option prefix followed by text; for boolean options, however, it can be a little more complicated. (The exact rules are discussed under <a href="#OPTION_TYPES" class="podlinkpod"
>&#34;OPTION TYPES&#34;</a>.) And yes, even though you tell Getopt::Tabular the valid option prefixes, you still have to put one onto the option names in the table.</p>

<dt><a name="type"
>type</a></dt>

<dd>
<p>The option type decides what action will be taken when this option is seen on the command line, and (if applicable) what sort of values will be accepted for this option. There are three broad classes of types: those that imply copying data from the command line into some variable in the caller&#39;s space; those that imply copying constant data into the caller&#39;s space without taking any more arguments from the command line; and those that imply some other action to be taken. The available option types are covered in greater detail below (see <a href="#OPTION_TYPES" class="podlinkpod"
>&#34;OPTION TYPES&#34;</a>), but briefly: <code>string</code>, <code>integer</code>, and <code>float</code> all imply copying values from the command line to a variable; <code>constant</code>, <code>boolean</code>, <code>copy</code>, <code>arrayconst</code>, and <code>hashconst</code> all imply copying some pre-defined data into a variable; <code>call</code> and <code>eval</code> allow the execution of some arbitrary subroutine or chunk of code; and <code>help</code> options will cause <code>GetOptions</code> to print out all available help text and return 0.</p>

<dt><a name="num_values"
>num_values</a></dt>

<dd>
<p>for <code>string</code>, <code>integer</code>, and <code>float</code> options, this determines whether the option is a scalar (<b>num_values</b> = 1) or vector (<b>num_values</b> &#62; 1) option. (Note that whether the option is scalar- or vector-valued has an important influence on what you must supply in the <b>option_data</b> field!) For <code>constant</code>, <code>copy</code>, <code>arrayconst</code>, and <code>hashconst</code> option types, <b>num_values</b> is a bit of a misnomer: it actually contains the value (or a reference to it, if array or hash) to be copied when the option is encountered. For <code>call</code> options, <b>num_values</b> can be used to supply extra arguments to the called subroutine. In any case, though, you can think of <b>num_values</b> as an input value. For <code>boolean</code> and <code>eval</code> options, <b>num_values</b> is ignored and should be <code>undef</code> or 0.</p>

<dt><a name="option_data"
>option_data</a></dt>

<dd>
<p>For <code>string</code>, <code>integer</code>, <code>float</code>, <code>boolean</code>, <code>constant</code>, <code>copy</code>, <code>arrayconst</code>, and <code>hashconst</code> types, this must be a reference to the variable into which you want <code>GetOptions</code> to copy the appropriate thing. The &#34;appropriate thing&#34; is either the argument(s) following the option, the constant supplied as <b>num_values</b>, or 1 or 0 (for boolean options).</p>

<p>For <code>boolean</code>, <code>constant</code>, <code>copy</code>, and scalar-valued <code>string</code>, <code>integer</code>, and <code>float</code> options, this must be a scalar reference. For vector-valued <code>string</code>, <code>integer</code>, and <code>float</code> options (<b>num_values</b> &#62; 1), and for <code>arrayconst</code> options, this must be an array reference. For <code>hashconst</code> options, this must be a hash reference.</p>

<p>Finally, <b>option_data</b> is also used as an input value for <code>call</code> and <code>eval</code> options: for <code>call</code>, it should be a subroutine reference, and for <code>eval</code> options, it should be a string containing valid Perl code to evaluate when the option is seen. The subroutine called by a <code>call</code> option should take at least two arguments: a string, which is the actual option that triggered the call (because the same subroutine could be tied to many options), and an array reference, which contains all command line arguments after that option. (Further arguments can be supplied in the <b>num_values</b> field.) The subroutine may freely modify this array, and those modifications will affect the behaviour of <code>GetOptions</code> afterwards.</p>

<p>The chunk of code passed to an <code>eval</code> option is evaluated in the package from which <code>GetOptions</code> is called, and does not have access to any internal Getopt::Tabular data.</p>

<dt><a name="help_string"
>help_string</a></dt>

<dd>
<p>(optional) a brief description of the option. Don&#39;t worry about formatting this in any way; when <code>GetOptions</code> has to print out your help, it will do so quite nicely without any intervention. If the help string is not defined, then that option will not be included in the option help text. (However, you could supply an empty string -- which is defined -- to make <code>GetOptions</code> just print out the option name, but nothing else.)</p>

<dt><a name="arg_desc"
>arg_desc</a></dt>

<dd>
<p>(optional) an even briefer description of the values that you expect to follow your option. This is mainly used to supply place-holders in the help string, and is specified separately so that <code>GetOptions</code> can act fairly intelligently when formatting a help message. See <a href="#HELP_TEXT" class="podlinkpod"
>&#34;HELP TEXT&#34;</a> for more information.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OPTION_TYPES"
>OPTION TYPES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The option type field is the single-most important field in the table, as the type for an option <code>-foo</code> determines (along with <b>num_values</b>) what action <code>GetOptions</code> takes when it sees <code>-foo</code> on the command line: how many following arguments become <code>-foo</code>&#39;s arguments, what regular expression those arguments must conform to, or whether some other action should be taken.</p>

<p>As mentioned above, there are three main classes of argument types:</p>

<dl>
<dt><a name='argument'></a><a name="argument-driven_options"
>argument-driven options</a></dt>

<dd>
<p>These are options that imply taking one or more option arguments from the command line after the option itself is taken. The arguments are then copied into some variable supplied (by reference) in the option table entry.</p>

<dt><a name='constant'></a><a name="constant-valued_options"
>constant-valued options</a></dt>

<dd>
<p>These are options that have a constant value associated with them; when the option is seen on the command line, that constant is copied to some variable in the caller&#39;s space. (Both the constant and the value are supplied in the option table entry.) Constants can be scalars, arrays, or hashes.</p>

<dt><a name='other'></a><a name="other_options"
>other options</a></dt>

<dd>
<p>These imply some other action to be taken, usually supplied as a string to <code>eval</code> or a subroutine to call.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Argument-driven_option_types"
>Argument-driven option types</a></h2>

<dl>
<dt><a name='string'></a><a name="string,_integer,_float"
>string, integer, float</a></dt>

<dd>
<p>These are the option types that imply &#34;option arguments&#34;, i.e. arguments after the option that will be consumed when that option is encountered on the command line and copied into the caller&#39;s space via some reference. For instance, if you want an option <code>-foo</code> to take a single string as an argument, with that string being copied to the scalar variable <code>$Foo</code>, then you would have this entry in your option table:</p>

<pre class="sh_perl">    [&#34;-foo&#34;, &#34;string&#34;, 1, \$Foo]</pre>

<p>(For conciseness, I&#39;ve omitted the <b>help_string</b> and <b>argdesc</b> entries in all of the example entries in this section. In reality, you should religiously supply help text in order to make your programs easier to use and easier to maintain.)</p>

<p>If <b>num_values</b> is some <i>n</i> greater than one, then the <b>option_data</b> field must be an <i>array</i> reference, and <i>n</i> arguments are copied from the command line into that array. (The array is clobbered each time <code>-foo</code> is encountered, not appended to.) In this case, <code>-foo</code> is referred to as a <i>vector-valued</i> option, as it must be followed by a fixed number of arguments. (Eventually, I plan to add <i>list-valued</i> options, which take a variable number of arguments.) For example an option table like</p>

<pre class="sh_perl">    [&#34;-foo&#34;, &#34;string&#34;, 3, \@Foo]</pre>

<p>would result in the <code>@Foo</code> array being set to the three strings immediately following any <code>-foo</code> option on the command line.</p>

<p>The only difference between <b>string</b>, <b>integer</b>, and <b>float</b> options is how picky <code>GetOptions</code> is about the value(s) it will accept. For <b>string</b> options, anything is OK; for <b>integer</b> options, the values must look like integers (i.e., they must match <code>/[+-]?\d+/</code>); for <b>float</b> options, the values must look like C floating point numbers (trust me, you don&#39;t want to see the regexp for this). Note that since string options will accept anything, they might accidentally slurp up arguments that are meant to be further options, if the user forgets to put the correct string. For instance, if <code>-foo</code> and <code>-bar</code> are both scalar-valued string options, and the arguments <code>-foo -bar</code> are seen on the command-line, then &#34;-bar&#34; will become the argument to <code>-foo</code>, and never be processed as an option itself. (This could be construed as either a bug or a feature. If you feel really strongly that it&#39;s a bug, then complain and I&#39;ll consider doing something about it.)</p>

<p>If not enough arguments are found that match the required regular expression, <code>GetOptions</code> prints to standard error a clear and useful error message, followed by the usage summary (if you supplied one), and returns 0. The error messages look something like &#34;-foo option must be followed by an integer&#34;, or &#34;-foo option must be followed by 3 strings&#34;, so it really is enough for your program to <code>exit 1</code> without printing any further message.</p>

<dt><a name='User'></a><a name="User-defined_patterns"
>User-defined patterns</a></dt>

<dd>
<p>Since the three option types described above are defined by nothing more than a regular expression, it&#39;s easy to define your own option types. For instance, let&#39;s say you want an option to accept only strings of upper-case letters. You could then call <code>&#38;Getopt::Tabular::AddPatternType</code> as follows:</p>

<pre class="sh_perl">    &#38;Getopt::Tabular::AddPatternType
      (&#34;upperstring&#34;, &#34;[A-Z]+&#34;, &#34;uppercase string&#34;)</pre>

<p>Note that the third parameter is optional, and is only supplied to make error messages clearer. For instance, if you now have a scalar-valued option <code>-zap</code> of type <code>upperstring</code>:</p>

<pre class="sh_perl">   [&#34;-zap&#34;, &#34;upperstring&#34;, 1, \$Zap]</pre>

<p>and the user gets it wrong and puts an argument that doesn&#39;t consist of all uppercase letters after <code>-zap</code>, then <code>GetOptions</code> will complain that &#34;-zap option must be followed by an uppercase string&#34;. If you hadn&#39;t supplied the third argument to <code>&#38;AddType</code>, then the error message would have been the slightly less helpful &#34;-zap option must be followed by an upperstring&#34;. Also, you might have to worry about how <code>GetOptions</code> pluralizes your description: in this case, it will simply add an &#34;s&#34;, which works fine much of the time, but not always. Alternately, you could supply a two-element list containing the singular and plural forms:</p>

<pre class="sh_perl">    &#38;Getopt::Tabular::AddPatternType
      (&#34;upperstring&#34;, &#34;[A-Z]+&#34;, 
        [&#34;string of uppercase letters&#34;, &#34;strings of uppercase letters&#34;])</pre>

<p>So, if <code>-zap</code> instead expects three <code>upperstring</code>s, and the user goofs, then the error message would be (in the first example) &#34;-zap option must be followed by 3 uppercase strings&#34; or &#34;-zap option must be followed by three strings of uppercase letters&#34; (second example).</p>

<p>Of course, if you don&#39;t intend to have vector-valued options of your new type, pluralization hardly matters. Also, while it might seem that this is a nice stab in the direction of multi-lingual support, the error messages are still hard-coded to English in other places. Maybe in the next version...</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Constant-valued_option_types"
>Constant-valued option types</a></h2>

<dl>
<dt><a name="boolean"
>boolean</a></dt>

<dd>
<p>For <b>boolean</b> options, <b>option_data</b> must be a scalar reference; <b>num_values</b> is ignored (you can just set it to <code>undef</code> or 0). Booleans are slightly weird in that every boolean option implies <i>two</i> possible arguments that will be accepted on the command line, called the positive and negative alternatives. The positive alternative (which is what you specify as the option name) results in a true value, while the negative alternative results in false. Most of the time, you can let <code>GetOptions</code> pick the negative alternative for you: it just inserts &#34;no&#34; after the option prefix, so &#34;-clobber&#34; becomes &#34;-noclobber&#34;. (More precisely, <code>GetOptions</code> tests all option prefixes until one of them matches at the beginning of the option name. It then inserts &#34;no&#34; between this prefix and the rest of the string. So, if you want to support both GNU-style options (like <code>--clobber</code>) and one-hyphen options (<code>-c</code>), be sure to give &#34;--&#34; <i>first</i> when setting the option patterns with <code>&#38;SetOptionPatterns</code>. Otherwise, the negative alternative to &#34;--clobber&#34; will be &#34;-no-clobber&#34;, which might not be what you wanted.) Sometimes, though, you want to explicitly specify the negative alternative. This is done by putting both alternatives in the option name, separated by a vertical bar, e.g. &#34;-verbose|-quiet&#34;.</p>

<p>For example, the above two examples might be specified as</p>

<pre class="sh_perl">    [&#34;-clobber&#34;, &#34;boolean&#34;, undef, \$Clobber],
    [&#34;-verbose|-quiet&#34;, &#34;boolean&#34;, undef, \$Verbose],...);</pre>

<p>If <code>-clobber</code> is seen on the command line, <code>$Clobber</code> will be set to 1; if <code>-noclobber</code> is seen, then <code>$Clobber</code> will be set to 0. Likewise, <code>-verbose</code> results in <code>$Verbose</code> being set to 1, and <code>-quiet</code> will set <code>$Verbose</code> to 0.</p>

<dt><a name="const"
>const</a></dt>

<dd>
<p>For <b>const</b> options, put a scalar value (<i>not</i> reference) in <b>num_values</b>, and a scalar reference in <b>option_data</b>. For example:</p>

<pre class="sh_perl">    [&#34;-foo&#34;, &#34;const&#34;, &#34;hello there&#34;, \$Foo]</pre>

<p>On encountering <code>-foo</code>, <code>GetOptions</code> will copy &#34;hello there&#34; to <code>$Foo</code>.</p>

<dt><a name="arrayconst"
>arrayconst</a></dt>

<dd>
<p>For <b>arrayconst</b> options, put an array reference (input) (<i>not</i> an array value) in <b>num_values</b>, and another array reference (output) in <b>option_data</b>. For example:</p>

<pre class="sh_perl">    [&#34;-foo&#34;, &#34;arrayconst&#34;, [3, 6, 2], \@Foo]</pre>

<p>On encountering <code>-foo</code>, <code>GetOptions</code> will copy the array <code>(3,6,2)</code> into <code>@Foo</code>.</p>

<dt><a name="hashconst"
>hashconst</a></dt>

<dd>
<p>For <b>hashconst</b> options, put a hash reference (input) (<i>not</i> a hash value) in <b>num_values</b>, and another hash reference (output) in <b>option_data</b>. For example:</p>

<pre class="sh_perl">    [&#34;-foo&#34;, &#34;hashconst&#34;, { &#34;Perl&#34;   =&#62; &#34;Larry Wall&#34;,
                            &#34;C&#34;      =&#62; &#34;Dennis Ritchie&#34;,
                            &#34;Pascal&#34; =&#62; &#34;Niklaus Wirth&#34; },
     \%Inventors]</pre>

<p>On encountering <code>-foo</code>, <code>GetOptions</code> will copy into <code>%Inventors</code> a hash relating various programming languages to the culprits primarily responsible for their invention.</p>

<dt><a name="copy"
>copy</a></dt>

<dd>
<p><b>copy</b> options act just like <b>const</b> options, except when <b>num_values</b> is undefined. In that case, the option name itself will be copied to the scalar referenced by <b>option_data</b>, rather than the <code>undef</code> value that would be copied under these circumstances with a <b>const</b> option. This is useful when one program accepts options that it simply passes to a sub-program; for instance, if <em>prog1</em> calls <em>prog2</em>, and <em>prog2</em> might be run with the -foo option, then <em>prog1</em>&#39;s argument table might have this option:</p>

<pre class="sh_perl">    [&#34;-foo&#34;, &#34;copy&#34;, undef, \$Foo, 
     &#34;run prog2 with the -foo option&#34;]</pre>

<p>and later on, you would run <em>prog2</em> like this:</p>

<pre class="sh_perl">    system (&#34;prog2 $Foo ...&#34;);</pre>

<p>That way, if <code>-foo</code> is never seen on <em>prog1</em>&#39;s command line, <code>$Foo</code> will be untouched, and will expand to the empty string when building the command line for <em>prog2</em>.</p>

<p>If <b>num_values</b> is anything other than <code>undef</code>, then <b>copy</b> options behave just like <b>constant</b> options.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Other_option_types"
>Other option types</a></h2>

<dl>
<dt><a name="call"
>call</a></dt>

<dd>
<p>For <b>call</b> options, <b>option_data</b> must be a reference to a subroutine. The subroutine will be called with at least two arguments: a string containing the option that triggered the call (because the same subroutine might be activated by many options), a reference to an array containing all remaining command-line arguments after the option, and other arguments specified using the <b>num_values</b> field. (To be used for this purpose, <b>num_values</b> must be an array reference; otherwise, it is ignored.) For example, you might define a subroutine</p>

<pre class="sh_perl">    sub process_foo
    {
       my ($opt, $args, $dest) = @_;

       $$dest = shift @$args;    # not quite right! (see below)
    }</pre>

<p>with a corresponding option table entry:</p>

<pre class="sh_perl">    [&#34;-foo&#34;, &#34;call&#34;, [\$Foo], \&#38;process_foo]</pre>

<p>and then <code>-foo</code> would act just like a scalar-valued string option that copies into <code>$Foo</code>. (Well, <i>almost</i> ... read on.)</p>

<p>A subtle point that might be missed from the above code: the value returned by <code>&#38;process_foo</code> <i>does</i> matter: if it is false, then <code>GetOptions</code> will return 0 to its caller, indicating failure. To make sure that the user gets a useful error message, you should supply one by calling <code>SetError</code>; doing so will prevent <code>GetOptions</code> from printing out a rather mysterious (to the end user, at least) message along the lines of &#34;subroutine call failed&#34;. The above example has two subtle problems: first, if the argument following <code>-foo</code> is an empty string, then <code>process_foo</code> will return the empty string---a false value---thus causing <code>GetOptions</code> to fail confusingly. Second, if there no arguments after <code>-foo</code>, then <code>process_foo</code> will return <code>undef</code>---again, a false value, causing <code>GetOptions</code> to fail.</p>

<p>To solve these problems, we have to define the requirements for the <code>-foo</code> option a little more rigorously. Let&#39;s say that any string (including the empty string) is valid, but that there must be something there. Then <code>process_foo</code> is written as follows:</p>

<pre class="sh_perl">    sub process_foo
    {
       my ($opt, $args, $dest) = @_;

       $$dest = shift @$args;
       (defined $$dest) &#38;&#38; return 1;
       &#38;Getopt::Tabular::SetError 
         (&#34;bad_foo&#34;, &#34;$opt option must be followed by a string&#34;);
       return 0;
    }</pre>

<p>The <code>SetError</code> routine actually takes two arguments: an error class and an error message. This is explained fully in the <a href="#ERROR_HANDLING" class="podlinkpod"
>&#34;ERROR HANDLING&#34;</a> section, below. And, if you find yourself writing a lot of routines like this, <code>SetError</code> is optionally exported from <code>Getopt::Tabular</code>, so you can of course import it into your main package like this:</p>

<pre class="sh_perl">    use Getopt::Tabular qw/GetOptions SetError/;</pre>

<dt><a name="eval"
>eval</a></dt>

<dd>
<p>An <b>eval</b> option specifies a chunk of Perl code to be executed (<code>eval</code>&#39;d) when the option is encountered on the command line. The code is supplied (as a string) in the <b>option_data</b> field; again, <b>num_values</b> is ignored. For example:</p>

<pre class="sh_perl">    [&#34;-foo&#34;, &#34;eval&#34;, undef, 
     &#39;print &#34;-foo seen on command line\n&#34;&#39;]</pre>

<p>will cause <code>GetOptions</code> to print out (via an <code>eval</code>) the string &#34;-foo seen on the command line\n&#34; when -foo is seen. No other action is taken apart from what you include in the eval string. The code is evaluated in the package from which <code>GetOptions</code> was called, so you can access variables and subroutines in your program easily. If any error occurs in the <code>eval</code>, <code>GetOptions</code> complains loudly and returns 0.</p>

<p>Note that the supplied code is always evaluated in a <code>no strict</code> environment---that&#39;s because <em>Getopt::Tabular</em> is itself <code>use strict</code>-compliant, and I didn&#39;t want to force strictness on every quick hack that uses the module. (Especially since <b>eval</b> options seem to be used mostly in quick hacks.) (Anyone who knows how to fetch the strictness state for another package or scope is welcome to send me hints!) However, the <b>-w</b> state is untouched.</p>

<dt><a name="section"
>section</a></dt>

<dd>
<p><b>section</b> options are just used to help formatting the help text. See <a href="#HELP_TEXT" class="podlinkpod"
>&#34;HELP TEXT&#34;</a> below for more details.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ERROR_HANDLING"
>ERROR HANDLING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Generally, handling errors in the argument list is pretty transparent: <code>GetOptions</code> (or one of its minions) generates an error message and assigns an error class, <code>GetOptions</code> prints the message to the standard error, and returns 0. You can access the error class and error message using the <code>GetError</code> routine:</p>

<pre class="sh_perl">    ($err_class, $err_msg) = &#38;Getopt::Tabular::GetError ();</pre>

<p>(Like <code>SetError</code>, <code>GetError</code> can also be exported from <em>Getopt::Tabular</em>.) The error message is pretty simple---it is an explanation for the end user of what went wrong, which is why <code>GetOptions</code> just prints it out and forgets about it. The error class is further information that might be useful for your program; the current values are:</p>

<dl>
<dt><a name="bad_option"
>bad_option</a></dt>

<dd>
<p>set when something that looks like an option is found on the command line, but it&#39;s either unknown or an ambiguous abbreviation.</p>

<dt><a name="bad_value"
>bad_value</a></dt>

<dd>
<p>set when an option is followed by an invalid argument (i.e., one that doesn&#39;t match the regexp for that type), or the wrong number of arguments.</p>

<dt><a name="bad_call"
>bad_call</a></dt>

<dd>
<p>set when a subroutine called via a <b>call</b> option or the code evaluated for an <b>eval</b> option returns a false value. The subroutine or eval&#39;d code can override this by calling <code>SetError</code> itself.</p>

<dt><a name="bad_eval"
>bad_eval</a></dt>

<dd>
<p>set when the code evaluted for an <b>eval</b> option has an error in it.</p>

<dt><a name="help"
>help</a></dt>

<dd>
<p>set when the user requests help</p>
</dd>
</dl>

<p>Note that most of these are errors on the end user&#39;s part, such as bad or missing arguments. There are also errors that can be caused by you, the programmer, such as bad or missing values in the option table; these generally result in <code>GetOptions</code> croaking so that your program dies immediately with enough information that you can figure out where the mistake is. <b>bad_eval</b> is a borderline case; there are conceivably cases where the end user&#39;s input can result in bogus code to evaluate, so I grouped this one in the &#34;user errors&#34; class. Finally, asking for help isn&#39;t really an error, but the assumption is that you probably shouldn&#39;t continue normal processing after printing out the help---so <code>GetOptions</code> returns 0 in this case. You can always fetch the error class with <code>GetError</code> if you want to treat real errors differently from help requests.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="HELP_TEXT"
>HELP TEXT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>One of Getopt::Tabular&#39;s niftier features is the ability to generate and format a pile of useful help text from the snippets of help you include in your option table. The best way to illustrate this is with a couple of brief examples. First, it&#39;s helpful to know how the user can trigger a help display. This is quite simple: by default, <code>GetOptions</code> always has a &#34;-help&#34; option, presence of which on the command line triggers a help display. (Actually, the help option is really your preferred option prefix plus &#34;help&#34;. So, if you like to make GNU-style options to take precedence as follows:</p>

<pre class="sh_perl">    &#38;Getopt::Tabular::SetOptionPatterns qw|(--)([\w-]+) (-)(\w+)|;</pre>

<p>then the help option will be &#34;--help&#34;. There is only one help option available, and you can set it by calling <code>&#38;SetHelpOption</code> (another optional export).</p>

<p>Note that in addition to the option help embedded in the option table, <code>GetOptions</code> can optionally print out two other messages: a descriptive text (usually a short paragraph giving a rough overview of what your program does, possibly referring the user to the fine manual page), and a usage text. These are both supplied by calling <code>&#38;SetHelp</code>, e.g.</p>

<pre class="sh_perl">    $Help = &#60;&#60;HELP;
    This is the foo program.  It reads one file (specified by -infile),
    operates on it some unspecified way (possibly modified by
    -threshold), and does absolutely nothing with the results.
    (The utility of the -clobber option has yet to be established.)
    HELP

    $Usage = &#60;&#60;USAGE;
    usage: foo [options]
           foo -help to list options
    USAGE

    &#38;Getopt::Tabular::SetHelp ($Help, $Usage)</pre>

<p>Note that either of the long help or usage strings may be empty, in which case <code>GetOptions</code> simply won&#39;t print them. In the case where both are supplied, the long help message is printed first, followed by the option help summary, followed by the usage. <code>GetOptions</code> inserts enough blank lines to make the output look just fine on its own, so you shouldn&#39;t pad either the long help or usage message with blanks. (It looks best if each ends with a newline, though, so setting the help strings with here-documents---as in this example---is the recommended approach.)</p>

<p>As an example of the help display generated by a typical option table, let&#39;s take a look at the following:</p>

<pre class="sh_perl">    $Verbose = 1;
    $Clobber = 0;
    undef $InFile;
    @Threshold = (0, 1);

    @argtbl = ([&#34;-verbose|-quiet&#34;, &#34;boolean&#34;, 0, \$Verbose,
                &#34;be noisy&#34;],
               [&#34;-clobber&#34;, &#34;boolean&#34;, 0, \$Clobber,
                &#34;overwrite existing files&#34;],
               [&#34;-infile&#34;, &#34;string&#34;, 1, \$InFile,
                &#34;specify the input file from which to read a large &#34; .
                &#34;and sundry variety of data, to which many &#34; .
                &#34;interesting operations will be applied&#34;, &#34;&#60;f&#62;&#34;],
               [&#34;-threshold&#34;, &#34;float&#34;, 2, \@Threshold,
                &#34;only consider values between &#60;v1&#62; and &#60;v2&#62;&#34;,
                &#34;&#60;v1&#62; &#60;v2&#62;&#34;]);</pre>

<p>Assuming you haven&#39;t supplied long help or usage strings, then when <code>GetOptions</code> encounters the help option, it will immediately stop parsing arguments and print out the following option summary:</p>

<pre class="sh_perl">    Summary of options:
       -verbose    be noisy [default]
       -quiet      opposite of -verbose
       -clobber    overwrite existing files
       -noclobber  opposite of -clobber [default]
       -infile &#60;f&#62; specify the input file from which to read a large and
                   sundry variety of data, to which many interesting
                   operations will be applied
       -threshold &#60;v1&#62; &#60;v2&#62;
                   only consider values between &#60;v1&#62; and &#60;v2&#62; [default: 0 1]</pre>

<p>There are a number of interesting things to note here. First, there are three option table fields that affect the generation of help text: <b>option</b>, <b>help_string</b>, and <b>argdesc</b>. Note how the <b>argdesc</b> strings are simply option placeholders, usually used to 1) indicate how many values are expected to follow an option, 2) (possibly) imply what form they take (although that&#39;s not really shown here), and 3) explain the exact meaning of the values in the help text. <b>argdesc</b> is just a string like the help string; you can put whatever you like in it. What I&#39;ve shown above is just my personal preference (which may well evolve).</p>

<p>A new feature with version 0.3 of Getopt::Tabular is the inclusion of default values with the help for certain options. A number of conditions must be fulfilled for this to happen for a given option: first, the option type must be one of the &#34;argument-driven&#34; types, such as <code>integer</code>, <code>float</code>, <code>string</code>, or a user-defined type. Second, the option data field must refer either to a defined scalar value (for scalar-valued options) or to a list of one or more defined values (for vector-valued options). Thus, in the above example, the <code>-infile</code> option doesn&#39;t have its default printed because the <code>$InFile</code> scalar is undefined. Likewise, if the <code>@Threshold</code> array were the empty list <code>()</code>, or a list of undefined values <code>(undef,undef)</code>, then the default value for <code>-threshold</code> also would not have been printed.</p>

<p>The formatting is done as follows: enough room is made on the right hand side for the longest option name, initially omitting the argument placeholders. Then, if an option has placeholders, and there is room for them in between the option and the help string, everything (option, placeholders, help string) is printed together. An example of this is the <code>-infile</code> option: here, &#34;-infile &#60;f&#62;&#34; is just small enough to fit in the 12-character column (10 characters because that is the length of the longest option, and 2 blanks), so the help text is placed right after it on the same line. However, the <code>-threshold</code> option becomes too long when its argument placeholders are appended to it, so the help text is pushed onto the next line.</p>

<p>In any event, the help string supplied by the caller starts at the same column, and is filled to make a nice paragraph of help. <code>GetOptions</code> will fill to the width of the terminal (or 80 columns if it fails to find the terminal width).</p>

<p>Finally, you can have pseudo entries of type <b>section</b>, which are important to make long option lists readable (and one consequence of using Getopt::Tabular is programs with ridiculously long option lists -- not altogether a bad thing, I suppose). For example, this table fragment:</p>

<pre class="sh_perl">    @argtbl = (...,
               [&#34;-foo&#34;, &#34;integer&#34;, 1, \$Foo,
                &#34;set the foo value&#34;, &#34;f&#34;],
               [&#34;-enterfoomode&#34;, &#34;call&#34;, 0, \&#38;enter_foo_mode,
                &#34;enter foo mode&#34;],
               [&#34;Non-foo related options&#34;, &#34;section&#34;],
               [&#34;-bar&#34;, &#34;string&#34;, 2, \@Bar,
                &#34;set the bar strings (which have nothing whatsoever &#34; .
                &#34;to do with foo&#34;, &#34;&#60;bar1&#62; &#60;bar2&#62;&#34;], 
               ...);</pre>

<p>results in the following chunk of help text:</p>

<pre class="sh_perl">       -foo f         set the foo value
       -enterfoomode  enter foo mode
    
    -- Non-foo related options ---------------------------------
       -bar b1 b2     set the bar strings (which have nothing
                      whatsoever to do with foo</pre>

<p>(This example also illustrates a slightly different style of argument placeholder. Take your pick, or invent your own!)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SPOOF_MODE"
>SPOOF MODE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Since callbacks from the command line (<code>call</code> and <code>eval</code> options) can do anything, they might be quite expensive. In certain cases, then, you might want to make an initial pass over the command line to ensure that everything is OK before parsing it &#34;for real&#34; and incurring all those expensive callbacks. Thus, <code>Getopt::Tabular</code> provides a &#34;spoof&#34; mode for parsing a command line without side-effects. In the simplest case, you can access spoof mode like this:</p>

<pre class="sh_perl">   use Getopt::Tabular qw(SpoofGetOptions GetOptions);
     .
     .
     .
   &#38;SpoofGetOptions (\@options, \@ARGV, \@newARGV) || exit 1;</pre>

<p>and then later on, you would call <code>GetOptions</code> with the <i>original</i> <code>@ARGV</code> (so it can do what <code>SpoofGetOptions</code> merely pretended to do):</p>

<pre class="sh_perl">   &#38;GetOptions (\@options, \@ARGV, \@newARGV) || exit 1;</pre>

<p>For most option types, any errors that <code>GetOptions</code> would catch should also be caught by <code>SpoofGetOptions</code> -- so you might initially think that you can get away without that <code>|| exit 1</code> after calling <code>GetOptions</code>. However, it&#39;s a good idea for a couple of reasons. First, you might inadvertently changed <code>@ARGV</code> -- this is usually a bug and a silly thing to do, so you&#39;d probably want your program to crash loudly rather than fail mysteriously later on. Second, and more likely, some of those expensive operations that you&#39;re initially avoiding by using <code>SpoofGetOptions</code> might themselves fail -- which would cause <code>GetOptions</code> to return false where <code>SpoofGetOption</code> completes without a problem. (Finally, there&#39;s the faint possiblity of bugs in <code>Getopt::Tabular</code> that would cause different behaviour in spoof mode and real mode -- this really shouldn&#39;t happen, though.)</p>

<p>In reality, using spoof mode requires a bit more work. In particular, the whole reason for spoof argument parsing is to avoid expensive callbacks, but since callbacks can eat any number of command line arguments, you have to emulate them in some way. It&#39;s not possible for <code>SpoofGetOptions</code> to do this for you, so you have to help out by supplying &#34;spoof&#34; callbacks. As an example, let&#39;s say you have a callback option that eats one argument (a filename) and immediately reads that file:</p>

<pre class="sh_perl">   @filedata = ();

   sub read_file
   {
      my ($opt, $args) = @_;

      warn (&#34;$opt option requires an argument\n&#34;), return 0 unless @$args;
      my $file = shift @$args;
      open (FILE, $file) ||
         (warn (&#34;$file: $!\n&#34;), return 0);
      push (@filedata, &#60;FILE&#62;);
      close (FILE);
      return 1;
   }

   @options = 
      ([&#39;-read_file&#39;, &#39;call&#39;, undef, \&#38;read_file]);</pre>

<p>Since <code>-read_file</code> could occur any number of times on the command line, we might end up reading an awful lot of files, and thus it might be a long time before we catch errors late in the command line. Thus, we&#39;d like to do a &#34;spoof&#34; pass over the command line to catch all errors. A simplistic approach would be to supply a spoof callback that just eats one argument and returns success:</p>

<pre class="sh_perl">   sub spoof_read_file
   {
      my ($opt, $args) = @_;
      (warn (&#34;$opt option requires an argument\n&#34;), return 0)
         unless @$args;
      shift @$args;
      return 1;
   }</pre>

<p>Then, you have to tell <code>Getopt::Tabular</code> about this alternate callback with no side-effects (apart from eating that one argument):</p>

<pre class="sh_perl">   &#38;Getopt::Tabular::SetSpoofCodes (-read_file =&#62; \&#38;spoof_read_file);</pre>

<p>(<code>SetSpoofCodes</code> just takes a list of key/value pairs, where the keys are <code>call</code> or <code>eval</code> options, and the values are the &#34;no side-effects&#34; callbacks. Naturally, the replacement callback for an <code>eval</code> option should be a string, and for a <code>call</code> option it should be a code reference. This is not actually checked, however, until you call <code>SpoofGetOptions</code>, because <code>SetSpoofCodes</code> doesn&#39;t know whether options are <code>call</code> or <code>eval</code> or what.)</p>

<p>A more useful <code>spoof_read_file</code>, however, would actually check if the requested file exists -- i.e., we should try to catch as many errors as possible, as early as possible:</p>

<pre class="sh_perl">   sub spoof_read_file
   {
      my ($opt, $args) = @_;
      warn (&#34;$opt option requires an argument\n&#34;), return 0
         unless @$args;
      my $file = shift @$args;
      warn (&#34;$file does not exist or is not readable\n&#34;), return 0
         unless -r $file;
      return 1;
   }</pre>

<p>Finally, you can frequently merge the &#34;real&#34; and &#34;spoof&#34; callback into one subroutine:</p>

<pre class="sh_perl">   sub read_file
   {
      my ($opt, $args, $spoof) = @_;

      warn (&#34;$opt option requires an argument\n&#34;), return 0 unless @$args;
      my $file = shift @$args;
      warn (&#34;$file does not exist or is not readable\n&#34;), return 0
         unless -r $file;
      return 1 if $spoof;
      open (FILE, $file) ||
         (warn (&#34;$file: $!\n&#34;), return 0);
      push (@filedata, &#60;FILE&#62;);
      close (FILE);
      return 1;
   }</pre>

<p>And then, when specifying the replacement callback to <code>SetSpoofCodes</code>, just create an anonymous sub that calls <code>read_file</code> with <code>$spoof</code> true:</p>

<pre class="sh_perl">   &#38;Getopt::Tabular::SetSpoofCodes 
      (-read_file =&#62; sub { &#38;read_file (@_[0,1], 1) });</pre>

<p>Even though this means a bigger and more complicated callback, you only need <i>one</i> such callback -- the alternative is to carry around both <code>read_file</code> and <code>spoof_read_file</code>, which might do redundant processing of the argument list.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Greg Ward &#60;greg@bic.mni.mcgill.ca&#62;</p>

<p>Started in July, 1995 as ParseArgs.pm, with John Ousterhout&#39;s Tk_ParseArgv.c as a loose inspiration. Many many features added over the ensuing months; documentation written in a mad frenzy 16-18 April, 1996. Renamed to Getopt::Tabular, revamped, reorganized, and documentation expanded 8-11 November, 1996.</p>

<p>Copyright (c) 1995-97 Greg Ward. All rights reserved. This is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The documentation is bigger than the code, and I still haven&#39;t covered option patterns or extending the type system (apart from pattern types). Yow!</p>

<p>No support for list-valued options, although you can roll your own with <b>call</b> options. (See the demo program included with the distribution for an example.)</p>

<p>Error messages are hard-coded to English.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78067 Uploads, 24685 Distributions
105889 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 21 15:57:01 2012 GMT (0.173073053359985) @cpansearch1 -->
 </body>
</html>
