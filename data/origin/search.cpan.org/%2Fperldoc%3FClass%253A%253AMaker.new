<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Class::Maker - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Class-Maker",3]);
    _gaq.push(["_setCustomVar",5,"Release","Class-Maker-0.06",3]);
    _gaq.push(["_setCustomVar",3,"Module","Class::Maker",3]);
    _gaq.push(["_setCustomVar",1,"Author","MUENALAN",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Class::Maker">permalink</a></div>
  <a href="/~muenalan/">Murat &Uuml;nalan</a> &gt;
  <a href="/~muenalan/Class-Maker-0.06/">Class-Maker-0.06</a> &gt;
  Class::Maker
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/52beef84be7c4efba1d9dba9d726564b?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/M/MU/MUENALAN/Class-Maker-0.06.tar.gz">Class-Maker-0.06.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Class%3A%3AMaker;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~MUENALAN/Class-Maker-0.06/lib/Class/Maker.pm">Annotate this POD
</a></p>

<div style="float:right">
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Class-Maker">View/Report Bugs</a><br/>

</div>
</div>
  Module Version:  0.06 &nbsp;
<span class="noprint">
  <a href="/src/MUENALAN/Class-Maker-0.06/lib/Class/Maker.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#INTRODUCTION'>INTRODUCTION</a>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#class()'>class()</a>
    <li class='indexItem indexItem2'><a href='#FIELDS'>FIELDS</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#isa_=&#62;_aref'>isa =&#62; aref</a>
      <li class='indexItem indexItem3'><a href='#public_=&#62;_href'>public =&#62; href</a>
      <li class='indexItem indexItem3'><a href='#private_=&#62;_href'>private =&#62; href</a>
      <li class='indexItem indexItem3'><a href='#configure_=&#62;_href'>configure =&#62; href</a>
      <li class='indexItem indexItem3'><a href='#automethod'>automethod</a>
      <li class='indexItem indexItem3'><a href='#has'>has</a>
      <li class='indexItem indexItem3'><a href='#default_=&#62;_href'>default =&#62; href</a>
      <li class='indexItem indexItem3'><a href='#version_=&#62;_scalar'>version =&#62; scalar</a>
      <li class='indexItem indexItem3'><a href='#persistance_=&#62;_href'>persistance =&#62; href</a>
    </ul>
  </ul>
  <li class='indexItem indexItem1'><a href='#Global_flags'>Global flags</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#$Class::Maker::explicit'>$Class::Maker::explicit</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#INTERNALS'>INTERNALS</a>
  <li class='indexItem indexItem1'><a href='#USING_AN_CLASS/OBJECT'>USING AN CLASS/OBJECT</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#CONSTRUCTION'>CONSTRUCTION</a>
    <li class='indexItem indexItem2'><a href='#METHODS'>METHODS</a>
    <li class='indexItem indexItem2'><a href='#DESTRUCTION'>DESTRUCTION</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#RESERVED_SYMBOLS'>RESERVED SYMBOLS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#%CLASS'>%CLASS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#PERFORMANCE'>PERFORMANCE</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <li class='indexItem indexItem1'><a href='#EXPORT'>EXPORT</a>
  <li class='indexItem indexItem1'><a href='#KNOWN_BUGS/PROBLEMS'>KNOWN BUGS/PROBLEMS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#Search_for_Class::Maker::*_at_CPAN'>Search for Class::Maker::* at CPAN</a>
  <li class='indexItem indexItem1'><a href='#LITERATURE'>LITERATURE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Class::Maker - classes,
reflection,
schemas,
serialization,
attribute- and multiple inheritance</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Class::Maker qw(:all);

  class Something;

  class Person,
  {
     isa =&#62; [ &#39;Something&#39; ],

     public =&#62;
     {
       scalar =&#62; [qw( name age internal )],
     },

     private
     {
       int =&#62; [qw( internal )],
     },
  };

  sub Person::hello
  {
    my $this = shift;

    $this-&#62;_internal( 2123 ); # the private one

    printf &#34;Here is %s and i am %d years old.\n&#34;,  $this-&#62;name, $this-&#62;age;
  };

  my $p = Person-&#62;new( name =&#62; Murat, age =&#62; 27 );

  $p-&#62;hello;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This package is for everybody who wants to program oo-perl and does not really feel comfortable with the common way. Class::Maker introduces the concept of classes via a &#34;class&#34; function. It automatically creates packages, ISA, new and attribute-handlers. The classes can inherit from common perl-classes and class-maker classes. Single and multiple inheritance is supported.</p>

<p>Reflection is transparently implemented and allows one to inspect the class properties and methods during runtime. This is helpfull for implementing persistance and serialization. A Tangram (see cpan) schema generator is included to the package, so one can use Tangram object-persistance on the fly as long as he uses Class::Maker classes.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INTRODUCTION"
>INTRODUCTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>When you want to program oo-perl, mostly you suffer under the flexibility of perl. It is so flexibel, you have to do alot by hand. Here an example (slightly modified) from perltoot perl documentation for demonstration:</p>

<pre class="sh_perl"> package Person;

 @ISA = qw(Something);

 sub new {
    my $self  = {};
    $self-&#62;{NAME}   = undef;
    $self-&#62;{AGE}    = undef;
    bless($self);           # but see below
    return $self;
 }

 sub name {
    my $self = shift;
    if (@_) { $self-&#62;{NAME} = shift }
    return $self-&#62;{NAME};
 }

 sub age {
    my $self = shift;
    if (@_) { $self-&#62;{AGE} = shift }
    return $self-&#62;{AGE};
 }</pre>

<p>C++ has really straightforward class decleration style. It looks really beautiful. At that time many cpan modules tried to compensate with perl idiom, i still rather missed something. This package though has a &#34;class&#34; function which transparetly decleares perl classes with some rememberance to other languages. It smoothly integrates into perl code and handles may issues a beginner would immediately stumble (such as package issues etc). So the above example could be now written as:</p>

<pre class="sh_perl"> use Class::Maker qw(class);

 class &#39;Person&#39;,
 {
   isa =&#62; [ &#39;SomeBaseClass&#39; ],

   public =&#62;
   {
     scalar =&#62; [qw( name age )],
   },
 };</pre>

<p>When using &#34;class&#34;, you do not explictly need &#34;package&#34;. The function does all symbol creation for you. It is more a class decleration (like in java/cpp/..). So here we now leap into the documentation.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="class()"
>class()</a></h2>

<p>The &#39;class&#39; function is very central to Class::Maker.</p>

<pre class="sh_perl"> class &#39;Class&#39;,
 {
   ..FIELDS..
 };</pre>

<p>[Note] The parantheses for the class() function are optional.</p>

<p>Here &#39;Class&#39; is the Name for the class. It is also the name for the package where the symbols for the class are created. Examples: &#39;Animal&#39;, &#39;Animal::Spider&#39;, &#39;Histology::Structures::Epithelia&#39;.</p>

<p>Normally the class is created related to the main package:</p>

<pre class="sh_perl">  package Far::Far::Away;

  class &#39;Galaxy&#39;,
  {
  };</pre>

<p>Like with <b>package</b> &#39;Galaxy&#39; would become to &#39;main::Galaxy&#39; (and not Far::Far::Away::Galaxy).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="FIELDS"
>FIELDS</a></h2>

<p>Fields are the keys in the hashref given as the second (or first if the first argument (classname) is omitted) argument to &#34;class&#34;. Here are the basic fields (for adding new fields read the Class::Maker::Basic::Fields).</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="isa_=&#62;_aref"
>isa =&#62; aref</a></h3>

<p>Same as the @ISA array in an package (see perltoot).</p>

<p>Some short-cut syntax is available:</p>

<p>a) when the name is started with an &#39;.&#39; or &#39;*&#39; the package name is extrapolated to that name:</p>

<pre class="sh_perl"> package Far::Far::Away;

 class Galaxy,
 {
   isa =&#62; [qw( .AnotherGalaxy )],
 };</pre>

<p>Then &#39;.AnotherGalaxy&#39; becomes expanded to &#39;Far::Far::Away::AnotherGalaxy&#39;.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="public_=&#62;_href"
>public =&#62; href</a></h3>

<pre class="sh_perl"> public =&#62; 
 {
   int =&#62; [qw(id)],
 },</pre>

<p>leads to a attribute-handler which can be used like:</p>

<pre class="sh_perl"> $obj-&#62;id( 123 );

 my $value = $obj-&#62;id;</pre>

<p>Because the default handler is an lvalue function, the following call is also valid:</p>

<pre class="sh_perl"> $obj-&#62;id = 5678;</pre>

<p>These keys are &#39;type-identifiers&#39; (no fear, its simple), which help you to sort things. In general these are used to create handlers for the type. It is somehow like the get/set like method functions to access class-properties, but its more generalized and not so restrictive. By default, every non-known type-identifier is a simple scalar handler. Class::Maker will not warn you at any point, if you use a unknown type-identifier. So that</p>

<pre class="sh_perl">   public =&#62;
   {
    scalar =&#62; ...
    array =&#62; ...
    hash =&#62; ...

    _anthing_here_ =&#62; ..    
   }</pre>

<p>Because b&#60;array&#62; and b&#60;hash&#62; are internally decleared and creating special mutators/handlers they will be not create scalar handlers, but &#39;scalar&#39; and &#39;_anything_here&#39; will create scalara mutators, as they are forwarded to the default scalar handlers; both are internally not explicitly defined. The mechanism is extendable, see <a href="/perldoc?Class%3A%3AMaker%3A%3ABasic%3A%3AFields" class="podlinkpod"
>Class::Maker::Basic::Fields</a>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="private_=&#62;_href"
>private =&#62; href</a></h3>

<p>All properties in the &#39;private&#39; section, get a &#39;_&#39; prepended to their names.</p>

<pre class="sh_perl"> private =&#62;
 {
   int =&#62; [qw(uid gid)],
 },</pre>

<p>So you must access &#39;uid&#39; with $obj-&#62;_uid();</p>

<pre class="sh_perl"> public =&#62;
 {
   int =&#62; [qw(uid gid)],

   string =&#62; [qw(name lastname)],

   ref =&#62; [qw(father mother)],

   array =&#62; [qw(friends)],

   custom =&#62; [qw(anything)],
 },</pre>

<p>Nothing more, nothing less. The significant part is that no encapsulation as such is present (as in cpp). The only encapsulation is the &#34;secret&#34; that you have to prepend and &#39;_&#39; in front of the name.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="configure_=&#62;_href"
>configure =&#62; href</a></h3>

<p>This Field is for general options. Basicly following options are supported:</p>

<p>a) new: The name of the default constructor is &#39;new&#39;. With this option you can change the name to something of your choice. For instance:</p>

<pre class="sh_perl"> configure =&#62; 
 {
   new =&#62; &#39;connect&#39;
 },</pre>

<p>Could be used for database objects. So you would use</p>

<pre class="sh_perl"> my $obj AnyClass-&#62;connect( );</pre>

<p>to create an AnyClass object.</p>

<p>PS. Class::Maker provides a very sophisticated default constructor that does a lot (including the inhertance issues) and is explained somewhere else.</p>

<p>c) <i>private</i>: Prefix string (default &#39;_&#39;) for private functions can be changed with this.</p>

<pre class="sh_perl"> private =&#62;
 {
   int =&#62; [qw(dummy1)],
 },
 
 configure =&#62;
 {
   private =&#62; { prefix =&#62; &#39;__&#39; },
 },</pre>

<p>would force to access &#39;dummy1&#39; via -&#62;__dummy1().</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="automethod"
>automethod</a></h3>

<p>Reserved.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="has"
>has</a></h3>

<p>Reserved. Is planned to be used for &#39;has a&#39; relationships.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="default_=&#62;_href"
>default =&#62; href</a></h3>

<p>Give default values for class attributes. It is the same as the handler was called with the value within the <a href="/perldoc?_postinit" class="podlinkpod"
>_postinit</a> function.</p>

<pre class="sh_perl"> default =&#62;
 {
   name =&#62; &#39;John&#39;,

   friends =&#62; [qw(Petra Jenna)],
 },</pre>

<p>So after construction the CLASS-&#62;name method would return &#39;John&#39; etc.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="version_=&#62;_scalar"
>version =&#62; scalar</a></h3>

<p>Give the class/objects a version number. Internally the $VERSION is set to that value.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="persistance_=&#62;_href"
>persistance =&#62; href</a></h3>

<p>Here you can set options and add information for the reflect-function. You can also add custom information, you may want to process when you reflect objects.</p>

<p>For example the tangram-schema generator looks for an &#39;abstract&#39; key, to handle this class as an abstract class:</p>

<pre class="sh_perl"> persistance =&#62;
 {
   abstract =&#62; 1,
 },</pre>

<p>You can read more about Persistance under the <a href="/perldoc?Class%3A%3AMaker%3A%3AExtension%3A%3APersistance" class="podlinkpod"
>Class::Maker::Extension::Persistance</a> manpage.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Global_flags"
>Global flags <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$Class::Maker::explicit"
>$Class::Maker::explicit</a></h2>

<p>Internally an instance of a class holds all properties/attributes in an hash (The object is blessed with a hash-ref). The keys are normally exactly the same as you declare in the descriptors. In special cases you want inheritance per se, but still might be interested to call parent methods explicitly. Put another way, when you use &#39;soft&#39; inheritance, you may have name clashes if a parent object uses the same name for a property as its child. To compensate that problem, set this global (very early in your program, best is BEGIN block) explicit to something true (i.e. 1). This will lead to internal prepending of the classname to the key name:</p>

<p>BEGIN { $Class::Maker::explicit = 1; }</p>

<p>&#39;A&#39; inherits &#39;B&#39;. Both have a &#39;name&#39; property. With explicit internally the fields are distinct:</p>

<pre class="sh_perl"> A::name
 B::name</pre>

<p>[Note] This does not collide with attribute-overloading/inheritance ! Because the first attribute-handler in the isa-tree is always called. You do not have to care for this. Only use this feature, if you have fear that name clashes could appear, beside overloading. Per default it is turned off, because i suppose that most class designers care for name clashes themselfs.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INTERNALS"
>INTERNALS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>For this example:</p>

<pre class="sh_perl"> class &#39;Person&#39;,
 {
   isa =&#62; [ &#39;SomeBaseClass&#39; ],

   public =&#62;
   {
     scalar =&#62; [qw( name age )],
   },
 };</pre>

<p>Following happens in the background, when using &#39;class&#39;:</p>

<dl>
<dt><a name='1'></a><a name="1._creates_a_package_&#34;Person&#34;."
>1. creates a package &#34;Person&#34;.</a></dt>

<dd>
<dt><a name='2'></a><a name="2._sets_@Person::ISA_to_the_[_&#39;SomeBaseClass&#39;_]."
>2. sets @Person::ISA to the [ &#39;SomeBaseClass&#39; ].</a></dt>

<dd>
<dt><a 
>3. creates method handlers for the attributes (including lvalue methods). While &#34;hash&#34; and &#34;array&#34; keys are really functional keywords, any other key will simply result in a scalar get/set method.</a></dt>
</dl>

<dl>
<dt><a 
>4. exports a default constructor (i.e.&#34;Person::new()&#34;) which handles argument initialization. It has also a mechanism for initializing the parent objects (including MI).</a></dt>

<dd>
<dt><a 
>5. creates $Person::CLASS holding a hashref to the unmodified second argument to &#39;class&#39; (or the first, if the package name is omitted). This is essential for reflection: i.e. you can get runtime information about the class. See below.</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="USING_AN_CLASS/OBJECT"
>USING AN CLASS/OBJECT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTION"
>CONSTRUCTION</a></h2>

<p>Once a class is created it is shipped with a versatile <code>new()</code> constructor. It is central to <a href="/~muenalan/Class-Maker-0.06/lib/Class/Maker/Basic/Constructor.pm" class="podlinkpod"
>Class::Maker</a> because it deploy the object correctly, including constructing the multiple-inheritance chain and presetting class fields. To have fine grained control over the construction process following special methods are available for modification during construction. See the <a href="/perldoc?Class%3A%3AMaker%3A%3ABasic%3A%3AConstructor" class="podlinkpod"
>Class::Maker::Basic::Constructor</a> deeper explanation of the construction process.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS</a></h2>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DESTRUCTION"
>DESTRUCTION</a></h2>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="RESERVED_SYMBOLS"
>RESERVED SYMBOLS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="%CLASS"
>%CLASS</a></h2>

<p>As said, once a class is created <a href="/~muenalan/Class-Maker-0.06/lib/Class/Maker/Basic/Constructor.pm" class="podlinkpod"
>Class::Maker</a> creates a <code>CLASS</code> hash into the package. It is required for the process of runtime introspection (reflection). In general it is mostly similar to the <a href="/perldoc?FIELDS" class="podlinkpod"
>FIELDS</a> hash during decleration, but one shouldnt count on that, because it is surely modified in future. Refer to the <a href="/perldoc?Class%3A%3AMaker%3A%3ABasic%3A%3AReflection" class="podlinkpod"
>Class::Maker::Basic::Reflection</a> for correctly access the introspective freatures. Although today it has the function to:</p>

<dl>
<dt><a name='have'></a><a name="-_have_dependency/class_walking_(see_the_contrib/_directory_of_the_distribution_for_an_example_script)."
>- have dependency/class walking (see the contrib/ directory of the distribution for an example script).</a></dt>

<dd>
<dt><a name='creating'></a><a name="-_creating_on-the-fly_persistance_=&#62;_(for_an_example_with_Tangram_see_below)"
>- creating on-the-fly persistance =&#62; (for an example with Tangram see below)</a></dt>

<dd>
<dt><a name='it'></a><a name="-_it_creates_the_complete_tangram_schema_tree_(Tangram_users_know_how_hard_it_is"
>- it creates the complete tangram schema tree (Tangram users know how hard it is</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PERFORMANCE"
>PERFORMANCE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>I never seriously benchmarked Class::Maker. Because the internal representation is just the same as for standard perl-classes, only a minimal delay in the constructor (during scan through the class hirarchy for _init() routines) should be apparent. Beware that the accessors for any member of course delay the processsing (wildly guessed to be 3x slower). There is a hack-ish way to circumvent this, and may, increase speed when required: - directly going into the object gut with $this-&#62;{member}. Beware that the member can be hidden as -&#62;{SUPERCLASS::member}.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>All test files (test.pl and t/) are verbose enough for a good overview. Visit the Class::Maker::Examples manpage for examples how to write basic data-type-like classes and basic classes used for i.e. e-commerce applications.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORT"
>EXPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>facultative: qw(reflect schema) obligate: qw(class)</p>

<p>class by default.</p>

<p>[Note] If you care about ns pollution, just use Class::Maker::class directly.</p>

<p>Class::Maker::class &#39;Person&#39;, { ... };</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="KNOWN_BUGS/PROBLEMS"
>KNOWN BUGS/PROBLEMS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>isa =&#62; [qw( )] isnt in sync with @ISA. When @ISA (or isa) is modified after initation, the $reflex-&#62;{isa} will only represent the state during object initiation.</p>

<p>&#60;&#38; /maslib/signatures.mas:author_as_pod, &#38;&#62;</p>

<p>Contributions (Ideas or Code):</p>

<pre class="sh_perl">        - Terrence Brannon</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>(c) 2001 by Murat Uenalan. All rights reserved. Note: This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~muenalan/Class-Maker-0.06/lib/Class/Maker/Exception.pm" class="podlinkpod"
>Class::Maker::Exception</a>, <a href="/perldoc?Class%3A%3AMaker%3A%3ABasic%3A%3AFields" class="podlinkpod"
>Class::Maker::Basic::Fields</a>, <a href="/perldoc?Class%3A%3AMaker%3A%3ABasic%3A%3AReflection" class="podlinkpod"
>Class::Maker::Basic::Reflection</a>, <a href="/perldoc?Class%3A%3AMaker%3A%3ABasic%3A%3AHandler%3A%3AAttributes" class="podlinkpod"
>Class::Maker::Basic::Handler::Attributes</a>,<a href="/perldoc?Class%3A%3AMaker%3A%3ABasic%3A%3ATypes" class="podlinkpod"
>Class::Maker::Basic::Types</a>,<a href="/~muenalan/Class-Maker-0.06/lib/Class/Maker/Examples.pm" class="podlinkpod"
>Class::Maker::Examples</a>, <a href="/perldoc?Class%3A%3AMaker%3A%3AGenerator" class="podlinkpod"
>Class::Maker::Generator</a>, <a href="/~muenalan/Class-Maker-0.06/lib/Class/Maker/Extension/Schema/Tangram/Tangram.pm" class="podlinkpod"
>Class::Maker::Extension::Schema::Tangram</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Search_for_Class::Maker::*_at_CPAN"
>Search for Class::Maker::* at CPAN <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Also at CPAN: Class::*, Tangram</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LITERATURE"
>LITERATURE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>[1] Object-oriented Perl, Damian Conway [2] Perl Cookbook, Nathan Torkington et al.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78283 Uploads, 24725 Distributions
106015 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 08:19:06 2012 GMT (0.356461048126221) @cpansearch1 -->
 </body>
</html>
