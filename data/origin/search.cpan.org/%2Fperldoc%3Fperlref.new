<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>perlref - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","perl",3]);
    _gaq.push(["_setCustomVar",5,"Release","perl-5.14.2",3]);
    _gaq.push(["_setCustomVar",4,"Document","perlref",3]);
    _gaq.push(["_setCustomVar",1,"Author","FLORA",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?perlref">permalink</a></div>
  <a href="/~flora/">Florian Ragwitz</a> &gt;
  <a href="/~flora/perl-5.14.2/">perl-5.14.2</a> &gt;
  perlref
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/fd2bdaaefe41908133793d1ddf38f75d?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/F/FL/FLORA/perl-5.14.2.tar.gz">perl-5.14.2.tar.gz</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~FLORA/perl-5.14.2/pod/perlref.pod">Annotate this POD
</a></p>
     <p style="text-align:right"><a href="http://www.perl.org/">Website</a></p>

<div style="float:right">

</div>
</div>
<span class="noprint">
  <a href="/src/FLORA/perl-5.14.2/pod/perlref.pod">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~abigail/perl/pod/perlref.pod">perl-5.15.9</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME     </a>
  <li class='indexItem indexItem1'><a href='#NOTE'>NOTE</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Making_References'>Making References  </a>
    <li class='indexItem indexItem2'><a href='#Using_References'>Using References   </a>
    <li class='indexItem indexItem2'><a href='#Symbolic_references'>Symbolic references    </a>
    <li class='indexItem indexItem2'><a href='#Not-so-symbolic_references'>Not-so-symbolic references</a>
    <li class='indexItem indexItem2'><a href='#Pseudo-hashes:_Using_an_array_as_a_hash'>Pseudo-hashes: Using an array as a hash   </a>
    <li class='indexItem indexItem2'><a href='#Function_Templates'>Function Templates        </a>
  </ul>
  <li class='indexItem indexItem1'><a href='#WARNING'>WARNING  </a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <!--
	INDEX: reference
--> <!--
	INDEX: pointer
--> <!--
	INDEX: data structure
--> <!--
	INDEX: structure
--> <!--
	INDEX: struct
--> <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perlref - Perl references and nested data structures</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTE"
>NOTE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This is complete documentation about all aspects of references.
For a shorter,
tutorial introduction to just the essential features,
see <a href="/~flora/perl-5.14.2/pod/perlreftut.pod" class="podlinkpod"
>perlreftut</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Before release 5 of Perl it was difficult to represent complex data structures,
because all references had to be symbolic--and even then it was difficult to refer to a variable instead of a symbol table entry.
Perl now not only makes it easier to use symbolic references to variables,
but also lets you have &#34;hard&#34; references to any piece of data or code.
Any scalar may hold a hard reference.
Because arrays and hashes contain scalars,
you can now easily build arrays of arrays,
arrays of hashes,
hashes of arrays,
arrays of hashes of functions,
and so on.</p>

<p>Hard references are smart--they keep track of reference counts for you,
automatically freeing the thing referred to when its reference count goes to zero.
(Reference counts for values in self-referential or cyclic data structures may not go to zero without a little help; see <a href="/~flora/perl-5.14.2/pod/perlobj.pod#Two-Phased_Garbage_Collection" class="podlinkpod"
>&#34;Two-Phased Garbage Collection&#34; in perlobj</a> for a detailed explanation.) If that thing happens to be an object,
the object is destructed.
See <a href="/~flora/perl-5.14.2/pod/perlobj.pod" class="podlinkpod"
>perlobj</a> for more about objects.
(In a sense,
everything in Perl is an object,
but we usually reserve the word for references to objects that have been officially &#34;blessed&#34; into a class package.)</p>

<p>Symbolic references are names of variables or other objects,
just as a symbolic link in a Unix filesystem contains merely the name of a file.
The <code>*glob</code> notation is something of a symbolic reference.
(Symbolic references are sometimes called &#34;soft references&#34;,
but please don&#39;t call them that; references are confusing enough without useless synonyms.) <!--
	INDEX: reference, symbolic
--> <!--
	INDEX: reference, soft
--> <!--
	INDEX: symbolic reference
--> <!--
	INDEX: soft reference
--></p>

<p>In contrast,
hard references are more like hard links in a Unix file system: They are used to access an underlying object without concern for what its (other) name is.
When the word &#34;reference&#34; is used without an adjective,
as in the following paragraph,
it is usually talking about a hard reference.
<!--
	INDEX: reference, hard
--> <!--
	INDEX: hard reference
--></p>

<p>References are easy to use in Perl.
There is just one overriding principle: Perl does no implicit referencing or dereferencing.
When a scalar is holding a reference,
it always behaves as a simple scalar.
It doesn&#39;t magically start being an array or hash or subroutine; you have to tell it explicitly to do so,
by dereferencing it.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Making_References"
>Making References <!--
	INDEX: reference, creation
--> <!--
	INDEX: referencing
--></a></h2>

<p>References can be created in several ways.</p>

<dl>
<dt><a name='1'></a><a name="1."
>1.
<!--
	INDEX: \
--> <!--
	INDEX: backslash
--></a></dt>

<dd>
<p>By using the backslash operator on a variable,
subroutine,
or value.
(This works much like the &#38; (address-of) operator in C.) This typically creates <i>another</i> reference to a variable,
because there&#39;s already a reference to the variable in the symbol table.
But the symbol table reference might go away,
and you&#39;ll still have the reference that the backslash returned.
Here are some examples:</p>

<pre class="sh_perl">    $scalarref = \$foo;
    $arrayref  = \@ARGV;
    $hashref   = \%ENV;
    $coderef   = \&#38;handler;
    $globref   = \*foo;</pre>

<p>It isn&#39;t possible to create a true reference to an IO handle (filehandle or dirhandle) using the backslash operator. The most you can get is a reference to a typeglob, which is actually a complete symbol table entry. But see the explanation of the <code>*foo{THING}</code> syntax below. However, you can still use type globs and globrefs as though they were IO handles.</p>

<dt><a name='2'></a><a name="2."
>2. <!--
	INDEX: array, anonymous
--> <!--
	INDEX: [
--> <!--
	INDEX: []
--> <!--
	INDEX: square bracket
--> <!--
	INDEX: bracket, square
--> <!--
	INDEX: arrayref
--> <!--
	INDEX: array reference
--> <!--
	INDEX: reference, array
--></a></dt>

<dd>
<p>A reference to an anonymous array can be created using square brackets:</p>

<pre class="sh_perl">    $arrayref = [1, 2, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]];</pre>

<p>Here we&#39;ve created a reference to an anonymous array of three elements whose final element is itself a reference to another anonymous array of three elements. (The multidimensional syntax described later can be used to access this. For example, after the above, <code>$arrayref-&#62;[2][1]</code> would have the value &#34;b&#34;.)</p>

<p>Taking a reference to an enumerated list is not the same as using square brackets--instead it&#39;s the same as creating a list of references!</p>

<pre class="sh_perl">    @list = (\$a, \@b, \%c);
    @list = \($a, @b, %c);      # same thing!</pre>

<p>As a special case, <code>\(@foo)</code> returns a list of references to the contents of <code>@foo</code>, not a reference to <code>@foo</code> itself. Likewise for <code>%foo</code>, except that the key references are to copies (since the keys are just strings rather than full-fledged scalars).</p>

<dt><a name='3'></a><a name="3."
>3. <!--
	INDEX: hash, anonymous
--> <!--
	INDEX: {
--> <!--
	INDEX: {}
--> <!--
	INDEX: curly bracket
--> <!--
	INDEX: bracket, curly
--> <!--
	INDEX: brace
--> <!--
	INDEX: hashref
--> <!--
	INDEX: hash reference
--> <!--
	INDEX: reference, hash
--></a></dt>

<dd>
<p>A reference to an anonymous hash can be created using curly brackets:</p>

<pre class="sh_perl">    $hashref = {
        &#39;Adam&#39;  =&#62; &#39;Eve&#39;,
        &#39;Clyde&#39; =&#62; &#39;Bonnie&#39;,
    };</pre>

<p>Anonymous hash and array composers like these can be intermixed freely to produce as complicated a structure as you want. The multidimensional syntax described below works for these too. The values above are literals, but variables and expressions would work just as well, because assignment operators in Perl (even within local() or my()) are executable statements, not compile-time declarations.</p>

<p>Because curly brackets (braces) are used for several other things including BLOCKs, you may occasionally have to disambiguate braces at the beginning of a statement by putting a <code>+</code> or a <code>return</code> in front so that Perl realizes the opening brace isn&#39;t starting a BLOCK. The economy and mnemonic value of using curlies is deemed worth this occasional extra hassle.</p>

<p>For example, if you wanted a function to make a new hash and return a reference to it, you have these options:</p>

<pre class="sh_perl">    sub hashem {        { @_ } }   # silently wrong
    sub hashem {       +{ @_ } }   # ok
    sub hashem { return { @_ } }   # ok</pre>

<p>On the other hand, if you want the other meaning, you can do this:</p>

<pre class="sh_perl">    sub showem {        { @_ } }   # ambiguous (currently ok, but may change)
    sub showem {       {; @_ } }   # ok
    sub showem { { return @_ } }   # ok</pre>

<p>The leading <code>+{</code> and <code>{;</code> always serve to disambiguate the expression to mean either the HASH reference, or the BLOCK.</p>

<dt><a name='4'></a><a name="4."
>4. <!--
	INDEX: subroutine, anonymous
--> <!--
	INDEX: subroutine, reference
--> <!--
	INDEX: reference, subroutine
--> <!--
	INDEX: scope, lexical
--> <!--
	INDEX: closure
--> <!--
	INDEX: lexical
--> <!--
	INDEX: lexical scope
--></a></dt>

<dd>
<p>A reference to an anonymous subroutine can be created by using <code>sub</code> without a subname:</p>

<pre class="sh_perl">    $coderef = sub { print &#34;Boink!\n&#34; };</pre>

<p>Note the semicolon. Except for the code inside not being immediately executed, a <code>sub {}</code> is not so much a declaration as it is an operator, like <code>do{}</code> or <code>eval{}</code>. (However, no matter how many times you execute that particular line (unless you&#39;re in an <code>eval(&#34;...&#34;)</code>), $coderef will still have a reference to the <i>same</i> anonymous subroutine.)</p>

<p>Anonymous subroutines act as closures with respect to my() variables, that is, variables lexically visible within the current scope. Closure is a notion out of the Lisp world that says if you define an anonymous function in a particular lexical context, it pretends to run in that context even when it&#39;s called outside the context.</p>

<p>In human terms, it&#39;s a funny way of passing arguments to a subroutine when you define it as well as when you call it. It&#39;s useful for setting up little bits of code to run later, such as callbacks. You can even do object-oriented stuff with it, though Perl already provides a different mechanism to do that--see <a href="/~flora/perl-5.14.2/pod/perlobj.pod" class="podlinkpod"
>perlobj</a>.</p>

<p>You might also think of closure as a way to write a subroutine template without using eval(). Here&#39;s a small example of how closures work:</p>

<pre class="sh_perl">    sub newprint {
        my $x = shift;
        return sub { my $y = shift; print &#34;$x, $y!\n&#34;; };
    }
    $h = newprint(&#34;Howdy&#34;);
    $g = newprint(&#34;Greetings&#34;);

    # Time passes...

    &#38;$h(&#34;world&#34;);
    &#38;$g(&#34;earthlings&#34;);</pre>

<p>This prints</p>

<pre class="sh_perl">    Howdy, world!
    Greetings, earthlings!</pre>

<p>Note particularly that $x continues to refer to the value passed into newprint() <i>despite</i> &#34;my $x&#34; having gone out of scope by the time the anonymous subroutine runs. That&#39;s what a closure is all about.</p>

<p>This applies only to lexical variables, by the way. Dynamic variables continue to work as they have always worked. Closure is not something that most Perl programmers need trouble themselves about to begin with.</p>

<dt><a name='5'></a><a name="5."
>5. <!--
	INDEX: constructor
--> <!--
	INDEX: new
--></a></dt>

<dd>
<p>References are often returned by special subroutines called constructors. Perl objects are just references to a special type of object that happens to know which package it&#39;s associated with. Constructors are just special subroutines that know how to create that association. They do so by starting with an ordinary reference, and it remains an ordinary reference even while it&#39;s also being an object. Constructors are often named <code>new()</code>. You <i>can</i> call them indirectly:</p>

<pre class="sh_perl">    $objref = new Doggie( Tail =&#62; &#39;short&#39;, Ears =&#62; &#39;long&#39; );</pre>

<p>But that can produce ambiguous syntax in certain cases, so it&#39;s often better to use the direct method invocation approach:</p>

<pre class="sh_perl">    $objref   = Doggie-&#62;new(Tail =&#62; &#39;short&#39;, Ears =&#62; &#39;long&#39;);

    use Term::Cap;
    $terminal = Term::Cap-&#62;Tgetent( { OSPEED =&#62; 9600 });

    use Tk;
    $main    = MainWindow-&#62;new();
    $menubar = $main-&#62;Frame(-relief              =&#62; &#34;raised&#34;,
                            -borderwidth         =&#62; 2)</pre>

<dt><a name='6'></a><a name="6."
>6. <!--
	INDEX: autovivification
--></a></dt>

<dd>
<p>References of the appropriate type can spring into existence if you dereference them in a context that assumes they exist. Because we haven&#39;t talked about dereferencing yet, we can&#39;t show you any examples yet.</p>

<dt><a name='7'></a><a name="7."
>7. <!--
	INDEX: *foo{THING}
--> <!--
	INDEX: *
--></a></dt>

<dd>
<p>A reference can be created by using a special syntax, lovingly known as the *foo{THING} syntax. *foo{THING} returns a reference to the THING slot in *foo (which is the symbol table entry which holds everything known as foo).</p>

<pre class="sh_perl">    $scalarref = *foo{SCALAR};
    $arrayref  = *ARGV{ARRAY};
    $hashref   = *ENV{HASH};
    $coderef   = *handler{CODE};
    $ioref     = *STDIN{IO};
    $globref   = *foo{GLOB};
    $formatref = *foo{FORMAT};</pre>

<p>All of these are self-explanatory except for <code>*foo{IO}</code>. It returns the IO handle, used for file handles (<a href="/~flora/perl-5.14.2/pod/perlfunc.pod#open" class="podlinkpod"
>&#34;open&#34; in perlfunc</a>), sockets (<a href="/~flora/perl-5.14.2/pod/perlfunc.pod#socket" class="podlinkpod"
>&#34;socket&#34; in perlfunc</a> and <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#socketpair" class="podlinkpod"
>&#34;socketpair&#34; in perlfunc</a>), and directory handles (<a href="/~flora/perl-5.14.2/pod/perlfunc.pod#opendir" class="podlinkpod"
>&#34;opendir&#34; in perlfunc</a>). For compatibility with previous versions of Perl, <code>*foo{FILEHANDLE}</code> is a synonym for <code>*foo{IO}</code>, though it is deprecated as of 5.8.0. If deprecation warnings are in effect, it will warn of its use.</p>

<p><code>*foo{THING}</code> returns undef if that particular THING hasn&#39;t been used yet, except in the case of scalars. <code>*foo{SCALAR}</code> returns a reference to an anonymous scalar if $foo hasn&#39;t been used yet. This might change in a future release.</p>

<p><code>*foo{IO}</code> is an alternative to the <code>*HANDLE</code> mechanism given in <a href="/~flora/perl-5.14.2/pod/perldata.pod#Typeglobs_and_Filehandles" class="podlinkpod"
>&#34;Typeglobs and Filehandles&#34; in perldata</a> for passing filehandles into or out of subroutines, or storing into larger data structures. Its disadvantage is that it won&#39;t create a new filehandle for you. Its advantage is that you have less risk of clobbering more than you want to with a typeglob assignment. (It still conflates file and directory handles, though.) However, if you assign the incoming value to a scalar instead of a typeglob as we do in the examples below, there&#39;s no risk of that happening.</p>

<pre class="sh_perl">    splutter(*STDOUT);          # pass the whole glob
    splutter(*STDOUT{IO});      # pass both file and dir handles

    sub splutter {
        my $fh = shift;
        print $fh &#34;her um well a hmmm\n&#34;;
    }

    $rec = get_rec(*STDIN);     # pass the whole glob
    $rec = get_rec(*STDIN{IO}); # pass both file and dir handles

    sub get_rec {
        my $fh = shift;
        return scalar &#60;$fh&#62;;
    }</pre>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Using_References"
>Using References <!--
	INDEX: reference, use
--> <!--
	INDEX: dereferencing
--> <!--
	INDEX: dereference
--></a></h2>

<p>That&#39;s it for creating references. By now you&#39;re probably dying to know how to use references to get back to your long-lost data. There are several basic methods.</p>

<ol>
<li>Anywhere you&#39;d put an identifier (or chain of identifiers) as part of a variable or subroutine name, you can replace the identifier with a simple scalar variable containing a reference of the correct type:
<pre class="sh_perl">    $bar = $$scalarref;
    push(@$arrayref, $filename);
    $$arrayref[0] = &#34;January&#34;;
    $$hashref{&#34;KEY&#34;} = &#34;VALUE&#34;;
    &#38;$coderef(1,2,3);
    print $globref &#34;output\n&#34;;</pre>

<p>It&#39;s important to understand that we are specifically <i>not</i> dereferencing <code>$arrayref[0]</code> or <code>$hashref{&#34;KEY&#34;}</code> there. The dereference of the scalar variable happens <i>before</i> it does any key lookups. Anything more complicated than a simple scalar variable must use methods 2 or 3 below. However, a &#34;simple scalar&#34; includes an identifier that itself uses method 1 recursively. Therefore, the following prints &#34;howdy&#34;.</p>

<pre class="sh_perl">    $refrefref = \\\&#34;howdy&#34;;
    print $$$$refrefref;</pre>
</li>

<li>Anywhere you&#39;d put an identifier (or chain of identifiers) as part of a variable or subroutine name, you can replace the identifier with a BLOCK returning a reference of the correct type. In other words, the previous examples could be written like this:
<pre class="sh_perl">    $bar = ${$scalarref};
    push(@{$arrayref}, $filename);
    ${$arrayref}[0] = &#34;January&#34;;
    ${$hashref}{&#34;KEY&#34;} = &#34;VALUE&#34;;
    &#38;{$coderef}(1,2,3);
    $globref-&#62;print(&#34;output\n&#34;);  # iff IO::Handle is loaded</pre>

<p>Admittedly, it&#39;s a little silly to use the curlies in this case, but the BLOCK can contain any arbitrary expression, in particular, subscripted expressions:</p>

<pre class="sh_perl">    &#38;{ $dispatch{$index} }(1,2,3);      # call correct routine</pre>

<p>Because of being able to omit the curlies for the simple case of <code>$$x</code>, people often make the mistake of viewing the dereferencing symbols as proper operators, and wonder about their precedence. If they were, though, you could use parentheses instead of braces. That&#39;s not the case. Consider the difference below; case 0 is a short-hand version of case 1, <i>not</i> case 2:</p>

<pre class="sh_perl">    $$hashref{&#34;KEY&#34;}   = &#34;VALUE&#34;;       # CASE 0
    ${$hashref}{&#34;KEY&#34;} = &#34;VALUE&#34;;       # CASE 1
    ${$hashref{&#34;KEY&#34;}} = &#34;VALUE&#34;;       # CASE 2
    ${$hashref-&#62;{&#34;KEY&#34;}} = &#34;VALUE&#34;;     # CASE 3</pre>

<p>Case 2 is also deceptive in that you&#39;re accessing a variable called %hashref, not dereferencing through $hashref to the hash it&#39;s presumably referencing. That would be case 3.</p>
</li>

<li>Subroutine calls and lookups of individual array elements arise often enough that it gets cumbersome to use method 2. As a form of syntactic sugar, the examples for method 2 may be written:
<pre class="sh_perl">    $arrayref-&#62;[0] = &#34;January&#34;;   # Array element
    $hashref-&#62;{&#34;KEY&#34;} = &#34;VALUE&#34;;  # Hash element
    $coderef-&#62;(1,2,3);            # Subroutine call</pre>

<p>The left side of the arrow can be any expression returning a reference, including a previous dereference. Note that <code>$array[$x]</code> is <i>not</i> the same thing as <code>$array-&#62;[$x]</code> here:</p>

<pre class="sh_perl">    $array[$x]-&#62;{&#34;foo&#34;}-&#62;[0] = &#34;January&#34;;</pre>

<p>This is one of the cases we mentioned earlier in which references could spring into existence when in an lvalue context. Before this statement, <code>$array[$x]</code> may have been undefined. If so, it&#39;s automatically defined with a hash reference so that we can look up <code>{&#34;foo&#34;}</code> in it. Likewise <code>$array[$x]-&#62;{&#34;foo&#34;}</code> will automatically get defined with an array reference so that we can look up <code>[0]</code> in it. This process is called <i>autovivification</i>.</p>

<p>One more thing here. The arrow is optional <i>between</i> brackets subscripts, so you can shrink the above down to</p>

<pre class="sh_perl">    $array[$x]{&#34;foo&#34;}[0] = &#34;January&#34;;</pre>

<p>Which, in the degenerate case of using only ordinary arrays, gives you multidimensional arrays just like C&#39;s:</p>

<pre class="sh_perl">    $score[$x][$y][$z] += 42;</pre>

<p>Well, okay, not entirely like C&#39;s arrays, actually. C doesn&#39;t know how to grow its arrays on demand. Perl does.</p>
</li>

<li>If a reference happens to be a reference to an object, then there are probably methods to access the things referred to, and you should probably stick to those methods unless you&#39;re in the class package that defines the object&#39;s methods. In other words, be nice, and don&#39;t violate the object&#39;s encapsulation without a very good reason. Perl does not enforce encapsulation. We are not totalitarians here. We do expect some basic civility though.</li>
</ol>

<p>Using a string or number as a reference produces a symbolic reference, as explained above. Using a reference as a number produces an integer representing its storage location in memory. The only useful thing to be done with this is to compare two references numerically to see whether they refer to the same location. <!--
	INDEX: reference, numeric context
--></p>

<pre class="sh_perl">    if ($ref1 == $ref2) {  # cheap numeric compare of references
        print &#34;refs 1 and 2 refer to the same thing\n&#34;;
    }</pre>

<p>Using a reference as a string produces both its referent&#39;s type, including any package blessing as described in <a href="/~flora/perl-5.14.2/pod/perlobj.pod" class="podlinkpod"
>perlobj</a>, as well as the numeric address expressed in hex. The ref() operator returns just the type of thing the reference is pointing to, without the address. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#ref" class="podlinkpod"
>&#34;ref&#34; in perlfunc</a> for details and examples of its use. <!--
	INDEX: reference, string context
--></p>

<p>The bless() operator may be used to associate the object a reference points to with a package functioning as an object class. See <a href="/~flora/perl-5.14.2/pod/perlobj.pod" class="podlinkpod"
>perlobj</a>.</p>

<p>A typeglob may be dereferenced the same way a reference can, because the dereference syntax always indicates the type of reference desired. So <code>${*foo}</code> and <code>${\$foo}</code> both indicate the same scalar variable.</p>

<p>Here&#39;s a trick for interpolating a subroutine call into a string:</p>

<pre class="sh_perl">    print &#34;My sub returned @{[mysub(1,2,3)]} that time.\n&#34;;</pre>

<p>The way it works is that when the <code>@{...}</code> is seen in the double-quoted string, it&#39;s evaluated as a block. The block creates a reference to an anonymous array containing the results of the call to <code>mysub(1,2,3)</code>. So the whole block returns a reference to an array, which is then dereferenced by <code>@{...}</code> and stuck into the double-quoted string. This chicanery is also useful for arbitrary expressions:</p>

<pre class="sh_perl">    print &#34;That yields @{[$n + 5]} widgets\n&#34;;</pre>

<p>Similarly, an expression that returns a reference to a scalar can be dereferenced via <code>${...}</code>. Thus, the above expression may be written as:</p>

<pre class="sh_perl">    print &#34;That yields ${\($n + 5)} widgets\n&#34;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Symbolic_references"
>Symbolic references <!--
	INDEX: reference, symbolic
--> <!--
	INDEX: reference, soft
--> <!--
	INDEX: symbolic reference
--> <!--
	INDEX: soft reference
--></a></h2>

<p>We said that references spring into existence as necessary if they are undefined, but we didn&#39;t say what happens if a value used as a reference is already defined, but <i>isn&#39;t</i> a hard reference. If you use it as a reference, it&#39;ll be treated as a symbolic reference. That is, the value of the scalar is taken to be the <i>name</i> of a variable, rather than a direct link to a (possibly) anonymous value.</p>

<p>People frequently expect it to work like this. So it does.</p>

<pre class="sh_perl">    $name = &#34;foo&#34;;
    $$name = 1;                 # Sets $foo
    ${$name} = 2;               # Sets $foo
    ${$name x 2} = 3;           # Sets $foofoo
    $name-&#62;[0] = 4;             # Sets $foo[0]
    @$name = ();                # Clears @foo
    &#38;$name();                   # Calls &#38;foo() (as in Perl 4)
    $pack = &#34;THAT&#34;;
    ${&#34;${pack}::$name&#34;} = 5;    # Sets $THAT::foo without eval</pre>

<p>This is powerful, and slightly dangerous, in that it&#39;s possible to intend (with the utmost sincerity) to use a hard reference, and accidentally use a symbolic reference instead. To protect against that, you can say</p>

<pre class="sh_perl">    use strict &#39;refs&#39;;</pre>

<p>and then only hard references will be allowed for the rest of the enclosing block. An inner block may countermand that with</p>

<pre class="sh_perl">    no strict &#39;refs&#39;;</pre>

<p>Only package variables (globals, even if localized) are visible to symbolic references. Lexical variables (declared with my()) aren&#39;t in a symbol table, and thus are invisible to this mechanism. For example:</p>

<pre class="sh_perl">    local $value = 10;
    $ref = &#34;value&#34;;
    {
        my $value = 20;
        print $$ref;
    }</pre>

<p>This will still print 10, not 20. Remember that local() affects package variables, which are all &#34;global&#34; to the package.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Not-so-symbolic_references"
>Not-so-symbolic references</a></h2>

<p>A new feature contributing to readability in perl version 5.001 is that the brackets around a symbolic reference behave more like quotes, just as they always have within a string. That is,</p>

<pre class="sh_perl">    $push = &#34;pop on &#34;;
    print &#34;${push}over&#34;;</pre>

<p>has always meant to print &#34;pop on over&#34;, even though push is a reserved word. This has been generalized to work the same outside of quotes, so that</p>

<pre class="sh_perl">    print ${push} . &#34;over&#34;;</pre>

<p>and even</p>

<pre class="sh_perl">    print ${ push } . &#34;over&#34;;</pre>

<p>will have the same effect. (This would have been a syntax error in Perl 5.000, though Perl 4 allowed it in the spaceless form.) This construct is <i>not</i> considered to be a symbolic reference when you&#39;re using strict refs:</p>

<pre class="sh_perl">    use strict &#39;refs&#39;;
    ${ bareword };      # Okay, means $bareword.
    ${ &#34;bareword&#34; };    # Error, symbolic reference.</pre>

<p>Similarly, because of all the subscripting that is done using single words, we&#39;ve applied the same rule to any bareword that is used for subscripting a hash. So now, instead of writing</p>

<pre class="sh_perl">    $array{ &#34;aaa&#34; }{ &#34;bbb&#34; }{ &#34;ccc&#34; }</pre>

<p>you can write just</p>

<pre class="sh_perl">    $array{ aaa }{ bbb }{ ccc }</pre>

<p>and not worry about whether the subscripts are reserved words. In the rare event that you do wish to do something like</p>

<pre class="sh_perl">    $array{ shift }</pre>

<p>you can force interpretation as a reserved word by adding anything that makes it more than a bareword:</p>

<pre class="sh_perl">    $array{ shift() }
    $array{ +shift }
    $array{ shift @_ }</pre>

<p>The <code>use warnings</code> pragma or the <b>-w</b> switch will warn you if it interprets a reserved word as a string. But it will no longer warn you about using lowercase words, because the string is effectively quoted.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Pseudo-hashes:_Using_an_array_as_a_hash"
>Pseudo-hashes: Using an array as a hash <!--
	INDEX: pseudo-hash
--> <!--
	INDEX: pseudo hash
--> <!--
	INDEX: pseudohash
--></a></h2>

<p>Pseudo-hashes have been removed from Perl. The &#39;fields&#39; pragma remains available.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Function_Templates"
>Function Templates <!--
	INDEX: scope, lexical
--> <!--
	INDEX: closure
--> <!--
	INDEX: lexical
--> <!--
	INDEX: lexical scope
--> <!--
	INDEX: subroutine, nested
--> <!--
	INDEX: sub, nested
--> <!--
	INDEX: subroutine, local
--> <!--
	INDEX: sub, local
--></a></h2>

<p>As explained above, an anonymous function with access to the lexical variables visible when that function was compiled, creates a closure. It retains access to those variables even though it doesn&#39;t get run until later, such as in a signal handler or a Tk callback.</p>

<p>Using a closure as a function template allows us to generate many functions that act similarly. Suppose you wanted functions named after the colors that generated HTML font changes for the various colors:</p>

<pre class="sh_perl">    print &#34;Be &#34;, red(&#34;careful&#34;), &#34;with that &#34;, green(&#34;light&#34;);</pre>

<p>The red() and green() functions would be similar. To create these, we&#39;ll assign a closure to a typeglob of the name of the function we&#39;re trying to build.</p>

<pre class="sh_perl">    @colors = qw(red blue green yellow orange purple violet);
    for my $name (@colors) {
        no strict &#39;refs&#39;;       # allow symbol table manipulation
        *$name = *{uc $name} = sub { &#34;&#60;FONT COLOR=&#39;$name&#39;&#62;@_&#60;/FONT&#62;&#34; };
    } </pre>

<p>Now all those different functions appear to exist independently. You can call red(), RED(), blue(), BLUE(), green(), etc. This technique saves on both compile time and memory use, and is less error-prone as well, since syntax checks happen at compile time. It&#39;s critical that any variables in the anonymous subroutine be lexicals in order to create a proper closure. That&#39;s the reasons for the <code>my</code> on the loop iteration variable.</p>

<p>This is one of the only places where giving a prototype to a closure makes much sense. If you wanted to impose scalar context on the arguments of these functions (probably not a wise idea for this particular example), you could have written it this way instead:</p>

<pre class="sh_perl">    *$name = sub ($) { &#34;&#60;FONT COLOR=&#39;$name&#39;&#62;$_[0]&#60;/FONT&#62;&#34; };</pre>

<p>However, since prototype checking happens at compile time, the assignment above happens too late to be of much use. You could address this by putting the whole loop of assignments within a BEGIN block, forcing it to occur during compilation.</p>

<p>Access to lexicals that change over time--like those in the <code>for</code> loop above, basically aliases to elements from the surrounding lexical scopes-- only works with anonymous subs, not with named subroutines. Generally said, named subroutines do not nest properly and should only be declared in the main package scope.</p>

<p>This is because named subroutines are created at compile time so their lexical variables get assigned to the parent lexicals from the first execution of the parent block. If a parent scope is entered a second time, its lexicals are created again, while the nested subs still reference the old ones.</p>

<p>Anonymous subroutines get to capture each time you execute the <code>sub</code> operator, as they are created on the fly. If you are accustomed to using nested subroutines in other programming languages with their own private variables, you&#39;ll have to work at it a bit in Perl. The intuitive coding of this type of thing incurs mysterious warnings about &#34;will not stay shared&#34; due to the reasons explained above. For example, this won&#39;t work:</p>

<pre class="sh_perl">    sub outer {
        my $x = $_[0] + 35;
        sub inner { return $x * 19 }   # WRONG
        return $x + inner();
    }</pre>

<p>A work-around is the following:</p>

<pre class="sh_perl">    sub outer {
        my $x = $_[0] + 35;
        local *inner = sub { return $x * 19 };
        return $x + inner();
    }</pre>

<p>Now inner() can only be called from within outer(), because of the temporary assignments of the anonymous subroutine. But when it does, it has normal access to the lexical variable $x from the scope of outer() at the time outer is invoked.</p>

<p>This has the interesting effect of creating a function local to another function, something not normally supported in Perl.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WARNING"
>WARNING <!--
	INDEX: reference, string context
--> <!--
	INDEX: reference, use as hash key
--> <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You may not (usefully) use a reference as the key to a hash. It will be converted into a string:</p>

<pre class="sh_perl">    $x{ \$a } = $a;</pre>

<p>If you try to dereference the key, it won&#39;t do a hard dereference, and you won&#39;t accomplish what you&#39;re attempting. You might want to do something more like</p>

<pre class="sh_perl">    $r = \@a;
    $x{ $r } = $r;</pre>

<p>And then at least you can use the values(), which will be real refs, instead of the keys(), which won&#39;t.</p>

<p>The standard Tie::RefHash module provides a convenient workaround to this.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Besides the obvious documents, source code can be instructive. Some pathological examples of the use of references can be found in the <em>t/op/ref.t</em> regression test in the Perl source directory.</p>

<p>See also <a href="/~flora/perl-5.14.2/pod/perldsc.pod" class="podlinkpod"
>perldsc</a> and <a href="/~flora/perl-5.14.2/pod/perllol.pod" class="podlinkpod"
>perllol</a> for how to use references to create complex data structures, and <a href="/~flora/perl-5.14.2/pod/perltoot.pod" class="podlinkpod"
>perltoot</a>, <a href="/~flora/perl-5.14.2/pod/perlobj.pod" class="podlinkpod"
>perlobj</a>, and <a href="/~flora/perl-5.14.2/pod/perlbot.pod" class="podlinkpod"
>perlbot</a> for how to use them to create objects.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78234 Uploads, 24724 Distributions
106030 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Document']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Document']);
    });
  });
</script>
<!-- Thu Apr 26 22:45:29 2012 GMT (0.124547958374023) @cpansearch1 -->
 </body>
</html>
