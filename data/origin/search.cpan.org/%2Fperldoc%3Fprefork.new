<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>prefork - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","prefork",3]);
    _gaq.push(["_setCustomVar",5,"Release","prefork-1.04",3]);
    _gaq.push(["_setCustomVar",3,"Module","prefork",3]);
    _gaq.push(["_setCustomVar",1,"Author","ADAMK",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?prefork">permalink</a></div>
  <a href="/~adamk/">Adam Kennedy</a> &gt;
  <a href="/~adamk/prefork-1.04/">prefork-1.04</a> &gt;
  prefork
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/884124d0169f41668fb3f948b2ba8b0a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/A/AD/ADAMK/prefork-1.04.tar.gz">prefork-1.04.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=prefork;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~ADAMK/prefork-1.04/lib/prefork.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=prefork">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.04 &nbsp;
<span class="noprint">
  <a href="/src/ADAMK/prefork-1.04/lib/prefork.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#INTRODUCTION'>INTRODUCTION</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Loaders_and_Forkers'>Loaders and Forkers</a>
    <li class='indexItem indexItem2'><a href='#Usage_as_a_Pragma'>Usage as a Pragma</a>
    <li class='indexItem indexItem2'><a href='#Compatbility_with_mod_perl_and_others'>Compatbility with mod_perl and others</a>
    <li class='indexItem indexItem2'><a href='#Using_prefork.pm'>Using prefork.pm</a>
    <li class='indexItem indexItem2'><a href='#Modules_that_are_prefork-aware'>Modules that are prefork-aware</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#prefork_$module'>prefork $module</a>
    <li class='indexItem indexItem2'><a href='#enable'>enable</a>
    <li class='indexItem indexItem2'><a href='#notify_&#38;function'>notify &#38;function</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#TO_DO'>TO DO</a>
  <li class='indexItem indexItem1'><a href='#SUPPORT'>SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>prefork - Optimized module loading for forking or non-forking processes</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>In a module that normally delays module loading with require</p>

<pre class="sh_perl">  # Module Foo::Bar only uses This::That 25% of the time.
  # We want to preload in in forking scenarios (like mod_perl), but
  # we want to delay loading in non-forking scenarios (like CGI)
  use prefork &#39;This::That&#39;;
  
  sub do_something {
      my $arg = shift;
  
      # Load the module at run-time as normal
      if ( $special_case ) {
          require This::That;
          This::That::blah(@_);
      }
  }
  
  # Register a module to be loaded before forking directly
  prefork::prefork(&#39;Module::Name&#39;);</pre>

<p>In a script or module that is going to be forking.</p>

<pre class="sh_perl">  package Module::Forker;
  
  # Enable forking mode
  use prefork &#39;:enable&#39;;
  
  # Or call it directly
  prefork::enable();</pre>

<p>In a third-party run-time loader</p>

<pre class="sh_perl">  package Runtime::Loader;
  
  use prefork ();
  prefork::notify( \&#38;load_everything );
  
  ...
  
  sub load_everything { ... }
  
  1;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INTRODUCTION"
>INTRODUCTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The task of optimizing module loading in Perl tends to move in two different directions, depending on the context.</p>

<p>In a procedural context, such as scripts and CGI-type situations, you can improve the load times and memory usage by loading a module at run-time, only once you are sure you will need it.</p>

<p>In the other common load profile for perl applications, the application will start up and then fork off various worker processes. To take full advantage of memory copy-on-write features, the application should load as many modules as possible before forking to prevent them consuming memory in multiple worker processes.</p>

<p>Unfortunately, the strategies used to optimise for these two load profiles are diametrically opposed. What improves a situation for one tends to make life worse for the other.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <code>prefork</code> pragma is intended to allow module writers to optimise module loading for <b>both</b> scenarios with as little additional code as possible.</p>

<p>prefork.pm is intended to serve as a central and optional marshalling point for state detection (are we running in compile-time or run-time mode) and to act as a relatively light-weight module loader.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Loaders_and_Forkers"
>Loaders and Forkers</a></h2>

<p><code>prefork</code> is intended to be used in two different ways.</p>

<p>The first is by a module that wants to indicate that another module should be loaded before forking. This is known as a &#34;Loader&#34;.</p>

<p>The other is a script or module that will be initiating the forking. It will tell prefork.pm that it is either going to fork, or is about to fork, or for some other reason all modules previously mentioned by the Loaders should be loaded immediately.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Usage_as_a_Pragma"
>Usage as a Pragma</a></h2>

<p>A Loader can register a module to be loaded using the following</p>

<pre class="sh_perl">  use prefork &#39;My::Module&#39;;</pre>

<p>The same thing can be done in such a way as to not require prefork being installed, but taking advantage of it if it is.</p>

<pre class="sh_perl">  eval &#34;use prefork &#39;My::Module&#39;;&#34;;</pre>

<p>A Forker can indicate that it will be forking with the following</p>

<pre class="sh_perl">  use prefork &#39;:enable&#39;;</pre>

<p>In any use of <code>prefork</code> as a pragma, you can only pass a single value as argument. Any additional arguments will be ignored. (This may throw an error in future versions).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Compatbility_with_mod_perl_and_others"
>Compatbility with mod_perl and others</a></h2>

<p>Part of the design of <code>prefork</code>, and its minimalistic nature, is that it is intended to work easily with existing modules, needing only small changes.</p>

<p>For example, <code>prefork</code> itself will detect the <code>$ENV{MOD_PERL}</code> environment variable and automatically start in forking mode.</p>

<p>prefork has support for integrating with third-party modules, such as <a href="/perldoc?Class%3A%3AAutouse" class="podlinkpod"
>Class::Autouse</a>. The <code>notify</code> function allows these run-time loaders to register callbacks, to be called once prefork enters forking mode.</p>

<p>The synopsis entry above describes adding support for prefork.pm as a dependency. To allow your third-party module loader without a dependency and only if it is installed use the following:</p>

<pre class="sh_perl">  eval { require prefork; }
  prefork::notify( \&#38;function ) unless $@;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Using_prefork.pm"
>Using prefork.pm</a></h2>

<p>From the Loader side, it is fairly simple. prefork becomes a dependency for your module, and you use it as a pragma as documented above.</p>

<p>For the Forker, you have two options. Use as a dependency or optional use.</p>

<p>In the dependency case, you add prefork as a dependency and use it as a pragma with the &#39;:enable&#39; option.</p>

<p>To add only optional support for prefork, without requiring it to be installed, you should wait until the moment just before you fork and then call <code>prefork::enable</code> directly ONLY if it is loaded.</p>

<pre class="sh_perl">  # Load modules if any use the prefork pragma.
  prefork::enable() if $INC{prefork.pm};</pre>

<p>This will cause the modules to be loaded ONLY if there are any modules that need to be loaded. The main advantage of the dependency version is that you only need to enable the module once, and not before each fork.</p>

<p>If you wish to have your own module leverage off the forking-detection that prefork provides, you can also do the following.</p>

<pre class="sh_perl">  use prefork;
  if ( $prefork::FORKING ) {
      # Complete some preparation task
  }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Modules_that_are_prefork-aware"
>Modules that are prefork-aware</a></h2>

<dl>
<dt><a name='mod_perl'></a><a name="mod_perl/mod_perl2"
>mod_perl/mod_perl2</a></dt>

<dd>
<dt><a name='Class'></a><a name="Class::Autouse"
>Class::Autouse</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prefork_$module"
>prefork $module</a></h2>

<p>The &#39;prefork&#39; function indicates that a module should be loaded before the process will fork. If already in forking mode the module will be loaded immediately.</p>

<p>Otherwise it will be added to a queue to be loaded later if it recieves instructions that it is going to be forking.</p>

<p>Returns true on success, or dies on error.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="enable"
>enable</a></h2>

<p>The <code>enable</code> function indicates to the prefork module that the process is going to fork, possibly immediately.</p>

<p>When called, prefork.pm will immediately load all outstanding modules, and will set a flag so that any further &#39;prefork&#39; calls will load the module at that time.</p>

<p>Returns true, dieing as normal is there is a problem loading a module.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="notify_&#38;function"
>notify &#38;function</a></h2>

<p>The <code>notify</code> function is used to integrate support for modules other than prefork.pm itself.</p>

<p>A module loader calls the notify function, passing it a reference to a <code>CODE</code> reference (either anon or a function reference). <code>prefork</code> will store this CODE reference, and execute it immediately as soon as it knows it is in forking-mode, but after it loads its own modules.</p>

<p>Callbacks are called in the order they are registered.</p>

<p>Normally, this will happen as soon as the <code>enable</code> function is called.</p>

<p>However, you should be aware that if prefork is <b>already</b> in preforking mode at the time that the notify function is called, prefork.pm will execute the function immediately.</p>

<p>This means that any third party module loader should be fully loaded and initialised <b>before</b> the callback is provided to <code>notify</code>.</p>

<p>Returns true if the function is stored, or dies if not passed a <code>CODE</code> reference, or the callback is already set in the notify queue.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TO_DO"
>TO DO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>- Add checks for more pre-forking situations</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT"
>SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Bugs should be always submitted via the CPAN bug tracker, located at</p>

<p><a href="http://rt.cpan.org/NoAuth/ReportBug.html?Queue=prefork" class="podlinkurl"
>http://rt.cpan.org/NoAuth/ReportBug.html?Queue=prefork</a></p>

<p>For other issues, or commercial enhancement or support, contact the author.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Adam Kennedy &#60;adamk@cpan.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Thank you to Phase N Australia (<a href="http://phase-n.com/" class="podlinkurl"
>http://phase-n.com/</a>) for permitting the open sourcing and release of this distribution.</p>

<p>Copyright 2004 - 2009 Adam Kennedy.</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>The full text of the license can be found in the LICENSE file included with this module.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78124 Uploads, 24699 Distributions
105950 Modules, 9642 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Tue Apr 24 07:36:30 2012 GMT (0.0690851211547852) @cpansearch1 -->
 </body>
</html>
