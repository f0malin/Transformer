<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Config::General - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Config-General",3]);
    _gaq.push(["_setCustomVar",5,"Release","Config-General-2.50",3]);
    _gaq.push(["_setCustomVar",3,"Module","Config::General",3]);
    _gaq.push(["_setCustomVar",1,"Author","TLINDEN",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Config::General">permalink</a></div>
  <a href="/~tlinden/">T. Linden</a> &gt;
  <a href="/~tlinden/Config-General-2.50/">Config-General-2.50</a> &gt;
  Config::General
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/fce8aada41e92bb2abaa3c4731ca3a51?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/T/TL/TLINDEN/Config-General-2.50.tar.gz">Config-General-2.50.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Config%3A%3AGeneral;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~TLINDEN/Config-General-2.50/General.pm">Annotate this POD
(3)
</a></p>
     <p style="text-align:right"><a href="http://search.cpan.org/dist/Config-General/">Website</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Config%3A%3AIniFiles">Config::IniFiles</a><br>
<a href="/perldoc?XML%3A%3ASimple">XML::Simple</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?CGI%3A%3ACarp">CGI::Carp</a><br>
<a href="/perldoc?CGI%3A%3AApplication">CGI::Application</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?Mail%3A%3AInternet">Mail::Internet</a><br>
<a href="/perldoc?Getopt%3A%3ALong">Getopt::Long</a><br>
<a href="/perldoc?Config%3A%3AAny">Config::Any</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Config%3A%3AGeneral">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 3</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 7</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Config-General">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.50 &nbsp;
<span class="noprint">
  <a href="/src/TLINDEN/Config-General-2.50/General.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#SUBROUTINES/METHODS'>SUBROUTINES/METHODS</a>
  <li class='indexItem indexItem1'><a href='#CONFIG_FILE_FORMAT'>CONFIG FILE FORMAT</a>
  <li class='indexItem indexItem1'><a href='#BLOCKS'>BLOCKS</a>
  <li class='indexItem indexItem1'><a href='#NAMED_BLOCKS'>NAMED BLOCKS</a>
  <li class='indexItem indexItem1'><a href='#WHITESPACE_IN_BLOCKS'>WHITESPACE IN BLOCKS</a>
  <li class='indexItem indexItem1'><a href='#EXPLICIT_EMPTY_BLOCKS'>EXPLICIT EMPTY BLOCKS</a>
  <li class='indexItem indexItem1'><a href='#IDENTICAL_OPTIONS_(ARRAYS)'>IDENTICAL OPTIONS (ARRAYS)</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#FORCE_SINGLE_VALUE_ARRAYS'>FORCE SINGLE VALUE ARRAYS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#LONG_LINES'>LONG LINES</a>
  <li class='indexItem indexItem1'><a href='#HERE_DOCUMENTS'>HERE DOCUMENTS</a>
  <li class='indexItem indexItem1'><a href='#INCLUDES'>INCLUDES</a>
  <li class='indexItem indexItem1'><a href='#COMMENTS'>COMMENTS</a>
  <li class='indexItem indexItem1'><a href='#OBJECT_ORIENTED_INTERFACE'>OBJECT ORIENTED INTERFACE</a>
  <li class='indexItem indexItem1'><a href='#VARIABLE_INTERPOLATION'>VARIABLE INTERPOLATION</a>
  <li class='indexItem indexItem1'><a href='#EXPORTED_FUNCTIONS'>EXPORTED FUNCTIONS</a>
  <li class='indexItem indexItem1'><a href='#CONFIGURATION_AND_ENVIRONMENT'>CONFIGURATION AND ENVIRONMENT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#LICENSE_AND_COPYRIGHT'>LICENSE AND COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#BUGS_AND_LIMITATIONS'>BUGS AND LIMITATIONS</a>
  <li class='indexItem indexItem1'><a href='#INCOMPATIBILITIES'>INCOMPATIBILITIES</a>
  <li class='indexItem indexItem1'><a href='#DIAGNOSTICS'>DIAGNOSTICS</a>
  <li class='indexItem indexItem1'><a href='#DEPENDENCIES'>DEPENDENCIES</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Config::General - Generic Config Module</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> #
 # the OOP way
 use Config::General;
 $conf = new Config::General(&#34;rcfile&#34;);
 my %config = $conf-&#62;getall;

 #
 # the procedural way
 use Config::General qw(ParseConfig SaveConfig SaveConfigString);
 my %config = ParseConfig(&#34;rcfile&#34;);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module opens a config file and parses its contents for you. The <b>new</b> method requires one parameter which needs to be a filename. The method <b>getall</b> returns a hash which contains all options and its associated values of your config file.</p>

<p>The format of config files supported by <b>Config::General</b> is inspired by the well known Apache config format, in fact, this module is 100% compatible to Apache configs, but you can also just use simple name/value pairs in your config files.</p>

<p>In addition to the capabilities of an Apache config file it supports some enhancements such as here-documents, C-style comments or multiline options.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUBROUTINES/METHODS"
>SUBROUTINES/METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='new'></a><a name="new()"
>new()</a></dt>

<dd>
<p>Possible ways to call <b>new()</b>:</p>

<pre class="sh_perl"> $conf = new Config::General(&#34;rcfile&#34;);

 $conf = new Config::General(\%somehash);

 $conf = new Config::General( %options ); # see below for description of possible options</pre>

<p>This method returns a <b>Config::General</b> object (a hash blessed into &#34;Config::General&#34; namespace. All further methods must be used from that returned object. see below.</p>

<p>You can use the new style with hash parameters or the old style which is of course still supported. Possible parameters to <b>new()</b> are:</p>

<p>* a filename of a configfile, which will be opened and parsed by the parser</p>

<p>or</p>

<p>* a hash reference, which will be used as the config.</p>

<p>An alternative way to call <b>new()</b> is supplying an option- hash with one or more of the following keys set:</p>

<dl>
<dt><a name='ConfigFile'></a><a name="-ConfigFile"
><b>-ConfigFile</b></a></dt>

<dd>
<p>A filename or a filehandle, i.e.:</p>

<pre class="sh_perl"> -ConfigFile =&#62; &#34;rcfile&#34; or -ConfigFile =&#62; \$FileHandle</pre>

<dt><a name='ConfigHash'></a><a name="-ConfigHash"
><b>-ConfigHash</b></a></dt>

<dd>
<p>A hash reference, which will be used as the config, i.e.:</p>

<pre class="sh_perl"> -ConfigHash =&#62; \%somehash</pre>

<dt><a name='String'></a><a name="-String"
><b>-String</b></a></dt>

<dd>
<p>A string which contains a whole config, or an arrayref containing the whole config line by line. The parser will parse the contents of the string instead of a file. i.e:</p>

<pre class="sh_perl"> -String =&#62; $complete_config</pre>

<p>it is also possible to feed an array reference to -String:</p>

<pre class="sh_perl"> -String =&#62; \@config_lines</pre>

<dt><a name='AllowMultiOptions'></a><a name="-AllowMultiOptions"
><b>-AllowMultiOptions</b></a></dt>

<dd>
<p>If the value is &#34;no&#34;, then multiple identical options are disallowed. The default is &#34;yes&#34;. i.e.:</p>

<pre class="sh_perl"> -AllowMultiOptions =&#62; &#34;yes&#34;</pre>

<p>see <b>IDENTICAL OPTIONS</b> for details.</p>

<dt><a name='LowerCaseNames'></a><a name="-LowerCaseNames"
><b>-LowerCaseNames</b></a></dt>

<dd>
<p>If set to a true value, then all options found in the config will be converted to lowercase. This allows you to provide case-in-sensitive configs. The values of the options will <b>not</b> lowercased.</p>

<dt><a name='UseApacheInclude'></a><a name="-UseApacheInclude"
><b>-UseApacheInclude</b></a></dt>

<dd>
<p>If set to a true value, the parser will consider &#34;include ...&#34; as valid include statement (just like the well known Apache include statement).</p>

<dt><a name='IncludeRelative'></a><a name="-IncludeRelative"
><b>-IncludeRelative</b></a></dt>

<dd>
<p>If set to a true value, included files with a relative path (i.e. &#34;cfg/blah.conf&#34;) will be opened from within the location of the configfile instead from within the location of the script($0). This works only if the configfile has a absolute pathname (i.e. &#34;/etc/main.conf&#34;).</p>

<p>If the variable <b>-ConfigPath</b> has been set and if the file to be included could not be found in the location relative to the current config file, the module will search within <b>-ConfigPath</b> for the file. See the description of <b>-ConfigPath</b> for more details.</p>

<dt><a name='IncludeDirectories'></a><a name="-IncludeDirectories"
><b>-IncludeDirectories</b></a></dt>

<dd>
<p>If set to a true value, you may specify include a directory, in which case all files inside the directory will be loaded in ASCII order. Directory includes will not recurse into subdirectories. This is comparable to including a directory in Apache-style config files.</p>

<dt><a name='IncludeGlob'></a><a name="-IncludeGlob"
><b>-IncludeGlob</b></a></dt>

<dd>
<p>If set to a true value, you may specify a glob pattern for an include to include all matching files (e.g. &#60;&#60;include conf.d/*.conf&#62;&#62;). Also note that as with standard file patterns, * will not match dot-files, so &#60;&#60;include dir/*&#62;&#62; is often more desirable than including a directory with <b>-IncludeDirectories</b>.</p>

<dt><a name='IncludeAgain'></a><a name="-IncludeAgain"
><b>-IncludeAgain</b></a></dt>

<dd>
<p>If set to a true value, you will be able to include a sub-configfile multiple times. With the default, false, you will get a warning about duplicate includes and only the first include will succeed.</p>

<p>Reincluding a configfile can be useful if it contains data that you want to be present in multiple places in the data tree. See the example under <a href="#INCLUDES" class="podlinkpod"
>&#34;INCLUDES&#34;</a>.</p>

<p>Note, however, that there is currently no check for include recursion.</p>

<dt><a name='ConfigPath'></a><a name="-ConfigPath"
><b>-ConfigPath</b></a></dt>

<dd>
<p>As mentioned above, you can use this variable to specify a search path for relative config files which have to be included. Config::General will search within this path for the file if it cannot find the file at the location relative to the current config file.</p>

<p>To provide multiple search paths you can specify an array reference for the path. For example:</p>

<pre class="sh_perl"> @path = qw(/usr/lib/perl /nfs/apps/lib /home/lib);
 ..
 -ConfigPath =&#62; \@path</pre>

<dt><a name='MergeDuplicateBlocks'></a><a name="-MergeDuplicateBlocks"
><b>-MergeDuplicateBlocks</b></a></dt>

<dd>
<p>If set to a true value, then duplicate blocks, that means blocks and named blocks, will be merged into a single one (see below for more details on this). The default behavior of Config::General is to create an array if some junk in a config appears more than once.</p>

<dt><a name='MergeDuplicateOptions'></a><a name="-MergeDuplicateOptions"
><b>-MergeDuplicateOptions</b></a></dt>

<dd>
<p>If set to a true value, then duplicate options will be merged. That means, if the same option occurs more than once, the last one will be used in the resulting config hash.</p>

<p>Setting this option implies <b>-AllowMultiOptions == false</b> unless you set <b>-AllowMultiOptions</b> explicit to &#39;true&#39;. In this case duplicate blocks are allowed and put into an array but duplicate options will be merged.</p>

<dt><a name='AutoLaunder'></a><a name="-AutoLaunder"
><b>-AutoLaunder</b></a></dt>

<dd>
<p>If set to a true value, then all values in your config file will be laundered to allow them to be used under a -T taint flag. This could be regarded as circumventing the purpose of the -T flag, however, if the bad guys can mess with your config file, you have problems that -T will not be able to stop. AutoLaunder will only handle a config file being read from -ConfigFile.</p>

<dt><a name='AutoTrue'></a><a name="-AutoTrue"
><b>-AutoTrue</b></a></dt>

<dd>
<p>If set to a true value, then options in your config file, whose values are set to true or false values, will be normalised to 1 or 0 respectively.</p>

<p>The following values will be considered as <b>true</b>:</p>

<pre class="sh_perl"> yes, on, 1, true</pre>

<p>The following values will be considered as <b>false</b>:</p>

<pre class="sh_perl"> no, off, 0, false</pre>

<p>This effect is case-insensitive, i.e. both &#34;Yes&#34; or &#34;oN&#34; will result in 1.</p>

<dt><a name='FlagBits'></a><a name="-FlagBits"
><b>-FlagBits</b></a></dt>

<dd>
<p>This option takes one required parameter, which must be a hash reference.</p>

<p>The supplied hash reference needs to define variables for which you want to preset values. Each variable you have defined in this hash-ref and which occurs in your config file, will cause this variable being set to the preset values to which the value in the config file refers to.</p>

<p>Multiple flags can be used, separated by the pipe character |.</p>

<p>Well, an example will clarify things:</p>

<pre class="sh_perl"> my $conf = new Config::General(
         -ConfigFile =&#62; &#34;rcfile&#34;,
         -FlagBits =&#62; {
              Mode =&#62; {
                 CLEAR    =&#62; 1,
                 STRONG   =&#62; 1,
                 UNSECURE =&#62; &#34;32bit&#34; }
         }
 );</pre>

<p>In this example we are defining a variable named <i>&#34;Mode&#34;</i> which may contain one or more of &#34;CLEAR&#34;, &#34;STRONG&#34; and &#34;UNSECURE&#34; as value.</p>

<p>The appropriate config entry may look like this:</p>

<pre class="sh_perl"> # rcfile
 Mode = CLEAR | UNSECURE</pre>

<p>The parser will create a hash which will be the value of the key &#34;Mode&#34;. This hash will contain <b>all</b> flags which you have pre-defined, but only those which were set in the config will contain the pre-defined value, the other ones will be undefined.</p>

<p>The resulting config structure would look like this after parsing:</p>

<pre class="sh_perl"> %config = (
             Mode =&#62; {
                       CLEAR    =&#62; 1,
                       UNSECURE =&#62; &#34;32bit&#34;,
                       STRONG   =&#62; undef,
                     }
           );</pre>

<p>This method allows the user (or, the &#34;maintainer&#34; of the configfile for your application) to set multiple pre-defined values for one option.</p>

<p>Please beware, that all occurrences of those variables will be handled this way, there is no way to distinguish between variables in different scopes. That means, if &#34;Mode&#34; would also occur inside a named block, it would also parsed this way.</p>

<p>Values which are not defined in the hash-ref supplied to the parameter <b>-FlagBits</b> and used in the corresponding variable in the config will be ignored.</p>

<p>Example:</p>

<pre class="sh_perl"> # rcfile
 Mode = BLAH | CLEAR</pre>

<p>would result in this hash structure:</p>

<pre class="sh_perl">  %config = (
             Mode =&#62; {
                       CLEAR    =&#62; 1,
                       UNSECURE =&#62; undef,
                       STRONG   =&#62; undef,
                     }
           );</pre>

<p>&#34;BLAH&#34; will be ignored silently.</p>

<dt><a name='DefaultConfig'></a><a name="-DefaultConfig"
><b>-DefaultConfig</b></a></dt>

<dd>
<p>This can be a hash reference or a simple scalar (string) of a config. This causes the module to preset the resulting config hash with the given values, which allows you to set default values for particular config options directly.</p>

<dt><a name='Tie'></a><a name="-Tie"
><b>-Tie</b></a></dt>

<dd>
<p><b>-Tie</b> takes the name of a Tie class as argument that each new hash should be based off of.</p>

<p>This hash will be used as the &#39;backing hash&#39; instead of a standard Perl hash, which allows you to affect the way, variable storing will be done. You could, for example supply a tied hash, say Tie::DxHash, which preserves ordering of the keys in the config (which a standard Perl hash won&#39;t do). Or, you could supply a hash tied to a DBM file to save the parsed variables to disk.</p>

<p>There are many more things to do in tie-land, see <a href="/perldoc?tie" class="podlinkpod"
>tie</a> to get some interesting ideas.</p>

<p>If you want to use the <b>-Tie</b> feature together with <b>-DefaultConfig</b> make sure that the hash supplied to <b>-DefaultConfig</b> must be tied to the same Tie class.</p>

<p>Make sure that the hash which receives the generated hash structure (e.g. which you are using in the assignment: %hash = $config-&#62;getall()) must be tied to the same Tie class.</p>

<p>Example:</p>

<pre class="sh_perl"> use Config::General qw(ParseConfig);
 use Tie::IxHash;
 tie my %hash, &#34;Tie::IxHash&#34;;
 %hash = ParseConfig(
           -ConfigFile =&#62; shift(),
           -Tie =&#62; &#34;Tie::IxHash&#34;
         );</pre>

<dt><a name='InterPolateVars'></a><a name="-InterPolateVars"
><b>-InterPolateVars</b></a></dt>

<dd>
<p>If set to a true value, variable interpolation will be done on your config input. See <a href="/~tlinden/Config-General-2.50/General/Interpolated.pm" class="podlinkpod"
>Config::General::Interpolated</a> for more information.</p>

<dt><a name='InterPolateEnv'></a><a name="-InterPolateEnv"
><b>-InterPolateEnv</b></a></dt>

<dd>
<p>If set to a true value, environment variables can be used in configs.</p>

<p>This implies <b>-InterPolateVars</b>.</p>

<dt><a name='AllowSingleQuoteInterpolation'></a><a name="-AllowSingleQuoteInterpolation"
><b>-AllowSingleQuoteInterpolation</b></a></dt>

<dd>
<p>By default variables inside single quotes will not be interpolated. If you turn on this option, they will be interpolated as well.</p>

<dt><a name='ExtendedAccess'></a><a name="-ExtendedAccess"
><b>-ExtendedAccess</b></a></dt>

<dd>
<p>If set to a true value, you can use object oriented (extended) methods to access the parsed config. See <a href="/~tlinden/Config-General-2.50/General/Extended.pm" class="podlinkpod"
>Config::General::Extended</a> for more informations.</p>

<dt><a name='StrictObjects'></a><a name="-StrictObjects"
><b>-StrictObjects</b></a></dt>

<dd>
<p>By default this is turned on, which causes Config::General to croak with an error if you try to access a non-existent key using the OOP-way (<b>-ExtendedAcess</b> enabled). If you turn <b>-StrictObjects</b> off (by setting to 0 or &#34;no&#34;) it will just return an empty object/hash/scalar. This is valid for OOP-access 8via AUTOLOAD and for the methods obj(), hash() and value().</p>

<dt><a name='StrictVars'></a><a name="-StrictVars"
><b>-StrictVars</b></a></dt>

<dd>
<p>By default this is turned on, which causes Config::General to croak with an error if an undefined variable with <b>InterPolateVars</b> turned on occurs in a config. Set to <i>false</i> (i.e. 0) to avoid such error messages.</p>

<dt><a name='SplitPolicy'></a><a name="-SplitPolicy"
><b>-SplitPolicy</b></a></dt>

<dd>
<p>You can influence the way how Config::General decides which part of a line in a config file is the key and which one is the value. By default it tries its best to guess. That means you can mix equalsign assignments and whitespace assignments.</p>

<p>However, somtime you may wish to make it more strictly for some reason. In this case you can set <b>-SplitPolicy</b>. The possible values are: &#39;guess&#39; which is the default, &#39;whitespace&#39; which causes the module to split by whitespace, &#39;equalsign&#39; which causes it to split strictly by equal sign, or &#39;custom&#39;. In the latter case you must also set <b>-SplitDelimiter</b> to some regular expression of your choice. For example:</p>

<pre class="sh_perl"> -SplitDelimiter =&#62; &#39;\s*:\s*&#39;</pre>

<p>will cause the module to split by colon while whitespace which surrounds the delimiter will be removed.</p>

<p>Please note that the delimiter used when saving a config (save_file() or save_string()) will be chosen according to the current <b>-SplitPolicy</b>. If -SplitPolicy is set to &#39;guess&#39; or &#39;whitespace&#39;, 3 spaces will be used to delimit saved options. If &#39;custom&#39; is set, then you need to set <b>-StoreDelimiter</b>.</p>

<dt><a name='SplitDelimiter'></a><a name="-SplitDelimiter"
><b>-SplitDelimiter</b></a></dt>

<dd>
<p>Set this to any arbitrary regular expression which will be used for option/value splitting. <b>-SplitPolicy</b> must be set to &#39;custom&#39; to make this work.</p>

<dt><a name='StoreDelimiter'></a><a name="-StoreDelimiter"
><b>-StoreDelimiter</b></a></dt>

<dd>
<p>You can use this parameter to specify a custom delimiter to use when saving configs to a file or string. You only need to set it if you want to store the config back to disk and if you have <b>-SplitPolicy</b> set to &#39;custom&#39;.</p>

<p>Be very careful with this parameter.</p>

<dt><a name='CComments'></a><a name="-CComments"
><b>-CComments</b></a></dt>

<dd>
<p>Config::General is able to notice c-style comments (see section COMMENTS). But for some reason you might no need this. In this case you can turn this feature off by setting <b>-CComments</b> to a false value(&#39;no&#39;, 0, &#39;off&#39;).</p>

<p>By default <b>-CComments</b> is turned on.</p>

<dt><a name='BackslashEscape'></a><a name="-BackslashEscape"
><b>-BackslashEscape</b></a></dt>

<dd>
<p><b>Deprecated Option</b>.</p>

<dt><a name='SlashIsDirectory'></a><a name="-SlashIsDirectory"
><b>-SlashIsDirectory</b></a></dt>

<dd>
<p>If you turn on this parameter, a single slash as the last character of a named block will be considered as a directory name.</p>

<p>By default this flag is turned off, which makes the module somewhat incompatible to Apache configs, since such a setup will be normally considered as an explicit empty block, just as XML defines it.</p>

<p>For example, if you have the following config:</p>

<pre class="sh_perl"> &#60;Directory /&#62;
   Index index.awk
 &#60;/Directory&#62;</pre>

<p>you will get such an error message from the parser:</p>

<pre class="sh_perl"> EndBlock &#34;&#60;/Directory&#62;&#34; has no StartBlock statement (level: 1, chunk 10)!</pre>

<p>This is caused by the fact that the config chunk below will be internally converted to:</p>

<pre class="sh_perl"> &#60;Directory&#62;&#60;/Directory&#62;
   Index index.awk
 &#60;/Directory&#62;</pre>

<p>Now there is one &#39;&#60;/Directory&#62;&#39; too much. The proper solution is to use quotation to circumvent this error:</p>

<pre class="sh_perl"> &#60;Directory &#34;/&#34;&#62;
   Index index.awk
 &#60;/Directory&#62;</pre>

<p>However, a raw apache config comes without such quotes. In this case you may consider to turn on <b>-SlashIsDirectory</b>.</p>

<p>Please note that this is a new option (incorporated in version 2.30), it may lead to various unexpected side effects or other failures. You&#39;ve been warned.</p>

<dt><a name='ApacheCompatible'></a><a name="-ApacheCompatible"
><b>-ApacheCompatible</b></a></dt>

<dd>
<p>Over the past years a lot of options has been incorporated into Config::General to be able to parse real Apache configs.</p>

<p>The new <b>-ApacheCompatible</b> option now makes it possible to tweak all options in a way that Apache configs can be parsed.</p>

<p>This is called &#34;apache compatibility mode&#34; - if you will ever have problems with parsing Apache configs without this option being set, you&#39;ll get no help by me. Thanks :)</p>

<p>The following options will be set:</p>

<pre class="sh_perl"> UseApacheInclude   = 1
 IncludeRelative    = 1
 IncludeDirectories = 1
 IncludeGlob        = 1
 SlashIsDirectory   = 1
 SplitPolicy        = &#39;equalsign&#39;
 CComments          = 0</pre>

<p>Take a look into the particular documentation sections what those options are doing.</p>

<p>Beside setting some options it also turns off support for explicit empty blocks.</p>

<dt><a name='UTF8'></a><a name="-UTF8"
><b>-UTF8</b></a></dt>

<dd>
<p>If turned on, all files will be opened in utf8 mode. This may not work properly with older versions of Perl.</p>

<dt><a name='SaveSorted'></a><a name="-SaveSorted"
><b>-SaveSorted</b></a></dt>

<dd>
<p>If you want to save configs in a sorted manner, turn this parameter on. It is not enabled by default.</p>
</dd>
</dl>

<dt><a name='getall'></a><a name="getall()"
>getall()</a></dt>

<dd>
<p>Returns a hash structure which represents the whole config.</p>

<dt><a name='files'></a><a name="files()"
>files()</a></dt>

<dd>
<p>Returns a list of all files read in.</p>

<dt><a name='save_file'></a><a name="save_file()"
>save_file()</a></dt>

<dd>
<p>Writes the config hash back to the hard disk. This method takes one or two parameters. The first parameter must be the filename where the config should be written to. The second parameter is optional, it must be a reference to a hash structure, if you set it. If you do not supply this second parameter then the internal config hash, which has already been parsed, will be used.</p>

<p>Please note that any occurence of comments will be ignored by getall() and thus be lost after you call this method.</p>

<p>You need also to know that named blocks will be converted to nested blocks (which is the same from the perl point of view). An example:</p>

<pre class="sh_perl"> &#60;user hans&#62;
   id 13
 &#60;/user&#62;</pre>

<p>will become the following after saving:</p>

<pre class="sh_perl"> &#60;user&#62;
   &#60;hans&#62;
      id 13
   &#60;/hans&#62;
 &#60;/user&#62;</pre>

<p>Example:</p>

<pre class="sh_perl"> $conf_obj-&#62;save_file(&#34;newrcfile&#34;, \%config);</pre>

<p>or, if the config has already been parsed, or if it didn&#39;t change:</p>

<pre class="sh_perl"> $conf_obj-&#62;save_file(&#34;newrcfile&#34;);</pre>

<dt><a name='save_string'></a><a name="save_string()"
>save_string()</a></dt>

<dd>
<p>This method is equivalent to the previous save_file(), but it does not store the generated config to a file. Instead it returns it as a string, which you can save yourself afterwards.</p>

<p>It takes one optional parameter, which must be a reference to a hash structure. If you omit this parameter, the internal config hash, which has already been parsed, will be used.</p>

<p>Example:</p>

<pre class="sh_perl"> my $content = $conf_obj-&#62;save_string(\%config);</pre>

<p>or:</p>

<pre class="sh_perl"> my $content = $conf_obj-&#62;save_string();</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONFIG_FILE_FORMAT"
>CONFIG FILE FORMAT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Lines beginning with <b>#</b> and empty lines will be ignored. (see section COMMENTS!) Spaces at the beginning and the end of a line will also be ignored as well as tabulators. If you need spaces at the end or the beginning of a value you can surround it with double quotes. An option line starts with its name followed by a value. An equal sign is optional. Some possible examples:</p>

<pre class="sh_perl"> user    max
 user  = max
 user            max</pre>

<p>If there are more than one statements with the same name, it will create an array instead of a scalar. See the example below.</p>

<p>The method <b>getall</b> returns a hash of all values.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BLOCKS"
>BLOCKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can define a <b>block</b> of options. A <b>block</b> looks much like a block in the wellknown Apache config format. It starts with &#60;<b>blockname</b>&#62; and ends with &#60;/<b>blockname</b>&#62;. An example:</p>

<pre class="sh_perl"> &#60;database&#62;
    host   = muli
    user   = moare
    dbname = modb
    dbpass = D4r_9Iu
 &#60;/database&#62;</pre>

<p>Blocks can also be nested. Here is a more complicated example:</p>

<pre class="sh_perl"> user   = hans
 server = mc200
 db     = maxis
 passwd = D3rf$
 &#60;jonas&#62;
        user    = tom
        db      = unknown
        host    = mila
        &#60;tablestructure&#62;
                index   int(100000)
                name    char(100)
                prename char(100)
                city    char(100)
                status  int(10)
                allowed moses
                allowed ingram
                allowed joice
        &#60;/tablestructure&#62;
 &#60;/jonas&#62;</pre>

<p>The hash which the method <b>getall</b> returns look like that:</p>

<pre class="sh_perl"> print Data::Dumper(\%hash);
 $VAR1 = {
          &#39;passwd&#39; =&#62; &#39;D3rf$&#39;,
          &#39;jonas&#39;  =&#62; {
                       &#39;tablestructure&#39; =&#62; {
                                             &#39;prename&#39; =&#62; &#39;char(100)&#39;,
                                             &#39;index&#39;   =&#62; &#39;int(100000)&#39;,
                                             &#39;city&#39;    =&#62; &#39;char(100)&#39;,
                                             &#39;name&#39;    =&#62; &#39;char(100)&#39;,
                                             &#39;status&#39;  =&#62; &#39;int(10)&#39;,
                                             &#39;allowed&#39; =&#62; [
                                                            &#39;moses&#39;,
                                                            &#39;ingram&#39;,
                                                            &#39;joice&#39;,
                                                          ]
                                           },
                       &#39;host&#39;           =&#62; &#39;mila&#39;,
                       &#39;db&#39;             =&#62; &#39;unknown&#39;,
                       &#39;user&#39;           =&#62; &#39;tom&#39;
                     },
          &#39;db&#39;     =&#62; &#39;maxis&#39;,
          &#39;server&#39; =&#62; &#39;mc200&#39;,
          &#39;user&#39;   =&#62; &#39;hans&#39;
        };</pre>

<p>If you have turned on <b>-LowerCaseNames</b> (see new()) then blocks as in the following example:</p>

<pre class="sh_perl"> &#60;Dir&#62;
   &#60;AttriBUTES&#62;
     Owner  root
   &#60;/attributes&#62;
 &#60;/dir&#62;</pre>

<p>would produce the following hash structure:</p>

<pre class="sh_perl"> $VAR1 = {
          &#39;dir&#39; =&#62; {
                    &#39;attributes&#39; =&#62; {
                                     &#39;owner  =&#62; &#34;root&#34;,
                                    }
                   }
         };</pre>

<p>As you can see, the keys inside the config hash are normalized.</p>

<p>Please note, that the above config block would result in a valid hash structure, even if <b>-LowerCaseNames</b> is not set! This is because <i>Config::General</i> does not use the block names to check if a block ends, instead it uses an internal state counter, which indicates a block end.</p>

<p>If the module cannot find an end-block statement, then this block will be ignored.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAMED_BLOCKS"
>NAMED BLOCKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you need multiple blocks of the same name, then you have to name every block. This works much like Apache config. If the module finds a named block, it will create a hashref with the left part of the named block as the key containing one or more hashrefs with the right part of the block as key containing everything inside the block(which may again be nested!). As examples says more than words:</p>

<pre class="sh_perl"> # given the following sample
 &#60;Directory /usr/frisco&#62;
        Limit Deny
        Options ExecCgi Index
 &#60;/Directory&#62;
 &#60;Directory /usr/frik&#62;
        Limit DenyAll
        Options None
 &#60;/Directory&#62;

 # you will get:
 $VAR1 = {
          &#39;Directory&#39; =&#62; {
                           &#39;/usr/frik&#39; =&#62; {
                                            &#39;Options&#39; =&#62; &#39;None&#39;,
                                            &#39;Limit&#39; =&#62; &#39;DenyAll&#39;
                                          },
                           &#39;/usr/frisco&#39; =&#62; {
                                              &#39;Options&#39; =&#62; &#39;ExecCgi Index&#39;,
                                              &#39;Limit&#39; =&#62; &#39;Deny&#39;
                                            }
                         }
        };</pre>

<p>You cannot have more than one named block with the same name because it will be stored in a hashref and therefore be overwritten if a block occurs once more.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WHITESPACE_IN_BLOCKS"
>WHITESPACE IN BLOCKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The normal behavior of Config::General is to look for whitespace in block names to decide if it&#39;s a named block or just a simple block.</p>

<p>Sometimes you may need blocknames which have whitespace in their names.</p>

<p>With named blocks this is no problem, as the module only looks for the first whitespace:</p>

<pre class="sh_perl"> &#60;person hugo gera&#62;
 &#60;/person&#62;</pre>

<p>would be parsed to:</p>

<pre class="sh_perl"> $VAR1 = {
          &#39;person&#39; =&#62; {
                       &#39;hugo gera&#39; =&#62; {
                                      },
                      }
         };</pre>

<p>The problem occurs, if you want to have a simple block containing whitespace:</p>

<pre class="sh_perl"> &#60;hugo gera&#62;
 &#60;/hugo gera&#62;</pre>

<p>This would be parsed as a named block, which is not what you wanted. In this very case you may use quotation marks to indicate that it is not a named block:</p>

<pre class="sh_perl"> &#60;&#34;hugo gera&#34;&#62;
 &#60;/&#34;hugo gera&#34;&#62;</pre>

<p>The save() method of the module inserts automatically quotation marks in such cases.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPLICIT_EMPTY_BLOCKS"
>EXPLICIT EMPTY BLOCKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Beside the notation of blocks mentioned above it is possible to use explicit empty blocks.</p>

<p>Normally you would write this in your config to define an empty block:</p>

<pre class="sh_perl"> &#60;driver Apache&#62;
 &#60;/driver&#62;</pre>

<p>To save writing you can also write:</p>

<pre class="sh_perl"> &#60;driver Apache/&#62;</pre>

<p>which is the very same as above. This works for normal blocks and for named blocks.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="IDENTICAL_OPTIONS_(ARRAYS)"
>IDENTICAL OPTIONS (ARRAYS) <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You may have more than one line of the same option with different values.</p>

<p>Example: log log1 log log2 log log2</p>

<p>You will get a scalar if the option occurred only once or an array if it occurred more than once. If you expect multiple identical options, then you may need to check if an option occurred more than once:</p>

<pre class="sh_perl"> $allowed = $hash{jonas}-&#62;{tablestructure}-&#62;{allowed};
 if(ref($allowed) eq &#34;ARRAY&#34;) {
     @ALLOWED = @{$allowed};
 else {
     @ALLOWED = ($allowed);
 }</pre>

<p>The same applies to blocks and named blocks too (they are described in more detail below). For example, if you have the following config:</p>

<pre class="sh_perl"> &#60;dir blah&#62;
   user max
 &#60;/dir&#62;
 &#60;dir blah&#62;
   user hannes
 &#60;/dir&#62;</pre>

<p>then you would end up with a data structure like this:</p>

<pre class="sh_perl"> $VAR1 = {
          &#39;dir&#39; =&#62; {
                    &#39;blah&#39; =&#62; [
                                {
                                  &#39;user&#39; =&#62; &#39;max&#39;
                                },
                                {
                                  &#39;user&#39; =&#62; &#39;hannes&#39;
                                }
                              ]
                    }
          };</pre>

<p>As you can see, the two identical blocks are stored in a hash which contains an array(-reference) of hashes.</p>

<p>Under some rare conditions you might not want this behavior with blocks (and named blocks too). If you want to get one single hash with the contents of both identical blocks, then you need to turn the <b>new()</b> parameter <b>-MergeDuplicateBlocks</b> on (see above). The parsed structure of the example above would then look like this:</p>

<pre class="sh_perl"> $VAR1 = {
          &#39;dir&#39; =&#62; {
                    &#39;blah&#39; =&#62; {
                               &#39;user&#39; =&#62; [
                                           &#39;max&#39;,
                                           &#39;hannes&#39;
                                         ]
                              }
                    }
          };</pre>

<p>As you can see, there is only one hash &#34;dir-&#62;{blah}&#34; containing multiple &#34;user&#34; entries. As you can also see, turning on <b>-MergeDuplicateBlocks</b> does not affect scalar options (i.e. &#34;option = value&#34;). In fact you can tune merging of duplicate blocks and options independent from each other.</p>

<p>If you don&#39;t want to allow more than one identical options, you may turn it off by setting the flag <i>AllowMultiOptions</i> in the <b>new()</b> method to &#34;no&#34;. If turned off, Config::General will complain about multiple occurring options with identical names!</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="FORCE_SINGLE_VALUE_ARRAYS"
>FORCE SINGLE VALUE ARRAYS</a></h2>

<p>You may also force a single config line to get parsed into an array by turning on the option <b>-ForceArray</b> and by surrounding the value of the config entry by []. Example:</p>

<pre class="sh_perl"> hostlist = [ foo.bar ]</pre>

<p>Will be a singlevalue array entry if the option is turned on. If you want it to remain to be an array you have to turn on <b>-ForceArray</b> during save too.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LONG_LINES"
>LONG LINES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you have a config value, which is too long and would take more than one line, you can break it into multiple lines by using the backslash character at the end of the line. The Config::General module will concatenate those lines to one single-value.</p>

<p>Example:</p>

<p>command = cat /var/log/secure/tripwire | \ mail <code>-s</code> &#34;report from tripwire&#34; \ honey@myotherhost.nl</p>

<p>command will become: &#34;cat /var/log/secure/tripwire | mail <code>-s</code> &#39;report from twire&#39; honey@myotherhost.nl&#34;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="HERE_DOCUMENTS"
>HERE DOCUMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can also define a config value as a so called &#34;here-document&#34;. You must tell the module an identifier which idicates the end of a here document. An identifier must follow a &#34;&#60;&#60;&#34;.</p>

<p>Example:</p>

<pre class="sh_perl"> message &#60;&#60;EOF
   we want to
   remove the
   homedir of
   root.
 EOF</pre>

<p>Everything between the two &#34;EOF&#34; strings will be in the option <i>message</i>.</p>

<p>There is a special feature which allows you to use indentation with here documents. You can have any amount of whitespace or tabulators in front of the end identifier. If the module finds spaces or tabs then it will remove exactly those amount of spaces from every line inside the here-document.</p>

<p>Example:</p>

<pre class="sh_perl"> message &#60;&#60;EOF
         we want to
         remove the
         homedir of
         root.
      EOF</pre>

<p>After parsing, message will become:</p>

<pre class="sh_perl">   we want to
   remove the
   homedir of
   root.</pre>

<p>because there were the string &#34; &#34; in front of EOF, which were cut from every line inside the here-document.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INCLUDES"
>INCLUDES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can include an external file at any posision in your config file using the following statement in your config file:</p>

<pre class="sh_perl"> &#60;&#60;include externalconfig.rc&#62;&#62;</pre>

<p>If you turned on <b>-UseApacheInclude</b> (see <b>new()</b>), then you can also use the following statement to include an external file:</p>

<pre class="sh_perl"> include externalconfig.rc</pre>

<p>This file will be inserted at the position where it was found as if the contents of this file were directly at this position.</p>

<p>You can also recursively include files, so an included file may include another one and so on. Beware that you do not recursively load the same file, you will end with an error message like &#34;too many open files in system!&#34;.</p>

<p>By default included files with a relative pathname will be opened from within the current working directory. Under some circumstances it maybe possible to open included files from the directory, where the configfile resides. You need to turn on the option <b>-IncludeRelative</b> (see <b>new()</b>) if you want that. An example:</p>

<pre class="sh_perl"> my $conf = Config::General(
                             -ConfigFile =&#62; &#34;/etc/crypt.d/server.cfg&#34;
                             -IncludeRelative =&#62; 1
                           );

 /etc/crypt.d/server.cfg:
  &#60;&#60;include acl.cfg&#62;&#62;</pre>

<p>In this example Config::General will try to include <i>acl.cfg</i> from <i>/etc/crypt.d</i>:</p>

<pre class="sh_perl"> /etc/crypt.d/acl.cfg</pre>

<p>The default behavior (if <b>-IncludeRelative</b> is <b>not</b> set!) will be to open just <i>acl.cfg</i>, wherever it is, i.e. if you did a chdir(&#34;/usr/local/etc&#34;), then Config::General will include:</p>

<pre class="sh_perl"> /usr/local/etc/acl.cfg</pre>

<p>Include statements can be case insensitive (added in version 1.25).</p>

<p>Include statements will be ignored within C-Comments and here-documents.</p>

<p>By default, a config file will only be included the first time it is referenced. If you wish to include a file in multiple places, set <b>/-IncludeAgain</b> to true. But be warned: this may lead to infinite loops, so make sure, you&#39;re not including the same file from within itself!</p>

<p>Example:</p>

<pre class="sh_perl">    # main.cfg
    &#60;object billy&#62;
        class=Some::Class
        &#60;printers&#62;
            include printers.cfg
        &#60;/printers&#62;
        # ...
    &#60;/object&#62;
    &#60;object bob&#62;
        class=Another::Class
        &#60;printers&#62;
            include printers.cfg
        &#60;/printers&#62;
        # ...
    &#60;/object&#62;</pre>

<p>Now <code>printers.cfg</code> will be include in both the <code>billy</code> and <code>bob</code> objects.</p>

<p>You will have to be careful to not recursively include a file. Behaviour in this case is undefined.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COMMENTS"
>COMMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A comment starts with the number sign <b>#</b>, there can be any number of spaces and/or tab stops in front of the #.</p>

<p>A comment can also occur after a config statement. Example:</p>

<pre class="sh_perl"> username = max  # this is the comment</pre>

<p>If you want to comment out a large block you can use C-style comments. A <b>/*</b> signals the begin of a comment block and the <b>*/</b> signals the end of the comment block. Example:</p>

<pre class="sh_perl"> user  = max # valid option
 db    = tothemax
 /*
 user  = andors
 db    = toand
 */</pre>

<p>In this example the second options of user and db will be ignored. Please beware of the fact, if the Module finds a <b>/*</b> string which is the start of a comment block, but no matching end block, it will ignore the whole rest of the config file!</p>

<p><b>NOTE:</b> If you require the <b>#</b> character (number sign) to remain in the option value, then you can use a backslash in front of it, to escape it. Example:</p>

<pre class="sh_perl"> bgcolor = \#ffffcc</pre>

<p>In this example the value of $config{bgcolor} will be &#34;#ffffcc&#34;, Config::General will not treat the number sign as the begin of a comment because of the leading backslash.</p>

<p>Inside here-documents escaping of number signs is NOT required!</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OBJECT_ORIENTED_INTERFACE"
>OBJECT ORIENTED INTERFACE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There is a way to access a parsed config the OO-way. Use the module <b>Config::General::Extended</b>, which is supplied with the Config::General distribution.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VARIABLE_INTERPOLATION"
>VARIABLE INTERPOLATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can use variables inside your config files if you like. To do that you have to use the module <b>Config::General::Interpolated</b>, which is supplied with the Config::General distribution.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORTED_FUNCTIONS"
>EXPORTED FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Config::General exports some functions too, which makes it somewhat easier to use it, if you like this.</p>

<p>How to import the functions:</p>

<pre class="sh_perl"> use Config::General qw(ParseConfig SaveConfig SaveConfigString);</pre>

<dl>
<dt><a name='ParseConfig'></a><a name="ParseConfig()"
><b>ParseConfig()</b></a></dt>

<dd>
<p>This function takes exactly all those parameters, which are allowed to the <b>new()</b> method of the standard interface.</p>

<p>Example:</p>

<pre class="sh_perl"> use Config::General qw(ParseConfig);
 my %config = ParseConfig(-ConfigFile =&#62; &#34;rcfile&#34;, -AutoTrue =&#62; 1);</pre>

<dt><a name='SaveConfig'></a><a name="SaveConfig()"
><b>SaveConfig()</b></a></dt>

<dd>
<p>This function requires two arguments, a filename and a reference to a hash structure.</p>

<p>Example:</p>

<pre class="sh_perl"> use Config::General qw(SaveConfig);
 ..
 SaveConfig(&#34;rcfile&#34;, \%some_hash);</pre>

<dt><a name='SaveConfigString'></a><a name="SaveConfigString()"
><b>SaveConfigString()</b></a></dt>

<dd>
<p>This function requires a reference to a config hash as parameter. It generates a configuration based on this hash as the object-interface method <b>save_string()</b> does.</p>

<p>Example:</p>

<pre class="sh_perl"> use Config::General qw(ParseConfig SaveConfigString);
 my %config = ParseConfig(-ConfigFile =&#62; &#34;rcfile&#34;);
 .. # change %config something
 my $content = SaveConfigString(\%config);</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONFIGURATION_AND_ENVIRONMENT"
>CONFIGURATION AND ENVIRONMENT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>No environment variables will be used.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>I recommend you to read the following documents, which are supplied with Perl:</p>

<pre class="sh_perl"> perlreftut                     Perl references short introduction
 perlref                        Perl references, the rest of the story
 perldsc                        Perl data structures intro
 perllol                        Perl data structures: arrays of arrays

 <a href="/~tlinden/Config-General-2.50/General/Extended.pm" class="podlinkpod"
>Config::General::Extended</a>      Object oriented interface to parsed configs
 <a href="/~tlinden/Config-General-2.50/General/Interpolated.pm" class="podlinkpod"
>Config::General::Interpolated</a>  Allows to use variables inside config files</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE_AND_COPYRIGHT"
>LICENSE AND COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2000-2010 Thomas Linden</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS_AND_LIMITATIONS"
>BUGS AND LIMITATIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>See rt.cpan.org for current bugs, if any.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INCOMPATIBILITIES"
>INCOMPATIBILITIES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>None known.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DIAGNOSTICS"
>DIAGNOSTICS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>To debug Config::General use the Perl debugger, see <a href="/perldoc?perldebug" class="podlinkpod"
>perldebug</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DEPENDENCIES"
>DEPENDENCIES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Config::General depends on the modules <a href="/perldoc?FileHandle" class="podlinkpod"
>FileHandle</a>, <a href="/perldoc?File%3A%3ASpec%3A%3AFunctions" class="podlinkpod"
>File::Spec::Functions</a>, <a href="/perldoc?File%3A%3AGlob" class="podlinkpod"
>File::Glob</a>, which all are shipped with Perl.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Thomas Linden &#60;tlinden |AT| cpan.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>2.50</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78280 Uploads, 24725 Distributions
106010 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 04:29:13 2012 GMT (0.117459058761597) @cpansearch1 -->
 </body>
</html>
