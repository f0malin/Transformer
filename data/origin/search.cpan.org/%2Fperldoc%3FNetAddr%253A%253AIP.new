<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>NetAddr::IP - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","NetAddr-IP",3]);
    _gaq.push(["_setCustomVar",5,"Release","NetAddr-IP-4.059",3]);
    _gaq.push(["_setCustomVar",3,"Module","NetAddr::IP",3]);
    _gaq.push(["_setCustomVar",1,"Author","MIKER",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?NetAddr::IP">permalink</a></div>
  <a href="/~miker/">Michael Robinton</a> &gt;
  <a href="/~miker/NetAddr-IP-4.059/">NetAddr-IP-4.059</a> &gt;
  NetAddr::IP
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/e3689838c736fc63d303eae08c729dda?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/M/MI/MIKER/NetAddr-IP-4.059.tar.gz">NetAddr-IP-4.059.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=NetAddr%3A%3AIP;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~MIKER/NetAddr-IP-4.059/IP.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Net%3A%3ANetmask">Net::Netmask</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?Net%3A%3ACIDR">Net::CIDR</a><br>
<a href="/perldoc?Net%3A%3ADNS">Net::DNS</a><br>
<a href="/perldoc?Regexp%3A%3ACommon">Regexp::Common</a><br>
<a href="/perldoc?Getopt%3A%3ALong">Getopt::Long</a><br>
<a href="/perldoc?IO%3A%3ASocket">IO::Socket</a><br>
<a href="/perldoc?Net%3A%3AWhois%3A%3AIP">Net::Whois::IP</a><br>
<a href="/perldoc?Set%3A%3ACrossProduct">Set::CrossProduct</a><br>
<a href="/perldoc?Geo%3A%3AIP2Location">Geo::IP2Location</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=NetAddr%3A%3AIP">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=NetAddr-IP">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:   4.059 &nbsp;
<span class="noprint">
  <a href="/src/MIKER/NetAddr-IP-4.059/IP.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#INSTALLATION'>INSTALLATION</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Overloaded_Operators'>Overloaded Operators</a>
    <li class='indexItem indexItem2'><a href='#Serializing_and_Deserializing'>Serializing and Deserializing</a>
    <li class='indexItem indexItem2'><a href='#Methods'>Methods</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXPORT_OK'>EXPORT_OK</a>
  <li class='indexItem indexItem1'><a href='#NOTES_/_BUGS_..._FEATURES'>NOTES / BUGS ... FEATURES</a>
  <li class='indexItem indexItem1'><a href='#HISTORY'>HISTORY</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#WARRANTY'>WARRANTY</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>NetAddr::IP - Manages IPv4 and IPv6 addresses and subnets</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use NetAddr::IP qw(
        Compact
        Coalesce
        Zeros
        Ones
        V4mask
        V4net
        netlimit
        :aton           DEPRECATED
        :lower
        :upper
        :old_storable
        :old_nth
  );

  NOTE: NetAddr::IP::Util has a full complement of network address
        utilities to convert back and forth between binary and text.

        inet_aton, inet_ntoa, ipv6_aton, ipv6_ntoa 
        ipv6_n2x, ipv6_n2d inet_any2d, inet_n2dx, 
        inet_n2ad, inetanyto6, ipv6to4</pre>

<p>See <a href="/~miker/NetAddr-IP-4.059/Lite/Util/Util.pm" class="podlinkpod"
>NetAddr::IP::Util</a></p>

<pre class="sh_perl">  my $ip = new NetAddr::IP &#39;127.0.0.1&#39;;
         or if your prefer
  my $ip = NetAddr::IP-&#62;new(&#39;127.0.0.1);
        or from a packed IPv4 address
  my $ip = new_from_aton NetAddr::IP (inet_aton(&#39;127.0.0.1&#39;));
        or from an octal filtered IPv4 address
  my $ip = new_no NetAddr::IP &#39;127.012.0.0&#39;;

  print &#34;The address is &#34;, $ip-&#62;addr, &#34; with mask &#34;, $ip-&#62;mask, &#34;\n&#34; ;

  if ($ip-&#62;within(new NetAddr::IP &#34;127.0.0.0&#34;, &#34;255.0.0.0&#34;)) {
      print &#34;Is a loopback address\n&#34;;
  }

                                # This prints 127.0.0.1/32
  print &#34;You can also say $ip...\n&#34;;</pre>

<p>* The following four functions return ipV6 representations of:</p>

<pre class="sh_perl">  ::                                       = Zeros();
  FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF  = Ones();
  FFFF:FFFF:FFFF:FFFF:FFFF:FFFF::          = V4mask();
  ::FFFF:FFFF                              = V4net();</pre>

<p>###### DEPRECATED, will be remove in version 5 ############</p>

<pre class="sh_perl">  * To accept addresses in the format as returned by
  inet_aton, invoke the module as:

  use NetAddr::IP qw(:aton);</pre>

<p>###### USE new_from_aton instead ##########################</p>

<p>* To enable usage of legacy data files containing NetAddr::IP objects stored using the <a href="/perldoc?Storable" class="podlinkpod"
>Storable</a> module.</p>

<pre class="sh_perl">  use NetAddr::IP qw(:old_storable);</pre>

<p>* To compact many smaller subnets (see: <code>$me-&#62;compact($addr1,$addr2,...)</code></p>

<pre class="sh_perl">  @compacted_object_list = Compact(@object_list)</pre>

<p>* Return a reference to list of <code>NetAddr::IP</code> subnets of <code>$masklen</code> mask length, when <code>$number</code> or more addresses from <code>@list_of_subnets</code> are found to be contained in said subnet.</p>

<pre class="sh_perl">  $arrayref = Coalesce($masklen, $number, @list_of_subnets)</pre>

<p>* By default <b>NetAddr::IP</b> functions and methods return string IPv6 addresses in uppercase. To change that to lowercase:</p>

<p>NOTE: the AUGUST 2010 RFC5952 states:</p>

<pre class="sh_perl">    4.3. Lowercase

      The characters &#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;e&#34;, and &#34;f&#34; in an IPv6
      address MUST be represented in lowercase.</pre>

<p>It is recommended that all NEW applications using NetAddr::IP be invoked as shown on the next line.</p>

<pre class="sh_perl">  use NetAddr::IP qw(:lower);</pre>

<p>* To ensure the current IPv6 string case behavior even if the default changes:</p>

<pre class="sh_perl">  use NetAddr::IP qw(:upper);</pre>

<p>* To set a limit on the size of <b>nets</b> processed or returned by NetAddr::IP.</p>

<p>Set the maximum number of nets beyond which NetAddr::IP will return and error as a power of 2 (default 16 or 65536 nets). Each 2**16 consumes approximately 4 megs of memory. A 2**20 consumes 64 megs of memory, A 2**24 consumes 1 gigabyte of memory.</p>

<pre class="sh_perl">  use NetAddr::IP qw(netlimit);
  netlimit 20;</pre>

<p>The maximum <b>netlimit</b> allowed is a 2**24. Attempts to set limits below the default of 16 or above the maximum of 24 are ignored.</p>

<p>Returns true on success otherwise undef.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INSTALLATION"
>INSTALLATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Un-tar the distribution in an appropriate directory and type:</p>

<pre class="sh_perl">        perl Makefile.PL
        make
        make test
        make install</pre>

<p><b>NetAddr::IP</b> depends on <b>NetAddr::IP::Util</b> which installs by default with its primary functions compiled using Perl&#39;s XS extensions to build a &#39;C&#39; library. If you do not have a &#39;C&#39; complier available or would like the slower Pure Perl version for some other reason, then type:</p>

<pre class="sh_perl">        perl Makefile.PL -noxs
        make
        make test
        make install</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module provides an object-oriented abstraction on top of IP addresses or IP subnets, that allows for easy manipulations. Version 4.xx of NetAdder::IP will work with older versions of Perl and is compatible with Math::BigInt.</p>

<p>The internal representation of all IP objects is in 128 bit IPv6 notation. IPv4 and IPv6 objects may be freely mixed.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Overloaded_Operators"
>Overloaded Operators</a></h2>

<p>Many operators have been overloaded, as described below:</p>

<dl>
<dt><a name='Assignment'></a><a name="Assignment_(=)"
><b>Assignment (<code>=</code>)</b></a></dt>

<dd>
<p>Has been optimized to copy one NetAddr::IP object to another very quickly.</p>

<dt><a name='copy'></a><a name="-&#62;copy()"
><b><code>-&#62;copy()</code></b></a></dt>

<dd>
<p>The <b>assignment (<code>=</code>)</b> operation is only put in to operation when the copied object is further mutated by another overloaded operation. See <a href="/perldoc?overload" class="podlinkpod"
>overload</a> <b>SPECIAL SYMBOLS FOR &#34;use overload&#34;</b> for details.</p>

<p><b><code>-&#62;copy()</code></b> actually creates a new object when called.</p>

<dt><a name="Stringification"
><b>Stringification</b></a></dt>

<dd>
<p>An object can be used just as a string. For instance, the following code</p>

<pre class="sh_perl">        my $ip = new NetAddr::IP &#39;192.168.1.123&#39;;
        print &#34;$ip\n&#34;;</pre>

<p>Will print the string 192.168.1.123/32.</p>

<dt><a name="Equality"
><b>Equality</b></a></dt>

<dd>
<p>You can test for equality with either <code>eq</code> or <code>==</code>. <code>eq</code> allows the comparison with arbitrary strings as well as NetAddr::IP objects. The following example:</p>

<pre class="sh_perl">    if (NetAddr::IP-&#62;new(&#39;127.0.0.1&#39;,&#39;255.0.0.0&#39;) eq &#39;127.0.0.1/8&#39;)
       { print &#34;Yes\n&#34;; }</pre>

<p>Will print out &#34;Yes&#34;.</p>

<p>Comparison with <code>==</code> requires both operands to be NetAddr::IP objects.</p>

<p>In both cases, a true value is returned if the CIDR representation of the operands is equal.</p>

<dt><a name='Comparison'></a><a name="Comparison_via_&#62;,_&#60;,_&#62;=,_&#60;=,_&#60;=&#62;_and_cmp"
><b>Comparison via &#62;, &#60;, &#62;=, &#60;=, &#60;=&#62; and <code>cmp</code></b></a></dt>

<dd>
<p>Internally, all network objects are represented in 128 bit format. The numeric representation of the network is compared through the corresponding operation. Comparisons are tried first on the address portion of the object and if that is equal then the NUMERIC cidr portion of the masks are compared. This leads to the counterintuitive result that</p>

<pre class="sh_perl">        /24 &#62; /16</pre>

<p>Comparison should not be done on netaddr objects with different CIDR as this may produce indeterminate - unexpected results, rather the determination of which netblock is larger or smaller should be done by comparing</p>

<pre class="sh_perl">        $ip1-&#62;masklen &#60;=&#62; $ip2-&#62;masklen</pre>

<dt><a name='Addition'></a><a name="Addition_of_a_constant_(+)"
><b>Addition of a constant (<code>+</code>)</b></a></dt>

<dd>
<p>Add a 32 bit signed constant to the address part of a NetAddr object. This operation changes the address part to point so many hosts above the current objects start address. For instance, this code:</p>

<pre class="sh_perl">    print NetAddr::IP-&#62;new(&#39;127.0.0.1/8&#39;) + 5;</pre>

<p>will output 127.0.0.6/8. The address will wrap around at the broadcast back to the network address. This code:</p>

<pre class="sh_perl">    print NetAddr::IP-&#62;new(&#39;10.0.0.1/24&#39;) + 255;

    outputs 10.0.0.0/24.</pre>

<p>Returns the the unchanged object when the constant is missing or out of range.</p>

<pre class="sh_perl">    2147483647 &#60;= constant &#62;= -2147483648</pre>

<dt><a name='Subtraction'></a><a name="Subtraction_of_a_constant_(-)"
><b>Subtraction of a constant (<code>-</code>)</b></a></dt>

<dd>
<p>The complement of the addition of a constant.</p>

<dt><a name='Difference'></a><a name="Difference_(-)"
><b>Difference (<code>-</code>)</b></a></dt>

<dd>
<p>Returns the difference between the address parts of two NetAddr::IP objects address parts as a 32 bit signed number.</p>

<p>Returns <b>undef</b> if the difference is out of range.</p>

<p>(See range restrictions on Addition above)</p>

<dt><a name='Auto'></a><a name="Auto-increment"
><b>Auto-increment</b></a></dt>

<dd>
<p>Auto-incrementing a NetAddr::IP object causes the address part to be adjusted to the next host address within the subnet. It will wrap at the broadcast address and start again from the network address.</p>

<dt><a name='Auto'></a><a name="Auto-decrement"
><b>Auto-decrement</b></a></dt>

<dd>
<p>Auto-decrementing a NetAddr::IP object performs exactly the opposite of auto-incrementing it, as you would expect.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Serializing_and_Deserializing"
>Serializing and Deserializing</a></h2>

<p>This module defines hooks to collaborate with <a href="/perldoc?Storable" class="podlinkpod"
>Storable</a> for serializing <code>NetAddr::IP</code> objects, through compact and human readable strings. You can revert to the old format by invoking this module as</p>

<pre class="sh_perl">  use NetAddr::IP &#39;:old_storable&#39;;</pre>

<p>You must do this if you have legacy data files containing NetAddr::IP objects stored using the <a href="/perldoc?Storable" class="podlinkpod"
>Storable</a> module.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Methods"
>Methods</a></h2>

<dl>
<dt><a name='new'></a><a name="-&#62;new([$addr,_[_$mask|IPv6_]])"
><code>-&#62;new([$addr, [ $mask|IPv6 ]])</code></a></dt>

<dd>
<dt><a name='new6'></a><a name="-&#62;new6([$addr,_[_$mask]])"
><code>-&#62;new6([$addr, [ $mask]])</code></a></dt>

<dd>
<dt><a name='new_no'></a><a name="-&#62;new_no([$addr,_[_$mask]])"
><code>-&#62;new_no([$addr, [ $mask]])</code></a></dt>

<dd>
<dt><a name='new_from_aton'></a><a name="-&#62;new_from_aton($netaddr)"
><code>-&#62;new_from_aton($netaddr)</code></a></dt>

<dd>
<dt><a name='new_cis'></a><a name="new_cis_and_new_cis6_are_DEPRECATED"
>new_cis and new_cis6 are DEPRECATED</a></dt>

<dd>
<dt><a name='new_cis'></a><a name="-&#62;new_cis(&#34;$addr_$mask)"
><code>-&#62;new_cis(&#34;$addr $mask)</code></a></dt>

<dd>
<dt><a name='new_cis6'></a><a name="-&#62;new_cis6(&#34;$addr_$mask)"
><code>-&#62;new_cis6(&#34;$addr $mask)</code></a></dt>

<dd>
<p>The first two methods create a new address with the supplied address in <code>$addr</code> and an optional netmask <code>$mask</code>, which can be omitted to get a /32 or /128 netmask for IPv4 / IPv6 addresses respectively.</p>

<p>The third method <code>new_no</code> is exclusively for IPv4 addresses and filters improperly formatted dot quad strings for leading 0&#39;s that would normally be interpreted as octal format by NetAddr per the specifications for inet_aton.</p>

<p><b>new_from_aton</b> takes a packed IPv4 address and assumes a /32 mask. This function replaces the DEPRECATED :aton functionality which is fundamentally broken.</p>

<p>The last two methods <b>new_cis</b> and <b>new_cis6</b> differ from <b>new</b> and <b>new6</b> only in that they except the common Cisco address notation for address/mask pairs with a <b>space</b> as a separator instead of a slash (/)</p>

<p>These methods are DEPRECATED because the functionality is now included in the other &#34;new&#34; methods</p>

<pre class="sh_perl">  i.e.  -&#62;new_cis(&#39;1.2.3.0 24&#39;)
        or
        -&#62;new_cis6(&#39;::1.2.3.0 120&#39;)</pre>

<p><code>-&#62;new6</code> and <code>-&#62;new_cis6</code> mark the address as being in ipV6 address space even if the format would suggest otherwise.</p>

<pre class="sh_perl">  i.e.  -&#62;new6(&#39;1.2.3.4&#39;) will result in ::102:304

  addresses submitted to -&#62;new in ipV6 notation will
  remain in that notation permanently. i.e.
        -&#62;new(&#39;::1.2.3.4&#39;) will result in ::102:304
  whereas new(&#39;1.2.3.4&#39;) would print out as 1.2.3.4

  See &#34;STRINGIFICATION&#34; below.</pre>

<p><code>$addr</code> can be almost anything that can be resolved to an IP address in all the notations I have seen over time. It can optionally contain the mask in CIDR notation.</p>

<p><b>prefix</b> notation is understood, with the limitation that the range specified by the prefix must match with a valid subnet.</p>

<p>Addresses in the same format returned by <code>inet_aton</code> or <code>gethostbyname</code> can also be understood, although no mask can be specified for them. The default is to not attempt to recognize this format, as it seems to be seldom used.</p>

<p>To accept addresses in that format, invoke the module as in</p>

<pre class="sh_perl">  use NetAddr::IP &#39;:aton&#39;</pre>

<p>If called with no arguments, &#39;default&#39; is assumed.</p>

<p><code>$addr</code> can be any of the following and possibly more...</p>

<pre class="sh_perl">  n.n
  n.n/mm
  n.n.n
  n.n.n/mm
  n.n.n.n
  n.n.n.n/mm            32 bit cidr notation
  n.n.n.n/m.m.m.m
  loopback, localhost, broadcast, any, default
  x.x.x.x/host
  0xABCDEF, 0b111111000101011110, (a bcd number)
  a netaddr as returned by &#39;inet_aton&#39;</pre>

<p>Any RFC1884 notation</p>

<pre class="sh_perl">  ::n.n.n.n
  ::n.n.n.n/mmm         128 bit cidr notation
  ::n.n.n.n/::m.m.m.m
  ::x:x
  ::x:x/mmm
  x:x:x:x:x:x:x:x
  x:x:x:x:x:x:x:x/mmm
  x:x:x:x:x:x:x:x/m:m:m:m:m:m:m:m any RFC1884 notation
  loopback, localhost, unspecified, any, default
  ::x:x/host
  0xABCDEF, 0b111111000101011110 within the limits
  of perl&#39;s number resolution
  123456789012  a &#39;big&#39; bcd number (bigger than perl likes)
  and Math::BigInt</pre>

<p>If called with no arguments, &#39;default&#39; is assumed.</p>

<dt><a name='broadcast'></a><a name="-&#62;broadcast()"
><code>-&#62;broadcast()</code></a></dt>

<dd>
<p>Returns a new object referring to the broadcast address of a given subnet. The broadcast address has all ones in all the bit positions where the netmask has zero bits. This is normally used to address all the hosts in a given subnet.</p>

<dt><a name='network'></a><a name="-&#62;network()"
><code>-&#62;network()</code></a></dt>

<dd>
<p>Returns a new object referring to the network address of a given subnet. A network address has all zero bits where the bits of the netmask are zero. Normally this is used to refer to a subnet.</p>

<dt><a name='addr'></a><a name="-&#62;addr()"
><code>-&#62;addr()</code></a></dt>

<dd>
<p>Returns a scalar with the address part of the object as an IPv4 or IPv6 text string as appropriate. This is useful for printing or for passing the address part of the NetAddr::IP object to other components that expect an IP address. If the object is an ipV6 address or was created using -&#62;new6($ip) it will be reported in ipV6 hex format otherwise it will be reported in dot quad format only if it resides in ipV4 address space.</p>

<dt><a name='mask'></a><a name="-&#62;mask()"
><code>-&#62;mask()</code></a></dt>

<dd>
<p>Returns a scalar with the mask as an IPv4 or IPv6 text string as described above.</p>

<dt><a name='masklen'></a><a name="-&#62;masklen()"
><code>-&#62;masklen()</code></a></dt>

<dd>
<p>Returns a scalar the number of one bits in the mask.</p>

<dt><a name='bits'></a><a name="-&#62;bits()"
><code>-&#62;bits()</code></a></dt>

<dd>
<p>Returns the width of the address in bits. Normally 32 for v4 and 128 for v6.</p>

<dt><a name='version'></a><a name="-&#62;version()"
><code>-&#62;version()</code></a></dt>

<dd>
<p>Returns the version of the address or subnet. Currently this can be either 4 or 6.</p>

<dt><a name='cidr'></a><a name="-&#62;cidr()"
><code>-&#62;cidr()</code></a></dt>

<dd>
<p>Returns a scalar with the address and mask in CIDR notation. A NetAddr::IP object <i>stringifies</i> to the result of this function. (see comments about -&#62;new6() and -&#62;addr() for output formats)</p>

<dt><a name='aton'></a><a name="-&#62;aton()"
><code>-&#62;aton()</code></a></dt>

<dd>
<p>Returns the address part of the NetAddr::IP object in the same format as the <code>inet_aton()</code> or <code>ipv6_aton</code> function respectively. If the object was created using -&#62;new6($ip), the address returned will always be in ipV6 format, even for addresses in ipV4 address space.</p>

<dt><a name='range'></a><a name="-&#62;range()"
><code>-&#62;range()</code></a></dt>

<dd>
<p>Returns a scalar with the base address and the broadcast address separated by a dash and spaces. This is called range notation.</p>

<dt><a name='prefix'></a><a name="-&#62;prefix()"
><code>-&#62;prefix()</code></a></dt>

<dd>
<p>Returns a scalar with the address and mask in ipV4 prefix representation. This is useful for some programs, which expect its input to be in this format. This method will include the broadcast address in the encoding.</p>

<dt><a name='nprefix'></a><a name="-&#62;nprefix()"
><code>-&#62;nprefix()</code></a></dt>

<dd>
<p>Just as <code>-&#62;prefix()</code>, but does not include the broadcast address.</p>

<dt><a name='numeric'></a><a name="-&#62;numeric()"
><code>-&#62;numeric()</code></a></dt>

<dd>
<p>When called in a scalar context, will return a numeric representation of the address part of the IP address. When called in an array contest, it returns a list of two elements. The first element is as described, the second element is the numeric representation of the netmask.</p>

<p>This method is essential for serializing the representation of a subnet.</p>

<dt><a name='bigint'></a><a name="-&#62;bigint()"
><code>-&#62;bigint()</code></a></dt>

<dd>
<p>When called in scalar context, will return a Math::BigInt representation of the address part of the IP address. When called in an array context, it returns a list of two elements, The first element is as described, the second element is the Math::BigInt representation of the netmask.</p>

<dt><a name='wildcard'></a><a name="-&#62;wildcard()"
><code>-&#62;wildcard()</code></a></dt>

<dd>
<p>When called in a scalar context, returns the wildcard bits corresponding to the mask, in dotted-quad or ipV6 format as applicable.</p>

<p>When called in an array context, returns a two-element array. The first element, is the address part. The second element, is the wildcard translation of the mask.</p>

<dt><a name='short'></a><a name="-&#62;short()"
><code>-&#62;short()</code></a></dt>

<dd>
<p>Returns the address part in a short or compact notation.</p>

<pre class="sh_perl">  (ie, 127.0.0.1 becomes 127.1).</pre>

<p>Works with both, V4 and V6.</p>

<dt><a name='full'></a><a name="-&#62;full()"
><code>-&#62;full()</code></a></dt>

<dd>
<p>Returns the address part in FULL notation for ipV4 and ipV6 respectively.</p>

<pre class="sh_perl">  i.e. for ipV4
    0000:0000:0000:0000:0000:0000:127.0.0.1

       for ipV6
    0000:0000:0000:0000:0000:0000:0000:0000</pre>

<p>To force ipV4 addresses into full ipV6 format use:</p>

<dt><a name='full6'></a><a name="-&#62;full6()"
><code>-&#62;full6()</code></a></dt>

<dd>
<p>Returns the address part in FULL ipV6 notation</p>

<dt><a name='me'></a><a name="$me-&#62;contains($other)"
><code>$me-&#62;contains($other)</code></a></dt>

<dd>
<p>Returns true when <code>$me</code> completely contains <code>$other</code>. False is returned otherwise and <code>undef</code> is returned if <code>$me</code> and <code>$other</code> are not both <code>NetAddr::IP</code> objects.</p>

<dt><a name='me'></a><a name="$me-&#62;within($other)"
><code>$me-&#62;within($other)</code></a></dt>

<dd>
<p>The complement of <code>-&#62;contains()</code>. Returns true when <code>$me</code> is completely contained within <code>$other</code>.</p>

<p>Note that <code>$me</code> and <code>$other</code> must be <code>NetAddr::IP</code> objects.</p>

<dt><a name='C'></a><a name="C-&#62;is_rfc1918()&#62;"
>C-&#62;is_rfc1918()&#62;</a></dt>

<dd>
<p>Returns true when <code>$me</code> is an RFC 1918 address.</p>

<pre class="sh_perl">  10.0.0.0      -   10.255.255.255  (10/8 prefix)
  172.16.0.0    -   172.31.255.255  (172.16/12 prefix)
  192.168.0.0   -   192.168.255.255 (192.168/16 prefix)</pre>

<dt><a name='splitref'></a><a name="-&#62;splitref($bits,[optional_$bits1,$bits2,...])"
><code>-&#62;splitref($bits,[optional $bits1,$bits2,...])</code></a></dt>

<dd>
<p>Returns a reference to a list of objects, representing subnets of <code>bits</code> mask produced by splitting the original object, which is left unchanged. Note that <code>$bits</code> must be longer than the original mask in order for it to be splittable.</p>

<p>ERROR conditions:</p>

<pre class="sh_perl">  -&#62;splitref will DIE with the message &#39;netlimit exceeded&#39;
    if the number of return objects exceeds &#39;netlimit&#39;.
    See function &#39;netlimit&#39; above (default 2**16 or 65536 nets).

  -&#62;splitref returns undef when C&#60;bits&#62; or the (bits list)
    will not fit within the original object.

  -&#62;splitref returns undef if a supplied ipV4, ipV6, or NetAddr
    mask in inappropriately formatted,</pre>

<p><b>bits</b> may be a CIDR mask, a dot quad or ipV6 string or a NetAddr::IP object. If <code>bits</code> is missing, the object is split for into all available addresses within the ipV4 or ipV6 object ( auto-mask of CIDR 32, 128 respectively ).</p>

<p>With optional additional <code>bits</code> list, the original object is split into parts sized based on the list. NOTE: a short list will replicate the last item. If the last item is too large to for what remains of the object after splitting off the first parts of the list, a &#34;best fits&#34; list of remaining objects will be returned based on an increasing sort of the CIDR values of the <code>bits</code> list.</p>

<pre class="sh_perl">  i.e.  my $ip = new NetAddr::IP(&#39;192.168.0.0/24&#39;);
        my $objptr = $ip-&#62;split(28, 29, 28, 29, 26);

   has split plan 28 29 28 29 26 26 26 28
   and returns this list of objects

        192.168.0.0/28
        192.168.0.16/29
        192.168.0.24/28
        192.168.0.40/29
        192.168.0.48/26
        192.168.0.112/26
        192.168.0.176/26
        192.168.0.240/28</pre>

<p>NOTE: that /26 replicates twice beyond the original request and /28 fills the remaining return object requirement.</p>

<dt><a name='rsplitref'></a><a name="-&#62;rsplitref($bits,[optional_$bits1,$bits2,...])"
><code>-&#62;rsplitref($bits,[optional $bits1,$bits2,...])</code></a></dt>

<dd>
<p><code>-&#62;rsplitref</code> is the same as <code>-&#62;splitref</code> above except that the split plan is applied to the original object in reverse order.</p>

<pre class="sh_perl">  i.e.  my $ip = new NetAddr::IP(&#39;192.168.0.0/24&#39;);
        my @objects = $ip-&#62;split(28, 29, 28, 29, 26);

   has split plan 28 26 26 26 29 28 29 28
   and returns this list of objects

        192.168.0.0/28
        192.168.0.16/26
        192.168.0.80/26
        192.168.0.144/26
        192.168.0.208/29
        192.168.0.216/28
        192.168.0.232/29
        192.168.0.240/28</pre>

<dt><a name='split'></a><a name="-&#62;split($bits,[optional_$bits1,$bits2,...])"
><code>-&#62;split($bits,[optional $bits1,$bits2,...])</code></a></dt>

<dd>
<p>Similar to <code>-&#62;splitref</code> above but returns the list rather than a list reference. You may not want to use this if a large number of objects is expected.</p>

<dt><a name='rsplit'></a><a name="-&#62;rsplit($bits,[optional_$bits1,$bits2,...])"
><code>-&#62;rsplit($bits,[optional $bits1,$bits2,...])</code></a></dt>

<dd>
<p>Similar to <code>-&#62;rsplitref</code> above but returns the list rather than a list reference. You may not want to use this if a large number of objects is expected.</p>

<dt><a name='hostenum'></a><a name="-&#62;hostenum()"
><code>-&#62;hostenum()</code></a></dt>

<dd>
<p>Returns the list of hosts within a subnet.</p>

<p>ERROR conditions:</p>

<pre class="sh_perl">  -&#62;hostenum will DIE with the message &#39;netlimit exceeded&#39;
    if the number of return objects exceeds &#39;netlimit&#39;.
    See function &#39;netlimit&#39; above (default 2**16 or 65536 nets).</pre>

<dt><a name='hostenumref'></a><a name="-&#62;hostenumref()"
><code>-&#62;hostenumref()</code></a></dt>

<dd>
<p>Faster version of <code>-&#62;hostenum()</code>, returning a reference to a list.</p>

<dt><a name='me'></a><a name="$me-&#62;compact($addr1,_$addr2,_...)"
><code>$me-&#62;compact($addr1, $addr2, ...)</code></a></dt>

<dd>
<dt><a name='compacted_object_list'></a><a name="@compacted_object_list_=_Compact(@object_list)"
><code>@compacted_object_list = Compact(@object_list)</code></a></dt>

<dd>
<p>Given a list of objects (including <code>$me</code>), this method will compact all the addresses and subnets into the largest (ie, least specific) subnets possible that contain exactly all of the given objects.</p>

<p>Note that in versions prior to 3.02, if fed with the same IP subnets multiple times, these subnets would be returned. From 3.02 on, a more &#34;correct&#34; approach has been adopted and only one address would be returned.</p>

<p>Note that <code>$me</code> and all <code>$addr</code>&#39;s must be <code>NetAddr::IP</code> objects.</p>

<dt><a name='me'></a><a name="$me-&#62;compactref(\@list)"
><code>$me-&#62;compactref(\@list)</code></a></dt>

<dd>
<dt><a name='compacted_object_list'></a><a name="$compacted_object_list_=_Compact(\@list)"
><code>$compacted_object_list = Compact(\@list)</code></a></dt>

<dd>
<p>As usual, a faster version of <code>-&#62;compact()</code> that returns a reference to a list. Note that this method takes a reference to a list instead.</p>

<p>Note that <code>$me</code> must be a <code>NetAddr::IP</code> object.</p>

<dt><a name='me'></a><a name="$me-&#62;coalesce($masklen,_$number,_@list_of_subnets)"
><code>$me-&#62;coalesce($masklen, $number, @list_of_subnets)</code></a></dt>

<dd>
<dt><a name='arrayref'></a><a name="$arrayref_=_Coalesce($masklen,$number,@list_of_subnets)"
><code>$arrayref = Coalesce($masklen,$number,@list_of_subnets)</code></a></dt>

<dd>
<p>Will return a reference to list of <code>NetAddr::IP</code> subnets of <code>$masklen</code> mask length, when <code>$number</code> or more addresses from <code>@list_of_subnets</code> are found to be contained in said subnet.</p>

<p>Subnets from <code>@list_of_subnets</code> with a mask shorter than <code>$masklen</code> are passed &#34;as is&#34; to the return list.</p>

<p>Subnets from <code>@list_of_subnets</code> with a mask longer than <code>$masklen</code> will be counted (actually, the number of IP addresses is counted) towards <code>$number</code>.</p>

<p>Called as a method, the array will include <code>$me</code>.</p>

<p>WARNING: the list of subnet must be the same type. i.e ipV4 or ipV6</p>

<dt><a name='first'></a><a name="-&#62;first()"
><code>-&#62;first()</code></a></dt>

<dd>
<p>Returns a new object representing the first usable IP address within the subnet (ie, the first host address).</p>

<dt><a name='last'></a><a name="-&#62;last()"
><code>-&#62;last()</code></a></dt>

<dd>
<p>Returns a new object representing the last usable IP address within the subnet (ie, one less than the broadcast address).</p>

<dt><a name='nth'></a><a name="-&#62;nth($index)"
><code>-&#62;nth($index)</code></a></dt>

<dd>
<p>Returns a new object representing the <i>n</i>-th usable IP address within the subnet (ie, the <i>n</i>-th host address). If no address is available (for example, when the network is too small for <code>$index</code> hosts), <code>undef</code> is returned.</p>

<p>Version 4.00 of NetAddr::IP and version 1.00 of NetAddr::IP::Lite implements <code>-&#62;nth($index)</code> and <code>-&#62;num()</code> exactly as the documentation states. Previous versions behaved slightly differently and not in a consistent manner. See the README file for details.</p>

<p>To use the old behavior for <code>-&#62;nth($index)</code> and <code>-&#62;num()</code>:</p>

<pre class="sh_perl">  use NetAddr::IP::Lite qw(:old_nth);

  old behavior:
  NetAddr::IP-&#62;new(&#39;10/32&#39;)-&#62;nth(0) == undef
  NetAddr::IP-&#62;new(&#39;10/32&#39;)-&#62;nth(1) == undef
  NetAddr::IP-&#62;new(&#39;10/31&#39;)-&#62;nth(0) == undef
  NetAddr::IP-&#62;new(&#39;10/31&#39;)-&#62;nth(1) == 10.0.0.1/31
  NetAddr::IP-&#62;new(&#39;10/30&#39;)-&#62;nth(0) == undef
  NetAddr::IP-&#62;new(&#39;10/30&#39;)-&#62;nth(1) == 10.0.0.1/30
  NetAddr::IP-&#62;new(&#39;10/30&#39;)-&#62;nth(2) == 10.0.0.2/30
  NetAddr::IP-&#62;new(&#39;10/30&#39;)-&#62;nth(3) == 10.0.0.3/30</pre>

<p>Note that in each case, the broadcast address is represented in the output set and that the &#39;zero&#39;th index is alway undef except for a point-to-point /31 or /127 network where there are exactly two addresses in the network.</p>

<pre class="sh_perl">  new behavior:
  NetAddr::IP-&#62;new(&#39;10/32&#39;)-&#62;nth(0)  == 10.0.0.0/32
  NetAddr::IP-&#62;new(&#39;10.1/32&#39;-&#62;nth(0) == 10.0.0.1/32
  NetAddr::IP-&#62;new(&#39;10/31&#39;)-&#62;nth(0)  == 10.0.0.0/32
  NetAddr::IP-&#62;new(&#39;10/31&#39;)-&#62;nth(1)  == 10.0.0.1/32
  NetAddr::IP-&#62;new(&#39;10/30&#39;)-&#62;nth(0) == 10.0.0.1/30 
  NetAddr::IP-&#62;new(&#39;10/30&#39;)-&#62;nth(1) == 10.0.0.2/30 
  NetAddr::IP-&#62;new(&#39;10/30&#39;)-&#62;nth(2) == undef</pre>

<p>Note that a /32 net always has 1 usable address while a /31 has exactly two usable addresses for point-to-point addressing. The first index (0) returns the address immediately following the network address except for a /31 or /127 when it return the network address.</p>

<dt><a name='num'></a><a name="-&#62;num()"
><code>-&#62;num()</code></a></dt>

<dd>
<p>As of version 4.42 of NetAddr::IP and version 1.27 of NetAddr::IP::Lite a /31 and /127 with return a net <b>num</b> value of 2 instead of 0 (zero) for point-to-point networks.</p>

<p>Version 4.00 of NetAddr::IP and version 1.00 of NetAddr::IP::Lite return the number of usable IP addresses within the subnet, not counting the broadcast or network address.</p>

<p>Previous versions worked only for ipV4 addresses, returned a maximum span of 2**32 and returned the number of IP addresses not counting the broadcast address. (one greater than the new behavior)</p>

<p>To use the old behavior for <code>-&#62;nth($index)</code> and <code>-&#62;num()</code>:</p>

<pre class="sh_perl">  use NetAddr::IP::Lite qw(:old_nth);</pre>

<p>WARNING:</p>

<p>NetAddr::IP will calculate and return a numeric string for network ranges as large as 2**128. These values are TEXT strings and perl can treat them as integers for numeric calculations.</p>

<p>Perl on 32 bit platforms only handles integer numbers up to 2**32 and on 64 bit platforms to 2**64.</p>

<p>If you wish to manipulate numeric strings returned by NetAddr::IP that are larger than 2**32 or 2**64, respectively, you must load additional modules such as Math::BigInt, bignum or some similar package to do the integer math.</p>

<dt><a name='re'></a><a name="-&#62;re()"
><code>-&#62;re()</code></a></dt>

<dd>
<p>Returns a Perl regular expression that will match an IP address within the given subnet. Defaults to ipV4 notation. Will return an ipV6 regex if the address in not in ipV4 space.</p>

<dt><a name='re6'></a><a name="-&#62;re6()"
><code>-&#62;re6()</code></a></dt>

<dd>
<p>Returns a Perl regular expression that will match an IP address within the given subnet. Always returns an ipV6 regex.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORT_OK"
>EXPORT_OK <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">        Compact
        Coalesce
        Zeros
        Ones
        V4mask
        V4net
        netlimit</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTES_/_BUGS_..._FEATURES"
>NOTES / BUGS ... FEATURES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>NetAddr::IP only runs in Pure Perl mode on Windows boxes because I don&#39;t have the resources or know how to get the &#34;configure&#34; stuff working in the Windows environment. Volunteers WELCOME to port the &#34;C&#34; portion of this module to Windows.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="HISTORY"
>HISTORY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<blockquote>
<p>See the Changes file</p>
</blockquote>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Luis E. Mu&#195;&#177;oz &#60;luismunoz@cpan.org&#62;, Michael Robinton &#60;michael@bizsystems.com&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WARRANTY"
>WARRANTY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This software comes with the same warranty as perl itself (ie, none), so by using it you accept any and all the liability.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This software is (c) Luis E. Mu&#195;&#177;oz, 1999 - 2007, and (c) Michael Robinton, 2006 - 2011.</p>

<p>All rights reserved.</p>

<p>This program is free software; you can redistribute it and/or modify it under the terms of either:</p>

<pre class="sh_perl">  a) the GNU General Public License as published by the Free
  Software Foundation; either version 2, or (at your option) any
  later version, or

  b) the &#34;Artistic License&#34; which comes with this distribution.</pre>

<p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See either the GNU General Public License or the Artistic License for more details.</p>

<p>You should have received a copy of the Artistic License with this distribution, in the file named &#34;Artistic&#34;. If not, I&#39;ll be glad to provide one.</p>

<p>You should also have received a copy of the GNU General Public License along with this program in the file named &#34;Copying&#34;. If not, write to the</p>

<pre class="sh_perl">        Free Software Foundation, Inc.
        59 Temple Place, Suite 330
        Boston, MA  02111-1307, USA</pre>

<p>or visit their web page on the internet at:</p>

<pre class="sh_perl">        <a href="http://www.gnu.org/copyleft/gpl.html" class="podlinkurl"
>http://www.gnu.org/copyleft/gpl.html</a>.</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  perl(1) L&#60;<a href="/~miker/NetAddr-IP-4.059/Lite/Lite.pm" class="podlinkpod"
>NetAddr::IP::Lite</a>&#62;, L&#60;<a href="/~miker/NetAddr-IP-4.059/Lite/Util/Util.pm" class="podlinkpod"
>NetAddr::IP::Util</a>&#62;,
L&#60;<a href="/~miker/NetAddr-IP-4.059/Lite/Util/lib/NetAddr/IP/InetBase.pm" class="podlinkpod"
>NetAddr::IP::InetBase</a>&#62;</pre>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78276 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 02:58:27 2012 GMT (0.180511951446533) @cpansearch1 -->
 </body>
</html>
