<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>CGI::Ex - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","CGI-Ex",3]);
    _gaq.push(["_setCustomVar",5,"Release","CGI-Ex-2.38",3]);
    _gaq.push(["_setCustomVar",3,"Module","CGI::Ex",3]);
    _gaq.push(["_setCustomVar",1,"Author","RHANDOM",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?CGI::Ex">permalink</a></div>
  <a href="/~rhandom/">Paul Seamons</a> &gt;
  <a href="/~rhandom/CGI-Ex-2.38/">CGI-Ex-2.38</a> &gt;
  CGI::Ex
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/155a7fc84d55b819ca4a55f6423fcad9?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/R/RH/RHANDOM/CGI-Ex-2.38.tar.gz">CGI-Ex-2.38.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=CGI%3A%3AEx;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~RHANDOM/CGI-Ex-2.38/lib/CGI/Ex.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?CGI%3A%3AApplication">CGI::Application</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Test%3A%3AHarness">Test::Harness</a><br>
<a href="/perldoc?Module%3A%3ABuild">Module::Build</a><br>
<a href="/perldoc?File%3A%3AFind">File::Find</a><br>
<a href="/perldoc?File%3A%3APath">File::Path</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?HTML%3A%3AMason">HTML::Mason</a><br>
<a href="/perldoc?Excel%3A%3ATemplate">Excel::Template</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=CGI%3A%3AEx">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 4</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=CGI-Ex">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.38 &nbsp;
<span class="noprint">
  <a href="/src/RHANDOM/CGI-Ex-2.38/lib/CGI/Ex.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#CGI::Ex_SYNOPSIS'>CGI::Ex SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#CGI::Ex_METHODS'>CGI::Ex METHODS</a>
  <li class='indexItem indexItem1'><a href='#MODULES'>MODULES</a>
  <li class='indexItem indexItem1'><a href='#LICENSE'>LICENSE</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>CGI::Ex - CGI utility suite - makes powerful application writing fun and easy</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CGI::Ex_SYNOPSIS"
>CGI::Ex SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    ### You probably don&#39;t want to use CGI::Ex directly
    ### You probably should use CGI::Ex::App instead.

    my $cgix = CGI::Ex-&#62;new;

    $cgix-&#62;print_content_type;

    my $hash = $cgix-&#62;form;

    if ($hash-&#62;{&#39;bounce&#39;}) {

        $cgix-&#62;set_cookie({
            name  =&#62; ...,
            value =&#62; ...,
        });

        $cgix-&#62;location_bounce($new_url_location);
        exit;
    }

    if (scalar keys %$form) {
         my $val_hash = $cgix-&#62;conf_read($pathtovalidation);
         my $err_obj = $cgix-&#62;validate($hash, $val_hash);
         if ($err_obj) {
             my $errors  = $err_obj-&#62;as_hash;
             my $input   = &#34;Some content&#34;;
             my $content = &#34;&#34;;
             $cgix-&#62;swap_template(\$input, $errors, $content);
             $cgix-&#62;fill({text =&#62; \$content, form =&#62; $hashref});
             print $content;
             exit;
         } else {
             print &#34;Success&#34;;
         }
    } else {
         print &#34;Main page&#34;;
    }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>CGI::Ex provides a suite of utilities to make writing CGI scripts more enjoyable. Although they can all be used separately, the main functionality of each of the modules is best represented in the CGI::Ex::App module. CGI::Ex::App takes CGI application building to the next step. CGI::Ex::App is not quite a framework (which normally includes pre-built html) instead CGI::Ex::App is an extended application flow that dramatically reduces CGI build time in most cases. It does so using as little magic as possible. See <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/App.pod" class="podlinkpod"
>CGI::Ex::App</a>.</p>

<p>The main functionality is provided by several other modules that may be used separately, or together through the CGI::Ex interface.</p>

<dl>
<dt><a name='CGI'></a><a name="CGI::Ex::Template"
><code>CGI::Ex::Template</code></a></dt>

<dd>
<p>A Template::Toolkit compatible processing engine. With a few limitations, CGI::Ex::Template can be a drop in replacement for Template::Toolkit.</p>

<dt><a name='CGI'></a><a name="CGI::Ex::Fill"
><code>CGI::Ex::Fill</code></a></dt>

<dd>
<p>A regular expression based form filler inner (accessed through <b>-&#62;fill</b> or directly via its own functions). Can be a drop in replacement for HTML::FillInForm. See <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/Fill.pm" class="podlinkpod"
>CGI::Ex::Fill</a> for more information.</p>

<dt><a name='CGI'></a><a name="CGI::Ex::Validate"
><code>CGI::Ex::Validate</code></a></dt>

<dd>
<p>A form field / cgi parameter / any parameter validator (accessed through <b>-&#62;validate</b> or directly via its own methods). Not quite a drop in for most validators, although it has most of the functionality of most of the validators but with the key additions of conditional validation. Has a tightly integrated JavaScript portion that allows for duplicate client side validation. See <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/Validate.pod" class="podlinkpod"
>CGI::Ex::Validate</a> for more information.</p>

<dt><a name='CGI'></a><a name="CGI::Ex::Conf"
><code>CGI::Ex::Conf</code></a></dt>

<dd>
<p>A general use configuration, or settings, or key / value file reader. Has ability for providing key fallback as well as immutable key definitions. Has default support for yaml, storable, perl, ini, and xml and open architecture for definition of others. See <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/Conf.pm" class="podlinkpod"
>CGI::Ex::Conf</a> for more information.</p>

<dt><a name='CGI'></a><a name="CGI::Ex::Auth"
><code>CGI::Ex::Auth</code></a></dt>

<dd>
<p>A highly configurable web based authentication system. See <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/Auth.pm" class="podlinkpod"
>CGI::Ex::Auth</a> for more information.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CGI::Ex_METHODS"
>CGI::Ex METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='fill'></a><a name="-&#62;fill"
><code>-&#62;fill</code></a></dt>

<dd>
<p>fill is used for filling hash or cgi object values into an existing html document (it doesn&#39;t deal at all with how you got the document). Arguments may be given as a hash, or a hashref or positional. Some of the following arguments will only work using CGI::Ex::Fill - most will work with either CGI::Ex::Fill or HTML::FillInForm (assume they are available unless specified otherwise). (See <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/Fill.pm" class="podlinkpod"
>CGI::Ex::Fill</a> for a full explanation of functionality). The arguments to fill are as follows (and in order of position):</p>

<dl>
<dt><a name="text"
><code>text</code></a></dt>

<dd>
<p>Text should be a reference to a scalar string containing the html to be modified (actually it could be any reference or object reference that can be modified as a string). It will be modified in place. Another named argument <b>scalarref</b> is available if you would like to copy rather than modify.</p>

<dt><a name="form"
><code>form</code></a></dt>

<dd>
<p>Form may be a hashref, a cgi style object, a coderef, or an array of multiple hashrefs, cgi objects, and coderefs. Hashes should be key value pairs. CGI objects should be able to call the method <b>param</b> (This can be overrided). Coderefs should expect the field name as an argument and should return a value. Values returned by form may be undef, scalar, arrayref, or coderef (coderef values should expect an argument of field name and should return a value). The code ref options are available to delay or add options to the bringing in of form information - without having to tie the hash. Coderefs are not available in HTML::FillInForm. Also HTML::FillInForm only allows CGI objects if an arrayref is used.</p>

<p>NOTE: Only one of the form, fdat, and fobject arguments are allowed at a time.</p>

<dt><a name="target"
><code>target</code></a></dt>

<dd>
<p>The name of the form that the fields should be filled to. The default value of undef, means to fill in all forms in the html.</p>

<dt><a name="fill_passwords"
><code>fill_passwords</code></a></dt>

<dd>
<p>Boolean value defaults to 1. If set to zero - password fields will not be filled.</p>

<dt><a name="ignore_fields"
><code>ignore_fields</code></a></dt>

<dd>
<p>Specify which fields to not fill in. It takes either array ref of names, or a hashref with the names as keys. The hashref option is not available in CGI::Ex::Fill.</p>
</dd>
</dl>

<p>Other named arguments are available for compatibility with HTML::FillInForm. They may only be used as named arguments.</p>

<dl>
<dt><a name="scalarref"
><code>scalarref</code></a></dt>

<dd>
<p>Almost the same as the argument text. If scalarref is used, the filled html will be returned. If text is used the html passed is filled in place.</p>

<dt><a name="arrayref"
><code>arrayref</code></a></dt>

<dd>
<p>An array ref of lines of the document. Forces a returned filled html document.</p>

<dt><a name="file"
><code>file</code></a></dt>

<dd>
<p>An filename that will be opened, filled, and returned.</p>

<dt><a name="fdat"
><code>fdat</code></a></dt>

<dd>
<p>A hashref of key value pairs.</p>

<dt><a name="fobject"
><code>fobject</code></a></dt>

<dd>
<p>A cgi style object or arrayref of cgi style objects used for getting the key value pairs. Should be capable of the -&#62;param method and -&#62;cookie method as document in <a href="/perldoc?CGI" class="podlinkpod"
>CGI</a>.</p>
</dd>
</dl>

<p>See <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/Fill.pm" class="podlinkpod"
>CGI::Ex::Fill</a> for more information about the filling process.</p>

<dt><a name='object'></a><a name="-&#62;object"
><code>-&#62;object</code></a></dt>

<dd>
<p>Returns the CGI object that is currently being used by CGI::Ex. If none has been set it will automatically generate an object of type $PREFERRED_CGI_MODULE which defaults to <b>CGI</b>.</p>

<dt><a name='validate'></a><a name="-&#62;validate"
><code>-&#62;validate</code></a></dt>

<dd>
<p>Validate has a wide range of options available. (See <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/Validate.pod" class="podlinkpod"
>CGI::Ex::Validate</a> for a full explanation of functionality). Validate has two arguments:</p>

<dl>
<dt><a name="form"
><code>form</code></a></dt>

<dd>
<p>Can be either a hashref to be validated, or a CGI style object (which has the param method).</p>

<dt><a name="val_hash"
><code>val_hash</code></a></dt>

<dd>
<p>The val_hash can be one of three items. First, it can be a straight perl hashref containing the validation to be done. Second, it can be a YAML document string. Third, it can be the path to a file containing the validation. The validation in a validation file will be read in depending upon file extension.</p>
</dd>
</dl>

<dt><a name='get_form'></a><a name="-&#62;get_form"
><code>-&#62;get_form</code></a></dt>

<dd>
<p>Very similar to CGI-&#62;new-&#62;Vars except that arrays are returned as arrays. Not sure why CGI didn&#39;t do this anyway (well - yes - legacy Perl 4 - but at some point things need to be updated).</p>

<pre class="sh_perl">    my $hash = $cgix-&#62;get_form;
    my $hash = $cgix-&#62;get_form(CGI-&#62;new);
    my $hash = get_form();
    my $hash = get_form(CGI-&#62;new);</pre>

<dt><a name='set_form'></a><a name="-&#62;set_form"
><code>-&#62;set_form</code></a></dt>

<dd>
<p>Allow for setting a custom form hash. Useful for testing, or other purposes.</p>

<pre class="sh_perl">    $cgix-&#62;set_form(\%new_form);</pre>

<dt><a name='get_cookies'></a><a name="-&#62;get_cookies"
><code>-&#62;get_cookies</code></a></dt>

<dd>
<p>Returns a hash of all cookies.</p>

<pre class="sh_perl">    my $hash = $cgix-&#62;get_cookies;
    my $hash = $cgix-&#62;get_cookies(CGI-&#62;new);
    my $hash = get_cookies();
    my $hash = get_cookies(CGI-&#62;new);</pre>

<dt><a name='set_cookies'></a><a name="-&#62;set_cookies"
><code>-&#62;set_cookies</code></a></dt>

<dd>
<p>Allow for setting a custom cookies hash. Useful for testing, or other purposes.</p>

<pre class="sh_perl">    $cgix-&#62;set_cookies(\%new_cookies);</pre>

<dt><a name='make_form'></a><a name="-&#62;make_form"
><code>-&#62;make_form</code></a></dt>

<dd>
<p>Takes a hash and returns a query_string. A second optional argument may contain an arrayref of keys to use from the hash in building the query_string. First argument is undef, it will use the form stored in itself as the hash.</p>

<dt><a name='content_type'></a><a name="-&#62;content_type"
><code>-&#62;content_type</code></a></dt>

<dd>
<p>Can be called multiple times during the same session. Will only print content-type once. (Useful if you don&#39;t know if something else already printed content-type). Calling this sends the Content-type header. Trying to print -&#62;content_type is an error. For clarity, the method -&#62;print_content_type is available.</p>

<pre class="sh_perl">    $cgix-&#62;print_content_type;

    # OR
    $cgix-&#62;print_content_type(&#39;text/html&#39;);

    # OR
    $cgix-&#62;print_content_type(&#39;text/html&#39;, &#39;utf-8&#39;);</pre>

<dt><a name='set_cookie'></a><a name="-&#62;set_cookie"
><code>-&#62;set_cookie</code></a></dt>

<dd>
<p>Arguments are the same as those to CGI-&#62;new-&#62;cookie({}). Uses CGI&#39;s cookie method to create a cookie, but then, depending on if content has already been sent to the browser will either print a Set-cookie header, or will add a &#60;meta http-equiv=&#39;set-cookie&#39;&#62; tag (this is supported on most major browsers). This is useful if you don&#39;t know if something else already printed content-type.</p>

<dt><a name='location_bounce'></a><a name="-&#62;location_bounce"
><code>-&#62;location_bounce</code></a></dt>

<dd>
<p>Depending on if content has already been sent to the browser will either print a Location header, or will add a &#60;meta http-equiv=&#39;refresh&#39;&#62; tag (this is supported on all major browsers). This is useful if you don&#39;t know if something else already printed content-type. Takes single argument of a url.</p>

<dt><a name='last_modified'></a><a name="-&#62;last_modified"
><code>-&#62;last_modified</code></a></dt>

<dd>
<p>Depending on if content has already been sent to the browser will either print a Last-Modified header, or will add a &#60;meta http-equiv=&#39;Last-Modified&#39;&#62; tag (this is supported on most major browsers). This is useful if you don&#39;t know if something else already printed content-type. Takes an argument of either a time (may be a CGI -expires style time) or a filename.</p>

<dt><a name='expires'></a><a name="-&#62;expires"
><code>-&#62;expires</code></a></dt>

<dd>
<p>Depending on if content has already been sent to the browser will either print a Expires header, or will add a &#60;meta http-equiv=&#39;Expires&#39;&#62; tag (this is supported on most major browsers). This is useful if you don&#39;t know if something else already printed content-type. Takes an argument of a time (may be a CGI -expires style time).</p>

<dt><a name='send_status'></a><a name="-&#62;send_status"
><code>-&#62;send_status</code></a></dt>

<dd>
<p>Send a custom status. Works in both CGI and mod_perl. Arguments are a status code and the content (optional).</p>

<dt><a name='send_header'></a><a name="-&#62;send_header"
><code>-&#62;send_header</code></a></dt>

<dd>
<p>Send a http header. Works in both CGI and mod_perl. Arguments are a header name and the value for that header.</p>

<dt><a name='print_js'></a><a name="-&#62;print_js"
><code>-&#62;print_js</code></a></dt>

<dd>
<p>Prints out a javascript file. Does everything it can to make sure that the javascript will cache. Takes either a full filename, or a shortened name which will be looked for in @INC. (ie /full/path/to/my.js or CGI/Ex/validate.js or CGI::Ex::validate)</p>

<pre class="sh_perl">    #!/usr/bin/perl
    use CGI::Ex;
    CGI::Ex-&#62;print_js($ENV{&#39;PATH_INFO&#39;});</pre>

<dt><a name='swap_template'></a><a name="-&#62;swap_template"
><code>-&#62;swap_template</code></a></dt>

<dd>
<p>This is intended as a simple yet strong subroutine to swap in tags to a document. It is intended to be very basic for those who may not want the full features of a Templating system such as Template::Toolkit (even though they should investigate them because they are pretty nice). The default allows for basic template toolkit variable swapping. There are two arguments. First is a string or a reference to a string. If a string is passed, a copy of that string is swapped and returned. If a reference to a string is passed, it is modified in place. The second argument is a form, or a CGI object, or a cgiex object, or a coderef (if the second argument is missing, the cgiex object which called the method will be used). If it is a coderef, it should accept key as its only argument and return the proper value.</p>

<pre class="sh_perl">  my $cgix = CGI::Ex-&#62;new;
  my $form = {foo  =&#62; &#39;bar&#39;,
              this =&#62; {is =&#62; {nested =&#62; [&#39;wow&#39;, &#39;wee&#39;]}}
             };

  my $str =  $cgix-&#62;swap_template(&#34;&#60;html&#62;[% foo %]&#60;br&#62;[% foo %]&#60;/html&#62;&#34;, $form));
  # $str eq &#39;&#60;html&#62;bar&#60;br&#62;bar&#60;/html&#62;&#39;

  $str = $cgix-&#62;swap_template(&#34;[% this.is.nested.1 %]&#34;, $form));
  # $str eq &#39;wee&#39;

  $str = &#34;[% this.is.nested.0 %]&#34;;
  $cgix-&#62;swap_template(\$str, $form);
  # $str eq &#39;wow&#39;

  # may also be called with only one argument as follows:
  # assuming $cgix had a query string of ?foo=bar&#38;baz=wow&#38;this=wee
  $str = &#34;&#60;html&#62;([% foo %]) &#60;br&#62;
          ([% baz %]) &#60;br&#62;
          ([% this %]) &#60;/html&#62;&#34;;
  $cgix-&#62;swap_template(\$str);
  #$str eq &#34;&#60;html&#62;(bar) &#60;br&#62;
  #        (wow) &#60;br&#62;
  #        (wee) &#60;/html&#62;&#34;;</pre>

<p>For further examples, please see the code contained in t/samples/cgi_ex_* of this distribution.</p>

<p>If at a later date, the developer upgrades to Template::Toolkit, the templates that were being swapped by CGI::Ex::swap_template should be compatible with Template::Toolkit.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MODULES"
>MODULES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>See also <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/App.pod" class="podlinkpod"
>CGI::Ex::App</a>.</p>

<p>See also <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/Auth.pm" class="podlinkpod"
>CGI::Ex::Auth</a>.</p>

<p>See also <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/Conf.pm" class="podlinkpod"
>CGI::Ex::Conf</a>.</p>

<p>See also <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/Die.pm" class="podlinkpod"
>CGI::Ex::Die</a>.</p>

<p>See also <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/Dump.pm" class="podlinkpod"
>CGI::Ex::Dump</a>.</p>

<p>See also <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/Fill.pm" class="podlinkpod"
>CGI::Ex::Fill</a>.</p>

<p>See also <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/Template.pm" class="podlinkpod"
>CGI::Ex::Template</a>.</p>

<p>See also <a href="/~rhandom/CGI-Ex-2.38/lib/CGI/Ex/Validate.pod" class="podlinkpod"
>CGI::Ex::Validate</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE"
>LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module may be distributed under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Paul Seamons &#60;perl at seamons dot com&#62;</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78260 Uploads, 24722 Distributions
105996 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 14:36:05 2012 GMT (0.325491905212402) @cpansearch1 -->
 </body>
</html>
