<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>IO::Handle - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","IO",3]);
    _gaq.push(["_setCustomVar",5,"Release","IO-1.25",3]);
    _gaq.push(["_setCustomVar",3,"Module","IO::Handle",3]);
    _gaq.push(["_setCustomVar",1,"Author","GBARR",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?IO::Handle">permalink</a></div>
  <a href="/~gbarr/">Graham Barr</a> &gt;
  <a href="/~gbarr/IO-1.25/">IO-1.25</a> &gt;
  IO::Handle
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/91e0a99c0201988cad4e53833c8aa2b5?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/G/GB/GBARR/IO-1.25.tar.gz">IO-1.25.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=IO%3A%3AHandle;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~GBARR/IO-1.25/lib/IO/Handle.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?IO%3A%3AFile">IO::File</a><br>
<a href="/perldoc?IO%3A%3ASelect">IO::Select</a><br>
<a href="/perldoc?IPC%3A%3AOpen3">IPC::Open3</a><br>
<a href="/perldoc?IO%3A%3ASocket">IO::Socket</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Text%3A%3ACSV_XS">Text::CSV_XS</a><br>
<a href="/perldoc?IPC%3A%3AOpen2">IPC::Open2</a><br>
<a href="/perldoc?IO%3A%3AScalar">IO::Scalar</a><br>
<a href="/perldoc?XML%3A%3AParser">XML::Parser</a><br>
<a href="/perldoc?IPC%3A%3ARun">IPC::Run</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=IO%3A%3AHandle">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 18</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 8</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=IO">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.28 &nbsp;
<span class="noprint">
  <a href="/src/GBARR/IO-1.25/lib/IO/Handle.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#CONSTRUCTOR'>CONSTRUCTOR</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <li class='indexItem indexItem1'><a href='#NOTE'>NOTE</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#HISTORY'>HISTORY</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>IO::Handle - supply object methods for I/O handles</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use IO::Handle;

    $io = new IO::Handle;
    if ($io-&#62;fdopen(fileno(STDIN),&#34;r&#34;)) {
        print $io-&#62;getline;
        $io-&#62;close;
    }

    $io = new IO::Handle;
    if ($io-&#62;fdopen(fileno(STDOUT),&#34;w&#34;)) {
        $io-&#62;print(&#34;Some text\n&#34;);
    }

    # setvbuf is not available by default on Perls 5.8.0 and later.
    use IO::Handle &#39;_IOLBF&#39;;
    $io-&#62;setvbuf($buffer_var, _IOLBF, 1024);

    undef $io;       # automatically closes the file if it&#39;s open

    autoflush STDOUT 1;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>IO::Handle</code> is the base class for all other IO handle classes. It is not intended that objects of <code>IO::Handle</code> would be created directly, but instead <code>IO::Handle</code> is inherited from by several other classes in the IO hierarchy.</p>

<p>If you are reading this documentation, looking for a replacement for the <code>FileHandle</code> package, then I suggest you read the documentation for <code>IO::File</code> too.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTOR"
>CONSTRUCTOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='new'></a><a name="new_()"
>new ()</a></dt>

<dd>
<p>Creates a new <code>IO::Handle</code> object.</p>

<dt><a name='new_from_fd'></a><a name="new_from_fd_(_FD,_MODE_)"
>new_from_fd ( FD, MODE )</a></dt>

<dd>
<p>Creates an <code>IO::Handle</code> like <code>new</code> does. It requires two parameters, which are passed to the method <code>fdopen</code>; if the fdopen fails, the object is destroyed. Otherwise, it is returned to the caller.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>See <a href="/perldoc?perlfunc" class="podlinkpod"
>perlfunc</a> for complete descriptions of each of the following supported <code>IO::Handle</code> methods, which are just front ends for the corresponding built-in functions:</p>

<pre class="sh_perl">    $io-&#62;close
    $io-&#62;eof
    $io-&#62;fcntl( FUNCTION, SCALAR )
    $io-&#62;fileno
    $io-&#62;format_write( [FORMAT_NAME] )
    $io-&#62;getc
    $io-&#62;ioctl( FUNCTION, SCALAR )
    $io-&#62;read ( BUF, LEN, [OFFSET] )
    $io-&#62;print ( ARGS )
    $io-&#62;printf ( FMT, [ARGS] )
    $io-&#62;say ( ARGS )
    $io-&#62;stat
    $io-&#62;sysread ( BUF, LEN, [OFFSET] )
    $io-&#62;syswrite ( BUF, [LEN, [OFFSET]] )
    $io-&#62;truncate ( LEN )</pre>

<p>See <a href="/perldoc?perlvar" class="podlinkpod"
>perlvar</a> for complete descriptions of each of the following supported <code>IO::Handle</code> methods. All of them return the previous value of the attribute and takes an optional single argument that when given will set the value. If no argument is given the previous value is unchanged (except for $io-&#62;autoflush will actually turn ON autoflush by default).</p>

<pre class="sh_perl">    $io-&#62;autoflush ( [BOOL] )                         $|
    $io-&#62;format_page_number( [NUM] )                  $%
    $io-&#62;format_lines_per_page( [NUM] )               $=
    $io-&#62;format_lines_left( [NUM] )                   $-
    $io-&#62;format_name( [STR] )                         $~
    $io-&#62;format_top_name( [STR] )                     $^
    $io-&#62;input_line_number( [NUM])                    $.</pre>

<p>The following methods are not supported on a per-filehandle basis.</p>

<pre class="sh_perl">    IO::Handle-&#62;format_line_break_characters( [STR] ) $:
    IO::Handle-&#62;format_formfeed( [STR])               $^L
    IO::Handle-&#62;output_field_separator( [STR] )       $,
    IO::Handle-&#62;output_record_separator( [STR] )      $\

    IO::Handle-&#62;input_record_separator( [STR] )       $/</pre>

<p>Furthermore, for doing normal I/O you might need these:</p>

<dl>
<dt><a name='io'></a><a name="$io-&#62;fdopen_(_FD,_MODE_)"
>$io-&#62;fdopen ( FD, MODE )</a></dt>

<dd>
<p><code>fdopen</code> is like an ordinary <code>open</code> except that its first parameter is not a filename but rather a file handle name, an IO::Handle object, or a file descriptor number. (For the documentation of the <code>open</code> method, see <a href="/~gbarr/IO-1.25/lib/IO/File.pm" class="podlinkpod"
>IO::File</a>.)</p>

<dt><a name='io'></a><a name="$io-&#62;opened"
>$io-&#62;opened</a></dt>

<dd>
<p>Returns true if the object is currently a valid file descriptor, false otherwise.</p>

<dt><a name='io'></a><a name="$io-&#62;getline"
>$io-&#62;getline</a></dt>

<dd>
<p>This works like &#60;$io&#62; described in <a href="/perldoc?perlop#I/O_Operators" class="podlinkpod"
>&#34;I/O Operators&#34; in perlop</a> except that it&#39;s more readable and can be safely called in a list context but still returns just one line. If used as the conditional +within a <code>while</code> or C-style <code>for</code> loop, however, you will need to +emulate the functionality of &#60;$io&#62; with <code>defined($_ = $io-&#62;getline)</code>.</p>

<dt><a name='io'></a><a name="$io-&#62;getlines"
>$io-&#62;getlines</a></dt>

<dd>
<p>This works like &#60;$io&#62; when called in a list context to read all the remaining lines in a file, except that it&#39;s more readable. It will also croak() if accidentally called in a scalar context.</p>

<dt><a name='io'></a><a name="$io-&#62;ungetc_(_ORD_)"
>$io-&#62;ungetc ( ORD )</a></dt>

<dd>
<p>Pushes a character with the given ordinal value back onto the given handle&#39;s input stream. Only one character of pushback per handle is guaranteed.</p>

<dt><a name='io'></a><a name="$io-&#62;write_(_BUF,_LEN_[,_OFFSET_]_)"
>$io-&#62;write ( BUF, LEN [, OFFSET ] )</a></dt>

<dd>
<p>This <code>write</code> is like <code>write</code> found in C, that is it is the opposite of read. The wrapper for the perl <code>write</code> function is called <code>format_write</code>.</p>

<dt><a name='io'></a><a name="$io-&#62;error"
>$io-&#62;error</a></dt>

<dd>
<p>Returns a true value if the given handle has experienced any errors since it was opened or since the last call to <code>clearerr</code>, or if the handle is invalid. It only returns false for a valid handle with no outstanding errors.</p>

<dt><a name='io'></a><a name="$io-&#62;clearerr"
>$io-&#62;clearerr</a></dt>

<dd>
<p>Clear the given handle&#39;s error indicator. Returns -1 if the handle is invalid, 0 otherwise.</p>

<dt><a name='io'></a><a name="$io-&#62;sync"
>$io-&#62;sync</a></dt>

<dd>
<p><code>sync</code> synchronizes a file&#39;s in-memory state with that on the physical medium. <code>sync</code> does not operate at the perlio api level, but operates on the file descriptor (similar to sysread, sysseek and systell). This means that any data held at the perlio api level will not be synchronized. To synchronize data that is buffered at the perlio api level you must use the flush method. <code>sync</code> is not implemented on all platforms. Returns &#34;0 but true&#34; on success, <code>undef</code> on error, <code>undef</code> for an invalid handle. See <a>fsync(3c)</a>.</p>

<dt><a name='io'></a><a name="$io-&#62;flush"
>$io-&#62;flush</a></dt>

<dd>
<p><code>flush</code> causes perl to flush any buffered data at the perlio api level. Any unread data in the buffer will be discarded, and any unwritten data will be written to the underlying file descriptor. Returns &#34;0 but true&#34; on success, <code>undef</code> on error.</p>

<dt><a name='io'></a><a name="$io-&#62;printflush_(_ARGS_)"
>$io-&#62;printflush ( ARGS )</a></dt>

<dd>
<p>Turns on autoflush, print ARGS and then restores the autoflush status of the <code>IO::Handle</code> object. Returns the return value from print.</p>

<dt><a name='io'></a><a name="$io-&#62;blocking_(_[_BOOL_]_)"
>$io-&#62;blocking ( [ BOOL ] )</a></dt>

<dd>
<p>If called with an argument <code>blocking</code> will turn on non-blocking IO if <code>BOOL</code> is false, and turn it off if <code>BOOL</code> is true.</p>

<p><code>blocking</code> will return the value of the previous setting, or the current setting if <code>BOOL</code> is not given.</p>

<p>If an error occurs <code>blocking</code> will return undef and <code>$!</code> will be set.</p>
</dd>
</dl>

<p>If the C functions setbuf() and/or setvbuf() are available, then <code>IO::Handle::setbuf</code> and <code>IO::Handle::setvbuf</code> set the buffering policy for an IO::Handle. The calling sequences for the Perl functions are the same as their C counterparts--including the constants <code>_IOFBF</code>, <code>_IOLBF</code>, and <code>_IONBF</code> for setvbuf()--except that the buffer parameter specifies a scalar variable to use as a buffer. You should only change the buffer before any I/O, or immediately after calling flush.</p>

<p>WARNING: The IO::Handle::setvbuf() is not available by default on Perls 5.8.0 and later because setvbuf() is rather specific to using the stdio library, while Perl prefers the new perlio subsystem instead.</p>

<p>WARNING: A variable used as a buffer by <code>setbuf</code> or <code>setvbuf</code> <b>must not be modified</b> in any way until the IO::Handle is closed or <code>setbuf</code> or <code>setvbuf</code> is called again, or memory corruption may result! Remember that the order of global destruction is undefined, so even if your buffer variable remains in scope until program termination, it may be undefined before the file IO::Handle is closed. Note that you need to import the constants <code>_IOFBF</code>, <code>_IOLBF</code>, and <code>_IONBF</code> explicitly. Like C, setbuf returns nothing. setvbuf returns &#34;0 but true&#34;, on success, <code>undef</code> on failure.</p>

<p>Lastly, there is a special method for working under <b>-T</b> and setuid/gid scripts:</p>

<dl>
<dt><a name='io'></a><a name="$io-&#62;untaint"
>$io-&#62;untaint</a></dt>

<dd>
<p>Marks the object as taint-clean, and as such data read from it will also be considered taint-clean. Note that this is a very trusting action to take, and appropriate consideration for the data source and potential vulnerability should be kept in mind. Returns 0 on success, -1 if setting the taint-clean flag failed. (eg invalid handle)</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTE"
>NOTE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>An <code>IO::Handle</code> object is a reference to a symbol/GLOB reference (see the <code>Symbol</code> package). Some modules that inherit from <code>IO::Handle</code> may want to keep object related variables in the hash table part of the GLOB. In an attempt to prevent modules trampling on each other I propose the that any such module should prefix its variables with its own name separated by _&#39;s. For example the IO::Socket module keeps a <code>timeout</code> variable in &#39;io_socket_timeout&#39;.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?perlfunc" class="podlinkpod"
>perlfunc</a>, <a href="/perldoc?perlop#I/O_Operators" class="podlinkpod"
>&#34;I/O Operators&#34; in perlop</a>, <a href="/~gbarr/IO-1.25/lib/IO/File.pm" class="podlinkpod"
>IO::File</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Due to backwards compatibility, all filehandles resemble objects of class <code>IO::Handle</code>, or actually classes derived from that class. They actually aren&#39;t. Which means you can&#39;t derive your own class from <code>IO::Handle</code> and inherit those methods.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="HISTORY"
>HISTORY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Derived from FileHandle.pm by Graham Barr &#60;<em>gbarr@pobox.com</em>&#62;</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78184 Uploads, 24708 Distributions
105990 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Wed Apr 25 05:29:53 2012 GMT (0.104806900024414) @cpansearch1 -->
 </body>
</html>
