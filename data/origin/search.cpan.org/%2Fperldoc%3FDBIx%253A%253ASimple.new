<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>DBIx::Simple - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","DBIx-Simple",3]);
    _gaq.push(["_setCustomVar",5,"Release","DBIx-Simple-1.35",3]);
    _gaq.push(["_setCustomVar",3,"Module","DBIx::Simple",3]);
    _gaq.push(["_setCustomVar",1,"Author","JUERD",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?DBIx::Simple">permalink</a></div>
  <a href="/~juerd/">Juerd Waalboer</a> &gt;
  <a href="/~juerd/DBIx-Simple-1.35/">DBIx-Simple-1.35</a> &gt;
  DBIx::Simple
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/a638869e8c9b2efadf56ab5f14113aab?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/J/JU/JUERD/DBIx-Simple-1.35.tar.gz">DBIx-Simple-1.35.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=DBIx%3A%3ASimple;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~JUERD/DBIx-Simple-1.35/lib/DBIx/Simple.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?SQL%3A%3AAbstract">SQL::Abstract</a><br>
<a href="/perldoc?Text%3A%3ACSV_XS">Text::CSV_XS</a><br>
<a href="/perldoc?DBIx%3A%3AAbstract">DBIx::Abstract</a><br>
<a href="/perldoc?Test%3A%3AMore">Test::More</a><br>
<a href="/perldoc?CGI%3A%3AApplication">CGI::Application</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?DBD%3A%3Amysql">DBD::mysql</a><br>
<a href="/perldoc?Text%3A%3AxSV">Text::xSV</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=DBIx%3A%3ASimple">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=DBIx-Simple">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.35 &nbsp;
<span class="noprint">
  <a href="/src/JUERD/DBIx-Simple-1.35/lib/DBIx/Simple.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#DBIx::Simple'>DBIx::Simple</a>
    <li class='indexItem indexItem2'><a href='#DBIx::SImple_+_SQL::Interp'>DBIx::SImple + SQL::Interp</a>
    <li class='indexItem indexItem2'><a href='#DBIx::Simple_+_SQL::Abstract'>DBIx::Simple + SQL::Abstract</a>
    <li class='indexItem indexItem2'><a href='#DBIx::Simple::Result'>DBIx::Simple::Result</a>
    <li class='indexItem indexItem2'><a href='#DBIx::Simple::Result_+_DBIx::XHTML_Table'>DBIx::Simple::Result + DBIx::XHTML_Table</a>
    <li class='indexItem indexItem2'><a href='#Examples'>Examples</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#DBIx::Simple_methods'>DBIx::Simple methods</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#Class_methods'>Class methods</a>
      <li class='indexItem indexItem3'><a href='#Object_methods'>Object methods</a>
      <li class='indexItem indexItem3'><a href='#Object_properties'>Object properties</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#DBIx::Simple::Dummy'>DBIx::Simple::Dummy</a>
    <li class='indexItem indexItem2'><a href='#DBIx::Simple::Result_methods'>DBIx::Simple::Result methods</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#Fetching_a_single_row_at_a_time'>Fetching a single row at a time</a>
      <li class='indexItem indexItem3'><a href='#Fetching_all_remaining_rows'>Fetching all remaining rows</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Object_construction'>Object construction</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#Simple_object_construction'>Simple object construction</a>
      <li class='indexItem indexItem3'><a href='#Advanced_object_construction'>Advanced object construction</a>
    </ul>
  </ul>
  <li class='indexItem indexItem1'><a href='#MISCELLANEOUS'>MISCELLANEOUS</a>
  <li class='indexItem indexItem1'><a href='#LICENSE'>LICENSE</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>DBIx::Simple - Very complete easy-to-use OO interface to DBI</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBIx::Simple"
>DBIx::Simple</a></h2>

<pre class="sh_perl">    $db = DBIx::Simple-&#62;connect(...)  # or -&#62;new

    $db-&#62;keep_statements = 16
    $db-&#62;lc_columns = 1
    $db-&#62;result_class = &#39;DBIx::Simple::Result&#39;;

    $db-&#62;begin_work         $db-&#62;commit
    $db-&#62;rollback           $db-&#62;disconnect
    $db-&#62;func(...)          $db-&#62;last_insert_id

    $result = $db-&#62;query(...)</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBIx::SImple_+_SQL::Interp"
>DBIx::SImple + SQL::Interp</a></h2>

<pre class="sh_perl">    $result = $db-&#62;iquery(...)</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBIx::Simple_+_SQL::Abstract"
>DBIx::Simple + SQL::Abstract</a></h2>

<pre class="sh_perl">    $db-&#62;abstract = SQL::Abstract-&#62;new(...)

    $result = $db-&#62;select(...)
    $result = $db-&#62;insert(...)
    $result = $db-&#62;update(...)
    $result = $db-&#62;delete(...)</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBIx::Simple::Result"
>DBIx::Simple::Result</a></h2>

<pre class="sh_perl">    @columns = $result-&#62;columns

    $result-&#62;into($foo, $bar, $baz)
    $row = $result-&#62;fetch

    @row = $result-&#62;list      @rows = $result-&#62;flat
    $row = $result-&#62;array     @rows = $result-&#62;arrays
    $row = $result-&#62;hash      @rows = $result-&#62;hashes
    @row = $result-&#62;kv_list   @rows = $result-&#62;kv_flat
    $row = $result-&#62;kv_array  @rows = $result-&#62;kv_arrays
    $obj = $result-&#62;object    @objs = $result-&#62;objects

    %map = $result-&#62;map_arrays(...)
    %map = $result-&#62;map_hashes(...)
    %map = $result-&#62;map

    $rows = $result-&#62;rows

    $dump = $result-&#62;text

    $result-&#62;finish</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBIx::Simple::Result_+_DBIx::XHTML_Table"
>DBIx::Simple::Result + DBIx::XHTML_Table</a></h2>

<pre class="sh_perl">    $html = $result-&#62;html(...)

    $table_object = $result-&#62;xto(...)</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Examples"
>Examples</a></h2>

<p>Please read <a href="/~juerd/DBIx-Simple-1.35/lib/DBIx/Simple/Examples.pod" class="podlinkpod"
>DBIx::Simple::Examples</a> for code examples.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>DBIx::Simple provides a simplified interface to DBI, Perl&#39;s powerful database module.</p>

<p>This module is aimed at rapid development and easy maintenance. Query preparation and execution are combined in a single method, the result object (which is a wrapper around the statement handle) provides easy row-by-row and slurping methods.</p>

<p>The <code>query</code> method returns either a result object, or a dummy object. The dummy object returns undef (or an empty list) for all methods and when used in boolean context, is false. The dummy object lets you postpone (or skip) error checking, but it also makes immediate error checking simply <code>$db-&#62;query(...) or die $db-&#62;error</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBIx::Simple_methods"
>DBIx::Simple methods</a></h2>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Class_methods"
>Class methods</a></h3>

<dl>
<dt><a name='connect'></a><a name="connect($dbh),_connect($dsn,_$user,_$pass,_\%options)"
><code>connect($dbh)</code>, <code>connect($dsn, $user, $pass, \%options)</code></a></dt>

<dd>
<dt><a name='new'></a><a name="new($dbh),_new($dsn,_$user,_$pass,_\%options)"
><code>new($dbh)</code>, <code>new($dsn, $user, $pass, \%options)</code></a></dt>

<dd>
<p>The <code>connect</code> or <code>new</code> class method takes either an existing DBI object ($dbh), or a list of arguments to pass to <code>DBI-&#62;connect</code>. See <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> for a detailed description.</p>

<p>You cannot use this method to clone a DBIx::Simple object: the $dbh passed should be a DBI::db object, not a DBIx::Simple object.</p>

<p>For new connections, PrintError is disabled by default. If you enable it, beware that it will report line numbers in DBIx/Simple.pm.</p>

<p>For new connections, <b>RaiseError is enabled by default</b> unless the environment variable <code>PERL_DBIX_SIMPLE_NO_RAISEERROR</code> is set to a non-empty non-0 value.</p>

<p>This method is the constructor and returns a DBIx::Simple object on success. On failure, it returns undef.</p>
</dd>
</dl>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Object_methods"
>Object methods</a></h3>

<dl>
<dt><a name='query'></a><a name="query($query,_@values)"
><code>query($query, @values)</code></a></dt>

<dd>
<p>Prepares and executes the query and returns a result object.</p>

<p>If the string <code>(??)</code> is present in the query, it is replaced with a list of as many question marks as @values.</p>

<p>The database drivers substitute placeholders (question marks that do not appear in quoted literals) in the query with the given @values, after them escaping them. You should always use placeholders, and never use raw user input in database queries.</p>

<p>On success, returns a DBIx::Simple::Result object. On failure, returns a DBIx::Simple::Dummy object.</p>

<dt><a name='iquery'></a><a name="iquery(...)"
><code>iquery(...)</code></a></dt>

<dd>
<p>Uses SQL::Interp to interpolate values into a query, and uses the resulting generated query and bind arguments with <code>query</code>. See SQL::Interp&#39;s documentation for usage information.</p>

<p>Requires Mark Storberg&#39;s SQL::Interp, which is available from CPAN. SQL::Interp is a fork from David Manura&#39;s SQL::Interpolate.</p>

<dt><a name='select'></a><a name="select,_insert,_update,_delete"
><code>select</code>, <code>insert</code>, <code>update</code>, <code>delete</code></a></dt>

<dd>
<p>Calls the respective method on <code>abstract</code>, and uses the resulting generated query and bind arguments with <code>query</code>. See SQL::Abstract&#39;s documentation for usage information. You can override the object by assigning to the <code>abstract</code> property.</p>

<p>Requires Nathan Wiger&#39;s SQL::Abstract, which is available from CPAN.</p>

<dt><a name='begin_work'></a><a name="begin_work,_begin,_commit,_rollback"
><code>begin_work</code>, <code>begin</code>, <code>commit</code>, <code>rollback</code></a></dt>

<dd>
<p>These transaction related methods call the DBI respective methods and Do What You Mean. See <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> for details.</p>

<p><code>begin</code> is an alias for <code>begin_work</code>.</p>

<dt><a name='func'></a><a name="func(...)"
><code>func(...)</code></a></dt>

<dd>
<p>Calls the <code>func</code> method of DBI. See <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> for details.</p>

<dt><a name='last_insert_id'></a><a name="last_insert_id(...)"
><code>last_insert_id(...)</code></a></dt>

<dd>
<p>Calls the <code>last_insert_id</code> method of DBI. See <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> for details. Note that this feature requires DBI 1.38 or newer.</p>

<dt><a name="disconnect"
><code>disconnect</code></a></dt>

<dd>
<p>Destroys (finishes) active statements and disconnects. Whenever the database object is destroyed, this happens automatically if DBIx::Simple handled the connection (i.e. you didn&#39;t use an existing DBI handle). After disconnecting, you can no longer use the database object or any of its result objects.</p>
</dd>
</dl>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Object_properties"
>Object properties</a></h3>

<dl>
<dt><a name="dbh"
><code>dbh</code></a></dt>

<dd>
<p>Exposes the internal database handle. Use this only if you know what you are doing. Keeping a reference or doing queries can interfere with DBIx::Simple&#39;s garbage collection and error reporting.</p>

<dt><a name='lc_columns'></a><a name="lc_columns_=_$bool"
><code>lc_columns = $bool</code></a></dt>

<dd>
<p>When true at time of query execution, makes several result object methods use lower cased column names. <code>lc_columns</code> is true by default.</p>

<dt><a name='keep_statements'></a><a name="keep_statements_=_$integer"
><code>keep_statements = $integer</code></a></dt>

<dd>
<p>Sets the number of statement objects that DBIx::Simple can keep for reuse. This can dramatically speed up repeated queries (like when used in a loop). <code>keep_statements</code> is 16 by default.</p>

<p>A query is only reused if it equals a previously used one literally. This means that to benefit from this caching mechanism, you must use placeholders and never interpolate variables yourself.</p>

<pre class="sh_perl">    # Wrong:
    $db-&#62;query(&#34;INSERT INTO foo VALUES (&#39;$foo&#39;, &#39;$bar&#39;, &#39;$baz&#39;)&#34;);
    $db-&#62;query(&#34;SELECT FROM foo WHERE foo = &#39;$foo&#39; OR bar = &#39;$bar&#39;&#34;);

    # Right:
    $db-&#62;query(&#39;INSERT INTO foo VALUES (??)&#39;, $foo, $bar, $baz);
    $db-&#62;query(&#39;SELECT FROM foo WHERE foo = ? OR bar = ?&#39;, $foo, $baz);</pre>

<p>Of course, automatic value escaping is a much better reason for using placeholders.</p>

<dt><a name='result_class'></a><a name="result_class_=_$string"
><code>result_class = $string</code></a></dt>

<dd>
<p>Class to use for result objects. Defaults to DBIx::Simple::Result. A constructor is not used.</p>

<dt><a name="error"
><code>error</code></a></dt>

<dd>
<p>Returns the error string of the last DBI method. See the discussion of &#34;<code>err</code>&#34; and &#34;<code>errstr</code>&#34; in <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a>.</p>

<dt><a name='abstract'></a><a name="abstract_=_SQL::Abstract-&#62;new(...)"
><code>abstract = SQL::Abstract-&#62;new(...)</code></a></dt>

<dd>
<p>Sets the object to use with the <code>select</code>, <code>insert</code>, <code>update</code> and <code>delete</code> methods. On first access, will create one with SQL::Abstract&#39;s default options.</p>

<p>Requires Nathan Wiger&#39;s SQL::Abstract, which is available from CPAN.</p>

<p>In theory, you can assign any object to this property, as long as that object has these four methods, and they return a list suitable for use with the <code>query</code> method.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBIx::Simple::Dummy"
>DBIx::Simple::Dummy</a></h2>

<p>The <code>query</code> method of DBIx::Simple returns a dummy object on failure. Its methods all return an empty list or undef, depending on context. When used in boolean context, a dummy object evaluates to false.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBIx::Simple::Result_methods"
>DBIx::Simple::Result methods</a></h2>

<p>Methods documented to return &#34;a list&#34; return a reference to an array of the same in scalar context, unless something else is explicitly mentioned.</p>

<dl>
<dt><a name="columns"
><code>columns</code></a></dt>

<dd>
<p>Returns a list of column names. Affected by <code>lc_columns</code>.</p>

<dt><a name='bind'></a><a name="bind(LIST)"
><code>bind(LIST)</code></a></dt>

<dd>
<p>Binds the given LIST of variables to the columns. Unlike with DBI&#39;s <code>bind_columns</code>, passing references is not needed.</p>

<p>Bound variables are very efficient. Binding a tied variable doesn&#39;t work.</p>

<dt><a name='attr'></a><a name="attr(...)"
><code>attr(...)</code></a></dt>

<dd>
<p>Returns a copy of an sth attribute (property). See <a href="/perldoc?DBI#Statement_Handle_Attributes" class="podlinkpod"
>&#34;Statement Handle Attributes&#34; in DBI</a> for details.</p>

<dt><a name='func'></a><a name="func(...)"
><code>func(...)</code></a></dt>

<dd>
<p>This calls the <code>func</code> method on the sth of DBI. See <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> for details.</p>

<dt><a name="rows"
><code>rows</code></a></dt>

<dd>
<p>Returns the number of rows affected by the last row affecting command, or -1 if the number of rows is not known or not available.</p>

<p>For SELECT statements, it is generally not possible to know how many rows are returned. MySQL does provide this information. See <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> for a detailed explanation.</p>

<dt><a name="finish"
><code>finish</code></a></dt>

<dd>
<p>Finishes the statement. After finishing a statement, it can no longer be used. When the result object is destroyed, its statement handle is automatically finished and destroyed. There should be no reason to call this method explicitly; just let the result object go out of scope.</p>
</dd>
</dl>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Fetching_a_single_row_at_a_time"
>Fetching a single row at a time</a></h3>

<dl>
<dt><a name="fetch"
><code>fetch</code></a></dt>

<dd>
<p>Returns a reference to the array that holds the values. This is the same array every time.</p>

<p>Subsequent fetches (using any method) may change the values in the variables passed and the returned reference&#39;s array.</p>

<dt><a name='into'></a><a name="into(LIST)"
><code>into(LIST)</code></a></dt>

<dd>
<p>Combines <code>bind</code> with <code>fetch</code>. Returns what <code>fetch</code> returns.</p>

<dt><a name="list"
><code>list</code></a></dt>

<dd>
<p>Returns a list of values, or (in scalar context), only the last value.</p>

<dt><a name="array"
><code>array</code></a></dt>

<dd>
<p>Returns a reference to an array.</p>

<dt><a name="hash"
><code>hash</code></a></dt>

<dd>
<p>Returns a reference to a hash, keyed by column name. Affected by <code>lc_columns</code>.</p>

<dt><a name="kv_list"
><code>kv_list</code></a></dt>

<dd>
<p>Returns an ordered list of interleaved keys and values. Affected by <code>lc_columns</code>.</p>

<dt><a name="kv_array"
><code>kv_array</code></a></dt>

<dd>
<p>Returns a reference to an array of interleaved column names and values. Like kv, but returns an array reference even in list context. Affected by <code>lc_columns</code>.</p>

<dt><a name='object'></a><a name="object($class,_...)"
><code>object($class, ...)</code></a></dt>

<dd>
<p>Returns an instance of $class. See &#34;Object construction&#34;. Possibly affected by <code>lc_columns</code>.</p>
</dd>
</dl>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Fetching_all_remaining_rows"
>Fetching all remaining rows</a></h3>

<dl>
<dt><a name="flat"
><code>flat</code></a></dt>

<dd>
<p>Returns a flattened list.</p>

<dt><a name="arrays"
><code>arrays</code></a></dt>

<dd>
<p>Returns a list of references to arrays</p>

<dt><a name="hashes"
><code>hashes</code></a></dt>

<dd>
<p>Returns a list of references to hashes, keyed by column name. Affected by <code>lc_columns</code>.</p>

<dt><a name="kv_flat"
><code>kv_flat</code></a></dt>

<dd>
<p>Returns an flattened list of interleaved column names and values. Affected by <code>lc_columns</code>.</p>

<dt><a name="kv_arrays"
><code>kv_arrays</code></a></dt>

<dd>
<p>Returns a list of references to arrays of interleaved column names and values. Affected by <code>lc_columns</code>.</p>

<dt><a name='objects'></a><a name="objects($class,_...)"
><code>objects($class, ...)</code></a></dt>

<dd>
<p>Returns a list of instances of $class. See &#34;Object construction&#34;. Possibly affected by <code>lc_columns</code>.</p>

<dt><a name='map_arrays'></a><a name="map_arrays($column_number)"
><code>map_arrays($column_number)</code></a></dt>

<dd>
<p>Constructs a hash of array references keyed by the values in the chosen column, and returns a list of interleaved keys and values, or (in scalar context), a reference to a hash.</p>

<dt><a name='map_hashes'></a><a name="map_hashes($column_name)"
><code>map_hashes($column_name)</code></a></dt>

<dd>
<p>Constructs a hash of hash references keyed by the values in the chosen column, and returns a list of interleaved keys and values, or (in scalar context), a reference to a hash. Affected by <code>lc_columns</code>.</p>

<dt><a name="map"
><code>map</code></a></dt>

<dd>
<p>Constructs a simple hash, using the two columns as key/value pairs. Should only be used with queries that return two columns. Returns a list of interleaved keys and values, or (in scalar context), a reference to a hash.</p>

<dt><a name='xto'></a><a name="xto(%attr)"
><code>xto(%attr)</code></a></dt>

<dd>
<p>Returns a DBIx::XHTML_Table object, passing the constructor a reference to <code>%attr</code>.</p>

<p>Requires Jeffrey Hayes Anderson&#39;s DBIx::XHTML_Table, which is available from CPAN.</p>

<p>In general, using the <code>html</code> method (described below) is much easier. <code>xto</code> is available in case you need more flexibility. Not affected by <code>lc_columns</code>.</p>

<dt><a name='html'></a><a name="html(%attr)"
><code>html(%attr)</code></a></dt>

<dd>
<p>Returns an (X)HTML formatted table, using the DBIx::XHTML_Table module. Passes a reference to <code>%attr</code> to both the constructor and the <code>output</code> method.</p>

<p>Requires Jeffrey Hayes Anderson&#39;s DBIx::XHTML_Table, which is available from CPAN.</p>

<p>This method is a shortcut method. That means that</p>

<pre class="sh_perl">    $result-&#62;html

    $result-&#62;html(
        tr =&#62; { bgcolor =&#62; [ &#39;silver&#39;, &#39;white&#39; ] },
        no_ucfirst =&#62; 1
    )</pre>

<p>do the same as:</p>

<pre class="sh_perl">    $result-&#62;xto-&#62;output

    $result-&#62;xto(
        tr =&#62; { bgcolor =&#62; [ &#39;silver&#39;, &#39;white&#39; ] }
    )-&#62;output(
        no_ucfirst =&#62; 1
    );</pre>

<dt><a name='text'></a><a name="text($type)"
><code>text($type)</code></a></dt>

<dd>
<p>Returns a string with a simple text representation of the data. <code>$type</code> can be any of: <code>neat</code>, <code>table</code>, <code>box</code>. It defaults to <code>table</code> if Text::Table is installed, to <code>neat</code> if it isn&#39;t.</p>

<p><code>table</code> and <code>box</code> require Anno Siegel&#39;s Text::Table, which is available from CPAN.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Object_construction"
>Object construction</a></h2>

<p>DBIx::Simple has basic support for returning results as objects. The actual construction method has to be provided by the chosen class, making this functionality rather advanced and perhaps unsuited for beginning programmers.</p>

<p>When the <code>object</code> or <code>objects</code> method is called on the result object returned by one of the query methods, two approaches are tried. In either case, pass the name of a class as the first argument. A prefix of a single colon can be used as an alias for <code>DBIx::Simple::Result::</code>, e.g. <code>&#34;:Example&#34;</code> is short for <code>&#34;DBIx::Simple::Result::Example&#34;</code>. When this shortcut is used, the corresponding module is loaded automatically.</p>

<p>The default class when no class is given, is <code>:RowObject</code>. It requires Jos Boumans&#39; Object::Accessor, which is available from CPAN.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Simple_object_construction"
>Simple object construction</a></h3>

<p>When <code>object</code> is given a class that provides a <code>new</code> method, but not a <code>new_from_dbix_simple</code> method, <code>new</code> is called with a list of interleaved column names and values, like a flattened hash, but ordered. <code>objects</code> causes <code>new</code> to be called multiple times, once for each remaining row.</p>

<p>Example:</p>

<pre class="sh_perl">    {
        package DBIx::Simple::Result::ObjectExample;
        sub new {
            my ($class, %args) = @_;
            return bless $class, \%args;
        }

        sub foo { ... }
        sub bar { ... }
    }


    $db-&#62;query(&#39;SELECT foo, bar FROM baz&#39;)-&#62;object(&#39;:ObjectExample&#39;)-&#62;foo();</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Advanced_object_construction"
>Advanced object construction</a></h3>

<p>When <code>object</code> or <code>objects</code> is given a class that provides a <code>new_from_dbix_simple</code> method, any <code>new</code> is ignored, and <code>new_from_dbix_simple</code> is called with a list of the DBIx::Simple::Result object and any arguments passed to <code>object</code> or <code>objects</code>.</p>

<p><code>new_from_dbix_simple</code> is called in scalar context for <code>object</code>, and in list context for <code>objects</code>. In scalar context, it should fetch <i>exactly one row</i>, and in list context, it should fetch <i>all remaining rows</i>.</p>

<p>Example:</p>

<pre class="sh_perl">    {
        package DBIx::Simple::Result::ObjectExample;
        sub new_from_dbix_simple {
            my ($class, $result, @args) = @_;
            return map { bless $class, $_ } $result-&#62;hashes if wantarray;
            return       bless $class, $result-&#62;hash;
        }

        sub foo { ... }
        sub bar { ... }
    }

    $db-&#62;query(&#39;SELECT foo, bar FROM baz&#39;)-&#62;object(&#39;:ObjectExample&#39;)-&#62;foo();</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MISCELLANEOUS"
>MISCELLANEOUS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The mapping methods do not check whether the keys are unique. Rows that are fetched later overwrite earlier ones.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE"
>LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Pick your favourite OSI approved license :)</p>

<p><a href="http://www.opensource.org/licenses/alphabetical" class="podlinkurl"
>http://www.opensource.org/licenses/alphabetical</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Juerd Waalboer &#60;#####@juerd.nl&#62; &#60;<a href="http://juerd.nl/" class="podlinkurl"
>http://juerd.nl/</a>&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?perl" class="podlinkpod"
>perl</a>, <a href="/perldoc?perlref" class="podlinkpod"
>perlref</a></p>

<p><a href="/perldoc?DBI" class="podlinkpod"
>DBI</a>, <a href="/~juerd/DBIx-Simple-1.35/lib/DBIx/Simple/Examples.pod" class="podlinkpod"
>DBIx::Simple::Examples</a>, <a href="/perldoc?SQL%3A%3AAbstract" class="podlinkpod"
>SQL::Abstract</a>, <a href="/perldoc?DBIx%3A%3AXHTML_Table" class="podlinkpod"
>DBIx::XHTML_Table</a></p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78156 Uploads, 24704 Distributions
105967 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Tue Apr 24 18:27:19 2012 GMT (0.0855569839477539) @cpansearch1 -->
 </body>
</html>
