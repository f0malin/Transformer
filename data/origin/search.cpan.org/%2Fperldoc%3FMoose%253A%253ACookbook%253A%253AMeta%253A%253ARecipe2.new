<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Moose::Cookbook::Meta::Recipe2 - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Moose",3]);
    _gaq.push(["_setCustomVar",5,"Release","Moose-2.0403",3]);
    _gaq.push(["_setCustomVar",4,"Document","Moose::Cookbook::Meta::Recipe2",3]);
    _gaq.push(["_setCustomVar",1,"Author","DOY",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Moose::Cookbook::Meta::Recipe2">permalink</a></div>
  <a href="/~doy/">Jesse Luehrs</a> &gt;
  <a href="/~doy/Moose-2.0403/">Moose-2.0403</a> &gt;
  Moose::Cookbook::Meta::Recipe2
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/88766de7a058697d3d0335b8d384fd2a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DO/DOY/Moose-2.0403.tar.gz">Moose-2.0403.tar.gz</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DOY/Moose-2.0403/lib/Moose/Cookbook/Meta/Recipe2.pod">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 13</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 27</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=Moose">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
<span class="noprint">
  <a href="/src/DOY/Moose-2.0403/lib/Moose/Cookbook/Meta/Recipe2.pod">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#SUMMARY'>SUMMARY</a>
  <li class='indexItem indexItem1'><a href='#META-ATTRIBUTE_OBJECTS'>META-ATTRIBUTE OBJECTS</a>
  <li class='indexItem indexItem1'><a href='#RECIPE_REVIEW'>RECIPE REVIEW</a>
  <li class='indexItem indexItem1'><a href='#CONCLUSION'>CONCLUSION</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose::Cookbook::Meta::Recipe2 - A meta-attribute,
attributes with labels</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>version 2.0403</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  package MyApp::Meta::Attribute::Labeled;
  use Moose;
  extends &#39;Moose::Meta::Attribute&#39;;

  has label =&#62; (
      is        =&#62; &#39;rw&#39;,
      isa       =&#62; &#39;Str&#39;,
      predicate =&#62; &#39;has_label&#39;,
  );

  package Moose::Meta::Attribute::Custom::Labeled;
  sub register_implementation {&#39;MyApp::Meta::Attribute::Labeled&#39;}

  package MyApp::Website;
  use Moose;

  has url =&#62; (
      metaclass =&#62; &#39;Labeled&#39;,
      is        =&#62; &#39;rw&#39;,
      isa       =&#62; &#39;Str&#39;,
      label     =&#62; &#34;The site&#39;s URL&#34;,
  );

  has name =&#62; (
      is  =&#62; &#39;rw&#39;,
      isa =&#62; &#39;Str&#39;,
  );

  sub dump {
      my $self = shift;

      my $meta = $self-&#62;meta;

      my $dump = &#39;&#39;;

      for my $attribute ( map { $meta-&#62;get_attribute($_) }
          sort $meta-&#62;get_attribute_list ) {

          if (   $attribute-&#62;isa(&#39;MyApp::Meta::Attribute::Labeled&#39;)
              &#38;&#38; $attribute-&#62;has_label ) {
              $dump .= $attribute-&#62;label;
          }
          else {
              $dump .= $attribute-&#62;name;
          }

          my $reader = $attribute-&#62;get_read_method;
          $dump .= &#34;: &#34; . $self-&#62;$reader . &#34;\n&#34;;
      }

      return $dump;
  }

  package main;

  my $app = MyApp::Website-&#62;new( url =&#62; &#34;<a href="http://google.com" class="podlinkurl"
>http://google.com</a>&#34;, name =&#62; &#34;Google&#34; );</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUMMARY"
>SUMMARY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>In this recipe, we begin to delve into the wonder of meta-programming. Some readers may scoff and claim that this is the arena of only the most twisted Moose developers. Absolutely not! Any sufficiently twisted developer can benefit greatly from going more meta.</p>

<p>Our goal is to allow each attribute to have a human-readable &#34;label&#34; attached to it. Such labels would be used when showing data to an end user. In this recipe we label the <code>url</code> attribute with &#34;The site&#39;s URL&#34; and create a simple method showing how to use that label.</p>

<p>The proper, modern way to extend attributes (using a role instead of a subclass) is described in <a href="/~doy/Moose-2.0403/lib/Moose/Cookbook/Meta/Recipe3.pod" class="podlinkpod"
>Moose::Cookbook::Meta::Recipe3</a>, but that recipe assumes you&#39;ve read and at least tried to understand this one.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="META-ATTRIBUTE_OBJECTS"
>META-ATTRIBUTE OBJECTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>All the attributes of a Moose-based object are actually objects themselves. These objects have methods and attributes. Let&#39;s look at a concrete example.</p>

<pre class="sh_perl">  has &#39;x&#39; =&#62; ( isa =&#62; &#39;Int&#39;, is =&#62; &#39;ro&#39; );
  has &#39;y&#39; =&#62; ( isa =&#62; &#39;Int&#39;, is =&#62; &#39;rw&#39; );</pre>

<p>Internally, the metaclass for <code>Point</code> has two <a href="/~doy/Moose-2.0403/lib/Moose/Meta/Attribute.pm" class="podlinkpod"
>Moose::Meta::Attribute</a>. There are several methods for getting meta-attributes out of a metaclass, one of which is <code>get_attribute_list</code>. This method is called on the metaclass object.</p>

<p>The <code>get_attribute_list</code> method returns a list of attribute names. You can then use <code>get_attribute</code> to get the <a href="/~doy/Moose-2.0403/lib/Moose/Meta/Attribute.pm" class="podlinkpod"
>Moose::Meta::Attribute</a> object itself.</p>

<p>Once you have this meta-attribute object, you can call methods on it like this:</p>

<pre class="sh_perl">  print $point-&#62;meta-&#62;get_attribute(&#39;x&#39;)-&#62;type_constraint;
     =&#62; Int</pre>

<p>To add a label to our attributes there are two steps. First, we need a new attribute metaclass that can store a label for an attribute. Second, we need to create attributes that use that attribute metaclass.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="RECIPE_REVIEW"
>RECIPE REVIEW <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>We start by creating a new attribute metaclass.</p>

<pre class="sh_perl">  package MyApp::Meta::Attribute::Labeled;
  use Moose;
  extends &#39;Moose::Meta::Attribute&#39;;</pre>

<p>We can subclass a Moose metaclass in the same way that we subclass anything else.</p>

<pre class="sh_perl">  has label =&#62; (
      is        =&#62; &#39;rw&#39;,
      isa       =&#62; &#39;Str&#39;,
      predicate =&#62; &#39;has_label&#39;,
  );</pre>

<p>Again, this is standard Moose code.</p>

<p>Then we need to register our metaclass with Moose:</p>

<pre class="sh_perl">  package Moose::Meta::Attribute::Custom::Labeled;
  sub register_implementation { &#39;MyApp::Meta::Attribute::Labeled&#39; }</pre>

<p>This is a bit of magic that lets us use a short name, &#34;Labeled&#34;, when referring to our new metaclass.</p>

<p>That was the whole attribute metaclass.</p>

<p>Now we start using it.</p>

<pre class="sh_perl">  package MyApp::Website;
  use Moose;
  use MyApp::Meta::Attribute::Labeled;</pre>

<p>We have to load the metaclass to use it, just like any Perl class.</p>

<p>Finally, we use it for an attribute:</p>

<pre class="sh_perl">  has url =&#62; (
      metaclass =&#62; &#39;Labeled&#39;,
      is        =&#62; &#39;rw&#39;,
      isa       =&#62; &#39;Str&#39;,
      label     =&#62; &#34;The site&#39;s URL&#34;,
  );</pre>

<p>This looks like a normal attribute declaration, except for two things, the <code>metaclass</code> and <code>label</code> parameters. The <code>metaclass</code> parameter tells Moose we want to use a custom metaclass for this (one) attribute. The <code>label</code> parameter will be stored in the meta-attribute object.</p>

<p>The reason that we can pass the name <code>Labeled</code>, instead of <code>MyApp::Meta::Attribute::Labeled</code>, is because of the <code>register_implementation</code> code we touched on previously.</p>

<p>When you pass a metaclass to <code>has</code>, it will take the name you provide and prefix it with <code>Moose::Meta::Attribute::Custom::</code>. Then it calls <code>register_implementation</code> in the package. In this case, that means Moose ends up calling <code>Moose::Meta::Attribute::Custom::Labeled::register_implementation</code>.</p>

<p>If this function exists, it should return the <i>real</i> metaclass package name. This is exactly what our code does, returning <code>MyApp::Meta::Attribute::Labeled</code>. This is a little convoluted, and if you don&#39;t like it, you can always use the fully-qualified name.</p>

<p>We can access this meta-attribute and its label like this:</p>

<pre class="sh_perl">  $website-&#62;meta-&#62;get_attribute(&#39;url&#39;)-&#62;label()

  MyApp::Website-&#62;meta-&#62;get_attribute(&#39;url&#39;)-&#62;label()</pre>

<p>We also have a regular attribute, <code>name</code>:</p>

<pre class="sh_perl">  has name =&#62; (
      is  =&#62; &#39;rw&#39;,
      isa =&#62; &#39;Str&#39;,
  );</pre>

<p>This is a regular Moose attribute, because we have not specified a new metaclass.</p>

<p>Finally, we have a <code>dump</code> method, which creates a human-readable representation of a <code>MyApp::Website</code> object. It will use an attribute&#39;s label if it has one.</p>

<pre class="sh_perl">  sub dump {
      my $self = shift;

      my $meta = $self-&#62;meta;

      my $dump = &#39;&#39;;

      for my $attribute ( map { $meta-&#62;get_attribute($_) }
          sort $meta-&#62;get_attribute_list ) {

          if (   $attribute-&#62;isa(&#39;MyApp::Meta::Attribute::Labeled&#39;)
              &#38;&#38; $attribute-&#62;has_label ) {
              $dump .= $attribute-&#62;label;
          }</pre>

<p>This is a bit of defensive code. We cannot depend on every meta-attribute having a label. Even if we define one for every attribute in our class, a subclass may neglect to do so. Or a superclass could add an attribute without a label.</p>

<p>We also check that the attribute has a label using the predicate we defined. We could instead make the label <code>required</code>. If we have a label, we use it, otherwise we use the attribute name:</p>

<pre class="sh_perl">          else {
              $dump .= $attribute-&#62;name;
          }

          my $reader = $attribute-&#62;get_read_method;
          $dump .= &#34;: &#34; . $self-&#62;$reader . &#34;\n&#34;;
      }

      return $dump;
  }</pre>

<p>The <code>get_read_method</code> is part of the <a href="/~doy/Moose-2.0403/lib/Moose/Meta/Attribute.pm" class="podlinkpod"
>Moose::Meta::Attribute</a> API. It returns the name of a method that can read the attribute&#39;s value, <i>when called on the real object</i> (don&#39;t call this on the meta-attribute).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONCLUSION"
>CONCLUSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You might wonder why you&#39;d bother with all this. You could just hardcode &#34;The Site&#39;s URL&#34; in the <code>dump</code> method. But we want to avoid repetition. If you need the label once, you may need it elsewhere, maybe in the <code>as_form</code> method you write next.</p>

<p>Associating a label with an attribute just makes sense! The label is a piece of information <i>about</i> the attribute.</p>

<p>It&#39;s also important to realize that this was a trivial example. You can make much more powerful metaclasses that <i>do</i> things, as opposed to just storing some more information. For example, you could implement a metaclass that expires attributes after a certain amount of time:</p>

<pre class="sh_perl">   has site_cache =&#62; (
       metaclass     =&#62; &#39;TimedExpiry&#39;,
       expires_after =&#62; { hours =&#62; 1 },
       refresh_with  =&#62; sub { get( $_[0]-&#62;url ) },
       isa           =&#62; &#39;Str&#39;,
       is            =&#62; &#39;ro&#39;,
   );</pre>

<p>The sky&#39;s the limit!</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose is maintained by the Moose Cabal, along with the help of many contributors. See <a href="/~doy/Moose-2.0403/lib/Moose.pm#CABAL" class="podlinkpod"
>&#34;CABAL&#34; in Moose</a> and <a href="/~doy/Moose-2.0403/lib/Moose.pm#CONTRIBUTORS" class="podlinkpod"
>&#34;CONTRIBUTORS&#34; in Moose</a> for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This software is copyright (c) 2012 by Infinity Interactive, Inc..</p>

<p>This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78191 Uploads, 24710 Distributions
106007 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Document']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Document']);
    });
  });
</script>
<!-- Wed Apr 25 11:34:42 2012 GMT (0.167918920516968) @cpansearch1 -->
 </body>
</html>
