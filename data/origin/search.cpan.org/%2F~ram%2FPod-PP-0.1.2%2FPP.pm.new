<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Pod::PP - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Pod-PP",3]);
    _gaq.push(["_setCustomVar",5,"Release","Pod-PP-0.1.2",3]);
    _gaq.push(["_setCustomVar",3,"Module","Pod::PP",3]);
    _gaq.push(["_setCustomVar",1,"Author","RAM",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Pod::PP">permalink</a></div>
  <a href="/~ram/">Raphael Manfredi</a> &gt;
  <a href="/~ram/Pod-PP-0.1.2/">Pod-PP-0.1.2</a> &gt;
  Pod::PP
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/e0d6745069f7ff54197f019c1ca677da?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/R/RA/RAM/Pod-PP-0.1.2.tar.gz">Pod-PP-0.1.2.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Pod%3A%3APP;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~RAM/Pod-PP-0.1.2/PP.pm">Annotate this POD
</a></p>

<div style="float:right">
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Pod-PP">View/Report Bugs</a><br/>

</div>
</div>
  Module Version:  0.102 &nbsp;
<span class="noprint">
  <a href="/src/RAM/Pod-PP-0.1.2/PP.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#DIRECTIVES'>DIRECTIVES</a>
  <li class='indexItem indexItem1'><a href='#DIAGNOSTICS'>DIAGNOSTICS</a>
  <li class='indexItem indexItem1'><a href='#INTERFACE'>INTERFACE</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Pod::PP - POD pre-processor</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> # normally used via the podpp script

 require Pod::PP;

 my $pp = Pod::PP-&#62;make(
     -incpath   =&#62; [&#39;h&#39;, &#39;h/sys&#39;],
     -symbols   =&#62; { DIR =&#62; &#34;/var/www&#34;, TMPDIR =&#62; &#34;/var/tmp&#34; },
 );

 $pp-&#62;parse_from_filehandle(\*STDIN);
 $pp-&#62;parse_from_file(&#34;file.pp&#34;);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <code>Pod::PP</code> module is a POD pre-processor built on top of <code>Pod::Parser</code>. The helper script <b>podpp</b> provides a pre-processor command for POD, whose interface is very much like <b>cpp</b>, the C pre-processor. However, unlike C, the <code>Pod::PP</code> processing is not normally invoked when parsing POD.</p>

<p>If you wish to automate the pre-processing for every POD file, you need to write <code>.pp</code> files (say) instead of <code>.pod</code> files, and add the following <b>make</b> rules to your <code>Makefile</code>:</p>

<pre class="sh_perl">    PODPP = podpp
    PP_FLAGS =

    .SUFFIXES: .pp .pod

    .pp.pod:
        $(PODPP) $(PP_FLAGS) $&#60; &#62;$*.pod</pre>

<p>Those teach <b>make</b> how to derive a <code>.pod</code> from a <code>.pp</code> file using the <b>podpp</b> pre-processor.</p>

<p><code>Pod::PP</code> uses the <code>P&#60;&#62;</code> notation to request symbol expansion. Since it processes text, you need to tag the symbols to be expanded explicitely. Expansion is done recursively, until there is no more expansion possible.</p>

<p>If you are familiar with <b>cpp</b>, most directives will be easy to grasp. For instance, using the <code>==</code> prefix to make shorter commands:</p>

<pre class="sh_perl">    ==pp include &#34;common.pp&#34;

    ==pp define DIR     /var/www
    ==pp define TMP     /tmp

    ==pp ifdef SOME_COMMON_SYMBOL
    ==pp define FOO     common foo
    ==pp else
    ==pp define FOO     P&#60;DIR&#62;
    ==pp endif</pre>

<p>The <code>==</code> notation is not standard POD, but it is understood by <code>Pod::Parser</code> and very convenient when it comes to writing things like the above block, because there&#39;s no need to separate commands by blank lines. Since the code is going to be processed by <b>podpp</b> anyway, there&#39;s no problem, and <b>podpp</b> will always emit legitimate POD. That is, given the following:</p>

<pre class="sh_perl">    ==head1 NAME
    Some data</pre>

<p>it will re-emit:</p>

<pre class="sh_perl">    =head1 NAME

    Some data</pre>

<p>thereby normalizing the output. It is guaranteed that after a <b>podpp</b> pass, the output is regular POD. If you make errors in writing the <code>Pod::PP</code> directives, you will not get the expected output, but it will be regular POD.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DIRECTIVES"
>DIRECTIVES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The pre-processing directives can be given in two forms, depending on whether you wish to process your POD files containing <code>Pod::PP</code> directives with the usual POD tools before or after having run <b>podpp</b> on them:</p>

<ul>
<li>By using the <code>=for pp</code> form before all commands, you ensure that regular POD tools will simply ignore those. This might result in incorrect processing though, if you depend on the definition of some symbols to produce different outputs (i.e. you would need a <b>podpp</b> pass anyway).</li>

<li>By using the <code>=pp</code> form before all commands, you require that <b>podpp</b> be run on your file to produce regular POD that can be then processed via regular POD tools.</li>
</ul>

<p>Here are the supported directives, in alphabetical order:</p>

<dl>
<dt><a name='pp'></a><a name="=pp_comment_comment"
><code>=pp comment</code> <i>comment</i></a></dt>

<dd>
<p>A comment. Will be stripped out upon reading.</p>

<p>When <code>Pod::PP</code> encounters an error whilst processing a directive, e.g. an include with a file not found, it will leave a comment in the output, albeit using the <code>=for pp</code> form so that it is properly ignored by standard POD tools.</p>

<dt><a name='pp'></a><a name="=pp_define_symbol_[value]"
><code>=pp define</code> <i>symbol</i> [<i>value</i>]</a></dt>

<dd>
<p>Defines <i>symbol</i> to be <i>value</i>. If there&#39;s no <i>value</i>, the symbol is simply defined to an empty value. There may be an arbitrary amount of spaces or tabs between <i>symbol</i> and <i>value</i>.</p>

<p>A symbol can be tested for defined-ness via <code>=pp ifdef</code>, used in expressions via <code>=pp if</code>, or expanded via <code>P&#60;<i>sym</i>&#62;</code>.</p>

<dt><a name='pp'></a><a name="=pp_elif_expr"
><code>=pp elif</code> <i>expr</i></a></dt>

<dd>
<p>Alternate condition. There may be as many <code>=pp elif</code> as needed, but they must precede any <code>=pp else</code> directive, and follow a leading <code>=pp if</code> test. See <code>=pp if</code> below for the <i>expr</i> definiton.</p>

<p>Naturally, within an <code>=pp if</code> test, the expression <i>expr</i> is evaluated only if the <code>if</code> condition was false.</p>

<dt><a name='pp'></a><a name="=pp_else"
><code>=pp else</code></a></dt>

<dd>
<p>The <i>else</i> clause of the <code>=pp if</code> or <code>=pp ifdef</code> test.</p>

<dt><a name='pp'></a><a name="=pp_endif"
><code>=pp endif</code></a></dt>

<dd>
<p>Closes the testing sequence opened by last <code>=pp if</code> or <code>=pp ifdef</code>.</p>

<dt><a name='pp'></a><a name="=pp_if_expr"
><code>=pp if</code> <i>expr</i></a></dt>

<dd>
<p>Starts a conditional text sequence. If <i>expr</i> evaluates to <i>true</i>, the remaining up to the matching <code>=pp elif</code> or <code>=pp else</code> or <code>=pp endif</code> is included in the output, otherwise it is stripped.</p>

<p>Within an expression, you may include any symbol, verbatim, and form any legal Perl expression. For instance:</p>

<pre class="sh_perl">    ==pp define X 4
    ==pp define LIMIT 100

    =pp if X*X &#60; LIMIT

    Include this portion if X*X &#60; LIMIT

    =pp else

    Include this portion if X*X &#62;= LIMIT

    =pp endif</pre>

<p>would yield, when processed by <b>podpp</b>:</p>

<pre class="sh_perl">    Include this portion if X*X &#60; LIMIT</pre>

<p>since the condition is true with the current symbol values.</p>

<p>You may also use the <code>defined()</code> operator in tests, as in <b>cpp</b>:</p>

<pre class="sh_perl">    =pp if defined(X) || !defined(LIMIT)</pre>

<p>A bad expression will result in an error message, but you must know that your expressions are converted into Perl, and then are evaluated within a <code>Safe</code> compartment: the errors will be reported relative to the translated Perl expressions, not to your original expressions.</p>

<dt><a name='pp'></a><a name="=pp_ifdef_symbol"
><code>=pp ifdef</code> <i>symbol</i></a></dt>

<dd>
<p>Tests whether a symbol is defined. This is equivalent to:</p>

<pre class="sh_perl">    =pp if defined(symbol)</pre>

<p>only it is shorter to say.</p>

<dt><a name='pp'></a><a name="=pp_ifndef_symbol"
><code>=pp ifndef</code> <i>symbol</i></a></dt>

<dd>
<p>Tests whether a symbol is not defined. This is equivalent to:</p>

<pre class="sh_perl">    =pp if !defined(symbol)</pre>

<p>but it is shorter to say.</p>

<dt><a name='pp'></a><a name="=pp_image_[&#60;center&#62;]_&#34;path&#34;"
><code>=pp image</code> [<i>&#60;center&#62;</i>] &#34;<i>path</i>&#34;</a></dt>

<dd>
<p>This directive is not a regular pre-processing directive in that it is highly specialized. It&#39;s there because I historically implemented <code>Pod::PP</code> to pre-process that command in my PODs.</p>

<p>It&#39;s a high-level macro, that is hardwired because <code>Pod::PP</code> is not rich enough yet to be able to support the definition of that kind of macro.</p>

<p>It is expanded into two POD directives: one for HTML, one for text. An example will be better than a lengthy description:</p>

<pre class="sh_perl">    =pp image &#60;center&#62; &#34;logo.png&#34;</pre>

<p>will expand into:</p>

<pre class="sh_perl">    =for html &#60;P ALIGN=&#34;center&#34;&#62;&#60;IMG SRC=&#34;logo.png&#34; ALT=&#34;logo&#34;&#62;&#60;/P&#62;

    =begin text

     [image &#34;logo.png&#34; not rendered]

    =end text</pre>

<p>The <i>&#60;center&#62;</i> tag is optional, and you may use <i>&#60;right&#62;</i> instead to right-justify your image in HTML.</p>

<dt><a name='pp'></a><a name="=pp_include_&#34;file&#34;"
><code>=pp include</code> &#34;<i>file</i>&#34;</a></dt>

<dd>
<p>Includes <code>&#34;file&#34;</code> at the present location, through <code>Pod::PP</code>. That is, the included file may itself use <code>Pod::PP</code> directives.</p>

<p>The algorithm to find the <i>file</i> is as follows:</p>

<p>1. The file is first looked for from the location of the current file being processed.</p>

<p>2. If not found there, the search path is traversed. You may supply a search path with the <b>-I</b> flag in <b>podpp</b> or via the <code>-incpath</code> of the creation routine for <code>Pod::PP</code>.</p>

<p>3. If still not found, an error is reported.</p>

<dt><a name='pp'></a><a name="=pp_require_&#34;file&#34;"
><code>=pp require</code> &#34;<i>file</i>&#34;</a></dt>

<dd>
<p>Same as an <code>=pp include</code> directive, but the <code>&#34;file&#34;</code> is included only <b>once</b>. The absolute path of the file is used to determine whether it has already been included. For example, assuming we&#39;re in file <code>dir/foo</code>, and that <code>dir/foo/file.pp</code> exists, the following:</p>

<pre class="sh_perl">    ==pp require &#34;file.pp&#34;
    ==pp require &#34;../dir/file.pp&#34;</pre>

<p>will result in only <b>one</b> inclusion of <code>&#34;file.pp&#34;</code>, since both <i>require</i> statements end up requesting the inclusion of the same path.</p>

<dt><a name='pp'></a><a name="=pp_undef_symbol"
><code>=pp undef</code> <i>symbol</i></a></dt>

<dd>
<p>Undefines the target <i>symbol</i>.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DIAGNOSTICS"
>DIAGNOSTICS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>Pod::PP</code> uses <code>Log::Agent</code> to emit its diagnostics. The <b>podpp</b> script leaves <code>Log::Agent</code> in its default configuration, thereby redirecting all the errors to STDERR. If you use the <code>Pod::PP</code> interface directly in a script, you can look at configuring alternatives for the logs in <a href="/perldoc?Log%3A%3AAgent" class="podlinkpod"
>Log::Agent</a>.</p>

<p>Whenever possible, <code>Pod::PP</code> leaves a trail in the output marking the error. For instance, feeding the following to <b>podpp</b>:</p>

<pre class="sh_perl">    =pp include &#34;no-such-file&#34;</pre>

<p>would print the following error to STDERR:</p>

<pre class="sh_perl">    podpp: error in Pod::PP directive &#39;include&#39; at &#34;example&#34;, line 17:
        cannot find &#34;no-such-file&#34;</pre>

<p>and leave the following trail:</p>

<pre class="sh_perl">    =for pp comment (at &#34;example&#34;, line 17):
        Following &#34;=pp&#34; directive failed: cannot find &#34;no-such-file&#34;
        =pp include &#34;no-such-file&#34;</pre>

<p>which will be ignored by all POD tools.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INTERFACE"
>INTERFACE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You will normally don&#39;t care, since you will be mostly interfacing with <code>Pod::PP</code> via the <b>podpp</b> script. This section is therefore only useful for people wishing to use <code>Pod::PP</code> from within a program.</p>

<p>Since <code>Pod::PP</code> inherits from <code>Pod::Parser</code>, it conforms to its interface, in particular for the <code>parse_from_filehandle()</code> and <code>parse_from_file()</code> routines. See <a href="/perldoc?Pod%3A%3AParser" class="podlinkpod"
>Pod::Parser</a> for more information.</p>

<p>The creation routine <code>make()</code> takes the following mandatory arguments:</p>

<dl>
<dt><a name='incpath'></a><a name="-incpath_=&#62;_array_ref"
><code>-incpath</code> =&#62; <i>array_ref</i></a></dt>

<dd>
<p>The additional include search path (<code>&#34;.&#34;</code> is always part of the search path, and always the first thing looked at). The <i>array_ref</i> provides a list of directories to look. For instance:</p>

<pre class="sh_perl">    -incpath    =&#62; [&#34;h&#34;, &#34;/home/ram/usr/podpp&#34;]</pre>

<p>would add the two directories, in the order given.</p>

<dt><a name='symbols'></a><a name="-symbols_=&#62;_hash_ref"
><code>-symbols</code> =&#62; <i>hash_ref</i></a></dt>

<dd>
<p>Provides the intial set of defined symbols. Each key from the <i>hash_ref</i> is a symbol for the pre-processor:</p>

<pre class="sh_perl">    -symbols    =&#62; {
        DIR     =&#62; &#34;/var/tmp&#34;
        TMP     =&#62; &#34;/tmp&#34;
    }</pre>

<p>Given the above, the following input:</p>

<pre class="sh_perl">    dir is &#34;P&#60;DIR&#62;&#34; and tmp is &#34;P&#60;TMP&#62;&#34;</pre>

<p>would become after processing:</p>

<pre class="sh_perl">    dir is &#34;/var/tmp&#34; and tmp is &#34;/tmp&#34;</pre>

<p>as expected.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <code>=pp image</code> directive is a hack. It should not be implemented at this level, but it was convenient to do so.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Raphael Manfredi <em>&#60;Raphael_Manfredi@pobox.com&#62;</em></p>

<p>This software is currently unmaintained. Please look at:</p>

<pre class="sh_perl"> <a href="http://www.unmaintained-free-software.org/" class="podlinkurl"
>http://www.unmaintained-free-software.org/</a></pre>

<p>if you wish to take over maintenance. I would appreciate being notified, so that I can transfer the PAUSE (CPAN) ownership to you.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?Pod%3A%3AParser" class="podlinkpod"
>Pod::Parser</a>(3).</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78275 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 01:55:22 2012 GMT (0.30176305770874) @cpansearch1 -->
 </body>
</html>
