<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Storable - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Storable",3]);
    _gaq.push(["_setCustomVar",5,"Release","Storable-2.30",3]);
    _gaq.push(["_setCustomVar",3,"Module","Storable",3]);
    _gaq.push(["_setCustomVar",1,"Author","AMS",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Storable">permalink</a></div>
  <a href="/~ams/">Abhijit Menon-Sen</a> &gt;
  <a href="/~ams/Storable-2.30/">Storable-2.30</a> &gt;
  Storable
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/23ab8a4d094492e55ba8f8b82acb6cae?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/A/AM/AMS/Storable-2.30.tar.gz">Storable-2.30.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Storable;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~AMS/Storable-2.30/Storable.pm">Annotate this POD
</a></p>

<div style="float:right">
<a href="http://rt.perl.org/perlbug/">View/Report Bugs</a><br/>

</div>
</div>
  Module Version:  2.30 &nbsp;
<span class="noprint">
  <a href="/src/AMS/Storable-2.30/Storable.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#MEMORY_STORE'>MEMORY STORE</a>
  <li class='indexItem indexItem1'><a href='#ADVISORY_LOCKING'>ADVISORY LOCKING</a>
  <li class='indexItem indexItem1'><a href='#SPEED'>SPEED</a>
  <li class='indexItem indexItem1'><a href='#CANONICAL_REPRESENTATION'>CANONICAL REPRESENTATION</a>
  <li class='indexItem indexItem1'><a href='#CODE_REFERENCES'>CODE REFERENCES</a>
  <li class='indexItem indexItem1'><a href='#FORWARD_COMPATIBILITY'>FORWARD COMPATIBILITY</a>
  <li class='indexItem indexItem1'><a href='#ERROR_REPORTING'>ERROR REPORTING</a>
  <li class='indexItem indexItem1'><a href='#WIZARDS_ONLY'>WIZARDS ONLY</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Hooks'>Hooks</a>
    <li class='indexItem indexItem2'><a href='#Predicates'>Predicates</a>
    <li class='indexItem indexItem2'><a href='#Recursion'>Recursion</a>
    <li class='indexItem indexItem2'><a href='#Deep_Cloning'>Deep Cloning</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Storable_magic'>Storable magic</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <li class='indexItem indexItem1'><a href='#WARNING'>WARNING</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#64_bit_data_in_perl_5.6.0_and_5.6.1'>64 bit data in perl 5.6.0 and 5.6.1</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CREDITS'>CREDITS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Storable - persistence for Perl data structures</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> use Storable;
 store \%table, &#39;file&#39;;
 $hashref = retrieve(&#39;file&#39;);

 use Storable qw(nstore store_fd nstore_fd freeze thaw dclone);

 # Network order
 nstore \%table, &#39;file&#39;;
 $hashref = retrieve(&#39;file&#39;);   # There is NO nretrieve()

 # Storing to and retrieving from an already opened file
 store_fd \@array, \*STDOUT;
 nstore_fd \%table, \*STDOUT;
 $aryref = fd_retrieve(\*SOCKET);
 $hashref = fd_retrieve(\*SOCKET);

 # Serializing to memory
 $serialized = freeze \%table;
 %table_clone = %{ thaw($serialized) };

 # Deep (recursive) cloning
 $cloneref = dclone($ref);

 # Advisory locking
 use Storable qw(lock_store lock_nstore lock_retrieve)
 lock_store \%table, &#39;file&#39;;
 lock_nstore \%table, &#39;file&#39;;
 $hashref = lock_retrieve(&#39;file&#39;);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Storable package brings persistence to your Perl data structures containing SCALAR, ARRAY, HASH or REF objects, i.e. anything that can be conveniently stored to disk and retrieved at a later time.</p>

<p>It can be used in the regular procedural way by calling <code>store</code> with a reference to the object to be stored, along with the file name where the image should be written.</p>

<p>The routine returns <code>undef</code> for I/O problems or other internal error, a true value otherwise. Serious errors are propagated as a <code>die</code> exception.</p>

<p>To retrieve data stored to disk, use <code>retrieve</code> with a file name. The objects stored into that file are recreated into memory for you, and a <i>reference</i> to the root object is returned. In case an I/O error occurs while reading, <code>undef</code> is returned instead. Other serious errors are propagated via <code>die</code>.</p>

<p>Since storage is performed recursively, you might want to stuff references to objects that share a lot of common data into a single array or hash table, and then store that object. That way, when you retrieve back the whole thing, the objects will continue to share what they originally shared.</p>

<p>At the cost of a slight header overhead, you may store to an already opened file descriptor using the <code>store_fd</code> routine, and retrieve from a file via <code>fd_retrieve</code>. Those names aren&#39;t imported by default, so you will have to do that explicitly if you need those routines. The file descriptor you supply must be already opened, for read if you&#39;re going to retrieve and for write if you wish to store.</p>

<pre class="sh_perl">        store_fd(\%table, *STDOUT) || die &#34;can&#39;t store to stdout\n&#34;;
        $hashref = fd_retrieve(*STDIN);</pre>

<p>You can also store data in network order to allow easy sharing across multiple platforms, or when storing on a socket known to be remotely connected. The routines to call have an initial <code>n</code> prefix for <i>network</i>, as in <code>nstore</code> and <code>nstore_fd</code>. At retrieval time, your data will be correctly restored so you don&#39;t have to know whether you&#39;re restoring from native or network ordered data. Double values are stored stringified to ensure portability as well, at the slight risk of loosing some precision in the last decimals.</p>

<p>When using <code>fd_retrieve</code>, objects are retrieved in sequence, one object (i.e. one recursive tree) per associated <code>store_fd</code>.</p>

<p>If you&#39;re more from the object-oriented camp, you can inherit from Storable and directly store your objects by invoking <code>store</code> as a method. The fact that the root of the to-be-stored tree is a blessed reference (i.e. an object) is special-cased so that the retrieve does not provide a reference to that object but rather the blessed object reference itself. (Otherwise, you&#39;d get a reference to that blessed object).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MEMORY_STORE"
>MEMORY STORE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Storable engine can also store data into a Perl scalar instead, to later retrieve them. This is mainly used to freeze a complex structure in some safe compact memory place (where it can possibly be sent to another process via some IPC, since freezing the structure also serializes it in effect). Later on, and maybe somewhere else, you can thaw the Perl scalar out and recreate the original complex structure in memory.</p>

<p>Surprisingly, the routines to be called are named <code>freeze</code> and <code>thaw</code>. If you wish to send out the frozen scalar to another machine, use <code>nfreeze</code> instead to get a portable image.</p>

<p>Note that freezing an object structure and immediately thawing it actually achieves a deep cloning of that structure:</p>

<pre class="sh_perl">    dclone(.) = thaw(freeze(.))</pre>

<p>Storable provides you with a <code>dclone</code> interface which does not create that intermediary scalar but instead freezes the structure in some internal memory space and then immediately thaws it out.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ADVISORY_LOCKING"
>ADVISORY LOCKING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <code>lock_store</code> and <code>lock_nstore</code> routine are equivalent to <code>store</code> and <code>nstore</code>, except that they get an exclusive lock on the file before writing. Likewise, <code>lock_retrieve</code> does the same as <code>retrieve</code>, but also gets a shared lock on the file before reading.</p>

<p>As with any advisory locking scheme, the protection only works if you systematically use <code>lock_store</code> and <code>lock_retrieve</code>. If one side of your application uses <code>store</code> whilst the other uses <code>lock_retrieve</code>, you will get no protection at all.</p>

<p>The internal advisory locking is implemented using Perl&#39;s flock() routine. If your system does not support any form of flock(), or if you share your files across NFS, you might wish to use other forms of locking by using modules such as LockFile::Simple which lock a file using a filesystem entry, instead of locking the file descriptor.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SPEED"
>SPEED <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The heart of Storable is written in C for decent speed. Extra low-level optimizations have been made when manipulating perl internals, to sacrifice encapsulation for the benefit of greater speed.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CANONICAL_REPRESENTATION"
>CANONICAL REPRESENTATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Normally, Storable stores elements of hashes in the order they are stored internally by Perl, i.e. pseudo-randomly. If you set <code>$Storable::canonical</code> to some <code>TRUE</code> value, Storable will store hashes with the elements sorted by their key. This allows you to compare data structures by comparing their frozen representations (or even the compressed frozen representations), which can be useful for creating lookup tables for complicated queries.</p>

<p>Canonical order does not imply network order; those are two orthogonal settings.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CODE_REFERENCES"
>CODE REFERENCES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Since Storable version 2.05, CODE references may be serialized with the help of <a href="/perldoc?B%3A%3ADeparse" class="podlinkpod"
>B::Deparse</a>. To enable this feature, set <code>$Storable::Deparse</code> to a true value. To enable deserialization, <code>$Storable::Eval</code> should be set to a true value. Be aware that deserialization is done through <code>eval</code>, which is dangerous if the Storable file contains malicious data. You can set <code>$Storable::Eval</code> to a subroutine reference which would be used instead of <code>eval</code>. See below for an example using a <a href="/perldoc?Safe" class="podlinkpod"
>Safe</a> compartment for deserialization of CODE references.</p>

<p>If <code>$Storable::Deparse</code> and/or <code>$Storable::Eval</code> are set to false values, then the value of <code>$Storable::forgive_me</code> (see below) is respected while serializing and deserializing.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FORWARD_COMPATIBILITY"
>FORWARD COMPATIBILITY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This release of Storable can be used on a newer version of Perl to serialize data which is not supported by earlier Perls. By default, Storable will attempt to do the right thing, by <code>croak()</code>ing if it encounters data that it cannot deserialize. However, the defaults can be changed as follows:</p>

<dl>
<dt><a name='utf8'></a><a name="utf8_data"
>utf8 data</a></dt>

<dd>
<p>Perl 5.6 added support for Unicode characters with code points &#62; 255, and Perl 5.8 has full support for Unicode characters in hash keys. Perl internally encodes strings with these characters using utf8, and Storable serializes them as utf8. By default, if an older version of Perl encounters a utf8 value it cannot represent, it will <code>croak()</code>. To change this behaviour so that Storable deserializes utf8 encoded values as the string of bytes (effectively dropping the <i>is_utf8</i> flag) set <code>$Storable::drop_utf8</code> to some <code>TRUE</code> value. This is a form of data loss, because with <code>$drop_utf8</code> true, it becomes impossible to tell whether the original data was the Unicode string, or a series of bytes that happen to be valid utf8.</p>

<dt><a name='restricted'></a><a name="restricted_hashes"
>restricted hashes</a></dt>

<dd>
<p>Perl 5.8 adds support for restricted hashes, which have keys restricted to a given set, and can have values locked to be read only. By default, when Storable encounters a restricted hash on a perl that doesn&#39;t support them, it will deserialize it as a normal hash, silently discarding any placeholder keys and leaving the keys and all values unlocked. To make Storable <code>croak()</code> instead, set <code>$Storable::downgrade_restricted</code> to a <code>FALSE</code> value. To restore the default set it back to some <code>TRUE</code> value.</p>

<dt><a name='files'></a><a name="files_from_future_versions_of_Storable"
>files from future versions of Storable</a></dt>

<dd>
<p>Earlier versions of Storable would immediately croak if they encountered a file with a higher internal version number than the reading Storable knew about. Internal version numbers are increased each time new data types (such as restricted hashes) are added to the vocabulary of the file format. This meant that a newer Storable module had no way of writing a file readable by an older Storable, even if the writer didn&#39;t store newer data types.</p>

<p>This version of Storable will defer croaking until it encounters a data type in the file that it does not recognize. This means that it will continue to read files generated by newer Storable modules which are careful in what they write out, making it easier to upgrade Storable modules in a mixed environment.</p>

<p>The old behaviour of immediate croaking can be re-instated by setting <code>$Storable::accept_future_minor</code> to some <code>FALSE</code> value.</p>
</dd>
</dl>

<p>All these variables have no effect on a newer Perl which supports the relevant feature.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ERROR_REPORTING"
>ERROR REPORTING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Storable uses the &#34;exception&#34; paradigm, in that it does not try to workaround failures: if something bad happens, an exception is generated from the caller&#39;s perspective (see <a href="/perldoc?Carp" class="podlinkpod"
>Carp</a> and <code>croak()</code>). Use eval {} to trap those exceptions.</p>

<p>When Storable croaks, it tries to report the error via the <code>logcroak()</code> routine from the <code>Log::Agent</code> package, if it is available.</p>

<p>Normal errors are reported by having store() or retrieve() return <code>undef</code>. Such errors are usually I/O errors (or truncated stream errors at retrieval).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WIZARDS_ONLY"
>WIZARDS ONLY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Hooks"
>Hooks</a></h2>

<p>Any class may define hooks that will be called during the serialization and deserialization process on objects that are instances of that class. Those hooks can redefine the way serialization is performed (and therefore, how the symmetrical deserialization should be conducted).</p>

<p>Since we said earlier:</p>

<pre class="sh_perl">    dclone(.) = thaw(freeze(.))</pre>

<p>everything we say about hooks should also hold for deep cloning. However, hooks get to know whether the operation is a mere serialization, or a cloning.</p>

<p>Therefore, when serializing hooks are involved,</p>

<pre class="sh_perl">    dclone(.) &#60;&#62; thaw(freeze(.))</pre>

<p>Well, you could keep them in sync, but there&#39;s no guarantee it will always hold on classes somebody else wrote. Besides, there is little to gain in doing so: a serializing hook could keep only one attribute of an object, which is probably not what should happen during a deep cloning of that same object.</p>

<p>Here is the hooking interface:</p>

<dl>
<dt><a name='STORABLE_freeze'></a><a name="STORABLE_freeze_obj,_cloning"
><code>STORABLE_freeze</code> <i>obj</i>, <i>cloning</i></a></dt>

<dd>
<p>The serializing hook, called on the object during serialization. It can be inherited, or defined in the class itself, like any other method.</p>

<p>Arguments: <i>obj</i> is the object to serialize, <i>cloning</i> is a flag indicating whether we&#39;re in a dclone() or a regular serialization via store() or freeze().</p>

<p>Returned value: A LIST <code>($serialized, $ref1, $ref2, ...)</code> where $serialized is the serialized form to be used, and the optional $ref1, $ref2, etc... are extra references that you wish to let the Storable engine serialize.</p>

<p>At deserialization time, you will be given back the same LIST, but all the extra references will be pointing into the deserialized structure.</p>

<p>The <b>first time</b> the hook is hit in a serialization flow, you may have it return an empty list. That will signal the Storable engine to further discard that hook for this class and to therefore revert to the default serialization of the underlying Perl data. The hook will again be normally processed in the next serialization.</p>

<p>Unless you know better, serializing hook should always say:</p>

<pre class="sh_perl">    sub STORABLE_freeze {
        my ($self, $cloning) = @_;
        return if $cloning;         # Regular default serialization
        ....
    }</pre>

<p>in order to keep reasonable dclone() semantics.</p>

<dt><a name='STORABLE_thaw'></a><a name="STORABLE_thaw_obj,_cloning,_serialized,_..."
><code>STORABLE_thaw</code> <i>obj</i>, <i>cloning</i>, <i>serialized</i>, ...</a></dt>

<dd>
<p>The deserializing hook called on the object during deserialization. But wait: if we&#39;re deserializing, there&#39;s no object yet... right?</p>

<p>Wrong: the Storable engine creates an empty one for you. If you know Eiffel, you can view <code>STORABLE_thaw</code> as an alternate creation routine.</p>

<p>This means the hook can be inherited like any other method, and that <i>obj</i> is your blessed reference for this particular instance.</p>

<p>The other arguments should look familiar if you know <code>STORABLE_freeze</code>: <i>cloning</i> is true when we&#39;re part of a deep clone operation, <i>serialized</i> is the serialized string you returned to the engine in <code>STORABLE_freeze</code>, and there may be an optional list of references, in the same order you gave them at serialization time, pointing to the deserialized objects (which have been processed courtesy of the Storable engine).</p>

<p>When the Storable engine does not find any <code>STORABLE_thaw</code> hook routine, it tries to load the class by requiring the package dynamically (using the blessed package name), and then re-attempts the lookup. If at that time the hook cannot be located, the engine croaks. Note that this mechanism will fail if you define several classes in the same file, but <a href="/perldoc?perlmod" class="podlinkpod"
>perlmod</a> warned you.</p>

<p>It is up to you to use this information to populate <i>obj</i> the way you want.</p>

<p>Returned value: none.</p>

<dt><a name='STORABLE_attach'></a><a name="STORABLE_attach_class,_cloning,_serialized"
><code>STORABLE_attach</code> <i>class</i>, <i>cloning</i>, <i>serialized</i></a></dt>

<dd>
<p>While <code>STORABLE_freeze</code> and <code>STORABLE_thaw</code> are useful for classes where each instance is independent, this mechanism has difficulty (or is incompatible) with objects that exist as common process-level or system-level resources, such as singleton objects, database pools, caches or memoized objects.</p>

<p>The alternative <code>STORABLE_attach</code> method provides a solution for these shared objects. Instead of <code>STORABLE_freeze</code> --&#62; <code>STORABLE_thaw</code>, you implement <code>STORABLE_freeze</code> --&#62; <code>STORABLE_attach</code> instead.</p>

<p>Arguments: <i>class</i> is the class we are attaching to, <i>cloning</i> is a flag indicating whether we&#39;re in a dclone() or a regular de-serialization via thaw(), and <i>serialized</i> is the stored string for the resource object.</p>

<p>Because these resource objects are considered to be owned by the entire process/system, and not the &#34;property&#34; of whatever is being serialized, no references underneath the object should be included in the serialized string. Thus, in any class that implements <code>STORABLE_attach</code>, the <code>STORABLE_freeze</code> method cannot return any references, and <code>Storable</code> will throw an error if <code>STORABLE_freeze</code> tries to return references.</p>

<p>All information required to &#34;attach&#34; back to the shared resource object <b>must</b> be contained <b>only</b> in the <code>STORABLE_freeze</code> return string. Otherwise, <code>STORABLE_freeze</code> behaves as normal for <code>STORABLE_attach</code> classes.</p>

<p>Because <code>STORABLE_attach</code> is passed the class (rather than an object), it also returns the object directly, rather than modifying the passed object.</p>

<p>Returned value: object of type <code>class</code></p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Predicates"
>Predicates</a></h2>

<p>Predicates are not exportable. They must be called by explicitly prefixing them with the Storable package name.</p>

<dl>
<dt><a name='Storable'></a><a name="Storable::last_op_in_netorder"
><code>Storable::last_op_in_netorder</code></a></dt>

<dd>
<p>The <code>Storable::last_op_in_netorder()</code> predicate will tell you whether network order was used in the last store or retrieve operation. If you don&#39;t know how to use this, just forget about it.</p>

<dt><a name='Storable'></a><a name="Storable::is_storing"
><code>Storable::is_storing</code></a></dt>

<dd>
<p>Returns true if within a store operation (via STORABLE_freeze hook).</p>

<dt><a name='Storable'></a><a name="Storable::is_retrieving"
><code>Storable::is_retrieving</code></a></dt>

<dd>
<p>Returns true if within a retrieve operation (via STORABLE_thaw hook).</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Recursion"
>Recursion</a></h2>

<p>With hooks comes the ability to recurse back to the Storable engine. Indeed, hooks are regular Perl code, and Storable is convenient when it comes to serializing and deserializing things, so why not use it to handle the serialization string?</p>

<p>There are a few things you need to know, however:</p>

<ul>
<li>You can create endless loops if the things you serialize via freeze() (for instance) point back to the object we&#39;re trying to serialize in the hook.</li>

<li>Shared references among objects will not stay shared: if we&#39;re serializing the list of object [A, C] where both object A and C refer to the SAME object B, and if there is a serializing hook in A that says freeze(B), then when deserializing, we&#39;ll get [A&#39;, C&#39;] where A&#39; refers to B&#39;, but C&#39; refers to D, a deep clone of B&#39;. The topology was not preserved.</li>
</ul>

<p>That&#39;s why <code>STORABLE_freeze</code> lets you provide a list of references to serialize. The engine guarantees that those will be serialized in the same context as the other objects, and therefore that shared objects will stay shared.</p>

<p>In the above [A, C] example, the <code>STORABLE_freeze</code> hook could return:</p>

<pre class="sh_perl">        (&#34;something&#34;, $self-&#62;{B})</pre>

<p>and the B part would be serialized by the engine. In <code>STORABLE_thaw</code>, you would get back the reference to the B&#39; object, deserialized for you.</p>

<p>Therefore, recursion should normally be avoided, but is nonetheless supported.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Deep_Cloning"
>Deep Cloning</a></h2>

<p>There is a Clone module available on CPAN which implements deep cloning natively, i.e. without freezing to memory and thawing the result. It is aimed to replace Storable&#39;s dclone() some day. However, it does not currently support Storable hooks to redefine the way deep cloning is performed.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Storable_magic"
>Storable magic <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Yes, there&#39;s a lot of that :-) But more precisely, in UNIX systems there&#39;s a utility called <code>file</code>, which recognizes data files based on their contents (usually their first few bytes). For this to work, a certain file called <em>magic</em> needs to taught about the <i>signature</i> of the data. Where that configuration file lives depends on the UNIX flavour; often it&#39;s something like <em>/usr/share/misc/magic</em> or <em>/etc/magic</em>. Your system administrator needs to do the updating of the <em>magic</em> file. The necessary signature information is output to STDOUT by invoking Storable::show_file_magic(). Note that the GNU implementation of the <code>file</code> utility, version 3.38 or later, is expected to contain support for recognising Storable files out-of-the-box, in addition to other kinds of Perl files.</p>

<p>You can also use the following functions to extract the file header information from Storable images:</p>

<dl>
<dt><a name='info'></a><a name="$info_=_Storable::file_magic(_$filename_)"
>$info = Storable::file_magic( $filename )</a></dt>

<dd>
<p>If the given file is a Storable image return a hash describing it. If the file is readable, but not a Storable image return <code>undef</code>. If the file does not exist or is unreadable then croak.</p>

<p>The hash returned has the following elements:</p>

<dl>
<dt><a name="version"
><code>version</code></a></dt>

<dd>
<p>This returns the file format version. It is a string like &#34;2.7&#34;.</p>

<p>Note that this version number is not the same as the version number of the Storable module itself. For instance Storable v0.7 create files in format v2.0 and Storable v2.15 create files in format v2.7. The file format version number only increment when additional features that would confuse older versions of the module are added.</p>

<p>Files older than v2.0 will have the one of the version numbers &#34;-1&#34;, &#34;0&#34; or &#34;1&#34;. No minor number was used at that time.</p>

<dt><a name="version_nv"
><code>version_nv</code></a></dt>

<dd>
<p>This returns the file format version as number. It is a string like &#34;2.007&#34;. This value is suitable for numeric comparisons.</p>

<p>The constant function <code>Storable::BIN_VERSION_NV</code> returns a comparable number that represent the highest file version number that this version of Storable fully support (but see discussion of <code>$Storable::accept_future_minor</code> above). The constant <code>Storable::BIN_WRITE_VERSION_NV</code> function returns what file version is written and might be less than <code>Storable::BIN_VERSION_NV</code> in some configurations.</p>

<dt><a name='major'></a><a name="major,_minor"
><code>major</code>, <code>minor</code></a></dt>

<dd>
<p>This also returns the file format version. If the version is &#34;2.7&#34; then major would be 2 and minor would be 7. The minor element is missing for when major is less than 2.</p>

<dt><a name="hdrsize"
><code>hdrsize</code></a></dt>

<dd>
<p>The is the number of bytes that the Storable header occupies.</p>

<dt><a name="netorder"
><code>netorder</code></a></dt>

<dd>
<p>This is TRUE if the image store data in network order. This means that it was created with nstore() or similar.</p>

<dt><a name="byteorder"
><code>byteorder</code></a></dt>

<dd>
<p>This is only present when <code>netorder</code> is FALSE. It is the $Config{byteorder} string of the perl that created this image. It is a string like &#34;1234&#34; (32 bit little endian) or &#34;87654321&#34; (64 bit big endian). This must match the current perl for the image to be readable by Storable.</p>

<dt><a name='intsize'></a><a name="intsize,_longsize,_ptrsize,_nvsize"
><code>intsize</code>, <code>longsize</code>, <code>ptrsize</code>, <code>nvsize</code></a></dt>

<dd>
<p>These are only present when <code>netorder</code> is FALSE. These are the sizes of various C datatypes of the perl that created this image. These must match the current perl for the image to be readable by Storable.</p>

<p>The <code>nvsize</code> element is only present for file format v2.2 and higher.</p>

<dt><a name="file"
><code>file</code></a></dt>

<dd>
<p>The name of the file.</p>
</dd>
</dl>

<dt><a name='info'></a><a name="$info_=_Storable::read_magic(_$buffer_)"
>$info = Storable::read_magic( $buffer )</a></dt>

<dd>
<dt><a name='info'></a><a name="$info_=_Storable::read_magic(_$buffer,_$must_be_file_)"
>$info = Storable::read_magic( $buffer, $must_be_file )</a></dt>

<dd>
<p>The $buffer should be a Storable image or the first few bytes of it. If $buffer starts with a Storable header, then a hash describing the image is returned, otherwise <code>undef</code> is returned.</p>

<p>The hash has the same structure as the one returned by Storable::file_magic(). The <code>file</code> element is true if the image is a file image.</p>

<p>If the $must_be_file argument is provided and is TRUE, then return <code>undef</code> unless the image looks like it belongs to a file dump.</p>

<p>The maximum size of a Storable header is currently 21 bytes. If the provided $buffer is only the first part of a Storable image it should at least be this long to ensure that read_magic() will recognize it as such.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Here are some code samples showing a possible usage of Storable:</p>

<pre class="sh_perl">        use Storable qw(store retrieve freeze thaw dclone);

        %color = (&#39;Blue&#39; =&#62; 0.1, &#39;Red&#39; =&#62; 0.8, &#39;Black&#39; =&#62; 0, &#39;White&#39; =&#62; 1);

        store(\%color, &#39;mycolors&#39;) or die &#34;Can&#39;t store %a in mycolors!\n&#34;;

        $colref = retrieve(&#39;mycolors&#39;);
        die &#34;Unable to retrieve from mycolors!\n&#34; unless defined $colref;
        printf &#34;Blue is still %lf\n&#34;, $colref-&#62;{&#39;Blue&#39;};

        $colref2 = dclone(\%color);

        $str = freeze(\%color);
        printf &#34;Serialization of %%color is %d bytes long.\n&#34;, length($str);
        $colref3 = thaw($str);</pre>

<p>which prints (on my machine):</p>

<pre class="sh_perl">        Blue is still 0.100000
        Serialization of %color is 102 bytes long.</pre>

<p>Serialization of CODE references and deserialization in a safe compartment:</p>

<pre class="sh_perl">        use Storable qw(freeze thaw);
        use Safe;
        use strict;
        my $safe = new Safe;
        # because of opcodes used in &#34;use strict&#34;:
        $safe-&#62;permit(qw(:default require));
        local $Storable::Deparse = 1;
        local $Storable::Eval = sub { $safe-&#62;reval($_[0]) };
        my $serialized = freeze(sub { 42 });
        my $code = thaw($serialized);
        $code-&#62;() == 42;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WARNING"
>WARNING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you&#39;re using references as keys within your hash tables, you&#39;re bound to be disappointed when retrieving your data. Indeed, Perl stringifies references used as hash table keys. If you later wish to access the items via another reference stringification (i.e. using the same reference that was used for the key originally to record the value into the hash table), it will work because both references stringify to the same string.</p>

<p>It won&#39;t work across a sequence of <code>store</code> and <code>retrieve</code> operations, however, because the addresses in the retrieved objects, which are part of the stringified references, will probably differ from the original addresses. The topology of your structure is preserved, but not hidden semantics like those.</p>

<p>On platforms where it matters, be sure to call <code>binmode()</code> on the descriptors that you pass to Storable functions.</p>

<p>Storing data canonically that contains large hashes can be significantly slower than storing the same data normally, as temporary arrays to hold the keys for each hash have to be allocated, populated, sorted and freed. Some tests have shown a halving of the speed of storing -- the exact penalty will depend on the complexity of your data. There is no slowdown on retrieval.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can&#39;t store GLOB, FORMLINE, REGEXP, etc.... If you can define semantics for those operations, feel free to enhance Storable so that it can deal with them.</p>

<p>The store functions will <code>croak</code> if they run into such references unless you set <code>$Storable::forgive_me</code> to some <code>TRUE</code> value. In that case, the fatal message is turned in a warning and some meaningless string is stored instead.</p>

<p>Setting <code>$Storable::canonical</code> may not yield frozen strings that compare equal due to possible stringification of numbers. When the string version of a scalar exists, it is the form stored; therefore, if you happen to use your numbers as strings between two freezing operations on the same data structures, you will get different results.</p>

<p>When storing doubles in network order, their value is stored as text. However, you should also not expect non-numeric floating-point values such as infinity and &#34;not a number&#34; to pass successfully through a nstore()/retrieve() pair.</p>

<p>As Storable neither knows nor cares about character sets (although it does know that characters may be more than eight bits wide), any difference in the interpretation of character codes between a host and a target system is your problem. In particular, if host and target use different code points to represent the characters used in the text representation of floating-point numbers, you will not be able be able to exchange floating-point data, even with nstore().</p>

<p><code>Storable::drop_utf8</code> is a blunt tool. There is no facility either to return <b>all</b> strings as utf8 sequences, or to attempt to convert utf8 data back to 8 bit and <code>croak()</code> if the conversion fails.</p>

<p>Prior to Storable 2.01, no distinction was made between signed and unsigned integers on storing. By default Storable prefers to store a scalars string representation (if it has one) so this would only cause problems when storing large unsigned integers that had never been converted to string or floating point. In other words values that had been generated by integer operations such as logic ops and then not used in any string or arithmetic context before storing.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="64_bit_data_in_perl_5.6.0_and_5.6.1"
>64 bit data in perl 5.6.0 and 5.6.1</a></h2>

<p>This section only applies to you if you have existing data written out by Storable 2.02 or earlier on perl 5.6.0 or 5.6.1 on Unix or Linux which has been configured with 64 bit integer support (not the default) If you got a precompiled perl, rather than running Configure to build your own perl from source, then it almost certainly does not affect you, and you can stop reading now (unless you&#39;re curious). If you&#39;re using perl on Windows it does not affect you.</p>

<p>Storable writes a file header which contains the sizes of various C language types for the C compiler that built Storable (when not writing in network order), and will refuse to load files written by a Storable not on the same (or compatible) architecture. This check and a check on machine byteorder is needed because the size of various fields in the file are given by the sizes of the C language types, and so files written on different architectures are incompatible. This is done for increased speed. (When writing in network order, all fields are written out as standard lengths, which allows full interworking, but takes longer to read and write)</p>

<p>Perl 5.6.x introduced the ability to optional configure the perl interpreter to use C&#39;s <code>long long</code> type to allow scalars to store 64 bit integers on 32 bit systems. However, due to the way the Perl configuration system generated the C configuration files on non-Windows platforms, and the way Storable generates its header, nothing in the Storable file header reflected whether the perl writing was using 32 or 64 bit integers, despite the fact that Storable was storing some data differently in the file. Hence Storable running on perl with 64 bit integers will read the header from a file written by a 32 bit perl, not realise that the data is actually in a subtly incompatible format, and then go horribly wrong (possibly crashing) if it encountered a stored integer. This is a design failure.</p>

<p>Storable has now been changed to write out and read in a file header with information about the size of integers. It&#39;s impossible to detect whether an old file being read in was written with 32 or 64 bit integers (they have the same header) so it&#39;s impossible to automatically switch to a correct backwards compatibility mode. Hence this Storable defaults to the new, correct behaviour.</p>

<p>What this means is that if you have data written by Storable 1.x running on perl 5.6.0 or 5.6.1 configured with 64 bit integers on Unix or Linux then by default this Storable will refuse to read it, giving the error <i>Byte order is not compatible</i>. If you have such data then you you should set <code>$Storable::interwork_56_64bit</code> to a true value to make this Storable read and write files with the old header. You should also migrate your data, or any older perl you are communicating with, to this current version of Storable.</p>

<p>If you don&#39;t have data written with specific configuration of perl described above, then you do not and should not do anything. Don&#39;t set the flag - not only will Storable on an identically configured perl refuse to load them, but Storable a differently configured perl will load them believing them to be correct for it, and then may well fail or crash part way through reading them.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CREDITS"
>CREDITS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Thank you to (in chronological order):</p>

<pre class="sh_perl">        Jarkko Hietaniemi &#60;jhi@iki.fi&#62;
        Ulrich Pfeifer &#60;pfeifer@charly.informatik.uni-dortmund.de&#62;
        Benjamin A. Holzman &#60;bholzman@earthlink.net&#62;
        Andrew Ford &#60;A.Ford@ford-mason.co.uk&#62;
        Gisle Aas &#60;gisle@aas.no&#62;
        Jeff Gresham &#60;gresham_jeffrey@jpmorgan.com&#62;
        Murray Nesbitt &#60;murray@activestate.com&#62;
        Marc Lehmann &#60;pcg@opengroup.org&#62;
        Justin Banks &#60;justinb@wamnet.com&#62;
        Jarkko Hietaniemi &#60;jhi@iki.fi&#62; (AGAIN, as perl 5.7.0 Pumpkin!)
        Salvador Ortiz Garcia &#60;sog@msg.com.mx&#62;
        Dominic Dunlop &#60;domo@computer.org&#62;
        Erik Haugan &#60;erik@solbors.no&#62;
    Benjamin A. Holzman &#60;ben.holzman@grantstreet.com&#62;</pre>

<p>for their bug reports, suggestions and contributions.</p>

<p>Benjamin Holzman contributed the tied variable support, Andrew Ford contributed the canonical order for hashes, and Gisle Aas fixed a few misunderstandings of mine regarding the perl internals, and optimized the emission of &#34;tags&#34; in the output streams by simply counting the objects instead of tagging them (leading to a binary incompatibility for the Storable image starting at version 0.6--older images are, of course, still properly understood). Murray Nesbitt made Storable thread-safe. Marc Lehmann added overloading and references to tied items support. Benjamin Holzman added a performance improvement for overloaded classes; thanks to Grant Street Group for footing the bill.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Storable was written by Raphael Manfredi <em>&#60;Raphael_Manfredi@pobox.com&#62;</em> Maintenance is now done by the perl5-porters <em>&#60;perl5-porters@perl.org&#62;</em></p>

<p>Please e-mail us with problems, bug fixes, comments and complaints, although if you have compliments you should send them to Raphael. Please don&#39;t e-mail Raphael with problems, as he no longer works on Storable, and your message will be delayed while he forwards it to us.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?Clone" class="podlinkpod"
>Clone</a>.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78236 Uploads, 24724 Distributions
106030 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 01:32:48 2012 GMT (0.161000967025757) @cpansearch1 -->
 </body>
</html>
