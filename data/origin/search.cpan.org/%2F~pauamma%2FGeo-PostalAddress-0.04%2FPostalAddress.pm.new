<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Geo::PostalAddress - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Geo-PostalAddress",3]);
    _gaq.push(["_setCustomVar",5,"Release","Geo-PostalAddress-0.04",3]);
    _gaq.push(["_setCustomVar",3,"Module","Geo::PostalAddress",3]);
    _gaq.push(["_setCustomVar",1,"Author","PAUAMMA",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Geo::PostalAddress">permalink</a></div>
  <a href="/~pauamma/">Pau Amma</a> &gt;
  <a href="/~pauamma/Geo-PostalAddress-0.04/">Geo-PostalAddress-0.04</a> &gt;
  Geo::PostalAddress
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/f699fe67898cfa433719552fd25ab5b5?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/P/PA/PAUAMMA/Geo-PostalAddress-0.04.tar.gz">Geo-PostalAddress-0.04.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Geo%3A%3APostalAddress;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~PAUAMMA/Geo-PostalAddress-0.04/PostalAddress.pm">Annotate this POD
</a></p>

<div style="float:right">
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Geo-PostalAddress">View/Report Bugs</a><br/>

</div>
</div>
  Module Version:  0.04 &nbsp;
<span class="noprint">
  <a href="/src/PAUAMMA/Geo-PostalAddress-0.04/PostalAddress.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#new()'>new()</a>
    <li class='indexItem indexItem2'><a href='#format'>format</a>
    <li class='indexItem indexItem2'><a href='#display'>display</a>
    <li class='indexItem indexItem2'><a href='#storage'>storage</a>
    <li class='indexItem indexItem2'><a href='#label'>label</a>
    <li class='indexItem indexItem2'><a href='#option'>option</a>
    <li class='indexItem indexItem2'><a href='#normalize'>normalize</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#INTERNALS'>INTERNALS</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#HISTORY'>HISTORY</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#CONTRIBUTORS'>CONTRIBUTORS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR_AND_LICENSE'>AUTHOR AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Geo::PostalAddress - Country-specific postal address parsing/formatting</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module converts postal (snail mail) addresses between an unstructured country-neutral format (an array of character strings) and a country-specific format that&#39;s hopefully meaningful by postal authorities,
courier/delivery services,
residents,
...
of that country for postal address entry.
It should handle most countries out of the box with only minor or technical divergences from approved bulk-mailing formats; if needed,
country-specific code can be added to make it fully conformant to those formats.</p>

<p>The intended audience for this module is anyone needing to handle most addresses in a recognizable country-specific format,
without going into the full generality and complexity that UPU standards would appear to require.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Geo::PostalAddress;

  my $AU_parser = Geo::PostalAddress-&#62;new(&#39;AU&#39;);
  my $format = $AU_parser-&#62;format();
  # $format now contains:
  # [[&#39;Addr1&#39;, 40], [&#39;Addr2&#39;, 40], [&#39;Addr3&#39;, 40], [&#39;Addr4&#39;, 40], 3,
  #  [&#39;City&#39;, 40],
  #  [&#39;State&#39;, {NSW =&#62; &#34;New South Wales&#34;, TAS =&#62; &#34;Tasmania&#34;,
  #             QLD =&#62; &#34;Queensland&#34;, SA =&#62; &#34;South Australia&#34;,
  #             WA  =&#62; &#34;Western Australia&#34;, VIC =&#62; &#34;Victoria&#34;,
  #             ACT =&#62; &#34;Australian Capital Territory&#34;,
  #             NT  =&#62; &#34;Northern Territory&#34;}], [&#39;Postcode&#39;, 4, qr/^\d\d\d\d$/]]
  # 40 in [&#39;Addr1&#39;, 40] is the suggested displayed field width (not the maximum
  # length). 3 means that the next 3 fields should/could be on the same row.
  # [&#39;State&#39;, {...}] means an enumerated list is used for this field, with keys
  # being the stored values and values being the labels used for display or
  # selection.
  my $display = $AU_parser-&#62;display([&#34;4360 DUKES RD&#34;, &#34;KALGOORLIE WA 6430&#34;]);
  # $display now contains:
  # {Addr1 =&#62; &#34;4360 DUKES RD&#34;, City =&#62; &#34;KALGOORLIE&#34;,
  #  State =&#62; &#34;WA&#34;, Postcode =&#62; &#34;6430&#34;}

  my $US_parser = Geo::PostalAddress-&#62;new(&#39;US&#39;);
  my $address = {Addr1 =&#62; &#34;123 MAGNOLIA ST&#34;, City =&#62; &#34;HEMPSTEAD&#34;,
                 State =&#62; &#34;NY&#34;, ZIP =&#62; &#34;11550&#173;1234&#34;};
  my $result = $US_parser-&#62;storage($address);
  unless (ref $result) { carp &#34;Bad postal address: $result.\n&#34;; }

  my $AU_to_US_address_label = $US_parser-&#62;label(&#34;AU&#34;, &#34;MR JOHN DOE&#34;, $result);
  # What to print on an address label or on an envelope, if mailing from
  # Australia to the United States.</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="new()"
>new()</a></h2>

<p><code>Geo::PostalAddress-&#62;new($country)</code> returns undef, or a blessed reference to a parser suitable for handling the most common postal address formats for that country. Depending on the country, this reference may be blessed into Geo::PostalAddress or into a country-specific subclass.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="format"
>format</a></h2>

<p><code>$parser-&#62;format()</code> returns a reference to an array describing the (display/input) fields that make a postal address, and gives some hints about on-screen layout. Each element of the array can be an integer n &#62; 0, meaning the next n fields should be on the same line if window/screen width allows it, or a reference to an array describing a field. Each field description contains the field name and either a maximum length for a text field or a hash of {stored =&#62; display} values for an enumerated field. An optional regex can also be specified. If present, it should be compatible with both perl and javascript, so it can be used in both client-side and server-side programs or modules.</p>

<p>An example for Australia may be:</p>

<pre class="sh_perl">  [[&#34;Addr1&#34;, 40], [&#34;Addr2&#34;, 40], [&#34;Addr3&#34;, 40], [&#34;Addr4&#34;, 40], 3, [&#34;City&#34;, 40],
   [&#34;State&#34;, {NSW =&#62; &#34;New South Wales&#34;, TAS =&#62; &#34;Tasmania&#34;, QLD =&#62; &#34;Queensland&#34;,
              SA =&#62; &#34;South Australia&#34;, WA =&#62; &#34;Western Australia&#34;,
              VIC =&#62; &#34;Victoria&#34;, ACT =&#62; &#34;Australian Capital Territory&#34;,
              NT =&#62; &#34;Northern Territory&#34;}], [&#34;Postcode&#34;, 4, qr/^\d\d\d\d$/]]</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="display"
>display</a></h2>

<p><code>$parser-&#62;display($stored)</code> converts the postal address in @$stored to a format suitable for data input and returns a reference to a hash. The keys of the hash appear as fieldnames in the return value of <code>$parser-&#62;format()</code>.</p>

<p>If @$stored doesn&#39;t contain an address in the country $parser is an instance of, weird results are nearly certain.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="storage"
>storage</a></h2>

<p><code>$parser-&#62;storage($display)</code> makes country-dependent checks against the postal address in %$display. If it passes all the checks, <code>$parser-&#62;storage($display)</code> converts it to a format suitable for storage and returns a reference to an array. Otherwise, <code>$parser-&#62;storage($display)</code> returns a string representing an error message.</p>

<p>If %$display doesn&#39;t contain an address in the country $parser is an instance of, weird results are nearly certain.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="label"
>label</a></h2>

<p><code>$parser-&#62;label($origin_country, $recipient, $address)</code> returns a reference to an array containing an address label suitable for correspondance from a sender in $origin_country (2-letter ISO 3166 code) to $recipient (can be a string or an array reference, eg [&#34;Aby&#39;s Auto Repair&#34;, &#34;Kell Dewclaw&#34;]) at $address (as returned from <code>$parser-&#62;storage()</code>) in the country for $parser.</p>

<p>The default version just tacks on the name of the destination country, if not the same as the origin country.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="option"
>option</a></h2>

<p><code>$parser-&#62;option($name [ , $value] )</code> returns the setting of option $name for parser $parser, after changing it to $value if specified.</p>

<p>Available options and meaningful values for each option depend on the country $parser is for.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="normalize"
>normalize</a></h2>

<p><code>$parser-&#62;normalize($display)</code> normalizes the address in %$display by tweaking unambiguous but technically incorrect elements. It can also, if needed, check it for validity and return an error message. If no problems were found, it should return &#34;&#34;.</p>

<p>This method is called from within <code>storage()</code> and <code>display()</code>, and users of this module shouldn&#39;t normally need to call it directly. It exists so it can be overridden in subclasses. The default version does nothing.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INTERNALS"
>INTERNALS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Unless you plan to add a country or change the format information for a country, either directly in the base class (this) or as a subclass, you can safely skip this. (But if you&#39;re curious, feel free to read on.)</p>

<p>%per_country_data is a hash using the 2-letter ISO 3166-1 country code as the key. The value is a hash reference ($hr in the following description) with the following fields:</p>

<dl>
<dt><a name="_format"
>_format</a></dt>

<dd>
<p>This array reference is actually what <code>$parser-&#62;format()</code> returns.</p>

<p>Each element can be a number n &#62; 0, hinting that the next n fields should be on the same line, if the terminal or window width allows it, but otherwise ignored. Otherwise, it is an array reference describing a single field of the address, and has the following elements:</p>

<dl>
<dt><a name="0"
>0</a></dt>

<dd>
<p>The name of a field. For maximum compatibility with form description languages (including the forms part of HTML), this should match /^w+$/ in the C locale, but this module only requires that it not contain {}. The name should be present in <code>map { $_-&#62;{DisplayName} } @{$hr-&#62;{_s2d_map}}</code> (see _s2d_map below).</p>

<dt><a name="1"
>1</a></dt>

<dd>
<p>Can be a number &#62; 0, indicating the maximum length of a text field, or a hash of { stored =&#62; displayed } mappings, indicating an enumerated field. (Note that in the latter case, the order and layout of the values are left to the discretion of the user of this module.)</p>

<dt><a name="2"
>2</a></dt>

<dd>
<p>An optional validation regex can also be specified. If present, it should be compatible with both perl and javascript, so it can be used in both client-side and server-side programs or modules. Note that although most regexes would be anchored at both ends, this isn&#39;t required or enforced.</p>
</dd>
</dl>

<dt><a name="_s2d_map"
>_s2d_map</a></dt>

<dd>
<p>(storage-to-display map) This is an array of hash references, each describing how to retrieve the value of one display field from the stored unstructured text strings. Each element has the following fields:</p>

<dl>
<dt><a name="StoredRownum"
>StoredRownum</a></dt>

<dd>
<p>(stored row number) The row in the array of text lines where the field is. That number is used as a perl-style array index (&#62;=0 from the start, &#60; 0 back from the end), except that on any given unstructured address, if there aren&#39;t enough rows to map to both positive and negative indices without overlap, the positive indices that would actually map to a row overlapping the region starting with the negative index having the largest absolute value and going to the end of the array are considered to return &#34;&#34; instead of the actual row. In other words, using the array of lines qw(eenie meenie minie moe), indexes -2 0 1 2 3 would return &#34;minie&#34;, &#34;eenie&#34;, &#34;meenie&#34;, &#34;&#34;, &#34;&#34; (even though there is no -1 that would return &#34;moe&#34;).</p>

<dt><a name="StoredColnum"
>StoredColnum</a></dt>

<dd>
<p>(stored column number) The optional column in the line where the field (or regex input) starts, from 0 for the first column. If absent, the field (or regex input) is the whole line, even if StoredCollen is present. Note that StoredColnum can be negative (with the expected result for the second argument to <a href="/perldoc?perldoc#substr" class="podlinkpod"
>substr</a>), but if so, there&#39;s no special handling, unlike for StoredRownum.</p>

<dt><a name="StoredCollen"
>StoredCollen</a></dt>

<dd>
<p>(stored column length) The optional length of the field (or regex input). If absent or if StoredColnum is absent, the field (or regex input) extends to the end of the line. Note that StoredCollen can be negative (with the expected result for the third argument to <a href="/perldoc?perldoc#substr" class="podlinkpod"
>substr</a>), but if so, there&#39;s no special handling, unlike for StoredRownum.</p>

<dt><a name="StoredRegexnum"
>StoredRegexnum</a></dt>

<dd>
<p>(stored regex number) The optional index of a regular expression in <code>@{$hr-&#62;{_regexes}}</code> to be matched against the line (or the substring selected by StoredColnum and StoredCollen if applicable) to extract the field value from it. See the description of _regexes below for important restrictions on regex use.</p>

<dt><a name="StoredFieldnum"
>StoredFieldnum</a></dt>

<dd>
<p>(stored field number) The optional index into the array returned by the regex matching mentioned above of the data to be returned as the field value. Note that if StoredRegexnum is present, StoredFieldnum must be present too.</p>

<dt><a name="DisplayName"
>DisplayName</a></dt>

<dd>
<p>(display (field) name) The name of a field in <code>@{$hr-&#62;{_format}}</code>. This is also the key used in the record hash returned by <code>$parser-&#62;display()</code>.</p>
</dd>
</dl>

<p>Note that although StoredColnum, StoredCollen, StoredRegexnum, and StoredFieldnum are all optional, not all combinations make sense. Specifically:</p>

<ul>
<li>At least one of StoredColnum and StoredRegexnum must be present; if both are, StoredColnum (and StoredCollen if also present) are used before StoredRegexnum and StoredFieldnum.</li>

<li>If StoredCollen is present without StoredColnum, it is ignored.</li>

<li>If StoredRegexnum is present, StoredFieldnum must be present too; if StoredFieldnum is present without StoredRegexnum, it is ignored.</li>
</ul>

<dt><a name="_s2d_map"
>_s2d_map</a></dt>

<dd>
<p>(display-to-storage map) This is an array of hash references, each describing how to generate one line of the unstructured string array used for storage from the parsed fields used for display. Each element has the following fields:</p>

<dl>
<dt><a name="StoredTemplate"
>StoredTemplate</a></dt>

<dd>
<p>(stored template) A string containing boilerplate text and field references of the form ${foo} for field foo (using the field names in _format and _s2d_map). Currently, there is no way to escape $, {, or } if they&#39;re part of a sequence that could be interpreted as a field reference.</p>

<dt><a name="StoredRownum"
>StoredRownum</a></dt>

<dd>
<p>(stored row number) A number that indicates in which row of the unstructured storage string array this should go. This can be positive, 0, or negative, with the same intended meaning as for _s2dmap, except than while putting the array together, it grows in the middle as necessary to accomodate positive indexes.</p>
</dd>
</dl>

<dt><a name="_regexes"
>_regexes</a></dt>

<dd>
<p>(regular expressions) A reference to an array of strings representing regexes, in any form perl will accept (single-quoted, double-quoted, qr//, etc...) for use in parsing unstructured storage strings into structured display fields. Note that each regex is matched at most once in the course of a single invocation to <code>$hr-&#62;display()</code>, and its results cached for reuse. This is true even if a subsequent match would use another string than the first. In practice, this isn&#39;t a problem, as a given regex would normally be applied to one storage line only. However, if this isn&#39;t the case, that regex must be repeated, each line pointing (through StoredRegexnum) to its own copy.</p>
</dd>
</dl>

<p>%default_per_country_data is similar, but for countries with unspecified address formats. It&#39;s a single hash with the same structure as %$hr above.</p>

<p><code>Geo::PostalAddress-&#62;new()</code> initializes the object hash with those fields, and adds a _country_code field that holds the 2-letter code, in case we need to retrieve other info later.</p>

<p>Note that the above applies to the base class only. Subclasses may use other or different data, instead of or in addition to this.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Only 2-letter country codes are supported.</p>

<p>A knob to carp on some errors would be nice.</p>

<p>Objects returned by the new method can be actually blessed into a country-specific subclass. This makes it impossible to have other derived classes than the country-specific ones.</p>

<p>40 is used as the suggested length for all text fields. This is probably too long for some and too short for others.</p>

<p>Support for most countries ranges from non-existent to sketchy.</p>

<p>The method name &#34;display&#34; is arguably a poor choice.</p>

<p>Some messages should go through a translation table.</p>

<p>Data validation should probably be a method of its own.</p>

<p>This module doesn&#39;t yet deal well with countries that want the recipient name in another position than 1st line, or the country name in another position than last line. Examples of such countries are: Ukraine (wants country, city+postcode, street address, recipient name from top down instead of the more widespread bottom up), Turkmenistan (wants city+postcode, country, recipient name, street address, from top down), Grenada (wants a supranational line - West Indies - below the country name). The interface to do that exists, but is do-nothing until I figure out how to deal with address formats for use between countries with conflicting requirements.</p>

<p>This module doesn&#39;t deal well with countries where the address format depends on the script used, such as Saudi Arabia.</p>

<p>This module doesn&#39;t yet support entities with their own ISO 3166-1 code that use another country&#39;s address format, including the country name.</p>

<p>This module assumes &#34;no locale&#34;, and blissfully mixes character classes that could conceivably match in the locale with classes that have to match according to the Roman alphabet (eg, US ZIP codes and Canadian postal codes). This is probably nearly impossible to fix, as the relevant locale isn&#39;t well-defined anyway. (The locale for the machine running the application? The locale for the user? Or the locale for the country the address is in?)</p>

<p>This module assumes that the privileged order for entering address components is top-down, left-to right, according to the standard or most common address format. This may not be true of countries where the dominant language is written right-to-left.</p>

<p>This module doesn&#39;t use the PATDL (<em><a href="http://xml.coverpages.org/Lubenow-PATDL200204.pdf" class="podlinkurl"
>http://xml.coverpages.org/Lubenow-PATDL200204.pdf</a></em>) in the address parsing rules.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="HISTORY"
>HISTORY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?Locale%3A%3ACountry" class="podlinkpod"
>Locale::Country(3)</a></p>

<p><a href="/perldoc?Locale%3A%3ASubcountry" class="podlinkpod"
>Locale::Subcountry(3)</a></p>

<p><em><a href="http://www.upu.int/post_code/en/postal_addressing_systems_member_countries.shtml" class="podlinkurl"
>http://www.upu.int/post_code/en/postal_addressing_systems_member_countries.shtml</a></em></p>

<p><em><a href="http://www.bitboost.com/ref/international-address-formats.html" class="podlinkurl"
>http://www.bitboost.com/ref/international-address-formats.html</a></em></p>

<p><em><a href="http://www.indiapost.org/Netscape/Pincode.html" class="podlinkurl"
>http://www.indiapost.org/Netscape/Pincode.html</a></em></p>

<p><em><a href="http://www.sterlingdata.com/colombia.htm" class="podlinkurl"
>http://www.sterlingdata.com/colombia.htm</a></em></p>

<p><em><a href="http://mailservices.berkeley.edu/intladdr.pdf" class="podlinkurl"
>http://mailservices.berkeley.edu/intladdr.pdf</a></em> (previous version of the first URL, incorrect in spots, and to be used only if no other info is available)</p>

<p><em><a href="http://www.kevinandkell.com/" class="podlinkurl"
>http://www.kevinandkell.com/</a></em></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONTRIBUTORS"
>CONTRIBUTORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Ailbhe, DamienPS, LeiaCat, Ren&#233;e, and Martin DeMello clarified, corrected, or explained standards or usage for specific countries. See acknowledgements in comments throughout the source code.</p>

<p>Bill Holbrook draws (and holds the copyright to) comic strip Kevin and Kell, from which I got the names used in the description for <code>$parser-&#62;label()</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR_AND_LICENSE"
>AUTHOR AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2004, Michel Lavond&#232;s. All rights reserved.</p>

<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p>

<ul>
<li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li>

<li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</li>

<li>Neither the name of the Copyright holder nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission.</li>
</ul>

<p>This software is provided by the copyright holder and contributors &#34;as is&#34; and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. In no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substiture goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78087 Uploads, 24688 Distributions
105907 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sun Apr 22 21:56:45 2012 GMT (0.148426055908203) @cpansearch1 -->
 </body>
</html>
