<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>B - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","perl",3]);
    _gaq.push(["_setCustomVar",5,"Release","perl-5.14.2",3]);
    _gaq.push(["_setCustomVar",3,"Module","B",3]);
    _gaq.push(["_setCustomVar",1,"Author","FLORA",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?B">permalink</a></div>
  <a href="/~flora/">Florian Ragwitz</a> &gt;
  <a href="/~flora/perl-5.14.2/">perl-5.14.2</a> &gt;
  B
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/fd2bdaaefe41908133793d1ddf38f75d?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/F/FL/FLORA/perl-5.14.2.tar.gz">perl-5.14.2.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=B;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~FLORA/perl-5.14.2/ext/B/B.pm">Annotate this POD
</a></p>
     <p style="text-align:right"><a href="http://www.perl.org/">Website</a></p>

<div style="float:right">

</div>
</div>
  Module Version:  1.29 &nbsp;
<span class="noprint">
  <a href="/src/FLORA/perl-5.14.2/ext/B/B.pm">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~abigail/perl/ext/B/B.pm">perl-5.15.9</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#OVERVIEW'>OVERVIEW</a>
  <li class='indexItem indexItem1'><a href='#Utility_Functions'>Utility Functions</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Functions_Returning_B::SV,_B::AV,_B::HV,_and_B::CV_objects'>Functions Returning B::SV, B::AV, B::HV, and B::CV objects</a>
    <li class='indexItem indexItem2'><a href='#Functions_for_Examining_the_Symbol_Table'>Functions for Examining the Symbol Table</a>
    <li class='indexItem indexItem2'><a href='#Functions_Returning_B::OP_objects_or_for_walking_op_trees'>Functions Returning B::OP objects or for walking op trees</a>
    <li class='indexItem indexItem2'><a href='#Miscellaneous_Utility_Functions'>Miscellaneous Utility Functions</a>
    <li class='indexItem indexItem2'><a href='#Exported_utility_variables'>Exported utility variables</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#OVERVIEW_OF_CLASSES'>OVERVIEW OF CLASSES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#SV-RELATED_CLASSES'>SV-RELATED CLASSES</a>
    <li class='indexItem indexItem2'><a href='#B::SV_Methods'>B::SV Methods</a>
    <li class='indexItem indexItem2'><a href='#B::IV_Methods'>B::IV Methods</a>
    <li class='indexItem indexItem2'><a href='#B::NV_Methods'>B::NV Methods</a>
    <li class='indexItem indexItem2'><a href='#B::RV_Methods'>B::RV Methods</a>
    <li class='indexItem indexItem2'><a href='#B::PV_Methods'>B::PV Methods</a>
    <li class='indexItem indexItem2'><a href='#B::PVMG_Methods'>B::PVMG Methods</a>
    <li class='indexItem indexItem2'><a href='#B::MAGIC_Methods'>B::MAGIC Methods</a>
    <li class='indexItem indexItem2'><a href='#B::PVLV_Methods'>B::PVLV Methods</a>
    <li class='indexItem indexItem2'><a href='#B::BM_Methods'>B::BM Methods</a>
    <li class='indexItem indexItem2'><a href='#B::GV_Methods'>B::GV Methods</a>
    <li class='indexItem indexItem2'><a href='#B::IO_Methods'>B::IO Methods</a>
    <li class='indexItem indexItem2'><a href='#B::AV_Methods'>B::AV Methods</a>
    <li class='indexItem indexItem2'><a href='#B::CV_Methods'>B::CV Methods</a>
    <li class='indexItem indexItem2'><a href='#B::HV_Methods'>B::HV Methods</a>
    <li class='indexItem indexItem2'><a href='#OP-RELATED_CLASSES'>OP-RELATED CLASSES</a>
    <li class='indexItem indexItem2'><a href='#B::OP_Methods'>B::OP Methods</a>
    <li class='indexItem indexItem2'><a href='#B::UNOP_METHOD'>B::UNOP METHOD</a>
    <li class='indexItem indexItem2'><a href='#B::BINOP_METHOD'>B::BINOP METHOD</a>
    <li class='indexItem indexItem2'><a href='#B::LOGOP_METHOD'>B::LOGOP METHOD</a>
    <li class='indexItem indexItem2'><a href='#B::LISTOP_METHOD'>B::LISTOP METHOD</a>
    <li class='indexItem indexItem2'><a href='#B::PMOP_Methods'>B::PMOP Methods</a>
    <li class='indexItem indexItem2'><a href='#B::SVOP_METHOD'>B::SVOP METHOD</a>
    <li class='indexItem indexItem2'><a href='#B::PADOP_METHOD'>B::PADOP METHOD</a>
    <li class='indexItem indexItem2'><a href='#B::PVOP_METHOD'>B::PVOP METHOD</a>
    <li class='indexItem indexItem2'><a href='#B::LOOP_Methods'>B::LOOP Methods</a>
    <li class='indexItem indexItem2'><a href='#B::COP_Methods'>B::COP Methods</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>B - The Perl Compiler Backend</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">        use B;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <code>B</code> module supplies classes which allow a Perl program to delve into its own innards. It is the module used to implement the &#34;backends&#34; of the Perl compiler. Usage of the compiler does not require knowledge of this module: see the <em>O</em> module for the user-visible part. The <code>B</code> module is of use to those who want to write new compiler backends. This documentation assumes that the reader knows a fair amount about perl&#39;s internals including such things as SVs, OPs and the internal symbol table and syntax tree of a program.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OVERVIEW"
>OVERVIEW <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <code>B</code> module contains a set of utility functions for querying the current state of the Perl interpreter; typically these functions return objects from the B::SV and B::OP classes, or their derived classes. These classes in turn define methods for querying the resulting objects about their own internal state.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Utility_Functions"
>Utility Functions <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <code>B</code> module exports a variety of functions: some are simple utility functions, others provide a Perl program with a way to get an initial &#34;handle&#34; on an internal object.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Functions_Returning_B::SV,_B::AV,_B::HV,_and_B::CV_objects"
>Functions Returning <code>B::SV</code>, <code>B::AV</code>, <code>B::HV</code>, and <code>B::CV</code> objects</a></h2>

<p>For descriptions of the class hierarchy of these objects and the methods that can be called on them, see below, <a href="#OVERVIEW_OF_CLASSES" class="podlinkpod"
>&#34;OVERVIEW OF CLASSES&#34;</a> and <a href="#SV-RELATED_CLASSES" class="podlinkpod"
>&#34;SV-RELATED CLASSES&#34;</a>.</p>

<dl>
<dt><a name="sv_undef"
>sv_undef</a></dt>

<dd>
<p>Returns the SV object corresponding to the C variable <code>sv_undef</code>.</p>

<dt><a name="sv_yes"
>sv_yes</a></dt>

<dd>
<p>Returns the SV object corresponding to the C variable <code>sv_yes</code>.</p>

<dt><a name="sv_no"
>sv_no</a></dt>

<dd>
<p>Returns the SV object corresponding to the C variable <code>sv_no</code>.</p>

<dt><a name='svref_2object'></a><a name="svref_2object(SVREF)"
>svref_2object(SVREF)</a></dt>

<dd>
<p>Takes a reference to any Perl value, and turns the referred-to value into an object in the appropriate B::OP-derived or B::SV-derived class. Apart from functions such as <code>main_root</code>, this is the primary way to get an initial &#34;handle&#34; on an internal perl data structure which can then be followed with the other access methods.</p>

<p>The returned object will only be valid as long as the underlying OPs and SVs continue to exist. Do not attempt to use the object after the underlying structures are freed.</p>

<dt><a name="amagic_generation"
>amagic_generation</a></dt>

<dd>
<p>Returns the SV object corresponding to the C variable <code>amagic_generation</code>.</p>

<dt><a name="init_av"
>init_av</a></dt>

<dd>
<p>Returns the AV object (i.e. in class B::AV) representing INIT blocks.</p>

<dt><a name="check_av"
>check_av</a></dt>

<dd>
<p>Returns the AV object (i.e. in class B::AV) representing CHECK blocks.</p>

<dt><a name="unitcheck_av"
>unitcheck_av</a></dt>

<dd>
<p>Returns the AV object (i.e. in class B::AV) representing UNITCHECK blocks.</p>

<dt><a name="begin_av"
>begin_av</a></dt>

<dd>
<p>Returns the AV object (i.e. in class B::AV) representing BEGIN blocks.</p>

<dt><a name="end_av"
>end_av</a></dt>

<dd>
<p>Returns the AV object (i.e. in class B::AV) representing END blocks.</p>

<dt><a name="comppadlist"
>comppadlist</a></dt>

<dd>
<p>Returns the AV object (i.e. in class B::AV) of the global comppadlist.</p>

<dt><a name="regex_padav"
>regex_padav</a></dt>

<dd>
<p>Only when perl was compiled with ithreads.</p>

<dt><a name="main_cv"
>main_cv</a></dt>

<dd>
<p>Return the (faked) CV corresponding to the main part of the Perl program.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Functions_for_Examining_the_Symbol_Table"
>Functions for Examining the Symbol Table</a></h2>

<dl>
<dt><a name='walksymtable'></a><a name="walksymtable(SYMREF,_METHOD,_RECURSE,_PREFIX)"
>walksymtable(SYMREF, METHOD, RECURSE, PREFIX)</a></dt>

<dd>
<p>Walk the symbol table starting at SYMREF and call METHOD on each symbol (a B::GV object) visited. When the walk reaches package symbols (such as &#34;Foo::&#34;) it invokes RECURSE, passing in the symbol name, and only recurses into the package if that sub returns true.</p>

<p>PREFIX is the name of the SYMREF you&#39;re walking.</p>

<p>For example:</p>

<pre class="sh_perl">  # Walk CGI&#39;s symbol table calling print_subs on each symbol.
  # Recurse only into CGI::Util::
  walksymtable(\%CGI::, &#39;print_subs&#39;, sub { $_[0] eq &#39;CGI::Util::&#39; },
               &#39;CGI::&#39;);</pre>

<p>print_subs() is a B::GV method you have declared. Also see <a href="#B::GV_Methods" class="podlinkpod"
>&#34;B::GV Methods&#34;</a>, below.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Functions_Returning_B::OP_objects_or_for_walking_op_trees"
>Functions Returning <code>B::OP</code> objects or for walking op trees</a></h2>

<p>For descriptions of the class hierarchy of these objects and the methods that can be called on them, see below, <a href="#OVERVIEW_OF_CLASSES" class="podlinkpod"
>&#34;OVERVIEW OF CLASSES&#34;</a> and <a href="#OP-RELATED_CLASSES" class="podlinkpod"
>&#34;OP-RELATED CLASSES&#34;</a>.</p>

<dl>
<dt><a name="main_root"
>main_root</a></dt>

<dd>
<p>Returns the root op (i.e. an object in the appropriate B::OP-derived class) of the main part of the Perl program.</p>

<dt><a name="main_start"
>main_start</a></dt>

<dd>
<p>Returns the starting op of the main part of the Perl program.</p>

<dt><a name='walkoptree'></a><a name="walkoptree(OP,_METHOD)"
>walkoptree(OP, METHOD)</a></dt>

<dd>
<p>Does a tree-walk of the syntax tree based at OP and calls METHOD on each op it visits. Each node is visited before its children. If <code>walkoptree_debug</code> (see below) has been called to turn debugging on then the method <code>walkoptree_debug</code> is called on each op before METHOD is called.</p>

<dt><a name='walkoptree_debug'></a><a name="walkoptree_debug(DEBUG)"
>walkoptree_debug(DEBUG)</a></dt>

<dd>
<p>Returns the current debugging flag for <code>walkoptree</code>. If the optional DEBUG argument is non-zero, it sets the debugging flag to that. See the description of <code>walkoptree</code> above for what the debugging flag does.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Miscellaneous_Utility_Functions"
>Miscellaneous Utility Functions</a></h2>

<dl>
<dt><a name='ppname'></a><a name="ppname(OPNUM)"
>ppname(OPNUM)</a></dt>

<dd>
<p>Return the PP function name (e.g. &#34;pp_add&#34;) of op number OPNUM.</p>

<dt><a name='hash'></a><a name="hash(STR)"
>hash(STR)</a></dt>

<dd>
<p>Returns a string in the form &#34;0x...&#34; representing the value of the internal hash function used by perl on string STR.</p>

<dt><a name='cast_I32'></a><a name="cast_I32(I)"
>cast_I32(I)</a></dt>

<dd>
<p>Casts I to the internal I32 type used by that perl.</p>

<dt><a name="minus_c"
>minus_c</a></dt>

<dd>
<p>Does the equivalent of the <code>-c</code> command-line option. Obviously, this is only useful in a BEGIN block or else the flag is set too late.</p>

<dt><a name='cstring'></a><a name="cstring(STR)"
>cstring(STR)</a></dt>

<dd>
<p>Returns a double-quote-surrounded escaped version of STR which can be used as a string in C source code.</p>

<dt><a name='perlstring'></a><a name="perlstring(STR)"
>perlstring(STR)</a></dt>

<dd>
<p>Returns a double-quote-surrounded escaped version of STR which can be used as a string in Perl source code.</p>

<dt><a name='class'></a><a name="class(OBJ)"
>class(OBJ)</a></dt>

<dd>
<p>Returns the class of an object without the part of the classname preceding the first <code>&#34;::&#34;</code>. This is used to turn <code>&#34;B::UNOP&#34;</code> into <code>&#34;UNOP&#34;</code> for example.</p>

<dt><a name="threadsv_names"
>threadsv_names</a></dt>

<dd>
<p>In a perl compiled for threads, this returns a list of the special per-thread threadsv variables.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Exported_utility_variables"
>Exported utility variables</a></h2>

<dl>
<dt><a name='optype'></a><a name="@optype"
>@optype</a></dt>

<dd>
<pre class="sh_perl">  my $op_type = $optype[$op_type_num];</pre>

<p>A simple mapping of the op type number to its type (like &#39;COP&#39; or &#39;BINOP&#39;).</p>

<dt><a name='specialsv_name'></a><a name="@specialsv_name"
>@specialsv_name</a></dt>

<dd>
<pre class="sh_perl">  my $sv_name = $specialsv_name[$sv_index];</pre>

<p>Certain SV types are considered &#39;special&#39;. They&#39;re represented by B::SPECIAL and are referred to by a number from the specialsv_list. This array maps that number back to the name of the SV (like &#39;Nullsv&#39; or &#39;&#38;PL_sv_undef&#39;).</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OVERVIEW_OF_CLASSES"
>OVERVIEW OF CLASSES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The C structures used by Perl&#39;s internals to hold SV and OP information (PVIV, AV, HV, ..., OP, SVOP, UNOP, ...) are modelled on a class hierarchy and the <code>B</code> module gives access to them via a true object hierarchy. Structure fields which point to other objects (whether types of SV or types of OP) are represented by the <code>B</code> module as Perl objects of the appropriate class.</p>

<p>The bulk of the <code>B</code> module is the methods for accessing fields of these structures.</p>

<p>Note that all access is read-only. You cannot modify the internals by using this module. Also, note that the B::OP and B::SV objects created by this module are only valid for as long as the underlying objects exist; their creation doesn&#39;t increase the reference counts of the underlying objects. Trying to access the fields of a freed object will give incomprehensible results, or worse.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="SV-RELATED_CLASSES"
>SV-RELATED CLASSES</a></h2>

<p>B::IV, B::NV, B::RV, B::PV, B::PVIV, B::PVNV, B::PVMG, B::BM (5.9.5 and earlier), B::PVLV, B::AV, B::HV, B::CV, B::GV, B::FM, B::IO. These classes correspond in the obvious way to the underlying C structures of similar names. The inheritance hierarchy mimics the underlying C &#34;inheritance&#34;. For the 5.10.x branch, (<i>ie</i> 5.10.0, 5.10.1 <i>etc</i>) this is:</p>

<pre class="sh_perl">                           B::SV
                             |
                +------------+------------+------------+
                |            |            |            |
              B::PV        B::IV        B::NV        B::RV
                  \         /           /
                   \       /           /
                    B::PVIV           /
                         \           /
                          \         /
                           \       /
                            B::PVNV
                               |
                               |
                            B::PVMG
                               |
                   +-----+-----+-----+-----+
                   |     |     |     |     |
                 B::AV B::GV B::HV B::CV B::IO
                         |           |
                         |           |
                      B::PVLV      B::FM</pre>

<p>For 5.9.0 and earlier, PVLV is a direct subclass of PVMG, and BM is still present as a distinct type, so the base of this diagram is</p>

<pre class="sh_perl">                               |
                               |
                            B::PVMG
                               |
            +------+-----+-----+-----+-----+-----+
            |      |     |     |     |     |     |
         B::PVLV B::BM B::AV B::GV B::HV B::CV B::IO
                                           |
                                           |
                                         B::FM</pre>

<p>For 5.11.0 and later, B::RV is abolished, and IVs can be used to store references, and a new type B::REGEXP is introduced, giving this structure:</p>

<pre class="sh_perl">                           B::SV
                             |
                +------------+------------+
                |            |            |
              B::PV        B::IV        B::NV
                  \         /           /
                   \       /           /
                    B::PVIV           /
                         \           /
                          \         /
                           \       /
                            B::PVNV
                               |
                               |
                            B::PVMG
                               |
           +-------+-------+---+---+-------+-------+
           |       |       |       |       |       |
         B::AV   B::GV   B::HV   B::CV   B::IO B::REGEXP
                   |               |
                   |               |
                B::PVLV          B::FM</pre>

<p>Access methods correspond to the underlying C macros for field access, usually with the leading &#34;class indication&#34; prefix removed (Sv, Av, Hv, ...). The leading prefix is only left in cases where its removal would cause a clash in method name. For example, <code>GvREFCNT</code> stays as-is since its abbreviation would clash with the &#34;superclass&#34; method <code>REFCNT</code> (corresponding to the C function <code>SvREFCNT</code>).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::SV_Methods"
>B::SV Methods</a></h2>

<dl>
<dt><a name="REFCNT"
>REFCNT</a></dt>

<dd>
<dt><a name="FLAGS"
>FLAGS</a></dt>

<dd>
<dt><a name="object_2svref"
>object_2svref</a></dt>

<dd>
<p>Returns a reference to the regular scalar corresponding to this B::SV object. In other words, this method is the inverse operation to the svref_2object() subroutine. This scalar and other data it points at should be considered read-only: modifying them is neither safe nor guaranteed to have a sensible effect.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::IV_Methods"
>B::IV Methods</a></h2>

<dl>
<dt><a name="IV"
>IV</a></dt>

<dd>
<p>Returns the value of the IV, <i>interpreted as a signed integer</i>. This will be misleading if <code>FLAGS &#38; SVf_IVisUV</code>. Perhaps you want the <code>int_value</code> method instead?</p>

<dt><a name="IVX"
>IVX</a></dt>

<dd>
<dt><a name="UVX"
>UVX</a></dt>

<dd>
<dt><a name="int_value"
>int_value</a></dt>

<dd>
<p>This method returns the value of the IV as an integer. It differs from <code>IV</code> in that it returns the correct value regardless of whether it&#39;s stored signed or unsigned.</p>

<dt><a name="needs64bits"
>needs64bits</a></dt>

<dd>
<dt><a name="packiv"
>packiv</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::NV_Methods"
>B::NV Methods</a></h2>

<dl>
<dt><a name="NV"
>NV</a></dt>

<dd>
<dt><a name="NVX"
>NVX</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::RV_Methods"
>B::RV Methods</a></h2>

<dl>
<dt><a name="RV"
>RV</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::PV_Methods"
>B::PV Methods</a></h2>

<dl>
<dt><a name="PV"
>PV</a></dt>

<dd>
<p>This method is the one you usually want. It constructs a string using the length and offset information in the struct: for ordinary scalars it will return the string that you&#39;d see from Perl, even if it contains null characters.</p>

<dt><a name="RV"
>RV</a></dt>

<dd>
<p>Same as B::RV::RV, except that it will die() if the PV isn&#39;t a reference.</p>

<dt><a name="PVX"
>PVX</a></dt>

<dd>
<p>This method is less often useful. It assumes that the string stored in the struct is null-terminated, and disregards the length information.</p>

<p>It is the appropriate method to use if you need to get the name of a lexical variable from a padname array. Lexical variable names are always stored with a null terminator, and the length field (SvCUR) is overloaded for other purposes and can&#39;t be relied on here.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::PVMG_Methods"
>B::PVMG Methods</a></h2>

<dl>
<dt><a name="MAGIC"
>MAGIC</a></dt>

<dd>
<dt><a name="SvSTASH"
>SvSTASH</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::MAGIC_Methods"
>B::MAGIC Methods</a></h2>

<dl>
<dt><a name="MOREMAGIC"
>MOREMAGIC</a></dt>

<dd>
<dt><a name="precomp"
>precomp</a></dt>

<dd>
<p>Only valid on r-magic, returns the string that generated the regexp.</p>

<dt><a name="PRIVATE"
>PRIVATE</a></dt>

<dd>
<dt><a name="TYPE"
>TYPE</a></dt>

<dd>
<dt><a name="FLAGS"
>FLAGS</a></dt>

<dd>
<dt><a name="OBJ"
>OBJ</a></dt>

<dd>
<p>Will die() if called on r-magic.</p>

<dt><a name="PTR"
>PTR</a></dt>

<dd>
<dt><a name="REGEX"
>REGEX</a></dt>

<dd>
<p>Only valid on r-magic, returns the integer value of the REGEX stored in the MAGIC.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::PVLV_Methods"
>B::PVLV Methods</a></h2>

<dl>
<dt><a name="TARGOFF"
>TARGOFF</a></dt>

<dd>
<dt><a name="TARGLEN"
>TARGLEN</a></dt>

<dd>
<dt><a name="TYPE"
>TYPE</a></dt>

<dd>
<dt><a name="TARG"
>TARG</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::BM_Methods"
>B::BM Methods</a></h2>

<dl>
<dt><a name="USEFUL"
>USEFUL</a></dt>

<dd>
<dt><a name="PREVIOUS"
>PREVIOUS</a></dt>

<dd>
<dt><a name="RARE"
>RARE</a></dt>

<dd>
<dt><a name="TABLE"
>TABLE</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::GV_Methods"
>B::GV Methods</a></h2>

<dl>
<dt><a name="is_empty"
>is_empty</a></dt>

<dd>
<p>This method returns TRUE if the GP field of the GV is NULL.</p>

<dt><a name="NAME"
>NAME</a></dt>

<dd>
<dt><a name="SAFENAME"
>SAFENAME</a></dt>

<dd>
<p>This method returns the name of the glob, but if the first character of the name is a control character, then it converts it to ^X first, so that *^G would return &#34;^G&#34; rather than &#34;\cG&#34;.</p>

<p>It&#39;s useful if you want to print out the name of a variable. If you restrict yourself to globs which exist at compile-time then the result ought to be unambiguous, because code like <code>${&#34;^G&#34;} = 1</code> is compiled as two ops - a constant string and a dereference (rv2gv) - so that the glob is created at runtime.</p>

<p>If you&#39;re working with globs at runtime, and need to disambiguate *^G from *{&#34;^G&#34;}, then you should use the raw NAME method.</p>

<dt><a name="STASH"
>STASH</a></dt>

<dd>
<dt><a name="SV"
>SV</a></dt>

<dd>
<dt><a name="IO"
>IO</a></dt>

<dd>
<dt><a name="FORM"
>FORM</a></dt>

<dd>
<dt><a name="AV"
>AV</a></dt>

<dd>
<dt><a name="HV"
>HV</a></dt>

<dd>
<dt><a name="EGV"
>EGV</a></dt>

<dd>
<dt><a name="CV"
>CV</a></dt>

<dd>
<dt><a name="CVGEN"
>CVGEN</a></dt>

<dd>
<dt><a name="LINE"
>LINE</a></dt>

<dd>
<dt><a name="FILE"
>FILE</a></dt>

<dd>
<dt><a name="FILEGV"
>FILEGV</a></dt>

<dd>
<dt><a name="GvREFCNT"
>GvREFCNT</a></dt>

<dd>
<dt><a name="FLAGS"
>FLAGS</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::IO_Methods"
>B::IO Methods</a></h2>

<dl>
<dt><a name="LINES"
>LINES</a></dt>

<dd>
<dt><a name="PAGE"
>PAGE</a></dt>

<dd>
<dt><a name="PAGE_LEN"
>PAGE_LEN</a></dt>

<dd>
<dt><a name="LINES_LEFT"
>LINES_LEFT</a></dt>

<dd>
<dt><a name="TOP_NAME"
>TOP_NAME</a></dt>

<dd>
<dt><a name="TOP_GV"
>TOP_GV</a></dt>

<dd>
<dt><a name="FMT_NAME"
>FMT_NAME</a></dt>

<dd>
<dt><a name="FMT_GV"
>FMT_GV</a></dt>

<dd>
<dt><a name="BOTTOM_NAME"
>BOTTOM_NAME</a></dt>

<dd>
<dt><a name="BOTTOM_GV"
>BOTTOM_GV</a></dt>

<dd>
<dt><a name="SUBPROCESS"
>SUBPROCESS</a></dt>

<dd>
<dt><a name="IoTYPE"
>IoTYPE</a></dt>

<dd>
<dt><a name="IoFLAGS"
>IoFLAGS</a></dt>

<dd>
<dt><a name="IsSTD"
>IsSTD</a></dt>

<dd>
<p>Takes one arguments ( &#39;stdin&#39; | &#39;stdout&#39; | &#39;stderr&#39; ) and returns true if the IoIFP of the object is equal to the handle whose name was passed as argument ( i.e. $io-&#62;IsSTD(&#39;stderr&#39;) is true if IoIFP($io) == PerlIO_stdin() ).</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::AV_Methods"
>B::AV Methods</a></h2>

<dl>
<dt><a name="FILL"
>FILL</a></dt>

<dd>
<dt><a name="MAX"
>MAX</a></dt>

<dd>
<dt><a name="ARRAY"
>ARRAY</a></dt>

<dd>
<dt><a name="ARRAYelt"
>ARRAYelt</a></dt>

<dd>
<p>Like <code>ARRAY</code>, but takes an index as an argument to get only one element, rather than a list of all of them.</p>

<dt><a name="OFF"
>OFF</a></dt>

<dd>
<p>This method is deprecated if running under Perl 5.8, and is no longer present if running under Perl 5.9</p>

<dt><a name="AvFLAGS"
>AvFLAGS</a></dt>

<dd>
<p>This method returns the AV specific flags. In Perl 5.9 these are now stored in with the main SV flags, so this method is no longer present.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::CV_Methods"
>B::CV Methods</a></h2>

<dl>
<dt><a name="STASH"
>STASH</a></dt>

<dd>
<dt><a name="START"
>START</a></dt>

<dd>
<dt><a name="ROOT"
>ROOT</a></dt>

<dd>
<dt><a name="GV"
>GV</a></dt>

<dd>
<dt><a name="FILE"
>FILE</a></dt>

<dd>
<dt><a name="DEPTH"
>DEPTH</a></dt>

<dd>
<dt><a name="PADLIST"
>PADLIST</a></dt>

<dd>
<dt><a name="OUTSIDE"
>OUTSIDE</a></dt>

<dd>
<dt><a name="OUTSIDE_SEQ"
>OUTSIDE_SEQ</a></dt>

<dd>
<dt><a name="XSUB"
>XSUB</a></dt>

<dd>
<dt><a name="XSUBANY"
>XSUBANY</a></dt>

<dd>
<p>For constant subroutines, returns the constant SV returned by the subroutine.</p>

<dt><a name="CvFLAGS"
>CvFLAGS</a></dt>

<dd>
<dt><a name="const_sv"
>const_sv</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::HV_Methods"
>B::HV Methods</a></h2>

<dl>
<dt><a name="FILL"
>FILL</a></dt>

<dd>
<dt><a name="MAX"
>MAX</a></dt>

<dd>
<dt><a name="KEYS"
>KEYS</a></dt>

<dd>
<dt><a name="RITER"
>RITER</a></dt>

<dd>
<dt><a name="NAME"
>NAME</a></dt>

<dd>
<dt><a name="ARRAY"
>ARRAY</a></dt>

<dd>
<dt><a name="PMROOT"
>PMROOT</a></dt>

<dd>
<p>This method is not present if running under Perl 5.9, as the PMROOT information is no longer stored directly in the hash.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="OP-RELATED_CLASSES"
>OP-RELATED CLASSES</a></h2>

<p><code>B::OP</code>, <code>B::UNOP</code>, <code>B::BINOP</code>, <code>B::LOGOP</code>, <code>B::LISTOP</code>, <code>B::PMOP</code>, <code>B::SVOP</code>, <code>B::PADOP</code>, <code>B::PVOP</code>, <code>B::LOOP</code>, <code>B::COP</code>.</p>

<p>These classes correspond in the obvious way to the underlying C structures of similar names. The inheritance hierarchy mimics the underlying C &#34;inheritance&#34;:</p>

<pre class="sh_perl">                                 B::OP
                                   |
                   +---------------+--------+--------+-------+
                   |               |        |        |       |
                B::UNOP          B::SVOP B::PADOP  B::COP  B::PVOP
                 ,&#39;  `-.
                /       `--.
           B::BINOP     B::LOGOP
               |
               |
           B::LISTOP
             ,&#39; `.
            /     \
        B::LOOP B::PMOP</pre>

<p>Access methods correspond to the underlying C structre field names, with the leading &#34;class indication&#34; prefix (<code>&#34;op_&#34;</code>) removed.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::OP_Methods"
>B::OP Methods</a></h2>

<p>These methods get the values of similarly named fields within the OP data structure. See top of <code>op.h</code> for more info.</p>

<dl>
<dt><a name="next"
>next</a></dt>

<dd>
<dt><a name="sibling"
>sibling</a></dt>

<dd>
<dt><a name="name"
>name</a></dt>

<dd>
<p>This returns the op name as a string (e.g. &#34;add&#34;, &#34;rv2av&#34;).</p>

<dt><a name="ppaddr"
>ppaddr</a></dt>

<dd>
<p>This returns the function name as a string (e.g. &#34;PL_ppaddr[OP_ADD]&#34;, &#34;PL_ppaddr[OP_RV2AV]&#34;).</p>

<dt><a name="desc"
>desc</a></dt>

<dd>
<p>This returns the op description from the global C PL_op_desc array (e.g. &#34;addition&#34; &#34;array deref&#34;).</p>

<dt><a name="targ"
>targ</a></dt>

<dd>
<dt><a name="type"
>type</a></dt>

<dd>
<dt><a name="opt"
>opt</a></dt>

<dd>
<dt><a name="flags"
>flags</a></dt>

<dd>
<dt><a name="private"
>private</a></dt>

<dd>
<dt><a name="spare"
>spare</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::UNOP_METHOD"
>B::UNOP METHOD</a></h2>

<dl>
<dt><a name="first"
>first</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::BINOP_METHOD"
>B::BINOP METHOD</a></h2>

<dl>
<dt><a name="last"
>last</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::LOGOP_METHOD"
>B::LOGOP METHOD</a></h2>

<dl>
<dt><a name="other"
>other</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::LISTOP_METHOD"
>B::LISTOP METHOD</a></h2>

<dl>
<dt><a name="children"
>children</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::PMOP_Methods"
>B::PMOP Methods</a></h2>

<dl>
<dt><a name="pmreplroot"
>pmreplroot</a></dt>

<dd>
<dt><a name="pmreplstart"
>pmreplstart</a></dt>

<dd>
<dt><a name="pmnext"
>pmnext</a></dt>

<dd>
<p>Only up to Perl 5.9.4</p>

<dt><a name="pmflags"
>pmflags</a></dt>

<dd>
<dt><a name="extflags"
>extflags</a></dt>

<dd>
<p>Since Perl 5.9.5</p>

<dt><a name="precomp"
>precomp</a></dt>

<dd>
<dt><a name="pmoffset"
>pmoffset</a></dt>

<dd>
<p>Only when perl was compiled with ithreads.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::SVOP_METHOD"
>B::SVOP METHOD</a></h2>

<dl>
<dt><a name="sv"
>sv</a></dt>

<dd>
<dt><a name="gv"
>gv</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::PADOP_METHOD"
>B::PADOP METHOD</a></h2>

<dl>
<dt><a name="padix"
>padix</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::PVOP_METHOD"
>B::PVOP METHOD</a></h2>

<dl>
<dt><a name="pv"
>pv</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::LOOP_Methods"
>B::LOOP Methods</a></h2>

<dl>
<dt><a name="redoop"
>redoop</a></dt>

<dd>
<dt><a name="nextop"
>nextop</a></dt>

<dd>
<dt><a name="lastop"
>lastop</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="B::COP_Methods"
>B::COP Methods</a></h2>

<dl>
<dt><a name="label"
>label</a></dt>

<dd>
<dt><a name="stash"
>stash</a></dt>

<dd>
<dt><a name="stashpv"
>stashpv</a></dt>

<dd>
<dt><a name="file"
>file</a></dt>

<dd>
<dt><a name="cop_seq"
>cop_seq</a></dt>

<dd>
<dt><a name="arybase"
>arybase</a></dt>

<dd>
<dt><a name="line"
>line</a></dt>

<dd>
<dt><a name="warnings"
>warnings</a></dt>

<dd>
<dt><a name="io"
>io</a></dt>

<dd>
<dt><a name="hints"
>hints</a></dt>

<dd>
<dt><a name="hints_hash"
>hints_hash</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Malcolm Beattie, <code>mbeattie@sable.ox.ac.uk</code></p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78063 Uploads, 24684 Distributions
105888 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 21 12:04:04 2012 GMT (0.10505199432373) @cpansearch1 -->
 </body>
</html>
