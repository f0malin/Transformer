<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>HTTP::Response - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","HTTP-Message",3]);
    _gaq.push(["_setCustomVar",5,"Release","HTTP-Message-6.03",3]);
    _gaq.push(["_setCustomVar",3,"Module","HTTP::Response",3]);
    _gaq.push(["_setCustomVar",1,"Author","GAAS",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?HTTP::Response">permalink</a></div>
  <a href="/~gaas/">Gisle Aas</a> &gt;
  <a href="/~gaas/HTTP-Message-6.03/">HTTP-Message-6.03</a> &gt;
  HTTP::Response
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/80ccd89a65d9faf08c2fb6be2991ba57?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/G/GA/GAAS/HTTP-Message-6.03.tar.gz">HTTP-Message-6.03.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=HTTP%3A%3AResponse;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~GAAS/HTTP-Message-6.03/lib/HTTP/Response.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?LWP%3A%3AUserAgent">LWP::UserAgent</a><br>
<a href="/perldoc?HTTP%3A%3ARequest">HTTP::Request</a><br>
<a href="/perldoc?WWW%3A%3AMechanize">WWW::Mechanize</a><br>
<a href="/perldoc?LWP%3A%3ASimple">LWP::Simple</a><br>
<a href="/perldoc?HTTP%3A%3ADaemon">HTTP::Daemon</a><br>
<a href="/perldoc?HTTP%3A%3AHeaders">HTTP::Headers</a><br>
<a href="/perldoc?HTTP%3A%3ACookies">HTTP::Cookies</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?HTTP%3A%3AProxy">HTTP::Proxy</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=HTTP%3A%3AResponse">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 3</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 3</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=HTTP-Message">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  6.03 &nbsp;
<span class="noprint">
  <a href="/src/GAAS/HTTP-Message-6.03/lib/HTTP/Response.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>HTTP::Response - HTTP style response message</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Response objects are returned by the request() method of the <code>LWP::UserAgent</code>:</p>

<pre class="sh_perl">    # ...
    $response = $ua-&#62;request($request)
    if ($response-&#62;is_success) {
        print $response-&#62;decoded_content;
    }
    else {
        print STDERR $response-&#62;status_line, &#34;\n&#34;;
    }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <code>HTTP::Response</code> class encapsulates HTTP style responses. A response consists of a response line, some headers, and a content body. Note that the LWP library uses HTTP style responses even for non-HTTP protocol schemes. Instances of this class are usually created and returned by the request() method of an <code>LWP::UserAgent</code> object.</p>

<p><code>HTTP::Response</code> is a subclass of <code>HTTP::Message</code> and therefore inherits its methods. The following additional methods are available:</p>

<dl>
<dt><a name='r'></a><a name="$r_=_HTTP::Response-&#62;new(_$code_)"
>$r = HTTP::Response-&#62;new( $code )</a></dt>

<dd>
<dt><a name='r'></a><a name="$r_=_HTTP::Response-&#62;new(_$code,_$msg_)"
>$r = HTTP::Response-&#62;new( $code, $msg )</a></dt>

<dd>
<dt><a name='r'></a><a name="$r_=_HTTP::Response-&#62;new(_$code,_$msg,_$header_)"
>$r = HTTP::Response-&#62;new( $code, $msg, $header )</a></dt>

<dd>
<dt><a name='r'></a><a name="$r_=_HTTP::Response-&#62;new(_$code,_$msg,_$header,_$content_)"
>$r = HTTP::Response-&#62;new( $code, $msg, $header, $content )</a></dt>

<dd>
<p>Constructs a new <code>HTTP::Response</code> object describing a response with response code $code and optional message $msg. The optional $header argument should be a reference to an <code>HTTP::Headers</code> object or a plain array reference of key/value pairs. The optional $content argument should be a string of bytes. The meaning these arguments are described below.</p>

<dt><a name='r'></a><a name="$r_=_HTTP::Response-&#62;parse(_$str_)"
>$r = HTTP::Response-&#62;parse( $str )</a></dt>

<dd>
<p>This constructs a new response object by parsing the given string.</p>

<dt><a name='r'></a><a name="$r-&#62;code"
>$r-&#62;code</a></dt>

<dd>
<dt><a name='r'></a><a name="$r-&#62;code(_$code_)"
>$r-&#62;code( $code )</a></dt>

<dd>
<p>This is used to get/set the code attribute. The code is a 3 digit number that encode the overall outcome of an HTTP response. The <code>HTTP::Status</code> module provide constants that provide mnemonic names for the code attribute.</p>

<dt><a name='r'></a><a name="$r-&#62;message"
>$r-&#62;message</a></dt>

<dd>
<dt><a name='r'></a><a name="$r-&#62;message(_$message_)"
>$r-&#62;message( $message )</a></dt>

<dd>
<p>This is used to get/set the message attribute. The message is a short human readable single line string that explains the response code.</p>

<dt><a name='r'></a><a name="$r-&#62;header(_$field_)"
>$r-&#62;header( $field )</a></dt>

<dd>
<dt><a name='r'></a><a name="$r-&#62;header(_$field_=&#62;_$value_)"
>$r-&#62;header( $field =&#62; $value )</a></dt>

<dd>
<p>This is used to get/set header values and it is inherited from <code>HTTP::Headers</code> via <code>HTTP::Message</code>. See <a href="/~gaas/HTTP-Message-6.03/lib/HTTP/Headers.pm" class="podlinkpod"
>HTTP::Headers</a> for details and other similar methods that can be used to access the headers.</p>

<dt><a name='r'></a><a name="$r-&#62;content"
>$r-&#62;content</a></dt>

<dd>
<dt><a name='r'></a><a name="$r-&#62;content(_$bytes_)"
>$r-&#62;content( $bytes )</a></dt>

<dd>
<p>This is used to get/set the raw content and it is inherited from the <code>HTTP::Message</code> base class. See <a href="/~gaas/HTTP-Message-6.03/lib/HTTP/Message.pm" class="podlinkpod"
>HTTP::Message</a> for details and other methods that can be used to access the content.</p>

<dt><a name='r'></a><a name="$r-&#62;decoded_content(_%options_)"
>$r-&#62;decoded_content( %options )</a></dt>

<dd>
<p>This will return the content after any <code>Content-Encoding</code> and charsets have been decoded. See <a href="/~gaas/HTTP-Message-6.03/lib/HTTP/Message.pm" class="podlinkpod"
>HTTP::Message</a> for details.</p>

<dt><a name='r'></a><a name="$r-&#62;request"
>$r-&#62;request</a></dt>

<dd>
<dt><a name='r'></a><a name="$r-&#62;request(_$request_)"
>$r-&#62;request( $request )</a></dt>

<dd>
<p>This is used to get/set the request attribute. The request attribute is a reference to the the request that caused this response. It does not have to be the same request passed to the $ua-&#62;request() method, because there might have been redirects and authorization retries in between.</p>

<dt><a name='r'></a><a name="$r-&#62;previous"
>$r-&#62;previous</a></dt>

<dd>
<dt><a name='r'></a><a name="$r-&#62;previous(_$response_)"
>$r-&#62;previous( $response )</a></dt>

<dd>
<p>This is used to get/set the previous attribute. The previous attribute is used to link together chains of responses. You get chains of responses if the first response is redirect or unauthorized. The value is <code>undef</code> if this is the first response in a chain.</p>

<p>Note that the method $r-&#62;redirects is provided as a more convenient way to access the response chain.</p>

<dt><a name='r'></a><a name="$r-&#62;status_line"
>$r-&#62;status_line</a></dt>

<dd>
<p>Returns the string &#34;&#60;code&#62; &#60;message&#62;&#34;. If the message attribute is not set then the official name of &#60;code&#62; (see <a href="/~gaas/HTTP-Message-6.03/lib/HTTP/Status.pm" class="podlinkpod"
>HTTP::Status</a>) is substituted.</p>

<dt><a name='r'></a><a name="$r-&#62;base"
>$r-&#62;base</a></dt>

<dd>
<p>Returns the base URI for this response. The return value will be a reference to a URI object.</p>

<p>The base URI is obtained from one the following sources (in priority order):</p>

<ol>
<li>Embedded in the document content, for instance &#60;BASE HREF=&#34;...&#34;&#62; in HTML documents.</li>

<li>A &#34;Content-Base:&#34; or a &#34;Content-Location:&#34; header in the response.
<p>For backwards compatibility with older HTTP implementations we will also look for the &#34;Base:&#34; header.</p>
</li>

<li>The URI used to request this response. This might not be the original URI that was passed to $ua-&#62;request() method, because we might have received some redirect responses first.</li>
</ol>

<p>If none of these sources provide an absolute URI, undef is returned.</p>

<p>When the LWP protocol modules produce the HTTP::Response object, then any base URI embedded in the document (step 1) will already have initialized the &#34;Content-Base:&#34; header. This means that this method only performs the last 2 steps (the content is not always available either).</p>

<dt><a name='r'></a><a name="$r-&#62;filename"
>$r-&#62;filename</a></dt>

<dd>
<p>Returns a filename for this response. Note that doing sanity checks on the returned filename (eg. removing characters that cannot be used on the target filesystem where the filename would be used, and laundering it for security purposes) are the caller&#39;s responsibility; the only related thing done by this method is that it makes a simple attempt to return a plain filename with no preceding path segments.</p>

<p>The filename is obtained from one the following sources (in priority order):</p>

<ol>
<li>A &#34;Content-Disposition:&#34; header in the response. Proper decoding of RFC 2047 encoded filenames requires the <code>MIME::QuotedPrint</code> (for &#34;Q&#34; encoding), <code>MIME::Base64</code> (for &#34;B&#34; encoding), and <code>Encode</code> modules.</li>

<li>A &#34;Content-Location:&#34; header in the response.</li>

<li>The URI used to request this response. This might not be the original URI that was passed to $ua-&#62;request() method, because we might have received some redirect responses first.</li>
</ol>

<p>If a filename cannot be derived from any of these sources, undef is returned.</p>

<dt><a name='r'></a><a name="$r-&#62;as_string"
>$r-&#62;as_string</a></dt>

<dd>
<dt><a name='r'></a><a name="$r-&#62;as_string(_$eol_)"
>$r-&#62;as_string( $eol )</a></dt>

<dd>
<p>Returns a textual representation of the response.</p>

<dt><a name='r'></a><a name="$r-&#62;is_info"
>$r-&#62;is_info</a></dt>

<dd>
<dt><a name='r'></a><a name="$r-&#62;is_success"
>$r-&#62;is_success</a></dt>

<dd>
<dt><a name='r'></a><a name="$r-&#62;is_redirect"
>$r-&#62;is_redirect</a></dt>

<dd>
<dt><a name='r'></a><a name="$r-&#62;is_error"
>$r-&#62;is_error</a></dt>

<dd>
<p>These methods indicate if the response was informational, successful, a redirection, or an error. See <a href="/~gaas/HTTP-Message-6.03/lib/HTTP/Status.pm" class="podlinkpod"
>HTTP::Status</a> for the meaning of these.</p>

<dt><a name='r'></a><a name="$r-&#62;error_as_HTML"
>$r-&#62;error_as_HTML</a></dt>

<dd>
<p>Returns a string containing a complete HTML document indicating what error occurred. This method should only be called when $r-&#62;is_error is TRUE.</p>

<dt><a name='r'></a><a name="$r-&#62;redirects"
>$r-&#62;redirects</a></dt>

<dd>
<p>Returns the list of redirect responses that lead up to this response by following the $r-&#62;previous chain. The list order is oldest first.</p>

<p>In scalar context return the number of redirect responses leading up to this one.</p>

<dt><a name='r'></a><a name="$r-&#62;current_age"
>$r-&#62;current_age</a></dt>

<dd>
<p>Calculates the &#34;current age&#34; of the response as specified by RFC 2616 section 13.2.3. The age of a response is the time since it was sent by the origin server. The returned value is a number representing the age in seconds.</p>

<dt><a name='r'></a><a name="$r-&#62;freshness_lifetime(_%opt_)"
>$r-&#62;freshness_lifetime( %opt )</a></dt>

<dd>
<p>Calculates the &#34;freshness lifetime&#34; of the response as specified by RFC 2616 section 13.2.4. The &#34;freshness lifetime&#34; is the length of time between the generation of a response and its expiration time. The returned value is the number of seconds until expiry.</p>

<p>If the response does not contain an &#34;Expires&#34; or a &#34;Cache-Control&#34; header, then this function will apply some simple heuristic based on the &#34;Last-Modified&#34; header to determine a suitable lifetime. The following options might be passed to control the heuristics:</p>

<dl>
<dt><a name='heuristic_expiry'></a><a name="heuristic_expiry_=&#62;_$bool"
>heuristic_expiry =&#62; $bool</a></dt>

<dd>
<p>If passed as a FALSE value, don&#39;t apply heuristics and just return <code>undef</code> when &#34;Expires&#34; or &#34;Cache-Control&#34; is lacking.</p>

<dt><a name='h_lastmod_fraction'></a><a name="h_lastmod_fraction_=&#62;_$num"
>h_lastmod_fraction =&#62; $num</a></dt>

<dd>
<p>This number represent the fraction of the difference since the &#34;Last-Modified&#34; timestamp to make the expiry time. The default is <code>0.10</code>, the suggested typical setting of 10% in RFC 2616.</p>

<dt><a name='h_min'></a><a name="h_min_=&#62;_$sec"
>h_min =&#62; $sec</a></dt>

<dd>
<p>This is the lower limit of the heuristic expiry age to use. The default is <code>60</code> (1 minute).</p>

<dt><a name='h_max'></a><a name="h_max_=&#62;_$sec"
>h_max =&#62; $sec</a></dt>

<dd>
<p>This is the upper limit of the heuristic expiry age to use. The default is <code>86400</code> (24 hours).</p>

<dt><a name='h_default'></a><a name="h_default_=&#62;_$sec"
>h_default =&#62; $sec</a></dt>

<dd>
<p>This is the expiry age to use when nothing else applies. The default is <code>3600</code> (1 hour) or &#34;h_min&#34; if greater.</p>
</dd>
</dl>

<dt><a name='r'></a><a name="$r-&#62;is_fresh(_%opt_)"
>$r-&#62;is_fresh( %opt )</a></dt>

<dd>
<p>Returns TRUE if the response is fresh, based on the values of freshness_lifetime() and current_age(). If the response is no longer fresh, then it has to be re-fetched or re-validated by the origin server.</p>

<p>Options might be passed to control expiry heuristics, see the description of freshness_lifetime().</p>

<dt><a name='r'></a><a name="$r-&#62;fresh_until(_%opt_)"
>$r-&#62;fresh_until( %opt )</a></dt>

<dd>
<p>Returns the time (seconds since epoch) when this entity is no longer fresh.</p>

<p>Options might be passed to control expiry heuristics, see the description of freshness_lifetime().</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~gaas/HTTP-Message-6.03/lib/HTTP/Headers.pm" class="podlinkpod"
>HTTP::Headers</a>, <a href="/~gaas/HTTP-Message-6.03/lib/HTTP/Message.pm" class="podlinkpod"
>HTTP::Message</a>, <a href="/~gaas/HTTP-Message-6.03/lib/HTTP/Status.pm" class="podlinkpod"
>HTTP::Status</a>, <a href="/~gaas/HTTP-Message-6.03/lib/HTTP/Request.pm" class="podlinkpod"
>HTTP::Request</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 1995-2004 Gisle Aas.</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78272 Uploads, 24723 Distributions
106001 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 20:37:40 2012 GMT (0.066633939743042) @cpansearch1 -->
 </body>
</html>
