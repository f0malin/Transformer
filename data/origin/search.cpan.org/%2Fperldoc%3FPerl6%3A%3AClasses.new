<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Perl6::Classes - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Perl6-Classes",3]);
    _gaq.push(["_setCustomVar",5,"Release","Perl6-Classes-0.22",3]);
    _gaq.push(["_setCustomVar",3,"Module","Perl6::Classes",3]);
    _gaq.push(["_setCustomVar",1,"Author","LPALMER",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Perl6::Classes">permalink</a></div>
  <a href="/~lpalmer/">Luke Palmer</a> &gt;
  <a href="/~lpalmer/Perl6-Classes-0.22/">Perl6-Classes-0.22</a> &gt;
  Perl6::Classes
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/79bccc04331fa6cfcb0b2220f0da677a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/L/LP/LPALMER/Perl6-Classes-0.22.tar.gz">Perl6-Classes-0.22.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Perl6%3A%3AClasses;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~LPALMER/Perl6-Classes-0.22/Classes.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Filter%3A%3ASimple">Filter::Simple</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?MIME%3A%3ALite">MIME::Lite</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?Text%3A%3ABalanced">Text::Balanced</a><br>
<a href="/perldoc?Net%3A%3ASMTP">Net::SMTP</a><br>
<a href="/perldoc?Excel%3A%3ATemplate">Excel::Template</a><br>
<a href="/perldoc?LWP%3A%3ASimple">LWP::Simple</a><br>
<a href="/perldoc?PDF%3A%3ATemplate">PDF::Template</a><br>
<a href="/perldoc?Perl6%3A%3AParameters">Perl6::Parameters</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Perl6%3A%3AClasses">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Perl6-Classes">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.22 &nbsp;
<span class="noprint">
  <a href="/src/LPALMER/Perl6-Classes-0.22/Classes.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Declarations'>Declarations</a>
    <li class='indexItem indexItem2'><a href='#Inheritance'>Inheritance</a>
    <li class='indexItem indexItem2'><a href='#Constructors_and_Destructors'>Constructors and Destructors</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#Constructors_and_Destructors_and_Inheritance'>Constructors and Destructors and Inheritance</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Data_Hiding'>Data Hiding</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#Data_Hiding_and_Constructors'>Data Hiding and Constructors</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Traps_for_the_unwary'>Traps for the unwary</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    Perl6::Classes - First class classes in Perl 5</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use Perl6::Classes;
    
    class Composer {
        submethod BUILD { print &#34;Giving birth to a new composer\n&#34; }
        method compose { print &#34;Writing some music...\n&#34; }
    }
    
    class ClassicalComposer is Composer {
        method compose { print &#34;Writing some muzak...\n&#34; }
    }
    
    class ModernComposer is Composer {
        submethod BUILD($) { $.length = shift }
        method compose() { print((map { int rand 10 } 1..$.length), &#34;\n&#34;) }
        has $.length;
    }
    
    my $beethoven = new ClassicalComposer;
    my $barber    = new ModernComposer 4;
    my $mahler    = ModernComposer-&#62;new(400);

    $beethoven-&#62;compose;   # Writing some muzak...
    $barber-&#62;compose       # 7214
    compose $mahler;       # 89275869347968374698756....</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>Perl6::Classes</code> allows the creation of (somewhat) Perl 6-style classes in Perl 5. The following features are currently supported:</p>

<ul>
<li><code>sub</code>s, <code>method</code>s, and <code>submethod</code>s
<p>And their respective scoping rules.</p>
</li>

<li>Attributes
<p>Which are available through the <code>has</code> keyword, and look like <code>$.this</code>.</p>
</li>

<li>Inheritance
<p>Both single and multiple inheritance are available through the <code>is</code> keyword.</p>
</li>

<li>Signatures
<p>Signatures on <code>method</code>s, <code>sub</code>s, and <code>submethod</code>s are supported, but just the Perl 5 kind.</p>
</li>

<li>Data hiding
<p>Using the <code>public</code>, <code>protected</code>, and <code>private</code> traits, you can enforce (run-time) data hiding. This is not supported on attributes, which are always <code>private</code>.</p>
</li>

<li>Anonymous classes
<p>That respect closures. You can now nest them inside methods of other classes, even other anonymous ones!</p>
</li>
</ul>

<p>The <code>Perl6::Classes</code> module augments Perl&#39;s syntax with a new declarator: <code>class</code>. It offers the advantage over Perl&#39;s standard OO mechanism that it is conceptually easier to see (especially for those from a C++/Java background). It offers the disadvantage, of course, of being less versatile.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Declarations"
>Declarations</a></h2>

<p>Inside a <code>class</code>, the following things can be declared:</p>

<dl>
<dt><a name="method"
><code>method</code></a></dt>

<dd>
<p>A method is a routine on an object of the class that can be inherited by derived classes. Declare it just like a <code>sub</code>, with the word <code>method</code> in place of <code>sub</code>. Both <code>$_</code> and <code>$self</code> are set to the invocant, and the arguments (without the invocant) are passed in <code>@_</code>. By default, <code>method</code>s are public.</p>

<dt><a name="sub"
><code>sub</code></a></dt>

<dd>
<p>A good ol&#39; familiar sub is a method that takes the class itself as an invocant. It may not use attributes, but you can call it from an object and it acts polymorphically. In any case, <code>$_</code> and <code>$self</code> are set to the class name for a named class, and the class object for one of the anonymous variety. By default, <code>sub</code>s are public.</p>

<dt><a name="submethod"
><code>submethod</code></a></dt>

<dd>
<p>A submethod is just like a <code>method</code>, except that it does not participate in inheritance. Most often, routines that create, initialize, or destroy the current object fall into this category (Wall). They are declared and behave just like <code>method</code>s, otherwise. Except they default to private.</p>

<dt><a name="has"
><code>has</code></a></dt>

<dd>
<p><code>has</code> declares an attribute, which is some private instance data. They generally look like <code>$.this</code>, but can look like <code>@.that</code> or <code>%.uhm</code>, too. They behave like scalars, arrays, and hashes (respectively), too, except that there&#39;s just a dot in front of their name. So, you can dereference <code>%.uhm</code> with <code>$.uhm{right}</code>. They are always private, and can&#39;t be declared otherwise.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Inheritance"
>Inheritance</a></h2>

<p>You may inherit as many classes as you like by following the name of the declared class (or the absence of one, in the case of anonymous classes) with repeated &#34;is ClassName&#34;s. For instance:</p>

<pre class="sh_perl">    class Pegasus is Human is Horse { ... }</pre>

<p>A derived class (<code>Pegasus</code> in this case) inherits all <code>sub</code>s and <code>method</code>s (but not <code>submethod</code>s) of its base classes (<code>Human</code> and <code>Horse</code>). All of these behave &#34;more polymorphically&#34; than regular Perl 5 inheritance with <code>use base</code> and <code>@ISA</code>. For instance:</p>

<pre class="sh_perl">    class Base { method go { ... } }
    class Derived is Base { method go { ... } }
    
    my $b = new Base;
    my $d = new Derived;
    $b-&#62;go;          # Base::go
    $d-&#62;go;          # Derived::go
    my $method = \&#38;Base::go;
    $b-&#62;$method;     # Base::go
    $d-&#62;$method      # Derived::go</pre>

<p>Whether this is a bug or a feature is left to the opinion of the reader.</p>

<p>No, you can&#39;t derive from an anonymous class. No, not even if it&#39;s in a variable. Don&#39;t mistake that for not being able to derive anonymous classes from named ones, though. You&#39;re allowed to do that.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Constructors_and_Destructors"
>Constructors and Destructors</a></h2>

<p>There are two layers of constructors and destructors. There&#39;s the Perl constructor, often called <code>new</code>, which actually constructs the object. Then there&#39;s the initializer, which C++ and Java call the constructor, under the name <code>BUILD</code>. <code>Perl6::Classes</code> takes care of the constructor for you, and allows you to specify the initializer, usually as a <code>submethod</code>.</p>

<p>The naming is a bit less intuitive as far as destructors. Perl herself doesn&#39;t let you specify a real destructor, just a de-initialzer which is called just before the memory is reclaimed. This is under the name <code>DESTROY</code>. But <code>Perl6::Classes</code> handles that for you and allows you to specify <code>DESTRUCT</code>, which essentially does the same thing, except when you&#39;re inheriting.</p>

<p><code>Perl6::Classes</code> doesn&#39;t pay attention to (de-)initializer return values, so if an error occurs, you should throw an exception. Perl will ignore the exception if it&#39;s in the destructor.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Constructors_and_Destructors_and_Inheritance"
>Constructors and Destructors and Inheritance</a></h3>

<p>When you&#39;re inheriting base classes, each base class&#39;s constructor is called before the derived one, in the order specified on the declaration line. This happens even if the derived class explicitly specifies an initializer. Similarly, each base class&#39;s destructor is called <i>after</i> the derived one, in the reverse order.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Data_Hiding"
>Data Hiding</a></h2>

<p><code>Perl6::Classes</code> offers standard run-time data protection, for whatever it&#39;s worth. It is specified on methods (and subs and submethods) by using traits. Particularly, <code>is public</code>, <code>is protected</code>, and <code>is private</code>. Traits are specified right after the signature (or the absence thereof) of a declaration. For instance:</p>

<pre class="sh_perl">    class Thingy {
        method describe { print $_-&#62;description, &#34;\n&#34;; }
        method baseclass is protected { &#34;Thingy&#34; }
        method description is private { &#34;This &#34; . $-&#62;baseclass . &#34; is neat&#34; }
    }</pre>

<p>This class allows you to override anything, but is probably hoping you&#39;ll override <code>description</code>. However, clients of <code>Thingy</code> can only access <code>describe</code>. Classes derived from <code>Thingy</code> may access <code>describe</code> and <code>baseclass</code>, and only the <code>describe</code> method (and other potential <code>Thingy</code> methods) can access <code>description</code>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Data_Hiding_and_Constructors"
>Data Hiding and Constructors</a></h3>

<p>It is sometimes useful to make a private or protected constructor, saying that &#34;only my children or I are allowed to make me&#34;. But, making <code>BUILD</code> private doesn&#39;t work, becuase <code>BUILD</code> is called through the implicit <code>sub new</code>. What you really need to do is make <code>new</code> private. This is how:</p>

<pre class="sh_perl">    class Handle {
       sub new is private { ... }
       sub makeHandle { new Handle }
    }</pre>

<p>Now, <code>new Handle</code> from outside the class will cause an error, but <code>makeHandle</code> works fine. You may put yada-yada-yada (...) inside that as in the example, as the codeblock specified is never compiled. The declaration there is just to specify scope.</p>

<p>Note that a class with a private constructor may not effectively be derived from, as it will croak when the derived class tries to construct it. However, it is possible to specify an abstract class by making the constructor <code>protected</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Traps_for_the_unwary"
>Traps for the unwary</a></h2>

<p>As just mentioned, <code>new</code>&#39;s body is never compiled. You could catch yourself off guard by specifying a body, and seeing it never run. Future versions may check that the body of new is either unspecified or exactly &#34;...&#34;.</p>

<p>Do not attempt to explicitly bless into a <code>Perl6::Classes</code> class. Always use the <code>new</code> function. Sure, a real package is created, but the subs in it don&#39;t behave how you&#39;d think they would.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There are undoubtedly bugs that I don&#39;t mention here. I mean, it&#39;s a source filter.</p>

<ul>
<li>Code like this:
<pre class="sh_perl">    class Foo is Bar { 
        method go { $_-&#62;Bar::go }
    }</pre>

<p>Doesn&#39;t work the way you want it to. Instead, it calls Foo::go.</p>
</li>

<li>At the moment, line numbers in your source get all messed up by using a <code>class</code>.</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?perlobj" class="podlinkpod"
>perlobj</a>, <a href="/perldoc?Class%3A%3AStruct" class="podlinkpod"
>Class::Struct</a>, <a href="/perldoc?Class%3A%3A*" class="podlinkpod"
>Class::*</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Both the <code>Perl6::Classes</code> module and this documentation were written by Luke Palmer (<code>fibonaci@babylonia.flatirons.org</code>).</p>

<p>This module is licenced under the same terms as Perl itself. Copyright (C) 2003, Luke Palmer.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78269 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 23:26:07 2012 GMT (0.349493026733398) @cpansearch1 -->
 </body>
</html>
