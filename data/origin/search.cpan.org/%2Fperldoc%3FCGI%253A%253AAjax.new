<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>CGI::Ajax - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","CGI-Ajax",3]);
    _gaq.push(["_setCustomVar",5,"Release","CGI-Ajax-0.707",3]);
    _gaq.push(["_setCustomVar",3,"Module","CGI::Ajax",3]);
    _gaq.push(["_setCustomVar",1,"Author","BPEDERSE",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?CGI::Ajax">permalink</a></div>
  <a href="/~bpederse/">Brent Pedersen</a> &gt;
  <a href="/~bpederse/CGI-Ajax-0.707/">CGI-Ajax-0.707</a> &gt;
  CGI::Ajax
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/fe78865ab8a6489899b108f3715cd31c?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/B/BP/BPEDERSE/CGI-Ajax-0.707.tar.gz">CGI-Ajax-0.707.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=CGI%3A%3AAjax;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~BPEDERSE/CGI-Ajax-0.707/lib/CGI/Ajax.pm">Annotate this POD
(7)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?CGI%3A%3ACarp">CGI::Carp</a><br>
<a href="/perldoc?Apache2%3A%3AAjax">Apache2::Ajax</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?Class%3A%3AAccessor">Class::Accessor</a><br>
<a href="/perldoc?CGI%3A%3AApplication">CGI::Application</a><br>
<a href="/perldoc?Parse%3A%3ARecDescent">Parse::RecDescent</a><br>
<a href="/perldoc?Digest%3A%3AMD5">Digest::MD5</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Apache%3A%3Atest">Apache::test</a><br>
<a href="/perldoc?CGI%3A%3AMinimal">CGI::Minimal</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=CGI%3A%3AAjax">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 22</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=CGI-Ajax">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.707 &nbsp;
<span class="noprint">
  <a href="/src/BPEDERSE/CGI-Ajax-0.707/lib/CGI/Ajax.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#4_Usage_Methods'>4 Usage Methods</a>
    <li class='indexItem indexItem2'><a href='#GET_versus_POST'>GET versus POST</a>
    <li class='indexItem indexItem2'><a href='#Page_Caching'>Page Caching</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#SUPPORT'>SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#A_NOTE_ABOUT_THE_MODULE_NAME'>A NOTE ABOUT THE MODULE NAME</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>CGI::Ajax - a perl-specific system for writing Asynchronous web applications</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use strict;
  use CGI;      # or any other CGI:: form handler/decoder
  use CGI::Ajax;

  my $cgi = new CGI;
  my $pjx = new CGI::Ajax( &#39;exported_func&#39; =&#62; \&#38;perl_func );
  print $pjx-&#62;build_html( $cgi, \&#38;Show_HTML);

  sub perl_func {
    my $input = shift;
    # do something with $input
    my $output = $input . &#34; was the input!&#34;;
    return( $output );
  }

  sub Show_HTML {
    my $html = &#60;&#60;EOHTML;
    &#60;HTML&#62;
    &#60;BODY&#62;
      Enter something: 
        &#60;input type=&#34;text&#34; name=&#34;val1&#34; id=&#34;val1&#34;
         onkeyup=&#34;exported_func( [&#39;val1&#39;], [&#39;resultdiv&#39;] );&#34;&#62;
      &#60;br&#62;
      &#60;div id=&#34;resultdiv&#34;&#62;&#60;/div&#62;
    &#60;/BODY&#62;
    &#60;/HTML&#62;
  EOHTML
    return $html;
  }</pre>

<p>When you use CGI::Ajax within Applications that send their own header information, you can skip the header:</p>

<pre class="sh_perl">  my $pjx = new CGI::Ajax(
    &#39;exported_func&#39; =&#62; \&#38;perl_func,
    &#39;skip_header&#39;   =&#62; 1,
  );
  $pjx-&#62;skip_header(1);
  
  print $pjx-&#62;build_html( $cgi, \&#38;Show_HTML);</pre>

<p><i>There are several fully-functional examples in the &#39;scripts/&#39; directory of the distribution.</i></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>CGI::Ajax is an object-oriented module that provides a unique mechanism for using perl code asynchronously from javascript- enhanced HTML pages. CGI::Ajax unburdens the user from having to write extensive javascript, except for associating an exported method with a document-defined event (such as onClick, onKeyUp, etc). CGI::Ajax also mixes well with HTML containing more complex javascript.</p>

<p>CGI::Ajax supports methods that return single results or multiple results to the web page, and supports returning values to multiple DIV elements on the HTML page.</p>

<p>Using CGI::Ajax, the URL for the HTTP GET/POST request is automatically generated based on HTML layout and events, and the page is then dynamically updated with the output from the perl function. Additionally, CGI::Ajax supports mapping URL&#39;s to a CGI::Ajax function name, so you can separate your code processing over multiple scripts.</p>

<p>Other than using the Class::Accessor module to generate CGI::Ajax&#39; accessor methods, CGI::Ajax is completely self-contained - it does not require you to install a larger package or a full Content Management System, etc.</p>

<p>We have added <i>support</i> for other CGI handler/decoder modules, like <a href="/perldoc?CGI%3A%3ASimple" class="podlinkpod"
>CGI::Simple</a> or <a href="/perldoc?CGI%3A%3AMinimal" class="podlinkpod"
>CGI::Minimal</a>, but we can&#39;t test these since we run mod_perl2 only here. CGI::Ajax checks to see if a header() method is available to the CGI object, and then uses it. If method() isn&#39;t available, it creates it&#39;s own minimal header.</p>

<p>A primary goal of CGI::Ajax is to keep the module streamlined and maximally flexible. We are trying to keep the generated javascript code to a minimum, but still provide users with a variety of methods for deploying CGI::Ajax. And VERY little user javascript.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The CGI::Ajax module allows a Perl subroutine to be called asynchronously, when triggered from a javascript event on the HTML page. To do this, the subroutine must be <i>registered</i>, usually done during:</p>

<pre class="sh_perl">  my $pjx = new CGI::Ajax( &#39;JSFUNC&#39; =&#62; \&#38;PERLFUNC );</pre>

<p>This maps a perl subroutine (PERLFUNC) to an automatically generated Javascript function (JSFUNC). Next you setup a trigger this function when an event occurs (e.g. &#34;onClick&#34;):</p>

<pre class="sh_perl">  onClick=&#34;JSFUNC([&#39;source1&#39;,&#39;source2&#39;], [&#39;dest1&#39;,&#39;dest2&#39;]);&#34;</pre>

<p>where &#39;source1&#39;, &#39;dest1&#39;, &#39;source2&#39;, &#39;dest2&#39; are the DIV ids of HTML elements in your page...</p>

<pre class="sh_perl">  &#60;input type=text id=source1&#62;
  &#60;input type=text id=source2&#62;
  &#60;div id=dest1&#62;&#60;/div&#62;
  &#60;div id=dest2&#62;&#60;/div&#62;</pre>

<p><a href="/~bpederse/CGI-Ajax-0.707/lib/CGI/Ajax.pm" class="podlinkpod"
>CGI::Ajax</a> sends the values from source1 and source2 to your Perl subroutine and returns the results to dest1 and dest2.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="4_Usage_Methods"
>4 Usage Methods</a></h2>

<dl>
<dt><a name='1'></a><a name="1_Standard_CGI::Ajax_example"
>1 Standard CGI::Ajax example</a></dt>

<dd>
<p>Start by defining a perl subroutine that you want available from javascript. In this case we&#39;ll define a subrouting that determines whether or not an input is odd, even, or not a number (NaN):</p>

<pre class="sh_perl">  use strict;
  use CGI::Ajax;
  use CGI;


  sub evenodd_func {
    my $input = shift;

    # see if input is defined
    if ( not defined $input ) {
      return(&#34;input not defined or NaN&#34;);
    }

    # see if value is a number (*thanks Randall!*)
    if ( $input !~ /\A\d+\z/ ) {
      return(&#34;input is NaN&#34;);
    }

    # got a number, so mod by 2
    $input % 2 == 0 ? return(&#34;EVEN&#34;) : return(&#34;ODD&#34;);
  }</pre>

<p>Alternatively, we could have used coderefs to associate an exported name...</p>

<pre class="sh_perl">  my $evenodd_func = sub {
    # exactly the same as in the above subroutine
  };</pre>

<p>Next we define a function to generate the web page - this can be done many different ways, and can also be defined as an anonymous sub. The only requirement is that the sub send back the html of the page. You can do this via a string containing the html, or from a coderef that returns the html, or from a function (as shown here)...</p>

<pre class="sh_perl">  sub Show_HTML {
    my $html = &#60;&#60;EOT;
  &#60;HTML&#62;
  &#60;HEAD&#62;&#60;title&#62;CGI::Ajax Example&#60;/title&#62;
  &#60;/HEAD&#62;
  &#60;BODY&#62;
    Enter a number:&#38;nbsp;
    &#60;input type=&#34;text&#34; name=&#34;somename&#34; id=&#34;val1&#34; size=&#34;6&#34;
       OnKeyUp=&#34;evenodd( [&#39;val1&#39;], [&#39;resultdiv&#39;] );&#34;&#62;
    &#60;br&#62;
    &#60;hr&#62;
    &#60;div id=&#34;resultdiv&#34;&#62;
    &#60;/div&#62;
  &#60;/BODY&#62;
  &#60;/HTML&#62;
EOT
    return $html;
  }</pre>

<p>The exported Perl subrouting is triggered using the <code>OnKeyUp</code> event handler of the input HTML element. The subroutine takes one value from the form, the input element <b>&#39;val1&#39;</b>, and returns the the result to an HTML div element with an id of <b>&#39;resultdiv&#39;</b>. Sending in the input id in an array format is required to support multiple inputs, and similarly, to output multiple the results, you can use an array for the output divs, but this isn&#39;t mandatory - as will be explained in the <b>Advanced</b> usage.</p>

<p>Now create a CGI object and a CGI::Ajax object, associating a reference to our subroutine with the name we want available to javascript.</p>

<pre class="sh_perl">  my $cgi = new CGI();
  my $pjx = new CGI::Ajax( &#39;evenodd&#39; =&#62; \&#38;evenodd_func );</pre>

<p>And if we used a coderef, it would look like this...</p>

<pre class="sh_perl">  my $pjx = new CGI::Ajax( &#39;evenodd&#39; =&#62; $evenodd_func );</pre>

<p>Now we&#39;re ready to print the output page; we send in the cgi object and the HTML-generating function.</p>

<pre class="sh_perl">  print $pjx-&#62;build_html($cgi,\&#38;Show_HTML);</pre>

<p>CGI::Ajax has support for passing in extra HTML header information to the CGI object. This can be accomplished by adding a third argument to the build_html() call. The argument needs to be a hashref containing Key=&#62;value pairs that CGI objects understand:</p>

<pre class="sh_perl">  print $pjx-&#62;build_html($cgi,\&#38;Show_HTML,
    {-charset=&#62;&#39;UTF-8, -expires=&#62;&#39;-1d&#39;});</pre>

<p>See <a href="/perldoc?CGI" class="podlinkpod"
>CGI</a> for more header() method options. (CGI.pm, not the Perl6 CGI)</p>

<p>That&#39;s it for the CGI::Ajax standard method. Let&#39;s look at something more advanced.</p>

<dt><a name='2'></a><a name="2_Advanced_CGI::Ajax_example"
>2 Advanced CGI::Ajax example</a></dt>

<dd>
<p>Let&#39;s say we wanted to have a perl subroutine process multiple values from the HTML page, and similarly return multiple values back to distinct divs on the page. This is easy to do, and requires no changes to the perl code - you just create it as you would any perl subroutine that works with multiple input values and returns multiple values. The significant change happens in the event handler javascript in the HTML...</p>

<pre class="sh_perl">  onClick=&#34;exported_func([&#39;input1&#39;,&#39;input2&#39;],[&#39;result1&#39;,&#39;result2&#39;]);&#34;</pre>

<p>Here we associate our javascript function (&#34;exported_func&#34;) with two HTML element ids (&#39;input1&#39;,&#39;input2&#39;), and also send in two HTML element ids to place the results in (&#39;result1&#39;,&#39;result2&#39;).</p>

<dt><a name='3'></a><a name="3_Sending_Perl_Subroutine_Output_to_a_Javascript_function"
>3 Sending Perl Subroutine Output to a Javascript function</a></dt>

<dd>
<p>Occassionally, you might want to have a custom javascript function process the returned information from your Perl subroutine. This is possible, and the only requierment is that you change your event handler code...</p>

<pre class="sh_perl">  onClick=&#34;exported_func([&#39;input1&#39;],[js_process_func]);&#34;</pre>

<p>In this scenario, <code>js_process_func</code> is a javascript function you write to take the returned value from your Perl subroutine and process the results. <i>Note that a javascript function is not quoted -- if it were, then CGI::Ajax would look for a HTML element with that id.</i> Beware that with this usage, <b>you are responsible for distributing the results to the appropriate place on the HTML page</b>. If the exported Perl subroutine returns, e.g. 2 values, then <code>js_process_func</code> would need to process the input by working through an array, or using the javascript Function <code>arguments</code> object.</p>

<pre class="sh_perl">  function js_process_func() {
    var input1 = arguments[0]
    var input2 = arguments[1];
    // do something and return results, or set HTML divs using
    // innerHTML
    document.getElementById(&#39;outputdiv&#39;).innerHTML = input1;
  }</pre>

<dt><a name='4'></a><a name="4_URL/Outside_Script_CGI::Ajax_example"
>4 URL/Outside Script CGI::Ajax example</a></dt>

<dd>
<p>There are times when you may want a different script to return content to your page. This could be because you have an existing script already written to perform a particular task, or you want to distribute a part of your application to another script. This can be accomplished in <a href="/~bpederse/CGI-Ajax-0.707/lib/CGI/Ajax.pm" class="podlinkpod"
>CGI::Ajax</a> by using a URL in place of a locally-defined Perl subroutine. In this usage, you alter you creation of the <a href="/~bpederse/CGI-Ajax-0.707/lib/CGI/Ajax.pm" class="podlinkpod"
>CGI::Ajax</a> object to link an exported javascript function name to a local URL instead of a coderef or a subroutine.</p>

<pre class="sh_perl">  my $url = &#39;scripts/other_script.pl&#39;;
  my $pjx = new CGI::Ajax( &#39;external&#39; =&#62; $url );</pre>

<p>This will work as before in terms of how it is called from you event handler:</p>

<pre class="sh_perl">  onClick=&#34;external([&#39;input1&#39;,&#39;input2&#39;],[&#39;resultdiv&#39;]);&#34;</pre>

<p>The other_script.pl will get the values via a CGI object and accessing the &#39;args&#39; key. The values of the <b>&#39;args&#39;</b> key will be an array of everything that was sent into the script.</p>

<pre class="sh_perl">  my @input = $cgi-&#62;params(&#39;args&#39;);
  $input[0]; # contains first argument
  $input[1]; # contains second argument, etc...</pre>

<p>This is good, but what if you need to send in arguments to the other script which are directly from the calling Perl script, i.e. you want a calling Perl script&#39;s variable to be sent, not the value from an HTML element on the page? This is possible using the following syntax:</p>

<pre class="sh_perl">  onClick=&#34;exported_func([&#39;args__$input1&#39;,&#39;args__$input2&#39;],
                         [&#39;resultdiv&#39;]);&#34;</pre>

<p>Similary, if the external script required a constant as input (e.g. <code>script.pl?args=42</code>, you would use this syntax:</p>

<pre class="sh_perl">  onClick=&#34;exported_func([&#39;args__42&#39;],[&#39;resultdiv&#39;]);&#34;</pre>

<p>In both of the above examples, the result from the external script would get placed into the <i>resultdiv</i> element on our (the calling script&#39;s) page.</p>

<p>If you are sending more than one argument from an external perl script back to a javascript function, you will need to split the string (AJAX applications communicate in strings only) on something. Internally, we use &#39;__pjx__&#39;, and this string is checked for. If found, <a href="/~bpederse/CGI-Ajax-0.707/lib/CGI/Ajax.pm" class="podlinkpod"
>CGI::Ajax</a> will automatically split it. However, if you don&#39;t want to use &#39;__pjx__&#39;, you can do it yourself:</p>

<p>For example, from your Perl script, you would...</p>

<pre class="sh_perl">        return(&#34;A|B&#34;); # join with &#34;|&#34;</pre>

<p>and then in the javascript function you would have something like...</p>

<pre class="sh_perl">        process_func() {
                var arr = arguments[0].split(&#34;|&#34;);
                // arr[0] eq &#39;A&#39;
                // arr[1] eq &#39;B&#39;
        }</pre>

<p>In order to rename parameters, in case the outside script needs specifically-named parameters and not CGI::Ajax&#39; <i>&#39;args&#39;</i> default parameter name, change your event handler associated with an HTML event like this</p>

<pre class="sh_perl">  onClick=&#34;exported_func([&#39;myname__$input1&#39;,&#39;myparam__$input2&#39;],
                         [&#39;resultdiv&#39;]);&#34;</pre>

<p>The URL generated would look like this...</p>

<p><code>script.pl?myname=input1&#38;myparam=input2</code></p>

<p>You would then retrieve the input in the outside script with this...</p>

<pre class="sh_perl">  my $p1 = $cgi-&#62;params(&#39;myname&#39;);
  my $p1 = $cgi-&#62;params(&#39;myparam&#39;);</pre>

<p>Finally, what if we need to get a value from our HTML page and we want to send that value to an outside script but the outside script requires a named parameter different from <i>&#39;args&#39;</i>? You can accomplish this with <a href="/~bpederse/CGI-Ajax-0.707/lib/CGI/Ajax.pm" class="podlinkpod"
>CGI::Ajax</a> using the getVal() javascript method (which returns an array, thus the <code>getVal()[0]</code> notation):</p>

<pre class="sh_perl">  onClick=&#34;exported_func([&#39;myparam__&#39; + getVal(&#39;div_id&#39;)[0]],
                         [&#39;resultdiv&#39;]);&#34;</pre>

<p>This will get the value of our HTML element with and <i>id</i> of <i>div_id</i>, and submit it to the url attached to <i>myparam__</i>. So if our exported handler referred to a URI called <i>script/scr.pl</i>, and the element on our HTML page called <i>div_id</i> contained the number &#39;42&#39;, then the URL would look like this <code>script/scr.pl?myparam=42</code>. The result from this outside URL would get placed back into our HTML page in the element <i>resultdiv</i>. See the example script that comes with the distribution called <i>pjx_url.pl</i> and its associated outside script <i>convert_degrees.pl</i> for a working example.</p>

<p><b>N.B.</b> These examples show the use of outside scripts which are other perl scripts - <i>but you are not limited to Perl</i>! The outside script could just as easily have been PHP or any other CGI script, as long as the return from the other script is just the result, and not addition HTML code (like FORM elements, etc).</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="GET_versus_POST"
>GET versus POST</a></h2>

<p>Note that all the examples so far have used the following syntax:</p>

<pre class="sh_perl">  onClick=&#34;exported_func([&#39;input1&#39;],[&#39;result1&#39;]);&#34;</pre>

<p>There is an optional third argument to a <a href="/~bpederse/CGI-Ajax-0.707/lib/CGI/Ajax.pm" class="podlinkpod"
>CGI::Ajax</a> exported function that allows change the submit method. The above event could also have been coded like this...</p>

<pre class="sh_perl">  onClick=&#34;exported_func([&#39;input1&#39;],[&#39;result1&#39;], &#39;GET&#39;);&#34;</pre>

<p>By default, <a href="/~bpederse/CGI-Ajax-0.707/lib/CGI/Ajax.pm" class="podlinkpod"
>CGI::Ajax</a> sends a <i>&#39;GET&#39;</i> request. If you need it, for example your URL is getting way too long, you can easily switch to a <i>&#39;POST&#39;</i> request with this syntax...</p>

<pre class="sh_perl">  onClick=&#34;exported_func([&#39;input1&#39;],[&#39;result1&#39;], &#39;POST&#39;);&#34;</pre>

<p><i>(&#39;POST&#39; and &#39;post&#39; are supported)</i></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Page_Caching"
>Page Caching</a></h2>

<p>We have implemented a method to prevent page cacheing from undermining the AJAX methods in a page. If you send in an input argument to a <a href="/~bpederse/CGI-Ajax-0.707/lib/CGI/Ajax.pm" class="podlinkpod"
>CGI::Ajax</a>-exported function called &#39;NO_CACHE&#39;, the a special parameter will get attached to the end or your url with a random number in it. This will prevent a browser from caching your request.</p>

<pre class="sh_perl">  onClick=&#34;exported_func([&#39;input1&#39;,&#39;NO_CACHE&#39;],[&#39;result1&#39;]);&#34;</pre>

<p>The extra param is called pjxrand, and won&#39;t interfere with the order of processing for the rest of your parameters.</p>

<p>Also see the CACHE() method of changing the default cache behavior.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='build_html'></a><a name="build_html()"
>build_html()</a></dt>

<dd>
<pre class="sh_perl">    Purpose: Associates a cgi obj ($cgi) with pjx object, inserts
             javascript into &#60;HEAD&#62;&#60;/HEAD&#62; element and constructs
             the page, or part of the page.  AJAX applications
             are designed to update only the section of the
             page that needs it - the whole page doesn&#39;t have
             to be redrawn.  L&#60;CGI::Ajax&#62; applications use the
             build_html() method to take care of this: if the CGI
             parameter C&#60;fname&#62; exists, then the return from the
             L&#60;CGI::Ajax&#62;-exported function is sent to the page.
             Otherwise, the entire page is sent, since without
             an C&#60;fname&#62; param, this has to be the first time
             the page is being built.

  Arguments: The CGI object, and either a coderef, or a string
             containing html.  Optionally, you can send in a third
             parameter containing information that will get passed
             directly to the CGI object header() call.
    Returns: html or updated html (including the header)
  Called By: originating cgi script</pre>

<dt><a name='show_javascript'></a><a name="show_javascript()"
>show_javascript()</a></dt>

<dd>
<pre class="sh_perl">    Purpose: builds the text of all the javascript that needs to be
             inserted into the calling scripts html &#60;head&#62; section
  Arguments:
    Returns: javascript text
  Called By: originating web script
       Note: This method is also overridden so when you just print
             a CGI::Ajax object it will output all the javascript needed
             for the web page.</pre>

<dt><a name='register'></a><a name="register()"
>register()</a></dt>

<dd>
<pre class="sh_perl">    Purpose: adds a function name and a code ref to the global coderef
             hash, after the original object was created
  Arguments: function name, code reference
    Returns: none
  Called By: originating web script</pre>

<dt><a name='fname'></a><a name="fname()"
>fname()</a></dt>

<dd>
<pre class="sh_perl">    Purpose: Overrides the default parameter name used for
             passing an exported function name. Default value
             is &#34;fname&#34;.

  Arguments: fname(&#34;new_name&#34;); # sets the new parameter name
             The overriden fname should be consistent throughout 
             the entire application. Otherwise results are unpredicted.

    Returns: With no parameters fname() returns the current fname name</pre>

<dt><a name='JSDEBUG'></a><a name="JSDEBUG()"
>JSDEBUG()</a></dt>

<dd>
<pre class="sh_perl">    Purpose: Show the AJAX URL that is being generated, and stop
             compression of the generated javascript, both of which can aid
             during debugging.  If set to 1, then the core js will get
             compressed, but the user-defined functions will not be
             compressed.  If set to 2 (or anything greater than 1 or 0), 
             then none of the javascript will get compressed.

  Arguments: JSDEBUG(0); # turn javascript debugging off
             JSDEBUG(1); # turn javascript debugging on, some javascript compression
             JSDEBUG(2); # turn javascript debugging on, no javascript compresstion
    Returns: prints a link to the url that is being generated automatically by
             the Ajax object. this is VERY useful for seeing what
             CGI::Ajax is doing. Following the link, will show a page
             with the output that the page is generating.
             
  Called By: $pjx-&#62;JSDEBUG(1) # where $pjx is a CGI::Ajax object;</pre>

<dt><a name='DEBUG'></a><a name="DEBUG()"
>DEBUG()</a></dt>

<dd>
<pre class="sh_perl">    Purpose: Show debugging information in web server logs
  Arguments: DEBUG(0); # turn debugging off (default)
             DEBUG(1); # turn debugging on
    Returns: prints debugging information to the web server logs using
             STDERR
  Called By: $pjx-&#62;DEBUG(1) # where $pjx is a CGI::Ajax object;</pre>

<dt><a name='CACHE'></a><a name="CACHE()"
>CACHE()</a></dt>

<dd>
<pre class="sh_perl">    Purpose: Alter the default result caching behavior.
  Arguments: CACHE(0); # effectively the same as having NO_CACHE passed in every call
    Returns: A change in the behavior of build_html such that the javascript
             produced will always act as if the NO_CACHE argument is passed,
             regardless of its presence.
  Called By: $pjx-&#62;CACHE(0) # where $pjx is a CGI::Ajax object;</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Follow any bugs at our homepage....</p>

<pre class="sh_perl">  <a href="http://www.perljax.us" class="podlinkurl"
>http://www.perljax.us</a></pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT"
>SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Check out the news/discussion/bugs lists at our homepage:</p>

<pre class="sh_perl">  <a href="http://www.perljax.us" class="podlinkurl"
>http://www.perljax.us</a></pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  Brian C. Thomas     Brent Pedersen
  CPAN ID: BCT
  bct.x42@gmail.com   bpederse@gmail.com

  significant contribution by:
      Peter Gordon &#60;peter@pg-consultants.com&#62; # CGI::Application + scripts
      Kyraha  <a href="http://michael.kyraha.com/" class="podlinkurl"
>http://michael.kyraha.com/</a>      # getVal(), multiple forms
      Jan Franczak &#60;jan.franczak@gmail.com&#62;   # CACHE support
      Shibi NS                                # use -&#62;isa instead of -&#62;can
     
  others:
      RENEEB &#60;RENEEB [...] cpan.org&#62; 
      stefan.scherer
      RBS
      Andrew</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="A_NOTE_ABOUT_THE_MODULE_NAME"
>A NOTE ABOUT THE MODULE NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module was initiated using the name &#34;Perljax&#34;, but then registered with CPAN under the WWW group &#34;CGI::&#34;, and so became &#34;CGI::Perljax&#34;. Upon further deliberation, we decided to change it&#39;s name to <a href="/~bpederse/CGI-Ajax-0.707/lib/CGI/Ajax.pm" class="podlinkpod"
>CGI::Ajax</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>The full text of the license can be found in the LICENSE file included with this module.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?Data%3A%3AJavascript" class="podlinkpod"
>Data::Javascript</a> <a href="/perldoc?CGI" class="podlinkpod"
>CGI</a> <a href="/perldoc?Class%3A%3AAccessor" class="podlinkpod"
>Class::Accessor</a></p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78262 Uploads, 24722 Distributions
105996 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 15:05:19 2012 GMT (0.132807970046997) @cpansearch1 -->
 </body>
</html>
