<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Moose::Cookbook::Basics::Recipe5 - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Moose",3]);
    _gaq.push(["_setCustomVar",5,"Release","Moose-2.0403",3]);
    _gaq.push(["_setCustomVar",4,"Document","Moose::Cookbook::Basics::Recipe5",3]);
    _gaq.push(["_setCustomVar",1,"Author","DOY",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Moose::Cookbook::Basics::Recipe5">permalink</a></div>
  <a href="/~doy/">Jesse Luehrs</a> &gt;
  <a href="/~doy/Moose-2.0403/">Moose-2.0403</a> &gt;
  Moose::Cookbook::Basics::Recipe5
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/88766de7a058697d3d0335b8d384fd2a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DO/DOY/Moose-2.0403.tar.gz">Moose-2.0403.tar.gz</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DOY/Moose-2.0403/lib/Moose/Cookbook/Basics/Recipe5.pod">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 13</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 27</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=Moose">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
<span class="noprint">
  <a href="/src/DOY/Moose-2.0403/lib/Moose/Cookbook/Basics/Recipe5.pod">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#CONCLUSION'>CONCLUSION</a>
  <li class='indexItem indexItem1'><a href='#FOOTNOTES'>FOOTNOTES</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose::Cookbook::Basics::Recipe5 - More subtypes,
coercion in a <b>Request</b> class</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>version 2.0403</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  package Request;
  use Moose;
  use Moose::Util::TypeConstraints;

  use HTTP::Headers  ();
  use Params::Coerce ();
  use URI            ();

  subtype &#39;My::Types::HTTP::Headers&#39; =&#62; as class_type(&#39;HTTP::Headers&#39;);

  coerce &#39;My::Types::HTTP::Headers&#39;
      =&#62; from &#39;ArrayRef&#39;
          =&#62; via { HTTP::Headers-&#62;new( @{$_} ) }
      =&#62; from &#39;HashRef&#39;
          =&#62; via { HTTP::Headers-&#62;new( %{$_} ) };

  subtype &#39;My::Types::URI&#39; =&#62; as class_type(&#39;URI&#39;);

  coerce &#39;My::Types::URI&#39;
      =&#62; from &#39;Object&#39;
          =&#62; via { $_-&#62;isa(&#39;URI&#39;)
                   ? $_
                   : Params::Coerce::coerce( &#39;URI&#39;, $_ ); }
      =&#62; from &#39;Str&#39;
          =&#62; via { URI-&#62;new( $_, &#39;http&#39; ) };

  subtype &#39;Protocol&#39;
      =&#62; as &#39;Str&#39;
      =&#62; where { /^HTTP\/[0-9]\.[0-9]$/ };

  has &#39;base&#39; =&#62; ( is =&#62; &#39;rw&#39;, isa =&#62; &#39;My::Types::URI&#39;, coerce =&#62; 1 );
  has &#39;uri&#39;  =&#62; ( is =&#62; &#39;rw&#39;, isa =&#62; &#39;My::Types::URI&#39;, coerce =&#62; 1 );
  has &#39;method&#39;   =&#62; ( is =&#62; &#39;rw&#39;, isa =&#62; &#39;Str&#39; );
  has &#39;protocol&#39; =&#62; ( is =&#62; &#39;rw&#39;, isa =&#62; &#39;Protocol&#39; );
  has &#39;headers&#39;  =&#62; (
      is      =&#62; &#39;rw&#39;,
      isa     =&#62; &#39;My::Types::HTTP::Headers&#39;,
      coerce  =&#62; 1,
      default =&#62; sub { HTTP::Headers-&#62;new }
  );</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This recipe introduces type coercions, which are defined with the <code>coerce</code> sugar function. Coercions are attached to existing type constraints, and define a (one-way) transformation from one type to another.</p>

<p>This is very powerful, but it can also have unexpected consequences, so you have to explicitly ask for an attribute to be coerced. To do this, you must set the <code>coerce</code> attribute option to a true value.</p>

<p>First, we create the subtype to which we will coerce the other types:</p>

<pre class="sh_perl">  subtype &#39;My::Types::HTTP::Headers&#39; =&#62; as class_type(&#39;HTTP::Headers&#39;);</pre>

<p>We are creating a subtype rather than using <code>HTTP::Headers</code> as a type directly. The reason we do this is that coercions are global, and a coercion defined for <code>HTTP::Headers</code> in our <code>Request</code> class would then be defined for <i>all</i> Moose-using classes in the current Perl interpreter. It&#39;s a <a href="/~doy/Moose-2.0403/lib/Moose/Manual/BestPractices.pod" class="podlinkpod"
>best practice</a> to avoid this sort of namespace pollution.</p>

<p>The <code>class_type</code> sugar function is simply a shortcut for this:</p>

<pre class="sh_perl">  subtype &#39;HTTP::Headers&#39;
      =&#62; as &#39;Object&#39;
      =&#62; where { $_-&#62;isa(&#39;HTTP::Headers&#39;) };</pre>

<p>Internally, Moose creates a type constraint for each Moose-using class, but for non-Moose classes, the type must be declared explicitly.</p>

<p>We could go ahead and use this new type directly:</p>

<pre class="sh_perl">  has &#39;headers&#39; =&#62; (
      is      =&#62; &#39;rw&#39;,
      isa     =&#62; &#39;My::Types::HTTP::Headers&#39;,
      default =&#62; sub { HTTP::Headers-&#62;new }
  );</pre>

<p>This creates a simple attribute which defaults to an empty instance of <a href="/perldoc?HTTP%3A%3AHeaders" class="podlinkpod"
>HTTP::Headers</a>.</p>

<p>The constructor for <a href="/perldoc?HTTP%3A%3AHeaders" class="podlinkpod"
>HTTP::Headers</a> accepts a list of key-value pairs representing the HTTP header fields. In Perl, such a list could be stored in an ARRAY or HASH reference. We want our <code>headers</code> attribute to accept those data structures instead of an <b>HTTP::Headers</b> instance, and just do the right thing. This is exactly what coercion is for:</p>

<pre class="sh_perl">  coerce &#39;My::Types::HTTP::Headers&#39;
      =&#62; from &#39;ArrayRef&#39;
          =&#62; via { HTTP::Headers-&#62;new( @{$_} ) }
      =&#62; from &#39;HashRef&#39;
          =&#62; via { HTTP::Headers-&#62;new( %{$_} ) };</pre>

<p>The first argument to <code>coerce</code> is the type <i>to</i> which we are coercing. Then we give it a set of <code>from</code>/<code>via</code> clauses. The <code>from</code> function takes some other type name and <code>via</code> takes a subroutine reference which actually does the coercion.</p>

<p>However, defining the coercion doesn&#39;t do anything until we tell Moose we want a particular attribute to be coerced:</p>

<pre class="sh_perl">  has &#39;headers&#39; =&#62; (
      is      =&#62; &#39;rw&#39;,
      isa     =&#62; &#39;My::Types::HTTP::Headers&#39;,
      coerce  =&#62; 1,
      default =&#62; sub { HTTP::Headers-&#62;new }
  );</pre>

<p>Now, if we use an <code>ArrayRef</code> or <code>HashRef</code> to populate <code>headers</code>, it will be coerced into a new <a href="/perldoc?HTTP%3A%3AHeaders" class="podlinkpod"
>HTTP::Headers</a> instance. With the coercion in place, the following lines of code are all equivalent:</p>

<pre class="sh_perl">  $foo-&#62;headers( HTTP::Headers-&#62;new( bar =&#62; 1, baz =&#62; 2 ) );
  $foo-&#62;headers( [ &#39;bar&#39;, 1, &#39;baz&#39;, 2 ] );
  $foo-&#62;headers( { bar =&#62; 1, baz =&#62; 2 } );</pre>

<p>As you can see, careful use of coercions can produce a very open interface for your class, while still retaining the &#34;safety&#34; of your type constraint checks. (1)</p>

<p>Our next coercion shows how we can leverage existing CPAN modules to help implement coercions. In this case we use <a href="/perldoc?Params%3A%3ACoerce" class="podlinkpod"
>Params::Coerce</a>.</p>

<p>Once again, we need to declare a class type for our non-Moose <a href="/perldoc?URI" class="podlinkpod"
>URI</a> class:</p>

<pre class="sh_perl">  subtype &#39;My::Types::URI&#39; =&#62; as class_type(&#39;URI&#39;);</pre>

<p>Then we define the coercion:</p>

<pre class="sh_perl">  coerce &#39;My::Types::URI&#39;
      =&#62; from &#39;Object&#39;
          =&#62; via { $_-&#62;isa(&#39;URI&#39;)
                   ? $_
                   : Params::Coerce::coerce( &#39;URI&#39;, $_ ); }
      =&#62; from &#39;Str&#39;
          =&#62; via { URI-&#62;new( $_, &#39;http&#39; ) };</pre>

<p>The first coercion takes any object and makes it a <code>URI</code> object. The coercion system isn&#39;t that smart, and does not check if the object is already a <a href="/perldoc?URI" class="podlinkpod"
>URI</a>, so we check for that ourselves. If it&#39;s not a <a href="/perldoc?URI" class="podlinkpod"
>URI</a> already, we let <a href="/perldoc?Params%3A%3ACoerce" class="podlinkpod"
>Params::Coerce</a> do its magic, and we just use its return value.</p>

<p>If <a href="/perldoc?Params%3A%3ACoerce" class="podlinkpod"
>Params::Coerce</a> didn&#39;t return a <a href="/perldoc?URI" class="podlinkpod"
>URI</a> object (for whatever reason), Moose would throw a type constraint error.</p>

<p>The other coercion takes a string and converts it to a <a href="/perldoc?URI" class="podlinkpod"
>URI</a>. In this case, we are using the coercion to apply a default behavior, where a string is assumed to be an <code>http</code> URI.</p>

<p>Finally, we need to make sure our attributes enable coercion.</p>

<pre class="sh_perl">  has &#39;base&#39; =&#62; ( is =&#62; &#39;rw&#39;, isa =&#62; &#39;My::Types::URI&#39;, coerce =&#62; 1 );
  has &#39;uri&#39;  =&#62; ( is =&#62; &#39;rw&#39;, isa =&#62; &#39;My::Types::URI&#39;, coerce =&#62; 1 );</pre>

<p>Re-using the coercion lets us enforce a consistent API across multiple attributes.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONCLUSION"
>CONCLUSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This recipe showed the use of coercions to create a more flexible and DWIM-y API. Like any powerful feature, we recommend some caution. Sometimes it&#39;s better to reject a value than just guess at how to DWIM.</p>

<p>We also showed the use of the <code>class_type</code> sugar function as a shortcut for defining a new subtype of <code>Object</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FOOTNOTES"
>FOOTNOTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='1'></a><a name="(1)"
>(1)</a></dt>

<dd>
<p>This particular example could be safer. Really we only want to coerce an array with an <i>even</i> number of elements. We could create a new <code>EvenElementArrayRef</code> type, and then coerce from that type, as opposed to a plain <code>ArrayRef</code></p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose is maintained by the Moose Cabal, along with the help of many contributors. See <a href="/~doy/Moose-2.0403/lib/Moose.pm#CABAL" class="podlinkpod"
>&#34;CABAL&#34; in Moose</a> and <a href="/~doy/Moose-2.0403/lib/Moose.pm#CONTRIBUTORS" class="podlinkpod"
>&#34;CONTRIBUTORS&#34; in Moose</a> for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This software is copyright (c) 2012 by Infinity Interactive, Inc..</p>

<p>This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78080 Uploads, 24688 Distributions
105904 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Document']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Document']);
    });
  });
</script>
<!-- Sun Apr 22 18:20:58 2012 GMT (0.156774044036865) @cpansearch1 -->
 </body>
</html>
