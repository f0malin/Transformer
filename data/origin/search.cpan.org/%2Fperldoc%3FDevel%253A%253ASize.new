<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Devel::Size - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Devel-Size",3]);
    _gaq.push(["_setCustomVar",5,"Release","Devel-Size-0.77",3]);
    _gaq.push(["_setCustomVar",3,"Module","Devel::Size",3]);
    _gaq.push(["_setCustomVar",1,"Author","NWCLARK",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Devel::Size">permalink</a></div>
  <a href="/~nwclark/">Nicholas Clark</a> &gt;
  <a href="/~nwclark/Devel-Size-0.77/">Devel-Size-0.77</a> &gt;
  Devel::Size
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/07de30f07490542c89820414e3027e95?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/N/NW/NWCLARK/Devel-Size-0.77.tar.gz">Devel-Size-0.77.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Devel%3A%3ASize;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~NWCLARK/Devel-Size-0.77/lib/Devel/Size.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Tie%3A%3AFile">Tie::File</a><br>
<a href="/perldoc?Devel%3A%3APeek">Devel::Peek</a><br>
<a href="/perldoc?Net%3A%3ASNMP">Net::SNMP</a><br>
<a href="/perldoc?Tie%3A%3ASubstrHash">Tie::SubstrHash</a><br>
<a href="/perldoc?WWW%3A%3AMechanize">WWW::Mechanize</a><br>
<a href="/perldoc?Inline%3A%3AC">Inline::C</a><br>
<a href="/perldoc?Time%3A%3AHiRes">Time::HiRes</a><br>
<a href="/perldoc?Devel%3A%3ALeak">Devel::Leak</a><br>
<a href="/perldoc?XML%3A%3AParser">XML::Parser</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Devel%3A%3ASize">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Devel-Size">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.77 &nbsp;
<span class="noprint">
  <a href="/src/NWCLARK/Devel-Size-0.77/lib/Devel/Size.pm">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~nwclark/Devel-Size/lib/Devel/Size.pm">Devel-Size-0.77_50</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#size($ref)'>size($ref)</a>
    <li class='indexItem indexItem2'><a href='#total_size($ref)'>total_size($ref)</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXPORT'>EXPORT</a>
  <li class='indexItem indexItem1'><a href='#UNDERSTANDING_MEMORY_ALLOCATION'>UNDERSTANDING MEMORY ALLOCATION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#The_C_library'>The C library</a>
    <li class='indexItem indexItem2'><a href='#Perl'>Perl</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#DANGERS'>DANGERS</a>
  <li class='indexItem indexItem1'><a href='#Messages:_texts_originating_from_this_module.'>Messages: texts originating from this module.</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Errors'>Errors</a>
    <li class='indexItem indexItem2'><a href='#warnings'>warnings</a>
    <li class='indexItem indexItem2'><a href='#New_warnings_since_0.72'>New warnings since 0.72</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Devel::Size - Perl extension for finding the memory usage of Perl variables</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Devel::Size qw(size total_size);

  my $size = size(&#34;A string&#34;);

  my @foo = (1, 2, 3, 4, 5);
  my $other_size = size(\@foo);

  my $foo = {a =&#62; [1, 2, 3],
      b =&#62; {a =&#62; [1, 3, 4]}
         };
  my $total_size = total_size($foo);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module figures out the real size of Perl variables in bytes, as accurately as possible.</p>

<p>Call functions with a reference to the variable you want the size of. If the variable is a plain scalar it returns the size of this scalar. If the variable is a hash or an array, use a reference when calling.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="size($ref)"
>size($ref)</a></h2>

<p>The <code>size</code> function returns the amount of memory the variable returns. If the variable is a hash or an array, it only reports the amount used by the structure, <i>not</i> the contents.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="total_size($ref)"
>total_size($ref)</a></h2>

<p>The <code>total_size</code> function will traverse the variable and look at the sizes of contents. Any references contained in the variable will also be followed, so this function can be used to get the total size of a multidimensional data structure. At the moment there is no way to get the size of an array or a hash and its elements without using this function.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORT"
>EXPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>None but default, but optionally <code>size</code> and <code>total_size</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="UNDERSTANDING_MEMORY_ALLOCATION"
>UNDERSTANDING MEMORY ALLOCATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Please note that the following discussion of memory allocation in perl is based on the perl 5.8.0 sources. While this is generally applicable to all versions of perl, some of the gory details are omitted. It also makes some presumptions on how your system memory allocator works so, while it will be generally correct, it may not exactly reflect your system. (Generally the only issue is the size of the constant values we&#39;ll talk about, not their existence)</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_C_library"
>The C library</a></h2>

<p>It&#39;s important first to understand how your OS and libraries handle memory. When the perl interpreter needs some memory, it asks the C runtime library for it, using the <code>malloc()</code> call. <code>malloc</code> has one parameter, the size of the memory allocation you want, and returns a pointer to that memory. <code>malloc</code> also makes sure that the pointer it returns to you is properly aligned. When you&#39;re done with the memory you hand it back to the library with the <code>free()</code> call. <code>free</code> has one parameter, the pointer that <code>malloc</code> returned. There are a couple of interesting ramifications to this.</p>

<p>Because malloc has to return an aligned pointer, it will round up the memory allocation to make sure that the memory it returns is aligned right. What that alignment is depends on your CPU, OS, and compiler settings, but things are generally aligned to either a 4 or 8 byte boundary. That means that if you ask for 1 byte, <code>malloc</code> will silently round up to either 4 or 8 bytes, though it doesn&#39;t tell the program making the request, so the extra memory can&#39;t be used.</p>

<p>Since <code>free</code> isn&#39;t given the size of the memory chunk you&#39;re freeing, it has to track it another way. Most libraries do this by tacking on a length field just before the memory it hands to your program. (It&#39;s put before the beginning rather than after the end because it&#39;s less likely to get mangled by program bugs) This size field is the size of your platform integer, Generally either 4 or 8 bytes.</p>

<p>So, if you asked for 1 byte, malloc would build something like this:</p>

<pre class="sh_perl">     +------------------+
     | 4 byte length    |
     +------------------+ &#60;----- the pointer malloc returns
     | your 1 byte      |
     +------------------+
     | 3 bytes padding  |
     +------------------+</pre>

<p>As you can see, you asked for 1 byte but <code>malloc</code> used 8. If your integers were 8 bytes rather than 4, <code>malloc</code> would have used 16 bytes to satisfy your 1 byte request.</p>

<p>The C memory allocation system also keeps a list of free memory chunks, so it can recycle freed memory. For performance reasons, some C memory allocation systems put a limit to the number of free segments that are on the free list, or only search through a small number of memory chunks waiting to be recycled before just allocating more memory from the system.</p>

<p>The memory allocation system tries to keep as few chunks on the free list as possible. It does this by trying to notice if there are two adjacent chunks of memory on the free list and, if there are, coalescing them into a single larger chunk. This works pretty well, but there are ways to have a lot of memory on the free list yet still not have anything that can be allocated. If a program allocates one million eight-byte chunks, for example, then frees every other chunk, there will be four million bytes of memory on the free list, but none of that memory can be handed out to satisfy a request for 10 bytes. This is what&#39;s referred to as a fragmented free list, and can be one reason why your program could have a lot of free memory yet still not be able to allocate more, or have a huge process size and still have almost no memory actually allocated to the program running.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Perl"
>Perl</a></h2>

<p>Perl&#39;s memory allocation scheme is a bit convoluted, and more complex than can really be addressed here, but there is one common spot where Perl&#39;s memory allocation is unintuitive, and that&#39;s for hash keys.</p>

<p>When you have a hash, each entry has a structure that points to the key and the value for that entry. The value is just a pointer to the scalar in the entry, and doesn&#39;t take up any special amount of memory. The key structure holds the hash value for the key, the key length, and the key string. (The entry and key structures are separate so perl can potentially share keys across multiple hashes)</p>

<p>The entry structure has three pointers in it, and takes up either 12 or 24 bytes, depending on whether you&#39;re on a 32 bit or 64 bit system. Since these structures are of fixed size, perl can keep a big pool of them internally (generally called an arena) so it doesn&#39;t have to allocate memory for each one.</p>

<p>The key structure, though, is of variable length because the key string is of variable length, so perl has to ask the system for a memory allocation for each key. The base size of this structure is 8 or 16 bytes (once again, depending on whether you&#39;re on a 32 bit or 64 bit system) plus the string length plus two bytes.</p>

<p>Since this memory has to be allocated from the system there&#39;s the malloc size-field overhead (4 or 8 bytes) plus the alignment bytes (0 to 7, depending on your system and the key length) that get added on to the chunk perl requests. If the key is only 1 character, and you&#39;re on a 32 bit system, the allocation will be 16 bytes. If the key is 7 characters then the allocation is 24 bytes on a 32 bit system. If you&#39;re on a 64 bit system the numbers get even larger.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DANGERS"
>DANGERS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Since version 0.72, Devel::Size uses a new pointer tracking mechanism that consumes far less memory than was previously the case. It does this by using a bit vector where 1 bit represents each 4- or 8-byte aligned pointer (32- or 64-bit platform dependant) that could exist. Further, it segments that bit vector and only allocates each chunk when an address is seen within that chunk. Since version 0.73, chunks are allocated in blocks of 2**16 bits (ie 8K), accessed via a 256-way tree. The tree is 2 levels deep on a 32 bit system, 6 levels deep on a 64 bit system. This avoids having make any assumptions about address layout on 64 bit systems or trade offs about sizes to allocate. It assumes that the addresses of allocated pointers are reasonably contiguous, so that relevant parts of the tree stay in the CPU cache.</p>

<p>Besides saving a lot of memory, this change means that Devel::Size runs significantly faster than previous versions.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Messages:_texts_originating_from_this_module."
>Messages: texts originating from this module. <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Errors"
>Errors</a></h2>

<dl>
<dt><a name='Devel'></a><a name="&#34;Devel::Size:_Unknown_variable_type&#34;"
>&#34;Devel::Size: Unknown variable type&#34;</a></dt>

<dd>
<p>The thing (or something contained within it) that you gave to total_size() was unrecognisable as a Perl entity.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="warnings"
>warnings</a></h2>

<p>These messages warn you that for some types, the sizes calculated may not include everything that could be associated with those types. The differences are usually insignificant for most uses of this module.</p>

<p>These may be disabled by setting</p>

<pre class="sh_perl">    $Devel::Size::warn = 0</pre>

<dl>
<dt><a name='Devel'></a><a name="&#34;Devel::Size:_Calculated_sizes_for_CVs_are_incomplete&#34;"
>&#34;Devel::Size: Calculated sizes for CVs are incomplete&#34;</a></dt>

<dd>
<dt><a name='Devel'></a><a name="&#34;Devel::Size:_Calculated_sizes_for_FMs_are_incomplete&#34;"
>&#34;Devel::Size: Calculated sizes for FMs are incomplete&#34;</a></dt>

<dd>
<dt><a name='Devel'></a><a name="&#34;Devel::Size:_Calculated_sizes_for_compiled_regexes_are_incompatible,_and_probably_always_will_be&#34;"
>&#34;Devel::Size: Calculated sizes for compiled regexes are incompatible, and probably always will be&#34;</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="New_warnings_since_0.72"
>New warnings since 0.72</a></h2>

<p>Devel::Size has always been vulnerable to trapping when traversing Perl&#39;s internal data structures, if it encounters uninitialised (dangling) pointers.</p>

<p>MSVC provides exception handling able to deal with this possibility, and when built with MSVC Devel::Size will now attempt to ignore (or log) them and continue. These messages are mainly of interest to Devel::Size and core developers, and so are disabled by default.</p>

<p>They may be enabled by setting</p>

<pre class="sh_perl">    $Devel::Size::dangle = 0</pre>

<dl>
<dt><a name='Devel'></a><a name="&#34;Devel::Size:_Can&#39;t_determine_class_of_operator_OPx_XXXX,_assuming_BASEOP\n&#34;"
>&#34;Devel::Size: Can&#39;t determine class of operator OPx_XXXX, assuming BASEOP\n&#34;</a></dt>

<dd>
<dt><a name='Devel'></a><a name="&#34;Devel::Size:_Encountered_bad_magic_at:_0xXXXXXXXX&#34;"
>&#34;Devel::Size: Encountered bad magic at: 0xXXXXXXXX&#34;</a></dt>

<dd>
<dt><a name='Devel'></a><a name="&#34;Devel::Size:_Encountered_dangling_pointer_in_opcode_at:_0xXXXXXXXX&#34;"
>&#34;Devel::Size: Encountered dangling pointer in opcode at: 0xXXXXXXXX&#34;</a></dt>

<dd>
<dt><a name='Devel'></a><a name="&#34;Devel::Size:_Encountered_invalid_pointer:_0xXXXXXXXX&#34;"
>&#34;Devel::Size: Encountered invalid pointer: 0xXXXXXXXX&#34;</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Doesn&#39;t currently walk all the bits for code refs, formats, and IO. Those throw a warning, but a minimum size for them is returned.</p>

<p>Devel::Size only counts the memory that perl actually allocates. It doesn&#39;t count &#39;dark&#39; memory--memory that is lost due to fragmented free lists, allocation alignments, or C library overhead.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Dan Sugalski dan@sidhe.org</p>

<p>Small portion taken from the B module as shipped with perl 5.6.2.</p>

<p>Previously maintained by Tels &#60;<a href="http://bloodgate.com" class="podlinkurl"
>http://bloodgate.com</a>&#62;</p>

<p>New pointer tracking &#38; exception handling for 0.72 by BrowserUK</p>

<p>Currently maintained by Nicholas Clark</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (C) 2005 Dan Sugalski, Copyright (C) 2007-2008 Tels</p>

<p>This module is free software; you can redistribute it and/or modify it under the same terms as Perl v5.8.8.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perl(1), <a href="/perldoc?Devel%3A%3ASize%3A%3AReport" class="podlinkpod"
>Devel::Size::Report</a>.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78275 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 02:13:12 2012 GMT (0.254019975662231) @cpansearch1 -->
 </body>
</html>
