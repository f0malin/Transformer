<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Text::xSV - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Text-xSV",3]);
    _gaq.push(["_setCustomVar",5,"Release","Text-xSV-0.21",3]);
    _gaq.push(["_setCustomVar",3,"Module","Text::xSV",3]);
    _gaq.push(["_setCustomVar",1,"Author","TILLY",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Text::xSV">permalink</a></div>
  <a href="/~tilly/">Ben Tilly</a> &gt;
  <a href="/~tilly/Text-xSV-0.21/">Text-xSV-0.21</a> &gt;
  Text::xSV
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/90a8a5214a6b10fc9cdb1df26ffa9f0a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/T/TI/TILLY/Text-xSV-0.21.tar.gz">Text-xSV-0.21.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Text%3A%3AxSV;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~TILLY/Text-xSV-0.21/lib/Text/xSV.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Text%3A%3ACSV_XS">Text::CSV_XS</a><br>
<a href="/perldoc?Text%3A%3ACSV">Text::CSV</a><br>
<a href="/perldoc?DBD%3A%3ACSV">DBD::CSV</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Text%3A%3AParseWords">Text::ParseWords</a><br>
<a href="/perldoc?Win32%3A%3AOLE">Win32::OLE</a><br>
<a href="/perldoc?XML%3A%3AXSLT">XML::XSLT</a><br>
<a href="/perldoc?IO%3A%3AFile">IO::File</a><br>
<a href="/perldoc?DBD%3A%3AAnyData">DBD::AnyData</a><br>
<a href="/perldoc?XML%3A%3AParser">XML::Parser</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Text%3A%3AxSV">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 4</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Text-xSV">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.21 &nbsp;
<span class="noprint">
  <a href="/src/TILLY/Text-xSV-0.21/lib/Text/xSV.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#USAGE'>USAGE</a>
  <li class='indexItem indexItem1'><a href='#TODO'>TODO</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#ACKNOWLEDGEMENTS'>ACKNOWLEDGEMENTS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR_AND_COPYRIGHT'>AUTHOR AND COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Text::xSV - read character separated files</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Text::xSV;
  my $csv = new Text::xSV;
  $csv-&#62;open_file(&#34;foo.csv&#34;);
  $csv-&#62;read_header();
  # Make the headers case insensitive
  foreach my $field ($csv-&#62;get_fields) {
    if (lc($field) ne $field) {
      $csv-&#62;alias($field, lc($field));
    }
  }
  
  $csv-&#62;add_compute(&#34;message&#34;, sub {
    my $csv = shift;
    my ($name, $age) = $csv-&#62;extract(qw(name age));
    return &#34;$name is $age years old\n&#34;;
  });

  while ($csv-&#62;get_row()) {
    my ($name, $age) = $csv-&#62;extract(qw(name age));
    print &#34;$name is $age years old\n&#34;;
    # Same as
    #   print $csv-&#62;extract(&#34;message&#34;);
  }

  # The file above could have been created with:
  my $csv = Text::xSV-&#62;new(
    filename =&#62; &#34;foo.csv&#34;,
    header   =&#62; [&#34;Name&#34;, &#34;Age&#34;, &#34;Sex&#34;],
  );
  $csv-&#62;print_header();
  $csv-&#62;print_row(&#34;Ben Tilly&#34;, 34, &#34;M&#34;);
  # Same thing.
  $csv-&#62;print_data(
    Age  =&#62; 34,
    Name =&#62; &#34;Ben Tilly&#34;,
    Sex  =&#62; &#34;M&#34;,
  );</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is for reading and writing a common variation of character separated data. The most common example is comma-separated. However that is far from the only possibility, the same basic format is exported by Microsoft products using tabs, colons, or other characters.</p>

<p>The format is a series of rows separated by returns. Within each row you have a series of fields separated by your character separator. Fields may either be unquoted, in which case they do not contain a double-quote, separator, or return, or they are quoted, in which case they may contain anything, and will encode double-quotes by pairing them. In Microsoft products, quoted fields are strings and unquoted fields can be interpreted as being of various datatypes based on a set of heuristics. By and large this fact is irrelevant in Perl because Perl is largely untyped. The one exception that this module handles that empty unquoted fields are treated as nulls which are represented in Perl as undefined values. If you want a zero-length string, quote it.</p>

<p>People usually naively solve this with split. A next step up is to read a line and parse it. Unfortunately this choice of interface (which is made by Text::CSV on CPAN) makes it difficult to handle returns embedded in a field. (Earlier versions of this document claimed impossible. That is false. But the calling code has to supply the logic to add lines until you have a valid row. To the extent that you don&#39;t do this consistently, your code will be buggy.) Therefore you it is good for the parsing logic to have access to the whole file.</p>

<p>This module solves the problem by creating a xSV object with access to the filehandle, if in parsing it notices that a new line is needed, it can read at will.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="USAGE"
>USAGE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>First you set up and initialize an object, then you read the xSV file through it. The creation can also do multiple initializations as well. Here are the available methods</p>

<dl>
<dt><a name="new"
><code>new</code></a></dt>

<dd>
<p>This is the constructor. It takes a hash of optional arguments. They correspond to the following set_* methods without the set_ prefix. For instance if you pass filename=&#62;... in, then set_filename will be called.</p>

<dl>
<dt><a name="set_sep"
><code>set_sep</code></a></dt>

<dd>
<p>Sets the one character separator that divides fields. Defaults to a comma.</p>

<dt><a name="set_filename"
><code>set_filename</code></a></dt>

<dd>
<p>The filename of the xSV file that you are reading. Used heavily in error reporting. If fh is not set and filename is, then fh will be set to the result of calling open on filename.</p>

<dt><a name="set_fh"
><code>set_fh</code></a></dt>

<dd>
<p>Sets the fh that this Text::xSV object will read from or write to. If it is not set, it will be set to the result of opening filename if that is set, otherwise it will default to ARGV (ie acts like &#60;&#62;) or STDOUT, depending on whether you first try to read or write. The old default used to be STDIN.</p>

<dt><a name="set_header"
><code>set_header</code></a></dt>

<dd>
<p>Sets the internal header array of fields that is referred to in arranging data on the *_data output methods. If <code>bind_fields</code> has not been called, also calls that on the assumption that the fields that you want to output matches the fields that you will provide.</p>

<p>The return from this function is inconsistent and should not be relied on to be anything useful.</p>

<dt><a name="set_headers"
><code>set_headers</code></a></dt>

<dd>
<p>An alias to <code>set_header</code>.</p>

<dt><a name="set_error_handler"
><code>set_error_handler</code></a></dt>

<dd>
<p>The error handler is an anonymous function which is expected to take an error message and do something useful with it. The default error handler is Carp::confess. Error handlers that do not trip exceptions (eg with die) are less tested and may not work perfectly in all circumstances.</p>

<dt><a name="set_warning_handler"
><code>set_warning_handler</code></a></dt>

<dd>
<p>The warning handler is an anonymous function which is expected to take a warning and do something useful with it. If no warning handler is supplied, the error handler is wrapped with <code>eval</code> and the trapped error is warned.</p>

<dt><a name="set_filter"
><code>set_filter</code></a></dt>

<dd>
<p>The filter is an anonymous function which is expected to accept a line of input, and return a filtered line of output. The default filter removes \r so that Windows files can be read under Unix. This could also be used to, eg, strip out Microsoft smart quotes.</p>

<dt><a name="set_quote_qll"
><code>set_quote_qll</code></a></dt>

<dd>
<p>The quote_all option simply puts every output field into double quotation marks. This can&#39;t be set if <code>dont_quote</code> is.</p>

<dt><a name="set_dont_quote"
><code>set_dont_quote</code></a></dt>

<dd>
<p>The dont_quote option turns off the otherwise mandatory quotation marks that bracket the data fields when there are separator characters, spaces or other non-printable characters in the data field. This is perhaps a bit antithetical to the idea of safely enclosing data fields in quotation marks, but some applications, for instance Microsoft SQL Server&#39;s BULK INSERT, can&#39;t handle them. This can&#39;t be set if <code>quote_all</code> is.</p>

<dt><a name="set_row_size"
><code>set_row_size</code></a></dt>

<dd>
<p>The number of elements that you expect to see in each row. It defaults to the size of the first row read or set. If row_size_warning is true and the size of the row read or formatted does not match, then a warning is issued.</p>

<dt><a name="set_row_size_warning"
><code>set_row_size_warning</code></a></dt>

<dd>
<p>Determines whether or not to issue warnings when the row read or set has a number of fields different than the expected number. Defaults to true. Whether or not this is on, missing fields are always read as undef, and extra fields are ignored.</p>

<dt><a name="set_close_fh"
><code>set_close_fh</code></a></dt>

<dd>
<p>Whether or not to close fh when the object is DESTROYed. Defaults to false if fh was passed in, or true if the object has to open its own fh. (This may be removed in a future version.)</p>

<dt><a name="set_strict"
><code>set_strict</code></a></dt>

<dd>
<p>In strict mode a single &#34; within a quoted field is an error. In non-strict mode it is a warning. The default is strict.</p>
</dd>
</dl>

<dt><a name="open_file"
><code>open_file</code></a></dt>

<dd>
<p>Takes the name of a file, opens it, then sets the filename and fh.</p>

<dt><a name="bind_fields"
><code>bind_fields</code></a></dt>

<dd>
<p>Takes an array of fieldnames, memorizes the field positions for later use. <code>read_header</code> is preferred.</p>

<dt><a name="read_header"
><code>read_header</code></a></dt>

<dd>
<p>Reads a row from the file as a header line and memorizes the positions of the fields for later use. File formats that carry field information tend to be far more robust than ones which do not, so this is the preferred function.</p>

<dt><a name="read_headers"
><code>read_headers</code></a></dt>

<dd>
<p>An alias for <code>read_header</code>. (If I&#39;m going to keep on typing the plural, I&#39;ll just make it work...)</p>

<dt><a name="bind_header"
><code>bind_header</code></a></dt>

<dd>
<p>Another alias for <code>read_header</code> maintained for backwards compatibility. Deprecated because the name doesn&#39;t distinguish it well enough from the unrelated <code>set_header</code>.</p>

<dt><a name="get_row"
><code>get_row</code></a></dt>

<dd>
<p>Reads a row from the file. Returns an array or reference to an array depending on context. Will also store the row in the row property for later access.</p>

<dt><a name="extract"
><code>extract</code></a></dt>

<dd>
<p>Extracts a list of fields out of the last row read. In list context returns the list, in scalar context returns an anonymous array.</p>

<dt><a name="extract_hash"
><code>extract_hash</code></a></dt>

<dd>
<p>Extracts fields into a hash. If a list of fields is passed, that is the list of fields that go into the hash. If no list, it extracts all fields that it knows about. In list context returns the hash. In scalar context returns a reference to the hash.</p>

<dt><a name="fetchrow_hash"
><code>fetchrow_hash</code></a></dt>

<dd>
<p>Combines <code>get_row</code> and <code>extract_hash</code> to fetch the next row and return a hash or hashref depending on context.</p>

<dt><a name="alias"
><code>alias</code></a></dt>

<dd>
<p>Makes an existing field available under a new name.</p>

<pre class="sh_perl">  $csv-&#62;alias($old_name, $new_name);</pre>

<dt><a name="get_fields"
><code>get_fields</code></a></dt>

<dd>
<p>Returns a list of all known fields in no particular order.</p>

<dt><a name="add_compute"
><code>add_compute</code></a></dt>

<dd>
<p>Adds an arbitrary compute. A compute is an arbitrary anonymous function. When the computed field is extracted, Text::xSV will call the compute in scalar context with the Text::xSV object as the only argument.</p>

<p>Text::xSV caches results in case computes call other computes. It will also catch infinite recursion with a hopefully useful message.</p>

<dt><a name="format_row"
><code>format_row</code></a></dt>

<dd>
<p>Takes a list of fields, and returns them quoted as necessary, joined with sep, with a newline at the end.</p>

<dt><a name="format_header"
><code>format_header</code></a></dt>

<dd>
<p>Returns the formatted header row based on what was submitted with <code>set_header</code>. Will cause an error if <code>set_header</code> was not called.</p>

<dt><a name="format_headers"
><code>format_headers</code></a></dt>

<dd>
<p>Continuing the meme, an alias for format_header.</p>

<dt><a name="format_data"
><code>format_data</code></a></dt>

<dd>
<p>Takes a hash of data. Sets internal data, and then formats the result of <code>extract</code>ing out the fields corresponding to the headers. Note that if you called <code>bind_fields</code> and then defined some more fields with <code>add_compute</code>, computes would be done for you on the fly.</p>

<dt><a name="print"
><code>print</code></a></dt>

<dd>
<p>Prints the arguments directly to fh. If fh is not supplied but filename is, first sets fh to the result of opening filename. Otherwise it defaults fh to STDOUT. You probably don&#39;t want to use this directly. Instead use one of the other print methods.</p>

<dt><a name="print_row"
><code>print_row</code></a></dt>

<dd>
<p>Does a <code>print</code> of <code>format_row</code>. Convenient when you wish to maintain your knowledge of the field order.</p>

<dt><a name="print_header"
><code>print_header</code></a></dt>

<dd>
<p>Does a <code>print</code> of <code>format_header</code>. Makes sense when you will be using print_data for your actual data because the field order is guaranteed to match up.</p>

<dt><a name="print_headers"
><code>print_headers</code></a></dt>

<dd>
<p>An alias to <code>print_header</code>.</p>

<dt><a name="print_data"
><code>print_data</code></a></dt>

<dd>
<p>Does a <code>print</code> of <code>format_data</code>. Relieves you from having to synchronize field order in your code.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TODO"
>TODO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Add utility interfaces. (Suggested by Ken Clark.)</p>

<p>Offer an option for working around the broken tab-delimited output that some versions of Excel present for cut-and-paste.</p>

<p>Add tests for the output half of the module.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>When I say single character separator, I mean it.</p>

<p>Performance could be better. That is largely because the API was chosen for simplicity of a &#34;proof of concept&#34;, rather than for performance. One idea to speed it up you would be to provide an API where you bind the requested fields once and then fetch many times rather than binding the request for every row.</p>

<p>Also note that should you ever play around with the special variables $`, $&#38;, or $&#39;, you will find that it can get much, much slower. The cause of this problem is that Perl only calculates those if it has ever seen one of those. This does many, many matches and calculating those is slow.</p>

<p>I need to find out what conversions are done by Microsoft products that Perl won&#39;t do on the fly upon trying to use the values.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACKNOWLEDGEMENTS"
>ACKNOWLEDGEMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>My thanks to people who have given me feedback on how they would like to use this module, and particularly to Klaus Weidner for his patch fixing a nasty segmentation fault from a stack overflow in the regular expression engine on large fields.</p>

<p>Rob Kinyon (dragonchild) motivated me to do the writing interface, and gave me useful feedback on what it should look like. I&#39;m not sure that he likes the result, but it is how I understood what he said...</p>

<p>Jess Robinson (castaway) convinced me that ARGV was a better default input handle than STDIN. I hope that switching that default doesn&#39;t inconvenience anyone.</p>

<p>Gyepi SAM noticed that fetchrow_hash complained about missing data at the end of the loop and sent a patch. Applied.</p>

<p>shotgunefx noticed that bind_header changed its return between versions. It is actually worse than that, it changes its return if you call it twice. Documented that its return should not be relied upon.</p>

<p>Fred Steinberg found that writes did not happen promptly upon closing the object. This turned out to be a self-reference causing a DESTROY bug. I fixed it.</p>

<p>Carey Drake and Steve Caldwell noticed that the default warning_handler expected different arguments than it got. Both suggested the same fix that I implemented.</p>

<p>Geoff Gariepy suggested adding dont_quote and quote_all. Then found a silly bug in my first implementation.</p>

<p>Ryan Martin improved read performance over 75% with a small patch.</p>

<p>Bauernhaus Panoramablick and Geoff Gariepy convinced me to add the ability to get non-strict mode.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR_AND_COPYRIGHT"
>AUTHOR AND COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Ben Tilly (btilly@gmail.com). Originally posted at <a href="http://www.perlmonks.org/node_id=65094" class="podlinkurl"
>http://www.perlmonks.org/node_id=65094</a>.</p>

<p>Copyright 2001-2009. This may be modified and distributed on the same terms as Perl.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78124 Uploads, 24699 Distributions
105950 Modules, 9642 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Tue Apr 24 07:37:41 2012 GMT (0.0846278667449951) @cpansearch1 -->
 </body>
</html>
