<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>MIME::Entity - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","MIME-tools",3]);
    _gaq.push(["_setCustomVar",5,"Release","MIME-tools-5.502",3]);
    _gaq.push(["_setCustomVar",3,"Module","MIME::Entity",3]);
    _gaq.push(["_setCustomVar",1,"Author","DSKOLL",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?MIME::Entity">permalink</a></div>
  <a href="/~dskoll/">David F. Skoll</a> &gt;
  <a href="/~dskoll/MIME-tools-5.502/">MIME-tools-5.502</a> &gt;
  MIME::Entity
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/77ceb1d700a17c6454d82e26e73d9807?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DS/DSKOLL/MIME-tools-5.502.tar.gz">MIME-tools-5.502.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=MIME%3A%3AEntity;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DSKOLL/MIME-tools-5.502/lib/MIME/Entity.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?MIME%3A%3ALite">MIME::Lite</a><br>
<a href="/perldoc?MIME%3A%3AParser">MIME::Parser</a><br>
<a href="/perldoc?Net%3A%3ASMTP">Net::SMTP</a><br>
<a href="/perldoc?Mail%3A%3AInternet">Mail::Internet</a><br>
<a href="/perldoc?Mail%3A%3ASender">Mail::Sender</a><br>
<a href="/perldoc?Mail%3A%3AMailer">Mail::Mailer</a><br>
<a href="/perldoc?Mail%3A%3APOP3Client">Mail::POP3Client</a><br>
<a href="/perldoc?MIME%3A%3AHead">MIME::Head</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Mail%3A%3ASendmail">Mail::Sendmail</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=MIME%3A%3AEntity">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 6</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 8</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=MIME-tools">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  5.502 &nbsp;
<span class="noprint">
  <a href="/src/DSKOLL/MIME-tools-5.502/lib/MIME/Entity.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Construction_examples'>Construction examples</a>
    <li class='indexItem indexItem2'><a href='#Access_examples'>Access examples</a>
    <li class='indexItem indexItem2'><a href='#Manipulation_examples'>Manipulation examples</a>
    <li class='indexItem indexItem2'><a href='#Output_examples'>Output examples</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#PUBLIC_INTERFACE'>PUBLIC INTERFACE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Construction'>Construction</a>
    <li class='indexItem indexItem2'><a href='#Access'>Access</a>
    <li class='indexItem indexItem2'><a href='#Manipulation'>Manipulation</a>
    <li class='indexItem indexItem2'><a href='#Output'>Output</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#NOTES'>NOTES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Under_the_hood'>Under the hood</a>
    <li class='indexItem indexItem2'><a href='#The_&#34;two-body_problem&#34;'>The &#34;two-body problem&#34;</a>
    <li class='indexItem indexItem2'><a href='#Design_issues'>Design issues</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>MIME::Entity - class for parsed-and-decoded MIME message</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Before reading further,
you should see <a href="/perldoc?MIME%3A%3ATools" class="podlinkpod"
>MIME::Tools</a> to make sure that you understand where this module fits into the grand scheme of things.
Go on,
do it now.
I&#39;ll wait.</p>

<p>Ready?
Ok...</p>

<pre class="sh_perl">    ### Create an entity:
    $top = MIME::Entity-&#62;build(From    =&#62; &#39;me@myhost.com&#39;,
                               To      =&#62; &#39;you@yourhost.com&#39;,
                               Subject =&#62; &#34;Hello, nurse!&#34;,
                               Data    =&#62; \@my_message);

    ### Attach stuff to it:
    $top-&#62;attach(Path     =&#62; $gif_path,
                 Type     =&#62; &#34;image/gif&#34;,
                 Encoding =&#62; &#34;base64&#34;);

    ### Sign it:
    $top-&#62;sign;

    ### Output it:
    $top-&#62;print(\*STDOUT);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A subclass of <b>Mail::Internet</b>.</p>

<p>This package provides a class for representing MIME message entities, as specified in RFCs 2045, 2046, 2047, 2048 and 2049.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Construction_examples"
>Construction examples</a></h2>

<p>Create a document for an ordinary 7-bit ASCII text file (lots of stuff is defaulted for us):</p>

<pre class="sh_perl">    $ent = MIME::Entity-&#62;build(Path=&#62;&#34;english-msg.txt&#34;);</pre>

<p>Create a document for a text file with 8-bit (Latin-1) characters:</p>

<pre class="sh_perl">    $ent = MIME::Entity-&#62;build(Path     =&#62;&#34;french-msg.txt&#34;,
                               Encoding =&#62;&#34;quoted-printable&#34;,
                               From     =&#62;&#39;jean.luc@inria.fr&#39;,
                               Subject  =&#62;&#34;C&#39;est bon!&#34;);</pre>

<p>Create a document for a GIF file (the description is completely optional; note that we have to specify content-type and encoding since they&#39;re not the default values):</p>

<pre class="sh_perl">    $ent = MIME::Entity-&#62;build(Description =&#62; &#34;A pretty picture&#34;,
                               Path        =&#62; &#34;./docs/mime-sm.gif&#34;,
                               Type        =&#62; &#34;image/gif&#34;,
                               Encoding    =&#62; &#34;base64&#34;);</pre>

<p>Create a document that you already have the text for, using &#34;Data&#34;:</p>

<pre class="sh_perl">    $ent = MIME::Entity-&#62;build(Type        =&#62; &#34;text/plain&#34;,
                               Encoding    =&#62; &#34;quoted-printable&#34;,
                               Data        =&#62; [&#34;First line.\n&#34;,
                                              &#34;Second line.\n&#34;,
                                              &#34;Last line.\n&#34;]);</pre>

<p>Create a multipart message, with the entire structure given explicitly:</p>

<pre class="sh_perl">    ### Create the top-level, and set up the mail headers:
    $top = MIME::Entity-&#62;build(Type     =&#62; &#34;multipart/mixed&#34;,
                               From     =&#62; &#39;me@myhost.com&#39;,
                               To       =&#62; &#39;you@yourhost.com&#39;,
                               Subject  =&#62; &#34;Hello, nurse!&#34;);

    ### Attachment #1: a simple text document:
    $top-&#62;attach(Path=&#62;&#34;./testin/short.txt&#34;);

    ### Attachment #2: a GIF file:
    $top-&#62;attach(Path        =&#62; &#34;./docs/mime-sm.gif&#34;,
                 Type        =&#62; &#34;image/gif&#34;,
                 Encoding    =&#62; &#34;base64&#34;);

    ### Attachment #3: text we&#39;ll create with text we have on-hand:
    $top-&#62;attach(Data =&#62; $contents);</pre>

<p>Suppose you don&#39;t know ahead of time that you&#39;ll have attachments? No problem: you can &#34;attach&#34; to singleparts as well:</p>

<pre class="sh_perl">    $top = MIME::Entity-&#62;build(From    =&#62; &#39;me@myhost.com&#39;,
                               To      =&#62; &#39;you@yourhost.com&#39;,
                               Subject =&#62; &#34;Hello, nurse!&#34;,
                               Data    =&#62; \@my_message);
    if ($GIF_path) {
        $top-&#62;attach(Path     =&#62; $GIF_path,
                     Type     =&#62; &#39;image/gif&#39;);
    }</pre>

<p>Copy an entity (headers, parts... everything but external body data):</p>

<pre class="sh_perl">    my $deepcopy = $top-&#62;dup;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Access_examples"
>Access examples</a></h2>

<pre class="sh_perl">    ### Get the head, a MIME::Head:
    $head = $ent-&#62;head;

    ### Get the body, as a MIME::Body;
    $bodyh = $ent-&#62;bodyhandle;

    ### Get the intended MIME type (as declared in the header):
    $type = $ent-&#62;mime_type;

    ### Get the effective MIME type (in case decoding failed):
    $eff_type = $ent-&#62;effective_type;

    ### Get preamble, parts, and epilogue:
    $preamble   = $ent-&#62;preamble;          ### ref to array of lines
    $num_parts  = $ent-&#62;parts;
    $first_part = $ent-&#62;parts(0);          ### an entity
    $epilogue   = $ent-&#62;epilogue;          ### ref to array of lines</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Manipulation_examples"
>Manipulation examples</a></h2>

<p>Muck about with the body data:</p>

<pre class="sh_perl">    ### Read the (unencoded) body data:
    if ($io = $ent-&#62;open(&#34;r&#34;)) {
        while (defined($_ = $io-&#62;getline)) { print $_ }
        $io-&#62;close;
    }

    ### Write the (unencoded) body data:
    if ($io = $ent-&#62;open(&#34;w&#34;)) {
        foreach (@lines) { $io-&#62;print($_) }
        $io-&#62;close;
    }

    ### Delete the files for any external (on-disk) data:
    $ent-&#62;purge;</pre>

<p>Muck about with the signature:</p>

<pre class="sh_perl">    ### Sign it (automatically removes any existing signature):
    $top-&#62;sign(File=&#62;&#34;$ENV{HOME}/.signature&#34;);

    ### Remove any signature within 15 lines of the end:
    $top-&#62;remove_sig(15);</pre>

<p>Muck about with the headers:</p>

<pre class="sh_perl">    ### Compute content-lengths for singleparts based on bodies:
    ###   (Do this right before you print!)
    $entity-&#62;sync_headers(Length=&#62;&#39;COMPUTE&#39;);</pre>

<p>Muck about with the structure:</p>

<pre class="sh_perl">    ### If a 0- or 1-part multipart, collapse to a singlepart:
    $top-&#62;make_singlepart;

    ### If a singlepart, inflate to a multipart with 1 part:
    $top-&#62;make_multipart;</pre>

<p>Delete parts:</p>

<pre class="sh_perl">    ### Delete some parts of a multipart message:
    my @keep = grep { keep_part($_) } $msg-&#62;parts;
    $msg-&#62;parts(\@keep);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Output_examples"
>Output examples</a></h2>

<p>Print to filehandles:</p>

<pre class="sh_perl">    ### Print the entire message:
    $top-&#62;print(\*STDOUT);

    ### Print just the header:
    $top-&#62;print_header(\*STDOUT);

    ### Print just the (encoded) body... includes parts as well!
    $top-&#62;print_body(\*STDOUT);</pre>

<p>Stringify... note that <code>stringify_xx</code> can also be written <code>xx_as_string</code>; the methods are synonymous, and neither form will be deprecated:</p>

<pre class="sh_perl">    ### Stringify the entire message:
    print $top-&#62;stringify;              ### or $top-&#62;as_string

    ### Stringify just the header:
    print $top-&#62;stringify_header;       ### or $top-&#62;header_as_string

    ### Stringify just the (encoded) body... includes parts as well!
    print $top-&#62;stringify_body;         ### or $top-&#62;body_as_string</pre>

<p>Debug:</p>

<pre class="sh_perl">    ### Output debugging info:
    $entity-&#62;dump_skeleton(\*STDERR);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PUBLIC_INTERFACE"
>PUBLIC INTERFACE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Construction"
>Construction</a></h2>

<dl>
<dt><a name='new'></a><a name="new_[SOURCE]"
>new [SOURCE]</a></dt>

<dd>
<p><i>Class method.</i> Create a new, empty MIME entity. Basically, this uses the Mail::Internet constructor...</p>

<p>If SOURCE is an ARRAYREF, it is assumed to be an array of lines that will be used to create both the header and an in-core body.</p>

<p>Else, if SOURCE is defined, it is assumed to be a filehandle from which the header and in-core body is to be read.</p>

<p><b>Note:</b> in either case, the body will not be <i>parsed:</i> merely read!</p>

<dt><a name='add_part'></a><a name="add_part_ENTITY,_[OFFSET]"
>add_part ENTITY, [OFFSET]</a></dt>

<dd>
<p><i>Instance method.</i> Assuming we are a multipart message, add a body part (a MIME::Entity) to the array of body parts. Returns the part that was just added.</p>

<p>If OFFSET is positive, the new part is added at that offset from the beginning of the array of parts. If it is negative, it counts from the end of the array. (An INDEX of -1 will place the new part at the very end of the array, -2 will place it as the penultimate item in the array, etc.) If OFFSET is not given, the new part is added to the end of the array. <i>Thanks to Jason L Tibbitts III for providing support for OFFSET.</i></p>

<p><b>Warning:</b> in general, you only want to attach parts to entities with a content-type of <code>multipart/*</code>).</p>

<dt><a name='attach'></a><a name="attach_PARAMHASH"
>attach PARAMHASH</a></dt>

<dd>
<p><i>Instance method.</i> The real quick-and-easy way to create multipart messages. The PARAMHASH is used to <code>build</code> a new entity; this method is basically equivalent to:</p>

<pre class="sh_perl">    $entity-&#62;add_part(ref($entity)-&#62;build(PARAMHASH, Top=&#62;0));</pre>

<p><b>Note:</b> normally, you attach to multipart entities; however, if you attach something to a singlepart (like attaching a GIF to a text message), the singlepart will be coerced into a multipart automatically.</p>

<dt><a name='build'></a><a name="build_PARAMHASH"
>build PARAMHASH</a></dt>

<dd>
<p><i>Class/instance method.</i> A quick-and-easy catch-all way to create an entity. Use it like this to build a &#34;normal&#34; single-part entity:</p>

<pre class="sh_perl">   $ent = MIME::Entity-&#62;build(Type     =&#62; &#34;image/gif&#34;,
                              Encoding =&#62; &#34;base64&#34;,
                              Path     =&#62; &#34;/path/to/xyz12345.gif&#34;,
                              Filename =&#62; &#34;saveme.gif&#34;,
                              Disposition =&#62; &#34;attachment&#34;);</pre>

<p>And like this to build a &#34;multipart&#34; entity:</p>

<pre class="sh_perl">   $ent = MIME::Entity-&#62;build(Type     =&#62; &#34;multipart/mixed&#34;,
                              Boundary =&#62; &#34;---1234567&#34;);</pre>

<p>A minimal MIME header will be created. If you want to add or modify any header fields afterwards, you can of course do so via the underlying head object... but hey, there&#39;s now a prettier syntax!</p>

<pre class="sh_perl">   $ent = MIME::Entity-&#62;build(Type          =&#62;&#34;multipart/mixed&#34;,
                              From          =&#62; $myaddr,
                              Subject       =&#62; &#34;Hi!&#34;,
                              &#39;X-Certified&#39; =&#62; [&#39;SINED&#39;,
                                                &#39;SEELED&#39;,
                                                &#39;DELIVERED&#39;]);</pre>

<p>Normally, an <code>X-Mailer</code> header field is output which contains this toolkit&#39;s name and version (plus this module&#39;s RCS version). This will allow any bad MIME we generate to be traced back to us. You can of course overwrite that header with your own:</p>

<pre class="sh_perl">   $ent = MIME::Entity-&#62;build(Type        =&#62; &#34;multipart/mixed&#34;,
                              &#39;X-Mailer&#39;  =&#62; &#34;myprog 1.1&#34;);</pre>

<p>Or remove it entirely:</p>

<pre class="sh_perl">   $ent = MIME::Entity-&#62;build(Type       =&#62; &#34;multipart/mixed&#34;,
                              &#39;X-Mailer&#39; =&#62; undef);</pre>

<p>OK, enough hype. The parameters are:</p>

<dl>
<dt><a name='FIELDNAME'></a><a name="(FIELDNAME)"
>(FIELDNAME)</a></dt>

<dd>
<p>Any field you want placed in the message header, taken from the standard list of header fields (you don&#39;t need to worry about case):</p>

<pre class="sh_perl">    Bcc           Encrypted     Received      Sender
    Cc            From          References    Subject
    Comments      Keywords      Reply-To      To
    Content-*     Message-ID    Resent-*      X-*
    Date          MIME-Version  Return-Path
                  Organization</pre>

<p>To give experienced users some veto power, these fields will be set <i>after</i> the ones I set... so be careful: <i>don&#39;t set any MIME fields</i> (like <code>Content-type</code>) unless you know what you&#39;re doing!</p>

<p>To specify a fieldname that&#39;s <i>not</i> in the above list, even one that&#39;s identical to an option below, just give it with a trailing <code>&#34;:&#34;</code>, like <code>&#34;My-field:&#34;</code>. When in doubt, that <i>always</i> signals a mail field (and it sort of looks like one too).</p>

<dt><a name="Boundary"
>Boundary</a></dt>

<dd>
<p><i>Multipart entities only. Optional.</i> The boundary string. As per RFC-2046, it must consist only of the characters <code>[0-9a-zA-Z&#39;()+_,-./:=?]</code> and space (you&#39;ll be warned, and your boundary will be ignored, if this is not the case). If you omit this, a random string will be chosen... which is probably safer.</p>

<dt><a name="Charset"
>Charset</a></dt>

<dd>
<p><i>Optional.</i> The character set.</p>

<dt><a name="Data"
>Data</a></dt>

<dd>
<p><i>Single-part entities only. Optional.</i> An alternative to Path (q.v.): the actual data, either as a scalar or an array reference (whose elements are joined together to make the actual scalar). The body is opened on the data using MIME::Body::InCore.</p>

<dt><a name="Description"
>Description</a></dt>

<dd>
<p><i>Optional.</i> The text of the content-description. If you don&#39;t specify it, the field is not put in the header.</p>

<dt><a name="Disposition"
>Disposition</a></dt>

<dd>
<p><i>Optional.</i> The basic content-disposition (<code>&#34;attachment&#34;</code> or <code>&#34;inline&#34;</code>). If you don&#39;t specify it, it defaults to &#34;inline&#34; for backwards compatibility. <i>Thanks to Kurt Freytag for suggesting this feature.</i></p>

<dt><a name="Encoding"
>Encoding</a></dt>

<dd>
<p><i>Optional.</i> The content-transfer-encoding. If you don&#39;t specify it, a reasonable default is put in. You can also give the special value &#39;-SUGGEST&#39;, to have it chosen for you in a heavy-duty fashion which scans the data itself.</p>

<dt><a name="Filename"
>Filename</a></dt>

<dd>
<p><i>Single-part entities only. Optional.</i> The recommended filename. Overrides any name extracted from <code>Path</code>. The information is stored both the deprecated (content-type) and preferred (content-disposition) locations. If you explicitly want to <i>avoid</i> a recommended filename (even when Path is used), supply this as empty or undef.</p>

<dt><a name="Id"
>Id</a></dt>

<dd>
<p><i>Optional.</i> Set the content-id.</p>

<dt><a name="Path"
>Path</a></dt>

<dd>
<p><i>Single-part entities only. Optional.</i> The path to the file to attach. The body is opened on that file using MIME::Body::File.</p>

<dt><a name="Top"
>Top</a></dt>

<dd>
<p><i>Optional.</i> Is this a top-level entity? If so, it must sport a MIME-Version. The default is true. (NB: look at how <code>attach()</code> uses it.)</p>

<dt><a name="Type"
>Type</a></dt>

<dd>
<p><i>Optional.</i> The basic content-type (<code>&#34;text/plain&#34;</code>, etc.). If you don&#39;t specify it, it defaults to <code>&#34;text/plain&#34;</code> as per RFC 2045. <i>Do yourself a favor: put it in.</i></p>
</dd>
</dl>

<dt><a name="dup"
>dup</a></dt>

<dd>
<p><i>Instance method.</i> Duplicate the entity. Does a deep, recursive copy, <i>but beware:</i> external data in bodyhandles is <i>not</i> copied to new files! Changing the data in one entity&#39;s data file, or purging that entity, <i>will</i> affect its duplicate. Entities with in-core data probably need not worry.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Access"
>Access</a></h2>

<dl>
<dt><a name='body'></a><a name="body_[VALUE]"
>body [VALUE]</a></dt>

<dd>
<p><i>Instance method.</i> Get the <i>encoded</i> (transport-ready) body, as an array of lines. Returns an array reference. Each array entry is a newline-terminated line.</p>

<p>This is a read-only data structure: changing its contents will have no effect. Its contents are identical to what is printed by <a href="#print_body" class="podlinkpod"
>print_body()</a>.</p>

<p>Provided for compatibility with Mail::Internet, so that methods like <code>smtpsend()</code> will work. Note however that if VALUE is given, a fatal exception is thrown, since you cannot use this method to <i>set</i> the lines of the encoded message.</p>

<p>If you want the raw (unencoded) body data, use the <a href="#bodyhandle" class="podlinkpod"
>bodyhandle()</a> method to get and use a MIME::Body. The content-type of the entity will tell you whether that body is best read as text (via getline()) or raw data (via read()).</p>

<dt><a name='bodyhandle'></a><a name="bodyhandle_[VALUE]"
>bodyhandle [VALUE]</a></dt>

<dd>
<p><i>Instance method.</i> Get or set an abstract object representing the body of the message. The body holds the decoded message data.</p>

<p><b>Note that not all entities have bodies!</b> An entity will have either a body or parts: not both. This method will <i>only</i> return an object if this entity can have a body; otherwise, it will return undefined. Whether-or-not a given entity can have a body is determined by (1) its content type, and (2) whether-or-not the parser was told to extract nested messages:</p>

<pre class="sh_perl">    Type:        | Extract nested? | bodyhandle() | parts()
    -----------------------------------------------------------------------
    multipart/*  | -               | undef        | 0 or more MIME::Entity
    message/*    | true            | undef        | 0 or 1 MIME::Entity
    message/*    | false           | MIME::Body   | empty list
    (other)      | -               | MIME::Body   | empty list</pre>

<p>If <code>VALUE</code> <i>is not</i> given, the current bodyhandle is returned, or undef if the entity cannot have a body.</p>

<p>If <code>VALUE</code> <i>is</i> given, the bodyhandle is set to the new value, and the previous value is returned.</p>

<p>See <a href="#parts" class="podlinkpod"
>&#34;parts&#34;</a> for more info.</p>

<dt><a name='effective_type'></a><a name="effective_type_[MIMETYPE]"
>effective_type [MIMETYPE]</a></dt>

<dd>
<p><i>Instance method.</i> Set/get the <i>effective</i> MIME type of this entity. This is <i>usually</i> identical to the actual (or defaulted) MIME type, but in some cases it differs. For example, from RFC-2045:</p>

<pre class="sh_perl">   Any entity with an unrecognized Content-Transfer-Encoding must be
   treated as if it has a Content-Type of &#34;application/octet-stream&#34;,
   regardless of what the Content-Type header field actually says.</pre>

<p>Why? because if we can&#39;t decode the message, then we have to take the bytes as-is, in their (unrecognized) encoded form. So the message ceases to be a &#34;text/foobar&#34; and becomes a bunch of undecipherable bytes -- in other words, an &#34;application/octet-stream&#34;.</p>

<p>Such an entity, if parsed, would have its effective_type() set to <code>&#34;application/octet_stream&#34;</code>, although the mime_type() and the contents of the header would remain the same.</p>

<p>If there is no effective type, the method just returns what mime_type() would.</p>

<p><b>Warning:</b> the effective type is &#34;sticky&#34;; once set, that effective_type() will always be returned even if the conditions that necessitated setting the effective type become no longer true.</p>

<dt><a name='epilogue'></a><a name="epilogue_[LINES]"
>epilogue [LINES]</a></dt>

<dd>
<p><i>Instance method.</i> Get/set the text of the epilogue, as an array of newline-terminated LINES. Returns a reference to the array of lines, or undef if no epilogue exists.</p>

<p>If there is a epilogue, it is output when printing this entity; otherwise, a default epilogue is used. Setting the epilogue to undef (not []!) causes it to fallback to the default.</p>

<dt><a name='head'></a><a name="head_[VALUE]"
>head [VALUE]</a></dt>

<dd>
<p><i>Instance method.</i> Get/set the head.</p>

<p>If there is no VALUE given, returns the current head. If none exists, an empty instance of MIME::Head is created, set, and returned.</p>

<p><b>Note:</b> This is a patch over a problem in Mail::Internet, which doesn&#39;t provide a method for setting the head to some given object.</p>

<dt><a name="is_multipart"
>is_multipart</a></dt>

<dd>
<p><i>Instance method.</i> Does this entity&#39;s effective MIME type indicate that it&#39;s a multipart entity? Returns undef (false) if the answer couldn&#39;t be determined, 0 (false) if it was determined to be false, and true otherwise. Note that this says nothing about whether or not parts were extracted.</p>

<p>NOTE: we switched to effective_type so that multiparts with bad or missing boundaries could be coerced to an effective type of <code>application/x-unparseable-multipart</code>.</p>

<dt><a name="mime_type"
>mime_type</a></dt>

<dd>
<p><i>Instance method.</i> A purely-for-convenience method. This simply relays the request to the associated MIME::Head object. If there is no head, returns undef in a scalar context and the empty array in a list context.</p>

<p><b>Before you use this,</b> consider using effective_type() instead, especially if you obtained the entity from a MIME::Parser.</p>

<dt><a name='open'></a><a name="open_READWRITE"
>open READWRITE</a></dt>

<dd>
<p><i>Instance method.</i> A purely-for-convenience method. This simply relays the request to the associated MIME::Body object (see MIME::Body::open()). READWRITE is either &#39;r&#39; (open for read) or &#39;w&#39; (open for write).</p>

<p>If there is no body, returns false.</p>

<dt><a name="parts"
>parts</a></dt>

<dd>
<dt><a name='parts'></a><a name="parts_INDEX"
>parts INDEX</a></dt>

<dd>
<dt><a name='parts'></a><a name="parts_ARRAYREF"
>parts ARRAYREF</a></dt>

<dd>
<p><i>Instance method.</i> Return the MIME::Entity objects which are the sub parts of this entity (if any).</p>

<p><i>If no argument is given,</i> returns the array of all sub parts, returning the empty array if there are none (e.g., if this is a single part message, or a degenerate multipart). In a scalar context, this returns you the number of parts.</p>

<p><i>If an integer INDEX is given,</i> return the INDEXed part, or undef if it doesn&#39;t exist.</p>

<p><i>If an ARRAYREF to an array of parts is given,</i> then this method <i>sets</i> the parts to a copy of that array, and returns the parts. This can be used to delete parts, as follows:</p>

<pre class="sh_perl">    ### Delete some parts of a multipart message:
    $msg-&#62;parts([ grep { keep_part($_) } $msg-&#62;parts ]);</pre>

<p><b>Note:</b> for multipart messages, the preamble and epilogue are <i>not</i> considered parts. If you need them, use the <code>preamble()</code> and <code>epilogue()</code> methods.</p>

<p><b>Note:</b> there are ways of parsing with a MIME::Parser which cause certain message parts (such as those of type <code>message/rfc822</code>) to be &#34;reparsed&#34; into pseudo-multipart entities. You should read the documentation for those options carefully: it <i>is</i> possible for a diddled entity to not be multipart, but still have parts attached to it!</p>

<p>See <a href="#bodyhandle" class="podlinkpod"
>&#34;bodyhandle&#34;</a> for a discussion of parts vs. bodies.</p>

<dt><a name="parts_DFS"
>parts_DFS</a></dt>

<dd>
<p><i>Instance method.</i> Return the list of all MIME::Entity objects included in the entity, starting with the entity itself, in depth-first-search order. If the entity has no parts, it alone will be returned.</p>

<p><i>Thanks to Xavier Armengou for suggesting this method.</i></p>

<dt><a name='preamble'></a><a name="preamble_[LINES]"
>preamble [LINES]</a></dt>

<dd>
<p><i>Instance method.</i> Get/set the text of the preamble, as an array of newline-terminated LINES. Returns a reference to the array of lines, or undef if no preamble exists (e.g., if this is a single-part entity).</p>

<p>If there is a preamble, it is output when printing this entity; otherwise, a default preamble is used. Setting the preamble to undef (not []!) causes it to fallback to the default.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Manipulation"
>Manipulation</a></h2>

<dl>
<dt><a name='make_multipart'></a><a name="make_multipart_[SUBTYPE],_OPTSHASH..."
>make_multipart [SUBTYPE], OPTSHASH...</a></dt>

<dd>
<p><i>Instance method.</i> Force the entity to be a multipart, if it isn&#39;t already. We do this by replacing the original [singlepart] entity with a new multipart that has the same non-MIME headers (&#34;From&#34;, &#34;Subject&#34;, etc.), but all-new MIME headers (&#34;Content-type&#34;, etc.). We then create a copy of the original singlepart, <i>strip out</i> the non-MIME headers from that, and make it a part of the new multipart. So this:</p>

<pre class="sh_perl">    From: me
    To: you
    Content-type: text/plain
    Content-length: 12

    Hello there!</pre>

<p>Becomes something like this:</p>

<pre class="sh_perl">    From: me
    To: you
    Content-type: multipart/mixed; boundary=&#34;----abc----&#34;

    ------abc----
    Content-type: text/plain
    Content-length: 12

    Hello there!
    ------abc------</pre>

<p>The actual type of the new top-level multipart will be &#34;multipart/SUBTYPE&#34; (default SUBTYPE is &#34;mixed&#34;).</p>

<p>Returns &#39;DONE&#39; if we really did inflate a singlepart to a multipart. Returns &#39;ALREADY&#39; (and does nothing) if entity is <i>already</i> multipart and Force was not chosen.</p>

<p>If OPTSHASH contains Force=&#62;1, then we <i>always</i> bump the top-level&#39;s content and content-headers down to a subpart of this entity, even if this entity is already a multipart. This is apparently of use to people who are tweaking messages after parsing them.</p>

<dt><a name="make_singlepart"
>make_singlepart</a></dt>

<dd>
<p><i>Instance method.</i> If the entity is a multipart message with one part, this tries hard to rewrite it as a singlepart, by replacing the content (and content headers) of the top level with those of the part. Also crunches 0-part multiparts into singleparts.</p>

<p>Returns &#39;DONE&#39; if we really did collapse a multipart to a singlepart. Returns &#39;ALREADY&#39; (and does nothing) if entity is already a singlepart. Returns &#39;0&#39; (and does nothing) if it can&#39;t be made into a singlepart.</p>

<dt><a name="purge"
>purge</a></dt>

<dd>
<p><i>Instance method.</i> Recursively purge (e.g., unlink) all external (e.g., on-disk) body parts in this message. See MIME::Body::purge() for details.</p>

<p><b>Note:</b> this does <i>not</i> delete the directories that those body parts are contained in; only the actual message data files are deleted. This is because some parsers may be customized to create intermediate directories while others are not, and it&#39;s impossible for this class to know what directories are safe to remove. Only your application program truly knows that.</p>

<p><b>If you really want to &#34;clean everything up&#34;,</b> one good way is to use <code>MIME::Parser::file_under()</code>, and then do this before parsing your next message:</p>

<pre class="sh_perl">    $parser-&#62;filer-&#62;purge();</pre>

<p>I wouldn&#39;t attempt to read those body files after you do this, for obvious reasons. As of MIME-tools 4.x, each body&#39;s path <i>is</i> undefined after this operation. I warned you I might do this; truly I did.</p>

<p><i>Thanks to Jason L. Tibbitts III for suggesting this method.</i></p>

<dt><a name='remove_sig'></a><a name="remove_sig_[NLINES]"
>remove_sig [NLINES]</a></dt>

<dd>
<p><i>Instance method, override.</i> Attempts to remove a user&#39;s signature from the body of a message.</p>

<p>It does this by looking for a line matching <code>/^-- $/</code> within the last <code>NLINES</code> of the message. If found then that line and all lines after it will be removed. If <code>NLINES</code> is not given, a default value of 10 will be used. This would be of most use in auto-reply scripts.</p>

<p>For MIME entity, this method is reasonably cautious: it will only attempt to un-sign a message with a content-type of <code>text/*</code>.</p>

<p>If you send remove_sig() to a multipart entity, it will relay it to the first part (the others usually being the &#34;attachments&#34;).</p>

<p><b>Warning:</b> currently slurps the whole message-part into core as an array of lines, so you probably don&#39;t want to use this on extremely long messages.</p>

<p>Returns truth on success, false on error.</p>

<dt><a name='sign'></a><a name="sign_PARAMHASH"
>sign PARAMHASH</a></dt>

<dd>
<p><i>Instance method, override.</i> Append a signature to the message. The params are:</p>

<dl>
<dt><a name="Attach"
>Attach</a></dt>

<dd>
<p>Instead of appending the text, add it to the message as an attachment. The disposition will be <code>inline</code>, and the description will indicate that it is a signature. The default behavior is to append the signature to the text of the message (or the text of its first part if multipart). <i>MIME-specific; new in this subclass.</i></p>

<dt><a name="File"
>File</a></dt>

<dd>
<p>Use the contents of this file as the signature. Fatal error if it can&#39;t be read. <i>As per superclass method.</i></p>

<dt><a name="Force"
>Force</a></dt>

<dd>
<p>Sign it even if the content-type isn&#39;t <code>text/*</code>. Useful for non-standard types like <code>x-foobar</code>, but be careful! <i>MIME-specific; new in this subclass.</i></p>

<dt><a name="Remove"
>Remove</a></dt>

<dd>
<p>Normally, we attempt to strip out any existing signature. If true, this gives us the NLINES parameter of the remove_sig call. If zero but defined, tells us <i>not</i> to remove any existing signature. If undefined, removal is done with the default of 10 lines. <i>New in this subclass.</i></p>

<dt><a name="Signature"
>Signature</a></dt>

<dd>
<p>Use this text as the signature. You can supply it as either a scalar, or as a ref to an array of newline-terminated scalars. <i>As per superclass method.</i></p>
</dd>
</dl>

<p>For MIME messages, this method is reasonably cautious: it will only attempt to sign a message with a content-type of <code>text/*</code>, unless <code>Force</code> is specified.</p>

<p>If you send this message to a multipart entity, it will relay it to the first part (the others usually being the &#34;attachments&#34;).</p>

<p><b>Warning:</b> currently slurps the whole message-part into core as an array of lines, so you probably don&#39;t want to use this on extremely long messages.</p>

<p>Returns true on success, false otherwise.</p>

<dt><a name="suggest_encoding"
>suggest_encoding</a></dt>

<dd>
<p><i>Instance method.</i> Based on the effective content type, return a good suggested encoding.</p>

<p><code>text</code> and <code>message</code> types have their bodies scanned line-by-line for 8-bit characters and long lines; lack of either means that the message is 7bit-ok. Other types are chosen independent of their body:</p>

<pre class="sh_perl">    Major type:      7bit ok?    Suggested encoding:
    -----------------------------------------------------------
    text             yes         7bit
    text             no          quoted-printable
    message          yes         7bit
    message          no          binary
    multipart        *           binary (in case some parts are bad)
    image, etc...    *           base64</pre>

<dt><a name='sync_headers'></a><a name="sync_headers_OPTIONS"
>sync_headers OPTIONS</a></dt>

<dd>
<p><i>Instance method.</i> This method does a variety of activities which ensure that the MIME headers of an entity &#34;tree&#34; are in-synch with the body parts they describe. It can be as expensive an operation as printing if it involves pre-encoding the body parts; however, the aim is to produce fairly clean MIME. <b>You will usually only need to invoke this if processing and re-sending MIME from an outside source.</b></p>

<p>The OPTIONS is a hash, which describes what is to be done.</p>

<dl>
<dt><a name="Length"
>Length</a></dt>

<dd>
<p>One of the &#34;official unofficial&#34; MIME fields is &#34;Content-Length&#34;. Normally, one doesn&#39;t care a whit about this field; however, if you are preparing output destined for HTTP, you may. The value of this option dictates what will be done:</p>

<p><b>COMPUTE</b> means to set a <code>Content-Length</code> field for every non-multipart part in the entity, and to blank that field out for every multipart part in the entity.</p>

<p><b>ERASE</b> means that <code>Content-Length</code> fields will all be blanked out. This is fast, painless, and safe.</p>

<p><b>Any false value</b> (the default) means to take no action.</p>

<dt><a name="Nonstandard"
>Nonstandard</a></dt>

<dd>
<p>Any header field beginning with &#34;Content-&#34; is, according to the RFC, a MIME field. However, some are non-standard, and may cause problems with certain MIME readers which interpret them in different ways.</p>

<p><b>ERASE</b> means that all such fields will be blanked out. This is done <i>before</i> the <b>Length</b> option (q.v.) is examined and acted upon.</p>

<p><b>Any false value</b> (the default) means to take no action.</p>
</dd>
</dl>

<p>Returns a true value if everything went okay, a false value otherwise.</p>

<dt><a name="tidy_body"
>tidy_body</a></dt>

<dd>
<p><i>Instance method, override.</i> Currently unimplemented for MIME messages. Does nothing, returns false.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Output"
>Output</a></h2>

<dl>
<dt><a name='dump_skeleton'></a><a name="dump_skeleton_[FILEHANDLE]"
>dump_skeleton [FILEHANDLE]</a></dt>

<dd>
<p><i>Instance method.</i> Dump the skeleton of the entity to the given FILEHANDLE, or to the currently-selected one if none given.</p>

<p>Each entity is output with an appropriate indentation level, the following selection of attributes:</p>

<pre class="sh_perl">    Content-type: multipart/mixed
    Effective-type: multipart/mixed
    Body-file: NONE
    Subject: Hey there!
    Num-parts: 2</pre>

<p>This is really just useful for debugging purposes; I make no guarantees about the consistency of the output format over time.</p>

<dt><a name='print'></a><a name="print_[OUTSTREAM]"
>print [OUTSTREAM]</a></dt>

<dd>
<p><i>Instance method, override.</i> Print the entity to the given OUTSTREAM, or to the currently-selected filehandle if none given. OUTSTREAM can be a filehandle, or any object that reponds to a print() message.</p>

<p>The entity is output as a valid MIME stream! This means that the header is always output first, and the body data (if any) will be encoded if the header says that it should be. For example, your output may look like this:</p>

<pre class="sh_perl">    Subject: Greetings
    Content-transfer-encoding: base64

    SGkgdGhlcmUhCkJ5ZSB0aGVyZSEK</pre>

<p><i>If this entity has MIME type &#34;multipart/*&#34;,</i> the preamble, parts, and epilogue are all output with appropriate boundaries separating each. Any bodyhandle is ignored:</p>

<pre class="sh_perl">    Content-type: multipart/mixed; boundary=&#34;*----*&#34;
    Content-transfer-encoding: 7bit

    [Preamble]
    --*----*
    [Entity: Part 0]
    --*----*
    [Entity: Part 1]
    --*----*--
    [Epilogue]</pre>

<p><i>If this entity has a single-part MIME type with no attached parts,</i> then we&#39;re looking at a normal singlepart entity: the body is output according to the encoding specified by the header. If no body exists, a warning is output and the body is treated as empty:</p>

<pre class="sh_perl">    Content-type: image/gif
    Content-transfer-encoding: base64

    [Encoded body]</pre>

<p><i>If this entity has a single-part MIME type but it also has parts,</i> then we&#39;re probably looking at a &#34;re-parsed&#34; singlepart, usually one of type <code>message/*</code> (you can get entities like this if you set the <code>parse_nested_messages(NEST)</code> option on the parser to true). In this case, the parts are output with single blank lines separating each, and any bodyhandle is ignored:</p>

<pre class="sh_perl">    Content-type: message/rfc822
    Content-transfer-encoding: 7bit

    [Entity: Part 0]

    [Entity: Part 1]</pre>

<p>In all cases, when outputting a &#34;part&#34; of the entity, this method is invoked recursively.</p>

<p><b>Note:</b> the output is very likely <i>not</i> going to be identical to any input you parsed to get this entity. If you&#39;re building some sort of email handler, it&#39;s up to you to save this information.</p>

<dt><a name='print_body'></a><a name="print_body_[OUTSTREAM]"
>print_body [OUTSTREAM]</a></dt>

<dd>
<p><i>Instance method, override.</i> Print the body of the entity to the given OUTSTREAM, or to the currently-selected filehandle if none given. OUTSTREAM can be a filehandle, or any object that reponds to a print() message.</p>

<p>The body is output for inclusion in a valid MIME stream; this means that the body data will be encoded if the header says that it should be.</p>

<p><b>Note:</b> by &#34;body&#34;, we mean &#34;the stuff following the header&#34;. A printed multipart body includes the printed representations of its subparts.</p>

<p><b>Note:</b> The body is <i>stored</i> in an un-encoded form; however, the idea is that the transfer encoding is used to determine how it should be <i>output.</i> This means that the <code>print()</code> method is always guaranteed to get you a sendmail-ready stream whose body is consistent with its head. If you want the <i>raw body data</i> to be output, you can either read it from the bodyhandle yourself, or use:</p>

<pre class="sh_perl">    $ent-&#62;bodyhandle-&#62;print($outstream);</pre>

<p>which uses read() calls to extract the information, and thus will work with both text and binary bodies.</p>

<p><b>Warning:</b> Please supply an OUTSTREAM. This override method differs from Mail::Internet&#39;s behavior, which outputs to the STDOUT if no filehandle is given: this may lead to confusion.</p>

<dt><a name='print_header'></a><a name="print_header_[OUTSTREAM]"
>print_header [OUTSTREAM]</a></dt>

<dd>
<p><i>Instance method, inherited.</i> Output the header to the given OUTSTREAM. You really should supply the OUTSTREAM.</p>

<dt><a name="stringify"
>stringify</a></dt>

<dd>
<p><i>Instance method.</i> Return the entity as a string, exactly as <code>print</code> would print it. The body will be encoded as necessary, and will contain any subparts. You can also use <code>as_string()</code>.</p>

<dt><a name="stringify_body"
>stringify_body</a></dt>

<dd>
<p><i>Instance method.</i> Return the <i>encoded</i> message body as a string, exactly as <code>print_body</code> would print it. You can also use <code>body_as_string()</code>.</p>

<p>If you want the <i>unencoded</i> body, and you are dealing with a singlepart message (like a &#34;text/plain&#34;), use <code>bodyhandle()</code> instead:</p>

<pre class="sh_perl">    if ($ent-&#62;bodyhandle) {
        $unencoded_data = $ent-&#62;bodyhandle-&#62;as_string;
    }
    else {
        ### this message has no body data (but it might have parts!)
    }</pre>

<dt><a name="stringify_header"
>stringify_header</a></dt>

<dd>
<p><i>Instance method.</i> Return the header as a string, exactly as <code>print_header</code> would print it. You can also use <code>header_as_string()</code>.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTES"
>NOTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Under_the_hood"
>Under the hood</a></h2>

<p>A <b>MIME::Entity</b> is composed of the following elements:</p>

<ul>
<li>A <i>head</i>, which is a reference to a MIME::Head object containing the header information.</li>

<li>A <i>bodyhandle</i>, which is a reference to a MIME::Body object containing the decoded body data. This is only defined if the message is a &#34;singlepart&#34; type:
<pre class="sh_perl">    application/*
    audio/*
    image/*
    text/*
    video/*</pre>
</li>

<li>An array of <i>parts</i>, where each part is a MIME::Entity object. The number of parts will only be nonzero if the content-type is <i>not</i> one of the &#34;singlepart&#34; types:
<pre class="sh_perl">    message/*        (should have exactly one part)
    multipart/*      (should have one or more parts)</pre>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_&#34;two-body_problem&#34;"
>The &#34;two-body problem&#34;</a></h2>

<p>MIME::Entity and Mail::Internet see message bodies differently, and this can cause confusion and some inconvenience. Sadly, I can&#39;t change the behavior of MIME::Entity without breaking lots of code already out there. But let&#39;s open up the floor for a few questions...</p>

<dl>
<dt><a name='What'></a><a name="What_is_the_difference_between_a_&#34;message&#34;_and_an_&#34;entity&#34;?"
>What is the difference between a &#34;message&#34; and an &#34;entity&#34;?</a></dt>

<dd>
<p>A <b>message</b> is the actual data being sent or received; usually this means a stream of newline-terminated lines. An <b>entity</b> is the representation of a message as an object.</p>

<p>This means that you get a &#34;message&#34; when you print an &#34;entity&#34; <i>to</i> a filehandle, and you get an &#34;entity&#34; when you parse a message <i>from</i> a filehandle.</p>

<dt><a name='What'></a><a name="What_is_a_message_body?"
>What is a message body?</a></dt>

<dd>
<p><b>Mail::Internet:</b> The portion of the printed message after the header.</p>

<p><b>MIME::Entity:</b> The portion of the printed message after the header.</p>

<dt><a name='How'></a><a name="How_is_a_message_body_stored_in_an_entity?"
>How is a message body stored in an entity?</a></dt>

<dd>
<p><b>Mail::Internet:</b> As an array of lines.</p>

<p><b>MIME::Entity:</b> It depends on the content-type of the message. For &#34;container&#34; types (<code>multipart/*</code>, <code>message/*</code>), we store the contained entities as an array of &#34;parts&#34;, accessed via the <code>parts()</code> method, where each part is a complete MIME::Entity. For &#34;singlepart&#34; types (<code>text/*</code>, <code>image/*</code>, etc.), the unencoded body data is referenced via a MIME::Body object, accessed via the <code>bodyhandle()</code> method:</p>

<pre class="sh_perl">                      bodyhandle()   parts()
    Content-type:     returns:       returns:
    ------------------------------------------------------------
    application/*     MIME::Body     empty
    audio/*           MIME::Body     empty
    image/*           MIME::Body     empty
    message/*         undef          MIME::Entity list (usually 1)
    multipart/*       undef          MIME::Entity list (usually &#62;0)
    text/*            MIME::Body     empty
    video/*           MIME::Body     empty
    x-*/*             MIME::Body     empty</pre>

<p>As a special case, <code>message/*</code> is currently ambiguous: depending on the parser, a <code>message/*</code> might be treated as a singlepart, with a MIME::Body and no parts. Use bodyhandle() as the final arbiter.</p>

<dt><a name='What'></a><a name="What_does_the_body()_method_return?"
>What does the body() method return?</a></dt>

<dd>
<p><b>Mail::Internet:</b> As an array of lines, ready for sending.</p>

<p><b>MIME::Entity:</b> As an array of lines, ready for sending.</p>

<dt><a name='What'></a><a name="What&#39;s_the_best_way_to_get_at_the_body_data?"
>What&#39;s the best way to get at the body data?</a></dt>

<dd>
<p><b>Mail::Internet:</b> Use the body() method.</p>

<p><b>MIME::Entity:</b> Depends on what you want... the <i>encoded</i> data (as it is transported), or the <i>unencoded</i> data? Keep reading...</p>

<dt><a name='How'></a><a name="How_do_I_get_the_&#34;encoded&#34;_body_data?"
>How do I get the &#34;encoded&#34; body data?</a></dt>

<dd>
<p><b>Mail::Internet:</b> Use the body() method.</p>

<p><b>MIME::Entity:</b> Use the body() method. You can also use:</p>

<pre class="sh_perl">    $entity-&#62;print_body()
    $entity-&#62;stringify_body()   ### a.k.a. $entity-&#62;body_as_string()</pre>

<dt><a name='How'></a><a name="How_do_I_get_the_&#34;unencoded&#34;_body_data?"
>How do I get the &#34;unencoded&#34; body data?</a></dt>

<dd>
<p><b>Mail::Internet:</b> Use the body() method.</p>

<p><b>MIME::Entity:</b> Use the <i>bodyhandle()</i> method! If bodyhandle() method returns true, then that value is a <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Body.pm" class="podlinkpod"
>MIME::Body</a> which can be used to access the data via its open() method. If bodyhandle() method returns an undefined value, then the entity is probably a &#34;container&#34; that has no real body data of its own (e.g., a &#34;multipart&#34; message): in this case, you should access the components via the parts() method. Like this:</p>

<pre class="sh_perl">    if ($bh = $entity-&#62;bodyhandle) {
        $io = $bh-&#62;open;
        ...access unencoded data via $io-&#62;getline or $io-&#62;read...
        $io-&#62;close;
    }
    else {
        foreach my $part (@parts) {
            ...do something with the part...
        }
    }</pre>

<p>You can also use:</p>

<pre class="sh_perl">    if ($bh = $entity-&#62;bodyhandle) {
        $unencoded_data = $bh-&#62;as_string;
    }
    else {
        ...do stuff with the parts...
    }</pre>

<dt><a name='What'></a><a name="What_does_the_body()_method_return?"
>What does the body() method return?</a></dt>

<dd>
<p><b>Mail::Internet:</b> The transport-encoded message body, as an array of lines.</p>

<p><b>MIME::Entity:</b> The transport-encoded message body, as an array of lines.</p>

<dt><a name='What'></a><a name="What_does_print_body()_print?"
>What does print_body() print?</a></dt>

<dd>
<p><b>Mail::Internet:</b> Exactly what body() would return to you.</p>

<p><b>MIME::Entity:</b> Exactly what body() would return to you.</p>

<dt><a 
>Say I have an entity which might be either singlepart or multipart. How do I print out just &#34;the stuff after the header&#34;?</a></dt>

<dd>
<p><b>Mail::Internet:</b> Use print_body().</p>

<p><b>MIME::Entity:</b> Use print_body().</p>

<dt><a name='Why'></a><a name="Why_is_MIME::Entity_so_different_from_Mail::Internet?"
>Why is MIME::Entity so different from Mail::Internet?</a></dt>

<dd>
<p>Because MIME streams are expected to have non-textual data... possibly, quite a lot of it, such as a tar file.</p>

<p>Because MIME messages can consist of multiple parts, which are most-easily manipulated as MIME::Entity objects themselves.</p>

<p>Because in the simpler world of Mail::Internet, the data of a message and its printed representation are <i>identical</i>... and in the MIME world, they&#39;re not.</p>

<p>Because parsing multipart bodies on-the-fly, or formatting multipart bodies for output, is a non-trivial task.</p>

<dt><a name='This'></a><a name="This_is_confusing._Can_the_two_classes_be_made_more_compatible?"
>This is confusing. Can the two classes be made more compatible?</a></dt>

<dd>
<p>Not easily; their implementations are necessarily quite different. Mail::Internet is a simple, efficient way of dealing with a &#34;black box&#34; mail message... one whose internal data you don&#39;t care much about. MIME::Entity, in contrast, cares <i>very much</i> about the message contents: that&#39;s its job!</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Design_issues"
>Design issues</a></h2>

<dl>
<dt><a name='Some'></a><a name="Some_things_just_can&#39;t_be_ignored"
>Some things just can&#39;t be ignored</a></dt>

<dd>
<p>In multipart messages, the <i>&#34;preamble&#34;</i> is the portion that precedes the first encapsulation boundary, and the <i>&#34;epilogue&#34;</i> is the portion that follows the last encapsulation boundary.</p>

<p>According to RFC 2046:</p>

<pre class="sh_perl">    There appears to be room for additional information prior
    to the first encapsulation boundary and following the final
    boundary.  These areas should generally be left blank, and
    implementations must ignore anything that appears before the
    first boundary or after the last one.

    NOTE: These &#34;preamble&#34; and &#34;epilogue&#34; areas are generally
    not used because of the lack of proper typing of these parts
    and the lack of clear semantics for handling these areas at
    gateways, particularly X.400 gateways.  However, rather than
    leaving the preamble area blank, many MIME implementations
    have found this to be a convenient place to insert an
    explanatory note for recipients who read the message with
    pre-MIME software, since such notes will be ignored by
    MIME-compliant software.</pre>

<p>In the world of standards-and-practices, that&#39;s the standard. Now for the practice:</p>

<p><i>Some &#34;MIME&#34; mailers may incorrectly put a &#34;part&#34; in the preamble</i>. Since we have to parse over the stuff <i>anyway</i>, in the future I <i>may</i> allow the parser option of creating special MIME::Entity objects for the preamble and epilogue, with bogus MIME::Head objects.</p>

<p>For now, though, we&#39;re MIME-compliant, so I probably won&#39;t change how we work.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?MIME%3A%3ATools" class="podlinkpod"
>MIME::Tools</a>, <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Head.pm" class="podlinkpod"
>MIME::Head</a>, <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Body.pm" class="podlinkpod"
>MIME::Body</a>, <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Decoder.pm" class="podlinkpod"
>MIME::Decoder</a>, <a href="/perldoc?Mail%3A%3AInternet" class="podlinkpod"
>Mail::Internet</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Eryq (<em>eryq@zeegee.com</em>), ZeeGee Software Inc (<em><a href="http://www.zeegee.com" class="podlinkurl"
>http://www.zeegee.com</a></em>). David F. Skoll (dfs@roaringpenguin.com) <a href="http://www.roaringpenguin.com" class="podlinkurl"
>http://www.roaringpenguin.com</a></p>

<p>All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78269 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 22:13:54 2012 GMT (0.170516014099121) @cpansearch1 -->
 </body>
</html>
