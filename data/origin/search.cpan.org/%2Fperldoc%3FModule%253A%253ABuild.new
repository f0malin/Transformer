<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Module::Build - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Module-Build",3]);
    _gaq.push(["_setCustomVar",5,"Release","Module-Build-0.40",3]);
    _gaq.push(["_setCustomVar",3,"Module","Module::Build",3]);
    _gaq.push(["_setCustomVar",1,"Author","LEONT",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Module::Build">permalink</a></div>
  <a href="/~leont/">Leon Timmermans</a> &gt;
  <a href="/~leont/Module-Build-0.40/">Module-Build-0.40</a> &gt;
  Module::Build
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/573321de2787b0d0b5230927d2a2b61e?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/L/LE/LEONT/Module-Build-0.40.tar.gz">Module-Build-0.40.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Module%3A%3ABuild;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~LEONT/Module-Build-0.40/lib/Module/Build.pm">Annotate this POD
(4)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Test%3A%3AMore">Test::More</a><br>
<a href="/perldoc?Test%3A%3AHarness">Test::Harness</a><br>
<a href="/perldoc?Module%3A%3AInstall">Module::Install</a><br>
<a href="/perldoc?File%3A%3ASpec">File::Spec</a><br>
<a href="/perldoc?Test%3A%3APod">Test::Pod</a><br>
<a href="/perldoc?CGI%3A%3AApplication">CGI::Application</a><br>
<a href="/perldoc?Devel%3A%3ACover">Devel::Cover</a><br>
<a href="/perldoc?Module%3A%3ASignature">Module::Signature</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Scalar%3A%3AUtil">Scalar::Util</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Module%3A%3ABuild">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 6</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 87</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 8</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Module-Build">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.40 &nbsp;
<span class="noprint">
  <a href="/src/LEONT/Module-Build-0.40/lib/Module/Build.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#GUIDE_TO_DOCUMENTATION'>GUIDE TO DOCUMENTATION</a>
  <li class='indexItem indexItem1'><a href='#ACTIONS'>ACTIONS</a>
  <li class='indexItem indexItem1'><a href='#OPTIONS'>OPTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Command_Line_Options'>Command Line Options</a>
    <li class='indexItem indexItem2'><a href='#Default_Options_File_(.modulebuildrc)'>Default Options File (.modulebuildrc)</a>
    <li class='indexItem indexItem2'><a href='#Environment_variables'>Environment variables</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#INSTALL_PATHS'>INSTALL PATHS</a>
  <li class='indexItem indexItem1'><a href='#MOTIVATIONS'>MOTIVATIONS</a>
  <li class='indexItem indexItem1'><a href='#TO_DO'>TO DO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Module::Build - Build and install Perl modules</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Standard process for building &#38; installing modules:</p>

<pre class="sh_perl">  perl Build.PL
  ./Build
  ./Build test
  ./Build install</pre>

<p>Or, if you&#39;re on a platform (like DOS or Windows) that doesn&#39;t require the &#34;./&#34; notation, you can do this:</p>

<pre class="sh_perl">  perl Build.PL
  Build
  Build test
  Build install</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>Module::Build</code> is a system for building, testing, and installing Perl modules. It is meant to be an alternative to <code>ExtUtils::MakeMaker</code>. Developers may alter the behavior of the module through subclassing in a much more straightforward way than with <code>MakeMaker</code>. It also does not require a <code>make</code> on your system - most of the <code>Module::Build</code> code is pure-perl and written in a very cross-platform way. In fact, you don&#39;t even need a shell, so even platforms like MacOS (traditional) can use it fairly easily. Its only prerequisites are modules that are included with perl 5.6.0, and it works fine on perl 5.005 if you can install a few additional modules.</p>

<p>See <a href="#MOTIVATIONS" class="podlinkpod"
>&#34;MOTIVATIONS&#34;</a> for more comparisons between <code>ExtUtils::MakeMaker</code> and <code>Module::Build</code>.</p>

<p>To install <code>Module::Build</code>, and any other module that uses <code>Module::Build</code> for its installation process, do the following:</p>

<pre class="sh_perl">  perl Build.PL       # &#39;Build.PL&#39; script creates the &#39;Build&#39; script
  ./Build             # Need ./ to ensure we&#39;re using this &#34;Build&#34; script
  ./Build test        # and not another one that happens to be in the PATH
  ./Build install</pre>

<p>This illustrates initial configuration and the running of three &#39;actions&#39;. In this case the actions run are &#39;build&#39; (the default action), &#39;test&#39;, and &#39;install&#39;. Other actions defined so far include:</p>

<pre class="sh_perl">  build                          manifest
  clean                          manifest_skip
  code                           manpages
  config_data                    pardist
  diff                           ppd
  dist                           ppmdist
  distcheck                      prereq_data
  distclean                      prereq_report
  distdir                        pure_install
  distinstall                    realclean
  distmeta                       retest
  distsign                       skipcheck
  disttest                       test
  docs                           testall
  fakeinstall                    testcover
  help                           testdb
  html                           testpod
  install                        testpodcoverage
  installdeps                    versioninstall</pre>

<p>You can run the &#39;help&#39; action for a complete list of actions.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="GUIDE_TO_DOCUMENTATION"
>GUIDE TO DOCUMENTATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The documentation for <code>Module::Build</code> is broken up into sections:</p>

<dl>
<dt><a name='General'></a><a name="General_Usage_(Module::Build)"
>General Usage (<a href="/~leont/Module-Build-0.40/lib/Module/Build.pm" class="podlinkpod"
>Module::Build</a>)</a></dt>

<dd>
<p>This is the document you are currently reading. It describes basic usage and background information. Its main purpose is to assist the user who wants to learn how to invoke and control <code>Module::Build</code> scripts at the command line.</p>

<dt><a name='Authoring'></a><a name="Authoring_Reference_(Module::Build::Authoring)"
>Authoring Reference (<a href="/~leont/Module-Build-0.40/lib/Module/Build/Authoring.pod" class="podlinkpod"
>Module::Build::Authoring</a>)</a></dt>

<dd>
<p>This document describes the structure and organization of <code>Module::Build</code>, and the relevant concepts needed by authors who are writing <em>Build.PL</em> scripts for a distribution or controlling <code>Module::Build</code> processes programmatically.</p>

<dt><a name='API'></a><a name="API_Reference_(Module::Build::API)"
>API Reference (<a href="/~leont/Module-Build-0.40/lib/Module/Build/API.pod" class="podlinkpod"
>Module::Build::API</a>)</a></dt>

<dd>
<p>This is a reference to the <code>Module::Build</code> API.</p>

<dt><a name='Cookbook'></a><a name="Cookbook_(Module::Build::Cookbook)"
>Cookbook (<a href="/~leont/Module-Build-0.40/lib/Module/Build/Cookbook.pm" class="podlinkpod"
>Module::Build::Cookbook</a>)</a></dt>

<dd>
<p>This document demonstrates how to accomplish many common tasks. It covers general command line usage and authoring of <em>Build.PL</em> scripts. Includes working examples.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACTIONS"
>ACTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There are some general principles at work here. First, each task when building a module is called an &#34;action&#34;. These actions are listed above; they correspond to the building, testing, installing, packaging, etc., tasks.</p>

<p>Second, arguments are processed in a very systematic way. Arguments are always key=value pairs. They may be specified at <code>perl Build.PL</code> time (i.e. <code>perl Build.PL destdir=/my/secret/place</code>), in which case their values last for the lifetime of the <code>Build</code> script. They may also be specified when executing a particular action (i.e. <code>Build test verbose=1</code>), in which case their values last only for the lifetime of that command. Per-action command line parameters take precedence over parameters specified at <code>perl Build.PL</code> time.</p>

<p>The build process also relies heavily on the <code>Config.pm</code> module. If the user wishes to override any of the values in <code>Config.pm</code>, she may specify them like so:</p>

<pre class="sh_perl">  perl Build.PL --config cc=gcc --config ld=gcc</pre>

<p>The following build actions are provided by default.</p>

<dl>
<dt><a name="build"
>build</a></dt>

<dd>
<p>[version 0.01]</p>

<p>If you run the <code>Build</code> script without any arguments, it runs the <code>build</code> action, which in turn runs the <code>code</code> and <code>docs</code> actions.</p>

<p>This is analogous to the <code>MakeMaker</code> <i>make all</i> target.</p>

<dt><a name="clean"
>clean</a></dt>

<dd>
<p>[version 0.01]</p>

<p>This action will clean up any files that the build process may have created, including the <code>blib/</code> directory (but not including the <code>_build/</code> directory and the <code>Build</code> script itself).</p>

<dt><a name="code"
>code</a></dt>

<dd>
<p>[version 0.20]</p>

<p>This action builds your code base.</p>

<p>By default it just creates a <code>blib/</code> directory and copies any <code>.pm</code> and <code>.pod</code> files from your <code>lib/</code> directory into the <code>blib/</code> directory. It also compiles any <code>.xs</code> files from <code>lib/</code> and places them in <code>blib/</code>. Of course, you need a working C compiler (probably the same one that built perl itself) for the compilation to work properly.</p>

<p>The <code>code</code> action also runs any <code>.PL</code> files in your <em>lib/</em> directory. Typically these create other files, named the same but without the <code>.PL</code> ending. For example, a file <em>lib/Foo/Bar.pm.PL</em> could create the file <em>lib/Foo/Bar.pm</em>. The <code>.PL</code> files are processed first, so any <code>.pm</code> files (or other kinds that we deal with) will get copied correctly.</p>

<dt><a name="config_data"
>config_data</a></dt>

<dd>
<p>[version 0.26]</p>

<p>...</p>

<dt><a name="diff"
>diff</a></dt>

<dd>
<p>[version 0.14]</p>

<p>This action will compare the files about to be installed with their installed counterparts. For .pm and .pod files, a diff will be shown (this currently requires a &#39;diff&#39; program to be in your PATH). For other files like compiled binary files, we simply report whether they differ.</p>

<p>A <code>flags</code> parameter may be passed to the action, which will be passed to the &#39;diff&#39; program. Consult your &#39;diff&#39; documentation for the parameters it will accept - a good one is <code>-u</code>:</p>

<pre class="sh_perl">  ./Build diff flags=-u</pre>

<dt><a name="dist"
>dist</a></dt>

<dd>
<p>[version 0.02]</p>

<p>This action is helpful for module authors who want to package up their module for source distribution through a medium like CPAN. It will create a tarball of the files listed in <em>MANIFEST</em> and compress the tarball using GZIP compression.</p>

<p>By default, this action will use the <code>Archive::Tar</code> module. However, you can force it to use binary &#34;tar&#34; and &#34;gzip&#34; executables by supplying an explicit <code>tar</code> (and optional <code>gzip</code>) parameter:</p>

<pre class="sh_perl">  ./Build dist --tar C:\path\to\tar.exe --gzip C:\path\to\zip.exe</pre>

<dt><a name="distcheck"
>distcheck</a></dt>

<dd>
<p>[version 0.05]</p>

<p>Reports which files are in the build directory but not in the <em>MANIFEST</em> file, and vice versa. (See <a href="/perldoc?manifest" class="podlinkpod"
>manifest</a> for details.)</p>

<dt><a name="distclean"
>distclean</a></dt>

<dd>
<p>[version 0.05]</p>

<p>Performs the &#39;realclean&#39; action and then the &#39;distcheck&#39; action.</p>

<dt><a name="distdir"
>distdir</a></dt>

<dd>
<p>[version 0.05]</p>

<p>Creates a &#34;distribution directory&#34; named <code>$dist_name-$dist_version</code> (if that directory already exists, it will be removed first), then copies all the files listed in the <em>MANIFEST</em> file to that directory. This directory is what the distribution tarball is created from.</p>

<dt><a name="distinstall"
>distinstall</a></dt>

<dd>
<p>[version 0.37]</p>

<p>Performs the &#39;distdir&#39; action, then switches into that directory and runs a <code>perl Build.PL</code>, followed by the &#39;build&#39; and &#39;install&#39; actions in that directory. Use PERL_MB_OPT or <em>.modulebuildrc</em> to set options that should be applied during subprocesses</p>

<dt><a name="distmeta"
>distmeta</a></dt>

<dd>
<p>[version 0.21]</p>

<p>Creates the <em>META.yml</em> file that describes the distribution.</p>

<p><em>META.yml</em> is a file containing various bits of <i>metadata</i> about the distribution. The metadata includes the distribution name, version, abstract, prerequisites, license, and various other data about the distribution. This file is created as <em>META.yml</em> in a simplified YAML format.</p>

<p><em>META.yml</em> file must also be listed in <em>MANIFEST</em> - if it&#39;s not, a warning will be issued.</p>

<p>The current version of the <em>META.yml</em> specification can be found on CPAN as <a href="/perldoc?CPAN%3A%3AMeta%3A%3ASpec" class="podlinkpod"
>CPAN::Meta::Spec</a>.</p>

<dt><a name="distsign"
>distsign</a></dt>

<dd>
<p>[version 0.16]</p>

<p>Uses <code>Module::Signature</code> to create a SIGNATURE file for your distribution, and adds the SIGNATURE file to the distribution&#39;s MANIFEST.</p>

<dt><a name="disttest"
>disttest</a></dt>

<dd>
<p>[version 0.05]</p>

<p>Performs the &#39;distdir&#39; action, then switches into that directory and runs a <code>perl Build.PL</code>, followed by the &#39;build&#39; and &#39;test&#39; actions in that directory. Use PERL_MB_OPT or <em>.modulebuildrc</em> to set options that should be applied during subprocesses</p>

<dt><a name="docs"
>docs</a></dt>

<dd>
<p>[version 0.20]</p>

<p>This will generate documentation (e.g. Unix man pages and HTML documents) for any installable items under <b>blib/</b> that contain POD. If there are no <code>bindoc</code> or <code>libdoc</code> installation targets defined (as will be the case on systems that don&#39;t support Unix manpages) no action is taken for manpages. If there are no <code>binhtml</code> or <code>libhtml</code> installation targets defined no action is taken for HTML documents.</p>

<dt><a name="fakeinstall"
>fakeinstall</a></dt>

<dd>
<p>[version 0.02]</p>

<p>This is just like the <code>install</code> action, but it won&#39;t actually do anything, it will just report what it <i>would</i> have done if you had actually run the <code>install</code> action.</p>

<dt><a name="help"
>help</a></dt>

<dd>
<p>[version 0.03]</p>

<p>This action will simply print out a message that is meant to help you use the build process. It will show you a list of available build actions too.</p>

<p>With an optional argument specifying an action name (e.g. <code>Build help test</code>), the &#39;help&#39; action will show you any POD documentation it can find for that action.</p>

<dt><a name="html"
>html</a></dt>

<dd>
<p>[version 0.26]</p>

<p>This will generate HTML documentation for any binary or library files under <b>blib/</b> that contain POD. The HTML documentation will only be installed if the install paths can be determined from values in <code>Config.pm</code>. You can also supply or override install paths on the command line by specifying <code>install_path</code> values for the <code>binhtml</code> and/or <code>libhtml</code> installation targets.</p>

<dt><a name="install"
>install</a></dt>

<dd>
<p>[version 0.01]</p>

<p>This action will use <code>ExtUtils::Install</code> to install the files from <code>blib/</code> into the system. See <a href="#INSTALL_PATHS" class="podlinkpod"
>&#34;INSTALL PATHS&#34;</a> for details about how Module::Build determines where to install things, and how to influence this process.</p>

<p>If you want the installation process to look around in <code>@INC</code> for other versions of the stuff you&#39;re installing and try to delete it, you can use the <code>uninst</code> parameter, which tells <code>ExtUtils::Install</code> to do so:</p>

<pre class="sh_perl">  ./Build install uninst=1</pre>

<p>This can be a good idea, as it helps prevent multiple versions of a module from being present on your system, which can be a confusing situation indeed.</p>

<dt><a name="installdeps"
>installdeps</a></dt>

<dd>
<p>[version 0.36]</p>

<p>This action will use the <code>cpan_client</code> parameter as a command to install missing prerequisites. You will be prompted whether to install optional dependencies.</p>

<p>The <code>cpan_client</code> option defaults to &#39;cpan&#39; but can be set as an option or in <em>.modulebuildrc</em>. It must be a shell command that takes a list of modules to install as arguments (e.g. &#39;cpanp -i&#39; for CPANPLUS). If the program part is a relative path (e.g. &#39;cpan&#39; or &#39;cpanp&#39;), it will be located relative to the perl program that executed Build.PL.</p>

<pre class="sh_perl">  /opt/perl/5.8.9/bin/perl Build.PL
  ./Build installdeps --cpan_client &#39;cpanp -i&#39;
  # installs to 5.8.9</pre>

<dt><a name="manifest"
>manifest</a></dt>

<dd>
<p>[version 0.05]</p>

<p>This is an action intended for use by module authors, not people installing modules. It will bring the <em>MANIFEST</em> up to date with the files currently present in the distribution. You may use a <em>MANIFEST.SKIP</em> file to exclude certain files or directories from inclusion in the <em>MANIFEST</em>. <em>MANIFEST.SKIP</em> should contain a bunch of regular expressions, one per line. If a file in the distribution directory matches any of the regular expressions, it won&#39;t be included in the <em>MANIFEST</em>.</p>

<p>The following is a reasonable <em>MANIFEST.SKIP</em> starting point, you can add your own stuff to it:</p>

<pre class="sh_perl">  ^_build
  ^Build$
  ^blib
  ~$
  \.bak$
  ^MANIFEST\.SKIP$
  CVS</pre>

<p>See the <a href="/perldoc?distcheck" class="podlinkpod"
>distcheck</a> and <a href="/perldoc?skipcheck" class="podlinkpod"
>skipcheck</a> actions if you want to find out what the <code>manifest</code> action would do, without actually doing anything.</p>

<dt><a name="manifest_skip"
>manifest_skip</a></dt>

<dd>
<p>[version 0.3608]</p>

<p>This is an action intended for use by module authors, not people installing modules. It will generate a boilerplate MANIFEST.SKIP file if one does not already exist.</p>

<dt><a name="manpages"
>manpages</a></dt>

<dd>
<p>[version 0.28]</p>

<p>This will generate man pages for any binary or library files under <b>blib/</b> that contain POD. The man pages will only be installed if the install paths can be determined from values in <code>Config.pm</code>. You can also supply or override install paths by specifying there values on the command line with the <code>bindoc</code> and <code>libdoc</code> installation targets.</p>

<dt><a name="pardist"
>pardist</a></dt>

<dd>
<p>[version 0.2806]</p>

<p>Generates a PAR binary distribution for use with <a href="/perldoc?PAR" class="podlinkpod"
>PAR</a> or <a href="/perldoc?PAR%3A%3ADist" class="podlinkpod"
>PAR::Dist</a>.</p>

<p>It requires that the PAR::Dist module (version 0.17 and up) is installed on your system.</p>

<dt><a name="ppd"
>ppd</a></dt>

<dd>
<p>[version 0.20]</p>

<p>Build a PPD file for your distribution.</p>

<p>This action takes an optional argument <code>codebase</code> which is used in the generated PPD file to specify the (usually relative) URL of the distribution. By default, this value is the distribution name without any path information.</p>

<p>Example:</p>

<pre class="sh_perl">  ./Build ppd --codebase &#34;MSWin32-x86-multi-thread/Module-Build-0.21.tar.gz&#34;</pre>

<dt><a name="ppmdist"
>ppmdist</a></dt>

<dd>
<p>[version 0.23]</p>

<p>Generates a PPM binary distribution and a PPD description file. This action also invokes the <code>ppd</code> action, so it can accept the same <code>codebase</code> argument described under that action.</p>

<p>This uses the same mechanism as the <code>dist</code> action to tar &#38; zip its output, so you can supply <code>tar</code> and/or <code>gzip</code> parameters to affect the result.</p>

<dt><a name="prereq_data"
>prereq_data</a></dt>

<dd>
<p>[version 0.32]</p>

<p>This action prints out a Perl data structure of all prerequisites and the versions required. The output can be loaded again using <code>eval()</code>. This can be useful for external tools that wish to query a Build script for prerequisites.</p>

<dt><a name="prereq_report"
>prereq_report</a></dt>

<dd>
<p>[version 0.28]</p>

<p>This action prints out a list of all prerequisites, the versions required, and the versions actually installed. This can be useful for reviewing the configuration of your system prior to a build, or when compiling data to send for a bug report.</p>

<dt><a name="pure_install"
>pure_install</a></dt>

<dd>
<p>[version 0.28]</p>

<p>This action is identical to the <code>install</code> action. In the future, though, when <code>install</code> starts writing to the file <em>$(INSTALLARCHLIB)/perllocal.pod</em>, <code>pure_install</code> won&#39;t, and that will be the only difference between them.</p>

<dt><a name="realclean"
>realclean</a></dt>

<dd>
<p>[version 0.01]</p>

<p>This action is just like the <code>clean</code> action, but also removes the <code>_build</code> directory and the <code>Build</code> script. If you run the <code>realclean</code> action, you are essentially starting over, so you will have to re-create the <code>Build</code> script again.</p>

<dt><a name="retest"
>retest</a></dt>

<dd>
<p>[version 0.2806]</p>

<p>This is just like the <code>test</code> action, but doesn&#39;t actually build the distribution first, and doesn&#39;t add <em>blib/</em> to the load path, and therefore will test against a <i>previously</i> installed version of the distribution. This can be used to verify that a certain installed distribution still works, or to see whether newer versions of a distribution still pass the old regression tests, and so on.</p>

<dt><a name="skipcheck"
>skipcheck</a></dt>

<dd>
<p>[version 0.05]</p>

<p>Reports which files are skipped due to the entries in the <em>MANIFEST.SKIP</em> file (See <a href="/perldoc?manifest" class="podlinkpod"
>manifest</a> for details)</p>

<dt><a name="test"
>test</a></dt>

<dd>
<p>[version 0.01]</p>

<p>This will use <code>Test::Harness</code> or <code>TAP::Harness</code> to run any regression tests and report their results. Tests can be defined in the standard places: a file called <code>test.pl</code> in the top-level directory, or several files ending with <code>.t</code> in a <code>t/</code> directory.</p>

<p>If you want tests to be &#39;verbose&#39;, i.e. show details of test execution rather than just summary information, pass the argument <code>verbose=1</code>.</p>

<p>If you want to run tests under the perl debugger, pass the argument <code>debugger=1</code>.</p>

<p>If you want to have Module::Build find test files with different file name extensions, pass the <code>test_file_exts</code> argument with an array of extensions, such as <code>[qw( .t .s .z )]</code>.</p>

<p>If you want test to be run by <code>TAP::Harness</code>, rather than <code>Test::Harness</code>, pass the argument <code>tap_harness_args</code> as an array reference of arguments to pass to the TAP::Harness constructor.</p>

<p>In addition, if a file called <code>visual.pl</code> exists in the top-level directory, this file will be executed as a Perl script and its output will be shown to the user. This is a good place to put speed tests or other tests that don&#39;t use the <code>Test::Harness</code> format for output.</p>

<p>To override the choice of tests to run, you may pass a <code>test_files</code> argument whose value is a whitespace-separated list of test scripts to run. This is especially useful in development, when you only want to run a single test to see whether you&#39;ve squashed a certain bug yet:</p>

<pre class="sh_perl">  ./Build test --test_files t/something_failing.t</pre>

<p>You may also pass several <code>test_files</code> arguments separately:</p>

<pre class="sh_perl">  ./Build test --test_files t/one.t --test_files t/two.t</pre>

<p>or use a <code>glob()</code>-style pattern:</p>

<pre class="sh_perl">  ./Build test --test_files &#39;t/01-*.t&#39;</pre>

<dt><a name="testall"
>testall</a></dt>

<dd>
<p>[version 0.2807]</p>

<p>[Note: the &#39;testall&#39; action and the code snippets below are currently in alpha stage, see <a href="/perldoc?%22http%3A#/www.nntp.perl.org/group/perl.module.build/2007/03/msg584.html&#34;" class="podlinkpod"
>&#34;/www.nntp.perl.org/group/perl.module.build/2007/03/msg584.html&#34;&#34; in &#34;http:</a> ]</p>

<p>Runs the <code>test</code> action plus each of the <code>test$type</code> actions defined by the keys of the <code>test_types</code> parameter.</p>

<p>Currently, you need to define the ACTION_test$type method yourself and enumerate them in the test_types parameter.</p>

<pre class="sh_perl">  my $mb = Module::Build-&#62;subclass(
    code =&#62; q(
      sub ACTION_testspecial { shift-&#62;generic_test(type =&#62; &#39;special&#39;); }
      sub ACTION_testauthor  { shift-&#62;generic_test(type =&#62; &#39;author&#39;); }
    )
  )-&#62;new(
    ...
    test_types  =&#62; {
      special =&#62; &#39;.st&#39;,
      author  =&#62; [&#39;.at&#39;, &#39;.pt&#39; ],
    },
    ...</pre>

<dt><a name="testcover"
>testcover</a></dt>

<dd>
<p>[version 0.26]</p>

<p>Runs the <code>test</code> action using <code>Devel::Cover</code>, generating a code-coverage report showing which parts of the code were actually exercised during the tests.</p>

<p>To pass options to <code>Devel::Cover</code>, set the <code>$DEVEL_COVER_OPTIONS</code> environment variable:</p>

<pre class="sh_perl">  DEVEL_COVER_OPTIONS=-ignore,Build ./Build testcover</pre>

<dt><a name="testdb"
>testdb</a></dt>

<dd>
<p>[version 0.05]</p>

<p>This is a synonym for the &#39;test&#39; action with the <code>debugger=1</code> argument.</p>

<dt><a name="testpod"
>testpod</a></dt>

<dd>
<p>[version 0.25]</p>

<p>This checks all the files described in the <code>docs</code> action and produces <code>Test::Harness</code>-style output. If you are a module author, this is useful to run before creating a new release.</p>

<dt><a name="testpodcoverage"
>testpodcoverage</a></dt>

<dd>
<p>[version 0.28]</p>

<p>This checks the pod coverage of the distribution and produces <code>Test::Harness</code>-style output. If you are a module author, this is useful to run before creating a new release.</p>

<dt><a name="versioninstall"
>versioninstall</a></dt>

<dd>
<p>[version 0.16]</p>

<p>** Note: since <code>only.pm</code> is so new, and since we just recently added support for it here too, this feature is to be considered experimental. **</p>

<p>If you have the <code>only.pm</code> module installed on your system, you can use this action to install a module into the version-specific library trees. This means that you can have several versions of the same module installed and <code>use</code> a specific one like this:</p>

<pre class="sh_perl">  use only MyModule =&#62; 0.55;</pre>

<p>To override the default installation libraries in <code>only::config</code>, specify the <code>versionlib</code> parameter when you run the <code>Build.PL</code> script:</p>

<pre class="sh_perl">  perl Build.PL --versionlib /my/version/place/</pre>

<p>To override which version the module is installed as, specify the <code>version</code> parameter when you run the <code>Build.PL</code> script:</p>

<pre class="sh_perl">  perl Build.PL --version 0.50</pre>

<p>See the <code>only.pm</code> documentation for more information on version-specific installs.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OPTIONS"
>OPTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Command_Line_Options"
>Command Line Options</a></h2>

<p>The following options can be used during any invocation of <code>Build.PL</code> or the Build script, during any action. For information on other options specific to an action, see the documentation for the respective action.</p>

<p>NOTE: There is some preliminary support for options to use the more familiar long option style. Most options can be preceded with the <code>--</code> long option prefix, and the underscores changed to dashes (e.g. <code>--use-rcfile</code>). Additionally, the argument to boolean options is optional, and boolean options can be negated by prefixing them with <code>no</code> or <code>no-</code> (e.g. <code>--noverbose</code> or <code>--no-verbose</code>).</p>

<dl>
<dt><a name="quiet"
>quiet</a></dt>

<dd>
<p>Suppress informative messages on output.</p>

<dt><a name="verbose"
>verbose</a></dt>

<dd>
<p>Display extra information about the Build on output. <code>verbose</code> will turn off <code>quiet</code></p>

<dt><a name="cpan_client"
>cpan_client</a></dt>

<dd>
<p>Sets the <code>cpan_client</code> command for use with the <code>installdeps</code> action. See <code>installdeps</code> for more details.</p>

<dt><a name="use_rcfile"
>use_rcfile</a></dt>

<dd>
<p>Load the <em>~/.modulebuildrc</em> option file. This option can be set to false to prevent the custom resource file from being loaded.</p>

<dt><a name="allow_mb_mismatch"
>allow_mb_mismatch</a></dt>

<dd>
<p>Suppresses the check upon startup that the version of Module::Build we&#39;re now running under is the same version that was initially invoked when building the distribution (i.e. when the <code>Build.PL</code> script was first run). As of 0.3601, a mismatch results in a warning instead of a fatal error, so this option effectively just suppresses the warning.</p>

<dt><a name="debug"
>debug</a></dt>

<dd>
<p>Prints Module::Build debugging information to STDOUT, such as a trace of executed build actions.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Default_Options_File_(.modulebuildrc)"
>Default Options File (<em>.modulebuildrc</em>)</a></h2>

<p>[version 0.28]</p>

<p>When Module::Build starts up, it will look first for a file, <em>$ENV{HOME}/.modulebuildrc</em>. If it&#39;s not found there, it will look in the the <em>.modulebuildrc</em> file in the directories referred to by the environment variables <code>HOMEDRIVE</code> + <code>HOMEDIR</code>, <code>USERPROFILE</code>, <code>APPDATA</code>, <code>WINDIR</code>, <code>SYS$LOGIN</code>. If the file exists, the options specified there will be used as defaults, as if they were typed on the command line. The defaults can be overridden by specifying new values on the command line.</p>

<p>The action name must come at the beginning of the line, followed by any amount of whitespace and then the options. Options are given the same as they would be on the command line. They can be separated by any amount of whitespace, including newlines, as long there is whitespace at the beginning of each continued line. Anything following a hash mark (<code>#</code>) is considered a comment, and is stripped before parsing. If more than one line begins with the same action name, those lines are merged into one set of options.</p>

<p>Besides the regular actions, there are two special pseudo-actions: the key <code>*</code> (asterisk) denotes any global options that should be applied to all actions, and the key &#39;Build_PL&#39; specifies options to be applied when you invoke <code>perl Build.PL</code>.</p>

<pre class="sh_perl">  *           verbose=1   # global options
  diff        flags=-u
  install     --install_base /home/ken
              --install_path html=/home/ken/docs/html
  installdeps --cpan_client &#39;cpanp -i&#39;</pre>

<p>If you wish to locate your resource file in a different location, you can set the environment variable <code>MODULEBUILDRC</code> to the complete absolute path of the file containing your options.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Environment_variables"
>Environment variables</a></h2>

<dl>
<dt><a name="MODULEBUILDRC"
>MODULEBUILDRC</a></dt>

<dd>
<p>[version 0.28]</p>

<p>Specifies an alternate location for a default options file as described above.</p>

<dt><a name="PERL_MB_OPT"
>PERL_MB_OPT</a></dt>

<dd>
<p>[version 0.36]</p>

<p>Command line options that are applied to Build.PL or any Build action. The string is split as the shell would (e.g. whitespace) and the result is prepended to any actual command-line arguments.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INSTALL_PATHS"
>INSTALL PATHS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>[version 0.19]</p>

<p>When you invoke Module::Build&#39;s <code>build</code> action, it needs to figure out where to install things. The nutshell version of how this works is that default installation locations are determined from <em>Config.pm</em>, and they may be overridden by using the <code>install_path</code> parameter. An <code>install_base</code> parameter lets you specify an alternative installation root like <em>/home/foo</em>, and a <code>destdir</code> lets you specify a temporary installation directory like <em>/tmp/install</em> in case you want to create bundled-up installable packages.</p>

<p>Natively, Module::Build provides default installation locations for the following types of installable items:</p>

<dl>
<dt><a name="lib"
>lib</a></dt>

<dd>
<p>Usually pure-Perl module files ending in <em>.pm</em>.</p>

<dt><a name="arch"
>arch</a></dt>

<dd>
<p>&#34;Architecture-dependent&#34; module files, usually produced by compiling XS, <a href="/perldoc?Inline" class="podlinkpod"
>Inline</a>, or similar code.</p>

<dt><a name="script"
>script</a></dt>

<dd>
<p>Programs written in pure Perl. In order to improve reuse, try to make these as small as possible - put the code into modules whenever possible.</p>

<dt><a name="bin"
>bin</a></dt>

<dd>
<p>&#34;Architecture-dependent&#34; executable programs, i.e. compiled C code or something. Pretty rare to see this in a perl distribution, but it happens.</p>

<dt><a name="bindoc"
>bindoc</a></dt>

<dd>
<p>Documentation for the stuff in <code>script</code> and <code>bin</code>. Usually generated from the POD in those files. Under Unix, these are manual pages belonging to the &#39;man1&#39; category.</p>

<dt><a name="libdoc"
>libdoc</a></dt>

<dd>
<p>Documentation for the stuff in <code>lib</code> and <code>arch</code>. This is usually generated from the POD in <em>.pm</em> files. Under Unix, these are manual pages belonging to the &#39;man3&#39; category.</p>

<dt><a name="binhtml"
>binhtml</a></dt>

<dd>
<p>This is the same as <code>bindoc</code> above, but applies to HTML documents.</p>

<dt><a name="libhtml"
>libhtml</a></dt>

<dd>
<p>This is the same as <code>libdoc</code> above, but applies to HTML documents.</p>
</dd>
</dl>

<p>Four other parameters let you control various aspects of how installation paths are determined:</p>

<dl>
<dt><a name="installdirs"
>installdirs</a></dt>

<dd>
<p>The default destinations for these installable things come from entries in your system&#39;s <code>Config.pm</code>. You can select from three different sets of default locations by setting the <code>installdirs</code> parameter as follows:</p>

<pre class="sh_perl">                          &#39;installdirs&#39; set to:
                   core          site                vendor

              uses the following defaults from Config.pm:

  lib     =&#62; installprivlib  installsitelib      installvendorlib
  arch    =&#62; installarchlib  installsitearch     installvendorarch
  script  =&#62; installscript   installsitebin      installvendorbin
  bin     =&#62; installbin      installsitebin      installvendorbin
  bindoc  =&#62; installman1dir  installsiteman1dir  installvendorman1dir
  libdoc  =&#62; installman3dir  installsiteman3dir  installvendorman3dir
  binhtml =&#62; installhtml1dir installsitehtml1dir installvendorhtml1dir [*]
  libhtml =&#62; installhtml3dir installsitehtml3dir installvendorhtml3dir [*]

  * Under some OS (eg. MSWin32) the destination for HTML documents is
    determined by the C&#60;Config.pm&#62; entry C&#60;installhtmldir&#62;.</pre>

<p>The default value of <code>installdirs</code> is &#34;site&#34;. If you&#39;re creating vendor distributions of module packages, you may want to do something like this:</p>

<pre class="sh_perl">  perl Build.PL --installdirs vendor</pre>

<p>or</p>

<pre class="sh_perl">  ./Build install --installdirs vendor</pre>

<p>If you&#39;re installing an updated version of a module that was included with perl itself (i.e. a &#34;core module&#34;), then you may set <code>installdirs</code> to &#34;core&#34; to overwrite the module in its present location.</p>

<p>(Note that the &#39;script&#39; line is different from <code>MakeMaker</code> - unfortunately there&#39;s no such thing as &#34;installsitescript&#34; or &#34;installvendorscript&#34; entry in <code>Config.pm</code>, so we use the &#34;installsitebin&#34; and &#34;installvendorbin&#34; entries to at least get the general location right. In the future, if <code>Config.pm</code> adds some more appropriate entries, we&#39;ll start using those.)</p>

<dt><a name="install_path"
>install_path</a></dt>

<dd>
<p>Once the defaults have been set, you can override them.</p>

<p>On the command line, that would look like this:</p>

<pre class="sh_perl">  perl Build.PL --install_path lib=/foo/lib --install_path arch=/foo/lib/arch</pre>

<p>or this:</p>

<pre class="sh_perl">  ./Build install --install_path lib=/foo/lib --install_path arch=/foo/lib/arch</pre>

<dt><a name="install_base"
>install_base</a></dt>

<dd>
<p>You can also set the whole bunch of installation paths by supplying the <code>install_base</code> parameter to point to a directory on your system. For instance, if you set <code>install_base</code> to &#34;/home/ken&#34; on a Linux system, you&#39;ll install as follows:</p>

<pre class="sh_perl">  lib     =&#62; /home/ken/lib/perl5
  arch    =&#62; /home/ken/lib/perl5/i386-linux
  script  =&#62; /home/ken/bin
  bin     =&#62; /home/ken/bin
  bindoc  =&#62; /home/ken/man/man1
  libdoc  =&#62; /home/ken/man/man3
  binhtml =&#62; /home/ken/html
  libhtml =&#62; /home/ken/html</pre>

<p>Note that this is <i>different</i> from how <code>MakeMaker</code>&#39;s <code>PREFIX</code> parameter works. <code>install_base</code> just gives you a default layout under the directory you specify, which may have little to do with the <code>installdirs=site</code> layout.</p>

<p>The exact layout under the directory you specify may vary by system - we try to do the &#34;sensible&#34; thing on each platform.</p>

<dt><a name="destdir"
>destdir</a></dt>

<dd>
<p>If you want to install everything into a temporary directory first (for instance, if you want to create a directory tree that a package manager like <code>rpm</code> or <code>dpkg</code> could create a package from), you can use the <code>destdir</code> parameter:</p>

<pre class="sh_perl">  perl Build.PL --destdir /tmp/foo</pre>

<p>or</p>

<pre class="sh_perl">  ./Build install --destdir /tmp/foo</pre>

<p>This will effectively install to &#34;/tmp/foo/$sitelib&#34;, &#34;/tmp/foo/$sitearch&#34;, and the like, except that it will use <code>File::Spec</code> to make the pathnames work correctly on whatever platform you&#39;re installing on.</p>

<dt><a name="prefix"
>prefix</a></dt>

<dd>
<p>Provided for compatibility with <code>ExtUtils::MakeMaker</code>&#39;s PREFIX argument. <code>prefix</code> should be used when you want Module::Build to install your modules, documentation, and scripts in the same place as <code>ExtUtils::MakeMaker</code>&#39;s PREFIX mechanism.</p>

<p>The following are equivalent.</p>

<pre class="sh_perl">    perl Build.PL --prefix /tmp/foo
    perl Makefile.PL PREFIX=/tmp/foo</pre>

<p>Because of the complex nature of the prefixification logic, the behavior of PREFIX in <code>MakeMaker</code> has changed subtly over time. Module::Build&#39;s --prefix logic is equivalent to the PREFIX logic found in <code>ExtUtils::MakeMaker</code> 6.30.</p>

<p>The maintainers of <code>MakeMaker</code> do understand the troubles with the PREFIX mechanism, and added INSTALL_BASE support in version 6.31 of <code>MakeMaker</code>, which was released in 2006.</p>

<p>If you don&#39;t need to retain compatibility with old versions (pre-6.31) of <code>ExtUtils::MakeMaker</code> or are starting a fresh Perl installation we recommend you use <code>install_base</code> instead (and <code>INSTALL_BASE</code> in <code>ExtUtils::MakeMaker</code>). See <a href="/~leont/Module-Build-0.40/lib/Module/Build/Cookbook.pm#Installing_in_the_same_location_as_ExtUtils::MakeMaker" class="podlinkpod"
>&#34;Installing in the same location as ExtUtils::MakeMaker&#34; in Module::Build::Cookbook</a> for further information.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MOTIVATIONS"
>MOTIVATIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There are several reasons I wanted to start over, and not just fix what I didn&#39;t like about <code>MakeMaker</code>:</p>

<ul>
<li>I don&#39;t like the core idea of <code>MakeMaker</code>, namely that <code>make</code> should be involved in the build process. Here are my reasons:
<dl>
<dt><a name="+"
>+</a></dt>

<dd>
<p>When a person is installing a Perl module, what can you assume about their environment? Can you assume they have <code>make</code>? No, but you can assume they have some version of Perl.</p>

<dt><a name="+"
>+</a></dt>

<dd>
<p>When a person is writing a Perl module for intended distribution, can you assume that they know how to build a Makefile, so they can customize their build process? No, but you can assume they know Perl, and could customize that way.</p>
</dd>
</dl>

<p>For years, these things have been a barrier to people getting the build/install process to do what they want.</p>
</li>

<li>There are several architectural decisions in <code>MakeMaker</code> that make it very difficult to customize its behavior. For instance, when using <code>MakeMaker</code> you do <code>use ExtUtils::MakeMaker</code>, but the object created in <code>WriteMakefile()</code> is actually blessed into a package name that&#39;s created on the fly, so you can&#39;t simply subclass <code>ExtUtils::MakeMaker</code>. There is a workaround <code>MY</code> package that lets you override certain <code>MakeMaker</code> methods, but only certain explicitly preselected (by <code>MakeMaker</code>) methods can be overridden. Also, the method of customization is very crude: you have to modify a string containing the Makefile text for the particular target. Since these strings aren&#39;t documented, and <i>can&#39;t</i> be documented (they take on different values depending on the platform, version of perl, version of <code>MakeMaker</code>, etc.), you have no guarantee that your modifications will work on someone else&#39;s machine or after an upgrade of <code>MakeMaker</code> or perl.</li>

<li>It is risky to make major changes to <code>MakeMaker</code>, since it does so many things, is so important, and generally works. <code>Module::Build</code> is an entirely separate package so that I can work on it all I want, without worrying about backward compatibility with <code>MakeMaker</code>.</li>

<li>Finally, Perl is said to be a language for system administration. Could it really be the case that Perl isn&#39;t up to the task of building and installing software? Even if that software is a bunch of <code>.pm</code> files that just need to be copied from one place to another? My sense was that we could design a system to accomplish this in a flexible, extensible, and friendly manner. Or die trying.</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TO_DO"
>TO DO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The current method of relying on time stamps to determine whether a derived file is out of date isn&#39;t likely to scale well, since it requires tracing all dependencies backward, it runs into problems on NFS, and it&#39;s just generally flimsy. It would be better to use an MD5 signature or the like, if available. See <code>cons</code> for an example.</p>

<pre class="sh_perl"> - append to perllocal.pod
 - add a &#39;plugin&#39; functionality</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Ken Williams &#60;kwilliams@cpan.org&#62;</p>

<p>Development questions, bug reports, and patches should be sent to the Module-Build mailing list at &#60;module-build@perl.org&#62;.</p>

<p>Bug reports are also welcome at &#60;<a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=Module-Build" class="podlinkurl"
>http://rt.cpan.org/NoAuth/Bugs.html?Dist=Module-Build</a>&#62;.</p>

<p>The latest development version is available from the Git repository at &#60;<a href="https://github.com/Perl-Toolchain-Gang/Module-Build" class="podlinkurl"
>https://github.com/Perl-Toolchain-Gang/Module-Build</a>&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2001-2006 Ken Williams. All rights reserved.</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perl(1), <a href="/~leont/Module-Build-0.40/lib/Module/Build/Cookbook.pm" class="podlinkpod"
>Module::Build::Cookbook</a>, <a href="/~leont/Module-Build-0.40/lib/Module/Build/Authoring.pod" class="podlinkpod"
>Module::Build::Authoring</a>, <a href="/~leont/Module-Build-0.40/lib/Module/Build/API.pod" class="podlinkpod"
>Module::Build::API</a>, <a href="/perldoc?ExtUtils%3A%3AMakeMaker" class="podlinkpod"
>ExtUtils::MakeMaker</a></p>

<p><em>META.yml</em> Specification: <a href="/perldoc?CPAN%3A%3AMeta%3A%3ASpec" class="podlinkpod"
>CPAN::Meta::Spec</a></p>

<p><a href="http://www.dsmit.com/cons/" class="podlinkurl"
>http://www.dsmit.com/cons/</a></p>

<p><a href="http://search.cpan.org/dist/PerlBuildSystem/" class="podlinkurl"
>http://search.cpan.org/dist/PerlBuildSystem/</a></p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78056 Uploads, 24684 Distributions
105889 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 21 21:45:30 2012 GMT (0.169099092483521) @cpansearch1 -->
 </body>
</html>
