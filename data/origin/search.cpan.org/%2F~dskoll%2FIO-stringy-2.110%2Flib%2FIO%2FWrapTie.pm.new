<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>IO::WrapTie - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","IO-stringy",3]);
    _gaq.push(["_setCustomVar",5,"Release","IO-stringy-2.110",3]);
    _gaq.push(["_setCustomVar",3,"Module","IO::WrapTie",3]);
    _gaq.push(["_setCustomVar",1,"Author","DSKOLL",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?IO::WrapTie">permalink</a></div>
  <a href="/~dskoll/">David F. Skoll</a> &gt;
  <a href="/~dskoll/IO-stringy-2.110/">IO-stringy-2.110</a> &gt;
  IO::WrapTie
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/77ceb1d700a17c6454d82e26e73d9807?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DS/DSKOLL/IO-stringy-2.110.tar.gz">IO-stringy-2.110.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=IO%3A%3AWrapTie;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DSKOLL/IO-stringy-2.110/lib/IO/WrapTie.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 15</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 3</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=IO-stringy">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.110 &nbsp;
<span class="noprint">
  <a href="/src/DSKOLL/IO-stringy-2.110/lib/IO/WrapTie.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#HOW_IT_ALL_WORKS'>HOW IT ALL WORKS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#The_data_structures'>The data structures</a>
    <li class='indexItem indexItem2'><a href='#How_wraptie()_works'>How wraptie() works</a>
    <li class='indexItem indexItem2'><a href='#How_I/O_operators_work_(on_the_master)'>How I/O operators work (on the master)</a>
    <li class='indexItem indexItem2'><a href='#How_methods_work_(on_the_master)'>How methods work (on the master)</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#NOTES'>NOTES</a>
  <li class='indexItem indexItem1'><a href='#WARNINGS'>WARNINGS</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>IO::WrapTie - wrap tieable objects in IO::Handle interface</p>

<p><i>This is currently Alpha code,
released for comments.
Please give me your feedback!</i></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>First of all,
you&#39;ll need tie(),
so:</p>

<pre class="sh_perl">   require 5.004;</pre>

<p><i>Function interface (experimental).</i> Use this with any existing class...</p>

<pre class="sh_perl">   use IO::WrapTie;
   use FooHandle;                  ### implements TIEHANDLE interface

   ### Suppose we want a &#34;FooHandle-&#62;new(&#38;FOO_RDWR, 2)&#34;.
   ### We can instead say...

   $FH = wraptie(&#39;FooHandle&#39;, &#38;FOO_RDWR, 2); 

   ### Now we can use...    
   print $FH &#34;Hello, &#34;;            ### traditional operator syntax...
   $FH-&#62;print(&#34;world!\n&#34;);         ### ...and OO syntax as well!</pre>

<p><i>OO interface (preferred).</i> You can inherit from the IO::WrapTie::Slave mixin to get a nifty <code>new_tie()</code> constructor...</p>

<pre class="sh_perl">   #------------------------------    
   package FooHandle;                        ### a class which can TIEHANDLE

   use IO::WrapTie;  
   @ISA = qw(IO::WrapTie::Slave);            ### inherit new_tie()
   ...


   #------------------------------    
   package main; 

   $FH = FooHandle-&#62;new_tie(&#38;FOO_RDWR, 2);   ### $FH is an IO::WrapTie::Master
   print $FH &#34;Hello, &#34;;                      ### traditional operator syntax
   $FH-&#62;print(&#34;world!\n&#34;);                   ### OO syntax</pre>

<p>See IO::Scalar as an example. It also shows you how to create classes which work both with and without 5.004.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Suppose you have a class <code>FooHandle</code>, where...</p>

<ul>
<li><b>FooHandle does not inherit from IO::Handle;</b> that is, it performs filehandle-like I/O, but to something other than an underlying file descriptor. Good examples are IO::Scalar (for printing to a string) and IO::Lines (for printing to an array of lines).</li>

<li><b>FooHandle implements the TIEHANDLE interface</b> (see <a href="/perldoc?perltie" class="podlinkpod"
>perltie</a>); that is, it provides methods TIEHANDLE, GETC, PRINT, PRINTF, READ, and READLINE.</li>

<li><b>FooHandle implements the traditional OO interface</b> of FileHandle and IO::Handle; i.e., it contains methods like getline(), read(), print(), seek(), tell(), eof(), etc.</li>
</ul>

<p>Normally, users of your class would have two options:</p>

<ul>
<li><b>Use only OO syntax,</b> and forsake named I/O operators like &#39;print&#39;.</li>

<li><b>Use with tie,</b> and forsake treating it as a first-class object (i.e., class-specific methods can only be invoked through the underlying object via tied()... giving the object a &#34;split personality&#34;).</li>
</ul>

<p>But now with IO::WrapTie, you can say:</p>

<pre class="sh_perl">    $WT = wraptie(&#39;FooHandle&#39;, &#38;FOO_RDWR, 2);
    $WT-&#62;print(&#34;Hello, world\n&#34;);   ### OO syntax
    print $WT &#34;Yes!\n&#34;;             ### Named operator syntax too!
    $WT-&#62;weird_stuff;               ### Other methods!</pre>

<p>And if you&#39;re authoring a class like FooHandle, just have it inherit from <code>IO::WrapTie::Slave</code> and that first line becomes even prettier:</p>

<pre class="sh_perl">    $WT = FooHandle-&#62;new_tie(&#38;FOO_RDWR, 2);</pre>

<p><b>The bottom line:</b> now, almost any class can look and work exactly like an IO::Handle... and be used both with OO and non-OO filehandle syntax.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="HOW_IT_ALL_WORKS"
>HOW IT ALL WORKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_data_structures"
>The data structures</a></h2>

<p>Consider this example code, using classes in this distribution:</p>

<pre class="sh_perl">    use IO::Scalar;
    use IO::WrapTie;

    $WT = wraptie(&#39;IO::Scalar&#39;,\$s);
    print $WT &#34;Hello, &#34;;
    $WT-&#62;print(&#34;world!\n&#34;);</pre>

<p>In it, the wraptie() function creates a data structure as follows:</p>

<pre class="sh_perl">                          * $WT is a blessed reference to a tied filehandle
              $WT           glob; that glob is tied to the &#34;Slave&#34; object.
               |          * You would do all your i/o with $WT directly.
               |       
               |
               |     ,---isa--&#62; IO::WrapTie::Master &#62;--isa--&#62; IO::Handle
               V    /
        .-------------. 
        |             | 
        |             |   * Perl i/o operators work on the tied object,  
        |  &#34;Master&#34;   |     invoking the TIEHANDLE methods.
        |             |   * Method invocations are delegated to the tied 
        |             |     slave.
        `-------------&#39; 
               |    
    tied(*$WT) |     .---isa--&#62; IO::WrapTie::Slave
               V    /   
        .-------------.
        |             |
        |   &#34;Slave&#34;   |   * Instance of FileHandle-like class which doesn&#39;t
        |             |     actually use file descriptors, like IO::Scalar.
        |  IO::Scalar |   * The slave can be any kind of object.
        |             |   * Must implement the TIEHANDLE interface.
        `-------------&#39;</pre>

<p><i>NOTE:</i> just as an IO::Handle is really just a blessed reference to a <i>traditional</i> filehandle glob... so also, an IO::WrapTie::Master is really just a blessed reference to a filehandle glob <i>which has been tied to some &#34;slave&#34; class.</i></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="How_wraptie()_works"
>How wraptie() works</a></h2>

<ol>
<li>The call to function <code>wraptie(SLAVECLASS, TIEARGS...)</code> is passed onto <code>IO::WrapTie::Master::new()</code>. Note that class IO::WrapTie::Master is a subclass of IO::Handle.</li>

<li>The <code>IO::WrapTie::Master::new</code> method creates a new IO::Handle object, reblessed into class IO::WrapTie::Master. This object is the <i>master</i>, which will be returned from the constructor. At the same time...</li>

<li>The <code>new</code> method also creates the <i>slave</i>: this is an instance of SLAVECLASS which is created by tying the master&#39;s IO::Handle to SLAVECLASS via <code>tie(HANDLE, SLAVECLASS, TIEARGS...)</code>. This call to <code>tie()</code> creates the slave in the following manner:</li>

<li>Class SLAVECLASS is sent the message <code>TIEHANDLE(TIEARGS...)</code>; it will usually delegate this to <code>SLAVECLASS::new(TIEARGS...)</code>, resulting in a new instance of SLAVECLASS being created and returned.</li>

<li>Once both master and slave have been created, the master is returned to the caller.</li>
</ol>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="How_I/O_operators_work_(on_the_master)"
>How I/O operators work (on the master)</a></h2>

<p>Consider using an i/o operator on the master:</p>

<pre class="sh_perl">    print $WT &#34;Hello, world!\n&#34;;   </pre>

<p>Since the master ($WT) is really a [blessed] reference to a glob, the normal Perl i/o operators like <code>print</code> may be used on it. They will just operate on the symbol part of the glob.</p>

<p>Since the glob is tied to the slave, the slave&#39;s PRINT method (part of the TIEHANDLE interface) will be automatically invoked.</p>

<p>If the slave is an IO::Scalar, that means IO::Scalar::PRINT will be invoked, and that method happens to delegate to the <code>print()</code> method of the same class. So the <i>real</i> work is ultimately done by IO::Scalar::print().</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="How_methods_work_(on_the_master)"
>How methods work (on the master)</a></h2>

<p>Consider using a method on the master:</p>

<pre class="sh_perl">    $WT-&#62;print(&#34;Hello, world!\n&#34;);</pre>

<p>Since the master ($WT) is blessed into the class IO::WrapTie::Master, Perl first attempts to find a <code>print()</code> method there. Failing that, Perl next attempts to find a <code>print()</code> method in the superclass, IO::Handle. It just so happens that there <i>is</i> such a method; that method merely invokes the <code>print</code> i/o operator on the self object... and for that, see above!</p>

<p>But let&#39;s suppose we&#39;re dealing with a method which <i>isn&#39;t</i> part of IO::Handle... for example:</p>

<pre class="sh_perl">    my $sref = $WT-&#62;sref;</pre>

<p>In this case, the intuitive behavior is to have the master delegate the method invocation to the slave (now do you see where the designations come from?). This is indeed what happens: IO::WrapTie::Master contains an AUTOLOAD method which performs the delegation.</p>

<p>So: when <code>sref()</code> can&#39;t be found in IO::Handle, the AUTOLOAD method of IO::WrapTie::Master is invoked, and the standard behavior of delegating the method to the underlying slave (here, an IO::Scalar) is done.</p>

<p>Sometimes, to get this to work properly, you may need to create a subclass of IO::WrapTie::Master which is an effective master for <i>your</i> class, and do the delegation there.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTES"
>NOTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>Why not simply use the object&#39;s OO interface?</b> Because that means forsaking the use of named operators like print(), and you may need to pass the object to a subroutine which will attempt to use those operators:</p>

<pre class="sh_perl">    $O = FooHandle-&#62;new(&#38;FOO_RDWR, 2);
    $O-&#62;print(&#34;Hello, world\n&#34;);  ### OO syntax is okay, BUT....

    sub nope { print $_[0] &#34;Nope!\n&#34; }
 X  nope($O);                     ### ERROR!!! (not a glob ref)</pre>

<p><b>Why not simply use tie()?</b> Because (1) you have to use tied() to invoke methods in the object&#39;s public interface (yuck), and (2) you may need to pass the tied symbol to another subroutine which will attempt to treat it in an OO-way... and that will break it:</p>

<pre class="sh_perl">    tie *T, &#39;FooHandle&#39;, &#38;FOO_RDWR, 2; 
    print T &#34;Hello, world\n&#34;;   ### Operator is okay, BUT... 

    tied(*T)-&#62;other_stuff;      ### yuck! AND...

    sub nope { shift-&#62;print(&#34;Nope!\n&#34;) }
 X  nope(\*T);                  ### ERROR!!! (method &#34;print&#34; on unblessed ref)</pre>

<p><b>Why a master and slave? Why not simply write FooHandle to inherit from IO::Handle?</b> I tried this, with an implementation similar to that of IO::Socket. The problem is that <i>the whole point is to use this with objects that don&#39;t have an underlying file/socket descriptor.</i>. Subclassing IO::Handle will work fine for the OO stuff, and fine with named operators <i>if</i> you tie()... but if you just attempt to say:</p>

<pre class="sh_perl">    $IO = FooHandle-&#62;new(&#38;FOO_RDWR, 2);
    print $IO &#34;Hello!\n&#34;;</pre>

<p>you get a warning from Perl like:</p>

<pre class="sh_perl">    Filehandle GEN001 never opened</pre>

<p>because it&#39;s trying to do system-level i/o on an (unopened) file descriptor. To avoid this, you apparently have to tie() the handle... which brings us right back to where we started! At least the IO::WrapTie mixin lets us say:</p>

<pre class="sh_perl">    $IO = FooHandle-&#62;new_tie(&#38;FOO_RDWR, 2);
    print $IO &#34;Hello!\n&#34;;</pre>

<p>and so is not <i>too</i> bad. <code>:-)</code></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WARNINGS"
>WARNINGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Remember: this stuff is for doing FileHandle-like i/o on things <i>without underlying file descriptors</i>. If you have an underlying file descriptor, you&#39;re better off just inheriting from IO::Handle.</p>

<p><b>Be aware that new_tie() always returns an instance of a kind of IO::WrapTie::Master...</b> it does <b>not</b> return an instance of the i/o class you&#39;re tying to!</p>

<p>Invoking some methods on the master object causes AUTOLOAD to delegate them to the slave object... so it <i>looks</i> like you&#39;re manipulating a &#34;FooHandle&#34; object directly, but you&#39;re not.</p>

<p>I have not explored all the ramifications of this use of tie(). <i>Here there be dragons</i>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>$Id: WrapTie.pm,v 1.2 2005/02/10 21:21:53 dfs Exp $</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='Primary'></a><a name="Primary_Maintainer"
>Primary Maintainer</a></dt>

<dd>
<p>David F. Skoll (<em>dfs@roaringpenguin.com</em>).</p>

<dt><a name='Original'></a><a name="Original_Author"
>Original Author</a></dt>

<dd>
<p>Eryq (<em>eryq@zeegee.com</em>). President, ZeeGee Software Inc (<em><a href="http://www.zeegee.com" class="podlinkurl"
>http://www.zeegee.com</a></em>).</p>
</dd>
</dl>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78269 Uploads, 24722 Distributions
105999 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 18:30:28 2012 GMT (0.0849950313568115) @cpansearch1 -->
 </body>
</html>
