<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>XML::Simple - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","XML-Simple",3]);
    _gaq.push(["_setCustomVar",5,"Release","XML-Simple-2.18",3]);
    _gaq.push(["_setCustomVar",3,"Module","XML::Simple",3]);
    _gaq.push(["_setCustomVar",1,"Author","GRANTM",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?XML::Simple">permalink</a></div>
  <a href="/~grantm/">Grant McLean</a> &gt;
  <a href="/~grantm/XML-Simple-2.18/">XML-Simple-2.18</a> &gt;
  XML::Simple
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/a98bf13a721e1874004fd1c5f9619420?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/G/GR/GRANTM/XML-Simple-2.18.tar.gz">XML-Simple-2.18.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=XML%3A%3ASimple;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~GRANTM/XML-Simple-2.18/lib/XML/Simple.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?XML%3A%3AParser">XML::Parser</a><br>
<a href="/perldoc?XML%3A%3ATwig">XML::Twig</a><br>
<a href="/perldoc?XML%3A%3ALibXML">XML::LibXML</a><br>
<a href="/perldoc?LWP%3A%3ASimple">LWP::Simple</a><br>
<a href="/perldoc?XML%3A%3ADOM">XML::DOM</a><br>
<a href="/perldoc?XML%3A%3AXPath">XML::XPath</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?XML%3A%3AWriter">XML::Writer</a><br>
<a href="/perldoc?LWP%3A%3AUserAgent">LWP::UserAgent</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=XML%3A%3ASimple">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 9</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=XML-Simple">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.18 &nbsp;
<span class="noprint">
  <a href="/src/GRANTM/XML-Simple-2.18/lib/XML/Simple.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#QUICK_START'>QUICK START</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#XMLin()'>XMLin()</a>
    <li class='indexItem indexItem2'><a href='#XMLout()'>XMLout()</a>
    <li class='indexItem indexItem2'><a href='#Caveats'>Caveats</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#OPTIONS'>OPTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#AttrIndent_=&#62;_1_#_out_-_handy'>AttrIndent =&#62; 1 # out - handy</a>
    <li class='indexItem indexItem2'><a href='#Cache_=&#62;_[_cache_schemes_]_#_in_-_advanced'>Cache =&#62; [ cache schemes ] # in - advanced</a>
    <li class='indexItem indexItem2'><a href='#ContentKey_=&#62;_&#39;keyname&#39;_#_in+out_-_seldom_used'>ContentKey =&#62; &#39;keyname&#39; # in+out - seldom used</a>
    <li class='indexItem indexItem2'><a href='#DataHandler_=&#62;_code_ref_#_in_-_SAX_only'>DataHandler =&#62; code_ref # in - SAX only</a>
    <li class='indexItem indexItem2'><a href='#ForceArray_=&#62;_1_#_in_-_important'>ForceArray =&#62; 1 # in - important</a>
    <li class='indexItem indexItem2'><a href='#ForceArray_=&#62;_[_names_]_#_in_-_important'>ForceArray =&#62; [ names ] # in - important</a>
    <li class='indexItem indexItem2'><a href='#ForceContent_=&#62;_1_#_in_-_seldom_used'>ForceContent =&#62; 1 # in - seldom used</a>
    <li class='indexItem indexItem2'><a href='#GroupTags_=&#62;_{_grouping_tag_=&#62;_grouped_tag_}_#_in+out_-_handy'>GroupTags =&#62; { grouping tag =&#62; grouped tag } # in+out - handy</a>
    <li class='indexItem indexItem2'><a href='#Handler_=&#62;_object_ref_#_out_-_SAX_only'>Handler =&#62; object_ref # out - SAX only</a>
    <li class='indexItem indexItem2'><a href='#KeepRoot_=&#62;_1_#_in+out_-_handy'>KeepRoot =&#62; 1 # in+out - handy</a>
    <li class='indexItem indexItem2'><a href='#KeyAttr_=&#62;_[_list_]_#_in+out_-_important'>KeyAttr =&#62; [ list ] # in+out - important</a>
    <li class='indexItem indexItem2'><a href='#KeyAttr_=&#62;_{_list_}_#_in+out_-_important'>KeyAttr =&#62; { list } # in+out - important</a>
    <li class='indexItem indexItem2'><a href='#NoAttr_=&#62;_1_#_in+out_-_handy'>NoAttr =&#62; 1 # in+out - handy</a>
    <li class='indexItem indexItem2'><a href='#NoEscape_=&#62;_1_#_out_-_seldom_used'>NoEscape =&#62; 1 # out - seldom used</a>
    <li class='indexItem indexItem2'><a href='#NoIndent_=&#62;_1_#_out_-_seldom_used'>NoIndent =&#62; 1 # out - seldom used</a>
    <li class='indexItem indexItem2'><a href='#NoSort_=&#62;_1_#_out_-_seldom_used'>NoSort =&#62; 1 # out - seldom used</a>
    <li class='indexItem indexItem2'><a href='#NormaliseSpace_=&#62;_0_|_1_|_2_#_in_-_handy'>NormaliseSpace =&#62; 0 | 1 | 2 # in - handy</a>
    <li class='indexItem indexItem2'><a href='#NSExpand_=&#62;_1_#_in+out_handy_-_SAX_only'>NSExpand =&#62; 1 # in+out handy - SAX only</a>
    <li class='indexItem indexItem2'><a href='#NumericEscape_=&#62;_0_|_1_|_2_#_out_-_handy'>NumericEscape =&#62; 0 | 1 | 2 # out - handy</a>
    <li class='indexItem indexItem2'><a href='#OutputFile_=&#62;_&#60;file_specifier&#62;_#_out_-_handy'>OutputFile =&#62; &#60;file specifier&#62; # out - handy</a>
    <li class='indexItem indexItem2'><a href='#ParserOpts_=&#62;_[_XML::Parser_Options_]_#_in_-_don&#39;t_use_this'>ParserOpts =&#62; [ XML::Parser Options ] # in - don&#39;t use this</a>
    <li class='indexItem indexItem2'><a href='#RootName_=&#62;_&#39;string&#39;_#_out_-_handy'>RootName =&#62; &#39;string&#39; # out - handy</a>
    <li class='indexItem indexItem2'><a href='#SearchPath_=&#62;_[_list_]_#_in_-_handy'>SearchPath =&#62; [ list ] # in - handy</a>
    <li class='indexItem indexItem2'><a href='#SuppressEmpty_=&#62;_1_|_&#39;&#39;_|_undef_#_in+out_-_handy'>SuppressEmpty =&#62; 1 | &#39;&#39; | undef # in+out - handy</a>
    <li class='indexItem indexItem2'><a href='#ValueAttr_=&#62;_[_names_]_#_in_-_handy'>ValueAttr =&#62; [ names ] # in - handy</a>
    <li class='indexItem indexItem2'><a href='#ValueAttr_=&#62;_{_element_=&#62;_attribute,_..._}_#_in+out_-_handy'>ValueAttr =&#62; { element =&#62; attribute, ... } # in+out - handy</a>
    <li class='indexItem indexItem2'><a href='#Variables_=&#62;_{_name_=&#62;_value_}_#_in_-_handy'>Variables =&#62; { name =&#62; value } # in - handy</a>
    <li class='indexItem indexItem2'><a href='#VarAttr_=&#62;_&#39;attr_name&#39;_#_in_-_handy'>VarAttr =&#62; &#39;attr_name&#39; # in - handy</a>
    <li class='indexItem indexItem2'><a href='#XMLDecl_=&#62;_1_or_XMLDecl_=&#62;_&#39;string&#39;_#_out_-_handy'>XMLDecl =&#62; 1 or XMLDecl =&#62; &#39;string&#39; # out - handy</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#OPTIONAL_OO_INTERFACE'>OPTIONAL OO INTERFACE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Parsing_Methods'>Parsing Methods</a>
    <li class='indexItem indexItem2'><a href='#Hook_Methods'>Hook Methods</a>
    <li class='indexItem indexItem2'><a href='#Cache_Methods'>Cache Methods</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#STRICT_MODE'>STRICT MODE</a>
  <li class='indexItem indexItem1'><a href='#SAX_SUPPORT'>SAX SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#ENVIRONMENT'>ENVIRONMENT</a>
  <li class='indexItem indexItem1'><a href='#ERROR_HANDLING'>ERROR HANDLING</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <li class='indexItem indexItem1'><a href='#WHERE_TO_FROM_HERE?'>WHERE TO FROM HERE?</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>XML::Simple - Easy API to maintain XML (esp config files)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use XML::Simple;

    my $ref = XMLin([&#60;xml file or string&#62;] [, &#60;options&#62;]);

    my $xml = XMLout($hashref [, &#60;options&#62;]);</pre>

<p>Or the object oriented way:</p>

<pre class="sh_perl">    require XML::Simple;

    my $xs = XML::Simple-&#62;new(options);

    my $ref = $xs-&#62;XMLin([&#60;xml file or string&#62;] [, &#60;options&#62;]);

    my $xml = $xs-&#62;XMLout($hashref [, &#60;options&#62;]);</pre>

<p>(or see <a href="#SAX_SUPPORT" class="podlinkpod"
>&#34;SAX SUPPORT&#34;</a> for &#39;the SAX way&#39;).</p>

<p>To catch common errors:</p>

<pre class="sh_perl">    use XML::Simple qw(:strict);</pre>

<p>(see <a href="#STRICT_MODE" class="podlinkpod"
>&#34;STRICT MODE&#34;</a> for more details).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="QUICK_START"
>QUICK START <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Say you have a script called <b>foo</b> and a file of configuration options called <b>foo.xml</b> containing this:</p>

<pre class="sh_perl">  &#60;config logdir=&#34;/var/log/foo/&#34; debugfile=&#34;/tmp/foo.debug&#34;&#62;
    &#60;server name=&#34;sahara&#34; osname=&#34;solaris&#34; osversion=&#34;2.6&#34;&#62;
      &#60;address&#62;10.0.0.101&#60;/address&#62;
      &#60;address&#62;10.0.1.101&#60;/address&#62;
    &#60;/server&#62;
    &#60;server name=&#34;gobi&#34; osname=&#34;irix&#34; osversion=&#34;6.5&#34;&#62;
      &#60;address&#62;10.0.0.102&#60;/address&#62;
    &#60;/server&#62;
    &#60;server name=&#34;kalahari&#34; osname=&#34;linux&#34; osversion=&#34;2.0.34&#34;&#62;
      &#60;address&#62;10.0.0.103&#60;/address&#62;
      &#60;address&#62;10.0.1.103&#60;/address&#62;
    &#60;/server&#62;
  &#60;/config&#62;</pre>

<p>The following lines of code in <b>foo</b>:</p>

<pre class="sh_perl">  use XML::Simple;

  my $config = XMLin();</pre>

<p>will &#39;slurp&#39; the configuration options into the hashref $config (because no arguments are passed to <code>XMLin()</code> the name and location of the XML file will be inferred from name and location of the script). You can dump out the contents of the hashref using Data::Dumper:</p>

<pre class="sh_perl">  use Data::Dumper;

  print Dumper($config);</pre>

<p>which will produce something like this (formatting has been adjusted for brevity):</p>

<pre class="sh_perl">  {
      &#39;logdir&#39;        =&#62; &#39;/var/log/foo/&#39;,
      &#39;debugfile&#39;     =&#62; &#39;/tmp/foo.debug&#39;,
      &#39;server&#39;        =&#62; {
          &#39;sahara&#39;        =&#62; {
              &#39;osversion&#39;     =&#62; &#39;2.6&#39;,
              &#39;osname&#39;        =&#62; &#39;solaris&#39;,
              &#39;address&#39;       =&#62; [ &#39;10.0.0.101&#39;, &#39;10.0.1.101&#39; ]
          },
          &#39;gobi&#39;          =&#62; {
              &#39;osversion&#39;     =&#62; &#39;6.5&#39;,
              &#39;osname&#39;        =&#62; &#39;irix&#39;,
              &#39;address&#39;       =&#62; &#39;10.0.0.102&#39;
          },
          &#39;kalahari&#39;      =&#62; {
              &#39;osversion&#39;     =&#62; &#39;2.0.34&#39;,
              &#39;osname&#39;        =&#62; &#39;linux&#39;,
              &#39;address&#39;       =&#62; [ &#39;10.0.0.103&#39;, &#39;10.0.1.103&#39; ]
          }
      }
  }</pre>

<p>Your script could then access the name of the log directory like this:</p>

<pre class="sh_perl">  print $config-&#62;{logdir};</pre>

<p>similarly, the second address on the server &#39;kalahari&#39; could be referenced as:</p>

<pre class="sh_perl">  print $config-&#62;{server}-&#62;{kalahari}-&#62;{address}-&#62;[1];</pre>

<p>What could be simpler? (Rhetorical).</p>

<p>For simple requirements, that&#39;s really all there is to it. If you want to store your XML in a different directory or file, or pass it in as a string or even pass it in via some derivative of an IO::Handle, you&#39;ll need to check out <a href="#OPTIONS" class="podlinkpod"
>&#34;OPTIONS&#34;</a>. If you want to turn off or tweak the array folding feature (that neat little transformation that produced $config-&#62;{server}) you&#39;ll find options for that as well.</p>

<p>If you want to generate XML (for example to write a modified version of $config back out as XML), check out <code>XMLout()</code>.</p>

<p>If your needs are not so simple, this may not be the module for you. In that case, you might want to read <a href="#WHERE_TO_FROM_HERE?" class="podlinkpod"
>&#34;WHERE TO FROM HERE?&#34;</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The XML::Simple module provides a simple API layer on top of an underlying XML parsing module (either XML::Parser or one of the SAX2 parser modules). Two functions are exported: <code>XMLin()</code> and <code>XMLout()</code>. Note: you can explicity request the lower case versions of the function names: <code>xml_in()</code> and <code>xml_out()</code>.</p>

<p>The simplest approach is to call these two functions directly, but an optional object oriented interface (see <a href="#OPTIONAL_OO_INTERFACE" class="podlinkpod"
>&#34;OPTIONAL OO INTERFACE&#34;</a> below) allows them to be called as methods of an <b>XML::Simple</b> object. The object interface can also be used at either end of a SAX pipeline.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="XMLin()"
>XMLin()</a></h2>

<p>Parses XML formatted data and returns a reference to a data structure which contains the same information in a more readily accessible form. (Skip down to <a href="#EXAMPLES" class="podlinkpod"
>&#34;EXAMPLES&#34;</a> below, for more sample code).</p>

<p><code>XMLin()</code> accepts an optional XML specifier followed by zero or more &#39;name =&#62; value&#39; option pairs. The XML specifier can be one of the following:</p>

<dl>
<dt><a name='A'></a><a name="A_filename"
>A filename</a></dt>

<dd>
<p>If the filename contains no directory components <code>XMLin()</code> will look for the file in each directory in the SearchPath (see <a href="#OPTIONS" class="podlinkpod"
>&#34;OPTIONS&#34;</a> below) or in the current directory if the SearchPath option is not defined. eg:</p>

<pre class="sh_perl">  $ref = XMLin(&#39;/etc/params.xml&#39;);</pre>

<p>Note, the filename &#39;-&#39; can be used to parse from STDIN.</p>

<dt><a name="undef"
>undef</a></dt>

<dd>
<p>If there is no XML specifier, <code>XMLin()</code> will check the script directory and each of the SearchPath directories for a file with the same name as the script but with the extension &#39;.xml&#39;. Note: if you wish to specify options, you must specify the value &#39;undef&#39;. eg:</p>

<pre class="sh_perl">  $ref = XMLin(undef, ForceArray =&#62; 1);</pre>

<dt><a name='A'></a><a name="A_string_of_XML"
>A string of XML</a></dt>

<dd>
<p>A string containing XML (recognised by the presence of &#39;&#60;&#39; and &#39;&#62;&#39; characters) will be parsed directly. eg:</p>

<pre class="sh_perl">  $ref = XMLin(&#39;&#60;opt username=&#34;bob&#34; password=&#34;flurp&#34; /&#62;&#39;);</pre>

<dt><a name='An'></a><a name="An_IO::Handle_object"
>An IO::Handle object</a></dt>

<dd>
<p>An IO::Handle object will be read to EOF and its contents parsed. eg:</p>

<pre class="sh_perl">  $fh = IO::File-&#62;new(&#39;/etc/params.xml&#39;);
  $ref = XMLin($fh);</pre>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="XMLout()"
>XMLout()</a></h2>

<p>Takes a data structure (generally a hashref) and returns an XML encoding of that structure. If the resulting XML is parsed using <code>XMLin()</code>, it should return a data structure equivalent to the original (see caveats below).</p>

<p>The <code>XMLout()</code> function can also be used to output the XML as SAX events see the <code>Handler</code> option and <a href="#SAX_SUPPORT" class="podlinkpod"
>&#34;SAX SUPPORT&#34;</a> for more details).</p>

<p>When translating hashes to XML, hash keys which have a leading &#39;-&#39; will be silently skipped. This is the approved method for marking elements of a data structure which should be ignored by <code>XMLout</code>. (Note: If these items were not skipped the key names would be emitted as element or attribute names with a leading &#39;-&#39; which would not be valid XML).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Caveats"
>Caveats</a></h2>

<p>Some care is required in creating data structures which will be passed to <code>XMLout()</code>. Hash keys from the data structure will be encoded as either XML element names or attribute names. Therefore, you should use hash key names which conform to the relatively strict XML naming rules:</p>

<p>Names in XML must begin with a letter. The remaining characters may be letters, digits, hyphens (-), underscores (_) or full stops (.). It is also allowable to include one colon (:) in an element name but this should only be used when working with namespaces (<b>XML::Simple</b> can only usefully work with namespaces when teamed with a SAX Parser).</p>

<p>You can use other punctuation characters in hash values (just not in hash keys) however <b>XML::Simple</b> does not support dumping binary data.</p>

<p>If you break these rules, the current implementation of <code>XMLout()</code> will simply emit non-compliant XML which will be rejected if you try to read it back in. (A later version of <b>XML::Simple</b> might take a more proactive approach).</p>

<p>Note also that although you can nest hashes and arrays to arbitrary levels, circular data structures are not supported and will cause <code>XMLout()</code> to die.</p>

<p>If you wish to &#39;round-trip&#39; arbitrary data structures from Perl to XML and back to Perl, then you should probably disable array folding (using the KeyAttr option) both with <code>XMLout()</code> and with <code>XMLin()</code>. If you still don&#39;t get the expected results, you may prefer to use <a href="/perldoc?XML%3A%3ADumper" class="podlinkpod"
>XML::Dumper</a> which is designed for exactly that purpose.</p>

<p>Refer to <a href="#WHERE_TO_FROM_HERE?" class="podlinkpod"
>&#34;WHERE TO FROM HERE?&#34;</a> if <code>XMLout()</code> is too simple for your needs.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OPTIONS"
>OPTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>XML::Simple</b> supports a number of options (in fact as each release of <b>XML::Simple</b> adds more options, the module&#39;s claim to the name &#39;Simple&#39; becomes increasingly tenuous). If you find yourself repeatedly having to specify the same options, you might like to investigate <a href="#OPTIONAL_OO_INTERFACE" class="podlinkpod"
>&#34;OPTIONAL OO INTERFACE&#34;</a> below.</p>

<p>If you can&#39;t be bothered reading the documentation, refer to <a href="#STRICT_MODE" class="podlinkpod"
>&#34;STRICT MODE&#34;</a> to automatically catch common mistakes.</p>

<p>Because there are so many options, it&#39;s hard for new users to know which ones are important, so here are the two you really need to know about:</p>

<ul>
<li>check out <code>ForceArray</code> because you&#39;ll almost certainly want to turn it on</li>

<li>make sure you know what the <code>KeyAttr</code> option does and what its default value is because it may surprise you otherwise (note in particular that &#39;KeyAttr&#39; affects both <code>XMLin</code> and <code>XMLout</code>)</li>
</ul>

<p>The option name headings below have a trailing &#39;comment&#39; - a hash followed by two pieces of metadata:</p>

<ul>
<li>Options are marked with &#39;<i>in</i>&#39; if they are recognised by <code>XMLin()</code> and &#39;<i>out</i>&#39; if they are recognised by <code>XMLout()</code>.</li>

<li>Each option is also flagged to indicate whether it is:
<pre class="sh_perl"> &#39;important&#39;   - don&#39;t use the module until you understand this one
 &#39;handy&#39;       - you can skip this on the first time through
 &#39;advanced&#39;    - you can skip this on the second time through
 &#39;SAX only&#39;    - don&#39;t worry about this unless you&#39;re using SAX (or
                 alternatively if you need this, you also need SAX)
 &#39;seldom used&#39; - you&#39;ll probably never use this unless you were the
                 person that requested the feature</pre>
</li>
</ul>

<p>The options are listed alphabetically:</p>

<p>Note: option names are no longer case sensitive so you can use the mixed case versions shown here; all lower case as required by versions 2.03 and earlier; or you can add underscores between the words (eg: key_attr).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="AttrIndent_=&#62;_1_#_out_-_handy"
>AttrIndent =&#62; 1 <i># out - handy</i></a></h2>

<p>When you are using <code>XMLout()</code>, enable this option to have attributes printed one-per-line with sensible indentation rather than all on one line.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Cache_=&#62;_[_cache_schemes_]_#_in_-_advanced"
>Cache =&#62; [ cache schemes ] <i># in - advanced</i></a></h2>

<p>Because loading the <b>XML::Parser</b> module and parsing an XML file can consume a significant number of CPU cycles, it is often desirable to cache the output of <code>XMLin()</code> for later reuse.</p>

<p>When parsing from a named file, <b>XML::Simple</b> supports a number of caching schemes. The &#39;Cache&#39; option may be used to specify one or more schemes (using an anonymous array). Each scheme will be tried in turn in the hope of finding a cached pre-parsed representation of the XML file. If no cached copy is found, the file will be parsed and the first cache scheme in the list will be used to save a copy of the results. The following cache schemes have been implemented:</p>

<dl>
<dt><a name="storable"
>storable</a></dt>

<dd>
<p>Utilises <b>Storable.pm</b> to read/write a cache file with the same name as the XML file but with the extension .stor</p>

<dt><a name="memshare"
>memshare</a></dt>

<dd>
<p>When a file is first parsed, a copy of the resulting data structure is retained in memory in the <b>XML::Simple</b> module&#39;s namespace. Subsequent calls to parse the same file will return a reference to this structure. This cached version will persist only for the life of the Perl interpreter (which in the case of mod_perl for example, may be some significant time).</p>

<p>Because each caller receives a reference to the same data structure, a change made by one caller will be visible to all. For this reason, the reference returned should be treated as read-only.</p>

<dt><a name="memcopy"
>memcopy</a></dt>

<dd>
<p>This scheme works identically to &#39;memshare&#39; (above) except that each caller receives a reference to a new data structure which is a copy of the cached version. Copying the data structure will add a little processing overhead, therefore this scheme should only be used where the caller intends to modify the data structure (or wishes to protect itself from others who might). This scheme uses <b>Storable.pm</b> to perform the copy.</p>
</dd>
</dl>

<p>Warning! The memory-based caching schemes compare the timestamp on the file to the time when it was last parsed. If the file is stored on an NFS filesystem (or other network share) and the clock on the file server is not exactly synchronised with the clock where your script is run, updates to the source XML file may appear to be ignored.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ContentKey_=&#62;_&#39;keyname&#39;_#_in+out_-_seldom_used"
>ContentKey =&#62; &#39;keyname&#39; <i># in+out - seldom used</i></a></h2>

<p>When text content is parsed to a hash value, this option let&#39;s you specify a name for the hash key to override the default &#39;content&#39;. So for example:</p>

<pre class="sh_perl">  XMLin(&#39;&#60;opt one=&#34;1&#34;&#62;Text&#60;/opt&#62;&#39;, ContentKey =&#62; &#39;text&#39;)</pre>

<p>will parse to:</p>

<pre class="sh_perl">  { &#39;one&#39; =&#62; 1, &#39;text&#39; =&#62; &#39;Text&#39; }</pre>

<p>instead of:</p>

<pre class="sh_perl">  { &#39;one&#39; =&#62; 1, &#39;content&#39; =&#62; &#39;Text&#39; }</pre>

<p><code>XMLout()</code> will also honour the value of this option when converting a hashref to XML.</p>

<p>You can also prefix your selected key name with a &#39;-&#39; character to have <code>XMLin()</code> try a little harder to eliminate unnecessary &#39;content&#39; keys after array folding. For example:</p>

<pre class="sh_perl">  XMLin(
    &#39;&#60;opt&#62;&#60;item name=&#34;one&#34;&#62;First&#60;/item&#62;&#60;item name=&#34;two&#34;&#62;Second&#60;/item&#62;&#60;/opt&#62;&#39;, 
    KeyAttr =&#62; {item =&#62; &#39;name&#39;}, 
    ForceArray =&#62; [ &#39;item&#39; ],
    ContentKey =&#62; &#39;-content&#39;
  )</pre>

<p>will parse to:</p>

<pre class="sh_perl">  {
    &#39;item&#39; =&#62; {
      &#39;one&#39; =&#62;  &#39;First&#39;
      &#39;two&#39; =&#62;  &#39;Second&#39;
    }
  }</pre>

<p>rather than this (without the &#39;-&#39;):</p>

<pre class="sh_perl">  {
    &#39;item&#39; =&#62; {
      &#39;one&#39; =&#62; { &#39;content&#39; =&#62; &#39;First&#39; }
      &#39;two&#39; =&#62; { &#39;content&#39; =&#62; &#39;Second&#39; }
    }
  }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DataHandler_=&#62;_code_ref_#_in_-_SAX_only"
>DataHandler =&#62; code_ref <i># in - SAX only</i></a></h2>

<p>When you use an <b>XML::Simple</b> object as a SAX handler, it will return a &#39;simple tree&#39; data structure in the same format as <code>XMLin()</code> would return. If this option is set (to a subroutine reference), then when the tree is built the subroutine will be called and passed two arguments: a reference to the <b>XML::Simple</b> object and a reference to the data tree. The return value from the subroutine will be returned to the SAX driver. (See <a href="#SAX_SUPPORT" class="podlinkpod"
>&#34;SAX SUPPORT&#34;</a> for more details).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ForceArray_=&#62;_1_#_in_-_important"
>ForceArray =&#62; 1 <i># in - important</i></a></h2>

<p>This option should be set to &#39;1&#39; to force nested elements to be represented as arrays even when there is only one. Eg, with ForceArray enabled, this XML:</p>

<pre class="sh_perl">    &#60;opt&#62;
      &#60;name&#62;value&#60;/name&#62;
    &#60;/opt&#62;</pre>

<p>would parse to this:</p>

<pre class="sh_perl">    {
      &#39;name&#39; =&#62; [
                  &#39;value&#39;
                ]
    }</pre>

<p>instead of this (the default):</p>

<pre class="sh_perl">    {
      &#39;name&#39; =&#62; &#39;value&#39;
    }</pre>

<p>This option is especially useful if the data structure is likely to be written back out as XML and the default behaviour of rolling single nested elements up into attributes is not desirable.</p>

<p>If you are using the array folding feature, you should almost certainly enable this option. If you do not, single nested elements will not be parsed to arrays and therefore will not be candidates for folding to a hash. (Given that the default value of &#39;KeyAttr&#39; enables array folding, the default value of this option should probably also have been enabled too - sorry).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ForceArray_=&#62;_[_names_]_#_in_-_important"
>ForceArray =&#62; [ names ] <i># in - important</i></a></h2>

<p>This alternative (and preferred) form of the &#39;ForceArray&#39; option allows you to specify a list of element names which should always be forced into an array representation, rather than the &#39;all or nothing&#39; approach above.</p>

<p>It is also possible (since version 2.05) to include compiled regular expressions in the list - any element names which match the pattern will be forced to arrays. If the list contains only a single regex, then it is not necessary to enclose it in an arrayref. Eg:</p>

<pre class="sh_perl">  ForceArray =&#62; qr/_list$/</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ForceContent_=&#62;_1_#_in_-_seldom_used"
>ForceContent =&#62; 1 <i># in - seldom used</i></a></h2>

<p>When <code>XMLin()</code> parses elements which have text content as well as attributes, the text content must be represented as a hash value rather than a simple scalar. This option allows you to force text content to always parse to a hash value even when there are no attributes. So for example:</p>

<pre class="sh_perl">  XMLin(&#39;&#60;opt&#62;&#60;x&#62;text1&#60;/x&#62;&#60;y a=&#34;2&#34;&#62;text2&#60;/y&#62;&#60;/opt&#62;&#39;, ForceContent =&#62; 1)</pre>

<p>will parse to:</p>

<pre class="sh_perl">  {
    &#39;x&#39; =&#62; {           &#39;content&#39; =&#62; &#39;text1&#39; },
    &#39;y&#39; =&#62; { &#39;a&#39; =&#62; 2, &#39;content&#39; =&#62; &#39;text2&#39; }
  }</pre>

<p>instead of:</p>

<pre class="sh_perl">  {
    &#39;x&#39; =&#62; &#39;text1&#39;,
    &#39;y&#39; =&#62; { &#39;a&#39; =&#62; 2, &#39;content&#39; =&#62; &#39;text2&#39; }
  }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="GroupTags_=&#62;_{_grouping_tag_=&#62;_grouped_tag_}_#_in+out_-_handy"
>GroupTags =&#62; { grouping tag =&#62; grouped tag } <i># in+out - handy</i></a></h2>

<p>You can use this option to eliminate extra levels of indirection in your Perl data structure. For example this XML:</p>

<pre class="sh_perl">  &#60;opt&#62;
   &#60;searchpath&#62;
     &#60;dir&#62;/usr/bin&#60;/dir&#62;
     &#60;dir&#62;/usr/local/bin&#60;/dir&#62;
     &#60;dir&#62;/usr/X11/bin&#60;/dir&#62;
   &#60;/searchpath&#62;
 &#60;/opt&#62;</pre>

<p>Would normally be read into a structure like this:</p>

<pre class="sh_perl">  {
    searchpath =&#62; {
                    dir =&#62; [ &#39;/usr/bin&#39;, &#39;/usr/local/bin&#39;, &#39;/usr/X11/bin&#39; ]
                  }
  }</pre>

<p>But when read in with the appropriate value for &#39;GroupTags&#39;:</p>

<pre class="sh_perl">  my $opt = XMLin($xml, GroupTags =&#62; { searchpath =&#62; &#39;dir&#39; });</pre>

<p>It will return this simpler structure:</p>

<pre class="sh_perl">  {
    searchpath =&#62; [ &#39;/usr/bin&#39;, &#39;/usr/local/bin&#39;, &#39;/usr/X11/bin&#39; ]
  }</pre>

<p>The grouping element (<code>&#60;searchpath&#62;</code> in the example) must not contain any attributes or elements other than the grouped element.</p>

<p>You can specify multiple &#39;grouping element&#39; to &#39;grouped element&#39; mappings in the same hashref. If this option is combined with <code>KeyAttr</code>, the array folding will occur first and then the grouped element names will be eliminated.</p>

<p><code>XMLout</code> will also use the grouptag mappings to re-introduce the tags around the grouped elements. Beware though that this will occur in all places that the &#39;grouping tag&#39; name occurs - you probably don&#39;t want to use the same name for elements as well as attributes.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Handler_=&#62;_object_ref_#_out_-_SAX_only"
>Handler =&#62; object_ref <i># out - SAX only</i></a></h2>

<p>Use the &#39;Handler&#39; option to have <code>XMLout()</code> generate SAX events rather than returning a string of XML. For more details see <a href="#SAX_SUPPORT" class="podlinkpod"
>&#34;SAX SUPPORT&#34;</a> below.</p>

<p>Note: the current implementation of this option generates a string of XML and uses a SAX parser to translate it into SAX events. The normal encoding rules apply here - your data must be UTF8 encoded unless you specify an alternative encoding via the &#39;XMLDecl&#39; option; and by the time the data reaches the handler object, it will be in UTF8 form regardless of the encoding you supply. A future implementation of this option may generate the events directly.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="KeepRoot_=&#62;_1_#_in+out_-_handy"
>KeepRoot =&#62; 1 <i># in+out - handy</i></a></h2>

<p>In its attempt to return a data structure free of superfluous detail and unnecessary levels of indirection, <code>XMLin()</code> normally discards the root element name. Setting the &#39;KeepRoot&#39; option to &#39;1&#39; will cause the root element name to be retained. So after executing this code:</p>

<pre class="sh_perl">  $config = XMLin(&#39;&#60;config tempdir=&#34;/tmp&#34; /&#62;&#39;, KeepRoot =&#62; 1)</pre>

<p>You&#39;ll be able to reference the tempdir as <code>$config-&#62;{config}-&#62;{tempdir}</code> instead of the default <code>$config-&#62;{tempdir}</code>.</p>

<p>Similarly, setting the &#39;KeepRoot&#39; option to &#39;1&#39; will tell <code>XMLout()</code> that the data structure already contains a root element name and it is not necessary to add another.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="KeyAttr_=&#62;_[_list_]_#_in+out_-_important"
>KeyAttr =&#62; [ list ] <i># in+out - important</i></a></h2>

<p>This option controls the &#39;array folding&#39; feature which translates nested elements from an array to a hash. It also controls the &#39;unfolding&#39; of hashes to arrays.</p>

<p>For example, this XML:</p>

<pre class="sh_perl">    &#60;opt&#62;
      &#60;user login=&#34;grep&#34; fullname=&#34;Gary R Epstein&#34; /&#62;
      &#60;user login=&#34;stty&#34; fullname=&#34;Simon T Tyson&#34; /&#62;
    &#60;/opt&#62;</pre>

<p>would, by default, parse to this:</p>

<pre class="sh_perl">    {
      &#39;user&#39; =&#62; [
                  {
                    &#39;login&#39; =&#62; &#39;grep&#39;,
                    &#39;fullname&#39; =&#62; &#39;Gary R Epstein&#39;
                  },
                  {
                    &#39;login&#39; =&#62; &#39;stty&#39;,
                    &#39;fullname&#39; =&#62; &#39;Simon T Tyson&#39;
                  }
                ]
    }</pre>

<p>If the option &#39;KeyAttr =&#62; &#34;login&#34;&#39; were used to specify that the &#39;login&#39; attribute is a key, the same XML would parse to:</p>

<pre class="sh_perl">    {
      &#39;user&#39; =&#62; {
                  &#39;stty&#39; =&#62; {
                              &#39;fullname&#39; =&#62; &#39;Simon T Tyson&#39;
                            },
                  &#39;grep&#39; =&#62; {
                              &#39;fullname&#39; =&#62; &#39;Gary R Epstein&#39;
                            }
                }
    }</pre>

<p>The key attribute names should be supplied in an arrayref if there is more than one. <code>XMLin()</code> will attempt to match attribute names in the order supplied. <code>XMLout()</code> will use the first attribute name supplied when &#39;unfolding&#39; a hash into an array.</p>

<p>Note 1: The default value for &#39;KeyAttr&#39; is [&#39;name&#39;, &#39;key&#39;, &#39;id&#39;]. If you do not want folding on input or unfolding on output you must setting this option to an empty list to disable the feature.</p>

<p>Note 2: If you wish to use this option, you should also enable the <code>ForceArray</code> option. Without &#39;ForceArray&#39;, a single nested element will be rolled up into a scalar rather than an array and therefore will not be folded (since only arrays get folded).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="KeyAttr_=&#62;_{_list_}_#_in+out_-_important"
>KeyAttr =&#62; { list } <i># in+out - important</i></a></h2>

<p>This alternative (and preferred) method of specifiying the key attributes allows more fine grained control over which elements are folded and on which attributes. For example the option &#39;KeyAttr =&#62; { package =&#62; &#39;id&#39; } will cause any package elements to be folded on the &#39;id&#39; attribute. No other elements which have an &#39;id&#39; attribute will be folded at all.</p>

<p>Note: <code>XMLin()</code> will generate a warning (or a fatal error in <a href="#STRICT_MODE" class="podlinkpod"
>&#34;STRICT MODE&#34;</a>) if this syntax is used and an element which does not have the specified key attribute is encountered (eg: a &#39;package&#39; element without an &#39;id&#39; attribute, to use the example above). Warnings will only be generated if <b>-w</b> is in force.</p>

<p>Two further variations are made possible by prefixing a &#39;+&#39; or a &#39;-&#39; character to the attribute name:</p>

<p>The option &#39;KeyAttr =&#62; { user =&#62; &#34;+login&#34; }&#39; will cause this XML:</p>

<pre class="sh_perl">    &#60;opt&#62;
      &#60;user login=&#34;grep&#34; fullname=&#34;Gary R Epstein&#34; /&#62;
      &#60;user login=&#34;stty&#34; fullname=&#34;Simon T Tyson&#34; /&#62;
    &#60;/opt&#62;</pre>

<p>to parse to this data structure:</p>

<pre class="sh_perl">    {
      &#39;user&#39; =&#62; {
                  &#39;stty&#39; =&#62; {
                              &#39;fullname&#39; =&#62; &#39;Simon T Tyson&#39;,
                              &#39;login&#39;    =&#62; &#39;stty&#39;
                            },
                  &#39;grep&#39; =&#62; {
                              &#39;fullname&#39; =&#62; &#39;Gary R Epstein&#39;,
                              &#39;login&#39;    =&#62; &#39;grep&#39;
                            }
                }
    }</pre>

<p>The &#39;+&#39; indicates that the value of the key attribute should be copied rather than moved to the folded hash key.</p>

<p>A &#39;-&#39; prefix would produce this result:</p>

<pre class="sh_perl">    {
      &#39;user&#39; =&#62; {
                  &#39;stty&#39; =&#62; {
                              &#39;fullname&#39; =&#62; &#39;Simon T Tyson&#39;,
                              &#39;-login&#39;    =&#62; &#39;stty&#39;
                            },
                  &#39;grep&#39; =&#62; {
                              &#39;fullname&#39; =&#62; &#39;Gary R Epstein&#39;,
                              &#39;-login&#39;    =&#62; &#39;grep&#39;
                            }
                }
    }</pre>

<p>As described earlier, <code>XMLout</code> will ignore hash keys starting with a &#39;-&#39;.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="NoAttr_=&#62;_1_#_in+out_-_handy"
>NoAttr =&#62; 1 <i># in+out - handy</i></a></h2>

<p>When used with <code>XMLout()</code>, the generated XML will contain no attributes. All hash key/values will be represented as nested elements instead.</p>

<p>When used with <code>XMLin()</code>, any attributes in the XML will be ignored.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="NoEscape_=&#62;_1_#_out_-_seldom_used"
>NoEscape =&#62; 1 <i># out - seldom used</i></a></h2>

<p>By default, <code>XMLout()</code> will translate the characters &#39;&#60;&#39;, &#39;&#62;&#39;, &#39;&#38;&#39; and &#39;&#34;&#39; to &#39;&#38;lt;&#39;, &#39;&#38;gt;&#39;, &#39;&#38;amp;&#39; and &#39;&#38;quot&#39; respectively. Use this option to suppress escaping (presumably because you&#39;ve already escaped the data in some more sophisticated manner).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="NoIndent_=&#62;_1_#_out_-_seldom_used"
>NoIndent =&#62; 1 <i># out - seldom used</i></a></h2>

<p>Set this option to 1 to disable <code>XMLout()</code>&#39;s default &#39;pretty printing&#39; mode. With this option enabled, the XML output will all be on one line (unless there are newlines in the data) - this may be easier for downstream processing.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="NoSort_=&#62;_1_#_out_-_seldom_used"
>NoSort =&#62; 1 <i># out - seldom used</i></a></h2>

<p>Newer versions of XML::Simple sort elements and attributes alphabetically (*), by default. Enable this option to suppress the sorting - possibly for backwards compatibility.</p>

<p>* Actually, sorting is alphabetical but &#39;key&#39; attribute or element names (as in &#39;KeyAttr&#39;) sort first. Also, when a hash of hashes is &#39;unfolded&#39;, the elements are sorted alphabetically by the value of the key field.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="NormaliseSpace_=&#62;_0_|_1_|_2_#_in_-_handy"
>NormaliseSpace =&#62; 0 | 1 | 2 <i># in - handy</i></a></h2>

<p>This option controls how whitespace in text content is handled. Recognised values for the option are:</p>

<ul>
<li>0 = (default) whitespace is passed through unaltered (except of course for the normalisation of whitespace in attribute values which is mandated by the XML recommendation)</li>

<li>1 = whitespace is normalised in any value used as a hash key (normalising means removing leading and trailing whitespace and collapsing sequences of whitespace characters to a single space)</li>

<li>2 = whitespace is normalised in all text content</li>
</ul>

<p>Note: you can spell this option with a &#39;z&#39; if that is more natural for you.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="NSExpand_=&#62;_1_#_in+out_handy_-_SAX_only"
>NSExpand =&#62; 1 <i># in+out handy - SAX only</i></a></h2>

<p>This option controls namespace expansion - the translation of element and attribute names of the form &#39;prefix:name&#39; to &#39;{uri}name&#39;. For example the element name &#39;xsl:template&#39; might be expanded to: &#39;{<a href="http://www.w3.org/1999/XSL/Transform}template" class="podlinkurl"
>http://www.w3.org/1999/XSL/Transform}template</a>&#39;.</p>

<p>By default, <code>XMLin()</code> will return element names and attribute names exactly as they appear in the XML. Setting this option to 1 will cause all element and attribute names to be expanded to include their namespace prefix.</p>

<p><i>Note: You must be using a SAX parser for this option to work (ie: it does not work with XML::Parser)</i>.</p>

<p>This option also controls whether <code>XMLout()</code> performs the reverse translation from &#39;{uri}name&#39; back to &#39;prefix:name&#39;. The default is no translation. If your data contains expanded names, you should set this option to 1 otherwise <code>XMLout</code> will emit XML which is not well formed.</p>

<p><i>Note: You must have the XML::NamespaceSupport module installed if you want <code>XMLout()</code> to translate URIs back to prefixes</i>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="NumericEscape_=&#62;_0_|_1_|_2_#_out_-_handy"
>NumericEscape =&#62; 0 | 1 | 2 <i># out - handy</i></a></h2>

<p>Use this option to have &#39;high&#39; (non-ASCII) characters in your Perl data structure converted to numeric entities (eg: &#38;#8364;) in the XML output. Three levels are possible:</p>

<p>0 - default: no numeric escaping (OK if you&#39;re writing out UTF8)</p>

<p>1 - only characters above 0xFF are escaped (ie: characters in the 0x80-FF range are not escaped), possibly useful with ISO8859-1 output</p>

<p>2 - all characters above 0x7F are escaped (good for plain ASCII output)</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="OutputFile_=&#62;_&#60;file_specifier&#62;_#_out_-_handy"
>OutputFile =&#62; &#60;file specifier&#62; <i># out - handy</i></a></h2>

<p>The default behaviour of <code>XMLout()</code> is to return the XML as a string. If you wish to write the XML to a file, simply supply the filename using the &#39;OutputFile&#39; option.</p>

<p>This option also accepts an IO handle object - especially useful in Perl 5.8.0 and later for output using an encoding other than UTF-8, eg:</p>

<pre class="sh_perl">  open my $fh, &#39;&#62;:encoding(iso-8859-1)&#39;, $path or die &#34;open($path): $!&#34;;
  XMLout($ref, OutputFile =&#62; $fh);</pre>

<p>Note, XML::Simple does not require that the object you pass in to the OutputFile option inherits from <a href="/perldoc?IO%3A%3AHandle" class="podlinkpod"
>IO::Handle</a> - it simply assumes the object supports a <code>print</code> method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ParserOpts_=&#62;_[_XML::Parser_Options_]_#_in_-_don&#39;t_use_this"
>ParserOpts =&#62; [ XML::Parser Options ] <i># in - don&#39;t use this</i></a></h2>

<p><i>Note: This option is now officially deprecated. If you find it useful, email the author with an example of what you use it for. Do not use this option to set the ProtocolEncoding, that&#39;s just plain wrong - fix the XML</i>.</p>

<p>This option allows you to pass parameters to the constructor of the underlying XML::Parser object (which of course assumes you&#39;re not using SAX).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="RootName_=&#62;_&#39;string&#39;_#_out_-_handy"
>RootName =&#62; &#39;string&#39; <i># out - handy</i></a></h2>

<p>By default, when <code>XMLout()</code> generates XML, the root element will be named &#39;opt&#39;. This option allows you to specify an alternative name.</p>

<p>Specifying either undef or the empty string for the RootName option will produce XML with no root elements. In most cases the resulting XML fragment will not be &#39;well formed&#39; and therefore could not be read back in by <code>XMLin()</code>. Nevertheless, the option has been found to be useful in certain circumstances.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="SearchPath_=&#62;_[_list_]_#_in_-_handy"
>SearchPath =&#62; [ list ] <i># in - handy</i></a></h2>

<p>If you pass <code>XMLin()</code> a filename, but the filename include no directory component, you can use this option to specify which directories should be searched to locate the file. You might use this option to search first in the user&#39;s home directory, then in a global directory such as /etc.</p>

<p>If a filename is provided to <code>XMLin()</code> but SearchPath is not defined, the file is assumed to be in the current directory.</p>

<p>If the first parameter to <code>XMLin()</code> is undefined, the default SearchPath will contain only the directory in which the script itself is located. Otherwise the default SearchPath will be empty.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="SuppressEmpty_=&#62;_1_|_&#39;&#39;_|_undef_#_in+out_-_handy"
>SuppressEmpty =&#62; 1 | &#39;&#39; | undef <i># in+out - handy</i></a></h2>

<p>This option controls what <code>XMLin()</code> should do with empty elements (no attributes and no content). The default behaviour is to represent them as empty hashes. Setting this option to a true value (eg: 1) will cause empty elements to be skipped altogether. Setting the option to &#39;undef&#39; or the empty string will cause empty elements to be represented as the undefined value or the empty string respectively. The latter two alternatives are a little easier to test for in your code than a hash with no keys.</p>

<p>The option also controls what <code>XMLout()</code> does with undefined values. Setting the option to undef causes undefined values to be output as empty elements (rather than empty attributes), it also suppresses the generation of warnings about undefined values. Setting the option to a true value (eg: 1) causes undefined values to be skipped altogether on output.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ValueAttr_=&#62;_[_names_]_#_in_-_handy"
>ValueAttr =&#62; [ names ] <i># in - handy</i></a></h2>

<p>Use this option to deal elements which always have a single attribute and no content. Eg:</p>

<pre class="sh_perl">  &#60;opt&#62;
    &#60;colour value=&#34;red&#34; /&#62;
    &#60;size   value=&#34;XXL&#34; /&#62;
  &#60;/opt&#62;</pre>

<p>Setting <code>ValueAttr =&#62; [ &#39;value&#39; ]</code> will cause the above XML to parse to:</p>

<pre class="sh_perl">  {
    colour =&#62; &#39;red&#39;,
    size   =&#62; &#39;XXL&#39;
  }</pre>

<p>instead of this (the default):</p>

<pre class="sh_perl">  {
    colour =&#62; { value =&#62; &#39;red&#39; },
    size   =&#62; { value =&#62; &#39;XXL&#39; }
  }</pre>

<p>Note: This form of the ValueAttr option is not compatible with <code>XMLout()</code> - since the attribute name is discarded at parse time, the original XML cannot be reconstructed.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ValueAttr_=&#62;_{_element_=&#62;_attribute,_..._}_#_in+out_-_handy"
>ValueAttr =&#62; { element =&#62; attribute, ... } <i># in+out - handy</i></a></h2>

<p>This (preferred) form of the ValueAttr option requires you to specify both the element and the attribute names. This is not only safer, it also allows the original XML to be reconstructed by <code>XMLout()</code>.</p>

<p>Note: You probably don&#39;t want to use this option and the NoAttr option at the same time.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Variables_=&#62;_{_name_=&#62;_value_}_#_in_-_handy"
>Variables =&#62; { name =&#62; value } <i># in - handy</i></a></h2>

<p>This option allows variables in the XML to be expanded when the file is read. (there is no facility for putting the variable names back if you regenerate XML using <code>XMLout</code>).</p>

<p>A &#39;variable&#39; is any text of the form <code>${name}</code> which occurs in an attribute value or in the text content of an element. If &#39;name&#39; matches a key in the supplied hashref, <code>${name}</code> will be replaced with the corresponding value from the hashref. If no matching key is found, the variable will not be replaced. Names must match the regex: <code>[\w.]+</code> (ie: only &#39;word&#39; characters and dots are allowed).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="VarAttr_=&#62;_&#39;attr_name&#39;_#_in_-_handy"
>VarAttr =&#62; &#39;attr_name&#39; <i># in - handy</i></a></h2>

<p>In addition to the variables defined using <code>Variables</code>, this option allows variables to be defined in the XML. A variable definition consists of an element with an attribute called &#39;attr_name&#39; (the value of the <code>VarAttr</code> option). The value of the attribute will be used as the variable name and the text content of the element will be used as the value. A variable defined in this way will override a variable defined using the <code>Variables</code> option. For example:</p>

<pre class="sh_perl">  XMLin( &#39;&#60;opt&#62;
            &#60;dir name=&#34;prefix&#34;&#62;/usr/local/apache&#60;/dir&#62;
            &#60;dir name=&#34;exec_prefix&#34;&#62;${prefix}&#60;/dir&#62;
            &#60;dir name=&#34;bindir&#34;&#62;${exec_prefix}/bin&#60;/dir&#62;
          &#60;/opt&#62;&#39;,
         VarAttr =&#62; &#39;name&#39;, ContentKey =&#62; &#39;-content&#39;
        );</pre>

<p>produces the following data structure:</p>

<pre class="sh_perl">  {
    dir =&#62; {
             prefix      =&#62; &#39;/usr/local/apache&#39;,
             exec_prefix =&#62; &#39;/usr/local/apache&#39;,
             bindir      =&#62; &#39;/usr/local/apache/bin&#39;,
           }
  }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="XMLDecl_=&#62;_1_or_XMLDecl_=&#62;_&#39;string&#39;_#_out_-_handy"
>XMLDecl =&#62; 1 or XMLDecl =&#62; &#39;string&#39; <i># out - handy</i></a></h2>

<p>If you want the output from <code>XMLout()</code> to start with the optional XML declaration, simply set the option to &#39;1&#39;. The default XML declaration is:</p>

<pre class="sh_perl">        &#60;?xml version=&#39;1.0&#39; standalone=&#39;yes&#39;?&#62;</pre>

<p>If you want some other string (for example to declare an encoding value), set the value of this option to the complete string you require.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OPTIONAL_OO_INTERFACE"
>OPTIONAL OO INTERFACE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The procedural interface is both simple and convenient however there are a couple of reasons why you might prefer to use the object oriented (OO) interface:</p>

<ul>
<li>to define a set of default values which should be used on all subsequent calls to <code>XMLin()</code> or <code>XMLout()</code></li>

<li>to override methods in <b>XML::Simple</b> to provide customised behaviour</li>
</ul>

<p>The default values for the options described above are unlikely to suit everyone. The OO interface allows you to effectively override <b>XML::Simple</b>&#39;s defaults with your preferred values. It works like this:</p>

<p>First create an XML::Simple parser object with your preferred defaults:</p>

<pre class="sh_perl">  my $xs = XML::Simple-&#62;new(ForceArray =&#62; 1, KeepRoot =&#62; 1);</pre>

<p>then call <code>XMLin()</code> or <code>XMLout()</code> as a method of that object:</p>

<pre class="sh_perl">  my $ref = $xs-&#62;XMLin($xml);
  my $xml = $xs-&#62;XMLout($ref);</pre>

<p>You can also specify options when you make the method calls and these values will be merged with the values specified when the object was created. Values specified in a method call take precedence.</p>

<p>Note: when called as methods, the <code>XMLin()</code> and <code>XMLout()</code> routines may be called as <code>xml_in()</code> or <code>xml_out()</code>. The method names are aliased so the only difference is the aesthetics.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Parsing_Methods"
>Parsing Methods</a></h2>

<p>You can explicitly call one of the following methods rather than rely on the <code>xml_in()</code> method automatically determining whether the target to be parsed is a string, a file or a filehandle:</p>

<dl>
<dt><a name='parse_string'></a><a name="parse_string(text)"
>parse_string(text)</a></dt>

<dd>
<p>Works exactly like the <code>xml_in()</code> method but assumes the first argument is a string of XML (or a reference to a scalar containing a string of XML).</p>

<dt><a name='parse_file'></a><a name="parse_file(filename)"
>parse_file(filename)</a></dt>

<dd>
<p>Works exactly like the <code>xml_in()</code> method but assumes the first argument is the name of a file containing XML.</p>

<dt><a name='parse_fh'></a><a name="parse_fh(file_handle)"
>parse_fh(file_handle)</a></dt>

<dd>
<p>Works exactly like the <code>xml_in()</code> method but assumes the first argument is a filehandle which can be read to get XML.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Hook_Methods"
>Hook Methods</a></h2>

<p>You can make your own class which inherits from XML::Simple and overrides certain behaviours. The following methods may provide useful &#39;hooks&#39; upon which to hang your modified behaviour. You may find other undocumented methods by examining the source, but those may be subject to change in future releases.</p>

<dl>
<dt><a name='handle_options'></a><a name="handle_options(direction,_name_=&#62;_value_...)"
>handle_options(direction, name =&#62; value ...)</a></dt>

<dd>
<p>This method will be called when one of the parsing methods or the <code>XMLout()</code> method is called. The initial argument will be a string (either &#39;in&#39; or &#39;out&#39;) and the remaining arguments will be name value pairs.</p>

<dt><a name='default_config_file'></a><a name="default_config_file()"
>default_config_file()</a></dt>

<dd>
<p>Calculates and returns the name of the file which should be parsed if no filename is passed to <code>XMLin()</code> (default: <code>$0.xml</code>).</p>

<dt><a name='build_simple_tree'></a><a name="build_simple_tree(filename,_string)"
>build_simple_tree(filename, string)</a></dt>

<dd>
<p>Called from <code>XMLin()</code> or any of the parsing methods. Takes either a file name as the first argument or <code>undef</code> followed by a &#39;string&#39; as the second argument. Returns a simple tree data structure. You could override this method to apply your own transformations before the data structure is returned to the caller.</p>

<dt><a name='new_hashref'></a><a name="new_hashref()"
>new_hashref()</a></dt>

<dd>
<p>When the &#39;simple tree&#39; data structure is being built, this method will be called to create any required anonymous hashrefs.</p>

<dt><a name='sorted_keys'></a><a name="sorted_keys(name,_hashref)"
>sorted_keys(name, hashref)</a></dt>

<dd>
<p>Called when <code>XMLout()</code> is translating a hashref to XML. This routine returns a list of hash keys in the order that the corresponding attributes/elements should appear in the output.</p>

<dt><a name='escape_value'></a><a name="escape_value(string)"
>escape_value(string)</a></dt>

<dd>
<p>Called from <code>XMLout()</code>, takes a string and returns a copy of the string with XML character escaping rules applied.</p>

<dt><a name='numeric_escape'></a><a name="numeric_escape(string)"
>numeric_escape(string)</a></dt>

<dd>
<p>Called from <code>escape_value()</code>, to handle non-ASCII characters (depending on the value of the NumericEscape option).</p>

<dt><a name='copy_hash'></a><a name="copy_hash(hashref,_extra_key_=&#62;_value,_...)"
>copy_hash(hashref, extra_key =&#62; value, ...)</a></dt>

<dd>
<p>Called from <code>XMLout()</code>, when &#39;unfolding&#39; a hash of hashes into an array of hashes. You might wish to override this method if you&#39;re using tied hashes and don&#39;t want them to get untied.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Cache_Methods"
>Cache Methods</a></h2>

<p>XML::Simple implements three caching schemes (&#39;storable&#39;, &#39;memshare&#39; and &#39;memcopy&#39;). You can implement a custom caching scheme by implementing two methods - one for reading from the cache and one for writing to it.</p>

<p>For example, you might implement a new &#39;dbm&#39; scheme that stores cached data structures using the <a href="/perldoc?MLDBM" class="podlinkpod"
>MLDBM</a> module. First, you would add a <code>cache_read_dbm()</code> method which accepted a filename for use as a lookup key and returned a data structure on success, or undef on failure. Then, you would implement a <code>cache_read_dbm()</code> method which accepted a data structure and a filename.</p>

<p>You would use this caching scheme by specifying the option:</p>

<pre class="sh_perl">  Cache =&#62; [ &#39;dbm&#39; ]</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="STRICT_MODE"
>STRICT MODE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you import the <b>XML::Simple</b> routines like this:</p>

<pre class="sh_perl">  use XML::Simple qw(:strict);</pre>

<p>the following common mistakes will be detected and treated as fatal errors</p>

<ul>
<li>Failing to explicitly set the <code>KeyAttr</code> option - if you can&#39;t be bothered reading about this option, turn it off with: KeyAttr =&#62; [ ]</li>

<li>Failing to explicitly set the <code>ForceArray</code> option - if you can&#39;t be bothered reading about this option, set it to the safest mode with: ForceArray =&#62; 1</li>

<li>Setting ForceArray to an array, but failing to list all the elements from the KeyAttr hash.</li>

<li>Data error - KeyAttr is set to say { part =&#62; &#39;partnum&#39; } but the XML contains one or more &#60;part&#62; elements without a &#39;partnum&#39; attribute (or nested element). Note: if strict mode is not set but -w is, this condition triggers a warning.</li>

<li>Data error - as above, but non-unique values are present in the key attribute (eg: more than one &#60;part&#62; element with the same partnum). This will also trigger a warning if strict mode is not enabled.</li>

<li>Data error - as above, but value of key attribute (eg: partnum) is not a scalar string (due to nested elements etc). This will also trigger a warning if strict mode is not enabled.</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SAX_SUPPORT"
>SAX SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>From version 1.08_01, <b>XML::Simple</b> includes support for SAX (the Simple API for XML) - specifically SAX2.</p>

<p>In a typical SAX application, an XML parser (or SAX &#39;driver&#39;) module generates SAX events (start of element, character data, end of element, etc) as it parses an XML document and a &#39;handler&#39; module processes the events to extract the required data. This simple model allows for some interesting and powerful possibilities:</p>

<ul>
<li>Applications written to the SAX API can extract data from huge XML documents without the memory overheads of a DOM or tree API.</li>

<li>The SAX API allows for plug and play interchange of parser modules without having to change your code to fit a new module&#39;s API. A number of SAX parsers are available with capabilities ranging from extreme portability to blazing performance.</li>

<li>A SAX &#39;filter&#39; module can implement both a handler interface for receiving data and a generator interface for passing modified data on to a downstream handler. Filters can be chained together in &#39;pipelines&#39;.</li>

<li>One filter module might split a data stream to direct data to two or more downstream handlers.</li>

<li>Generating SAX events is not the exclusive preserve of XML parsing modules. For example, a module might extract data from a relational database using DBI and pass it on to a SAX pipeline for filtering and formatting.</li>
</ul>

<p><b>XML::Simple</b> can operate at either end of a SAX pipeline. For example, you can take a data structure in the form of a hashref and pass it into a SAX pipeline using the &#39;Handler&#39; option on <code>XMLout()</code>:</p>

<pre class="sh_perl">  use XML::Simple;
  use Some::SAX::Filter;
  use XML::SAX::Writer;

  my $ref = {
               ....   # your data here
            };

  my $writer = XML::SAX::Writer-&#62;new();
  my $filter = Some::SAX::Filter-&#62;new(Handler =&#62; $writer);
  my $simple = XML::Simple-&#62;new(Handler =&#62; $filter);
  $simple-&#62;XMLout($ref);</pre>

<p>You can also put <b>XML::Simple</b> at the opposite end of the pipeline to take advantage of the simple &#39;tree&#39; data structure once the relevant data has been isolated through filtering:</p>

<pre class="sh_perl">  use XML::SAX;
  use Some::SAX::Filter;
  use XML::Simple;

  my $simple = XML::Simple-&#62;new(ForceArray =&#62; 1, KeyAttr =&#62; [&#39;partnum&#39;]);
  my $filter = Some::SAX::Filter-&#62;new(Handler =&#62; $simple);
  my $parser = XML::SAX::ParserFactory-&#62;parser(Handler =&#62; $filter);

  my $ref = $parser-&#62;parse_uri(&#39;some_huge_file.xml&#39;);

  print $ref-&#62;{part}-&#62;{&#39;555-1234&#39;};</pre>

<p>You can build a filter by using an XML::Simple object as a handler and setting its DataHandler option to point to a routine which takes the resulting tree, modifies it and sends it off as SAX events to a downstream handler:</p>

<pre class="sh_perl">  my $writer = XML::SAX::Writer-&#62;new();
  my $filter = XML::Simple-&#62;new(
                 DataHandler =&#62; sub {
                                  my $simple = shift;
                                  my $data = shift;

                                  # Modify $data here

                                  $simple-&#62;XMLout($data, Handler =&#62; $writer);
                                }
               );
  my $parser = XML::SAX::ParserFactory-&#62;parser(Handler =&#62; $filter);

  $parser-&#62;parse_uri($filename);</pre>

<p><i>Note: In this last example, the &#39;Handler&#39; option was specified in the call to <code>XMLout()</code> but it could also have been specified in the constructor</i>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ENVIRONMENT"
>ENVIRONMENT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you don&#39;t care which parser module <b>XML::Simple</b> uses then skip this section entirely (it looks more complicated than it really is).</p>

<p><b>XML::Simple</b> will default to using a <b>SAX</b> parser if one is available or <b>XML::Parser</b> if SAX is not available.</p>

<p>You can dictate which parser module is used by setting either the environment variable &#39;XML_SIMPLE_PREFERRED_PARSER&#39; or the package variable $XML::Simple::PREFERRED_PARSER to contain the module name. The following rules are used:</p>

<ul>
<li>The package variable takes precedence over the environment variable if both are defined. To force <b>XML::Simple</b> to ignore the environment settings and use its default rules, you can set the package variable to an empty string.</li>

<li>If the &#39;preferred parser&#39; is set to the string &#39;XML::Parser&#39;, then <a href="/perldoc?XML%3A%3AParser" class="podlinkpod"
>XML::Parser</a> will be used (or <code>XMLin()</code> will die if <a href="/perldoc?XML%3A%3AParser" class="podlinkpod"
>XML::Parser</a> is not installed).</li>

<li>If the &#39;preferred parser&#39; is set to some other value, then it is assumed to be the name of a SAX parser module and is passed to <a href="/perldoc?XML%3A%3ASAX%3A%3AParserFactory." class="podlinkpod"
>XML::SAX::ParserFactory.</a> If <a href="/perldoc?XML%3A%3ASAX" class="podlinkpod"
>XML::SAX</a> is not installed, or the requested parser module is not installed, then <code>XMLin()</code> will die.</li>

<li>If the &#39;preferred parser&#39; is not defined at all (the normal default state), an attempt will be made to load <a href="/perldoc?XML%3A%3ASAX" class="podlinkpod"
>XML::SAX</a>. If <a href="/perldoc?XML%3A%3ASAX" class="podlinkpod"
>XML::SAX</a> is installed, then a parser module will be selected according to <a href="/perldoc?XML%3A%3ASAX%3A%3AParserFactory" class="podlinkpod"
>XML::SAX::ParserFactory</a>&#39;s normal rules (which typically means the last SAX parser installed).</li>

<li>if the &#39;preferred parser&#39; is not defined and <b>XML::SAX</b> is not installed, then <b>XML::Parser</b> will be used. <code>XMLin()</code> will die if <a href="/perldoc?XML%3A%3AParser" class="podlinkpod"
>XML::Parser</a> is not installed.</li>
</ul>

<p>Note: The <b>XML::SAX</b> distribution includes an XML parser written entirely in Perl. It is very portable but it is not very fast. You should consider installing <a href="/perldoc?XML%3A%3ALibXML" class="podlinkpod"
>XML::LibXML</a> or <a href="/perldoc?XML%3A%3ASAX%3A%3AExpat" class="podlinkpod"
>XML::SAX::Expat</a> if they are available for your platform.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ERROR_HANDLING"
>ERROR HANDLING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The XML standard is very clear on the issue of non-compliant documents. An error in parsing any single element (for example a missing end tag) must cause the whole document to be rejected. <b>XML::Simple</b> will die with an appropriate message if it encounters a parsing error.</p>

<p>If dying is not appropriate for your application, you should arrange to call <code>XMLin()</code> in an eval block and look for errors in $@. eg:</p>

<pre class="sh_perl">    my $config = eval { XMLin() };
    PopUpMessage($@) if($@);</pre>

<p>Note, there is a common misconception that use of <b>eval</b> will significantly slow down a script. While that may be true when the code being eval&#39;d is in a string, it is not true of code like the sample above.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>When <code>XMLin()</code> reads the following very simple piece of XML:</p>

<pre class="sh_perl">    &#60;opt username=&#34;testuser&#34; password=&#34;frodo&#34;&#62;&#60;/opt&#62;</pre>

<p>it returns the following data structure:</p>

<pre class="sh_perl">    {
      &#39;username&#39; =&#62; &#39;testuser&#39;,
      &#39;password&#39; =&#62; &#39;frodo&#39;
    }</pre>

<p>The identical result could have been produced with this alternative XML:</p>

<pre class="sh_perl">    &#60;opt username=&#34;testuser&#34; password=&#34;frodo&#34; /&#62;</pre>

<p>Or this (although see &#39;ForceArray&#39; option for variations):</p>

<pre class="sh_perl">    &#60;opt&#62;
      &#60;username&#62;testuser&#60;/username&#62;
      &#60;password&#62;frodo&#60;/password&#62;
    &#60;/opt&#62;</pre>

<p>Repeated nested elements are represented as anonymous arrays:</p>

<pre class="sh_perl">    &#60;opt&#62;
      &#60;person firstname=&#34;Joe&#34; lastname=&#34;Smith&#34;&#62;
        &#60;email&#62;joe@smith.com&#60;/email&#62;
        &#60;email&#62;jsmith@yahoo.com&#60;/email&#62;
      &#60;/person&#62;
      &#60;person firstname=&#34;Bob&#34; lastname=&#34;Smith&#34;&#62;
        &#60;email&#62;bob@smith.com&#60;/email&#62;
      &#60;/person&#62;
    &#60;/opt&#62;

    {
      &#39;person&#39; =&#62; [
                    {
                      &#39;email&#39; =&#62; [
                                   &#39;joe@smith.com&#39;,
                                   &#39;jsmith@yahoo.com&#39;
                                 ],
                      &#39;firstname&#39; =&#62; &#39;Joe&#39;,
                      &#39;lastname&#39; =&#62; &#39;Smith&#39;
                    },
                    {
                      &#39;email&#39; =&#62; &#39;bob@smith.com&#39;,
                      &#39;firstname&#39; =&#62; &#39;Bob&#39;,
                      &#39;lastname&#39; =&#62; &#39;Smith&#39;
                    }
                  ]
    }</pre>

<p>Nested elements with a recognised key attribute are transformed (folded) from an array into a hash keyed on the value of that attribute (see the <code>KeyAttr</code> option):</p>

<pre class="sh_perl">    &#60;opt&#62;
      &#60;person key=&#34;jsmith&#34; firstname=&#34;Joe&#34; lastname=&#34;Smith&#34; /&#62;
      &#60;person key=&#34;tsmith&#34; firstname=&#34;Tom&#34; lastname=&#34;Smith&#34; /&#62;
      &#60;person key=&#34;jbloggs&#34; firstname=&#34;Joe&#34; lastname=&#34;Bloggs&#34; /&#62;
    &#60;/opt&#62;

    {
      &#39;person&#39; =&#62; {
                    &#39;jbloggs&#39; =&#62; {
                                   &#39;firstname&#39; =&#62; &#39;Joe&#39;,
                                   &#39;lastname&#39; =&#62; &#39;Bloggs&#39;
                                 },
                    &#39;tsmith&#39; =&#62; {
                                  &#39;firstname&#39; =&#62; &#39;Tom&#39;,
                                  &#39;lastname&#39; =&#62; &#39;Smith&#39;
                                },
                    &#39;jsmith&#39; =&#62; {
                                  &#39;firstname&#39; =&#62; &#39;Joe&#39;,
                                  &#39;lastname&#39; =&#62; &#39;Smith&#39;
                                }
                  }
    }</pre>

<p>The &#60;anon&#62; tag can be used to form anonymous arrays:</p>

<pre class="sh_perl">    &#60;opt&#62;
      &#60;head&#62;&#60;anon&#62;Col 1&#60;/anon&#62;&#60;anon&#62;Col 2&#60;/anon&#62;&#60;anon&#62;Col 3&#60;/anon&#62;&#60;/head&#62;
      &#60;data&#62;&#60;anon&#62;R1C1&#60;/anon&#62;&#60;anon&#62;R1C2&#60;/anon&#62;&#60;anon&#62;R1C3&#60;/anon&#62;&#60;/data&#62;
      &#60;data&#62;&#60;anon&#62;R2C1&#60;/anon&#62;&#60;anon&#62;R2C2&#60;/anon&#62;&#60;anon&#62;R2C3&#60;/anon&#62;&#60;/data&#62;
      &#60;data&#62;&#60;anon&#62;R3C1&#60;/anon&#62;&#60;anon&#62;R3C2&#60;/anon&#62;&#60;anon&#62;R3C3&#60;/anon&#62;&#60;/data&#62;
    &#60;/opt&#62;

    {
      &#39;head&#39; =&#62; [
                  [ &#39;Col 1&#39;, &#39;Col 2&#39;, &#39;Col 3&#39; ]
                ],
      &#39;data&#39; =&#62; [
                  [ &#39;R1C1&#39;, &#39;R1C2&#39;, &#39;R1C3&#39; ],
                  [ &#39;R2C1&#39;, &#39;R2C2&#39;, &#39;R2C3&#39; ],
                  [ &#39;R3C1&#39;, &#39;R3C2&#39;, &#39;R3C3&#39; ]
                ]
    }</pre>

<p>Anonymous arrays can be nested to arbirtrary levels and as a special case, if the surrounding tags for an XML document contain only an anonymous array the arrayref will be returned directly rather than the usual hashref:</p>

<pre class="sh_perl">    &#60;opt&#62;
      &#60;anon&#62;&#60;anon&#62;Col 1&#60;/anon&#62;&#60;anon&#62;Col 2&#60;/anon&#62;&#60;/anon&#62;
      &#60;anon&#62;&#60;anon&#62;R1C1&#60;/anon&#62;&#60;anon&#62;R1C2&#60;/anon&#62;&#60;/anon&#62;
      &#60;anon&#62;&#60;anon&#62;R2C1&#60;/anon&#62;&#60;anon&#62;R2C2&#60;/anon&#62;&#60;/anon&#62;
    &#60;/opt&#62;

    [
      [ &#39;Col 1&#39;, &#39;Col 2&#39; ],
      [ &#39;R1C1&#39;, &#39;R1C2&#39; ],
      [ &#39;R2C1&#39;, &#39;R2C2&#39; ]
    ]</pre>

<p>Elements which only contain text content will simply be represented as a scalar. Where an element has both attributes and text content, the element will be represented as a hashref with the text content in the &#39;content&#39; key (see the <code>ContentKey</code> option):</p>

<pre class="sh_perl">  &#60;opt&#62;
    &#60;one&#62;first&#60;/one&#62;
    &#60;two attr=&#34;value&#34;&#62;second&#60;/two&#62;
  &#60;/opt&#62;

  {
    &#39;one&#39; =&#62; &#39;first&#39;,
    &#39;two&#39; =&#62; { &#39;attr&#39; =&#62; &#39;value&#39;, &#39;content&#39; =&#62; &#39;second&#39; }
  }</pre>

<p>Mixed content (elements which contain both text content and nested elements) will be not be represented in a useful way - element order and significant whitespace will be lost. If you need to work with mixed content, then XML::Simple is not the right tool for your job - check out the next section.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WHERE_TO_FROM_HERE?"
>WHERE TO FROM HERE? <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>XML::Simple</b> is able to present a simple API because it makes some assumptions on your behalf. These include:</p>

<ul>
<li>You&#39;re not interested in text content consisting only of whitespace</li>

<li>You don&#39;t mind that when things get slurped into a hash the order is lost</li>

<li>You don&#39;t want fine-grained control of the formatting of generated XML</li>

<li>You would never use a hash key that was not a legal XML element name</li>

<li>You don&#39;t need help converting between different encodings</li>
</ul>

<p>In a serious XML project, you&#39;ll probably outgrow these assumptions fairly quickly. This section of the document used to offer some advice on chosing a more powerful option. That advice has now grown into the &#39;Perl-XML FAQ&#39; document which you can find at: <a href="http://perl-xml.sourceforge.net/faq/" class="podlinkurl"
>http://perl-xml.sourceforge.net/faq/</a></p>

<p>The advice in the FAQ boils down to a quick explanation of tree versus event based parsers and then recommends:</p>

<p>For event based parsing, use SAX (do not set out to write any new code for XML::Parser&#39;s handler API - it is obselete).</p>

<p>For tree-based parsing, you could choose between the &#39;Perlish&#39; approach of <a href="/perldoc?XML%3A%3ATwig" class="podlinkpod"
>XML::Twig</a> and more standards based DOM implementations - preferably one with XPath support.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b><a href="/~grantm/XML-Simple-2.18/lib/XML/Simple.pm" class="podlinkpod"
>XML::Simple</a></b> requires either <a href="/perldoc?XML%3A%3AParser" class="podlinkpod"
>XML::Parser</a> or <a href="/perldoc?XML%3A%3ASAX" class="podlinkpod"
>XML::SAX</a>.</p>

<p>To generate documents with namespaces, <a href="/perldoc?XML%3A%3ANamespaceSupport" class="podlinkpod"
>XML::NamespaceSupport</a> is required.</p>

<p>The optional caching functions require <a href="/perldoc?Storable" class="podlinkpod"
>Storable</a>.</p>

<p>Answers to Frequently Asked Questions about <a href="/~grantm/XML-Simple-2.18/lib/XML/Simple.pm" class="podlinkpod"
>XML::Simple</a> are bundled with this distribution as: <a href="/perldoc?XML%3A%3ASimple%3A%3AFAQ" class="podlinkpod"
>XML::Simple::FAQ</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 1999-2004 Grant McLean &#60;grantm@cpan.org&#62;</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78275 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 02:01:52 2012 GMT (0.164396047592163) @cpansearch1 -->
 </body>
</html>
