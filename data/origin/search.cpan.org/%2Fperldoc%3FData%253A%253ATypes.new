<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Data::Types - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Data-Types",3]);
    _gaq.push(["_setCustomVar",5,"Release","Data-Types-0.09",3]);
    _gaq.push(["_setCustomVar",3,"Module","Data::Types",3]);
    _gaq.push(["_setCustomVar",1,"Author","DWHEELER",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Data::Types">permalink</a></div>
  <a href="/~dwheeler/">David E. Wheeler</a> &gt;
  <a href="/~dwheeler/Data-Types-0.09/">Data-Types-0.09</a> &gt;
  Data::Types
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/de2fe609ec8ae522883ea1235f1e8792?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DW/DWHEELER/Data-Types-0.09.tar.gz">Data-Types-0.09.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Data%3A%3ATypes;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DWHEELER/Data-Types-0.09/lib/Data/Types.pm">Annotate this POD
</a></p>
     <p style="text-align:right"><a href="http://search.cpan.org/dist/Data-Types/">Website</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>GitHub</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="http://github.com/theory/data-types/issues/">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.09 &nbsp;
<span class="noprint">
  <a href="/src/DWHEELER/Data-Types-0.09/lib/Data/Types.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#EXPORT'>EXPORT</a>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#is_whole'>is_whole</a>
    <li class='indexItem indexItem2'><a href='#to_whole'>to_whole</a>
    <li class='indexItem indexItem2'><a href='#is_count'>is_count</a>
    <li class='indexItem indexItem2'><a href='#to_count'>to_count</a>
    <li class='indexItem indexItem2'><a href='#is_int'>is_int</a>
    <li class='indexItem indexItem2'><a href='#to_int'>to_int</a>
    <li class='indexItem indexItem2'><a href='#is_decimal'>is_decimal</a>
    <li class='indexItem indexItem2'><a href='#to_decimal'>to_decimal</a>
    <li class='indexItem indexItem2'><a href='#is_real'>is_real</a>
    <li class='indexItem indexItem2'><a href='#to_real'>to_real</a>
    <li class='indexItem indexItem2'><a href='#is_float'>is_float</a>
    <li class='indexItem indexItem2'><a href='#to_float'>to_float</a>
    <li class='indexItem indexItem2'><a href='#is_string'>is_string</a>
    <li class='indexItem indexItem2'><a href='#to_string'>to_string</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SUPPORT'>SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Data::Types - Validate and convert data types.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Data::Types qw(:all);

  my $whole = 4.5;
  $whole = to_whole($whole) unless is_whole($whole);

  my $int = 1.2;
  $int = to_int($int) unless is_int($int);

  my $decimal = &#39;1.2foo&#39;;
  $decimal = to_decimal($decimal) unless is_decimal($decimal);

  my $real = &#39;1.2foo&#39;;
  $real = to_real($real) unless is_real($real);

  my $float = &#39;1.2foo&#39;;
  $float = to_float($float) unless is_float($float);

  my $string = [];
  $string = to_string($string) unless is_string($string);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module exports a number of functions that are useful for validating and converting data types. It is intended for use in applications where data types are more important than they typically are in Perl -- e.g., database applications.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORT"
>EXPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>No functions are exported by default, though each function may be exported explicitly (see <a href="#Functions" class="podlinkpod"
>&#34;Functions&#34;</a>, below, for a list of functions available for export). The following export tags are supported:</p>

<dl>
<dt><a name='whole'></a><a name=":whole"
>:whole</a></dt>

<dd>
<p>Exports is_whole() and to_whole().</p>

<dt><a name='count'></a><a name=":count"
>:count</a></dt>

<dd>
<p>Exports is_count() and to_count().</p>

<dt><a name='int'></a><a name=":int"
>:int</a></dt>

<dd>
<p>Exports is_int() and to_int().</p>

<dt><a name='decimal'></a><a name=":decimal"
>:decimal</a></dt>

<dd>
<p>Exports is_decimal() and to_decimal().</p>

<dt><a name='real'></a><a name=":real"
>:real</a></dt>

<dd>
<p>Exports is_real() and to_real().</p>

<dt><a name='float'></a><a name=":float"
>:float</a></dt>

<dd>
<p>Exports is_float() and to_float().</p>

<dt><a name='string'></a><a name=":string"
>:string</a></dt>

<dd>
<p>Exports is_string() and to_string().</p>

<dt><a name='is'></a><a name=":is"
>:is</a></dt>

<dd>
<p>Exports all validation functions: is_whole(), is_int(), is_real(), is_decimal(), is_float(), and is_string().</p>

<dt><a name='to'></a><a name=":to"
>:to</a></dt>

<dd>
<p>Exports all conversion functions: to_whole(), to_int(), to_real(), to_decimal(), to_float(), and to_string().</p>

<dt><a name='all'></a><a name=":all"
>:all</a></dt>

<dd>
<p>Exports all functions.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="is_whole"
>is_whole</a></h2>

<pre class="sh_perl">  my $bool = is_whole($val);</pre>

<p>Returns true if $val is a whole number (including 0), and false if it is not. The regular expression used to test the wholeness of $val is <code>/^\d+$/</code>.</p>

<pre class="sh_perl">  my $bool = is_whole(1); # Returns true.
  $bool = is_whole(-1);   # Returns false.
  $bool = is_whole(0);    # Returns true.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="to_whole"
>to_whole</a></h2>

<pre class="sh_perl">  my $whole = to_whole($val);</pre>

<p>Converts $val to a whole number and returns it. Numbers will be rounded to the nearest whole. If $val is a mixture of numbers and letters, to_whole() will extract the first decimal number it finds and convert that number to a whole number.</p>

<pre class="sh_perl">  my $whole = to_whole(10);     # Returns 10.
  $whole = to_whole(0);         # Returns 0.
  $whole = to_whole(.22);       # Returns 0.
  $whole = to_whole(-2);        # Returns undef.
  $whole = to_whole(&#39;foo3.56&#39;); # Returns 4.
  $whole = to_whole(&#39;foo&#39;);     # Returns undef.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="is_count"
>is_count</a></h2>

<pre class="sh_perl">  my $bool = is_count($val);</pre>

<p>Returns true if $val is a counting number (1, 2, 3, ...), and false if it is not. The regular expression used to test whether $val is a counting number is <code>/^\d+$/</code>.</p>

<pre class="sh_perl">  my $bool = is_count(1); # Returns true.
  $bool = is_count(-1);   # Returns false.
  $bool = is_count(0);    # Returns false.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="to_count"
>to_count</a></h2>

<pre class="sh_perl">  my $count = to_count($val);</pre>

<p>Converts $val to a counting number and returns it. Numbers will be rounded to the nearest counting number. Note that since 0 (zero) is not considered a counting number by this module, it will not be returned. If $val is a mixture of numbers and letters, to_count() will extract the first decimal number it finds and convert that number to a counting number.</p>

<pre class="sh_perl">  my $count = to_count(10);     # Returns 10.
  $count = to_count(0);         # Returns undef.
  $count = to_count(.22);       # Returns undef (rounded down to 0).
  $count = to_count(-2);        # Returns undef.
  $count = to_count(&#39;foo3.56&#39;); # Returns 4.
  $count = to_count(&#39;foo&#39;);     # Returns undef.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="is_int"
>is_int</a></h2>

<pre class="sh_perl">  my $bool = is_int($val);</pre>

<p>Returns true if $val is an integer, and false if it is not. Numbers may be preceded by a plus or minus sign. The regular expression used to test for an integer in $val is <code>/^[+-]?\d+$/</code>.</p>

<pre class="sh_perl">  my $bool = is_int(0); # Returns true.
  $bool = is_int(22);   # Returns true.
  $bool = is_int(-22);  # Returns false.
  $bool = is_int(3.2);  # Returns false.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="to_int"
>to_int</a></h2>

<pre class="sh_perl">  my $int = to_int($val);</pre>

<p>Converts $val to an integer. If $val is a decimal number, it will be rounded to the nearest integer. If $val is a mixture of numbers and letters, to_int() will extract the first decimal number it finds and convert that number to an integer.</p>

<pre class="sh_perl">  my $int = to_int(10.5);  # Returns 10.
  $int = to_int(10.51);    # Returns 11.
  $int = to_int(-0.22);    # Returns 0.
  $int = to_int(-6.51);    # Returns 7.
  $int = to_int(&#39;foo&#39;);    # Returns undef.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="is_decimal"
>is_decimal</a></h2>

<pre class="sh_perl">  my $bool = is_decimal($val);</pre>

<p>Returns true if $val is a decimal number, and false if it is not. Numbers may be preceded by a plus or minus sign. The regular expression used to test $val is <code>/^[+-]?(?:\d+(?:\.\d*)?|\.\d+)$/</code>.</p>

<pre class="sh_perl">  my $bool = is_decimal(10)    # Returns true.
  $bool = is_decimal(10.8)     # Returns true.
  $bool = is_decimal(-33.48)   # Returns true.
  $bool = is_decimal((1.23e99) # Returns false.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="to_decimal"
>to_decimal</a></h2>

<pre class="sh_perl">  my $dec = to_decimal($val);
  $dec = to_decimal($val, $precision);</pre>

<p>Converts $val to a decimal number. The optional second argument sets the precision of the number. The default precision is 5. If $val is a mixture of numbers and letters, to_decimal() will extract the first decimal number it finds.</p>

<pre class="sh_perl">  my $dec = to_decimal(0);         # Returns 0.00000.
  $dec = to_decimal(10.5);         # Returns 10.5.
  $dec = to_decimal(10.500009);    # Returns 10.50001.
  $dec = to_decimal(10.500009, 7); # Returns 10.5000090.
  $dec = to_decimal(&#39;foo10.3&#39;)     # Returns 10.30000.
  $dec = to_decimal(&#39;foo-4.9&#39;)     # Returns -4.90000.
  $dec = to_decimal(&#39;foo&#39;)         # Returns undef.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="is_real"
>is_real</a></h2>

<pre class="sh_perl">  my $bool = is_real($val);</pre>

<p>Returns true if $val is a real number, and false if it is not.</p>

<p><b>Note:</b> This function is currently equivalent to is_decimal(), since this module cannot identify non-decimal real numbers (e.g., irrational numbers). This implementation may change in the future.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="to_real"
>to_real</a></h2>

<pre class="sh_perl">  my $real = to_real($val);
  $real = to_real($val, $precision);</pre>

<p>Converts $val to a real number.</p>

<p><b>Note:</b> Currently, this function is the equivalent of to_decimal(), since this module cannot identify non-decimal real numbers (e.g., irrational numbers). This implementation may change in the future.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="is_float"
>is_float</a></h2>

<pre class="sh_perl">  my $bool = is_real($val);</pre>

<p>Returns true if $val is a float, and false if it is not. The regular expression used to test $val is <code>/^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/</code>.</p>

<pre class="sh_perl">  my $bool = is_real(30);   # Returns true.
  $bool = is_real(1.23e99); # Returns true.
  $bool = is_real(&#39;foo&#39;);   # Returns false.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="to_float"
>to_float</a></h2>

<pre class="sh_perl">  my $dec = to_float($val);
  $dec = to_float($val, $precision);</pre>

<p>Converts $val to a float. The optional second argument sets the precision of the number. The default precision is 5. If $val is a mixture of numbers and letters, to_float() will extract the first float it finds.</p>

<pre class="sh_perl">  my $float = to_float(1.23);          # Returns 1.23000.
  $float = to_float(1.23e99);          # Returns 1.23000e+99.
  $float = to_float(1.23e99, 1);       # Returns 1.2e+99.
  $float = to_float(&#39;foo-1.23&#39;);       # Returns -1.23000.
  $float = to_float(&#39;ick_1.23e99foo&#39;); # Returns 1.23000e+99.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="is_string"
>is_string</a></h2>

<pre class="sh_perl">  my $bool = is_string($val);</pre>

<p>Returns true if $val is a string, and false if it is not. All defined non-references are considered strings.</p>

<pre class="sh_perl">  my $bool = is_string(&#39;foo&#39;); # Returns true.
  $bool = is_string(20001);    # Returns true.
  $bool = is_string([]);       # Returns false.
  $bool = is_string(undef);    # Returns false.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="to_string"
>to_string</a></h2>

<pre class="sh_perl">  my $string = to_string($val);
  $string = to_string($val, $length);</pre>

<p>Converts $val into a string. If $val is a reference, the string value of the reference will be returned. Such a value may be a memory address, or some other value, if the stringification operator has been overridden for the object stored in $val. If the optional second argument $length is passed, to_string() will truncate the string to that length. If $length is 0 (zero), it will not limit the length of the return string. If $val is undefined, to_string() will return undef.</p>

<pre class="sh_perl">  my $string = to_string(&#39;foo&#39;);   # Returns &#39;foo&#39;.
  $string = to_string([]);         # Returns &#39;ARRAY(0x101bec14)&#39;.
  $string = to_string(undef);      # Returns undef.
  $string = to_string(&#39;hello&#39;, 4); # Returns &#39;hell&#39;.</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT"
>SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is stored in an open <a href="http://github.com/theory/data-types/" class="podlinkurl"
>GitHub repository</a>. Feel free to fork and contribute!</p>

<p>Please file bug reports via <a href="http://github.com/theory/data-types/issues/" class="podlinkurl"
>GitHub Issues</a> or by sending mail to <a href="mailto:bug-Data-Types.cpan.org" class="podlinkurl"
>bug-Data-Types.cpan.org</a>.</p>

<p>Patches against Class::Meta are welcome. Please send bug reports to &#60;bug-data-types@rt.cpan.org&#62;.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>David E. Wheeler &#60;david@justatheory.com&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?perlfaq4#How_do_I_determine_whether_a_scalar_is_anumber/whole/integer/float?" class="podlinkpod"
>perlfaq4</a> lists the most of the regular expressions used to identify the different numeric types used in this module.</p>

<p><a href="/perldoc?String%3A%3AChecker" class="podlinkpod"
>String::Checker</a> also does some data type validation.</p>

<p><a href="/perldoc?String%3A%3AScanf" class="podlinkpod"
>String::Scanf</a> reimplements the C <code>sscanf()</code> function in perl, and also does data type validation and conversion.</p>

<p><a href="/perldoc?Regexp%3A%3ACommon" class="podlinkpod"
>Regexp::Common</a> contains many useful common regular expressions (surprise!), including some that can be used to identify data types.</p>

<p>Arthur Bergman&#39;s <a href="/perldoc?types" class="podlinkpod"
>types</a> pragma, offers compile-time data types for Perl 5.8.0. The data types include int, float, and string. I highly recommend using this prgrma for fast, static data types.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2002-2011, David E. Wheeler. Some Rights Reserved.</p>

<p>This module is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78280 Uploads, 24725 Distributions
106010 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 04:23:48 2012 GMT (0.396929025650024) @cpansearch1 -->
 </body>
</html>
