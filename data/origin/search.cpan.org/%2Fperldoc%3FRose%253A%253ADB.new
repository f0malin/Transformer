<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Rose::DB - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Rose-DB",3]);
    _gaq.push(["_setCustomVar",5,"Release","Rose-DB-0.766",3]);
    _gaq.push(["_setCustomVar",3,"Module","Rose::DB",3]);
    _gaq.push(["_setCustomVar",1,"Author","JSIRACUSA",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Rose::DB">permalink</a></div>
  <a href="/~jsiracusa/">John Siracusa</a> &gt;
  <a href="/~jsiracusa/Rose-DB-0.766/">Rose-DB-0.766</a> &gt;
  Rose::DB
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/fecd7c77c5fbb31ee6bc6b3566e87142?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/J/JS/JSIRACUSA/Rose-DB-0.766.tar.gz">Rose-DB-0.766.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Rose%3A%3ADB;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~JSIRACUSA/Rose-DB-0.766/lib/Rose/DB.pm">Annotate this POD
</a></p>
     <p style="text-align:right"><a href="http://rose.googlecode.com/">Website</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?Rose%3A%3ADB%3A%3AObject">Rose::DB::Object</a><br>
<a href="/perldoc?CGI%3A%3AApplication">CGI::Application</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?SQL%3A%3AAbstract">SQL::Abstract</a><br>
<a href="/perldoc?Class%3A%3ADBI%3A%3Amysql">Class::DBI::mysql</a><br>
<a href="/perldoc?DBD%3A%3AODBC">DBD::ODBC</a><br>
<a href="/perldoc?HTML%3A%3AMason">HTML::Mason</a><br>
<a href="/perldoc?DBD%3A%3AAnyData">DBD::AnyData</a><br>
<a href="/perldoc?DBD%3A%3Amysql">DBD::mysql</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Rose%3A%3ADB">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=Rose-DB">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.766 &nbsp;
<span class="noprint">
  <a href="/src/JSIRACUSA/Rose-DB-0.766/lib/Rose/DB.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#DATABASE_SUPPORT'>DATABASE SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#FEATURES'>FEATURES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Data_Source_Abstraction'>Data Source Abstraction</a>
    <li class='indexItem indexItem2'><a href='#Database_Handle_Life-Cycle_Management'>Database Handle Life-Cycle Management</a>
    <li class='indexItem indexItem2'><a href='#Vendor-Specific_Column_Value_Parsing_and_Formatting'>Vendor-Specific Column Value Parsing and Formatting</a>
    <li class='indexItem indexItem2'><a href='#High-Level_Transaction_Support'>High-Level Transaction Support</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SUBCLASSING'>SUBCLASSING</a>
  <li class='indexItem indexItem1'><a href='#SERIALIZATION'>SERIALIZATION</a>
  <li class='indexItem indexItem1'><a href='#ENVIRONMENT'>ENVIRONMENT</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#ROSEDB_DEVINIT'>ROSEDB_DEVINIT</a>
    <li class='indexItem indexItem2'><a href='#ROSEDBRC'>ROSEDBRC</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CLASS_METHODS'>CLASS METHODS</a>
  <li class='indexItem indexItem1'><a href='#CONSTRUCTORS'>CONSTRUCTORS</a>
  <li class='indexItem indexItem1'><a href='#OBJECT_METHODS'>OBJECT METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Data_Source_Configuration'>Data Source Configuration</a>
    <li class='indexItem indexItem2'><a href='#Value_Parsing_and_Formatting'>Value Parsing and Formatting</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#DEVELOPMENT_POLICY'>DEVELOPMENT POLICY</a>
  <li class='indexItem indexItem1'><a href='#SUPPORT'>SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#CONTRIBUTORS'>CONTRIBUTORS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#LICENSE'>LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Rose::DB - A DBI wrapper and abstraction layer.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  package My::DB;

  use Rose::DB;
  our @ISA = qw(Rose::DB);

  My::DB-&#62;register_db(
    domain   =&#62; &#39;development&#39;,
    type     =&#62; &#39;main&#39;,
    driver   =&#62; &#39;Pg&#39;,
    database =&#62; &#39;dev_db&#39;,
    host     =&#62; &#39;localhost&#39;,
    username =&#62; &#39;devuser&#39;,
    password =&#62; &#39;mysecret&#39;,
    server_time_zone =&#62; &#39;UTC&#39;,
  );

  My::DB-&#62;register_db(
    domain   =&#62; &#39;production&#39;,
    type     =&#62; &#39;main&#39;,
    driver   =&#62; &#39;Pg&#39;,
    database =&#62; &#39;big_db&#39;,
    host     =&#62; &#39;dbserver.acme.com&#39;,
    username =&#62; &#39;dbadmin&#39;,
    password =&#62; &#39;prodsecret&#39;,
    server_time_zone =&#62; &#39;UTC&#39;,
  );

  My::DB-&#62;default_domain(&#39;development&#39;);
  My::DB-&#62;default_type(&#39;main&#39;);
  ...

  $db = My::DB-&#62;new;

  my $dbh = $db-&#62;dbh or die $db-&#62;error;

  $db-&#62;begin_work or die $db-&#62;error;
  $dbh-&#62;do(...)   or die $db-&#62;error;
  $db-&#62;commit     or die $db-&#62;error;

  $db-&#62;do_transaction(sub
  {
    $dbh-&#62;do(...);
    $sth = $dbh-&#62;prepare(...);
    $sth-&#62;execute(...);
    while($sth-&#62;fetch) { ... }
    $dbh-&#62;do(...);
  }) 
  or die $db-&#62;error;

  $dt  = $db-&#62;parse_timestamp(&#39;2001-03-05 12:34:56.123&#39;);
  $val = $db-&#62;format_timestamp($dt);

  $dt  = $db-&#62;parse_datetime(&#39;2001-03-05 12:34:56&#39;);
  $val = $db-&#62;format_datetime($dt);

  $dt  = $db-&#62;parse_date(&#39;2001-03-05&#39;);
  $val = $db-&#62;format_date($dt);

  $bit = $db-&#62;parse_bitfield(&#39;0x0AF&#39;, 32);
  $val = $db-&#62;format_bitfield($bit);

  ...</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> is a wrapper and abstraction layer for <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a>-related functionality. A <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> object &#34;has a&#34; <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> object; it is not a subclass of <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a>.</p>

<p>Please see the <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Tutorial.pod" class="podlinkpod"
>tutorial</a> (perldoc Rose::DB::Tutorial) for an example usage scenario that reflects &#34;best practices&#34; for this module.</p>

<p><b>Tip:</b> Are you looking for an object-relational mapper (ORM)? If so, please see the <a href="/perldoc?Rose%3A%3ADB%3A%3AObject" class="podlinkpod"
>Rose::DB::Object</a> module. <a href="/perldoc?Rose%3A%3ADB%3A%3AObject" class="podlinkpod"
>Rose::DB::Object</a> is an ORM that uses this module to manage its database connections. <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> alone is simply a data source abstraction layer; it is not an ORM.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DATABASE_SUPPORT"
>DATABASE SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> currently supports the following <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database drivers:</p>

<pre class="sh_perl">    DBD::Pg       (PostgreSQL)
    DBD::mysql    (MySQL)
    DBD::SQLite   (SQLite)
    DBD::Informix (Informix)
    DBD::Oracle   (Oracle)</pre>

<p><a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> will attempt to service an unsupported database using a <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Generic.pm" class="podlinkpod"
>generic</a> implementation that may or may not work. Support for more drivers may be added in the future. Patches are welcome.</p>

<p>All database-specific behavior is contained and documented in the subclasses of <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>. <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>&#39;s constructor method (<a href="#new" class="podlinkpod"
>new()</a>) returns a database-specific subclass of <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>, chosen based on the <a href="#driver" class="podlinkpod"
>driver</a> value of the selected <a href="#Data_Source_Abstraction" class="podlinkpod"
>data source</a>. The default mapping of databases to <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> subclasses is:</p>

<pre class="sh_perl">    DBD::Pg       -&#62; Rose::DB::Pg
    DBD::mysql    -&#62; Rose::DB::MySQL
    DBD::SQLite   -&#62; Rose::DB::SQLite
    DBD::Informix -&#62; Rose::DB::Informix
    DBD::Oracle   -&#62; Rose::DB::Oracle</pre>

<p>This mapping can be changed using the <a href="#driver_class" class="podlinkpod"
>driver_class</a> class method.</p>

<p>The <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> object method documentation found here defines the purpose of each method, as well as the default behavior of the method if it is not overridden by a subclass. You must read the subclass documentation to learn about behaviors that are specific to each type of database.</p>

<p>Subclasses may also add methods that do not exist in the parent class, of course. This is yet another reason to read the documentation for the subclass that corresponds to your data source&#39;s database software.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FEATURES"
>FEATURES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The basic features of <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> are as follows.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Data_Source_Abstraction"
>Data Source Abstraction</a></h2>

<p>Instead of dealing with &#34;databases&#34; that exist on &#34;hosts&#34; or are located via some vendor-specific addressing scheme, <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> deals with &#34;logical&#34; data sources. Each logical data source is currently backed by a single &#34;physical&#34; database (basically a single <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> connection).</p>

<p>Multiplexing, fail-over, and other more complex relationships between logical data sources and physical databases are not part of <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>. Some basic types of fail-over may be added to <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> in the future, but right now the mapping is strictly one-to-one. (I&#39;m also currently inclined to encourage multiplexing functionality to exist in a layer above <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>, rather than within it or in a subclass of it.)</p>

<p>The driver type of the data source determines the functionality of all methods that do vendor-specific things (e.g., <a href="#Vendor-Specific_Column_Value_Parsing_and_Formatting" class="podlinkpod"
>column value parsing and formatting</a>).</p>

<p><a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> identifies data sources using a two-level namespace made of a &#34;domain&#34; and a &#34;type&#34;. Both are arbitrary strings. If left unspecified, the default domain and default type (accessible via <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>&#39;s <a href="#default_domain" class="podlinkpod"
>default_domain</a> and <a href="#default_type" class="podlinkpod"
>default_type</a> class methods) are assumed.</p>

<p>There are many ways to use the two-level namespace, but the most common is to use the domain to represent the current environment (e.g., &#34;development&#34;, &#34;staging&#34;, &#34;production&#34;) and then use the type to identify the logical data source within that environment (e.g., &#34;report&#34;, &#34;main&#34;, &#34;archive&#34;)</p>

<p>A typical deployment scenario will set the default domain using the <a href="#default_domain" class="podlinkpod"
>default_domain</a> class method as part of the configure/install process. Within application code, <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> objects can be constructed by specifying type alone:</p>

<pre class="sh_perl">    $main_db    = Rose::DB-&#62;new(type =&#62; &#39;main&#39;);
    $archive_db = Rose::DB-&#62;new(type =&#62; &#39;archive&#39;);</pre>

<p>If there is only one database type, then all <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> objects can be instantiated with a bare constructor call like this:</p>

<pre class="sh_perl">    $db = Rose::DB-&#62;new;</pre>

<p>Again, remember that this is just one of many possible uses of domain and type. Arbitrarily complex scenarios can be created by nesting namespaces within one or both parameters (much like how Perl uses &#34;::&#34; to create a multi-level namespace from single strings).</p>

<p>The important point is the abstraction of data sources so they can be identified and referred to using a vocabulary that is entirely independent of the actual DSN (data source names) used by <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> behind the scenes.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Database_Handle_Life-Cycle_Management"
>Database Handle Life-Cycle Management</a></h2>

<p>When a <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> object is destroyed while it contains an active <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle, the handle is explicitly disconnected before destruction. <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> supports a simple retain/release reference-counting system which allows a database handle to out-live its parent <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> object.</p>

<p>In the simplest case, <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> could be used for its data source abstractions features alone. For example, transiently creating a <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> and then retaining its <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle before it is destroyed:</p>

<pre class="sh_perl">    $main_dbh = Rose::DB-&#62;new(type =&#62; &#39;main&#39;)-&#62;retain_dbh 
                  or die Rose::DB-&#62;error;

    $aux_dbh  = Rose::DB-&#62;new(type =&#62; &#39;aux&#39;)-&#62;retain_dbh  
                  or die Rose::DB-&#62;error;</pre>

<p>If the database handle was simply extracted via the <a href="#dbh" class="podlinkpod"
>dbh</a> method instead of retained with <a href="#retain_dbh" class="podlinkpod"
>retain_dbh</a>, it would be disconnected by the time the statement completed.</p>

<pre class="sh_perl">    # WRONG: $dbh will be disconnected immediately after the assignment!
    $dbh = Rose::DB-&#62;new(type =&#62; &#39;main&#39;)-&#62;dbh or die Rose::DB-&#62;error;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Vendor-Specific_Column_Value_Parsing_and_Formatting"
>Vendor-Specific Column Value Parsing and Formatting</a></h2>

<p>Certain semantically identical column types are handled differently in different databases. Date and time columns are good examples. Although many databases store month, day, year, hours, minutes, and seconds using a &#34;datetime&#34; column type, there will likely be significant differences in how each of those databases expects to receive such values, and how they&#39;re returned.</p>

<p><a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> is responsible for converting the wide range of vendor-specific column values for a particular column type into a single form that is convenient for use within Perl code. <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> also handles the opposite task, taking input from the Perl side and converting it into the appropriate format for a specific database. Not all column types that exist in the supported databases are handled by <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>, but support will expand in the future.</p>

<p>Many column types are specific to a single database and do not exist elsewhere. When it is reasonable to do so, vendor-specific column types may be &#34;emulated&#34; by <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> for the benefit of other databases. For example, an ARRAY value may be stored as a specially formatted string in a VARCHAR field in a database that does not have a native ARRAY column type.</p>

<p><a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> does <b>NOT</b> attempt to present a unified column type system, however. If a column type does not exist in a particular kind of database, there should be no expectation that <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> will be able to parse and format that value type on behalf of that database.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="High-Level_Transaction_Support"
>High-Level Transaction Support</a></h2>

<p>Transactions may be started, committed, and rolled back in a variety of ways using the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle directly. <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> provides wrappers to do the same things, but with different error handling and return values. There&#39;s also a method (<a href="#do_transaction" class="podlinkpod"
>do_transaction</a>) that will execute arbitrary code within a single transaction, automatically handling rollback on failure and commit on success.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUBCLASSING"
>SUBCLASSING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Subclassing is <b>strongly encouraged</b> and generally works as expected. (See the <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Tutorial.pod" class="podlinkpod"
>tutorial</a> for a complete example.) There is, however, the question of how class data is shared with subclasses. Here&#39;s how it works for the various pieces of class data.</p>

<dl>
<dt><a name='alias_db'></a><a name="alias_db,_modify_db,_register_db,_unregister_db,_unregister_domain"
><b>alias_db</b>, <b>modify_db</b>, <b>register_db</b>, <b>unregister_db</b>, <b>unregister_domain</b></a></dt>

<dd>
<p>By default, all subclasses share the same data source &#34;registry&#34; with <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>. To provide a private registry for your subclass (the recommended approach), see the example in the documentation for the <a href="#registry" class="podlinkpod"
>registry</a> method below.</p>

<dt><a name='default_domain'></a><a name="default_domain,_default_type"
><b>default_domain</b>, <b>default_type</b></a></dt>

<dd>
<p>If called with no arguments, and if the attribute was never set for this class, then a left-most, breadth-first search of the parent classes is initiated. The value returned is taken from first parent class encountered that has ever had this attribute set.</p>

<p>(These attributes use the <a href="/perldoc?Rose%3A%3AClass%3A%3AMakeMethods%3A%3AGeneric#inheritable_scalar" class="podlinkpod"
>inheritable_scalar</a> method type as defined in <a href="/perldoc?Rose%3A%3AClass%3A%3AMakeMethods%3A%3AGeneric" class="podlinkpod"
>Rose::Class::MakeMethods::Generic</a>.)</p>

<dt><a name='driver_class'></a><a name="driver_class,_default_connect_options"
><b>driver_class, default_connect_options</b></a></dt>

<dd>
<p>These hashes of attributes are inherited by subclasses using a one-time, shallow copy from a superclass. Any subclass that accesses or manipulates the hash in any way will immediately get its own private copy of the hash <i>as it exists in the superclass at the time of the access or manipulation</i>.</p>

<p>The superclass from which the hash is copied is the closest (&#34;least super&#34;) class that has ever accessed or manipulated this hash. The copy is a &#34;shallow&#34; copy, duplicating only the keys and values. Reference values are not recursively copied.</p>

<p>Setting to hash to undef (using the &#39;reset&#39; interface) will cause it to be re-copied from a superclass the next time it is accessed.</p>

<p>(These attributes use the <a href="/perldoc?Rose%3A%3AClass%3A%3AMakeMethods%3A%3AGeneric#inheritable_hash" class="podlinkpod"
>inheritable_hash</a> method type as defined in <a href="/perldoc?Rose%3A%3AClass%3A%3AMakeMethods%3A%3AGeneric" class="podlinkpod"
>Rose::Class::MakeMethods::Generic</a>.)</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SERIALIZATION"
>SERIALIZATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> object may contain a <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle, and <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handles usually don&#39;t survive the serialize process intact. <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> objects also hide database passwords inside closures, which also don&#39;t serialize well. In order for a <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> object to survive serialization, custom hooks are required.</p>

<p><a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> has hooks for the <a href="/perldoc?Storable" class="podlinkpod"
>Storable</a> serialization module, but there is an important caveat. Since <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> objects are blessed into a dynamically generated class (derived from the <a href="#driver_class" class="podlinkpod"
>driver class</a>), you must load your <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>-derived class with all its registered data sources before you can successfully <a href="/perldoc?Storable#thaw" class="podlinkpod"
>thaw</a> a <a href="/perldoc?Storable#freeze" class="podlinkpod"
>frozen</a> <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>-derived object. Here&#39;s an example.</p>

<p>Imagine that this is your <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>-derived class:</p>

<pre class="sh_perl">    package My::DB;

    use Rose::DB;
    our @ISA = qw(Rose::DB);

    My::DB-&#62;register_db(
      domain   =&#62; &#39;dev&#39;,
      type     =&#62; &#39;main&#39;,
      driver   =&#62; &#39;Pg&#39;,
      ...
    );

    My::DB-&#62;register_db(
      domain   =&#62; &#39;prod&#39;,
      type     =&#62; &#39;main&#39;,
      driver   =&#62; &#39;Pg&#39;,
      ...
    );

    My::DB-&#62;default_domain(&#39;dev&#39;);
    My::DB-&#62;default_type(&#39;main&#39;);</pre>

<p>In one program, a <code>My::DB</code> object is <a href="/perldoc?Storable#freeze" class="podlinkpod"
>frozen</a> using <a href="/perldoc?Storable" class="podlinkpod"
>Storable</a>:</p>

<pre class="sh_perl">    # my_freeze_script.pl

    use My::DB;
    use Storable qw(nstore);

    # Create My::DB object
    $db = My::DB-&#62;new(domain =&#62; &#39;dev&#39;, type =&#62; &#39;main&#39;);

    # Do work...
    $db-&#62;dbh-&#62;db(&#39;CREATE TABLE some_table (...)&#39;);
    ...

    # Serialize $db and store it in frozen_data_file
    nstore($db, &#39;frozen_data_file&#39;);</pre>

<p>Now another program wants to <a href="/perldoc?Storable#thaw" class="podlinkpod"
>thaw</a> out that <code>My::DB</code> object and use it. To do so, it must be sure to load the <a href="/perldoc?My%3A%3ADB" class="podlinkpod"
>My::DB</a> module (which registers all its data sources when loaded) <i>before</i> attempting to deserialize the <code>My::DB</code> object serialized by <code>my_freeze_script.pl</code>.</p>

<pre class="sh_perl">    # my_thaw_script.pl

    # IMPORTANT: load db modules with all data sources registered before
    #            attempting to deserialize objects of this class.
    use My::DB; 

    use Storable qw(retrieve);

    # Retrieve frozen My::DB object from frozen_data_file
    $db = retrieve(&#39;frozen_data_file&#39;);

    # Do work...
    $db-&#62;dbh-&#62;db(&#39;DROP TABLE some_table&#39;);
    ...</pre>

<p>Note that this rule about loading a <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>-derived class with all its data sources registered prior to deserializing such an object only applies if the serialization was done in a different process. If you <a href="/perldoc?Storable#freeze" class="podlinkpod"
>freeze</a> and <a href="/perldoc?Storable#thaw" class="podlinkpod"
>thaw</a> within the same process, you don&#39;t have to worry about it.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ENVIRONMENT"
>ENVIRONMENT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There are two ways to alter the initial <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> data source registry.</p>

<ul>
<li>The ROSEDB_DEVINIT file or module, which can add, modify, or remove data sources and alter the default <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm#domain" class="podlinkpod"
>domain</a> and <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm#type" class="podlinkpod"
>type</a>.</li>

<li>The ROSEDBRC file, which can modify existing data sources.</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ROSEDB_DEVINIT"
>ROSEDB_DEVINIT</a></h2>

<p>The <code>ROSEDB_DEVINIT</code> file or module is used during development, usually to set up data sources for a particular developer&#39;s database or project. If the <code>ROSEDB_DEVINIT</code> environment variable is set, it should be the name of a Perl module or file. If it is a Perl module and that module has a <code>fixup()</code> subroutine, it will be called as a class method after the module is loaded.</p>

<p>If the <code>ROSEDB_DEVINIT</code> environment variable is not set, or if the specified file does not exist or has errors, then it defaults to the package name <code>Rose::DB::Devel::Init::username</code>, where &#34;username&#34; is the account name of the current user.</p>

<p><b>Note:</b> if the <a href="/perldoc?perlfunc#getpwuid" class="podlinkpod"
>getpwuid()</a> function is unavailable (as is often the case on Windows versions of perl) then this default does not apply and the loading of the module named <code>Rose::DB::Devel::Init::username</code> is not attempted.</p>

<p>The <code>ROSEDB_DEVINIT</code> file or module may contain arbitrary Perl code which will be loaded and evaluated in the context of <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>. Example:</p>

<pre class="sh_perl">    Rose::DB-&#62;default_domain(&#39;development&#39;);

    Rose::DB-&#62;modify_db(domain   =&#62; &#39;development&#39;, 
                        type     =&#62; &#39;main_db&#39;,
                        database =&#62; &#39;main&#39;,
                        username =&#62; &#39;jdoe&#39;,
                        password =&#62; &#39;mysecret&#39;);

    1;</pre>

<p>Remember to end the file with a true value.</p>

<p>The <code>ROSEDB_DEVINIT</code> file or module must be read explicitly by calling the <a href="#auto_load_fixups" class="podlinkpod"
>auto_load_fixups</a> class method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ROSEDBRC"
>ROSEDBRC</a></h2>

<p>The <code>ROSEDBRC</code> file contains configuration &#34;fix-up&#34; information. This file is most often used to dynamically set passwords that are too sensitive to be included directly in the source code of a <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>-derived class.</p>

<p>The path to the fix-up file is determined by the <code>ROSEDBRC</code> environment variable. If this variable is not set, or if the file it points to does not exist, then it defaults to <code>/etc/rosedbrc</code>.</p>

<p>This file should be in YAML format. To read this file, you must have either <a href="/perldoc?YAML%3A%3ASyck" class="podlinkpod"
>YAML::Syck</a> or some reasonably modern version of <a href="/perldoc?YAML" class="podlinkpod"
>YAML</a> installed (0.66 or later recommended). <a href="/perldoc?YAML%3A%3ASyck" class="podlinkpod"
>YAML::Syck</a> will be preferred if both are installed.</p>

<p>The <code>ROSEDBRC</code> file&#39;s contents have the following structure:</p>

<pre class="sh_perl">    ---
    somedomain:
        sometype:
            somemethod: somevalue
    ---
    otherdomain:
        othertype:
            othermethod: othervalue</pre>

<p>Each entry modifies an existing registered data source. Any valid <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Registry/Entry.pm" class="podlinkpod"
>registry entry</a> object method can be used (in place of &#34;somemethod&#34; and &#34;othermethod&#34; in the YAML example above).</p>

<p>This file must be read explicitly by calling the <a href="#auto_load_fixups" class="podlinkpod"
>auto_load_fixups</a> class method <i>after</i> setting up all your data sources. Example:</p>

<pre class="sh_perl">    package My::DB;

    use Rose::DB;
    our @ISA = qw(Rose::DB);

    __PACKAGE__-&#62;use_private_registry;

    # Register all data sources
    __PACKAGE__-&#62;register_db(
      domain   =&#62; &#39;development&#39;,
      type     =&#62; &#39;main&#39;,
      driver   =&#62; &#39;Pg&#39;,
      database =&#62; &#39;dev_db&#39;,
      host     =&#62; &#39;localhost&#39;,
      username =&#62; &#39;devuser&#39;,
      password =&#62; &#39;mysecret&#39;,
    );

    ...

    # Load fix-up files, if any
    __PACKAGE__-&#62;auto_load_fixups;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CLASS_METHODS"
>CLASS METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='alias_db'></a><a name="alias_db_PARAMS"
><b>alias_db PARAMS</b></a></dt>

<dd>
<p>Make one data source an alias for another by pointing them both to the same registry entry. PARAMS are name/value pairs that must include domain and type values for both the source and alias parameters. Example:</p>

<pre class="sh_perl">    Rose::DB-&#62;alias_db(source =&#62; { domain =&#62; &#39;dev&#39;, type =&#62; &#39;main&#39; },
                       alias  =&#62; { domain =&#62; &#39;dev&#39;, type =&#62; &#39;aux&#39; });</pre>

<p>This makes the &#34;dev/aux&#34; data source point to the same registry entry as the &#34;dev/main&#34; data source. Modifications to either registry entry (via <a href="#modify_db" class="podlinkpod"
>modify_db</a>) will be reflected in both.</p>

<dt><a name="auto_load_fixups"
><b>auto_load_fixups</b></a></dt>

<dd>
<p>Attempt to load both the YAML-based <a href="#ROSEDBRC" class="podlinkpod"
>ROSEDBRC</a> and Perl-based <a href="#ROSEDB_DEVINIT" class="podlinkpod"
>ROSEDB_DEVINIT</a> fix-up files, if any exist, in that order. The <a href="#ROSEDBRC" class="podlinkpod"
>ROSEDBRC</a> file will modify the data source <a href="#registry" class="podlinkpod"
>registry</a> of the calling class. See the <a href="#ENVIRONMENT" class="podlinkpod"
>ENVIRONMENT</a> section above for more information.</p>

<dt><a name='db_cache'></a><a name="db_cache_[CACHE]"
><b>db_cache [CACHE]</b></a></dt>

<dd>
<p>Get or set the <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Cache.pm" class="podlinkpod"
>Rose::DB::Cache</a>-derived object used to cache <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> objects on behalf of this class. If no such object exists, a new cache object of <a href="#db_cache_class" class="podlinkpod"
>db_cache_class</a> class will be created, stored, and returned.</p>

<dt><a name='db_cache_class'></a><a name="db_cache_class_[CLASS]"
><b>db_cache_class [CLASS]</b></a></dt>

<dd>
<p>Get or set the name of the <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Cache.pm" class="podlinkpod"
>Rose::DB::Cache</a>-derived class used to cache <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> objects on behalf of this class. The default value is <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Cache.pm" class="podlinkpod"
>Rose::DB::Cache</a>.</p>

<dt><a name='db_exists'></a><a name="db_exists_PARAMS"
><b>db_exists PARAMS</b></a></dt>

<dd>
<p>Returns true of the data source specified by PARAMS is registered, false otherwise. PARAMS are name/value pairs for <code>domain</code> and <code>type</code>. If they are omitted, they default to <a href="#default_domain" class="podlinkpod"
>default_domain</a> and <a href="#default_type" class="podlinkpod"
>default_type</a>, respectively. If default values do not exist, a fatal error will occur. If a single value is passed instead of name/value pairs, it is taken as the value of the <code>type</code> parameter.</p>

<dt><a name='default_connect_options'></a><a name="default_connect_options_[HASHREF_|_PAIRS]"
><b>default_connect_options [HASHREF | PAIRS]</b></a></dt>

<dd>
<p>Get or set the default <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> connect options hash. If a reference to a hash is passed, it replaces the default connect options hash. If a series of name/value pairs are passed, they are added to the default connect options hash.</p>

<p>The default set of default connect options is:</p>

<pre class="sh_perl">    AutoCommit =&#62; 1,
    RaiseError =&#62; 1,
    PrintError =&#62; 1,
    ChopBlanks =&#62; 1,
    Warn       =&#62; 0,</pre>

<p>See the <a href="#connect_options" class="podlinkpod"
>connect_options</a> object method for more information on how the default connect options are used.</p>

<dt><a name='default_domain'></a><a name="default_domain_[DOMAIN]"
><b>default_domain [DOMAIN]</b></a></dt>

<dd>
<p>Get or set the default data source domain. See the <a href="#Data_Source_Abstraction" class="podlinkpod"
>&#34;Data Source Abstraction&#34;</a> section for more information on data source domains.</p>

<dt><a name='default_type'></a><a name="default_type_[TYPE]"
><b>default_type [TYPE]</b></a></dt>

<dd>
<p>Get or set the default data source type. See the <a href="#Data_Source_Abstraction" class="podlinkpod"
>&#34;Data Source Abstraction&#34;</a> section for more information on data source types.</p>

<dt><a name='driver_class'></a><a name="driver_class_DRIVER_[,_CLASS]"
><b>driver_class DRIVER [, CLASS]</b></a></dt>

<dd>
<p>Get or set the subclass used for DRIVER. The DRIVER argument is automatically converted to lowercase. (Driver names are effectively case-insensitive.)</p>

<pre class="sh_perl">    $class = Rose::DB-&#62;driver_class(&#39;Pg&#39;);      # get
    Rose::DB-&#62;driver_class(&#39;pg&#39; =&#62; &#39;MyDB::Pg&#39;); # set</pre>

<p>The default mapping of driver names to class names is as follows:</p>

<pre class="sh_perl">    mysql    -&#62; Rose::DB::MySQL
    pg       -&#62; Rose::DB::Pg
    informix -&#62; Rose::DB::Informix
    sqlite   -&#62; Rose::DB::SQLite
    oracle   -&#62; Rose::DB::Oracle
    generic  -&#62; Rose::DB::Generic</pre>

<p>The class mapped to the special driver name &#34;generic&#34; will be used for any driver name that does not have an entry in the map.</p>

<p>See the documentation for the <a href="#new" class="podlinkpod"
>new</a> method for more information on how the driver influences the class of objects returned by the constructor.</p>

<dt><a name='default_keyword_function_calls'></a><a name="default_keyword_function_calls_[BOOL]"
><b>default_keyword_function_calls [BOOL]</b></a></dt>

<dd>
<p>Get or set a boolean default value for the <a href="#keyword_function_calls" class="podlinkpod"
>keyword_function_calls</a> object attribute. Defaults to the value of the <code>ROSE_DB_KEYWORD_FUNCTION_CALLS</code> environment variable, it set to a defined value, or false otherwise.</p>

<dt><a name='modify_db'></a><a name="modify_db_PARAMS"
><b>modify_db PARAMS</b></a></dt>

<dd>
<p>Modify a data source, setting the attributes specified in PARAMS, where PARAMS are name/value pairs. Any <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> object method that sets a <a href="#Data_Source_Configuration" class="podlinkpod"
>data source configuration value</a> is a valid parameter name.</p>

<pre class="sh_perl">    # Set new username for data source identified by domain and type
    Rose::DB-&#62;modify_db(domain   =&#62; &#39;test&#39;, 
                        type     =&#62; &#39;main&#39;,
                        username =&#62; &#39;tester&#39;);</pre>

<p>PARAMS should include values for both the <code>type</code> and <code>domain</code> parameters since these two attributes are used to identify the data source. If they are omitted, they default to <a href="#default_domain" class="podlinkpod"
>default_domain</a> and <a href="#default_type" class="podlinkpod"
>default_type</a>, respectively. If default values do not exist, a fatal error will occur. If there is no data source defined for the specified <code>type</code> and <code>domain</code>, a fatal error will occur.</p>

<dt><a name="prepare_cache_for_apache_fork"
><b>prepare_cache_for_apache_fork</b></a></dt>

<dd>
<p>This is a convenience method that is equivalent to the following call:</p>

<pre class="sh_perl">    Rose::DB-&#62;db_cache-&#62;prepare_for_apache_fork()</pre>

<p>Any arguments passed to this method are passed on to the call to the <a href="#db_cache" class="podlinkpod"
>db_cache</a>&#39;s <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Cache.pm#prepare_for_apache_fork" class="podlinkpod"
>prepare_for_apache_fork</a> method.</p>

<p>Please read the <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Cache.pm" class="podlinkpod"
>Rose::DB::Cache</a> documentation, particularly the documentation for the <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Cache.pm#use_cache_during_apache_startup" class="podlinkpod"
>use_cache_during_apache_startup</a> method for more information.</p>

<dt><a name='register_db'></a><a name="register_db_PARAMS"
><b>register_db PARAMS</b></a></dt>

<dd>
<p>Registers a new data source with the attributes specified in PARAMS, where PARAMS are name/value pairs. Any <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> object method that sets a <a href="#Data_Source_Configuration" class="podlinkpod"
>data source configuration value</a> is a valid parameter name.</p>

<p>PARAMS <b>must</b> include a value for the <code>driver</code> parameter. If the <code>type</code> or <code>domain</code> parameters are omitted or undefined, they default to the return values of the <a href="#default_type" class="podlinkpod"
>default_type</a> and <a href="#default_domain" class="podlinkpod"
>default_domain</a> class methods, respectively.</p>

<p>The <code>type</code> and <code>domain</code> are used to identify the data source. If either one is missing, a fatal error will occur. See the <a href="#Data_Source_Abstraction" class="podlinkpod"
>&#34;Data Source Abstraction&#34;</a> section for more information on data source types and domains.</p>

<p>The <code>driver</code> is used to determine which class objects will be blessed into by the <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> constructor, <a href="#new" class="podlinkpod"
>new</a>. The driver name is automatically converted to lowercase. If it is missing, a fatal error will occur.</p>

<p>In most deployment scenarios, <a href="#register_db" class="podlinkpod"
>register_db</a> is called early in the compilation process to ensure that the registered data sources are available when the &#34;real&#34; code runs.</p>

<p>Database registration can be included directly in your <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> subclass. This is the recommended approach. Example:</p>

<pre class="sh_perl">    package My::DB;

    use Rose::DB;
    our @ISA = qw(Rose::DB);

    # Use a private registry for this class
    __PACKAGE__-&#62;use_private_registry;

    # Register data sources
    My::DB-&#62;register_db(
      domain   =&#62; &#39;development&#39;,
      type     =&#62; &#39;main&#39;,
      driver   =&#62; &#39;Pg&#39;,
      database =&#62; &#39;dev_db&#39;,
      host     =&#62; &#39;localhost&#39;,
      username =&#62; &#39;devuser&#39;,
      password =&#62; &#39;mysecret&#39;,
    );

    My::DB-&#62;register_db(
      domain   =&#62; &#39;production&#39;,
      type     =&#62; &#39;main&#39;,
      driver   =&#62; &#39;Pg&#39;,
      database =&#62; &#39;big_db&#39;,
      host     =&#62; &#39;dbserver.acme.com&#39;,
      username =&#62; &#39;dbadmin&#39;,
      password =&#62; &#39;prodsecret&#39;,
    );
    ...</pre>

<p>Another possible approach is to consolidate data source registration in a single module which is then <code>use</code>ed early on in the code path. For example, imagine a mod_perl web server environment:</p>

<pre class="sh_perl">    # File: MyCorp/DataSources.pm
    package MyCorp::DataSources;

    My::DB-&#62;register_db(
      domain   =&#62; &#39;development&#39;,
      type     =&#62; &#39;main&#39;,
      driver   =&#62; &#39;Pg&#39;,
      database =&#62; &#39;dev_db&#39;,
      host     =&#62; &#39;localhost&#39;,
      username =&#62; &#39;devuser&#39;,
      password =&#62; &#39;mysecret&#39;,
    );

    My::DB-&#62;register_db(
      domain   =&#62; &#39;production&#39;,
      type     =&#62; &#39;main&#39;,
      driver   =&#62; &#39;Pg&#39;,
      database =&#62; &#39;big_db&#39;,
      host     =&#62; &#39;dbserver.acme.com&#39;,
      username =&#62; &#39;dbadmin&#39;,
      password =&#62; &#39;prodsecret&#39;,
    );
    ...

    # File: /usr/local/apache/conf/startup.pl

    use My::DB; # your Rose::DB subclass
    use MyCorp::DataSources; # register all data sources
    ...</pre>

<p>Data source registration can happen at any time, of course, but it is most useful when all application code can simply assume that all the data sources are already registered. Doing the registration as early as possible (e.g., directly in your <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> subclass, or in a <code>startup.pl</code> file that is loaded from an apache/mod_perl web server&#39;s <code>httpd.conf</code> file) is the best way to create such an environment.</p>

<p>Note that the data source registry serves as an <i>initial</i> source of information for <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> objects. Once an object is instantiated, it is independent of the registry. Changes to an object are not reflected in the registry, and changes to the registry are not reflected in existing objects.</p>

<dt><a name='registry'></a><a name="registry_[REGISTRY]"
><b>registry [REGISTRY]</b></a></dt>

<dd>
<p>Get or set the <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Registry.pm" class="podlinkpod"
>Rose::DB::Registry</a>-derived object that manages and stores the data source registry. It defaults to an &#34;empty&#34; <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Registry.pm" class="podlinkpod"
>Rose::DB::Registry</a> object. Remember that setting a new registry will replace the existing registry and all the data sources registered in it.</p>

<p>Note that <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> subclasses will inherit the base class&#39;s <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Registry.pm" class="podlinkpod"
>Rose::DB::Registry</a> object and will therefore inherit all existing registry entries and share the same registry namespace as the base class. This may or may not be what you want.</p>

<p>In most cases, it&#39;s wise to give your subclass its own private registry if it inherits directly from <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>. To do that, just set a new registry object in your subclass. Example:</p>

<pre class="sh_perl">    package My::DB;

    use Rose::DB;
    our @ISA = qw(Rose::DB);

    # Create a private registry for this class:
    #
    # either explicitly:
    # use Rose::DB::Registry;
    # __PACKAGE__-&#62;registry(Rose::DB::Registry-&#62;new);
    #
    # or use the convenience method:
    __PACKAGE__-&#62;use_private_registry;
    ...</pre>

<p>Further subclasses of <code>My::DB</code> may then inherit its registry object, if desired, or may create their own private registries in the manner shown above.</p>

<dt><a name='unregister_db'></a><a name="unregister_db_PARAMS"
><b>unregister_db PARAMS</b></a></dt>

<dd>
<p>Unregisters the data source having the <code>type</code> and <code>domain</code> specified in PARAMS, where PARAMS are name/value pairs. Returns true if the data source was unregistered successfully, false if it did not exist in the first place. Example:</p>

<pre class="sh_perl">    Rose::DB-&#62;unregister_db(type =&#62; &#39;main&#39;, domain =&#62; &#39;test&#39;);</pre>

<p>PARAMS <b>must</b> include values for both the <code>type</code> and <code>domain</code> parameters since these two attributes are used to identify the data source. If either one is missing, a fatal error will occur.</p>

<p>Unregistering a data source removes all knowledge of it. This may be harmful to any existing <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> objects that are associated with that data source.</p>

<dt><a name='unregister_domain'></a><a name="unregister_domain_DOMAIN"
><b>unregister_domain DOMAIN</b></a></dt>

<dd>
<p>Unregisters an entire domain. Returns true if the domain was unregistered successfully, false if it did not exist in the first place. Example:</p>

<pre class="sh_perl">    Rose::DB-&#62;unregister_domain(&#39;test&#39;);</pre>

<p>Unregistering a domain removes all knowledge of all of the data sources that existed under it. This may be harmful to any existing <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> objects that are associated with any of those data sources.</p>

<dt><a name='use_cache_during_apache_startup'></a><a name="use_cache_during_apache_startup_[BOOL]"
><b>use_cache_during_apache_startup [BOOL]</b></a></dt>

<dd>
<p>This is a convenience method that is equivalent to the following call:</p>

<pre class="sh_perl">    Rose::DB-&#62;db_cache-&#62;use_cache_during_apache_startup(...)</pre>

<p>The boolean argument passed to this method is passed on to the call to the <a href="#db_cache" class="podlinkpod"
>db_cache</a>&#39;s <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Cache.pm#use_cache_during_apache_startup" class="podlinkpod"
>use_cache_during_apache_startup</a> method.</p>

<p>Please read the <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Cache.pm" class="podlinkpod"
>Rose::DB::Cache</a>&#39;s <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Cache.pm#use_cache_during_apache_startup" class="podlinkpod"
>use_cache_during_apache_startup</a> documentation for more information.</p>

<dt><a name="use_private_registry"
><b>use_private_registry</b></a></dt>

<dd>
<p>This method is used to give a class its own private <a href="#registry" class="podlinkpod"
>registry</a>. In other words, this:</p>

<pre class="sh_perl">    __PACKAGE__-&#62;use_private_registry;</pre>

<p>is roughly equivalent to this:</p>

<pre class="sh_perl">    use Rose::DB::Registry;
    __PACKAGE__-&#62;registry(Rose::DB::Registry-&#62;new);</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTORS"
>CONSTRUCTORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='new'></a><a name="new_PARAMS"
><b>new PARAMS</b></a></dt>

<dd>
<p>Constructs a new object based on PARAMS, where PARAMS are name/value pairs. Any object method is a valid parameter name. Example:</p>

<pre class="sh_perl">    $db = Rose::DB-&#62;new(type =&#62; &#39;main&#39;, domain =&#62; &#39;qa&#39;);</pre>

<p>If a single argument is passed to <a href="#new" class="podlinkpod"
>new</a>, it is used as the <code>type</code> value:</p>

<pre class="sh_perl">    $db = Rose::DB-&#62;new(type =&#62; &#39;aux&#39;); 
    $db = Rose::DB-&#62;new(&#39;aux&#39;); # same thing</pre>

<p>Each <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> object is associated with a particular data source, defined by the <a href="#type" class="podlinkpod"
>type</a> and <a href="#domain" class="podlinkpod"
>domain</a> values. If these are not part of PARAMS, then the default values are used. If you do not want to use the default values for the <a href="#type" class="podlinkpod"
>type</a> and <a href="#domain" class="podlinkpod"
>domain</a> attributes, you should specify them in the constructor PARAMS.</p>

<p>The default <a href="#type" class="podlinkpod"
>type</a> and <a href="#domain" class="podlinkpod"
>domain</a> can be set using the <a href="#default_type" class="podlinkpod"
>default_type</a> and <a href="#default_domain" class="podlinkpod"
>default_domain</a> class methods. See the <a href="#Data_Source_Abstraction" class="podlinkpod"
>&#34;Data Source Abstraction&#34;</a> section for more information on data sources.</p>

<p>Object attributes are set based on the <a href="#registry" class="podlinkpod"
>registry</a> entry specified by the <code>type</code> and <code>domain</code> parameters. This registry entry must exist or a fatal error will occur (with one exception; see below). Any additional PARAMS will override the values taken from the registry entry.</p>

<p>If <code>type</code> and <code>domain</code> parameters are not passed, but a <code>driver</code> parameter is passed, then a new &#34;empty&#34; object will be returned. Examples:</p>

<pre class="sh_perl">    # This is ok, even if no registered data sources exist
    $db = Rose::DB-&#62;new(driver =&#62; &#39;sqlite&#39;); </pre>

<p>The object returned by <a href="#new" class="podlinkpod"
>new</a> will be derived from a database-specific driver class, chosen based on the <a href="#driver" class="podlinkpod"
>driver</a> value of the selected data source. If there is no registered data source for the specified <a href="#type" class="podlinkpod"
>type</a> and <a href="#domain" class="podlinkpod"
>domain</a>, a fatal error will occur.</p>

<p>The default driver-to-class mapping is as follows:</p>

<pre class="sh_perl">    pg       -&#62; Rose::DB::Pg
    mysql    -&#62; Rose::DB::MySQL
    informix -&#62; Rose::DB::Informix
    oracle   -&#62; Rose::DB::Oracle
    sqlite   -&#62; Rose::DB::SQLite</pre>

<p>You can change this mapping with the <a href="#driver_class" class="podlinkpod"
>driver_class</a> class method.</p>

<dt><a name='new_or_cached'></a><a name="new_or_cached_PARAMS"
><b>new_or_cached PARAMS</b></a></dt>

<dd>
<p>Constructs or returns a <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> object based on PARAMS, where PARAMS are any name/value pairs that can be passed to the <a href="#new" class="podlinkpod"
>new</a> method. If the <a href="#db_cache" class="podlinkpod"
>db_cache</a>&#39;s <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Cache.pm#get_db" class="podlinkpod"
>get_db</a> method returns an existing <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> object that matches PARAMS, then it is returned. Otherwise, a <a href="#new" class="podlinkpod"
>new</a> <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> object is created, <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Cache.pm#set_db" class="podlinkpod"
>stored</a> in the <a href="#db_cache" class="podlinkpod"
>db_cache</a>, then returned.</p>

<p>See the <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Cache.pm" class="podlinkpod"
>Rose::DB::Cache</a> documentation to learn about the cache API and the default implementation.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OBJECT_METHODS"
>OBJECT METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name="begin_work"
><b>begin_work</b></a></dt>

<dd>
<p>Attempt to start a transaction by calling the <a href="/perldoc?DBI#begin_work" class="podlinkpod"
>begin_work</a> method on the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle.</p>

<p>If necessary, the database handle will be constructed and connected to the current data source. If this fails, undef is returned. If there is no registered data source for the current <code>type</code> and <code>domain</code>, a fatal error will occur.</p>

<p>If the &#34;AutoCommit&#34; database handle attribute is false, the handle is assumed to already be in a transaction and <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Constants.pm" class="podlinkpod"
>Rose::DB::Constants::IN_TRANSACTION</a> (-1) is returned. If the call to <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a>&#39;s <a href="/perldoc?DBI#begin_work" class="podlinkpod"
>begin_work</a> method succeeds, 1 is returned. If it fails, undef is returned.</p>

<dt><a name="commit"
><b>commit</b></a></dt>

<dd>
<p>Attempt to commit the current transaction by calling the <a href="/perldoc?DBI#commit" class="podlinkpod"
>commit</a> method on the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle. If the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle does not exist or is not connected, 0 is returned.</p>

<p>If the &#34;AutoCommit&#34; database handle attribute is true, the handle is assumed to not be in a transaction and <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/Constants.pm" class="podlinkpod"
>Rose::DB::Constants::IN_TRANSACTION</a> (-1) is returned. If the call to <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a>&#39;s <a href="/perldoc?DBI#commit" class="podlinkpod"
>commit</a> method succeeds, 1 is returned. If it fails, undef is returned.</p>

<dt><a name="connect"
><b>connect</b></a></dt>

<dd>
<p>Constructs and connects the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle for the current data source, calling <a href="#dbi_connect" class="podlinkpod"
>dbi_connect</a> to create a new <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle if none exists. If there is no registered data source for the current <a href="#type" class="podlinkpod"
>type</a> and <a href="#domain" class="podlinkpod"
>domain</a>, a fatal error will occur.</p>

<p>If any <a href="#post_connect_sql" class="podlinkpod"
>post_connect_sql</a> statement failed to execute, the database handle is disconnected and then discarded.</p>

<p>If the database handle returned by <a href="#dbi_connect" class="podlinkpod"
>dbi_connect</a> was originally connected by another <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>-derived object (e.g., if a subclass&#39;s custom implementation of <a href="#dbi_connect" class="podlinkpod"
>dbi_connect</a> calls <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a>&#39;s <a href="/perldoc?DBI#connect_cached" class="podlinkpod"
>connect_cached</a> method) then the <a href="#post_connect_sql" class="podlinkpod"
>post_connect_sql</a> statements will not be run, nor will any custom <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> attributes be applied (e.g., <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/MySQL.pm" class="podlinkpod"
>Rose::DB::MySQL</a>&#39;s <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB/MySQL.pm#mysql_enable_utf8" class="podlinkpod"
>mysql_enable_utf8</a> attribute).</p>

<p>Returns true if the database handle was connected successfully and all <a href="#post_connect_sql" class="podlinkpod"
>post_connect_sql</a> statements (if any) were run successfully, false otherwise.</p>

<dt><a name='connect_option'></a><a name="connect_option_NAME_[,_VALUE]"
><b>connect_option NAME [, VALUE]</b></a></dt>

<dd>
<p>Get or set a single connection option. Example:</p>

<pre class="sh_perl">    $val = $db-&#62;connect_option(&#39;RaiseError&#39;); # get
    $db-&#62;connect_option(AutoCommit =&#62; 1);     # set</pre>

<p>Connection options are name/value pairs that are passed in a hash reference as the fourth argument to the call to <a href="/perldoc?DBI#connect" class="podlinkpod"
>DBI-&#62;connect()</a>. See the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> documentation for descriptions of the various options.</p>

<dt><a name='connect_options'></a><a name="connect_options_[HASHREF_|_PAIRS]"
><b>connect_options [HASHREF | PAIRS]</b></a></dt>

<dd>
<p>Get or set the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> connect options hash. If a reference to a hash is passed, it replaces the connect options hash. If a series of name/value pairs are passed, they are added to the connect options hash.</p>

<p>Returns a reference to the connect options has in scalar context, or a list of name/value pairs in list context.</p>

<dt><a name='dbh'></a><a name="dbh_[DBH]"
><b>dbh [DBH]</b></a></dt>

<dd>
<p>Get or set the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle connected to the current data source. If the database handle does not exist or was created in another process or thread, this method will discard the old database handle (if any) and <a href="#dbi_connect" class="podlinkpod"
>dbi_connect</a> will be called to create a new one.</p>

<p>Returns undef if the database handle could not be constructed and connected. If there is no registered data source for the current <code>type</code> and <code>domain</code>, a fatal error will occur.</p>

<p>Note: when setting this attribute, you <i>must</i> pass in a <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle that has the same <a href="#driver" class="podlinkpod"
>driver</a> as the object. For example, if the <a href="#driver" class="podlinkpod"
>driver</a> is <code>mysql</code> then the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle must be connected to a MySQL database. Passing in a mismatched database handle will cause a fatal error.</p>

<dt><a name='dbi_connect'></a><a name="dbi_connect_[ARGS]"
><b>dbi_connect [ARGS]</b></a></dt>

<dd>
<p>This method calls <a href="/perldoc?DBI#connect" class="podlinkpod"
>DBI-&#62;connect(...)</a>, passing all ARGS and returning all values. This method has no affect on the internal state of the object. Use the <a href="#connect" class="podlinkpod"
>connect</a> method to create and store a new <a href="#dbh" class="podlinkpod"
>database handle</a> in the object.</p>

<p>Override this method in your <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> subclass if you want to use a different method (e.g. <a href="/perldoc?DBI#connect_cached" class="podlinkpod"
>DBI-&#62;connect_cached()</a>) to create database handles.</p>

<dt><a name="disconnect"
><b>disconnect</b></a></dt>

<dd>
<p>Decrements the reference count for the database handle and disconnects it if the reference count is zero and if the database handle was originally connected by this object. (This may not be the case if, say, a subclass&#39;s custom implementation of <a href="#dbi_connect" class="podlinkpod"
>dbi_connect</a> calls <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a>&#39;s <a href="/perldoc?DBI#connect_cached" class="podlinkpod"
>connect_cached</a> method.) Regardless of the reference count, it sets the <a href="#dbh" class="podlinkpod"
>dbh</a> attribute to undef.</p>

<p>Returns true if all <a href="#pre_disconnect_sql" class="podlinkpod"
>pre_disconnect_sql</a> statements (if any) were run successfully and the database handle was disconnected successfully (or if it was simply set to undef), false otherwise.</p>

<p>The database handle will not be disconnected if any <a href="#pre_disconnect_sql" class="podlinkpod"
>pre_disconnect_sql</a> statement fails to execute, and the <a href="#pre_disconnect_sql" class="podlinkpod"
>pre_disconnect_sql</a> is not run unless the handle is going to be disconnected.</p>

<dt><a name='do_transaction'></a><a name="do_transaction_CODE_[,_ARGS]"
><b>do_transaction CODE [, ARGS]</b></a></dt>

<dd>
<p>Execute arbitrary code within a single transaction, rolling back if any of the code fails, committing if it succeeds. CODE should be a code reference. It will be called with any arguments passed to <a href="#do_transaction" class="podlinkpod"
>do_transaction</a> after the code reference. Example:</p>

<pre class="sh_perl">    # Transfer $100 from account id 5 to account id 9
    $db-&#62;do_transaction(sub
    {
      my($amt, $id1, $id2) = @_;

      my $dbh = $db-&#62;dbh or die $db-&#62;error;

      # Transfer $amt from account id $id1 to account id $id2
      $dbh-&#62;do(&#34;UPDATE acct SET bal = bal - $amt WHERE id = $id1&#34;);
      $dbh-&#62;do(&#34;UPDATE acct SET bal = bal + $amt WHERE id = $id2&#34;);
    },
    100, 5, 9) or warn &#34;Transfer failed: &#34;, $db-&#62;error;</pre>

<p>If the CODE block threw an exception or the transaction could not be started and committed successfully, then undef is returned and the exception thrown is available in the <a href="#error" class="podlinkpod"
>error</a> attribute. Otherwise, a true value is returned.</p>

<dt><a name='error'></a><a name="error_[MSG]"
><b>error [MSG]</b></a></dt>

<dd>
<p>Get or set the error message associated with the last failure. If a method fails, check this attribute to get the reason for the failure in the form of a text message.</p>

<dt><a name="has_dbh"
><b>has_dbh</b></a></dt>

<dd>
<p>Returns true if the object has a <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle (<a href="#dbh" class="podlinkpod"
>dbh</a>), false if it does not.</p>

<dt><a name='has_primary_key'></a><a name="has_primary_key_[_TABLE_|_PARAMS_]"
><b>has_primary_key [ TABLE | PARAMS ]</b></a></dt>

<dd>
<p>Returns true if the specified table has a primary key (as determined by the <a href="#primary_key_column_names" class="podlinkpod"
>primary_key_column_names</a> method), false otherwise.</p>

<p>The arguments are the same as those for the <a href="#primary_key_column_names" class="podlinkpod"
>primary_key_column_names</a> method: either a table name or name/value pairs specifying <code>table</code>, <code>catalog</code>, and <code>schema</code>. The <code>catalog</code> and <code>schema</code> parameters are optional and default to the return values of the <a href="#catalog" class="podlinkpod"
>catalog</a> and <a href="#schema" class="podlinkpod"
>schema</a> methods, respectively. See the documentation for the <a href="#primary_key_column_names" class="podlinkpod"
>primary_key_column_names</a> for more information.</p>

<dt><a name="in_transaction"
><b>in_transaction</b></a></dt>

<dd>
<p>Return true if the <a href="#dbh" class="podlinkpod"
>dbh</a> is currently in the middle of a transaction, false (but defined) if it is not. If no <a href="#dbh" class="podlinkpod"
>dbh</a> exists, then undef is returned.</p>

<dt><a name="init_db_info"
><b>init_db_info</b></a></dt>

<dd>
<p>Initialize data source configuration information based on the current values of the <a href="#type" class="podlinkpod"
>type</a> and <a href="#domain" class="podlinkpod"
>domain</a> attributes by pulling data from the corresponding registry entry. If there is no registered data source for the current <a href="#type" class="podlinkpod"
>type</a> and <a href="#domain" class="podlinkpod"
>domain</a>, a fatal error will occur. <a href="#init_db_info" class="podlinkpod"
>init_db_info</a> is called as part of the <a href="#new" class="podlinkpod"
>new</a> and <a href="#connect" class="podlinkpod"
>connect</a> methods.</p>

<dt><a name="insertid_param"
><b>insertid_param</b></a></dt>

<dd>
<p>Returns the name of the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> statement handle attribute that contains the auto-generated unique key created during the last insert operation. Returns undef if the current data source does not support this attribute.</p>

<dt><a name='keyword_function_calls'></a><a name="keyword_function_calls_[BOOL]"
><b>keyword_function_calls [BOOL]</b></a></dt>

<dd>
<p>Get or set a boolean value that indicates whether or not any string that looks like a function call (matches <code>/^\w+\(.*\)$/</code>) will be treated as a &#34;keyword&#34; by the various <a href="#Vendor-Specific_Column_Value_Parsing_and_Formatting" class="podlinkpod"
>format_*</a> methods. Defaults to the value returned by the <a href="#default_keyword_function_calls" class="podlinkpod"
>default_keyword_function_calls</a> class method.</p>

<dt><a name='last_insertid_from_sth'></a><a name="last_insertid_from_sth_STH"
><b>last_insertid_from_sth STH</b></a></dt>

<dd>
<p>Given a <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> statement handle, returns the value of the auto-generated unique key created during the last insert operation. This value may be undefined if this feature is not supported by the current data source.</p>

<dt><a name="list_tables"
><b>list_tables</b></a></dt>

<dd>
<p>Returns a list (in list context) or reference to an array (in scalar context) of tables in the database. The current <a href="#catalog" class="podlinkpod"
>catalog</a> and <a href="#schema" class="podlinkpod"
>schema</a> are honored.</p>

<dt><a name='quote_column_name'></a><a name="quote_column_name_NAME"
><b>quote_column_name NAME</b></a></dt>

<dd>
<p>Returns the column name NAME appropriately quoted for use in an SQL statement. (Note that &#34;appropriate&#34; quoting may mean no quoting at all.)</p>

<dt><a name="release_dbh"
><b>release_dbh</b></a></dt>

<dd>
<p>Decrements the reference count for the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle, if it exists. Returns 0 if the database handle does not exist.</p>

<p>If the reference count drops to zero, the database handle is disconnected. Keep in mind that the <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> object itself will increment the reference count when the database handle is connected, and decrement it when <a href="#disconnect" class="podlinkpod"
>disconnect</a> is called.</p>

<p>Returns true if the reference count is not 0 or if all <a href="#pre_disconnect_sql" class="podlinkpod"
>pre_disconnect_sql</a> statements (if any) were run successfully and the database handle was disconnected successfully, false otherwise.</p>

<p>The database handle will not be disconnected if any <a href="#pre_disconnect_sql" class="podlinkpod"
>pre_disconnect_sql</a> statement fails to execute, and the <a href="#pre_disconnect_sql" class="podlinkpod"
>pre_disconnect_sql</a> is not run unless the handle is going to be disconnected.</p>

<p>See the <a href="#Database_Handle_Life-Cycle_Management" class="podlinkpod"
>&#34;Database Handle Life-Cycle Management&#34;</a> section for more information on the retain/release system.</p>

<dt><a name="retain_dbh"
><b>retain_dbh</b></a></dt>

<dd>
<p>Returns the connected <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle after incrementing the reference count. If the database handle does not exist or is not already connected, this method will do everything necessary to do so.</p>

<p>Returns undef if the database handle could not be constructed and connected. If there is no registered data source for the current <a href="#type" class="podlinkpod"
>type</a> and <a href="#domain" class="podlinkpod"
>domain</a>, a fatal error will occur.</p>

<p>See the <a href="#Database_Handle_Life-Cycle_Management" class="podlinkpod"
>&#34;Database Handle Life-Cycle Management&#34;</a> section for more information on the retain/release system.</p>

<dt><a name="rollback"
><b>rollback</b></a></dt>

<dd>
<p>Roll back the current transaction by calling the <a href="/perldoc?DBI#rollback" class="podlinkpod"
>rollback</a> method on the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle. If the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> database handle does not exist or is not connected, 0 is returned.</p>

<p>If the call to <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a>&#39;s <a href="/perldoc?DBI#rollback" class="podlinkpod"
>rollback</a> method succeeds or if auto-commit is enabled, 1 is returned. If it fails, undef is returned.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Data_Source_Configuration"
>Data Source Configuration</a></h2>

<p>Not all databases will use all of these values. Values that are not supported are simply ignored.</p>

<dl>
<dt><a name='autocommit'></a><a name="autocommit_[VALUE]"
><b>autocommit [VALUE]</b></a></dt>

<dd>
<p>Get or set the value of the &#34;AutoCommit&#34; connect option and <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> handle attribute. If a VALUE is passed, it will be set in both the connect options hash and the current database handle, if any. Returns the value of the &#34;AutoCommit&#34; attribute of the database handle if it exists, or the connect option otherwise.</p>

<p>This method should not be mixed with the <a href="#connect_options" class="podlinkpod"
>connect_options</a> method in calls to <a href="#register_db" class="podlinkpod"
>register_db</a> or <a href="#modify_db" class="podlinkpod"
>modify_db</a> since <a href="#connect_options" class="podlinkpod"
>connect_options</a> will overwrite <i>all</i> the connect options with its argument, and neither <a href="#register_db" class="podlinkpod"
>register_db</a> nor <a href="#modify_db" class="podlinkpod"
>modify_db</a> guarantee the order that its parameters will be evaluated.</p>

<dt><a name='catalog'></a><a name="catalog_[CATALOG]"
><b>catalog [CATALOG]</b></a></dt>

<dd>
<p>Get or set the database catalog name. This setting is only relevant to databases that support the concept of catalogs.</p>

<dt><a name='connect_options'></a><a name="connect_options_[HASHREF_|_PAIRS]"
><b>connect_options [HASHREF | PAIRS]</b></a></dt>

<dd>
<p>Get or set the options passed in a hash reference as the fourth argument to the call to <a href="/perldoc?DBI#connect" class="podlinkpod"
>DBI-&#62;connect()</a>. See the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> documentation for descriptions of the various options.</p>

<p>If a reference to a hash is passed, it replaces the connect options hash. If a series of name/value pairs are passed, they are added to the connect options hash.</p>

<p>Returns a reference to the hash of options in scalar context, or a list of name/value pairs in list context.</p>

<p>When <a href="#init_db_info" class="podlinkpod"
>init_db_info</a> is called for the first time on an object (either in isolation or as part of the <a href="#connect" class="podlinkpod"
>connect</a> process), the connect options are merged with the <a href="#default_connect_options" class="podlinkpod"
>default_connect_options</a>. The defaults are overridden in the case of a conflict. Example:</p>

<pre class="sh_perl">    Rose::DB-&#62;register_db(
      domain   =&#62; &#39;development&#39;,
      type     =&#62; &#39;main&#39;,
      driver   =&#62; &#39;Pg&#39;,
      database =&#62; &#39;dev_db&#39;,
      host     =&#62; &#39;localhost&#39;,
      username =&#62; &#39;devuser&#39;,
      password =&#62; &#39;mysecret&#39;,
      connect_options =&#62;
      {
        RaiseError =&#62; 0, 
        AutoCommit =&#62; 0,
      }
    );

    # Rose::DB-&#62;default_connect_options are:
    #
    # AutoCommit =&#62; 1,
    # ChopBlanks =&#62; 1,
    # PrintError =&#62; 1,
    # RaiseError =&#62; 1,
    # Warn       =&#62; 0,

    # The object&#39;s connect options are merged with default options 
    # since new() will trigger the first call to init_db_info()
    # for this object
    $db = Rose::DB-&#62;new(domain =&#62; &#39;development&#39;, type =&#62; &#39;main&#39;);

    # $db-&#62;connect_options are:
    #
    # AutoCommit =&#62; 0,
    # ChopBlanks =&#62; 1,
    # PrintError =&#62; 1,
    # RaiseError =&#62; 0,
    # Warn       =&#62; 0,

    $db-&#62;connect_options(TraceLevel =&#62; 2); # Add an option

    # $db-&#62;connect_options are now:
    #
    # AutoCommit =&#62; 0,
    # ChopBlanks =&#62; 1,
    # PrintError =&#62; 1,
    # RaiseError =&#62; 0,
    # TraceLevel =&#62; 2,
    # Warn       =&#62; 0,

    # The object&#39;s connect options are NOT re-merged with the default 
    # connect options since this will trigger the second call to 
    # init_db_info(), not the first
    $db-&#62;connect or die $db-&#62;error; 

    # $db-&#62;connect_options are still:
    #
    # AutoCommit =&#62; 0,
    # ChopBlanks =&#62; 1,
    # PrintError =&#62; 1,
    # RaiseError =&#62; 0,
    # TraceLevel =&#62; 2,
    # Warn       =&#62; 0,</pre>

<dt><a name='database'></a><a name="database_[NAME]"
><b>database [NAME]</b></a></dt>

<dd>
<p>Get or set the database name used in the construction of the DSN used in the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> <a href="/perldoc?DBI#connect" class="podlinkpod"
>connect</a> call.</p>

<dt><a name='domain'></a><a name="domain_[DOMAIN]"
><b>domain [DOMAIN]</b></a></dt>

<dd>
<p>Get or set the data source domain. See the <a href="#Data_Source_Abstraction" class="podlinkpod"
>&#34;Data Source Abstraction&#34;</a> section for more information on data source domains.</p>

<dt><a name='driver'></a><a name="driver_[DRIVER]"
><b>driver [DRIVER]</b></a></dt>

<dd>
<p>Get or set the driver name. The driver name can only be set during object construction (i.e., as an argument to <a href="#new" class="podlinkpod"
>new</a>) since it determines the object class. After the object is constructed, setting the driver to anything other than the same value it already has will cause a fatal error.</p>

<p>Even in the call to <a href="#new" class="podlinkpod"
>new</a>, setting the driver name explicitly is not recommended. Instead, specify the driver when calling <a href="#register_db" class="podlinkpod"
>register_db</a> for each data source and allow the <a href="#driver" class="podlinkpod"
>driver</a> to be set automatically based on the <a href="#domain" class="podlinkpod"
>domain</a> and <a href="#type" class="podlinkpod"
>type</a>.</p>

<p>The driver names for the <a href="#DATABASE_SUPPORT" class="podlinkpod"
>currently supported database types</a> are:</p>

<pre class="sh_perl">    pg
    mysql
    informix
    oracle
    sqlite</pre>

<p>Driver names should only use lowercase letters.</p>

<dt><a name='dsn'></a><a name="dsn_[DSN]"
><b>dsn [DSN]</b></a></dt>

<dd>
<p>Get or set the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> DSN (Data Source Name) passed to the call to <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a>&#39;s <a href="/perldoc?DBI#connect" class="podlinkpod"
>connect</a> method.</p>

<p>An attempt is made to parse the new DSN. Any parts successfully extracted are assigned to the corresponding <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> attributes (e.g., <a href="#host" class="podlinkpod"
>host</a>, <a href="#port" class="podlinkpod"
>port</a>, <a href="#database" class="podlinkpod"
>database</a>). If no value could be extracted for an attribute, it is set to undef.</p>

<p>If the DSN is never set explicitly, it is built automatically based on the relevant object attributes.</p>

<dt><a name='handle_error'></a><a name="handle_error_[VALUE]"
><b>handle_error [VALUE]</b></a></dt>

<dd>
<p>Get or set the value of the &#34;HandleError&#34; connect option and <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> handle attribute. If a VALUE is passed, it will be set in both the connect options hash and the current database handle, if any. Returns the value of the &#34;HandleError&#34; attribute of the database handle if it exists, or the connect option otherwise.</p>

<p>This method should not be mixed with the <a href="#connect_options" class="podlinkpod"
>connect_options</a> method in calls to <a href="#register_db" class="podlinkpod"
>register_db</a> or <a href="#modify_db" class="podlinkpod"
>modify_db</a> since <a href="#connect_options" class="podlinkpod"
>connect_options</a> will overwrite <i>all</i> the connect options with its argument, and neither <a href="#register_db" class="podlinkpod"
>register_db</a> nor <a href="#modify_db" class="podlinkpod"
>modify_db</a> guarantee the order that its parameters will be evaluated.</p>

<dt><a name='host'></a><a name="host_[NAME]"
><b>host [NAME]</b></a></dt>

<dd>
<p>Get or set the database server host name used in the construction of the DSN which is passed in the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> <a href="/perldoc?DBI#connect" class="podlinkpod"
>connect</a> call.</p>

<dt><a name='password'></a><a name="password_[PASS]"
><b>password [PASS]</b></a></dt>

<dd>
<p>Get or set the password that will be passed to the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> <a href="/perldoc?DBI#connect" class="podlinkpod"
>connect</a> call.</p>

<dt><a name='port'></a><a name="port_[NUM]"
><b>port [NUM]</b></a></dt>

<dd>
<p>Get or set the database server port number used in the construction of the DSN which is passed in the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> <a href="/perldoc?DBI#connect" class="podlinkpod"
>connect</a> call.</p>

<dt><a name='pre_disconnect_sql'></a><a name="pre_disconnect_sql_[STATEMENTS]"
><b>pre_disconnect_sql [STATEMENTS]</b></a></dt>

<dd>
<p>Get or set the SQL statements that will be run immediately before disconnecting from the database. STATEMENTS should be a list or reference to an array of SQL statements. Returns a reference to the array of SQL statements in scalar context, or a list of SQL statements in list context.</p>

<p>The SQL statements are run in the order that they are supplied in STATEMENTS. If any <a href="#pre_disconnect_sql" class="podlinkpod"
>pre_disconnect_sql</a> statement fails when executed, the subsequent statements are ignored.</p>

<dt><a name='post_connect_sql'></a><a name="post_connect_sql_[STATEMENTS]"
><b>post_connect_sql [STATEMENTS]</b></a></dt>

<dd>
<p>Get or set the SQL statements that will be run immediately after connecting to the database. STATEMENTS should be a list or reference to an array of SQL statements. Returns a reference to the array of SQL statements in scalar context, or a list of SQL statements in list context.</p>

<p>The SQL statements are run in the order that they are supplied in STATEMENTS. If any <a href="#post_connect_sql" class="podlinkpod"
>post_connect_sql</a> statement fails when executed, the subsequent statements are ignored.</p>

<dt><a name='primary_key_column_names'></a><a name="primary_key_column_names_[_TABLE_|_PARAMS_]"
><b>primary_key_column_names [ TABLE | PARAMS ]</b></a></dt>

<dd>
<p>Returns a list (in list context) or reference to an array (in scalar context) of the names of the columns that make up the primary key for the specified table. If the table has no primary key, an empty list (in list context) or reference to an empty array (in scalar context) will be returned.</p>

<p>The table may be specified in two ways. If one argument is passed, it is taken as the name of the table. Otherwise, name/value pairs are expected. Valid parameter names are:</p>

<dl>
<dt><a name="catalog"
><code>catalog</code></a></dt>

<dd>
<p>The name of the catalog that contains the table. This parameter is optional and defaults to the return value of the <a href="#catalog" class="podlinkpod"
>catalog</a> method.</p>

<dt><a name="schema"
><code>schema</code></a></dt>

<dd>
<p>The name of the schema that contains the table. This parameter is optional and defaults to the return value of the <a href="#schema" class="podlinkpod"
>schema</a> method.</p>

<dt><a name="table"
><code>table</code></a></dt>

<dd>
<p>The name of the table. This parameter is required.</p>
</dd>
</dl>

<p>Case-sensitivity of names is determined by the underlying database. If your database is case-sensitive, then you must pass names to this method with the expected case.</p>

<dt><a name='print_error'></a><a name="print_error_[VALUE]"
><b>print_error [VALUE]</b></a></dt>

<dd>
<p>Get or set the value of the &#34;PrintError&#34; connect option and <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> handle attribute. If a VALUE is passed, it will be set in both the connect options hash and the current database handle, if any. Returns the value of the &#34;PrintError&#34; attribute of the database handle if it exists, or the connect option otherwise.</p>

<p>This method should not be mixed with the <a href="#connect_options" class="podlinkpod"
>connect_options</a> method in calls to <a href="#register_db" class="podlinkpod"
>register_db</a> or <a href="#modify_db" class="podlinkpod"
>modify_db</a> since <a href="#connect_options" class="podlinkpod"
>connect_options</a> will overwrite <i>all</i> the connect options with its argument, and neither <a href="#register_db" class="podlinkpod"
>register_db</a> nor <a href="#modify_db" class="podlinkpod"
>modify_db</a> guarantee the order that its parameters will be evaluated.</p>

<dt><a name='raise_error'></a><a name="raise_error_[VALUE]"
><b>raise_error [VALUE]</b></a></dt>

<dd>
<p>Get or set the value of the &#34;RaiseError&#34; connect option and <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> handle attribute. If a VALUE is passed, it will be set in both the connect options hash and the current database handle, if any. Returns the value of the &#34;RaiseError&#34; attribute of the database handle if it exists, or the connect option otherwise.</p>

<p>This method should not be mixed with the <a href="#connect_options" class="podlinkpod"
>connect_options</a> method in calls to <a href="#register_db" class="podlinkpod"
>register_db</a> or <a href="#modify_db" class="podlinkpod"
>modify_db</a> since <a href="#connect_options" class="podlinkpod"
>connect_options</a> will overwrite <i>all</i> the connect options with its argument, and neither <a href="#register_db" class="podlinkpod"
>register_db</a> nor <a href="#modify_db" class="podlinkpod"
>modify_db</a> guarantee the order that its parameters will be evaluated.</p>

<dt><a name='schema'></a><a name="schema_[SCHEMA]"
><b>schema [SCHEMA]</b></a></dt>

<dd>
<p>Get or set the database schema name. This setting is only useful to databases that support the concept of schemas (e.g., PostgreSQL).</p>

<dt><a name='server_time_zone'></a><a name="server_time_zone_[TZ]"
><b>server_time_zone [TZ]</b></a></dt>

<dd>
<p>Get or set the time zone used by the database server software. TZ should be a time zone name that is understood by <a href="/perldoc?DateTime%3A%3ATimeZone" class="podlinkpod"
>DateTime::TimeZone</a>. The default value is &#34;floating&#34;.</p>

<p>See the <a href="/perldoc?DateTime%3A%3ATimeZone" class="podlinkpod"
>DateTime::TimeZone</a> documentation for acceptable values of TZ.</p>

<dt><a name='type'></a><a name="type_[TYPE]"
><b>type [TYPE]</b></a></dt>

<dd>
<p>Get or set the data source type. See the <a href="#Data_Source_Abstraction" class="podlinkpod"
>&#34;Data Source Abstraction&#34;</a> section for more information on data source types.</p>

<dt><a name='username'></a><a name="username_[NAME]"
><b>username [NAME]</b></a></dt>

<dd>
<p>Get or set the username that will be passed to the <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> <a href="/perldoc?DBI#connect" class="podlinkpod"
>connect</a> call.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Value_Parsing_and_Formatting"
>Value Parsing and Formatting</a></h2>

<dl>
<dt><a name='format_bitfield'></a><a name="format_bitfield_BITS_[,_SIZE]"
><b>format_bitfield BITS [, SIZE]</b></a></dt>

<dd>
<p>Converts the <a href="/perldoc?Bit%3A%3AVector" class="podlinkpod"
>Bit::Vector</a> object BITS into the appropriate format for the &#34;bitfield&#34; data type of the current data source. If a SIZE argument is provided, the bit field will be padded with the appropriate number of zeros until it is SIZE bits long. If the data source does not have a native &#34;bit&#34; or &#34;bitfield&#34; data type, a character data type may be used to store the string of 1s and 0s returned by the default implementation.</p>

<dt><a name='format_boolean'></a><a name="format_boolean_VALUE"
><b>format_boolean VALUE</b></a></dt>

<dd>
<p>Converts VALUE into the appropriate format for the &#34;boolean&#34; data type of the current data source. VALUE is simply evaluated in Perl&#39;s scalar context to determine if it&#39;s true or false.</p>

<dt><a name='format_date'></a><a name="format_date_DATETIME"
><b>format_date DATETIME</b></a></dt>

<dd>
<p>Converts the <a href="/perldoc?DateTime" class="podlinkpod"
>DateTime</a> object DATETIME into the appropriate format for the &#34;date&#34; (month, day, year) data type of the current data source.</p>

<dt><a name='format_datetime'></a><a name="format_datetime_DATETIME"
><b>format_datetime DATETIME</b></a></dt>

<dd>
<p>Converts the <a href="/perldoc?DateTime" class="podlinkpod"
>DateTime</a> object DATETIME into the appropriate format for the &#34;datetime&#34; (month, day, year, hour, minute, second) data type of the current data source.</p>

<dt><a name='format_interval'></a><a name="format_interval_DURATION"
><b>format_interval DURATION</b></a></dt>

<dd>
<p>Converts the <a href="/perldoc?DateTime%3A%3ADuration" class="podlinkpod"
>DateTime::Duration</a> object DURATION into the appropriate format for the interval (years, months, days, hours, minutes, seconds) data type of the current data source. If DURATION is undefined, a <a href="/perldoc?DateTime%3A%3ADuration" class="podlinkpod"
>DateTime::Duration</a> object, a valid interval keyword (according to <a href="#validate_interval_keyword" class="podlinkpod"
>validate_interval_keyword</a>), or if it looks like a function call (matches <code>/^\w+\(.*\)$/</code>) and <a href="#keyword_function_calls" class="podlinkpod"
>keyword_function_calls</a> is true, then it is returned unmodified.</p>

<dt><a name='format_time'></a><a name="format_time_TIMECLOCK"
><b>format_time TIMECLOCK</b></a></dt>

<dd>
<p>Converts the <a href="/perldoc?Time%3A%3AClock" class="podlinkpod"
>Time::Clock</a> object TIMECLOCK into the appropriate format for the time (hour, minute, second, fractional seconds) data type of the current data source. Fractional seconds are optional, and the useful precision may vary depending on the data source.</p>

<dt><a name='format_timestamp'></a><a name="format_timestamp_DATETIME"
><b>format_timestamp DATETIME</b></a></dt>

<dd>
<p>Converts the <a href="/perldoc?DateTime" class="podlinkpod"
>DateTime</a> object DATETIME into the appropriate format for the timestamp (month, day, year, hour, minute, second, fractional seconds) data type of the current data source. Fractional seconds are optional, and the useful precision may vary depending on the data source.</p>

<dt><a name='format_timestamp_with_time_zone'></a><a name="format_timestamp_with_time_zone_DATETIME"
><b>format_timestamp_with_time_zone DATETIME</b></a></dt>

<dd>
<p>Converts the <a href="/perldoc?DateTime" class="podlinkpod"
>DateTime</a> object DATETIME into the appropriate format for the timestamp with time zone (month, day, year, hour, minute, second, fractional seconds, time zone) data type of the current data source. Fractional seconds are optional, and the useful precision may vary depending on the data source.</p>

<dt><a name='parse_bitfield'></a><a name="parse_bitfield_BITS_[,_SIZE]"
><b>parse_bitfield BITS [, SIZE]</b></a></dt>

<dd>
<p>Parse BITS and return a corresponding <a href="/perldoc?Bit%3A%3AVector" class="podlinkpod"
>Bit::Vector</a> object. If SIZE is not passed, then it defaults to the number of bits in the parsed bit string.</p>

<p>If BITS is a string of &#34;1&#34;s and &#34;0&#34;s or matches <code>/^B&#39;[10]+&#39;$/</code>, then the &#34;1&#34;s and &#34;0&#34;s are parsed as a binary string.</p>

<p>If BITS is a string of numbers, at least one of which is in the range 2-9, it is assumed to be a decimal (base 10) number and is converted to a bitfield as such.</p>

<p>If BITS matches any of these regular expressions:</p>

<pre class="sh_perl">    /^0x/
    /^X&#39;.*&#39;$/
    /^[0-9a-f]+$/</pre>

<p>it is assumed to be a hexadecimal number and is converted to a bitfield as such.</p>

<p>Otherwise, undef is returned.</p>

<dt><a name='parse_boolean'></a><a name="parse_boolean_STRING"
><b>parse_boolean STRING</b></a></dt>

<dd>
<p>Parse STRING and return a boolean value of 1 or 0. STRING should be formatted according to the data source&#39;s native &#34;boolean&#34; data type. The default implementation accepts &#39;t&#39;, &#39;true&#39;, &#39;y&#39;, &#39;yes&#39;, and &#39;1&#39; values for true, and &#39;f&#39;, &#39;false&#39;, &#39;n&#39;, &#39;no&#39;, and &#39;0&#39; values for false.</p>

<p>If STRING is a valid boolean keyword (according to <a href="#validate_boolean_keyword" class="podlinkpod"
>validate_boolean_keyword</a>) or if it looks like a function call (matches <code>/^\w+\(.*\)$/</code>) and <a href="#keyword_function_calls" class="podlinkpod"
>keyword_function_calls</a> is true, then it is returned unmodified. Returns undef if STRING could not be parsed as a valid &#34;boolean&#34; value.</p>

<dt><a name='parse_date'></a><a name="parse_date_STRING"
><b>parse_date STRING</b></a></dt>

<dd>
<p>Parse STRING and return a <a href="/perldoc?DateTime" class="podlinkpod"
>DateTime</a> object. STRING should be formatted according to the data source&#39;s native &#34;date&#34; (month, day, year) data type.</p>

<p>If STRING is a valid date keyword (according to <a href="#validate_date_keyword" class="podlinkpod"
>validate_date_keyword</a>) or if it looks like a function call (matches <code>/^\w+\(.*\)$/</code>) and <a href="#keyword_function_calls" class="podlinkpod"
>keyword_function_calls</a> is true, then it is returned unmodified. Returns undef if STRING could not be parsed as a valid &#34;date&#34; value.</p>

<dt><a name='parse_datetime'></a><a name="parse_datetime_STRING"
><b>parse_datetime STRING</b></a></dt>

<dd>
<p>Parse STRING and return a <a href="/perldoc?DateTime" class="podlinkpod"
>DateTime</a> object. STRING should be formatted according to the data source&#39;s native &#34;datetime&#34; (month, day, year, hour, minute, second) data type.</p>

<p>If STRING is a valid datetime keyword (according to <a href="#validate_datetime_keyword" class="podlinkpod"
>validate_datetime_keyword</a>) or if it looks like a function call (matches <code>/^\w+\(.*\)$/</code>) and <a href="#keyword_function_calls" class="podlinkpod"
>keyword_function_calls</a> is true, then it is returned unmodified. Returns undef if STRING could not be parsed as a valid &#34;datetime&#34; value.</p>

<dt><a name='parse_interval'></a><a name="parse_interval_STRING_[,_MODE]"
><b>parse_interval STRING [, MODE]</b></a></dt>

<dd>
<p>Parse STRING and return a <a href="/perldoc?DateTime%3A%3ADuration" class="podlinkpod"
>DateTime::Duration</a> object. STRING should be formatted according to the data source&#39;s native &#34;interval&#34; (years, months, days, hours, minutes, seconds) data type.</p>

<p>If STRING is a <a href="/perldoc?DateTime%3A%3ADuration" class="podlinkpod"
>DateTime::Duration</a> object, a valid interval keyword (according to <a href="#validate_interval_keyword" class="podlinkpod"
>validate_interval_keyword</a>), or if it looks like a function call (matches <code>/^\w+\(.*\)$/</code>) and <a href="#keyword_function_calls" class="podlinkpod"
>keyword_function_calls</a> is true, then it is returned unmodified. Otherwise, undef is returned if STRING could not be parsed as a valid &#34;interval&#34; value.</p>

<p>This optional MODE argyment determines how math is done on duration objects. If defined, the <code>end_of_month</code> setting for each <a href="/perldoc?DateTime%3A%3ADuration" class="podlinkpod"
>DateTime::Duration</a> object created by this column will have its mode set to MODE. Otherwise, the <code>end_of_month</code> parameter will not be passed to the <a href="/perldoc?DateTime%3A%3ADuration" class="podlinkpod"
>DateTime::Duration</a> constructor.</p>

<p>Valid modes are <code>wrap</code>, <code>limit</code>, and <code>preserve</code>. See the documentation for <a href="/perldoc?DateTime%3A%3ADuration" class="podlinkpod"
>DateTime::Duration</a> for a full explanation.</p>

<dt><a name='parse_time'></a><a name="parse_time_STRING"
><b>parse_time STRING</b></a></dt>

<dd>
<p>Parse STRING and return a <a href="/perldoc?Time%3A%3AClock" class="podlinkpod"
>Time::Clock</a> object. STRING should be formatted according to the data source&#39;s native &#34;time&#34; (hour, minute, second, fractional seconds) data type.</p>

<p>If STRING is a valid time keyword (according to <a href="#validate_time_keyword" class="podlinkpod"
>validate_time_keyword</a>) or if it looks like a function call (matches <code>/^\w+\(.*\)$/</code>) and <a href="#keyword_function_calls" class="podlinkpod"
>keyword_function_calls</a> is true, then it is returned unmodified. Returns undef if STRING could not be parsed as a valid &#34;time&#34; value.</p>

<dt><a name='parse_timestamp'></a><a name="parse_timestamp_STRING"
><b>parse_timestamp STRING</b></a></dt>

<dd>
<p>Parse STRING and return a <a href="/perldoc?DateTime" class="podlinkpod"
>DateTime</a> object. STRING should be formatted according to the data source&#39;s native &#34;timestamp&#34; (month, day, year, hour, minute, second, fractional seconds) data type. Fractional seconds are optional, and the acceptable precision may vary depending on the data source.</p>

<p>If STRING is a valid timestamp keyword (according to <a href="#validate_timestamp_keyword" class="podlinkpod"
>validate_timestamp_keyword</a>) or if it looks like a function call (matches <code>/^\w+\(.*\)$/</code>) and <a href="#keyword_function_calls" class="podlinkpod"
>keyword_function_calls</a> is true, then it is returned unmodified. Returns undef if STRING could not be parsed as a valid &#34;timestamp&#34; value.</p>

<dt><a name='parse_timestamp_with_time_zone'></a><a name="parse_timestamp_with_time_zone_STRING"
><b>parse_timestamp_with_time_zone STRING</b></a></dt>

<dd>
<p>Parse STRING and return a <a href="/perldoc?DateTime" class="podlinkpod"
>DateTime</a> object. STRING should be formatted according to the data source&#39;s native &#34;timestamp with time zone&#34; (month, day, year, hour, minute, second, fractional seconds, time zone) data type. Fractional seconds are optional, and the acceptable precision may vary depending on the data source.</p>

<p>If STRING is a valid timestamp keyword (according to <a href="#validate_timestamp_keyword" class="podlinkpod"
>validate_timestamp_keyword</a>) or if it looks like a function call (matches <code>/^\w+\(.*\)$/</code>) and <a href="#keyword_function_calls" class="podlinkpod"
>keyword_function_calls</a> is true, then it is returned unmodified. Returns undef if STRING could not be parsed as a valid &#34;timestamp with time zone&#34; value.</p>

<dt><a name='validate_boolean_keyword'></a><a name="validate_boolean_keyword_STRING"
><b>validate_boolean_keyword STRING</b></a></dt>

<dd>
<p>Returns true if STRING is a valid keyword for the &#34;boolean&#34; data type of the current data source, false otherwise. The default implementation accepts the values &#34;TRUE&#34; and &#34;FALSE&#34;.</p>

<dt><a name='validate_date_keyword'></a><a name="validate_date_keyword_STRING"
><b>validate_date_keyword STRING</b></a></dt>

<dd>
<p>Returns true if STRING is a valid keyword for the &#34;date&#34; (month, day, year) data type of the current data source, false otherwise. The default implementation always returns false.</p>

<dt><a name='validate_datetime_keyword'></a><a name="validate_datetime_keyword_STRING"
><b>validate_datetime_keyword STRING</b></a></dt>

<dd>
<p>Returns true if STRING is a valid keyword for the &#34;datetime&#34; (month, day, year, hour, minute, second) data type of the current data source, false otherwise. The default implementation always returns false.</p>

<dt><a name='validate_interval_keyword'></a><a name="validate_interval_keyword_STRING"
><b>validate_interval_keyword STRING</b></a></dt>

<dd>
<p>Returns true if STRING is a valid keyword for the &#34;interval&#34; (years, months, days, hours, minutes, seconds) data type of the current data source, false otherwise. The default implementation always returns false.</p>

<dt><a name='validate_time_keyword'></a><a name="validate_time_keyword_STRING"
><b>validate_time_keyword STRING</b></a></dt>

<dd>
<p>Returns true if STRING is a valid keyword for the &#34;time&#34; (hour, minute, second, fractional seconds) data type of the current data source, false otherwise. The default implementation always returns false.</p>

<dt><a name='validate_timestamp_keyword'></a><a name="validate_timestamp_keyword_STRING"
><b>validate_timestamp_keyword STRING</b></a></dt>

<dd>
<p>Returns true if STRING is a valid keyword for the &#34;timestamp&#34; (month, day, year, hour, minute, second, fractional seconds) data type of the current data source, false otherwise. The default implementation always returns false.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DEVELOPMENT_POLICY"
>DEVELOPMENT POLICY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <a href="/perldoc?Rose#DEVELOPMENT_POLICY" class="podlinkpod"
>Rose development policy</a> applies to this, and all <code>Rose::*</code> modules. Please install <a href="/perldoc?Rose" class="podlinkpod"
>Rose</a> from CPAN and then run &#34;<code>perldoc Rose</code>&#34; for more information.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT"
>SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Any <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a> questions or problems can be posted to the <a href="/perldoc?Rose%3A%3ADB%3A%3AObject" class="podlinkpod"
>Rose::DB::Object</a> mailing list. (If the volume ever gets high enough, I&#39;ll create a separate list for <a href="/~jsiracusa/Rose-DB-0.766/lib/Rose/DB.pm" class="podlinkpod"
>Rose::DB</a>, but it isn&#39;t an issue right now.) To subscribe to the list or view the archives, go here:</p>

<p><a href="http://groups.google.com/group/rose-db-object" class="podlinkurl"
>http://groups.google.com/group/rose-db-object</a></p>

<p>Although the mailing list is the preferred support mechanism, you can also email the author (see below) or file bugs using the CPAN bug tracking system:</p>

<p><a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=Rose-DB" class="podlinkurl"
>http://rt.cpan.org/NoAuth/Bugs.html?Dist=Rose-DB</a></p>

<p>There&#39;s also a wiki and other resources linked from the Rose project home page:</p>

<p><a href="http://rose.googlecode.com" class="podlinkurl"
>http://rose.googlecode.com</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONTRIBUTORS"
>CONTRIBUTORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Kostas Chatzikokolakis, Peter Karman, Lucian Dragus, Ron Savage</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>John C. Siracusa (siracusa@gmail.com)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE"
>LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2010 by John C. Siracusa. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78255 Uploads, 24722 Distributions
105996 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 11:31:10 2012 GMT (0.837416887283325) @cpansearch1 -->
 </body>
</html>
