<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>IPC::System::Simple - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","IPC-System-Simple",3]);
    _gaq.push(["_setCustomVar",5,"Release","IPC-System-Simple-1.21",3]);
    _gaq.push(["_setCustomVar",3,"Module","IPC::System::Simple",3]);
    _gaq.push(["_setCustomVar",1,"Author","PJF",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?IPC::System::Simple">permalink</a></div>
  <a href="/~pjf/">Paul Jamieson Fenwick</a> &gt;
  <a href="/~pjf/IPC-System-Simple-1.21/">IPC-System-Simple-1.21</a> &gt;
  IPC::System::Simple
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/c796116002768900a951a1b08a35d513?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/P/PJ/PJF/IPC-System-Simple-1.21.tar.gz">IPC-System-Simple-1.21.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=IPC%3A%3ASystem%3A%3ASimple;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~PJF/IPC-System-Simple-1.21/lib/IPC/System/Simple.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 5</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 3</td></tr>
</table>
<a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=IPC-System-Simple">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.21 &nbsp;
<span class="noprint">
  <a href="/src/PJF/IPC-System-Simple-1.21/lib/IPC/System/Simple.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#ADVANCED_SYNOPSIS'>ADVANCED SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#ADVANCED_USAGE'>ADVANCED USAGE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#run()_and_system()'>run() and system()</a>
    <li class='indexItem indexItem2'><a href='#capture()'>capture()</a>
    <li class='indexItem indexItem2'><a href='#runx(),_systemx()_and_capturex()'>runx(), systemx() and capturex()</a>
    <li class='indexItem indexItem2'><a href='#Exception_handling'>Exception handling</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#Exception_cases'>Exception cases</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Exit_values'>Exit values</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#$EXITVAL'>$EXITVAL</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#WINDOWS-SPECIFIC_NOTES'>WINDOWS-SPECIFIC NOTES</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#DIAGNOSTICS'>DIAGNOSTICS</a>
  <li class='indexItem indexItem1'><a href='#DEPENDENCIES'>DEPENDENCIES</a>
  <li class='indexItem indexItem1'><a href='#COMPARISON_TO_OTHER_APIs'>COMPARISON TO OTHER APIs</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Reporting_bugs'>Reporting bugs</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#FEEDBACK'>FEEDBACK</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>IPC::System::Simple - Run commands simply,
with detailed diagnostics</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use IPC::System::Simple qw(system systemx capture capturex);

  system(&#34;some_command&#34;);        # Command succeeds or dies!

  system(&#34;some_command&#34;,@args);  # Succeeds or dies, avoids shell if @args

  systemx(&#34;some_command&#34;,@args); # Succeeds or dies, NEVER uses the shell


  # Capture the output of a command (just like backticks). Dies on error.
  my $output = capture(&#34;some_command&#34;);

  # Just like backticks in list context.  Dies on error.
  my @output = capture(&#34;some_command&#34;);

  # As above, but avoids the shell if @args is non-empty
  my $output = capture(&#34;some_command&#34;, @args);

  # As above, but NEVER invokes the shell.
  my $output = capturex(&#34;some_command&#34;, @args);
  my @output = capturex(&#34;some_command&#34;, @args);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Calling Perl&#39;s in-built <code>system()</code> function is easy, determining if it was successful is <i>hard</i>. Let&#39;s face it, <code>$?</code> isn&#39;t the nicest variable in the world to play with, and even if you <i>do</i> check it, producing a well-formatted error string takes a lot of work.</p>

<p><code>IPC::System::Simple</code> takes the hard work out of calling external commands. In fact, if you want to be really lazy, you can just write:</p>

<pre class="sh_perl">    use IPC::System::Simple qw(system);</pre>

<p>and all of your <code>system</code> commands will either succeeed (run to completion and return a zero exit value), or die with rich diagnostic messages.</p>

<p>The <code>IPC::System::Simple</code> module also provides a simple replacement to Perl&#39;s backticks operator. Simply write:</p>

<pre class="sh_perl">    use IPC::System::Simple qw(capture);</pre>

<p>and then use the <a href="#capture()" class="podlinkpod"
>&#34;capture()&#34;</a> command just like you&#39;d use backticks. If there&#39;s an error, it will die with a detailed description of what went wrong. Better still, you can even use <code>capturex()</code> to run the equivalent of backticks, but without the shell:</p>

<pre class="sh_perl">    use IPC::System::Simple qw(capturex);

    my $result = capturex($command, @args);</pre>

<p>If you want more power than the basic interface, including the ability to specify which exit values are acceptable, trap errors, or process diagnostics, then read on!</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ADVANCED_SYNOPSIS"
>ADVANCED SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use IPC::System::Simple qw(
    capture capturex system systemx run runx $EXITVAL EXIT_ANY
  );

  # Run a command, throwing exception on failure

  run(&#34;some_command&#34;);

  runx(&#34;some_command&#34;,@args);  # Run a command, avoiding the shell

  # Do the same thing, but with the drop-in system replacement.

  system(&#34;some_command&#34;);

  systemx(&#34;some_command&#34;, @args);

  # Run a command which must return 0..5, avoid the shell, and get the
  # exit value (we could also look at $EXITVAL)

  my $exit_value = runx([0..5], &#34;some_command&#34;, @args);

  # The same, but any exit value will do.

  my $exit_value = runx(EXIT_ANY, &#34;some_command&#34;, @args);

  # Capture output into $result and throw exception on failure

  my $result = capture(&#34;some_command&#34;); 

  # Check exit value from captured command

  print &#34;some_command exited with status $EXITVAL\n&#34;;

  # Captures into @lines, splitting on $/
  my @lines = capture(&#34;some_command&#34;); 

  # Run a command which must return 0..5, capture the output into
  # @lines, and avoid the shell.

  my @lines  = capturex([0..5], &#34;some_command&#34;, @args);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ADVANCED_USAGE"
>ADVANCED USAGE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="run()_and_system()"
>run() and system()</a></h2>

<p><code>IPC::System::Simple</code> provides a subroutine called <code>run</code>, that executes a command using the same semantics is Perl&#39;s built-in <code>system</code>:</p>

<pre class="sh_perl">    use IPC::System::Simple qw(run);

    run(&#34;cat *.txt&#34;);           # Execute command via the shell
    run(&#34;cat&#34;,&#34;/etc/motd&#34;);     # Execute command without shell</pre>

<p>The primary difference between Perl&#39;s in-built system and the <code>run</code> command is that <code>run</code> will throw an exception on failure, and allows a list of acceptable exit values to be set. See <a href="#Exit_values" class="podlinkpod"
>&#34;Exit values&#34;</a> for further information.</p>

<p>In fact, you can even have <code>IPC::System::Simple</code> replace the default <code>system</code> function for your package so it has the same behaviour:</p>

<pre class="sh_perl">    use IPC::System::Simple qw(system);

    system(&#34;cat *.txt&#34;);  # system now suceeds or dies!</pre>

<p><code>system</code> and <code>run</code> are aliases to each other.</p>

<p>See also <a href="#runx(),_systemx()_and_capturex()" class="podlinkpod"
>&#34;runx(), systemx() and capturex()&#34;</a> for variants of <code>system()</code> and <code>run()</code> that never invoke the shell, even with a single argument.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="capture()"
>capture()</a></h2>

<p>A second subroutine, named <code>capture</code> executes a command with the same semantics as Perl&#39;s built-in backticks (and <code>qx()</code>):</p>

<pre class="sh_perl">    use IPC::System::Simple qw(capture);

    # Capture text while invoking the shell.
    my $file  = capture(&#34;cat /etc/motd&#34;);
    my @lines = capture(&#34;cat /etc/passwd&#34;);</pre>

<p>However unlike regular backticks, which always use the shell, <code>capture</code> will bypass the shell when called with multiple arguments:</p>

<pre class="sh_perl">    # Capture text while avoiding the shell.
    my $file  = capture(&#34;cat&#34;, &#34;/etc/motd&#34;);
    my @lines = capture(&#34;cat&#34;, &#34;/etc/passwd&#34;);</pre>

<p>See also <a href="#runx(),_systemx()_and_capturex()" class="podlinkpod"
>&#34;runx(), systemx() and capturex()&#34;</a> for a variant of <code>capture()</code> that never invokes the shell, even with a single argument.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="runx(),_systemx()_and_capturex()"
>runx(), systemx() and capturex()</a></h2>

<p>The <code>runx()</code>, <code>systemx()</code> and <code>capturex()</code> commands are identical to the multi-argument forms of <code>run()</code>, <code>system()</code> and <code>capture()</code> respectively, but <i>never</i> invoke the shell, even when called with a single argument. These forms are particularly useful when a command&#39;s argument list <i>might</i> be empty, for example:</p>

<pre class="sh_perl">    systemx($cmd, @args);</pre>

<p>The use of <code>systemx()</code> here guarantees that the shell will <i>never</i> be invoked, even if <code>@args</code> is empty.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Exception_handling"
>Exception handling</a></h2>

<p>In the case where the command returns an unexpected status, both <code>run</code> and <code>capture</code> will throw an exception, which if not caught will terminate your program with an error.</p>

<p>Capturing the exception is easy:</p>

<pre class="sh_perl">    eval {
        run(&#34;cat *.txt&#34;);
    };

    if ($@) {
        print &#34;Something went wrong - $@\n&#34;;
    }</pre>

<p>See the diagnostics section below for more details.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Exception_cases"
>Exception cases</a></h3>

<p><code>IPC::System::Simple</code> considers the following to be unexpected, and worthy of exception:</p>

<ul>
<li>Failing to start entirely (eg, command not found, permission denied).</li>

<li>Returning an exit value other than zero (but see below).</li>

<li>Being killed by a signal.</li>

<li>Being passed tainted data (in taint mode).</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Exit_values"
>Exit values</a></h2>

<p>Traditionally, system commands return a zero status for success and a non-zero status for failure. <code>IPC::System::Simple</code> will default to throwing an exception if a non-zero exit value is returned.</p>

<p>You may specify a range of values which are considered acceptable exit values by passing an <i>array reference</i> as the first argument. The special constant <code>EXIT_ANY</code> can be used to allow <i>any</i> exit value to be returned.</p>

<pre class="sh_perl">        use IPC::System::Simple qw(run system capture EXIT_ANY);

        run( [0..5], &#34;cat *.txt&#34;);             # Exit values 0-5 are OK

        system( [0..5], &#34;cat *.txt&#34;);          # This works the same way

        my @lines = capture( EXIT_ANY, &#34;cat *.txt&#34;); # Any exit is fine.</pre>

<p>The <code>run</code> and replacement <code>system</code> subroutines returns the exit value of the process:</p>

<pre class="sh_perl">        my $exit_value = run( [0..5], &#34;cat *.txt&#34;);

        # OR:

        my $exit_value = system( [0..5] &#34;cat *.txt&#34;);

        print &#34;Program exited with value $exit_value\n&#34;;</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="$EXITVAL"
>$EXITVAL</a></h3>

<p>The exit value of any command exeucted by <code>IPC::System::Simple</code> can always be retrieved from the <code>$IPC::System::Simple::EXITVAL</code> variable:</p>

<p>This is particularly useful when inspecting results from <code>capture</code>, which returns the captured text from the command.</p>

<pre class="sh_perl">        use IPC::System::Simple qw(capture $EXITVAL EXIT_ANY);

        my @enemies_defeated = capture(EXIT_ANY, &#34;defeat_evil&#34;, &#34;/dev/mordor&#34;);

        print &#34;Program exited with value $EXITVAL\n&#34;;</pre>

<p><code>$EXITVAL</code> will be set to <code>-1</code> if the command did not exit normally (eg, being terminated by a signal) or did not start. In this situation an exception will also be thrown.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="WINDOWS-SPECIFIC_NOTES"
>WINDOWS-SPECIFIC NOTES</a></h2>

<p>As of <code>IPC::System::Simple</code> v0.06, the <code>run</code> subroutine <i>when called with multiple arguments</i> will make available the full 32-bit exit value on Win32 systems. This is different from the previous versions of <code>IPC::System::Simple</code> and from Perl&#39;s in-build <code>system()</code> function, which can only handle 8-bit return values.</p>

<p>The <code>capture</code> subroutine always returns the 32-bit exit value under Windows. The <code>capture</code> subroutine also never uses the shell, even when passed a single argument.</p>

<p>Versions of <code>IPC::System::Simple</code> before v0.09 would not search the <code>PATH</code> environment variable when the multi-argument form of <code>run()</code> was called. Versions from v0.09 onwards correctly search the path provided the command is provided including the extension (eg, <code>notepad.exe</code> rather than just <code>notepad</code>, or <code>gvim.bat</code> rather than just <code>gvim</code>). If no extension is provided, <code>.exe</code> is assumed.</p>

<p>Signals are not supported on Windows systems. Sending a signal to a Windows process will usually cause it to exit with the signal number used.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DIAGNOSTICS"
>DIAGNOSTICS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='s'></a><a name="&#34;%s&#34;_failed_to_start:_&#34;%s&#34;"
>&#34;%s&#34; failed to start: &#34;%s&#34;</a></dt>

<dd>
<p>The command specified did not even start. It may not exist, or you may not have permission to use it. The reason it could not start (as determined from <code>$!</code>) will be provided.</p>

<dt><a name='s'></a><a name="&#34;%s&#34;_unexpectedly_returned_exit_value_%d"
>&#34;%s&#34; unexpectedly returned exit value %d</a></dt>

<dd>
<p>The command ran successfully, but returned an exit value we did not expect. The value returned is reported.</p>

<dt><a name='s'></a><a name="&#34;%s&#34;_died_to_signal_&#34;%s&#34;_(%d)_%s"
>&#34;%s&#34; died to signal &#34;%s&#34; (%d) %s</a></dt>

<dd>
<p>The command was killed by a signal. The name of the signal will be reported, or <code>UNKNOWN</code> if it cannot be determined. The signal number is always reported. If we detected that the process dumped core, then the string <code>and dumped core</code> is appeneded.</p>

<dt><a name='IPC'></a><a name="IPC::System::Simple::%s_called_with_no_arguments"
>IPC::System::Simple::%s called with no arguments</a></dt>

<dd>
<p>You attempted to call <code>run</code> or <code>capture</code> but did not provide any arguments at all. At the very lease you need to supply a command to run.</p>

<dt><a name='IPC'></a><a name="IPC::System::Simple::%s_called_with_no_command"
>IPC::System::Simple::%s called with no command</a></dt>

<dd>
<p>You called <code>run</code> or <code>capture</code> with a list of acceptable exit values, but no actual command.</p>

<dt><a name='IPC'></a><a name="IPC::System::Simple::%s_called_with_tainted_argument_&#34;%s&#34;"
>IPC::System::Simple::%s called with tainted argument &#34;%s&#34;</a></dt>

<dd>
<p>You called <code>run</code> or <code>capture</code> with tainted (untrusted) arguments, which is almost certainly a bad idea. To untaint your arguments you&#39;ll need to pass your data through a regular expression and use the resulting match variables. See <a href="/perldoc?perlsec#Laundering_and_Detecting_Tainted_Data" class="podlinkpod"
>&#34;Laundering and Detecting Tainted Data&#34; in perlsec</a> for more information.</p>

<dt><a name='IPC'></a><a name="IPC::System::Simple::%s_called_with_tainted_environment_$ENV{%s}"
>IPC::System::Simple::%s called with tainted environment $ENV{%s}</a></dt>

<dd>
<p>You called <code>run</code> or <code>capture</code> but part of your environment was tainted (untrusted). You should either delete the named environment variable before calling <code>run</code>, or set it to an untainted value (usually one set inside your program). See <a href="/perldoc?perlsec#Cleaning_Up_Your_Path" class="podlinkpod"
>&#34;Cleaning Up Your Path&#34; in perlsec</a> for more information.</p>

<dt><a name='Error'></a><a name="Error_in_IPC::System::Simple_plumbing:_&#34;%s&#34;_-_&#34;%s&#34;"
>Error in IPC::System::Simple plumbing: &#34;%s&#34; - &#34;%s&#34;</a></dt>

<dd>
<p>Implementing the <code>capture</code> command involves dark and terrible magicks involving pipes, and one of them has sprung a leak. This could be due to a lack of file descriptors, although there are other possibilities.</p>

<p>If you are able to reproduce this error, you are encouraged to submit a bug report according to the <a href="#Reporting_bugs" class="podlinkpod"
>&#34;Reporting bugs&#34;</a> section below.</p>

<dt><a name='Internal'></a><a name="Internal_error_in_IPC::System::Simple:_&#34;%s&#34;"
>Internal error in IPC::System::Simple: &#34;%s&#34;</a></dt>

<dd>
<p>You&#39;ve found a bug in <code>IPC::System::Simple</code>. Please check to see if an updated version of <code>IPC::System::Simple</code> is available. If not, please file a bug report according to the <a href="#Reporting_bugs" class="podlinkpod"
>&#34;Reporting bugs&#34;</a> section below.</p>

<dt><a name='IPC'></a><a name="IPC::System::Simple::%s_called_with_undefined_command"
>IPC::System::Simple::%s called with undefined command</a></dt>

<dd>
<p>You&#39;ve passed the undefined value as a command to be executed. While this is a very Zen-like action, it&#39;s not supported by Perl&#39;s current implementation.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DEPENDENCIES"
>DEPENDENCIES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module depends upon <a href="/perldoc?Win32%3A%3AProcess" class="podlinkpod"
>Win32::Process</a> when used on Win32 system. <code>Win32::Process</code> is bundled as a core module in ActivePerl 5.6 and above.</p>

<p>There are no non-core dependencies on non-Win32 systems.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COMPARISON_TO_OTHER_APIs"
>COMPARISON TO OTHER APIs <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Perl provides a range of in-built functions for handling external commands, and CPAN provides even more. The <code>IPC::System::Simple</code> differentiates itself from other options by providing:</p>

<dl>
<dt><a name='Extremely'></a><a name="Extremely_detailed_diagnostics"
>Extremely detailed diagnostics</a></dt>

<dd>
<p>The diagnostics produced by <code>IPC::System::Simple</code> are designed to provide as much information as possible. Rather than requiring the developer to inspect <code>$?</code>, <code>IPC::System::Simple</code> does the hard work for you.</p>

<p>If an odd exit status is provided, you&#39;re informed of what it is. If a signal kills your process, you are informed of both its name and number. If tainted data or environment prevents your command from running, you are informed of exactly which datais</p>

<dt><a name='Exceptions'></a><a name="Exceptions_on_failure"
>Exceptions on failure</a></dt>

<dd>
<p><code>IPC::System::Simple</code> takes an agressive approach to error handling. Rather than allow commands to fail silently, exceptions are thrown when unexpected results are seen. This allows for easy development using a try/catch style, and avoids the possibility of accidently continuing after a failed command.</p>

<dt><a name='Easy'></a><a name="Easy_access_to_exit_status"
>Easy access to exit status</a></dt>

<dd>
<p>The <code>run</code>, <code>system</code> and <code>capture</code> commands all set <code>$EXITVAL</code>, making it easy to determine the exit status of a command. Additionally, the <code>system</code> and <code>run</code> interfaces return the exit status.</p>

<dt><a name='Consistent'></a><a name="Consistent_interfaces"
>Consistent interfaces</a></dt>

<dd>
<p>When called with multiple arguments, the <code>run</code>, <code>system</code> and <code>capture</code> interfaces <i>never</i> invoke the shell. This differs from the in-built Perl <code>system</code> command which may invoke the shell under Windows when called with multiple arguments. It differs from the in-built Perl backticks operator which always invokes the shell.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>When <code>system</code> is exported, the exotic form <code>system { $cmd } @args</code> is not supported. Attemping to use the exotic form is a syntax error. This affects the calling package <i>only</i>. Use <code>CORE::system</code> if you need it, or consider using the <a href="/perldoc?autodie" class="podlinkpod"
>autodie</a> module to replace <code>system</code> with lexical scope.</p>

<p>Core dumps are only checked for when a process dies due to a signal. It is not believed thare exist any systems where processes can dump core without dying to a signal.</p>

<p><code>WIFSTOPPED</code> status is not checked, as perl never spawns processes with the <code>WUNTRACED</code> option.</p>

<p>Signals are not supported under Win32 systems, since they don&#39;t work at all like Unix signals. Win32 singals cause commands to exit with a given exit value, which this modules <i>does</i> capture.</p>

<p>Only 8-bit values are returned when <code>run()</code> or <code>system()</code> is called with a single value under Win32. Multi-argument calls to <code>run()</code> and <code>system()</code>, as well as the <code>runx()</code> and <code>systemx()</code> always return the 32-bit Windows return values.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Reporting_bugs"
>Reporting bugs</a></h2>

<p>Before reporting a bug, please check to ensure you are using the most recent version of <code>IPC::System::Simple</code>. Your problem may have already been fixed in a new release.</p>

<p>You can find the <code>IPC::System::Simple</code> bug-tracker at <a href="http://rt.cpan.org/Public/Dist/Display.html?Name=IPC-System-Simple" class="podlinkurl"
>http://rt.cpan.org/Public/Dist/Display.html?Name=IPC-System-Simple</a> . Please check to see if your bug has already been reported; if in doubt, report yours anyway.</p>

<p>Submitting a patch and/or failing test case will greatly expediate the fixing of bugs.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FEEDBACK"
>FEEDBACK <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you find this module useful, please consider rating it on the CPAN Ratings service at <a href="http://cpanratings.perl.org/rate/?distribution=IPC-System-Simple" class="podlinkurl"
>http://cpanratings.perl.org/rate/?distribution=IPC-System-Simple</a> .</p>

<p>The module author loves to hear how <code>IPC::System::Simple</code> has made your life better (or worse). Feedback can be sent to &#60;pjf@perltraining.com.au&#62;.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?autodie" class="podlinkpod"
>autodie</a> uses <code><a href="/~pjf/IPC-System-Simple-1.21/lib/IPC/System/Simple.pm" class="podlinkpod"
>IPC::System::Simple</a></code> to provide succeed-or-die replacements to <code>system</code> (and other built-ins) with lexical scope.</p>

<p><a href="/perldoc?POSIX" class="podlinkpod"
>POSIX</a>, <a href="/perldoc?IPC%3A%3ARun%3A%3ASimple" class="podlinkpod"
>IPC::Run::Simple</a>, <a href="/perldoc?perlipc" class="podlinkpod"
>perlipc</a>, <a href="/perldoc?perlport" class="podlinkpod"
>perlport</a>, <a href="/perldoc?IPC%3A%3ARun" class="podlinkpod"
>IPC::Run</a>, <a href="/perldoc?IPC%3A%3ARun3" class="podlinkpod"
>IPC::Run3</a>, <a href="/perldoc?Win32%3A%3AProcess" class="podlinkpod"
>Win32::Process</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Paul Fenwick &#60;pjf@cpan.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (C) 2006-2008 by Paul Fenwick</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself, either Perl version 5.6.0 or, at your option, any later version of Perl 5 you may have available.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78068 Uploads, 24686 Distributions
105902 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sun Apr 22 11:27:20 2012 GMT (0.411238193511963) @cpansearch1 -->
 </body>
</html>
