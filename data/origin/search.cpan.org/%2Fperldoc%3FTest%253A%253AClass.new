<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Test::Class - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Test-Class",3]);
    _gaq.push(["_setCustomVar",5,"Release","Test-Class-0.36",3]);
    _gaq.push(["_setCustomVar",3,"Module","Test::Class",3]);
    _gaq.push(["_setCustomVar",1,"Author","ADIE",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Test::Class">permalink</a></div>
  <a href="/~adie/">Adrian Howard</a> &gt;
  <a href="/~adie/Test-Class-0.36/">Test-Class-0.36</a> &gt;
  Test::Class
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/d3141bf2e7d23832a2ae5bf766def2fc?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/A/AD/ADIE/Test-Class-0.36.tar.gz">Test-Class-0.36.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Test%3A%3AClass;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~ADIE/Test-Class-0.36/lib/Test/Class.pm">Annotate this POD
(10)
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 3</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Test-Class">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.36 &nbsp;
<span class="noprint">
  <a href="/src/ADIE/Test-Class-0.36/lib/Test/Class.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#INTRODUCTION'>INTRODUCTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#A_brief_history_lesson'>A brief history lesson</a>
    <li class='indexItem indexItem2'><a href='#Why_you_should_use_Test::Class'>Why you should use Test::Class</a>
    <li class='indexItem indexItem2'><a href='#Why_you_should_not_use_Test::Class'>Why you should not use Test::Class</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#TEST_CLASSES'>TEST CLASSES</a>
  <li class='indexItem indexItem1'><a href='#METHOD_TYPES'>METHOD TYPES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#1)_Test_methods'>1) Test methods</a>
    <li class='indexItem indexItem2'><a href='#2)_Setup_and_teardown_methods'>2) Setup and teardown methods</a>
    <li class='indexItem indexItem2'><a href='#3)_Startup_and_shutdown_methods'>3) Startup and shutdown methods</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#RUNNING_TESTS'>RUNNING TESTS</a>
  <li class='indexItem indexItem1'><a href='#TEST_DESCRIPTIONS'>TEST DESCRIPTIONS</a>
  <li class='indexItem indexItem1'><a href='#RUNNING_ORDER_OF_METHODS'>RUNNING ORDER OF METHODS</a>
  <li class='indexItem indexItem1'><a href='#HANDLING_EXCEPTIONS'>HANDLING EXCEPTIONS</a>
  <li class='indexItem indexItem1'><a href='#SKIPPED_TESTS'>SKIPPED TESTS</a>
  <li class='indexItem indexItem1'><a href='#TO_DO_TESTS'>TO DO TESTS</a>
  <li class='indexItem indexItem1'><a href='#EXTENDING_TEST_CLASSES_BY_INHERITANCE'>EXTENDING TEST CLASSES BY INHERITANCE</a>
  <li class='indexItem indexItem1'><a href='#RUNNING_INDIVIDUAL_TESTS'>RUNNING INDIVIDUAL TESTS</a>
  <li class='indexItem indexItem1'><a href='#ORGANISING_YOUR_TEST_CLASSES'>ORGANISING YOUR TEST CLASSES</a>
  <li class='indexItem indexItem1'><a href='#A_NOTE_ON_LOADING_TEST_CLASSES'>A NOTE ON LOADING TEST CLASSES</a>
  <li class='indexItem indexItem1'><a href='#GENERAL_FILTERING_OF_TESTS'>GENERAL FILTERING OF TESTS</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Creating_and_running_tests'>Creating and running tests</a>
    <li class='indexItem indexItem2'><a href='#Fetching_and_setting_a_method&#39;s_test_number'>Fetching and setting a method&#39;s test number</a>
    <li class='indexItem indexItem2'><a href='#Support_methods'>Support methods</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#HELP_FOR_CONFUSED_JUNIT_USERS'>HELP FOR CONFUSED JUNIT USERS</a>
  <li class='indexItem indexItem1'><a href='#OTHER_MODULES_FOR_XUNIT_TESTING_IN_PERL'>OTHER MODULES FOR XUNIT TESTING IN PERL</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#COMMUNITY'>COMMUNITY</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#perl-qa'>perl-qa</a>
    <li class='indexItem indexItem2'><a href='#perlmonks'>perlmonks</a>
    <li class='indexItem indexItem2'><a href='#CPAN::Forum'>CPAN::Forum</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#TO_DO'>TO DO</a>
  <li class='indexItem indexItem1'><a href='#ACKNOWLEDGMENTS'>ACKNOWLEDGMENTS</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#LICENCE'>LICENCE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Test::Class - Easily create test classes in an xUnit/JUnit style</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  package Example::Test;
  use base qw(Test::Class);
  use Test::More;

  # setup methods are run before every test method. 
  sub make_fixture : Test(setup) {
      my $array = [1, 2];
      shift-&#62;{test_array} = $array;
  };

  # a test method that runs 1 test
  sub test_push : Test {
      my $array = shift-&#62;{test_array};
      push @$array, 3;
      is_deeply($array, [1, 2, 3], &#39;push worked&#39;);
  };

  # a test method that runs 4 tests
  sub test_pop : Test(4) {
      my $array = shift-&#62;{test_array};
      is(pop @$array, 2, &#39;pop = 2&#39;);
      is(pop @$array, 1, &#39;pop = 1&#39;);
      is_deeply($array, [], &#39;array empty&#39;);
      is(pop @$array, undef, &#39;pop = undef&#39;);
  };

  # teardown methods are run after every test method.
  sub teardown : Test(teardown) {
      my $array = shift-&#62;{test_array};
      diag(&#34;array = (@$array) after test(s)&#34;);
  };</pre>

<p>later in a nearby .t file</p>

<pre class="sh_perl">  #! /usr/bin/perl
  use Example::Test;

  # run all the test methods in Example::Test
  Test::Class-&#62;runtests;</pre>

<p>Outputs:</p>

<pre class="sh_perl">  1..5
  ok 1 - pop = 2
  ok 2 - pop = 1
  ok 3 - array empty
  ok 4 - pop = undef
  # array = () after test(s)
  ok 5 - push worked
  # array = (1 2 3) after test(s)</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Test::Class provides a simple way of creating classes and objects to test your code in an xUnit style.</p>

<p>Built using <a href="/perldoc?Test%3A%3ABuilder" class="podlinkpod"
>Test::Builder</a>, it was designed to work with other Test::Builder based modules (<a href="/perldoc?Test%3A%3AMore" class="podlinkpod"
>Test::More</a>, <a href="/perldoc?Test%3A%3ADifferences" class="podlinkpod"
>Test::Differences</a>, <a href="/perldoc?Test%3A%3AException" class="podlinkpod"
>Test::Exception</a>, etc.).</p>

<p><i>Note:</i> This module will make more sense, if you are already familiar with the &#34;standard&#34; mechanisms for testing perl code. Those unfamiliar with <a href="/perldoc?Test%3A%3AHarness" class="podlinkpod"
>Test::Harness</a>, <a href="/perldoc?Test%3A%3ASimple" class="podlinkpod"
>Test::Simple</a>, <a href="/perldoc?Test%3A%3AMore" class="podlinkpod"
>Test::More</a> and friends should go take a look at them now. <a href="/perldoc?Test%3A%3ATutorial" class="podlinkpod"
>Test::Tutorial</a> is a good starting point.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INTRODUCTION"
>INTRODUCTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="A_brief_history_lesson"
>A brief history lesson</a></h2>

<p>In 1994 Kent Beck wrote a testing framework for Smalltalk called SUnit. It was popular. You can read a copy of his original paper at <a href="http://www.xprogramming.com/testfram.htm" class="podlinkurl"
>http://www.xprogramming.com/testfram.htm</a>.</p>

<p>Later Kent Beck and Erich Gamma created JUnit for testing Java <a href="http://www.junit.org/" class="podlinkurl"
>http://www.junit.org/</a>. It was popular too.</p>

<p>Now there are xUnit frameworks for every language from Ada to XSLT. You can find a list at <a href="http://www.xprogramming.com/software.htm" class="podlinkurl"
>http://www.xprogramming.com/software.htm</a>.</p>

<p>While xUnit frameworks are traditionally associated with unit testing they are also useful in the creation of functional/acceptance tests.</p>

<p>Test::Class is (yet another) implementation of xUnit style testing in Perl.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Why_you_should_use_Test::Class"
>Why you should use Test::Class</a></h2>

<p>Test::Class attempts to provide simple xUnit testing that integrates simply with the standard perl *.t style of testing. In particular:</p>

<ul>
<li>All the advantages of xUnit testing. You can easily create test fixtures and isolate tests. It provides a framework that should be familiar to people who have used other xUnit style test systems.</li>

<li>It is built with <a href="/perldoc?Test%3A%3ABuilder" class="podlinkpod"
>Test::Builder</a> and should co-exist happily with all other Test::Builder based modules. This makes using test classes in *.t scripts, and refactoring normal tests into test classes, much simpler because:
<ul>
<li>You do not have to learn a new set of new test APIs and can continue using ok(), like(), etc. from <a href="/perldoc?Test%3A%3AMore" class="podlinkpod"
>Test::More</a> and friends.</li>

<li>Skipping tests and todo tests are supported.</li>

<li>You can have normal tests and Test::Class classes co-existing in the same *.t script. You don&#39;t have to re-write an entire script, but can use test classes as and when it proves useful.</li>
</ul>
</li>

<li>You can easily package your tests as classes/modules, rather than *.t scripts. This simplifies reuse, documentation and distribution, encourages refactoring, and allows tests to be extended by inheritance.</li>

<li>You can have multiple setup/teardown methods. For example have one teardown method to clean up resources and another to check that class invariants still hold.</li>

<li>It can make running tests faster. Once you have refactored your *.t scripts into classes they can be easily run from a single script. This gains you the (often considerable) start up time that each separate *.t script takes.</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Why_you_should_not_use_Test::Class"
>Why you should <i>not</i> use Test::Class</a></h2>

<ul>
<li>If your *.t scripts are working fine then don&#39;t bother with Test::Class. For simple test suites it is almost certainly overkill. Don&#39;t start thinking about using Test::Class until issues like duplicate code in your test scripts start to annoy.</li>

<li>If you are distributing your code it is yet another module that the user has to have to run your tests (unless you distribute it with your test suite of course).</li>

<li>If you are used to the TestCase/Suite/Runner class structure used by JUnit and similar testing frameworks you may find Test::Unit more familiar (but try reading <a href="#HELP_FOR_CONFUSED_JUNIT_USERS" class="podlinkpod"
>&#34;HELP FOR CONFUSED JUNIT USERS&#34;</a> before you give up).</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TEST_CLASSES"
>TEST CLASSES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A test class is just a class that inherits from Test::Class. Defining a test class is as simple as doing:</p>

<pre class="sh_perl">  package Example::Test;
  use base qw(Test::Class);</pre>

<p>Since Test::Class does not provide its own test functions, but uses those provided by <a href="/perldoc?Test%3A%3AMore" class="podlinkpod"
>Test::More</a> and friends, you will nearly always also want to have:</p>

<pre class="sh_perl">  use Test::More;</pre>

<p>to import the test functions into your test class.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHOD_TYPES"
>METHOD TYPES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There are three different types of method you can define using Test::Class.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="1)_Test_methods"
>1) Test methods</a></h2>

<p>You define test methods using the <a href="#Test" class="podlinkpod"
>Test</a> attribute. For example:</p>

<pre class="sh_perl">  package Example::Test;
  use base qw(Test::Class);
  use Test::More;

  sub subtraction : Test {
      is( 2-1, 1, &#39;subtraction works );
  };</pre>

<p>This declares the <code>subtraction</code> method as a test method that runs one test.</p>

<p>If your test method runs more than one test, you should put the number of tests in brackets like this:</p>

<pre class="sh_perl">  sub addition : Test(2) {
      is(10 + 20, 30, &#39;addition works&#39;);
      is(20 + 10, 30, &#39;  both ways&#39;);
  };</pre>

<p>If you don&#39;t know the number of tests at compile time you can use <code>no_plan</code> like this.</p>

<pre class="sh_perl">  sub check_class : Test(no_plan) {
      my $objects = shift-&#62;{objects};
      isa_ok($_, &#34;Object&#34;) foreach @$objects;
  };</pre>

<p>or use the :Tests attribute, which acts just like <code>:Test</code> but defaults to <code>no_plan</code> if no number is given:</p>

<pre class="sh_perl">  sub check_class : Tests {
      my $objects = shift-&#62;{objects};
      isa_ok($_, &#34;Object&#34;) foreach @$objects;
  };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="2)_Setup_and_teardown_methods"
>2) Setup and teardown methods</a></h2>

<p>Setup and teardown methods are run before and after every test. For example:</p>

<pre class="sh_perl">  sub before : Test(setup)    { diag(&#34;running before test&#34;) };
  sub after  : Test(teardown) { diag(&#34;running after test&#34;) };</pre>

<p>You can use setup and teardown methods to create common objects used by all of your test methods (a test <i>fixture</i>) and store them in your Test::Class object, treating it as a hash. For example:</p>

<pre class="sh_perl">  sub pig : Test(setup) {
      my $self = shift;
      $self-&#62;{test_pig} = Pig-&#62;new;
  };

  sub born_hungry : Test {
      my $pig = shift-&#62;{test_pig};
      is($pig-&#62;hungry, &#39;pigs are born hungry&#39;);
  };

  sub eats : Test(3) {
      my $pig = shift-&#62;{test_pig};
      ok(  $pig-&#62;feed,   &#39;pig fed okay&#39;);
      ok(! $pig-&#62;hungry, &#39;fed pig not hungry&#39;);
      ok(! $pig-&#62;feed,   &#39;cannot feed full pig&#39;);
  };</pre>

<p>You can also declare setup and teardown methods as running tests. For example you could check that the test pig survives each test method by doing:</p>

<pre class="sh_perl">  sub pig_alive : Test(teardown =&#62; 1) {
      my $pig = shift-&#62;{test_pig};
      ok($pig-&#62;alive, &#39;pig survived tests&#39; );
  };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="3)_Startup_and_shutdown_methods"
>3) Startup and shutdown methods</a></h2>

<p>Startup and shutdown methods are like setup and teardown methods for the whole test class. All the startup methods are run once when you start running a test class. All the shutdown methods are run once just before a test class stops running.</p>

<p>You can use these to create and destroy expensive objects that you don&#39;t want to have to create and destroy for every test - a database connection for example:</p>

<pre class="sh_perl">  sub db_connect : Test(startup) {
      shift-&#62;{dbi} = DBI-&#62;connect;
  };

  sub db_disconnect : Test(shutdown) {
      shift-&#62;{dbi}-&#62;disconnect;
  };</pre>

<p>Just like setup and teardown methods you can pass an optional number of tests to startup and shutdown methods. For example:</p>

<pre class="sh_perl">  sub example : Test(startup =&#62; 1) {
      ok(1, &#39;a startup method with one test&#39;);
  };</pre>

<p>If a startup method has a failing test or throws an exception then all other tests for the current test object are ignored.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="RUNNING_TESTS"
>RUNNING TESTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You run test methods with <a href="#runtests" class="podlinkpod"
>runtests()</a>. Doing:</p>

<pre class="sh_perl">  Test::Class-&#62;runtests</pre>

<p>runs all of the test methods in every loaded test class. This allows you to easily load multiple test classes in a *.t file and run them all.</p>

<pre class="sh_perl">  #! /usr/bin/perl
  
  # load all the test classes I want to run
  use Foo::Test;
  use Foo::Bar::Test;
  use Foo::Fribble::Test;
  use Foo::Ni::Test;
  
  # and run them all
  Test::Class-&#62;runtests;</pre>

<p>You can use <a href="/~adie/Test-Class-0.36/lib/Test/Class/Load.pm" class="podlinkpod"
>Test::Class::Load</a> to automatically load all the test classes in a given set of directories.</p>

<p>If you need finer control you can create individual test objects with <a href="#new" class="podlinkpod"
>new()</a>. For example to just run the tests in the test class <code>Foo::Bar::Test</code> you can do:</p>

<pre class="sh_perl">  Example::Test-&#62;new-&#62;runtests</pre>

<p>You can also pass <a href="#runtests" class="podlinkpod"
>runtests()</a> a list of test objects to run. For example:</p>

<pre class="sh_perl">  my $o1 = Example::Test-&#62;new;
  my $o2 = Another::Test-&#62;new;
  # runs all the tests in $o1 and $o2
  $o1-&#62;runtests($o2);</pre>

<p>Since, by definition, the base Test::Class has no tests you could also have written:</p>

<pre class="sh_perl">  my $o1 = Example::Test-&#62;new;
  my $o2 = Another::Test-&#62;new;
  Test::Class-&#62;runtests($o1, $o2);</pre>

<p>If you pass <a href="#runtests" class="podlinkpod"
>runtests()</a> class names it will automatically create test objects for you, so the above can be written more compactly as:</p>

<pre class="sh_perl">  Test::Class-&#62;runtests(qw( Example::Test Another::Test ))</pre>

<p>In all of the above examples <a href="#runtests" class="podlinkpod"
>runtests()</a> will look at the number of tests both test classes run and output an appropriate test header for <a href="/perldoc?Test%3A%3AHarness" class="podlinkpod"
>Test::Harness</a> automatically.</p>

<p>What happens if you run test classes and normal tests in the same script? For example:</p>

<pre class="sh_perl">  Test::Class-&#62;runtests;
  ok(Example-&#62;new-&#62;foo, &#39;a test not in the test class&#39;);
  ok(Example-&#62;new-&#62;bar, &#39;ditto&#39;);</pre>

<p><a href="/perldoc?Test%3A%3AHarness" class="podlinkpod"
>Test::Harness</a> will complain that it saw more tests than it expected since the test header output by <a href="#runtests" class="podlinkpod"
>runtests()</a> will not include the two normal tests.</p>

<p>To overcome this problem you can pass an integer value to <a href="#runtests" class="podlinkpod"
>runtests()</a>. This is added to the total number of tests in the test header. So the problematic example can be rewritten as follows:</p>

<pre class="sh_perl">  Test::Class-&#62;runtests(+2);
  ok(Example-&#62;new-&#62;foo, &#39;a test not in the test class&#39;);
  ok(Example-&#62;new-&#62;bar, &#39;ditto&#39;);</pre>

<p>If you prefer to write your test plan explicitly you can use <a href="#expected_tests" class="podlinkpod"
>expected_tests()</a> to find out the number of tests a class/object is expected to run.</p>

<p>Since <a href="#runtests" class="podlinkpod"
>runtests()</a> will not output a test plan if one has already been set the previous example can be written as:</p>

<pre class="sh_perl">  plan tests =&#62; Test::Class-&#62;expected_tests(+2);
  Test::Class-&#62;runtests;
  ok(Example-&#62;new-&#62;foo, &#39;a test not in the test class&#39;);
  ok(Example-&#62;new-&#62;bar, &#39;ditto&#39;);</pre>

<p><i>Remember:</i> Test objects are just normal perl objects. Test classes are just normal perl classes. Setup, test and teardown methods are just normal methods. You are completely free to have other methods in your class that are called from your test methods, or have object specific <code>new</code> and <code>DESTROY</code> methods.</p>

<p>In particular you can override the new() method to pass parameters to your test object, or re-define the number of tests a method will run. See <a href="#num_method_tests" class="podlinkpod"
>num_method_tests()</a> for an example.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TEST_DESCRIPTIONS"
>TEST DESCRIPTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The test functions you import from <a href="/perldoc?Test%3A%3AMore" class="podlinkpod"
>Test::More</a> and other <a href="/perldoc?Test%3A%3ABuilder" class="podlinkpod"
>Test::Builder</a> based modules usually take an optional third argument that specifies the test description, for example:</p>

<pre class="sh_perl">  is $something, $something_else, &#39;a description of my test&#39;;</pre>

<p>If you do not supply a test description, and the test function does not supply its own default, then Test::Class will use the name of the currently running test method, replacing all &#34;_&#34; characters with spaces so:</p>

<pre class="sh_perl">  sub one_plus_one_is_two : Test {
      is 1+1, 2;
  }</pre>

<p>will result in:</p>

<pre class="sh_perl">  ok 1 - one plus one is two</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="RUNNING_ORDER_OF_METHODS"
>RUNNING ORDER OF METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Methods of each type are run in the following order:</p>

<ol>
<li>All of the startup methods in alphabetical order</li>

<li>For each test method, in alphabetical order:
<ul>
<li>All of the setup methods in alphabetical order</li>

<li>The test method.</li>

<li>All of the teardown methods in alphabetical order</li>
</ul>
</li>

<li>All of the shutdown methods in alphabetical order.</li>
</ol>

<p>Most of the time you should not care what order tests are run in, but it can occasionally be useful to force some test methods to be run early. For example:</p>

<pre class="sh_perl">  sub _check_new {
      my $self = shift;
      isa_ok(Object-&#62;new, &#34;Object&#34;) or $self-&#62;BAILOUT(&#39;new fails!&#39;);
  };</pre>

<p>The leading <code>_</code> will force the above method to run first - allowing the entire suite to be aborted before any other test methods run.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="HANDLING_EXCEPTIONS"
>HANDLING EXCEPTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If a startup, setup, test, teardown or shutdown method dies then <a href="#runtests" class="podlinkpod"
>runtests()</a> will catch the exception and fail any remaining test. For example:</p>

<pre class="sh_perl">  sub test_object : Test(2) {
      my $object = Object-&#62;new;
      isa_ok( $object, &#34;Object&#34; ) or die &#34;could not create object\n&#34;;
      ok( $object-&#62;open, &#34;open worked&#34; );
  };</pre>

<p>will produce the following if the first test failed:</p>

<pre class="sh_perl">  not ok 1 - The object isa Object
  #   Failed test &#39;The object isa Object&#39;
  #   at /Users/adrianh/Desktop/foo.pl line 14.
  #   (in MyTest-&#62;test_object)
  #     The object isn&#39;t defined
  not ok 2 - test_object died (could not create object)
  #   Failed test &#39;test_object died (could not create object)&#39;
  #   at /Users/adrianh/Desktop/foo.pl line 19.
  #   (in MyTest-&#62;test_object)</pre>

<p>This can considerably simplify testing code that throws exceptions.</p>

<p>Rather than having to explicitly check that the code exited normally (e.g. with <a href="/perldoc?Test%3A%3AException#lives_ok" class="podlinkpod"
>&#34;lives_ok&#34; in Test::Exception</a>) the test will fail automatically - without aborting the other test methods. For example contrast:</p>

<pre class="sh_perl">  use Test::Exception;

  my $file;
  lives_ok { $file = read_file(&#39;test.txt&#39;) } &#39;file read&#39;;
  is($file, &#34;content&#34;, &#39;test file read&#39;);</pre>

<p>with:</p>

<pre class="sh_perl">  sub read_file : Test {
      is(read_file(&#39;test.txt&#39;), &#34;content&#34;, &#39;test file read&#39;);
  };</pre>

<p>If more than one test remains after an exception then the first one is failed, and the remaining ones are skipped.</p>

<p>Startup methods are a special case. Since startup methods will usually be creating state needed by all the other test methods an exception within a startup method will prevent all other test methods running.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SKIPPED_TESTS"
>SKIPPED TESTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can skip the rest of the tests in a method by returning from the method before all the test have finished running. The value returned is used as the reason for the tests being skipped.</p>

<p>This makes managing tests that can be skipped for multiple reasons very simple. For example:</p>

<pre class="sh_perl">  sub flying_pigs : Test(5) {
      my $pig = Pig-&#62;new;
      isa_ok($pig, &#39;Pig&#39;)           or return(&#34;cannot breed pigs&#34;)
      can_ok($pig, &#39;takeoff&#39;)       or return(&#34;pigs don&#39;t fly here&#34;);
      ok($pig-&#62;takeoff, &#39;takeoff&#39;)  or return(&#34;takeoff failed&#34;);
      ok( $pig-&#62;altitude &#62; 0, &#39;Pig is airborne&#39; );
      ok( $pig-&#62;airspeed &#62; 0, &#39;  and moving&#39;    );
  };</pre>

<p>If you run this test in an environment where <code>Pig-&#62;new</code> worked and the takeoff method existed, but failed when ran, you would get:</p>

<pre class="sh_perl">  ok 1 - The object isa Pig
  ok 2 - can takeoff
  not ok 3 - takeoff
  ok 4 # skip takeoff failed
  ok 5 # skip takeoff failed</pre>

<p>You can also skip tests just as you do in Test::More or Test::Builder - see <a href="/perldoc?Test%3A%3AMore#Conditional_tests" class="podlinkpod"
>&#34;Conditional tests&#34; in Test::More</a> for more information.</p>

<p><i>Note:</i> if you want to skip tests in a method with <code>no_plan</code> tests then you have to explicitly skip the tests in the method - since Test::Class cannot determine how many tests (if any) should be skipped:</p>

<pre class="sh_perl">  sub test_objects : Tests {
      my $self = shift;
      my $objects = $self-&#62;{objects};
      if (@$objects) {
          isa_ok($_, &#34;Object&#34;) foreach (@$objects);
      } else {
          $self-&#62;builder-&#62;skip(&#34;no objects to test&#34;);
      };
  };</pre>

<p>Another way of overcoming this problem is to explicitly set the number of tests for the method at run time using <a href="#num_method_tests" class="podlinkpod"
>num_method_tests()</a> or <a href="#num_tests" class="podlinkpod"
>&#34;num_tests&#34;</a>.</p>

<p>You can make a test class skip all of its tests by setting <a href="/perldoc?SKIP_CLASS" class="podlinkpod"
>SKIP_CLASS()</a> before <a href="#runtests" class="podlinkpod"
>runtests()</a> is called.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TO_DO_TESTS"
>TO DO TESTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can create todo tests just as you do in <a href="/perldoc?Test%3A%3AMore" class="podlinkpod"
>Test::More</a> and <a href="/perldoc?Test%3A%3ABuilder" class="podlinkpod"
>Test::Builder</a> using the <code>$TODO</code> variable. For example:</p>

<pre class="sh_perl">  sub live_test : Test  {
      local $TODO = &#34;live currently unimplemented&#34;;
      ok(Object-&#62;live, &#34;object live&#34;);
  };</pre>

<p>See <a href="/perldoc?Test%3A%3AHarness#Todo_tests" class="podlinkpod"
>&#34;Todo tests&#34; in Test::Harness</a> for more information.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXTENDING_TEST_CLASSES_BY_INHERITANCE"
>EXTENDING TEST CLASSES BY INHERITANCE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can extend test methods by inheritance in the usual way. For example consider the following test class for a <code>Pig</code> object.</p>

<pre class="sh_perl">  package Pig::Test;
  use base qw(Test::Class);
  use Test::More;

  sub testing_class { &#34;Pig&#34; };
  sub new_args { (-age =&#62; 3) };

  sub setup : Test(setup) {
      my $self = shift;
      my $class = $self-&#62;testing_class;
      my @args = $self-&#62;new_args;
      $self-&#62;{pig} = $class-&#62;new( @args );
  };

  sub _creation : Test {
      my $self = shift;
      isa_ok($self-&#62;{pig}, $self-&#62;testing_class) 
              or $self-&#62;FAIL_ALL(&#39;Pig-&#62;new failed&#39;);
  };

  sub check_fields : Test {
      my $pig = shift-&#62;{pig};
      is($pig-&#62;age, 3, &#34;age accessed&#34;);
  };</pre>

<p>Next consider <code>NamedPig</code> a subclass of <code>Pig</code> where you can give your pig a name.</p>

<p>We want to make sure that all the tests for the <code>Pig</code> object still work for <code>NamedPig</code>. We can do this by subclassing <code>Pig::Test</code> and overriding the <code>testing_class</code> and <code>new_args</code> methods.</p>

<pre class="sh_perl">  package NamedPig::Test;
  use base qw(Pig::Test);
  use Test::More;

  sub testing_class { &#34;NamedPig&#34; };
  sub new_args { (shift-&#62;SUPER::new_args, -name =&#62; &#39;Porky&#39;) };</pre>

<p>Now we need to test the name method. We could write another test method, but we also have the option of extending the existing <code>check_fields</code> method.</p>

<pre class="sh_perl">  sub check_fields : Test(2) {
      my $self = shift;
      $self-&#62;SUPER::check_fields;   
      is($self-&#62;{pig}-&#62;name, &#39;Porky&#39;, &#39;name accessed&#39;);
  };</pre>

<p>While the above works, the total number of tests for the method is dependent on the number of tests in its <code>SUPER::check_fields</code>. If we add a test to <code>Pig::Test-&#62;check_fields</code> we will also have to update the number of tests of <code>NamedPig::test-&#62;check_fields</code>.</p>

<p>Test::Class allows us to state explicitly that we are adding tests to an existing method by using the <code>+</code> prefix. Since we are adding a single test to <code>check_fields</code> it can be rewritten as:</p>

<pre class="sh_perl">  sub check_fields : Test(+1) {
      my $self = shift;
      $self-&#62;SUPER::check_fields;
      is($self-&#62;{pig}-&#62;name, &#39;Porky&#39;, &#39;name accessed&#39;);
  };</pre>

<p>With the above definition you can add tests to <code>check_fields</code> in <code>Pig::Test</code> without affecting <code>NamedPig::Test</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="RUNNING_INDIVIDUAL_TESTS"
>RUNNING INDIVIDUAL TESTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>NOTE:</b> The exact mechanism for running individual tests is likely to change in the future.</p>

<p>Sometimes you just want to run a single test. Commenting out other tests or writing code to skip them can be a hassle, so you can specify the <code>TEST_METHOD</code> environment variable. The value is expected to be a valid regular expression and, if present, only runs test methods whose names match the regular expression. Startup, setup, teardown and shutdown tests will still be run.</p>

<p>One easy way of doing this is by specifying the environment variable <i>before</i> the <code>runtests</code> method is called.</p>

<p>Running a test named <code>customer_profile</code>:</p>

<pre class="sh_perl"> #! /usr/bin/perl
 use Example::Test;
      
 $ENV{TEST_METHOD} = &#39;customer_profile&#39;;
 Test::Class-&#62;runtests;</pre>

<p>Running all tests with <code>customer</code> in their name:</p>

<pre class="sh_perl"> #! /usr/bin/perl
 use Example::Test;
      
 $ENV{TEST_METHOD} = &#39;.*customer.*&#39;;
 Test::Class-&#62;runtests;</pre>

<p>If you specify an invalid regular expression, your tests will not be run:</p>

<pre class="sh_perl"> #! /usr/bin/perl
 use Example::Test;
      
 $ENV{TEST_METHOD} = &#39;C++&#39;;
 Test::Class-&#62;runtests;</pre>

<p>And when you run it:</p>

<pre class="sh_perl"> TEST_METHOD (C++) is not a valid regular expression: Search pattern \
 not terminated at (eval 17) line 1.</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ORGANISING_YOUR_TEST_CLASSES"
>ORGANISING YOUR TEST CLASSES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can, of course, organise your test modules as you wish. My personal preferences is:</p>

<ul>
<li>Name test classes with a suffix of <code>::Test</code> so the test class for the <code>Foo::Bar</code> module would be <code>Foo::Bar::Test</code>.</li>

<li>Place all test classes in <em>t/lib</em>.</li>
</ul>

<p>The <a href="/~adie/Test-Class-0.36/lib/Test/Class/Load.pm" class="podlinkpod"
>Test::Class::Load</a> provides a simple mechanism for easily loading all of the test classes in a given set of directories.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="A_NOTE_ON_LOADING_TEST_CLASSES"
>A NOTE ON LOADING TEST CLASSES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Due to its use of subroutine attributes Test::Class based modules must be loaded at compile rather than run time. This is because the :Test attribute is applied by a CHECK block.</p>

<p>This can be problematic if you want to dynamically load Test::Class modules. Basically while:</p>

<pre class="sh_perl">  require $some_test_class;</pre>

<p>will break, doing:</p>

<pre class="sh_perl">  BEGIN { require $some_test_class };</pre>

<p>will work just fine. For more information on CHECK blocks see <a href="/perldoc?perlmod#BEGIN,_CHECK,_INIT_and_END" class="podlinkpod"
>&#34;BEGIN, CHECK, INIT and END&#34; in perlmod</a>.</p>

<p>If you still can&#39;t arrange for your classes to be loaded at runtime, you could use an alternative mechanism for adding your tests:</p>

<pre class="sh_perl">  # sub test_something : Test(3) {...}
  # becomes
  sub test_something {...}
  __PACKAGE__-&#62;add_testinfo(&#39;test_something&#39;, test =&#62; 3);</pre>

<p>See the <a href="#add_testinfo" class="podlinkpod"
>add_testinfo</a> method for more details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="GENERAL_FILTERING_OF_TESTS"
>GENERAL FILTERING OF TESTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The use of $ENV{TEST_METHOD} to run just a subset of tests is useful, but sometimes it doesn&#39;t give the level of granularity that you desire. Another feature of this class is the ability to do filtering on other static criteria. In order to permit this, a generic filtering method is supported. This can be used by specifying coderefs to the &#39;add_filter&#39; method of this class.</p>

<p>In determining which tests should be run, all filters that have previously been specified via the add_filter method will be run in-turn for each normal test method. If <b>any</b> of these filters return a false value, the method will not be executed, or included in the number of tests. Note that filters will only be run for normal test methods, they are ignored for startup, shutdown, setup, and teardown test methods.</p>

<p>Note that test filters are global, and will affect all tests in all classes, not just the one that they were defined in.</p>

<p>An example of this mechanism that mostly simulates the use of TEST_METHOD above is:</p>

<pre class="sh_perl"> package MyTests;

 use Test::More;

 use base qw( Test::Class );

 my $MYTEST_METHOD = qr/^t_not_filtered$/;

 my $filter = sub {
    my ( $test_class, $test_method ) = @_;

    return $test_method =~ $MYTEST_METHOD;
 };
 Test::Class-&#62;add_filter( $filter );

 sub t_filtered : Test( 1 ) {
    fail( &#34;filtered test run&#34; );
 }

 sub t_not_filtered : Test( 1 ) {
    pass( &#34;unfiltered test run&#34; );
 }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Creating_and_running_tests"
>Creating and running tests</a></h2>

<dl>
<dt><a name="Test"
><b>Test</b></a></dt>

<dd>
<pre class="sh_perl">  # test methods
  sub method_name : Test { ... };
  sub method_name : Test(N) { ... };

  # setup methods
  sub method_name : Test(setup) { ... };
  sub method_name : Test(setup =&#62; N) { ... };

  # teardown methods
  sub method_name : Test(teardown) { ... };
  sub method_name : Test(teardown =&#62; N) { ... };

  # startup methods
  sub method_name : Test(startup) { ... };
  sub method_name : Test(startup =&#62; N) { ... };

  # shutdown methods
  sub method_name : Test(shutdown) { ... };
  sub method_name : Test(shutdown =&#62; N) { ... };</pre>

<p>Marks a startup, setup, test, teardown or shutdown method. See <a href="#runtests" class="podlinkpod"
>runtests()</a> for information on how to run methods declared with the <code>Test</code> attribute.</p>

<p>N specifies the number of tests the method runs.</p>

<ul>
<li>If N is an integer then the method should run exactly N tests.</li>

<li>If N is an integer with a <code>+</code> prefix then the method is expected to call its <code>SUPER::</code> method and extend it by running N additional tests.</li>

<li>If N is the string <code>no_plan</code> then the method can run an arbitrary number of tests.</li>
</ul>

<p>If N is not specified it defaults to <code>1</code> for test methods, and <code>0</code> for startup, setup, teardown and shutdown methods.</p>

<p>You can change the number of tests that a method runs using <a href="#num_method_tests" class="podlinkpod"
>num_method_tests()</a> or <a href="#num_tests" class="podlinkpod"
>num_tests()</a>.</p>

<dt><a name="Tests"
><b>Tests</b></a></dt>

<dd>
<pre class="sh_perl">  sub method_name : Tests { ... };
  sub method_name : Tests(N) { ... };</pre>

<p>Acts just like the <code>:Test</code> attribute, except that if the number of tests is not specified it defaults to <code>no_plan</code>. So the following are equivalent:</p>

<pre class="sh_perl">  sub silly1 :Test( no_plan ) { ok(1) foreach (1 .. rand 5) };
  sub silly2 :Tests           { ok(1) foreach (1 .. rand 5) };</pre>

<dt><a name="new"
><b>new</b></a></dt>

<dd>
<pre class="sh_perl">  $Tests = CLASS-&#62;new(KEY =&#62; VAL ...)
  $Tests2 = $Tests-&#62;new(KEY =&#62; VAL ...)</pre>

<p>Creates a new test object (blessed hashref) containing the specified key/value pairs.</p>

<p>If called as an object method the existing object&#39;s key/value pairs are copied into the new object. Any key/value pairs passed to <code>new</code> override those in the original object if duplicates occur.</p>

<p>Since the test object is passed to every test method as it runs it is a convenient place to store test fixtures. For example:</p>

<pre class="sh_perl">  sub make_fixture : Test(setup) {
      my $self = shift;
      $self-&#62;{object} = Object-&#62;new();
      $self-&#62;{dbh} = Mock::DBI-&#62;new(-type =&#62; normal);
  };

  sub test_open : Test {
      my $self = shift;
      my ($o, $dbh) = ($self-&#62;{object}, $self-&#62;{dbh});
      ok($o-&#62;open($dbh), &#34;opened ok&#34;);
  };</pre>

<p>See <a href="#num_method_tests" class="podlinkpod"
>num_method_tests()</a> for an example of overriding <code>new</code>.</p>

<dt><a name="expected_tests"
><b>expected_tests</b></a></dt>

<dd>
<pre class="sh_perl">  $n = $Tests-&#62;expected_tests
  $n = CLASS-&#62;expected_tests
  $n = $Tests-&#62;expected_tests(TEST, ...)
  $n = CLASS-&#62;expected_tests(TEST, ...)</pre>

<p>Returns the total number of tests that <a href="#runtests" class="podlinkpod"
>runtests()</a> will run on the specified class/object. This includes tests run by any setup and teardown methods.</p>

<p>Will return <code>no_plan</code> if the exact number of tests is undetermined (i.e. if any setup, test or teardown method has an undetermined number of tests).</p>

<p>The <code>expected_tests</code> of an object after <a href="#runtests" class="podlinkpod"
>runtests()</a> has been executed will include any run time changes to the expected number of tests made by <a href="#num_tests" class="podlinkpod"
>num_tests()</a> or <a href="#num_method_tests" class="podlinkpod"
>num_method_tests()</a>.</p>

<p><code>expected_tests</code> can also take an optional list of test objects, test classes and integers. In this case the result is the total number of expected tests for all the test/object classes (including the one the method was applied to) plus any integer values.</p>

<p><code>expected_tests</code> is useful when you&#39;re integrating one or more test classes into a more traditional test script, for example:</p>

<pre class="sh_perl">  use Test::More;
  use My::Test::Class;

  plan tests =&#62; My::Test::Class-&#62;expected_tests(+2);

  ok(whatever, &#39;a test&#39;);
  ok(whatever, &#39;another test&#39;);
  My::Test::Class-&#62;runtests;</pre>

<dt><a name="runtests"
><b>runtests</b></a></dt>

<dd>
<pre class="sh_perl">  $allok = $Tests-&#62;runtests
  $allok = CLASS-&#62;runtests
  $allok = $Tests-&#62;runtests(TEST, ...)
  $allok = CLASS-&#62;runtests(TEST, ...)</pre>

<p><code>runtests</code> is used to run test classes. At its most basic doing:</p>

<pre class="sh_perl">  $test-&#62;runtests</pre>

<p>will run the test methods of the test object $test, unless <code>$test-&#62;SKIP_CLASS</code> returns a true value.</p>

<p>Unless you have already specified a test plan using Test::Builder (or Test::More, et al) <code>runtests</code> will set the test plan just before the first method that runs a test is executed.</p>

<p>If the environment variable <code>TEST_VERBOSE</code> is set <code>runtests</code> will display the name of each test method before it runs like this:</p>

<pre class="sh_perl">  # My::Test::Class-&#62;my_test
  ok 1 - fribble
  # My::Test::Class-&#62;another_test
  ok 2 - bar</pre>

<p>Just like <a href="#expected_tests" class="podlinkpod"
>expected_tests()</a>, <code>runtests</code> can take an optional list of test object/classes and integers. All of the test object/classes are run. Any integers are added to the total number of tests shown in the test header output by <code>runtests</code>.</p>

<p>For example, you can run all the tests in test classes A, B and C, plus one additional normal test by doing:</p>

<pre class="sh_perl">    Test::Class-&#62;runtests(qw(A B C), +1);
    ok(1==1, &#39;non class test&#39;);</pre>

<p>Finally, if you call <code>runtests</code> on a test class without any arguments it will run all of the test methods of that class, and all subclasses of that class. For example:</p>

<pre class="sh_perl">  #! /usr/bin/perl
  # Test all the Foo stuff
  
  use Foo::Test;
  use Foo::Bar::Test;
  use Foo::Ni::Test;
  
  # run all the Foo*Test modules we just loaded
  Test::Class-&#62;runtests;</pre>

<dt><a name="SKIP_CLASS"
><b>SKIP_CLASS</b></a></dt>

<dd>
<pre class="sh_perl">  $reason = CLASS-&#62;SKIP_CLASS;
  CLASS-&#62;SKIP_CLASS( $reason );</pre>

<p>Determines whether the test class CLASS should run it&#39;s tests. If SKIP_CLASS returns a true value then <a href="#runtests" class="podlinkpod"
>runtests()</a> will not run any of the test methods in CLASS.</p>

<p>You can override the default on a class-by-class basis by supplying a new value to SKIP_CLASS. For example if you have an abstract base class that should not run just add the following to your module:</p>

<pre class="sh_perl">  My::Abstract::Test-&#62;SKIP_CLASS( 1 );</pre>

<p>This will not affect any sub-classes of <code>My::Abstract::Test</code> which will run as normal.</p>

<p>If the true value returned by SKIP_CLASS is anything other than &#34;1&#34; then a skip test is output using this value as the skip message. For example:</p>

<pre class="sh_perl">  My::Postgres::Test-&#62;SKIP_CLASS(
      $ENV{POSTGRES_HOME} ? 0 : &#39;$POSTGRES_HOME needs to be set&#39;
  );</pre>

<p>will output something like this if <code>POSTGRES_HOME</code> is not set</p>

<pre class="sh_perl">        ... other tests ...
        ok 123 # skip My::Postgres::Test  - $POSTGRES_HOME needs to be set
        ... more tests ...</pre>

<p>You can also override SKIP_CLASS for a class hierarchy. For example, to prevent any subclasses of My::Postgres::Test running we could override SKIP_CLASS like this:</p>

<pre class="sh_perl">  sub My::Postgres::Test::SKIP_CLASS {
      $ENV{POSTGRES_HOME} ? 0 : &#39;$POSTGRES_HOME needs to be set&#39;
  };</pre>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Fetching_and_setting_a_method&#39;s_test_number"
>Fetching and setting a method&#39;s test number</a></h2>

<dl>
<dt><a name="num_method_tests"
><b>num_method_tests</b></a></dt>

<dd>
<pre class="sh_perl">  $n = $Tests-&#62;num_method_tests($method_name)
  $Tests-&#62;num_method_tests($method_name, $n)
  $n = CLASS-&#62;num_method_tests($method_name)
  CLASS-&#62;num_method_tests($method_name, $n)</pre>

<p>Fetch or set the number of tests that the named method is expected to run.</p>

<p>If the method has an undetermined number of tests then $n should be the string <code>no_plan</code>.</p>

<p>If the method is extending the number of tests run by the method in a superclass then $n should have a <code>+</code> prefix.</p>

<p>When called as a class method any change to the expected number of tests applies to all future test objects. Existing test objects are unaffected.</p>

<p>When called as an object method any change to the expected number of tests applies to that object alone.</p>

<p><code>num_method_tests</code> is useful when you need to set the expected number of tests at object creation time, rather than at compile time.</p>

<p>For example, the following test class will run a different number of tests depending on the number of objects supplied.</p>

<pre class="sh_perl">  package Object::Test; 
  use base qw(Test::Class);
  use Test::More;

  sub new {
      my $class = shift;
      my $self = $class-&#62;SUPER::new(@_);
      my $num_objects = @{$self-&#62;{objects}};
      $self-&#62;num_method_tests(&#39;test_objects&#39;, $num_objects);
      return($self);
  };

  sub test_objects : Tests {
    my $self = shift;
    ok($_-&#62;open, &#34;opened $_&#34;) foreach @{$self-&#62;{objects}};
  };
  ...
  # This runs two tests
  Object::Test-&#62;new(objects =&#62; [$o1, $o2]);</pre>

<p>The advantage of setting the number of tests at object creation time, rather than using a test method without a plan, is that the number of expected tests can be determined before testing begins. This allows better diagnostics from <a href="#runtests" class="podlinkpod"
>runtests()</a>, <a href="/perldoc?Test%3A%3ABuilder" class="podlinkpod"
>Test::Builder</a> and <a href="/perldoc?Test%3A%3AHarness" class="podlinkpod"
>Test::Harness</a>.</p>

<p><code>num_method_tests</code> is a protected method and can only be called by subclasses of Test::Class. It fetches or sets the expected number of tests for the methods of the class it was <i>called in</i>, not the methods of the object/class it was <i>applied to</i>. This allows test classes that use <code>num_method_tests</code> to be subclassed easily.</p>

<p>For example, consider the creation of a subclass of Object::Test that ensures that all the opened objects are read-only:</p>

<pre class="sh_perl">  package Special::Object::Test;
  use base qw(Object::Test);
  use Test::More;

  sub test_objects : Test(+1) {
      my $self = shift;
      $self-&#62;SUPER::test_objects;
      my @bad_objects = grep {! $_-&#62;read_only} (@{$self-&#62;{objects}});
      ok(@bad_objects == 0, &#34;all objects read only&#34;);
  };
  ...
  # This runs three tests
  Special::Object::Test-&#62;new(objects =&#62; [$o1, $o2]);</pre>

<p>Since the call to <code>num_method_tests</code> in Object::Test only affects the <code>test_objects</code> of Object::Test, the above works as you would expect.</p>

<dt><a name="num_tests"
><b>num_tests</b></a></dt>

<dd>
<pre class="sh_perl">  $n = $Tests-&#62;num_tests
  $Tests-&#62;num_tests($n)
  $n = CLASS-&#62;num_tests
  CLASS-&#62;num_tests($n)</pre>

<p>Set or return the number of expected tests associated with the currently running test method. This is the same as calling <a href="#num_method_tests" class="podlinkpod"
>num_method_tests()</a> with a method name of <a href="#current_method" class="podlinkpod"
>current_method()</a>.</p>

<p>For example:</p>

<pre class="sh_perl">  sub txt_files_readable : Tests {
      my $self = shift;
      my @files = &#60;*.txt&#62;;
      $self-&#62;num_tests(scalar(@files));
      ok(-r $_, &#34;$_ readable&#34;) foreach (@files);
  };</pre>

<p>Setting the number of expected tests at run time, rather than just having a <code>no_plan</code> test method, allows <a href="#runtests" class="podlinkpod"
>runtests()</a> to display appropriate diagnostic messages if the method runs a different number of tests.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Support_methods"
>Support methods</a></h2>

<dl>
<dt><a name="builder"
><b>builder</b></a></dt>

<dd>
<pre class="sh_perl">  $Tests-&#62;builder</pre>

<p>Returns the underlying <a href="/perldoc?Test%3A%3ABuilder" class="podlinkpod"
>Test::Builder</a> object that Test::Class uses. For example:</p>

<pre class="sh_perl">  sub test_close : Test {
      my $self = shift;
      my ($o, $dbh) = ($self-&#62;{object}, $self-&#62;{dbh});
      $self-&#62;builder-&#62;ok($o-&#62;close($dbh), &#34;closed ok&#34;);
  };</pre>

<dt><a name="current_method"
><b>current_method</b></a></dt>

<dd>
<pre class="sh_perl">  $method_name = $Tests-&#62;current_method
  $method_name = CLASS-&#62;current_method</pre>

<p>Returns the name of the test method currently being executed by <a href="#runtests" class="podlinkpod"
>runtests()</a>, or <code>undef</code> if <a href="#runtests" class="podlinkpod"
>runtests()</a> has not been called.</p>

<p>The method name is also available in the setup and teardown methods that run before and after the test method. This can be useful in producing diagnostic messages, for example:</p>

<pre class="sh_perl">  sub test_invarient : Test(teardown =&#62; 1) {
      my $self = shift;
      my $m = $self-&#62;current_method;
      ok($self-&#62;invarient_ok, &#34;class okay after $m&#34;);
  };</pre>

<dt><a name="BAILOUT"
><b>BAILOUT</b></a></dt>

<dd>
<pre class="sh_perl">  $Tests-&#62;BAILOUT($reason)
  CLASS-&#62;BAILOUT($reason)</pre>

<p>Things are going so badly all testing should terminate, including running any additional test scripts invoked by <a href="/perldoc?Test%3A%3AHarness" class="podlinkpod"
>Test::Harness</a>. This is exactly the same as doing:</p>

<pre class="sh_perl">  $self-&#62;builder-&#62;BAILOUT</pre>

<p>See <a href="/perldoc?Test%3A%3ABuilder#BAILOUT" class="podlinkpod"
>&#34;BAILOUT&#34; in Test::Builder</a> for details. Any teardown and shutdown methods are <i>not</i> run.</p>

<dt><a name="FAIL_ALL"
><b>FAIL_ALL</b></a></dt>

<dd>
<pre class="sh_perl">  $Tests-&#62;FAIL_ALL($reason)
  CLASS-&#62;FAIL_ALL($reason)</pre>

<p>Things are going so badly all the remaining tests in the current script should fail. Exits immediately with the number of tests failed, or <code>254</code> if more than 254 tests were run. Any teardown methods are <i>not</i> run.</p>

<p>This does not affect the running of any other test scripts invoked by <a href="/perldoc?Test%3A%3AHarness" class="podlinkpod"
>Test::Harness</a>.</p>

<p>For example, if all your tests rely on the ability to create objects then you might want something like this as an early test:</p>

<pre class="sh_perl">  sub _test_new : Test(3) {
      my $self = shift;
      isa_ok(Object-&#62;new, &#34;Object&#34;) 
          || $self-&#62;FAIL_ALL(&#39;cannot create Objects&#39;);
      ...
  };</pre>

<dt><a name="SKIP_ALL"
><b>SKIP_ALL</b></a></dt>

<dd>
<pre class="sh_perl">  $Tests-&#62;SKIP_ALL($reason)
  CLASS-&#62;SKIP_ALL($reason)</pre>

<p>Things are going so badly all the remaining tests in the current script should be skipped. Exits immediately with <code>0</code> - teardown methods are <i>not</i> run.</p>

<p>This does not affect the running of any other test scripts invoked by <a href="/perldoc?Test%3A%3AHarness" class="podlinkpod"
>Test::Harness</a>.</p>

<p>For example, if you had a test script that only applied to the darwin OS you could write:</p>

<pre class="sh_perl">  sub _darwin_only : Test(setup) {
      my $self = shift;
      $self-&#62;SKIP_ALL(&#34;darwin only&#34;) unless $^O eq &#34;darwin&#34;;    
  };</pre>

<dt><a name="add_testinfo"
><b>add_testinfo</b></a></dt>

<dd>
<pre class="sh_perl">  CLASS-&#62;add_test($name, $type, $num_tests)</pre>

<p>Chiefly for use by libraries like <a href="/perldoc?Test%3A%3AClass%3A%3ASugar" class="podlinkpod"
>Test::Class::Sugar</a>, which can&#39;t use the <code>:Test(...)</code> interfaces make test methods. <code>add_testinfo</code> informs the class about a test method that has been defined without a <code>Test</code>, <code>Tests</code> or other attribute.</p>

<p><code>$name</code> is the name of the method, <code>$type</code> must be one of <code>startup</code>, <code>setup</code>, <code>test</code>, <code>teardown</code> or <code>shutdown</code>, and <code>$num_tests</code> has the same meaning as <code>N</code> in the description of the <a href="#Test" class="podlinkpod"
>Test</a> attribute.</p>

<dt><a name="add_filter"
><b>add_filter</b></a></dt>

<dd>
<pre class="sh_perl">    CLASS-&#62;add_filter($filter_coderef);</pre>

<p>Adds a filtering coderef. Each filter is passed a test class and method name and returns a boolean. All filters are applied globally in the order they were added. If any filter returns false the test method is not run or included in the number of tests.</p>

<p>Note that filters will only be run for normal test methods, they are ignored for startup, shutdown, setup, and teardown test methods.</p>

<p>See the section on the <a href="#GENERAL_FILTERING_OF_TESTS" class="podlinkpod"
>&#34;GENERAL FILTERING OF TESTS&#34;</a> for more information.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="HELP_FOR_CONFUSED_JUNIT_USERS"
>HELP FOR CONFUSED JUNIT USERS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This section is for people who have used JUnit (or similar) and are confused because they don&#39;t see the TestCase/Suite/Runner class framework they were expecting. Here we take each of the major classes in JUnit and compare them with their equivalent Perl testing modules.</p>

<dl>
<dt><a name='Class'></a><a name="Class_Assert"
><b>Class Assert</b></a></dt>

<dd>
<p>The test assertions provided by Assert correspond to the test functions provided by the <a href="/perldoc?Test%3A%3ABuilder" class="podlinkpod"
>Test::Builder</a> based modules (<a href="/perldoc?Test%3A%3AMore" class="podlinkpod"
>Test::More</a>, <a href="/perldoc?Test%3A%3AException" class="podlinkpod"
>Test::Exception</a>, <a href="/perldoc?Test%3A%3ADifferences" class="podlinkpod"
>Test::Differences</a>, etc.)</p>

<p>Unlike JUnit the test functions supplied by Test::More et al do <i>not</i> throw exceptions on failure. They just report the failure to STDOUT where it is collected by <a href="/perldoc?Test%3A%3AHarness" class="podlinkpod"
>Test::Harness</a>. This means that where you have</p>

<pre class="sh_perl">  sub foo : Test(2) {
      ok($foo-&#62;method1);
      ok($foo-&#62;method2);
  };</pre>

<p>The second test <i>will</i> run if the first one fails. You can emulate the JUnit way of doing it by throwing an explicit exception on test failure:</p>

<pre class="sh_perl">  sub foo : Test(2) {
      ok($foo-&#62;method1) or die &#34;method1 failed&#34;;
      ok($foo-&#62;method2);
  };</pre>

<p>The exception will be caught by Test::Class and the other test automatically failed.</p>

<dt><a name='Class'></a><a name="Class_TestCase"
><b>Class TestCase</b></a></dt>

<dd>
<p>Test::Class corresponds to TestCase in JUnit.</p>

<p>In Test::Class setup, test and teardown methods are marked explicitly using the <a href="#Test" class="podlinkpod"
>Test</a> attribute. Since we need to know the total number of tests to provide a test plan for <a href="/perldoc?Test%3A%3AHarness" class="podlinkpod"
>Test::Harness</a> we also state how many tests each method runs.</p>

<p>Unlike JUnit you can have multiple setup/teardown methods in a class.</p>

<dt><a name='Class'></a><a name="Class_TestSuite"
><b>Class TestSuite</b></a></dt>

<dd>
<p>Test::Class also does the work that would be done by TestSuite in JUnit.</p>

<p>Since the methods are marked with attributes Test::Class knows what is and isn&#39;t a test method. This allows it to run all the test methods without having the developer create a suite manually, or use reflection to dynamically determine the test methods by name. See the <a href="#runtests" class="podlinkpod"
>runtests()</a> method for more details.</p>

<p>The running order of the test methods is fixed in Test::Class. Methods are executed in alphabetical order.</p>

<p>Unlike JUnit, Test::Class currently does not allow you to run individual test methods.</p>

<dt><a name='Class'></a><a name="Class_TestRunner"
><b>Class TestRunner</b></a></dt>

<dd>
<p><a href="/perldoc?Test%3A%3AHarness" class="podlinkpod"
>Test::Harness</a> does the work of the TestRunner in JUnit. It collects the test results (sent to STDOUT) and collates the results.</p>

<p>Unlike JUnit there is no distinction made by Test::Harness between errors and failures. However, it does support skipped and todo test - which JUnit does not.</p>

<p>If you want to write your own test runners you should look at <a href="/perldoc?Test%3A%3AHarness%3A%3AStraps" class="podlinkpod"
>Test::Harness::Straps</a>.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OTHER_MODULES_FOR_XUNIT_TESTING_IN_PERL"
>OTHER MODULES FOR XUNIT TESTING IN PERL <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>In addition to Test::Class there are two other distributions for xUnit testing in perl. Both have a longer history than Test::Class and might be more suitable for your needs.</p>

<p>I am biased since I wrote Test::Class - so please read the following with appropriate levels of scepticism. If you think I have misrepresented the modules please let me know.</p>

<dl>
<dt><a name='Test'></a><a name="Test::SimpleUnit"
><b>Test::SimpleUnit</b></a></dt>

<dd>
<p>A very simple unit testing framework. If you are looking for a lightweight single module solution this might be for you.</p>

<p>The advantage of <a href="/perldoc?Test%3A%3ASimpleUnit" class="podlinkpod"
>Test::SimpleUnit</a> is that it is simple! Just one module with a smallish API to learn.</p>

<p>Of course this is also the disadvantage.</p>

<p>It&#39;s not class based so you cannot create testing classes to reuse and extend.</p>

<p>It doesn&#39;t use <a href="/perldoc?Test%3A%3ABuilder" class="podlinkpod"
>Test::Builder</a> so it&#39;s difficult to extend or integrate with other testing modules. If you are already familiar with <a href="/perldoc?Test%3A%3ABuilder" class="podlinkpod"
>Test::Builder</a>, <a href="/perldoc?Test%3A%3AMore" class="podlinkpod"
>Test::More</a> and friends you will have to learn a new test assertion API. It does not support <a href="/perldoc?Test%3A%3AHarness#Todo_tests" class="podlinkpod"
>todo tests</a>.</p>

<dt><a name='Test'></a><a name="Test::Unit"
><b>Test::Unit</b></a></dt>

<dd>
<p><a href="/perldoc?Test%3A%3AUnit" class="podlinkpod"
>Test::Unit</a> is a port of JUnit <a href="http://www.junit.org/" class="podlinkurl"
>http://www.junit.org/</a> into perl. If you have used JUnit then the Test::Unit framework should be very familiar.</p>

<p>It is class based so you can easily reuse your test classes and extend by subclassing. You get a nice flexible framework you can tweak to your heart&#39;s content. If you can run Tk you also get a graphical test runner.</p>

<p>However, Test::Unit is not based on <a href="/perldoc?Test%3A%3ABuilder" class="podlinkpod"
>Test::Builder</a>. You cannot easily move Test::Builder based test functions into Test::Unit based classes. You have to learn another test assertion API.</p>

<p>Test::Unit implements it&#39;s own testing framework separate from <a href="/perldoc?Test%3A%3AHarness" class="podlinkpod"
>Test::Harness</a>. You can retrofit *.t scripts as unit tests, and output test results in the format that <a href="/perldoc?Test%3A%3AHarness" class="podlinkpod"
>Test::Harness</a> expects, but things like <a href="/perldoc?Test%3A%3AHarness#Todo_tests" class="podlinkpod"
>todo tests</a> and <a href="/perldoc?Test%3A%3AHarness#Skipping_tests" class="podlinkpod"
>skipping tests</a> are not supported.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>None known at the time of writing.</p>

<p>If you find any bugs please let me know by e-mail at &#60;adrianh@quietstars.com&#62;, or report the problem with <a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=Test-Class" class="podlinkurl"
>http://rt.cpan.org/NoAuth/Bugs.html?Dist=Test-Class</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COMMUNITY"
>COMMUNITY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="perl-qa"
>perl-qa</a></h2>

<p>If you are interested in testing using Perl I recommend you visit <a href="http://qa.perl.org/" class="podlinkurl"
>http://qa.perl.org/</a> and join the excellent perl-qa mailing list. See <a href="http://lists.perl.org/showlist.cgi?name=perl-qa" class="podlinkurl"
>http://lists.perl.org/showlist.cgi?name=perl-qa</a> for details on how to subscribe.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="perlmonks"
>perlmonks</a></h2>

<p>You can find users of Test::Class, including the module author, on <a href="http://www.perlmonks.org/" class="podlinkurl"
>http://www.perlmonks.org/</a>. Feel free to ask questions on Test::Class there.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CPAN::Forum"
>CPAN::Forum</a></h2>

<p>The CPAN Forum is a web forum for discussing Perl&#39;s CPAN modules. The Test::Class forum can be found at <a href="http://www.cpanforum.com/dist/Test-Class" class="podlinkurl"
>http://www.cpanforum.com/dist/Test-Class</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TO_DO"
>TO DO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you think this module should do something that it doesn&#39;t (or does something that it shouldn&#39;t) please let me know.</p>

<p>You can see my current to do list at <a href="http://adrianh.tadalist.com/lists/public/4798" class="podlinkurl"
>http://adrianh.tadalist.com/lists/public/4798</a>, with an RSS feed of changes at <a href="http://adrianh.tadalist.com/lists/feed_public/4798" class="podlinkurl"
>http://adrianh.tadalist.com/lists/feed_public/4798</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACKNOWLEDGMENTS"
>ACKNOWLEDGMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This is yet another implementation of the ideas from Kent Beck&#39;s Testing Framework paper <a href="http://www.xprogramming.com/testfram.htm" class="podlinkurl"
>http://www.xprogramming.com/testfram.htm</a>.</p>

<p>Thanks to Adam Kennedy, agianni, Apocalypse, Ask Bjorn Hansen, Chris Dolan, Chris Williams, Corion, Cosimo Streppone, Daniel Berger, Dave O&#39;Neill, David Cantrell, David Wheeler, Emil Jansson, Gunnar Wolf, Hai Pham, Hynek, imacat, Jeff Deifik, Jim Brandt, Jochen Stenzel, Johan Lindstrom, John West, Jonathan R. Warden, Joshua ben Jore, Jost Krieger, Kenichi Ishigaki Lee Goddard, Mark Reynolds, Mark Stosberg, Martin Ferrari, Mathieu Sauve-Frankel, Matt Trout, Matt Williamson, Michael G Schwern, Murat Uenalan, Nicholas Clark, Ovid, Piers Cawley, Rob Kinyon, Scott Lanning, Sebastien Aperghis-Tramoni, Steve Kirkup, Stray Toaster, Ted Carnahan, Terrence Brannon, Tom Metro, Tony Bowden, Tony Edwardson, William McKee, various anonymous folk and all the fine people on perl-qa for their feedback, patches, suggestions and nagging.</p>

<p>This module wouldn&#39;t be possible without the excellent <a href="/perldoc?Test%3A%3ABuilder" class="podlinkpod"
>Test::Builder</a>. Thanks to chromatic and Michael G Schwern for creating such a useful module.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Adrian Howard &#60;adrianh@quietstars.com&#62;, Curtis &#34;Ovid&#34; Poe, &#60;ovid at cpan.org&#62;, Mark Morgan &#60;makk384@gmail.com&#62;.</p>

<p>If you use this module, and can spare the time please let us know or rate it at <a href="http://cpanratings.perl.org/rate/?distribution=Test-Class" class="podlinkurl"
>http://cpanratings.perl.org/rate/?distribution=Test-Class</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='Test'></a><a name="Test::Class::Load"
><a href="/~adie/Test-Class-0.36/lib/Test/Class/Load.pm" class="podlinkpod"
>Test::Class::Load</a></a></dt>

<dd>
<p>Simple way to load &#34;<a href="/~adie/Test-Class-0.36/lib/Test/Class.pm" class="podlinkpod"
>Test::Class</a>&#34; classes automatically.</p>

<dt><a name='http'></a><a name="http://del.icio.us/tag/Test::Class"
><a href="http://del.icio.us/tag/Test::Class" class="podlinkurl"
>http://del.icio.us/tag/Test::Class</a></a></dt>

<dd>
<p>Delicious links on <a href="/~adie/Test-Class-0.36/lib/Test/Class.pm" class="podlinkpod"
>Test::Class</a>.</p>

<dt><a name='Perl'></a><a name="Perl_Testing:_A_Developer&#39;s_Notebook_by_Ian_Langworth_and_chromatic"
>Perl Testing: A Developer&#39;s Notebook by Ian Langworth and chromatic</a></dt>

<dd>
<p>Chapter 8 covers using <a href="/~adie/Test-Class-0.36/lib/Test/Class.pm" class="podlinkpod"
>Test::Class</a>.</p>

<dt><a name='Advanced'></a><a name="Advanced_Perl_Programming,_second_edition_by_Simon_Cozens"
>Advanced Perl Programming, second edition by Simon Cozens</a></dt>

<dd>
<p>Chapter 8 has a few pages on using <a href="/~adie/Test-Class-0.36/lib/Test/Class.pm" class="podlinkpod"
>Test::Class</a>.</p>

<dt><a name='The'></a><a name="The_Perl_Journal,_April_2003"
>The Perl Journal, April 2003</a></dt>

<dd>
<p>Includes the article &#34;Test-Driven Development in Perl&#34; by Piers Cawley that uses <a href="/~adie/Test-Class-0.36/lib/Test/Class.pm" class="podlinkpod"
>Test::Class</a>.</p>

<dt><a name='Test'></a><a name="Test::Builder"
><a href="/perldoc?Test%3A%3ABuilder" class="podlinkpod"
>Test::Builder</a></a></dt>

<dd>
<p>Support module for building test libraries.</p>

<dt><a name='Test'></a><a name="Test::Simple_&#38;_Test::More"
><a href="/perldoc?Test%3A%3ASimple" class="podlinkpod"
>Test::Simple</a> &#38; <a href="/perldoc?Test%3A%3AMore" class="podlinkpod"
>Test::More</a></a></dt>

<dd>
<p>Basic utilities for writing tests.</p>

<dt><a name='http'></a><a name="http://qa.perl.org/test-modules.html"
><a href="http://qa.perl.org/test-modules.html" class="podlinkurl"
>http://qa.perl.org/test-modules.html</a></a></dt>

<dd>
<p>Overview of some of the many testing modules available on CPAN.</p>

<dt><a name='http'></a><a name="http://del.icio.us/tag/perl+testing"
><a href="http://del.icio.us/tag/perl+testing" class="podlinkurl"
>http://del.icio.us/tag/perl+testing</a></a></dt>

<dd>
<p>Delicious links on perl testing.</p>

<dt><a name='Test'></a><a name="Test::Object"
><a href="/perldoc?Test%3A%3AObject" class="podlinkpod"
>Test::Object</a></a></dt>

<dd>
<p>Another approach to object oriented testing.</p>

<dt><a name='Test'></a><a name="Test::Group_and_Test::Block"
><a href="/perldoc?Test%3A%3AGroup" class="podlinkpod"
>Test::Group</a> and <a href="/perldoc?Test%3A%3ABlock" class="podlinkpod"
>Test::Block</a></a></dt>

<dd>
<p>Alternatives to grouping sets of tests together.</p>
</dd>
</dl>

<p>The following modules use <a href="/~adie/Test-Class-0.36/lib/Test/Class.pm" class="podlinkpod"
>Test::Class</a> as part of their test suite. You might want to look at them for usage examples:</p>

<blockquote>
<p><a href="/perldoc?Aspect" class="podlinkpod"
>Aspect</a>, Bricolage (<a href="http://www.bricolage.cc/" class="podlinkurl"
>http://www.bricolage.cc/</a>), <a href="/perldoc?Class%3A%3AStorageFactory" class="podlinkpod"
>Class::StorageFactory</a>, <a href="/perldoc?CGI%3A%3AApplication%3A%3ASearch" class="podlinkpod"
>CGI::Application::Search</a>, <a href="/perldoc?DBIx%3A%3ARomani" class="podlinkpod"
>DBIx::Romani</a>, <a href="/perldoc?Xmldoom" class="podlinkpod"
>Xmldoom</a>, <a href="/perldoc?Object%3A%3ARelational" class="podlinkpod"
>Object::Relational</a>, <a href="/perldoc?File%3A%3ARandom" class="podlinkpod"
>File::Random</a>, <a href="/perldoc?Geography%3A%3AJapanesePrefectures" class="podlinkpod"
>Geography::JapanesePrefectures</a>, <a href="/perldoc?Google%3A%3AAdwords" class="podlinkpod"
>Google::Adwords</a>, <a href="/perldoc?Merge%3A%3AHashRef" class="podlinkpod"
>Merge::HashRef</a>, <a href="/perldoc?PerlBuildSystem" class="podlinkpod"
>PerlBuildSystem</a>, <a href="/perldoc?Pixie" class="podlinkpod"
>Pixie</a>, <a href="/perldoc?Yahoo%3A%3AMarketing" class="podlinkpod"
>Yahoo::Marketing</a>, and <a href="/perldoc?XUL-Node" class="podlinkpod"
>XUL-Node</a></p>
</blockquote>

<p>The following modules are not based on <a href="/perldoc?Test%3A%3ABuilder" class="podlinkpod"
>Test::Builder</a>, but may be of interest as alternatives to <a href="/~adie/Test-Class-0.36/lib/Test/Class.pm" class="podlinkpod"
>Test::Class</a>.</p>

<dl>
<dt><a name='Test'></a><a name="Test::Unit"
><a href="/perldoc?Test%3A%3AUnit" class="podlinkpod"
>Test::Unit</a></a></dt>

<dd>
<p>Perl unit testing framework closely modeled on JUnit.</p>

<dt><a name='Test'></a><a name="Test::SimpleUnit"
><a href="/perldoc?Test%3A%3ASimpleUnit" class="podlinkpod"
>Test::SimpleUnit</a></a></dt>

<dd>
<p>A very simple unit testing framework.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENCE"
>LICENCE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2002-2010 Adrian Howard, All Rights Reserved.</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78276 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 02:33:17 2012 GMT (0.163986921310425) @cpansearch1 -->
 </body>
</html>
