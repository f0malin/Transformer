<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>PDF::Reuse - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","PDF-Reuse",3]);
    _gaq.push(["_setCustomVar",5,"Release","PDF-Reuse-0.35",3]);
    _gaq.push(["_setCustomVar",3,"Module","PDF::Reuse",3]);
    _gaq.push(["_setCustomVar",1,"Author","LARSLUND",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?PDF::Reuse">permalink</a></div>
  <a href="/~larslund/">Lars Lundberg</a> &gt;
  <a href="/~larslund/PDF-Reuse-0.35/">PDF-Reuse-0.35</a> &gt;
  PDF::Reuse
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/5b8a23061c6999d8542f6173866a979f?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/L/LA/LARSLUND/PDF-Reuse-0.35.tar.gz">PDF-Reuse-0.35.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=PDF%3A%3AReuse;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~LARSLUND/PDF-Reuse-0.35/Reuse.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?PDF%3A%3AAPI2">PDF::API2</a><br>
<a href="/perldoc?PDF%3A%3ATemplate">PDF::Template</a><br>
<a href="/perldoc?Win32%3A%3AOLE">Win32::OLE</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?PDF%3A%3ACreate">PDF::Create</a><br>
<a href="/perldoc?PDF%3A%3AReportWriter">PDF::ReportWriter</a><br>
<a href="/perldoc?Compress%3A%3AZlib">Compress::Zlib</a><br>
<a href="/perldoc?PDF%3A%3ATable">PDF::Table</a><br>
<a href="/perldoc?Image%3A%3AMagick">Image::Magick</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=PDF%3A%3AReuse">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 7</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 5</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=PDF-Reuse">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.35 &nbsp;
<span class="noprint">
  <a href="/src/LARSLUND/PDF-Reuse-0.35/Reuse.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Remarks_about_JavaScript'>Remarks about JavaScript</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <li class='indexItem indexItem1'><a href='#Overview'>Overview</a>
  <li class='indexItem indexItem1'><a href='#Mandatory_Functions'>Mandatory Functions</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#prFile_-_define_output'>prFile - define output</a>
    <li class='indexItem indexItem2'><a href='#prEnd_-_end/flush_buffers'>prEnd - end/flush buffers</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Optional_Functions'>Optional Functions</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#prAdd_-_add_&#34;low_level&#34;_instructions'>prAdd - add &#34;low level&#34; instructions</a>
    <li class='indexItem indexItem2'><a href='#prBookmark_-_define_bookmarks'>prBookmark - define bookmarks</a>
    <li class='indexItem indexItem2'><a href='#prCompress_-_compress/zip_added_streams'>prCompress - compress/zip added streams</a>
    <li class='indexItem indexItem2'><a href='#prDoc_-_include_pages_from_a_document'>prDoc - include pages from a document</a>
    <li class='indexItem indexItem2'><a href='#prDocDir_-_set_directory_for_produced_documents'>prDocDir - set directory for produced documents</a>
    <li class='indexItem indexItem2'><a href='#prDocForm_-_use_an_interactive_page_as_a_form'>prDocForm - use an interactive page as a form</a>
    <li class='indexItem indexItem2'><a href='#prExtract_-_extract_an_object_group'>prExtract - extract an object group</a>
    <li class='indexItem indexItem2'><a href='#prField_-_assign_a_value_to_an_interactive_field'>prField - assign a value to an interactive field</a>
    <li class='indexItem indexItem2'><a href='#prFont_-_set_current_font'>prFont - set current font</a>
    <li class='indexItem indexItem2'><a href='#prFontSize_-_set_current_font_size'>prFontSize - set current font size</a>
    <li class='indexItem indexItem2'><a href='#prForm_-_use_a_page_from_an_old_document_as_a_form/background'>prForm - use a page from an old document as a form/background</a>
    <li class='indexItem indexItem2'><a href='#prGetLogBuffer_-_get_the_log_buffer.'>prGetLogBuffer - get the log buffer.</a>
    <li class='indexItem indexItem2'><a href='#prGraphState_-_define_a_graphic_state_parameter_dictionary'>prGraphState - define a graphic state parameter dictionary</a>
    <li class='indexItem indexItem2'><a href='#prImage_-_reuse_an_image_from_an_old_PDF_document'>prImage - reuse an image from an old PDF document</a>
    <li class='indexItem indexItem2'><a href='#prInit_-_add_JavaScript_to_be_executed_at_initiation'>prInit - add JavaScript to be executed at initiation</a>
    <li class='indexItem indexItem2'><a href='#prInitVars_-_initiate_global_variables_and_internal_tables'>prInitVars - initiate global variables and internal tables</a>
    <li class='indexItem indexItem2'><a href='#prJpeg_-_import_a_jpeg-image'>prJpeg - import a jpeg-image</a>
    <li class='indexItem indexItem2'><a href='#prJs_-_add_JavaScript'>prJs - add JavaScript</a>
    <li class='indexItem indexItem2'><a href='#prLink_-_add_a_hyper_link'>prLink - add a hyper link</a>
    <li class='indexItem indexItem2'><a href='#prLog_-_add_a_string_to_the_log'>prLog - add a string to the log</a>
    <li class='indexItem indexItem2'><a href='#prLogDir_-_set_directory_for_the_log'>prLogDir - set directory for the log</a>
    <li class='indexItem indexItem2'><a href='#prMbox_-_define_the_format_(MediaBox)_for_a_new_page.'>prMbox - define the format (MediaBox) for a new page.</a>
    <li class='indexItem indexItem2'><a href='#prPage_-_create/insert_a_page'>prPage - create/insert a page</a>
    <li class='indexItem indexItem2'><a href='#prSinglePage_-_take_single_pages,_one_by_one,_from_an_old_document'>prSinglePage - take single pages, one by one, from an old document</a>
    <li class='indexItem indexItem2'><a href='#prStrWidth_-_calculate_the_string_width'>prStrWidth - calculate the string width</a>
    <li class='indexItem indexItem2'><a href='#prText_-_add_a_text-string'>prText - add a text-string</a>
    <li class='indexItem indexItem2'><a href='#prTTFont_-_select_and_embed_a_TrueType_font'>prTTFont - select and embed a TrueType font</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#INTERNAL_OR_DEPRECATED_FUNCTIONS'>INTERNAL OR DEPRECATED FUNCTIONS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#LIMITATIONS'>LIMITATIONS</a>
  <li class='indexItem indexItem1'><a href='#THANKS_TO'>THANKS TO</a>
  <li class='indexItem indexItem1'><a href='#MAILING_LIST'>MAILING LIST</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#DISCLAIMER'>DISCLAIMER</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>PDF::Reuse - Reuse and mass produce PDF documents</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">   use PDF::Reuse;                     
   prFile(&#39;myFile.pdf&#39;);
   prText(100, 500, &#39;Hello World !&#39;);
   prEnd();</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module could be used when you want to mass produce similar (but not identical) PDF documents and reuse templates, JavaScripts and some other components. It is functional to be fast, and to give your programs capacity to produce many pages per second and very big PDF documents if necessary.</p>

<p>The module produces PDF-1.4 files. Some features of PDF-1.5, like &#34;object streams&#34; and &#34;cross reference streams&#34;, are supported, but only at an experimental level. More testing is needed. (If you get problems with a new document from Acrobat 6 or higher, try to save it or recreate it as a PDF-1.4 document first, before using it together with this module.)</p>

<dl>
<dt><a name="Templates"
>Templates</a></dt>

<dd>
<p>Use your favorite program, probably a commercial visual tool, to produce single PDF-files to be used as templates, and then use this module to <b>mass produce</b> files from them.</p>

<p>(If you want small PDF-files or want special graphics, you can use this module also, but visual tools are often most practical.)</p>

<dt><a name="Lists"
>Lists</a></dt>

<dd>
<p>The module uses &#34;XObjects&#34; extensively. This is a format that makes it possible create big lists, which are compact at the same time.</p>

<dt><a name='PDF'></a><a name="PDF-operators"
>PDF-operators</a></dt>

<dd>
<p>The module gives you a good possibility to program at a &#34;low level&#34; with the basic graphic operators of PDF, if that is what you want to do. You can build your own libraries of low level routines, with PDF-directives &#34;controlled&#34; by Perl.</p>

<dt><a name='Archive'></a><a name="Archive-format"
>Archive-format</a></dt>

<dd>
<p>If you want, you get your new documents logged in a format suitable for archiving or transfer.</p>

<p>PDF::Reuse::Tutorial might show you best what you can do with this module.</p>

<dt><a name="JavaScript"
>JavaScript</a></dt>

<dd>
<p>You can attach JavaScripts to your PDF-files.</p>

<p>You can have libraries of JavaScripts. No cutting or pasting, and those who include the scripts in documents only need to know how to initiate them. (Of course those who write the scripts have to know Acrobat JavaScript well.)</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Remarks_about_JavaScript"
>Remarks about JavaScript</a></h2>

<p>Some of the functions handling JavaScript have to be rewritten for Acrobat 7.</p>

<p>There are many limitations with Acrobat JavaScript, and the rules often change. So what works for one version of Acrobat/Reader, might not work for another. Another complication is this: When documents are downloaded via the net by Acrobat, they are most often converted (!) and necessary JavaScripts are lost.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>All functions which are successful return specified values or 1.</p>

<p>The module doesn&#39;t make any attempt to import anything from encrypted files.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Overview"
>Overview <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>To write a program with PDF::Reuse, you need these components:</p>

<TABLE  border=1 cellpadding="7">
  <THEAD bgcolor="lightblue">
    <TH title="Mandatory">First</TH>
    <TH title="Slightly deprecated functions for your output">Perhaps*</TH>
    <TH title="Mandatory">Always</TH>
    <TH title="If you want to add someting">Any or None</TH>
    <TH title="Often you need to indicate that you need a new page and possibly from where">Probably**</TH>
    <TH title="Mandatory">Finally</TH>
  </THEAD>
  <TR valign="top" bgcolor="lightgreen">
    <TD title="To include the module"><B>use PDF::Reuse</B></TD>
    <TD></TD>
    <TD title="Finish an old document and direct output for a new document"><B>prFile</B></TD>
    <TD title="To add new contents, JavaScript, links and so on..">prInitVars<BR>
        prExtract<BR>
        prForm<BR>
        prInit<BR>
        prField<BR>
        prImage<BR>
        prJpeg<BR>
        prFont<BR>
        prFontSize<BR>
        prTTFont<BR>
        prGraphState<BR>
        prAdd<BR>
        prText<BR>
        prJs<BR>
        prCompress<BR>
        prMbox<BR>
        prBookmark<BR>
        prStrWidth<BR>
        prLink</TD>
     <TD title="These functions collect available contents and create the pages">prDoc<BR>
         prPage<BR>
         prSinglePage</TD>
     <TD title="To finish last document and clean up"><B>prEnd</B></TD>
   <TR valign="top" bgcolor="lightyellow">
     <TD></TD>
     <TD>prDocDir*<BR>
         prLogDir*</TD>
     <TD></TD>
     <TD>prDocForm*<BR>
        prGetLogBuffer*<BR>
        prBar*<BR>
        prLog*<BR>
        prTouchUp*<BR>
	prVers*<BR>
        prCid*<BR>
        prId*<BR>
        prIdType*<BR></TD>
      <TD></TD>
      <TD></TD>
    </TR>
    <TR bgcolor="lightgrey">
      <TD colspan=6> * = internal/ deprecated function</TD>
    </TR>
    <TR bgcolor="lightgrey">
      <TD colspan=6> ** = not needed before prEnd or a new prFile<BR>
      In those cases prPage is automatically inserted </TD>
    </TR>
  </TABLE>


<h1><a class='u' href='#___top' title='click to go to top of document'
name="Mandatory_Functions"
>Mandatory Functions <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prFile_-_define_output"
>prFile - define output</a></h2>

<p>Alternative 1:</p>

<pre class="sh_perl">   prFile ( $fileName );</pre>

<p>Alternative 2 with parameters in an anonymous hash:</p>

<pre class="sh_perl">   prFile ( { Name         =&#62; $fileName,
              HideToolbar  =&#62; 1,            # 1 or 0
              HideMenubar  =&#62; 1,            # 1 or 0
              HideWindowUI =&#62; 1,            # 1 or 0
              FitWindow    =&#62; 1,            # 1 or 0
              CenterWindow =&#62; 1   } );      # 1 or 0</pre>

<p>Alternative 3:</p>

<pre class="sh_perl">   prFile ( $r );  # For mod_perl 2 pass the request object</pre>

<p>$fileName is optional, just like the rest of the parameters. File to create. If another file is current when this function is called, the first one is written and closed. Only one file is processed at a single moment. If $fileName is undefined, output is written to STDOUT.</p>

<p>HideToolbar, HideMenubar, HideWindowUI, FitWindow and CenterWindow control the way the document is initially displayed.</p>

<p>Look at any program in this documentation for examples. prInitVars() shows how this function could be used together with a web server.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prEnd_-_end/flush_buffers"
>prEnd - end/flush buffers</a></h2>

<pre class="sh_perl">   prEnd ()</pre>

<p>When the processing is going to end, the buffers of the <b>last</b> file has to be written to the disc. If this function is not called, the page structure, xref part and so on will be lost.</p>

<p>Look at any program in this documentation for an example.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Optional_Functions"
>Optional Functions <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prAdd_-_add_&#34;low_level&#34;_instructions"
>prAdd - add &#34;low level&#34; instructions</a></h2>

<pre class="sh_perl">    prAdd ( $string )</pre>

<p>With this command you can add whatever you want to the current content stream. No syntactical checks are made, but if you use an internal name, the module tries to add the resource of the &#34;name object&#34; to the &#34;Resources&#34; of current page. &#34;Name objects&#34; always begin with a &#39;/&#39;.</p>

<p>(In this documentation I often use talk about an &#34;internal name&#34;. It denotes a &#34;name object&#34;. When PDF::Reuse creates these objects, it assigns Ft1, Ft2, Ft3 ... for fonts, Ig1, Ig2, Ig3 for images, Fo1 .. for forms, Cs1 .. for Color spaces, Pt1 .. for patterns, Sh1 .. for shading directories, Gs0 .. for graphic state parameter dictionaries. These names are kept until the program finishes, and my ambition is also to keep the resources available in internal tables.)</p>

<p>This is a simple and very powerful function. You should study the examples and the &#34;PDF-reference manual&#34;, if you want to use it.(When this text is written, a possible link to download it is: <a href="http://partners.adobe.com/asn/developer/acrosdk/docs.html" class="podlinkurl"
>http://partners.adobe.com/asn/developer/acrosdk/docs.html</a>)</p>

<p>This function is intended to give you detail control at a low level.</p>

<pre class="sh_perl">   use PDF::Reuse;
   use strict;

   prFile(&#39;myFile.pdf&#39;);
   my $string = &#34;150 600 100 50 re\n&#34;;  # a rectangle 
   $string   .= &#34;0 0 1 rg\n&#34;;           # blue (to fill)
   $string   .= &#34;b\n&#34;;                  # fill and stroke
   prAdd($string);                       
   prEnd(); </pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prBookmark_-_define_bookmarks"
>prBookmark - define bookmarks</a></h2>

<pre class="sh_perl">   prBookmark($reference)</pre>

<p>Defines a &#34;bookmark&#34;. $reference refers to a hash or array of hashes which looks something like this:</p>

<pre class="sh_perl">          {  text  =&#62; &#39;Document&#39;,
             act   =&#62; &#39;this.pageNum = 0; this.scroll(40, 500);&#39;,
             kids  =&#62; [ { text =&#62; &#39;Chapter 1&#39;,
                          act  =&#62; &#39;1, 40, 600&#39;
                        },
                        { text =&#62; &#39;Chapter 2&#39;,
                          act  =&#62; &#39;10, 40, 600&#39;
                        } 
                      ]
          }</pre>

<p>Each hash can have these components:</p>

<pre class="sh_perl">        text    the text shown beside the bookmark
        act     the action to be triggered. Has to be a JavaScript action.
                (Three simple numbers are translated to page, x and y in the
                sentences: this.pageNum = page; this.scroll(x, y); )
        kids    will have a reference to another hash or array of hashes
        close   if this component is present, the bookmark will be closed
                when the document is opened
        color   3 numbers, RGB-colors e.g. &#39;0.5 0.5 1&#39; for light blue
        style   0, 1, 2, or 3. 0 = Normal, 1 = Italic, 2 = Bold, 3 = Bold Italic</pre>

<p>Creating bookmarks for a document:</p>

<pre class="sh_perl">    use PDF::Reuse;
    use strict;

    my @pageMarks;

    prFile(&#39;myDoc.pdf&#39;);

    for (my $i = 0; $i &#60; 100; $i++)
    {   prText(40, 600, &#39;Something is written&#39;);
        # ...
        my $page = $i + 1;
        my $bookMark = { text =&#62; &#34;Page $page&#34;,
                         act  =&#62; &#34;$i, 40, 700&#34; };
        push @pageMarks, $bookMark;
        prPage();
    }
    prBookmark( { text  =&#62; &#39;Document&#39;,
                  close =&#62; 1,
                  kids  =&#62; \@pageMarks } );
    prEnd();</pre>

<p>Traditionally bookmarks have mainly been used for navigation within a document, but they can be used for many more things. You can e.g. use them to navigate within your data. You can let your users go to external links also, so they can &#34;drill down&#34; to other documents.</p>

<p><b>See &#34;Remarks about JavaScript&#34;</b></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prCompress_-_compress/zip_added_streams"
>prCompress - compress/zip added streams</a></h2>

<pre class="sh_perl">   prCompress (1)</pre>

<p>&#39;1&#39; here is a directive to compress all <b>new</b> streams of the current file. Streams which are included with prForm, prDocForm, prDoc or prSinglePage are not changed. New JavaScripts are also created as streams and compressed, if they are at least 100 bytes long. The streams are compressed in memory, so probably there is a limit of how big they can be.</p>

<p>prCompress(); is a directive not to compress. This is default.</p>

<p>See e.g. &#34;Starting to reuse&#34; in the tutorial for an example.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prDoc_-_include_pages_from_a_document"
>prDoc - include pages from a document</a></h2>

<pre class="sh_perl">   prDoc ( $documentName, $firstPage, $lastPage )</pre>

<p>or with the parameters in an anonymous hash:</p>

<pre class="sh_perl">   prDoc ( { file  =&#62; $documentName,
             first =&#62; $firstPage,
             last  =&#62; $lastPage } );</pre>

<p>Returns number of extracted pages.</p>

<p>If &#34;first&#34; is not given, 1 is assumed. If &#34;last&#34; is not given, you don&#39;t have any upper limit. N.B. The numbering of the pages differs from Acrobat JavaScript. In JavaScript the first page has index 0.</p>

<p>Adds pages from a document to the one you are creating. N.B. From version 0.32 of this module: If there are contents created with with prText, prImage,prAdd, prForm and so on, prDoc tries to put the contents on the first extracted page from the old document.</p>

<p>If it is the first interactive component ( prDoc() or prDocForm() ) the interactive functions are kept and also merged with JavaScripts you have added, if any. But, if you specify a first page different than 1 or a last page, no JavaScript are extracted from the document, because then there is a risk that an included JavaScript function might refer to something not included.</p>

<pre class="sh_perl">   use PDF::Reuse;
   use strict;

   prFile(&#39;myFile.pdf&#39;);                  # file to make
   prJs(&#39;customerResponse.js&#39;);           # include a JavaScript file
   prInit(&#39;nameAddress(12, 150, 600);&#39;);  # init a JavaScript function
   prForm(&#39;best.pdf&#39;);                    # page 1 from best.pdf
   prPage();
   prDoc(&#39;long.pdf&#39;);                     # a document with 11 pages
   prForm(&#39;best.pdf&#39;);                    # page 1 from best.pdf
   prText(150, 700, &#39;Customer Data&#39;);     # a line of text
   prEnd();</pre>

<p>To extract pages 2-3 and 5-7 from a document and create a new document:</p>

<pre class="sh_perl">   use PDF::Reuse;
   use strict;
    
   prFile(&#39;new.pdf&#39;);
   prDoc( { file  =&#62; &#39;old.pdf&#39;,
            first =&#62; 2, 
            last  =&#62; 3 });
   prDoc( { file  =&#62; &#39;old.pdf&#39;,
            first =&#62; 5, 
            last  =&#62; 7 });
   prEnd();</pre>

<p>To add a form, image and page number to each page of an 16 pages long document (The document Battery.pdf is cropped so each page is fairly small) You could also have used prSinglePage, look at a very similar example under that function.</p>

<pre class="sh_perl">   use PDF::Reuse;
   use PDF::Reuse::Util;
   use strict;
     
   prFile(&#39;test.pdf&#39;);
     
     my $pageNumber = 0;
     
     for (my $page = 1; $page &#60; 17; $page++)
     {   $pageNumber++;
         prForm(  { file =&#62;&#39;Words.pdf&#39;,
                    page =&#62; 5,
                    x    =&#62; 150,
                    y    =&#62; 150} );
                    
         prImage( { file =&#62;&#39;Media.pdf&#39;,
                    page =&#62; 6,
                    imageNo =&#62; 1,
                    x  =&#62; 450,
                    y  =&#62; 450 } );
         blackText();
         prText( 360, 250, $pageNumber);
         prDoc(&#39;Battery.pdf&#39;, $pageNumber, $pageNumber);
     }
   prEnd;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prDocDir_-_set_directory_for_produced_documents"
>prDocDir - set directory for produced documents</a></h2>

<pre class="sh_perl">   prDocDir ( $directoryName )</pre>

<p>Sets directory for produced documents</p>

<pre class="sh_perl">   use PDF::Reuse;
   use strict;

   prDocDir(&#39;C:/temp/doc&#39;);
   prFile(&#39;myFile.pdf&#39;);         # writes to C:\temp\doc\myFile.pdf
   prForm(&#39;myFile.pdf&#39;);         # page 1 from ..\myFile.pdf
   prText(200, 600, &#39;New text&#39;);
   prEnd();</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prDocForm_-_use_an_interactive_page_as_a_form"
>prDocForm - use an interactive page as a form</a></h2>

<p>Alternative 1) You put your parameters in an anonymous hash (only <b>file</b> is really necessary, the others get default values if not given).</p>

<pre class="sh_perl">   prDocForm ( { file     =&#62; $pdfFile,       # template file
                 page     =&#62; $page,          # page number (of imported template)
                 adjust   =&#62; $adjust,        # try to fill the media box
                 effect   =&#62; $effect,        # action to be taken
                 tolerant =&#62; $tolerant,      # continue even with an invalid form
                 x        =&#62; $x,             # $x points from the left
                 y        =&#62; $y,             # $y points from the bottom
                 rotate   =&#62; $degree,        # rotate 
                 size     =&#62; $size,          # multiply everything by $size
                 xsize    =&#62; $xsize,         # multiply horizontally by $xsize
                 ysize    =&#62; $ysize } )      # multiply vertically by $ysize
Ex.:
    my $internalName = prDocForm ( {file     =&#62; &#39;myFile.pdf&#39;,
                                    page     =&#62; 2 } );</pre>

<p>Alternative 2) You put your parameters in this order</p>

<pre class="sh_perl">        prDocForm ( $pdfFile, [$page, $adjust, $effect, $tolerant, $x, $y, $degree,
            $size, $xsize, $ysize] )</pre>

<p>Anyway the function returns in list context: <b>$intName, @BoundingBox, $numberOfImages</b>, in scalar context: <b>$internalName</b> of the form.</p>

<p>Look at prForm() for an explanation of the parameters.</p>

<p>N.B. Usually you shouldn&#39;t adjust or change size and proportions of an interactive page. The graphic and interactive components are independent of each other and there is a great risk that any coordination is lost.</p>

<p>This function redefines a page to an &#34;XObject&#34; (the graphic parts), then the page can be reused in a much better way. Unfortunately there is an important limitation here. &#34;XObjects&#34; can only have single streams. If the page consists of many streams, you should concatenate them first. Adobe Acrobat can do that. (If it is an important file, take a copy of it first. Sometimes the procedure fails.) Open the document with Acrobat. Then choose the the &#34;TouchUp Text&#34; tool (icon or from the tools menu). Select a line of text somewhere on the page. Right-click the mouse. Choose &#34;Attributes&#34;.Change font size or anything else, and then you change it back to the old value. Save the document. If there was no text on the page, use some other &#34;Touch Up&#34; tool.</p>

<pre class="sh_perl">   use PDF::Reuse;
   use strict;

   prDocDir(&#39;C:/temp/doc&#39;);
   prFile(&#39;newForm.pdf&#39;);
   prField(&#39;Mr/Ms&#39;, &#39;Mr&#39;);
   prField(&#39;First_Name&#39;, &#39;Lars&#39;);
   prDocForm(&#39;myFile.pdf&#39;);
   prFontSize(24);
   prText(75, 790, &#39;This text is added&#39;);
   prEnd();</pre>

<p>(You can use the output from the example in prJs() as input to this example. Remember to save that file before closing it.)</p>

<p><b>See Remarks about JavaScript</b></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prExtract_-_extract_an_object_group"
>prExtract - extract an object group</a></h2>

<pre class="sh_perl">   prExtract ( $pdfFile, $pageNo, $oldInternalName )</pre>

<p><b>oldInternalName</b>, a &#34;name&#34;-object. This is the internal name you find in the original file. Returns a <b>$newInternalName</b> which can be used for &#34;low level&#34; programming. You have better look at graphObj_pl and modules it has generated for the tutorial, e.g. thermometer.pm, to see how this function can be used.</p>

<p>When you call this function, the necessary objects will be copied to your new PDF-file, and you can refer to them with the new name you receive.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prField_-_assign_a_value_to_an_interactive_field"
>prField - assign a value to an interactive field</a></h2>

<pre class="sh_perl">        prField ( $fieldName, $value )</pre>

<p><b>$fieldName</b> is an interactive field in the document you are creating. It has to be spelled exactly the same way here as it spelled in the document. <b>$value</b> is what you want to assigned to the field. Put all your sentences with prField early in your script. After prFile and <b>before</b> prDoc or prDocForm and of course before prEnd. Each sentence with prField is translated to JavaScript and merged with old JavaScript</p>

<p>See prDocForm() for an example</p>

<p>If you are going to assign a value to a field consisting of several lines, you can write like this:</p>

<pre class="sh_perl">   my $string = &#34;This is the first line \r second line \n 3:rd line&#34;;
   prField(&#39;fieldName&#39;, $string);</pre>

<p>You can also let &#39;$value&#39; be a snippet of JavaScript-code that assigns something to the field. Then you have to put &#39;js:&#39; first in &#34;$value&#34; like this:</p>

<pre class="sh_perl">   my $sentence = encrypt(&#39;This will be decrypted by &#34;unPack&#34;(JavaScript) &#39;);
   prField(&#39;Interest_9&#39;, &#34;js: unPack(&#39;$sentence&#39;)&#34;);</pre>

<p>If you refer to a JavaScript function, it has to be included with prJs first. (The JavaScript interpreter will simply not be aware of old functions in the PDF-document, when the initiation is done.)</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prFont_-_set_current_font"
>prFont - set current font</a></h2>

<pre class="sh_perl">   prFont ( $fontName )</pre>

<p>$fontName is an &#34;external&#34; font name. The parameter is optional. In list context returns <b>$internalName, $externalName, $oldInternalName, $oldExternalname</b> The first two variables refer to the current font, the two later to the font before the change. In scalar context returns b&#60;$internalName&#62;</p>

<p>If a font wasn&#39;t found, Helvetica will be set. These names are always recognized: <b>Times-Roman, Times-Bold, Times-Italic, Times-BoldItalic, Courier, Courier-Bold, Courier-Oblique, Courier-BoldOblique, Helvetica, Helvetica-Bold, Helvetica-Oblique, Helvetica-BoldOblique</b> or abbreviated <b>TR, TB, TI, TBI, C, CB, CO, CBO, H, HB, HO, HBO</b>. (<b>Symbol and ZapfDingbats</b> or abbreviated <b>S, Z</b>, also belong to the predefined fonts, but there is something with them that I really don&#39;t understand. You should print them first on a page, and then use other fonts, otherwise they are not displayed.)</p>

<p>You can also use a font name from an included page. It has to be spelled exactly as it is done there. Look in the file and search for &#34;/BaseFont&#34; and the font name. But take care, e.g. the PDFMaker which converts to PDF from different Microsoft programs, only defines exactly those letters you can see on the page. You can use the font, but perhaps some of your letters were not defined.</p>

<p>In the distribution there is an utility program, &#39;reuseComponent_pl&#39;, which displays included fonts in a PDF-file and prints some letters. Run it to see the name of the font and if it is worth extracting.</p>

<pre class="sh_perl">   use PDF::Reuse;
   use strict;
   prFile(&#39;myFile.pdf&#39;);

   ####### One possibility #########

   prFont(&#39;Times-Roman&#39;);     # Just setting a font
   prFontSize(20);
   prText(180, 790, &#34;This is a heading&#34;);

   ####### Another possibility #######

   my $font = prFont(&#39;C&#39;);    # Setting a font, getting an  
                              # internal name
   prAdd(&#34;BT /$font 12 Tf 25 760 Td (This is some other text)Tj ET&#34;); 
   prEnd();</pre>

<p>The example above shows you two ways of setting and using a font. One simple, and one complicated with a possibility to detail control.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prFontSize_-_set_current_font_size"
>prFontSize - set current font size</a></h2>

<pre class="sh_perl">   prFontSize ( $size )</pre>

<p>Returns <b>$actualSize, $fontSizeBeforetheChange</b>. Without parameters prFontSize() sets the size to 12 points, which is default.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prForm_-_use_a_page_from_an_old_document_as_a_form/background"
>prForm - use a page from an old document as a form/background</a></h2>

<p>Alternative 1) You put your parameters in an anonymous hash (only <b>file</b> is really necessary, the others get default values if not given).</p>

<pre class="sh_perl">   prForm ( { file     =&#62; $pdfFile,       # template file
              page     =&#62; $page,          # page number (of imported template)
              adjust   =&#62; $adjust,        # try to fill the media box
              effect   =&#62; $effect,        # action to be taken
              tolerant =&#62; $tolerant,      # continue even with an invalid form
              x        =&#62; $x,             # $x points from the left
              y        =&#62; $y,             # $y points from the bottom
              rotate   =&#62; $degree,        # rotate 
              size     =&#62; $size,          # multiply everything by $size
              xsize    =&#62; $xsize,         # multiply horizontally by $xsize
              ysize    =&#62; $ysize } )      # multiply vertically by $ysize
Ex.:
    my $internalName = prForm ( {file     =&#62; &#39;myFile.pdf&#39;,
                                 page     =&#62; 2 } );</pre>

<p>Alternative 2) You put your parameters in this order</p>

<pre class="sh_perl">        prForm ( $pdfFile, $page, $adjust, $effect, $tolerant, $x, $y, $degree,
            $size, $xsize, $ysize )</pre>

<p>Anyway the function returns in list context: <b>$intName, @BoundingBox, $numberOfImages</b>, in scalar context: <b>$internalName</b> of the form.</p>

<p>if <b>page</b> is excluded 1 is assumed.</p>

<p><b>adjust</b>, could be 1, 2 or 0/nothing. If it is 1, the program tries to adjust the form to the current media box (paper size) and keeps the proportions unchanged. If it is 2, the program tries to fill as much of the media box as possible, without regards to the original proportions. If this parameter is given, &#34;x&#34;, &#34;y&#34;, &#34;rotate&#34;, &#34;size&#34;, &#34;xsize&#34; and &#34;ysize&#34; will be ignored.</p>

<p><b>effect</b> can have 3 values: <b>&#39;print&#39;</b>, which is default, loads the page in an internal table, adds it to the document and prints it to the current page. <b>&#39;add&#39;</b>, loads the page and adds it to the document. (Now you can &#34;manually&#34; manage the way you want to print it to different pages within the document.) <b>&#39;load&#39;</b> just loads the page in an internal table. (You can now take <i>parts</i> of a page like fonts and objects and manage them, without adding all the page to the document.)You don&#39;t get any defined internal name of the form, if you let this parameter be &#39;load&#39;.</p>

<p><b>tolerant</b> can be nothing or something. If it is undefined, you will get an error if your program tries to load a page which the system cannot really handle, if it e.g. consists of many streams. If it is set to something, you have to test the first return value $internalName to know if the function was successful. Look at the program &#39;reuseComponent_pl&#39; for an example of usage.</p>

<p><b>x</b> where to start along the x-axis (cannot be combined with &#34;adjust&#34;)</p>

<p><b>y</b> where to start along the y-axis (cannot be combined with &#34;adjust&#34;)</p>

<p><b>rotate</b> A degree 0-360 to rotate the form counter-clockwise. (cannot be combined with &#34;adjust&#34;) Often the form disappears out of the media box if degree &#62;= 90. Then you can move it back with the x and y-parameters. If degree == 90, you can add the width of the form to x, If degree == 180 add both width and height to x and y, and if degree == 270 you can add the height to y.</p>

<p><b>rotate</b> can also by one of &#39;q1&#39;, &#39;q2&#39; or &#39;q3&#39;. Then the system rotates the form clockwise 90, 180 or 270 degrees and tries to keep the form within the media box.</p>

<p>The rotation takes place after the form has been resized or moved.</p>

<pre class="sh_perl">   Ex. To rotate from portrait (595 x 842 pt) to landscape (842 x 595 pt)

   use PDF::Reuse;
   use strict;
   
   prFile(&#39;New_Report.pdf&#39;);
   prMbox(0, 0, 842, 595);           
   
   prForm({file   =&#62; &#39;cert1.pdf&#39;,
           rotate =&#62; &#39;q1&#39; } );  
   prEnd();</pre>

<p>The same rotation can be achieved like this:</p>

<pre class="sh_perl">   use PDF::Reuse;
   use strict;
   
   prFile(&#39;New_Report.pdf&#39;);
   prMbox(0, 0, 842, 595);
               
   prForm({file   =&#62; &#39;cert1.pdf&#39;,
           rotate =&#62; 270,
           y      =&#62; 595 } );  
   prEnd();</pre>

<p><b>size</b> multiply every measure by this value (cannot be combined with &#34;adjust&#34;)</p>

<p><b>xsize</b> multiply horizontally by this value (cannot be combined with &#34;adjust&#34;)</p>

<p><b>ysize</b> multiply vertically by $ysize (cannot be combined with &#34;adjust&#34;)</p>

<p>This function redefines a page to an &#34;XObject&#34; (the graphic parts), then the page can be reused and referred to as a unit. Unfortunately there is an important limitation here. &#34;XObjects&#34; can only have single streams. If the page consists of many streams, you should concatenate them first. Adobe Acrobat can do that. (If it is an important file, take a copy of it first. Sometimes the procedure fails.) Open the document with Acrobat. Then choose the &#34;TouchUp Text&#34; tool. Select a line of text somewhere. Right-click the mouse. Choose &#34;Attributes&#34;. Change font size or anything else, and then you change it back to the old value. Save the document. You could alternatively save the file as Postscript and redistill it with the distiller or with Ghost script, but this is a little more risky. You might loose fonts or something else. An other alternative could be to use prSinglePage().</p>

<pre class="sh_perl">   use PDF::Reuse;
   use strict;

   prFile(&#39;myFile.pdf&#39;);
   prForm(&#39;best.pdf&#39;);    # Takes page No 1
   prText(75, 790, &#39;Dear Mr Gates&#39;);
   # ...
   prPage();
   prMbox(0, 0, 900, 960);
   my @vec = prForm(   { file =&#62; &#39;EUSA.pdf&#39;,
                         adjust =&#62; 1 } );
   prPage();
   prMbox();
   prText(35, 760, &#39;This is the final page&#39;);

   # More text ..

   #################################################################
   # We want to put a miniature of EUSA.pdf, 35 points from the left
   # 85 points up, and in the format 250 X 200 points
   #################################################################

   my $xScale = 250 / ($vec[3] - $vec[1]);
   my $yScale = 200 / ($vec[4] - $vec[2]);
   
   prForm ({ file =&#62; &#39;EUSA.pdf&#39;,
             xsize =&#62; $xScale,
             ysize =&#62; $yScale,
             x     =&#62; 35,
             y     =&#62; 85 });

   prEnd();</pre>

<p>The first prForm(), in the code, is a simple and &#34;normal&#34; way of using the the function. The second time it is used, the size of the imported page is changed. It is adjusted to the media box which is current at that moment. Also data about the form is taken, so you can control more in detail how it will be displayed.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prGetLogBuffer_-_get_the_log_buffer."
>prGetLogBuffer - get the log buffer.</a></h2>

<p>prGetLogBuffer ()</p>

<p>returns a <b>$buffer</b> of the log of the current page. (It could be used e.g. to calculate a MD5-digest of what has been registered that far, instead of accumulating the single values) A log has to be active, see prLogDir() below</p>

<p>Look at &#34;Using the template&#34; and &#34;Restoring a document from the log&#34; in the tutorial for examples of usage.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prGraphState_-_define_a_graphic_state_parameter_dictionary"
>prGraphState - define a graphic state parameter dictionary</a></h2>

<pre class="sh_perl">   prGraphState ( $string )</pre>

<p>This is a &#34;low level&#34; function. Returns <b>$internalName</b>. The <b>$string</b> has to be a complete dictionary with initial &#34;&#60;&#60;&#34; and terminating &#34;&#62;&#62;&#34;. No syntactical checks are made. Perhaps you will never have to use this function.</p>

<pre class="sh_perl">   use PDF::Reuse;
   use strict;

   prFile(&#39;myFile.pdf&#39;);

   ###################################################
   # Draw a triangle with Gs0 (automatically defined)
   ###################################################

   my $str = &#34;q\n&#34;;
   $str   .= &#34;/Gs0 gs\n&#34;;
   $str   .= &#34;150 700 m\n&#34;;
   $str   .= &#34;225 800 l\n&#34;;
   $str   .= &#34;300 700 l\n&#34;;
   $str   .= &#34;150 700 l\n&#34;;
   $str   .= &#34;S\n&#34;;
   $str   .= &#34;Q\n&#34;;
   prAdd($str);

   ########################################################
   # Define a new graph. state param. dic. and draw a new
   # triangle further down 
   ########################################################

   $str = &#39;&#60;&#60;/Type/ExtGState/SA false/SM 0.02/TR2 /Default&#39;
                      . &#39;/LW 15/LJ 1/ML 1&#62;&#62;&#39;;
   my $gState = prGraphState($str);
   $str  = &#34;q\n&#34;;
   $str .= &#34;/$gState gs\n&#34;;
   $str .= &#34;150 500 m\n&#34;;
   $str .= &#34;225 600 l\n&#34;;
   $str .= &#34;300 500 l\n&#34;;
   $str .= &#34;150 500 l\n&#34;;
   $str .= &#34;S\n&#34;;
   $str .= &#34;Q\n&#34;;
   prAdd($str);
   
   prEnd();</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prImage_-_reuse_an_image_from_an_old_PDF_document"
>prImage - reuse an image from an old PDF document</a></h2>

<p>Alternative 1) You put your parameters in an anonymous hash (only <b>file</b> is really necessary, the others get default values if not given).</p>

<pre class="sh_perl">   prImage( { file     =&#62; $pdfFile,       # template file
              page     =&#62; $page,          # page number
              imageNo  =&#62; $imageNo        # image number
              adjust   =&#62; $adjust,        # try to fill the media box
              effect   =&#62; $effect,        # action to be taken
              x        =&#62; $x,             # $x points from the left
              y        =&#62; $y,             # $y points from the bottom
              rotate   =&#62; $degree,        # rotate 
              size     =&#62; $size,          # multiply everything by $size
              xsize    =&#62; $xsize,         # multiply horizontally by $xsize
              ysize    =&#62; $ysize } )      # multiply vertically by $ysize
Ex.:
   prImage( { file    =&#62; &#39;myFile.pdf&#39;,
              page    =&#62; 10,
              imageNo =&#62; 2 } );</pre>

<p>Alternative 2) You put your parameters in this order</p>

<pre class="sh_perl">        prImage ( $pdfFile, [$page, $imageNo, $effect, $adjust, $x, $y, $degree,
            $size, $xsize, $ysize] )</pre>

<p>Returns in scalar context <b>$internalName</b> As a list <b>$internalName, $width, $height</b></p>

<p>Assumes that $pageNo and $imageNo are 1, if not specified. If $effect is given and anything else then &#39;print&#39;, the image will be defined in the document, but not shown at this moment.</p>

<p>For all other parameters, look at prForm().</p>

<pre class="sh_perl">   use PDF::Reuse;
   use strict;

   prFile(&#39;myFile.pdf&#39;); 
   my @vec = prImage({ file  =&#62; &#39;best.pdf&#39;,
                       x     =&#62; 10,
                       y     =&#62; 400,
                       xsize =&#62; 0.9,
                       ysize =&#62; 0.8 } );
   prText(35, 760, &#39;This is some text&#39;);
   # ...
   prPage();
   my @vec2 = prImage( { file    =&#62; &#39;destiny.pdf&#39;,
                         page    =&#62; 1,
                         imageNo =&#62; 1,
                         effect  =&#62; &#39;add&#39; } );
   prText(25, 760, &#34;There shouldn&#39;t be any image on this page&#34;);
   prPage();
   ########################################################
   #  Now we make both images so that they could fit into
   #  a box 300 X 300 points, and they are displayed
   ########################################################

   prText(25, 800, &#39;This is the first image :&#39;);

   my $xScale = 300 / $vec[1];
   my $yScale = 300 / $vec[2];
   if ($xScale &#60; $yScale)
   {  $yScale = $xScale;
   }
   else
   {  $xScale = $yScale;
   }
   prImage({ file   =&#62; &#39;best.pdf&#39;,
             x      =&#62; 25,
             y      =&#62; 450,
             xsize  =&#62; $xScale,
             ysize  =&#62; $yScale} );

   prText(25, 400, &#39;This is the second image :&#39;);

   $xScale = 300 / $vec2[1];
   $yScale = 300 / $vec2[2];
   if ($xScale &#60; $yScale)
   {  $yScale = $xScale;
   }
   else
   {  $xScale = $yScale;
   }
   prImage({ file   =&#62; &#39;destiny.pdf&#39;,
             x      =&#62; 25,
             y      =&#62; 25,
             xsize  =&#62; $xScale,
             ysize  =&#62; $yScale} );

   prEnd();</pre>

<p>On the first page an image is displayed in a simple way. While the second page is processed, prImage(), loads an image, but it is not shown here. On the 3:rd page, the two images are scaled and shown.</p>

<p>In the distribution there is an utility program, &#39;reuseComponent_pl&#39;, which displays included images in a PDF-file and their &#34;names&#34;.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prInit_-_add_JavaScript_to_be_executed_at_initiation"
>prInit - add JavaScript to be executed at initiation</a></h2>

<pre class="sh_perl">   prInit ( $string, $duplicateCode )</pre>

<p><b>$string</b> can be any JavaScript code, but you can only refer to functions included with prJs. The JavaScript interpreter will not know other functions in the document. Often you can add new things, but you can&#39;t remove or change interactive fields, because the interpreter hasn&#39;t come that far, when initiation is done.</p>

<p><b>$duplicateCode</b> is undefined or anything. It duplicates the JavaScript code which has been used at initiation, so you can look at it from within Acrobat and debug it. It makes the document bigger. This parameter is <b>deprecated</b>.</p>

<pre class="sh_perl">   use PDF::Reuse;
   use strict;
   
   prFile(&#39;myFile.pdf&#39;);
   prInit(&#39;app.alert(&#34;This is displayed when opening the document&#34;);&#39;);
      
   prEnd();</pre>

<p>Remark: Avoid to use &#34;return&#34; in the code you use at initiation. If your user has downloaded a page with Web Capture, and after that opens a PDF-document where a JavaScript is run at initiation and that JavaScript contains a return-statement, a bug occurs. The JavaScript interpreter &#34;exits&#34; instead of returning, the execution of the JavaScript might finish to early. This is a bug in Acrobat/Reader 5.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prInitVars_-_initiate_global_variables_and_internal_tables"
>prInitVars - initiate global variables and internal tables</a></h2>

<pre class="sh_perl">   prInitVars(1)</pre>

<p>If you run programs with PDF::Reuse as persistent procedures, you probably need to initiate global variables. If you have &#39;1&#39; or anything as parameter, internal tables for forms, images, fonts and interactive functions are <b>not</b> initiated. The module &#34;learns&#34; offset and sizes of used objects, and can process them faster, but at the same time the size of the program grows.</p>

<pre class="sh_perl">   use PDF::Reuse;
   use strict;
   prInitVars();     # To initiate ALL global variables and tables
   # prInitVars(1);  # To make it faster, but more memory consuming

   $| = 1;
   print STDOUT &#34;Content-Type: application/pdf \n\n&#34;;

   prFile();         # To send the document uncatalogued to STDOUT                

   prForm(&#39;best.pdf&#39;);
   prText(25, 790, &#39;Dear Mr. Anders Persson&#39;);
   # ...
   prEnd();</pre>

<p>If you call this function without parameters all global variables, including the internal tables, are initiated.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prJpeg_-_import_a_jpeg-image"
>prJpeg - import a jpeg-image</a></h2>

<pre class="sh_perl">   prJpeg ( $imageFile, $width, $height )</pre>

<p><b>$imageFile</b> contains 1 single jpeg-image. <b>$width</b> and <b>$height</b> also have to be specified. Returns the <b>$internalName</b></p>

<pre class="sh_perl">   use PDF::Reuse;
   use Image::Info qw(image_info dim);
   use strict;

   my $file = &#39;myImage.jpg&#39;;
   my $info = image_info($file);
   my ($width, $height) = dim($info);    # Get the dimensions

   prFile(&#39;myFile.pdf&#39;);
   my $intName = prJpeg(&#34;$file&#34;,         # Define the image 
                         $width,         # in the document
                         $height);

   my $str = &#34;q\n&#34;;
   $str   .= &#34;$width 0 0 $height 10 10 cm\n&#34;;
   $str   .= &#34;/$intName Do\n&#34;;
   $str   .= &#34;Q\n&#34;;
   prAdd($str);
   prEnd();</pre>

<p>This is a little like an extra or reserve routine to add images to the document. The most simple way is to use prImage()</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prJs_-_add_JavaScript"
>prJs - add JavaScript</a></h2>

<pre class="sh_perl">   prJs ( $string|$fileName )</pre>

<p>To add JavaScript to your new document. <b>$string</b> has to consist only of JavaScript functions: function a (..){ ... } function b (..) { ...} and so on If <b>$string</b> doesn&#39;t contain &#39;{&#39;, <b>$string</b> is interpreted as a filename. In that case the file has to consist only of JavaScript functions.</p>

<p><b>See &#34;Remarks about JavaScript&#34;</b></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prLink_-_add_a_hyper_link"
>prLink - add a hyper link</a></h2>

<pre class="sh_perl">   prLink( { page   =&#62; $pageNo,     # Starting with 1  !
             x      =&#62; $x,
             y      =&#62; $y,
             width  =&#62; $width,
             height =&#62; $height,
             URI    =&#62; $URI     } );</pre>

<p>You can also call prLink like this:</p>

<pre class="sh_perl">   prLink($page, $x, $y, $width, $height, $URI);</pre>

<p>You have to put prLink <b>after prFile and before the sentences where its&#39; page is created</b>. The links are created at the page-breaks. If the page is already created, no new link will be inserted.</p>

<p>Here is an example where the links of a 4 page document are preserved, and a link is added at the end of the document. We assume that there is some suitable text at that place (x = 400, y = 350):</p>

<pre class="sh_perl">   use strict;
   use PDF::Reuse;

   prFile(&#39;test.pdf&#39;);

   prLink( {page   =&#62; 4,
            x      =&#62; 400,
            y      =&#62; 350,
            width  =&#62; 105,
            height =&#62; 15,
            URI    =&#62; &#39;<a href="http://www.purelyInvented.com/info.html" class="podlinkurl"
>http://www.purelyInvented.com/info.html</a>&#39; } );

   prDoc(&#39;fourPages.pdf&#39;);

   prEnd();</pre>

<p>( If you are creating each page of a document separately, you can also use &#39;hyperLink&#39; from PDF::Reuse::Util. Then you get an external text in Helvetica-Oblique, underlined and in blue.</p>

<pre class="sh_perl">  use strict;
  use PDF::Reuse;
  use PDF::Reuse::Util;

  prFile(&#39;test.pdf&#39;);
  prForm(&#39;template.pdf&#39;, 5);
  my ($from, $pos) = prText(25, 700, &#39;To get more information  &#39;);

  $pos = hyperLink( $pos, 700, &#39;Press this link&#39;,
                    &#39;<a href="http://www.purelyInvented.com/info.html" class="podlinkurl"
>http://www.purelyInvented.com/info.html</a>&#39; );
  ($from, $pos) = prText( $pos, 700, &#39; And get connected&#39;);
  prEnd();</pre>

<p>&#39;hyperLink&#39; has a few parameters: $x, $y, $textToBeShown, $hyperLink and $fontSize (not shown in the example). It returns current x-position. )</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prLog_-_add_a_string_to_the_log"
>prLog - add a string to the log</a></h2>

<pre class="sh_perl">   prLog ( $string )</pre>

<p>Adds whatever you want to the current log (a reference No, a commentary, a tag ?) A log has to be active see prLogDir()</p>

<p>Look at &#34;Using the template&#34; and &#34;Restoring the document from the log&#34; in the tutorial for an example.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prLogDir_-_set_directory_for_the_log"
>prLogDir - set directory for the log</a></h2>

<pre class="sh_perl">   prLogDir ( $directory )</pre>

<p>Sets a directory for the logs and activates the logging. A little log file is created for each PDF-file. Normally it should be much, much more compact then the PDF-file, and it should be possible to restore or verify a document with the help of it. (Of course you could compress or store the logs in a database to save even more space.)</p>

<pre class="sh_perl">   use PDF::Reuse;
   use strict;

   prDocDir(&#39;C:/temp/doc&#39;);
   prLogDir(&#39;C:/run&#39;);

   prFile(&#39;myFile.pdf&#39;);
   prForm(&#39;best.pdf&#39;);
   prText(25, 790, &#39;Dear Mr. Anders Persson&#39;);
   # ...
   prEnd();</pre>

<p>In this example a log file with the name &#39;myFile.pdf.dat&#39; is created in the directory &#39;C:\run&#39;. If that directory doesn&#39;t exist, the system tries to create it. (But, just as mkdir does, it only creates the last level in a directory tree.)</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prMbox_-_define_the_format_(MediaBox)_for_a_new_page."
>prMbox - define the format (MediaBox) for a new page.</a></h2>

<pre class="sh_perl">   prMbox ( $lowerLeftX, $lowerLeftY, $upperRightX, $upperRightY )</pre>

<p>If the function or the parameters are missing, they are set to 0, 0, 595, 842 points respectively. Only for new pages. Pages created with prDoc and prSinglePage keep their media boxes unchanged.</p>

<p>See prForm() for an example.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prPage_-_create/insert_a_page"
>prPage - create/insert a page</a></h2>

<pre class="sh_perl">   prPage ($noLog)</pre>

<p>Don&#39;t use the optional parameter, it is only used internally, not to clutter the log, when automatic page breaks are made.</p>

<p>See prForm() for an example.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prSinglePage_-_take_single_pages,_one_by_one,_from_an_old_document"
>prSinglePage - take single pages, one by one, from an old document</a></h2>

<pre class="sh_perl">   prSinglePage($file, $pageNumber)</pre>

<p>$pageNumber is optional. If not given, next page is assumed Returns number of remaining pages. This function is a variant of prDoc for single pages, with the addition that it has a counter of last page read, and total number of pages of the old document, so it can be used to loop through a document.</p>

<p>To add a form, image and page number to each page of a document (The document Battery.pdf is cropped so each page is fairly small) You could also have used prDoc, but only if you knew in advance the number of pages of the old document</p>

<pre class="sh_perl">   use PDF::Reuse;
   use PDF::Reuse::Util;
   use strict;
      
   prFile(&#39;test.pdf&#39;);
      
   my $pageNumber = 0;
   my $left = 1;            # Every valid PDF-document has at least 1 page,
                            # so that can be assumed  
    
   while ($left) 
   {   $pageNumber++;
       prForm(  { file =&#62;&#39;Words.pdf&#39;,
                  page =&#62; 5,
                  x    =&#62; 150,
                  y    =&#62; 150} );
                    
       prImage( { file    =&#62;&#39;Media.pdf&#39;,
                  page    =&#62; 6,
                  imageNo =&#62; 1,
                  x       =&#62; 450,
                  y       =&#62; 450 } );
       blackText();
       prText( 360, 250, $pageNumber);
       $left = prSinglePage(&#39;Battery.pdf&#39;);   
    } 
     
    prEnd;</pre>

<p>prSinglePage creates a new page from an old document and adds new content (to the array of streams of that page). Most often you can add new contents to the page like the example above, and it works fine, but sometimes you get surprises. There can e.g. be instructions in the earlier contents to make filling color white, and then you will probably not see added new text. That is why PDF::Reuse::Util::blackText() is used in the example. There can be other instructions like moving or rotating the user space. Also new contents can end up outside the crop-box. Of course all new programs should be tested. If prSinglePage can&#39;t be used, try to use prForm followed by prPage instead.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prStrWidth_-_calculate_the_string_width"
>prStrWidth - calculate the string width</a></h2>

<pre class="sh_perl">   prStrWidth($string, $font, $fontSize)</pre>

<p>Returns string width in points. Should be used in conjunction with one of these predefined fonts of Acrobat/Reader: Times-Roman, Times-Bold, Times-Italic, Times-BoldItalic, Courier, Courier-Bold, Courier-Oblique, Courier-BoldOblique, Helvetica, Helvetica-Bold, Helvetica-Oblique, Helvetica-BoldOblique or with a TrueType font embedded with prTTFont. If some other font is given, Helvetica is used, and the returned value will at the best be approximate.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prText_-_add_a_text-string"
>prText - add a text-string</a></h2>

<pre class="sh_perl">   prText ( $x, $y, $string, $align, $rotation )</pre>

<p>Puts <b>$string</b> at position <b>$x, $y</b> Returns 1 in scalar context. Returns ($xFrom, $xTo) in list context. $xTo will not be defined together with a rotation. prStrWidth() is used to calculate the length of the strings, so only the predefined fonts together with Acrobat/Reader, or embedded TrueType fonts will give reliable values for $xTo.</p>

<p>$align can be &#39;left&#39; (= default), &#39;center&#39; or &#39;right&#39;. The parameter is optional.</p>

<p>$rotation can be a degree 0 - 360, &#39;q1&#39;, &#39;q2&#39; or &#39;q3&#39;. Also optional.</p>

<p>Current font and font size are used. (If you use prAdd() before this function, many other things could also influence the text.)</p>

<pre class="sh_perl">   use strict;
   use PDF::Reuse;

   prFile(&#39;test.pdf&#39;);

   #####################################
   # Use a &#34;curser&#34; ($pos) along a line
   #####################################

   my ($from, $pos) = prText(25, 800, &#39;First write this. &#39;);
   ($from, $pos) = prText($pos, 800, &#39;Then write this. &#39;); 
   prText($pos, 800, &#39;Finally write this.&#39;);

   #####################################
   # Right adjust and center sentences
   #####################################

   prText( 200, 750, &#39;A short sentence&#39;, &#39;right&#39;);
   prText( 200, 735, &#39;This is a longer sentence&#39;, &#39;right&#39;);
   prText( 200, 720, &#39;A word&#39;, &#39;right&#39;);

   prText( 200, 705, &#39;Centered around a point 200 points from the left&#39;, &#39;center&#39;);
   prText( 200, 690, &#39;The same center&#39;, &#39;center&#39;);
   prText( 200, 675, &#39;-&#62;.&#60;-&#39;, &#39;center&#39;);

   ############
   # Rotation
   ############

   prText( 200, 550, &#39; Rotate 0 degrees&#39;,&#39;&#39;, 0);
   prText( 200, 550, &#39; Rotate 60 degrees&#39;,&#39;&#39;, 60);
   prText( 200, 550, &#39; Rotate 120 degrees&#39;,&#39;&#39;, 120);
   prText( 200, 550, &#39; Rotate 180 degrees&#39;,&#39;&#39;, 180);
   prText( 200, 550, &#39; Rotate 240 degrees&#39;,&#39;&#39;, 240);
   prText( 200, 550, &#39; Rotate 300 degrees&#39;,&#39;&#39;, 300);

   prText( 400, 430, &#39;Rotate 90 degrees clock-wise&#39;,&#39;&#39;,&#39;q1&#39;);
   prText( 400, 430, &#39;Rotate 180 degrees clock-wise&#39;,&#39;&#39;, &#39;q2&#39;);
   prText( 400, 430, &#39;Rotate 270 degrees clock-wise&#39;,&#39;&#39;, &#39;q3&#39;);
   
   ##########################
   # Rotate and right adjust
   ##########################
   
   prText( 200, 230, &#39;Rotate 90 degrees clock-wise ra-&#62;&#39;,&#39;right&#39;,&#39;q1&#39;);
   prText( 200, 230, &#39;Rotate 180 degrees clock-wise ra-&#62;&#39;,&#39;right&#39;, &#39;q2&#39;);
   prText( 200, 230, &#39;Rotate 270 degrees clock-wise ra-&#62;&#39;,&#39;right&#39;, &#39;q3&#39;);
   
   prEnd();</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prTTFont_-_select_and_embed_a_TrueType_font"
>prTTFont - select and embed a TrueType font</a></h2>

<pre class="sh_perl">  prTTFont ( &#34;/path/to/font/file.ttf&#34; )</pre>

<p>This function is equivalent to <code>prFont</code> except that rather than restricting you to the list of core built-in fonts, it allows you to select an external TrueType font file and have it embedded in your PDF document. Using TrueType fonts also enables the <code>prText</code> function to accept UTF-8 strings, which allows you to use characters outside the Mac-Roman/Win-ANSI character sets used by the built-in fonts.</p>

<p>You can specify the same font path multiple times in one document and only one copy will be embedded. Alternatively, <code>prTTFont</code> returns an identifier which can be used to select the same font again:</p>

<pre class="sh_perl">  my $arial = prTTFont(&#39;/path/to/Arial.ttf&#39;);
  prFontSize(20);
  prText(20, 700, &#39;Some text in Arial&#39;);
  #
  # ... later ...
  #
  prPage();
  prTTFont($arial);
  prFontSize(12);
  prText(20, 700, &#39;Some more text in Arial&#39;);
  #
  #  to pass a UTF8 string to prText
  # 
  prText(20, 675, &#34;T\x{113}n\x{101} koutou&#34;);  # T?n? Koutou </pre>

<p>In list context this function returns <code>$internalName</code>, <code>$externalName</code>, <code>$oldInternalName</code>, <code>$oldExternalname</code>. The first two variables refer to the current font, the last two refer to the font before the change. In scalar context only <code>$internalName</code> is returned.</p>

<p>Note: To use this function, you must have the <a href="/perldoc?Font%3A%3ATTF" class="podlinkpod"
>Font::TTF</a> and <a href="/perldoc?Text%3A%3APDF" class="podlinkpod"
>Text::PDF</a> modules installed.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INTERNAL_OR_DEPRECATED_FUNCTIONS"
>INTERNAL OR DEPRECATED FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='prBar'></a><a name="prBar_-_define_and_paint_bars_for_bar_fonts"
>prBar - define and paint bars for bar fonts</a></dt>

<dd>
<pre class="sh_perl">   prBar ($x, $y, $string)</pre>

<p>Prints a bar font pattern at the current page. Returns $internalName for the font. $x and $y are coordinates in points and $string should consist of the characters &#39;0&#39;, &#39;1&#39; and &#39;2&#39; (or &#39;G&#39;). &#39;0&#39; is a white bar, &#39;1&#39; is a dark bar. &#39;2&#39; and &#39;G&#39; are dark, slightly longer bars, guard bars. You can use e.g. GD::Barcode or one module in that group to calculate the bar code pattern. prBar &#34;translates&#34; the pattern to white and black bars.</p>

<pre class="sh_perl">   use PDF::Reuse;
   use GD::Barcode::Code39;
   use strict;

   prFile(&#39;myFile.pdf&#39;);
   my $oGdB = GD::Barcode::Code39-&#62;new(&#39;JOHN DOE&#39;);
   my $sPtn = $oGdB-&#62;barcode();
   prBar(100, 600, $sPtn);
   prEnd();</pre>

<p>Internally the module uses a font for the bars, so you might want to change the font size before calling this function. In that case, use prFontSize() . If you call this function without arguments it defines the bar font but does not write anything to the current page.</p>

<p><b>An easier and often better way to produce bar codes is to use PDF::Reuse::Barcode.</b> Look at that module!</p>

<dt><a name='prCid'></a><a name="prCid_-_define_time_stamp/check_id"
>prCid - define time stamp/check id</a></dt>

<dd>
<pre class="sh_perl">   prCid ( $timeStamp )</pre>

<p>An internal function. Don&#39;t bother about it. It is used in automatic routines when you want to restore a document. It gives modification time of the next PDF-file or JavaScript. See &#34;Restoring a document from the log&#34; in the tutorial for more about the time stamp</p>

<dt><a name='prId'></a><a name="prId_-_define_id-string_of_a_PDF_document"
>prId - define id-string of a PDF document</a></dt>

<dd>
<pre class="sh_perl">   prId ( $string )</pre>

<p>An internal function. Don&#39;t bother about it. It is used e.g. when a document is restored and an id has to be set, not calculated.</p>

<dt><a name='prIdType'></a><a name="prIdType_-_define_id-type"
>prIdType - define id-type</a></dt>

<dd>
<pre class="sh_perl">   prIdType ( $string )</pre>

<p>An internal function. Avoid using it. <b>$string</b> could be &#34;Rep&#34; for replace or &#34;None&#34; to avoid calculating an id.</p>

<p>Normally you don&#39;t use this function. Then an id is calculated with the help of Digest::MD5::md5_hex and some data from the run.</p>

<dt><a name='prTouchUp'></a><a name="prTouchUp_-_make_changes_and_reuse_more_difficult"
>prTouchUp - make changes and reuse more difficult</a></dt>

<dd>
<pre class="sh_perl">   prTouchUp (1);</pre>

<p>By default and after you have issued prTouchUp(1), you can change the document with the TouchUp tool from within Acrobat. If you want to switch off this possibility, you use prTouchUp() without any parameter. Then the user shouldn&#39;t be able to change anything graphic by mistake. He has to do something premeditated and perhaps with a little effort. He could still save it as Postscript and redistill, or he could remove or add single pages. (Here is a strong reason why the log files, and perhaps also check sums, are needed. It would be very difficult to forge a document unless the forger also has access to your computer and knows how the check sums are calculated.)</p>

<p><b>Avoid to switch off the TouchUp tool for your templates.</b> It creates an extra level within the PDF-documents . Use this function for your final documents.</p>

<p>See &#34;Using the template&#34; in the tutorial for an example.</p>

<p>This function works for pages created with prPage, but mot with prDoc and prSinglePage, So it is more or less deprecated as these function have developed.</p>

<p>(To encrypt your documents: use the batch utility within Acrobat)</p>

<dt><a name='prVers'></a><a name="prVers_-_check_version_of_log_and_program"
>prVers - check version of log and program</a></dt>

<dd>
<pre class="sh_perl">   prVers ( $versionNo )</pre>

<p>To check version of this module in case a document has to be restored.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">   <a href="/perldoc?PDF%3A%3AReuse%3A%3ATutorial" class="podlinkpod"
>PDF::Reuse::Tutorial</a>
   <a href="/perldoc?PDF%3A%3AReuse%3A%3ABarcode" class="podlinkpod"
>PDF::Reuse::Barcode</a>
   <a href="/perldoc?PDF%3A%3AReuse%3A%3AOverlayChart" class="podlinkpod"
>PDF::Reuse::OverlayChart</a></pre>

<p>To program with PDF-operators, look at &#34;The PDF-reference Manual&#34; which probably is possible to download from <a href="http://partners.adobe.com/asn/tech/pdf/specifications.jsp" class="podlinkurl"
>http://partners.adobe.com/asn/tech/pdf/specifications.jsp</a> Look especially at chapter 4 and 5, Graphics and Text, and the Operator summary.</p>

<p>Technical Note # 5186 contains the &#34;Acrobat JavaScript Object Specification&#34;. I downloaded it from <a href="http://partners.adobe.com/asn/developer/technotes/acrobatpdf.html" class="podlinkurl"
>http://partners.adobe.com/asn/developer/technotes/acrobatpdf.html</a></p>

<p>If you are serious about producing PDF-files, you probably need Adobe Acrobat sooner or later. It has a price tag. Other good programs are GhostScript and GSview. I got them via <a href="http://www.cs.wisc.edu/~ghost/index.html" class="podlinkurl"
>http://www.cs.wisc.edu/~ghost/index.html</a> Sometimes they can replace Acrobat. A nice little detail is e.g. that GSview shows the x- and y-coordinates better then Acrobat. If you need to convert HTML-files to PDF, HTMLDOC is a possible tool. Download it from <a href="http://www.easysw.com" class="podlinkurl"
>http://www.easysw.com</a> . A simple tool for vector graphics is Mayura Draw 2.04, download it from <a href="http://www.mayura.com" class="podlinkurl"
>http://www.mayura.com</a>. It is free. I have used it to produce the graphic OO-code in the tutorial. It produces postscript which the Acrobat Distiller (you get it together with Acrobat) or Ghostscript can convert to PDF.(The commercial product, Mayura Draw 4.01 or something higher can produce PDF-files straight away)</p>

<p>If you want to import jpeg-images, you might need</p>

<pre class="sh_perl">   <a href="/perldoc?Image%3A%3AInfo" class="podlinkpod"
>Image::Info</a></pre>

<p>To get definitions for e.g. colors, take them from</p>

<pre class="sh_perl">   <a href="/perldoc?PDF%3A%3AAPI2%3A%3AUtil" class="podlinkpod"
>PDF::API2::Util</a> </pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LIMITATIONS"
>LIMITATIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Meta data, info and many other features of the PDF-format have not been implemented in this module.</p>

<p>Many things can be added afterwards, after creating the files. If you e.g. need files to be encrypted, you can use a standard batch routine within Adobe Acrobat.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="THANKS_TO"
>THANKS TO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Martin Langhoff, Matisse Enzer, Yunliang Yu and others who have contributed with code, suggestions and error reports.</p>

<p>Grant McLean has implemented font embedding by grafting Font::TTF and Text::PDF::TTFont0 onto the PDF::Reuse API. He has written the embedded packages PDF::Reuse::DocProxy and PDF::Reuse::TTFont.</p>

<p>The functionality of prDoc and prSinglePage to include new contents was developed for a specific task with support from the Electoral Enrolment Centre, Wellington, New Zealand</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MAILING_LIST"
>MAILING LIST <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">   <a href="http://groups.google.com/group/PDF-Reuse" class="podlinkurl"
>http://groups.google.com/group/PDF-Reuse</a></pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Lars Lundberg larslund@cpan.org</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (C) 2003 - 2004 Lars Lundberg, Solidez HB. Copyright (C) 2005 Karin Lundberg. Copyright (C) 2006 - Lars Lundberg, Solidez HB. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DISCLAIMER"
>DISCLAIMER <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You get this module free as it is, but nothing is guaranteed to work, whatever implicitly or explicitly stated in this document, and everything you do, you do at your own risk - I will not take responsibility for any damage, loss of money and/or health that may arise from the use of this module.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78272 Uploads, 24723 Distributions
106001 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 19:50:19 2012 GMT (0.700612783432007) @cpansearch1 -->
 </body>
</html>
