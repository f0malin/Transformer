<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Acme::Pythonic - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Acme-Pythonic",3]);
    _gaq.push(["_setCustomVar",5,"Release","Acme-Pythonic-0.47",3]);
    _gaq.push(["_setCustomVar",3,"Module","Acme::Pythonic",3]);
    _gaq.push(["_setCustomVar",1,"Author","FXN",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Acme::Pythonic">permalink</a></div>
  <a href="/~fxn/">Xavier Noria</a> &gt;
  <a href="/~fxn/Acme-Pythonic-0.47/">Acme-Pythonic-0.47</a> &gt;
  Acme::Pythonic
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/356cfed1218a5226244f2276bf35cc4c?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/F/FX/FXN/Acme-Pythonic-0.47.tar.gz">Acme-Pythonic-0.47.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Acme%3A%3APythonic;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~FXN/Acme-Pythonic-0.47/lib/Acme/Pythonic.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Acme%3A%3AScripticide">Acme::Scripticide</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Acme%3A%3ABuffy">Acme::Buffy</a><br>
<a href="/perldoc?Acme%3A%3APlaymate">Acme::Playmate</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Acme%3A%3APythonic">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Acme-Pythonic">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.47 &nbsp;
<span class="noprint">
  <a href="/src/FXN/Acme-Pythonic-0.47/lib/Acme/Pythonic.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#OVERVIEW'>OVERVIEW</a>
  <li class='indexItem indexItem1'><a href='#DETAILS'>DETAILS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Labels'>Labels</a>
    <li class='indexItem indexItem2'><a href='#do/while-like_constructs'>do/while-like constructs</a>
    <li class='indexItem indexItem2'><a href='#New_Keywords'>New Keywords</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#pass'>pass</a>
      <li class='indexItem indexItem3'><a href='#in'>in</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#&#38;-Prototyped_subroutines'>&#38;-Prototyped subroutines</a>
    <li class='indexItem indexItem2'><a href='#Line_joining'>Line joining</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CAVEATS'>CAVEATS</a>
  <li class='indexItem indexItem1'><a href='#DEBUG'>DEBUG</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#THANKS'>THANKS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Acme::Pythonic - Python whitespace conventions for Perl</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> use Acme::Pythonic; # this semicolon yet needed

 sub delete_edges:
     my $G = shift
     while my ($u, $v) = splice(@_, 0, 2):
         if defined $v:
             $G-&#62;delete_edge($u, $v)
         else:
             my @e = $G-&#62;edges($u)
             while ($u, $v) = splice(@e, 0, 2):
                 $G-&#62;delete_edge($u, $v)</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Acme::Pythonic brings Python whitespace conventions to Perl. Just <code>use</code> it and Pythonic code will become valid on the fly. No file is generated, no file is modified.</p>

<p>This module is thought for those who embrace contradictions. A humble contribution for walkers of the Whitespace Matters Way in their pursuit of highest realization, only attained with <a href="/perldoc?SuperPython" class="podlinkpod"
>SuperPython</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OVERVIEW"
>OVERVIEW <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Acme::Pythonic provides <i>grosso modo</i> these conventions:</p>

<ul>
<li>Blocks are marked by indentation and an opening colon instead of braces.</li>

<li>Simple statements are separated by newlines instead of semicolons.</li>

<li>EXPRs in control flow structures do not need parentheses around.</li>
</ul>

<p>Additionally, the filter understands the keywords <code>pass</code> and <code>in</code>.</p>

<pre class="sh_perl">    for my $n in 1..100:
        while $n != 1:
            if $n % 2:
                $n = 3*$n + 1
            else:
                $n /= 2</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DETAILS"
>DETAILS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Labels"
>Labels</a></h2>

<p>The syntax this module provides introduces an ambiguity: Given</p>

<pre class="sh_perl">    if $flag:
        do_this()
    else:
        do_that()</pre>

<p>there&#39;s no way to know whether that is meant to be</p>

<pre class="sh_perl">    if ($flag) {
        do_this();
    } else {
        do_that();
    }</pre>

<p>or rather</p>

<pre class="sh_perl">    if ($flag) {
        do_this();
    }
    else: {
        do_that();
    }</pre>

<p>The former is a regular if/else, whereas the latter consists of an if and a labeled block, so <code>do_that()</code> is unconditionally executed.</p>

<p>To solve this <b>labels in Pythonic code have to be in upper case</b>.</p>

<p>In addition, to be able to write BEGIN blocks and friends this way:</p>

<pre class="sh_perl">    BEGIN:
        $foo = 3</pre>

<p><code>BEGIN</code>, <code>CHECK</code>, <code>INIT</code>, <code>END</code> cannot be used as labels.</p>

<p>Let&#39;s see some examples. This is the Pythonic version of the snippet in <a href="/perldoc?perlsyn" class="podlinkpod"
>perlsyn</a>:</p>

<pre class="sh_perl">    OUTER: for my $wid in @ary1:
        INNER: for my $jet in @ary2:
            next OUTER if $wid &#62; $jet
            $wid += $jet</pre>

<p>And here we have a labeled block:</p>

<pre class="sh_perl">    my $k = 7
    FOO:
        --$k
        last FOO if $k &#60; 0
        redo FOO</pre>

<p>Note that if we put a label in the line before in a control structure indentation matters, because that&#39;s what marks blocks. For instance, this would be a non-equivalent reformat of the example above:</p>

<pre class="sh_perl">    OUTER:
        for my $wid in @ary1:               # NOT WHAT WE WANT
            INNER:
            for my $jet in @ary2:           # GOOD, ALIGNED
                next OUTER if $wid &#62; $jet
                $wid += $jet</pre>

<p>Since the first <code>for</code> is indented with respect to the label <code>OUTER:</code> we get a labeled block containing a <code>for</code> loop, instead of a labeled <code>for</code>. This is the interpretation in regular Perl:</p>

<pre class="sh_perl">    OUTER: {
        for my $wid (@ary1) {               # NOT WHAT WE WANT
            INNER:
            for my $jet (@ary2) {           # GOOD, ALIGNED
                next OUTER if $wid &#62; $jet;
                $wid += $jet;
            }
        }
    }</pre>

<p>The consequence is that <code>next OUTER</code> goes outside the outer for loop and thus it is restarted, instead of continued.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="do/while-like_constructs"
><code>do/while</code>-like constructs</a></h2>

<p>Acme::Pythonic tries to detect statement modifiers after a <code>do BLOCK</code>. Thus</p>

<pre class="sh_perl">    do:
        do_something()
        do_something_else()
    while $condition</pre>

<p>is seen as a do/while, whereas</p>

<pre class="sh_perl">    do:
        do_something()
        do_something_else()
    while $condition:
        handle_some_stuff()</pre>

<p>is not.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="New_Keywords"
>New Keywords</a></h2>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="pass"
>pass</a></h3>

<p><code>pass</code> is a NO-OP, it is meant to explicit empty blocks:</p>

<pre class="sh_perl">    sub abstract_method:
        pass</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="in"
>in</a></h3>

<p>This works:</p>

<pre class="sh_perl">    foreach my $foo @array:
        do_something_with $foo</pre>

<p>Nevertheless, <code>in</code> can be inserted there as in Python in case you find the following more readable:</p>

<pre class="sh_perl">    foreach my $foo in @array:
        do_something_with $foo</pre>

<p>This keyword can be used if there&#39;s no variable to its left too, which means we are dealing with <code>$_</code> as usual:</p>

<pre class="sh_perl">    foreach in @array:
        s/foo/bar/</pre>

<p>but can&#39;t be used when the loop acts as a modifier:</p>

<pre class="sh_perl">    print foreach in @array # ERROR</pre>

<p>This keyword is not supported as sequence membership operator.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="&#38;-Prototyped_subroutines"
>&#38;-Prototyped subroutines</a></h2>

<p><code>&#38;</code>-prototyped subroutines can be used like this:</p>

<pre class="sh_perl">    sub mygrep (&#38;@):
        my $code = shift
        my @result
        foreach @_:
            push @result, $_ if &#38;$code
        return @result

    @array = mygrep:
        my $aux = $_
        $aux *= 3
        $aux += 1
        $aux % 2
    reverse 0..5</pre>

<p>If the prototype is exactly <code>&#38;</code>, however, Acme::Pythonic needs to know it in advance. Thus, if any module defines such a subroutine <code>use()</code> it <i>before</i> Acme::Pythonic:</p>

<pre class="sh_perl">    use Thread &#39;async&#39;;
    use Acme::Pythonic; # now Acme::Pythonic knows async() has prototype &#34;&#38;&#34;

    async:
        do_this()
        do_that()</pre>

<p>If such a subroutine is defined in the very code being filtered we need to declare it before Acme::Pythonic is <code>use()</code>d:</p>

<pre class="sh_perl">    sub twice (&#38;);      # declaration
    use Acme::Pythonic; # now Acme::Pythonic knows twice() has prototype &#34;&#38;&#34;

    # the definition itself can be Pythonic
    sub twice (&#38;):
         my $code = shift
         $code-&#62;() for 1..2

    twice:
         do_this_twice()</pre>

<p>Nevertheless, the module is not smart enough to handle optional arguments as in a subroutine with prototype <code>&#38;;$</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Line_joining"
>Line joining</a></h2>

<p>As in Python, you can break a logical line in several physical lines using a backslash at the end:</p>

<pre class="sh_perl">    my $total = total_products() + \
                total_delivery() + \
                total_taxes()</pre>

<p>and in that case the indentation of those additional lines is irrelevant.</p>

<p>Unlike Python, backslashes in a line with a comment are allowed</p>

<pre class="sh_perl">    my $foo = 1 + \  # comment, no problem
        2</pre>

<p>If a line ends in a comma or arrow (<code>=&#62;</code>) it is conceptually joined with the following as well:</p>

<pre class="sh_perl">    my %authors = (Perl   =&#62; &#34;Larry Wall&#34;,
                   Python =&#62; &#34;Guido van Rossum&#34;)</pre>

<p>As in Python, comments can be intermixed there:</p>

<pre class="sh_perl">    my %hello = (Catalan =&#62; &#39;Hola&#39;,   # my mother tongue
                 English =&#62; &#39;Hello&#39;,)</pre>

<p>Acme::Pythonic munges a source that has already been processed by <a href="/perldoc?Filter%3A%3ASimple" class="podlinkpod"
>Filter::Simple</a>. In particular, <a href="/perldoc?Filter%3A%3ASimple" class="podlinkpod"
>Filter::Simple</a> blanks out quotelikes whose content is not even seen by Acme::Pythonic so backslashes in <code>qw//</code> and friends won&#39;t be removed:</p>

<pre class="sh_perl">    # Do not put backslashes here because qw// is bypassed
    my @colors = qw(Red
                    Blue
                    Green)</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CAVEATS"
>CAVEATS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Although this module makes possible some Python-like syntax in Perl, there are some remarkable limitations in the current implementation:</p>

<ul>
<li>Compound statement bodies are not recognized in header lines. This would be valid according to Python syntax:
<pre class="sh_perl">    if $n % 2: $n = 3*$n + 1
    else: $n /= 2</pre>

<p>but it does not work in Acme::Pythonic. The reason for this is that it would be hard to identify the colon that closes the expression without parsing Perl, consider for instance:</p>

<pre class="sh_perl">    if keys %foo::bar ? keys %main:: : keys %foo::: print &#34;foo\n&#34;</pre>
</li>

<li>In Python statements may span lines if they&#39;re enclosed in <code>()</code>, <code>{}</code>, or <code>[]</code> pairs. Acme::Pythonic does not support this rule, however, though it understands the common case where you break the line in a comma in list literals, subroutine calls, etc.</li>
</ul>

<p>Remember that source filters do not work if they are called at runtime, for instance via <code>require</code> or <code>eval EXPR</code>. The source code was already consumed in the compilation phase by then.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DEBUG"
>DEBUG <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?Filter%3A%3AExtractSource" class="podlinkpod"
>Filter::ExtractSource</a> can be used to inspect the source code generated by Acme::Pythonic:</p>

<pre class="sh_perl">    perl -c -MFilter::ExtractSource pythonic_script.pl</pre>

<p>Acme::Pythonic itself has a <code>debug</code> flag though:</p>

<pre class="sh_perl">    use Acme::Pythonic debug =&#62; 1;</pre>

<p>In debug mode the module prints to standard output the code it has generated, and passes just a dummy <code>1;</code> to <a href="/perldoc?Filter%3A%3ASimple" class="podlinkpod"
>Filter::Simple</a>.</p>

<p>This happens <i>before</i> <a href="/perldoc?Filter%3A%3ASimple" class="podlinkpod"
>Filter::Simple</a> undoes the blanking out of PODs, strings, and regexps. Those parts are marked with the label <code>BLANKED_OUT</code> for easy identification.</p>

<p>Acme::Pythonic generates human readable Perl following <a href="/perldoc?perlstyle" class="podlinkpod"
>perlstyle</a>, and tries meticulously to be respectful with the original source code. Blank lines and comments are preserved.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module uses a regexp approach and the superb help of Filter::Simple. The regexp part of this means it is broken from the start, though I&#39;ve tried hard to make it as robust as I could. Bug reports will be very welcome, just drop me a line!</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="THANKS"
>THANKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Damian Conway gave his full blessing if I wanted to write a module like this based on his unpublished Language::Pythonesque. The code that handles indentation is inspired by his.</p>

<p>Also, Dr. Conway is the author of <a href="/perldoc?Filter%3A%3ASimple" class="podlinkpod"
>Filter::Simple</a>, which aids a lot blanking out PODs, strings, etc. so you can munge the source with certain confidence. Without Filter::Simple this module would be infinitely more broken.</p>

<p>Esteve Fernandez helped testing the module under 5.6.1 and contributed a Sieve of Eratosthenes for <em>t/algorithms.t</em>. Thank you dude!</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?perlfilter" class="podlinkpod"
>perlfilter</a>, <a href="/perldoc?Filter%3A%3ASimple" class="podlinkpod"
>Filter::Simple</a>, <a href="/perldoc?Filter%3A%3AExtractSource" class="podlinkpod"
>Filter::ExtractSource</a>, <a href="/perldoc?SuperPython" class="podlinkpod"
>SuperPython</a>, <a href="/perldoc?Acme%3A%3ADot" class="podlinkpod"
>Acme::Dot</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Xavier Noria (FXN), &#60;fxn@cpan.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (C) 2004-2012 by Xavier Noria</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself, either Perl version 5.8.2 or, at your option, any later version of Perl 5 you may have available.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78272 Uploads, 24723 Distributions
106001 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 20:45:33 2012 GMT (0.1109299659729) @cpansearch1 -->
 </body>
</html>
