<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Filter::Simple - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Filter-Simple",3]);
    _gaq.push(["_setCustomVar",5,"Release","Filter-Simple-0.88",3]);
    _gaq.push(["_setCustomVar",3,"Module","Filter::Simple",3]);
    _gaq.push(["_setCustomVar",1,"Author","SMUELLER",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Filter::Simple">permalink</a></div>
  <a href="/~smueller/">Steffen M&uuml;ller</a> &gt;
  <a href="/~smueller/Filter-Simple-0.88/">Filter-Simple-0.88</a> &gt;
  Filter::Simple
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/ac0c0eab36df58cd3676c1f03f4d5185?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/S/SM/SMUELLER/Filter-Simple-0.88.tar.gz">Filter-Simple-0.88.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Filter%3A%3ASimple;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~SMUELLER/Filter-Simple-0.88/lib/Filter/Simple.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Class%3A%3AInsideOut">Class::InsideOut</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Text%3A%3ABalanced">Text::Balanced</a><br>
<a href="/perldoc?Scalar%3A%3AUtil">Scalar::Util</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?Parse%3A%3ARecDescent">Parse::RecDescent</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?List%3A%3AUtil">List::Util</a><br>
<a href="/perldoc?Regexp%3A%3ACommon">Regexp::Common</a><br>
<a href="/perldoc?Params%3A%3AValidate">Params::Validate</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Filter%3A%3ASimple">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 2</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Filter-Simple">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.88 &nbsp;
<span class="noprint">
  <a href="/src/SMUELLER/Filter-Simple-0.88/lib/Filter/Simple.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#The_Problem'>The Problem</a>
    <li class='indexItem indexItem2'><a href='#A_Solution'>A Solution</a>
    <li class='indexItem indexItem2'><a href='#Disabling_or_changing_&#60;no&#62;_behaviour'>Disabling or changing &#60;no&#62; behaviour</a>
    <li class='indexItem indexItem2'><a href='#All-in-one_interface'>All-in-one interface</a>
    <li class='indexItem indexItem2'><a href='#Filtering_only_specific_components_of_source_code'>Filtering only specific components of source code</a>
    <li class='indexItem indexItem2'><a href='#Filtering_only_the_code_parts_of_source_code'>Filtering only the code parts of source code</a>
    <li class='indexItem indexItem2'><a href='#Using_Filter::Simple_with_an_explicit_import_subroutine'>Using Filter::Simple with an explicit import subroutine</a>
    <li class='indexItem indexItem2'><a href='#Using_Filter::Simple_and_Exporter_together'>Using Filter::Simple and Exporter together</a>
    <li class='indexItem indexItem2'><a href='#How_it_works'>How it works</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#CONTACT'>CONTACT</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Filter::Simple - Simplified source filtering</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> # in MyFilter.pm:

     package MyFilter;

     use Filter::Simple;
     
     FILTER { ... };

     # or just:
     #
     # use Filter::Simple sub { ... };

 # in user&#39;s code:

     use MyFilter;

     # this code is filtered

     no MyFilter;

     # this code is not</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_Problem"
>The Problem</a></h2>

<p>Source filtering is an immensely powerful feature of recent versions of Perl. It allows one to extend the language itself (e.g. the Switch module), to simplify the language (e.g. Language::Pythonesque), or to completely recast the language (e.g. Lingua::Romana::Perligata). Effectively, it allows one to use the full power of Perl as its own, recursively applied, macro language.</p>

<p>The excellent Filter::Util::Call module (by Paul Marquess) provides a usable Perl interface to source filtering, but it is often too powerful and not nearly as simple as it could be.</p>

<p>To use the module it is necessary to do the following:</p>

<ol>
<li>Download, build, and install the Filter::Util::Call module. (If you have Perl 5.7.1 or later, this is already done for you.)</li>

<li>Set up a module that does a <code>use Filter::Util::Call</code>.</li>

<li>Within that module, create an <code>import</code> subroutine.</li>

<li>Within the <code>import</code> subroutine do a call to <code>filter_add</code>, passing it either a subroutine reference.</li>

<li>Within the subroutine reference, call <code>filter_read</code> or <code>filter_read_exact</code> to &#34;prime&#34; $_ with source code data from the source file that will <code>use</code> your module. Check the status value returned to see if any source code was actually read in.</li>

<li>Process the contents of $_ to change the source code in the desired manner.</li>

<li>Return the status value.</li>

<li>If the act of unimporting your module (via a <code>no</code>) should cause source code filtering to cease, create an <code>unimport</code> subroutine, and have it call <code>filter_del</code>. Make sure that the call to <code>filter_read</code> or <code>filter_read_exact</code> in step 5 will not accidentally read past the <code>no</code>. Effectively this limits source code filters to line-by-line operation, unless the <code>import</code> subroutine does some fancy pre-pre-parsing of the source code it&#39;s filtering.</li>
</ol>

<p>For example, here is a minimal source code filter in a module named BANG.pm. It simply converts every occurrence of the sequence <code>BANG\s+BANG</code> to the sequence <code>die &#39;BANG&#39; if $BANG</code> in any piece of code following a <code>use BANG;</code> statement (until the next <code>no BANG;</code> statement, if any):</p>

<pre class="sh_perl">    package BANG;
 
    use Filter::Util::Call ;

    sub import {
        filter_add( sub {
        my $caller = caller;
        my ($status, $no_seen, $data);
        while ($status = filter_read()) {
            if (/^\s*no\s+$caller\s*;\s*?$/) {
                $no_seen=1;
                last;
            }
            $data .= $_;
            $_ = &#34;&#34;;
        }
        $_ = $data;
        s/BANG\s+BANG/die &#39;BANG&#39; if \$BANG/g
            unless $status &#60; 0;
        $_ .= &#34;no $class;\n&#34; if $no_seen;
        return 1;
        })
    }

    sub unimport {
        filter_del();
    }

    1 ;</pre>

<p>This level of sophistication puts filtering out of the reach of many programmers.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="A_Solution"
>A Solution</a></h2>

<p>The Filter::Simple module provides a simplified interface to Filter::Util::Call; one that is sufficient for most common cases.</p>

<p>Instead of the above process, with Filter::Simple the task of setting up a source code filter is reduced to:</p>

<ol>
<li>Download and install the Filter::Simple module. (If you have Perl 5.7.1 or later, this is already done for you.)</li>

<li>Set up a module that does a <code>use Filter::Simple</code> and then calls <code>FILTER { ... }</code>.</li>

<li>Within the anonymous subroutine or block that is passed to <code>FILTER</code>, process the contents of $_ to change the source code in the desired manner.</li>
</ol>

<p>In other words, the previous example, would become:</p>

<pre class="sh_perl">    package BANG;
    use Filter::Simple;
    
    FILTER {
        s/BANG\s+BANG/die &#39;BANG&#39; if \$BANG/g;
    };

    1 ;</pre>

<p>Note that the source code is passed as a single string, so any regex that uses <code>^</code> or <code>$</code> to detect line boundaries will need the <code>/m</code> flag.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Disabling_or_changing_&#60;no&#62;_behaviour"
>Disabling or changing &#60;no&#62; behaviour</a></h2>

<p>By default, the installed filter only filters up to a line consisting of one of the three standard source &#34;terminators&#34;:</p>

<pre class="sh_perl">    no ModuleName;  # optional comment</pre>

<p>or:</p>

<pre class="sh_perl">    __END__</pre>

<p>or:</p>

<pre class="sh_perl">    __DATA__</pre>

<p>but this can be altered by passing a second argument to <code>use Filter::Simple</code> or <code>FILTER</code> (just remember: there&#39;s <i>no</i> comma after the initial block when you use <code>FILTER</code>).</p>

<p>That second argument may be either a <code>qr</code>&#39;d regular expression (which is then used to match the terminator line), or a defined false value (which indicates that no terminator line should be looked for), or a reference to a hash (in which case the terminator is the value associated with the key <code>&#39;terminator&#39;</code>.</p>

<p>For example, to cause the previous filter to filter only up to a line of the form:</p>

<pre class="sh_perl">    GNAB esu;</pre>

<p>you would write:</p>

<pre class="sh_perl">    package BANG;
    use Filter::Simple;
    
    FILTER {
        s/BANG\s+BANG/die &#39;BANG&#39; if \$BANG/g;
    }
    qr/^\s*GNAB\s+esu\s*;\s*?$/;</pre>

<p>or:</p>

<pre class="sh_perl">    FILTER {
        s/BANG\s+BANG/die &#39;BANG&#39; if \$BANG/g;
    }
    { terminator =&#62; qr/^\s*GNAB\s+esu\s*;\s*?$/ };</pre>

<p>and to prevent the filter&#39;s being turned off in any way:</p>

<pre class="sh_perl">    package BANG;
    use Filter::Simple;
    
    FILTER {
        s/BANG\s+BANG/die &#39;BANG&#39; if \$BANG/g;
    }
    &#34;&#34;;    # or: 0</pre>

<p>or:</p>

<pre class="sh_perl">    FILTER {
        s/BANG\s+BANG/die &#39;BANG&#39; if \$BANG/g;
    }
    { terminator =&#62; &#34;&#34; };</pre>

<p><b>Note that, no matter what you set the terminator pattern to, the actual terminator itself <i>must</i> be contained on a single source line.</b></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="All-in-one_interface"
>All-in-one interface</a></h2>

<p>Separating the loading of Filter::Simple:</p>

<pre class="sh_perl">    use Filter::Simple;</pre>

<p>from the setting up of the filtering:</p>

<pre class="sh_perl">    FILTER { ... };</pre>

<p>is useful because it allows other code (typically parser support code or caching variables) to be defined before the filter is invoked. However, there is often no need for such a separation.</p>

<p>In those cases, it is easier to just append the filtering subroutine and any terminator specification directly to the <code>use</code> statement that loads Filter::Simple, like so:</p>

<pre class="sh_perl">    use Filter::Simple sub {
        s/BANG\s+BANG/die &#39;BANG&#39; if \$BANG/g;
    };</pre>

<p>This is exactly the same as:</p>

<pre class="sh_perl">    use Filter::Simple;
    BEGIN {
        Filter::Simple::FILTER {
            s/BANG\s+BANG/die &#39;BANG&#39; if \$BANG/g;
        };
    }</pre>

<p>except that the <code>FILTER</code> subroutine is not exported by Filter::Simple.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Filtering_only_specific_components_of_source_code"
>Filtering only specific components of source code</a></h2>

<p>One of the problems with a filter like:</p>

<pre class="sh_perl">    use Filter::Simple;

    FILTER { s/BANG\s+BANG/die &#39;BANG&#39; if \$BANG/g };</pre>

<p>is that it indiscriminately applies the specified transformation to the entire text of your source program. So something like:</p>

<pre class="sh_perl">    warn &#39;BANG BANG, YOU&#39;RE DEAD&#39;;
    BANG BANG;</pre>

<p>will become:</p>

<pre class="sh_perl">    warn &#39;die &#39;BANG&#39; if $BANG, YOU&#39;RE DEAD&#39;;
    die &#39;BANG&#39; if $BANG;</pre>

<p>It is very common when filtering source to only want to apply the filter to the non-character-string parts of the code, or alternatively to <i>only</i> the character strings.</p>

<p>Filter::Simple supports this type of filtering by automatically exporting the <code>FILTER_ONLY</code> subroutine.</p>

<p><code>FILTER_ONLY</code> takes a sequence of specifiers that install separate (and possibly multiple) filters that act on only parts of the source code. For example:</p>

<pre class="sh_perl">    use Filter::Simple;

    FILTER_ONLY
        code      =&#62; sub { s/BANG\s+BANG/die &#39;BANG&#39; if \$BANG/g },
        quotelike =&#62; sub { s/BANG\s+BANG/CHITTY CHITTY/g };</pre>

<p>The <code>&#34;code&#34;</code> subroutine will only be used to filter parts of the source code that are not quotelikes, POD, or <code>__DATA__</code>. The <code>quotelike</code> subroutine only filters Perl quotelikes (including here documents).</p>

<p>The full list of alternatives is:</p>

<dl>
<dt><a name='code'></a><a name="&#34;code&#34;"
><code>&#34;code&#34;</code></a></dt>

<dd>
<p>Filters only those sections of the source code that are not quotelikes, POD, or <code>__DATA__</code>.</p>

<dt><a name='code_no_comments'></a><a name="&#34;code_no_comments&#34;"
><code>&#34;code_no_comments&#34;</code></a></dt>

<dd>
<p>Filters only those sections of the source code that are not quotelikes, POD, comments, or <code>__DATA__</code>.</p>

<dt><a name='executable'></a><a name="&#34;executable&#34;"
><code>&#34;executable&#34;</code></a></dt>

<dd>
<p>Filters only those sections of the source code that are not POD or <code>__DATA__</code>.</p>

<dt><a name='executable_no_comments'></a><a name="&#34;executable_no_comments&#34;"
><code>&#34;executable_no_comments&#34;</code></a></dt>

<dd>
<p>Filters only those sections of the source code that are not POD, comments, or <code>__DATA__</code>.</p>

<dt><a name='quotelike'></a><a name="&#34;quotelike&#34;"
><code>&#34;quotelike&#34;</code></a></dt>

<dd>
<p>Filters only Perl quotelikes (as interpreted by <code>&#38;Text::Balanced::extract_quotelike</code>).</p>

<dt><a name='string'></a><a name="&#34;string&#34;"
><code>&#34;string&#34;</code></a></dt>

<dd>
<p>Filters only the string literal parts of a Perl quotelike (i.e. the contents of a string literal, either half of a <code>tr///</code>, the second half of an <code>s///</code>).</p>

<dt><a name='regex'></a><a name="&#34;regex&#34;"
><code>&#34;regex&#34;</code></a></dt>

<dd>
<p>Filters only the pattern literal parts of a Perl quotelike (i.e. the contents of a <code>qr//</code> or an <code>m//</code>, the first half of an <code>s///</code>).</p>

<dt><a name='all'></a><a name="&#34;all&#34;"
><code>&#34;all&#34;</code></a></dt>

<dd>
<p>Filters everything. Identical in effect to <code>FILTER</code>.</p>
</dd>
</dl>

<p>Except for <code>FILTER_ONLY code =&#62; sub {...}</code>, each of the component filters is called repeatedly, once for each component found in the source code.</p>

<p>Note that you can also apply two or more of the same type of filter in a single <code>FILTER_ONLY</code>. For example, here&#39;s a simple macro-preprocessor that is only applied within regexes, with a final debugging pass that prints the resulting source code:</p>

<pre class="sh_perl">    use Regexp::Common;
    FILTER_ONLY
        regex =&#62; sub { s/!\[/[^/g },
        regex =&#62; sub { s/%d/$RE{num}{int}/g },
        regex =&#62; sub { s/%f/$RE{num}{real}/g },
        all   =&#62; sub { print if $::DEBUG };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Filtering_only_the_code_parts_of_source_code"
>Filtering only the code parts of source code</a></h2>

<p>Most source code ceases to be grammatically correct when it is broken up into the pieces between string literals and regexes. So the <code>&#39;code&#39;</code> and <code>&#39;code_no_comments&#39;</code> component filter behave slightly differently from the other partial filters described in the previous section.</p>

<p>Rather than calling the specified processor on each individual piece of code (i.e. on the bits between quotelikes), the <code>&#39;code...&#39;</code> partial filters operate on the entire source code, but with the quotelike bits (and, in the case of <code>&#39;code_no_comments&#39;</code>, the comments) &#34;blanked out&#34;.</p>

<p>That is, a <code>&#39;code...&#39;</code> filter <i>replaces</i> each quoted string, quotelike, regex, POD, and __DATA__ section with a placeholder. The delimiters of this placeholder are the contents of the <code>$;</code> variable at the time the filter is applied (normally <code>&#34;\034&#34;</code>). The remaining four bytes are a unique identifier for the component being replaced.</p>

<p>This approach makes it comparatively easy to write code preprocessors without worrying about the form or contents of strings, regexes, etc.</p>

<p>For convenience, during a <code>&#39;code...&#39;</code> filtering operation, Filter::Simple provides a package variable (<code>$Filter::Simple::placeholder</code>) that contains a pre-compiled regex that matches any placeholder...and captures the identifier within the placeholder. Placeholders can be moved and re-ordered within the source code as needed.</p>

<p>In addition, a second package variable (<code>@Filter::Simple::components</code>) contains a list of the various pieces of <code>$_</code>, as they were originally split up to allow placeholders to be inserted.</p>

<p>Once the filtering has been applied, the original strings, regexes, POD, etc. are re-inserted into the code, by replacing each placeholder with the corresponding original component (from <code>@components</code>). Note that this means that the <code>@components</code> variable must be treated with extreme care within the filter. The <code>@components</code> array stores the &#34;back- translations&#34; of each placeholder inserted into <code>$_</code>, as well as the interstitial source code between placeholders. If the placeholder backtranslations are altered in <code>@components</code>, they will be similarly changed when the placeholders are removed from <code>$_</code> after the filter is complete.</p>

<p>For example, the following filter detects concatenated pairs of strings/quotelikes and reverses the order in which they are concatenated:</p>

<pre class="sh_perl">    package DemoRevCat;
    use Filter::Simple;

    FILTER_ONLY code =&#62; sub {
        my $ph = $Filter::Simple::placeholder;
        s{ ($ph) \s* [.] \s* ($ph) }{ $2.$1 }gx
    };</pre>

<p>Thus, the following code:</p>

<pre class="sh_perl">    use DemoRevCat;

    my $str = &#34;abc&#34; . q(def);

    print &#34;$str\n&#34;;</pre>

<p>would become:</p>

<pre class="sh_perl">    my $str = q(def).&#34;abc&#34;;

    print &#34;$str\n&#34;;</pre>

<p>and hence print:</p>

<pre class="sh_perl">    defabc</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Using_Filter::Simple_with_an_explicit_import_subroutine"
>Using Filter::Simple with an explicit <code>import</code> subroutine</a></h2>

<p>Filter::Simple generates a special <code>import</code> subroutine for your module (see <a href="#How_it_works" class="podlinkpod"
>&#34;How it works&#34;</a>) which would normally replace any <code>import</code> subroutine you might have explicitly declared.</p>

<p>However, Filter::Simple is smart enough to notice your existing <code>import</code> and Do The Right Thing with it. That is, if you explicitly define an <code>import</code> subroutine in a package that&#39;s using Filter::Simple, that <code>import</code> subroutine will still be invoked immediately after any filter you install.</p>

<p>The only thing you have to remember is that the <code>import</code> subroutine <i>must</i> be declared <i>before</i> the filter is installed. If you use <code>FILTER</code> to install the filter:</p>

<pre class="sh_perl">    package Filter::TurnItUpTo11;

    use Filter::Simple;

    FILTER { s/(\w+)/\U$1/ };</pre>

<p>that will almost never be a problem, but if you install a filtering subroutine by passing it directly to the <code>use Filter::Simple</code> statement:</p>

<pre class="sh_perl">    package Filter::TurnItUpTo11;

    use Filter::Simple sub{ s/(\w+)/\U$1/ };</pre>

<p>then you must make sure that your <code>import</code> subroutine appears before that <code>use</code> statement.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Using_Filter::Simple_and_Exporter_together"
>Using Filter::Simple and Exporter together</a></h2>

<p>Likewise, Filter::Simple is also smart enough to Do The Right Thing if you use Exporter:</p>

<pre class="sh_perl">    package Switch;
    use base Exporter;
    use Filter::Simple;

    @EXPORT    = qw(switch case);
    @EXPORT_OK = qw(given  when);

    FILTER { $_ = magic_Perl_filter($_) }</pre>

<p>Immediately after the filter has been applied to the source, Filter::Simple will pass control to Exporter, so it can do its magic too.</p>

<p>Of course, here too, Filter::Simple has to know you&#39;re using Exporter before it applies the filter. That&#39;s almost never a problem, but if you&#39;re nervous about it, you can guarantee that things will work correctly by ensuring that your <code>use base Exporter</code> always precedes your <code>use Filter::Simple</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="How_it_works"
>How it works</a></h2>

<p>The Filter::Simple module exports into the package that calls <code>FILTER</code> (or <code>use</code>s it directly) -- such as package &#34;BANG&#34; in the above example -- two automagically constructed subroutines -- <code>import</code> and <code>unimport</code> -- which take care of all the nasty details.</p>

<p>In addition, the generated <code>import</code> subroutine passes its own argument list to the filtering subroutine, so the BANG.pm filter could easily be made parametric:</p>

<pre class="sh_perl">    package BANG;
 
    use Filter::Simple;
    
    FILTER {
        my ($die_msg, $var_name) = @_;
        s/BANG\s+BANG/die &#39;$die_msg&#39; if \${$var_name}/g;
    };

    # and in some user code:

    use BANG &#34;BOOM&#34;, &#34;BAM&#34;;  # &#34;BANG BANG&#34; becomes: die &#39;BOOM&#39; if $BAM</pre>

<p>The specified filtering subroutine is called every time a <code>use BANG</code> is encountered, and passed all the source code following that call, up to either the next <code>no BANG;</code> (or whatever terminator you&#39;ve set) or the end of the source file, whichever occurs first. By default, any <code>no BANG;</code> call must appear by itself on a separate line, or it is ignored.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Damian Conway</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONTACT"
>CONTACT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Filter::Simple is now maintained by the Perl5-Porters. Please submit bug via the <code>perlbug</code> tool that comes with your perl. For usage instructions, read <code>perldoc perlbug</code> or possibly <code>man perlbug</code>. For mostly anything else, please contact &#60;perl5-porters@perl.org&#62;.</p>

<p>Maintainer of the CPAN release is Steffen Mueller &#60;smueller@cpan.org&#62;. Contact him with technical difficulties with respect to the packaging of the CPAN module.</p>

<p>Praise of the module, flowers, and presents still go to the author, Damian Conway &#60;damian@conway.org&#62;.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    Copyright (c) 2000-2008, Damian Conway. All Rights Reserved.
    This module is free software. It may be used, redistributed
    and/or modified under the same terms as Perl itself.</pre>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78058 Uploads, 24685 Distributions
105890 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 21 23:47:31 2012 GMT (0.319534063339233) @cpansearch1 -->
 </body>
</html>
