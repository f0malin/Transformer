<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>String::Approx - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","String-Approx",3]);
    _gaq.push(["_setCustomVar",5,"Release","String-Approx-3.26",3]);
    _gaq.push(["_setCustomVar",3,"Module","String::Approx",3]);
    _gaq.push(["_setCustomVar",1,"Author","JHI",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?String::Approx">permalink</a></div>
  <a href="/~jhi/">Jarkko Hietaniemi</a> &gt;
  <a href="/~jhi/String-Approx-3.26/">String-Approx-3.26</a> &gt;
  String::Approx
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/5aaaee305cd57a85e1be8f889fbfac7e?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/J/JH/JHI/String-Approx-3.26.tar.gz">String-Approx-3.26.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=String%3A%3AApprox;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~JHI/String-Approx-3.26/Approx.pm">Annotate this POD
(2)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Text%3A%3ASoundex">Text::Soundex</a><br>
<a href="/perldoc?Algorithm%3A%3ADiff">Algorithm::Diff</a><br>
<a href="/perldoc?Text%3A%3AMetaphone">Text::Metaphone</a><br>
<a href="/perldoc?List%3A%3ACompare">List::Compare</a><br>
<a href="/perldoc?Inline%3A%3AC">Inline::C</a><br>
<a href="/perldoc?Digest%3A%3AMD5">Digest::MD5</a><br>
<a href="/perldoc?HTML%3A%3ATokeParser">HTML::TokeParser</a><br>
<a href="/perldoc?Text%3A%3AAbbrev">Text::Abbrev</a><br>
<a href="/perldoc?XML%3A%3AWriter">XML::Writer</a><br>
<a href="/perldoc?DBD%3A%3ARAM">DBD::RAM</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=String%3A%3AApprox">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 5</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=String-Approx">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  3.26 &nbsp;
<span class="noprint">
  <a href="/src/JHI/String-Approx-3.26/Approx.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#MATCH'>MATCH</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#MODIFIERS'>MODIFIERS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SUBSTITUTE'>SUBSTITUTE</a>
  <li class='indexItem indexItem1'><a href='#INDEX'>INDEX</a>
  <li class='indexItem indexItem1'><a href='#SLICE'>SLICE</a>
  <li class='indexItem indexItem1'><a href='#DISTANCE'>DISTANCE</a>
  <li class='indexItem indexItem1'><a href='#CONTROLLING_THE_CACHE'>CONTROLLING THE CACHE</a>
  <li class='indexItem indexItem1'><a href='#NOTES'>NOTES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#TEXT_POSITION'>TEXT POSITION</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#CHANGES_FROM_VERSION_2'>CHANGES FROM VERSION 2</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#GOOD_NEWS'>GOOD NEWS</a>
    <li class='indexItem indexItem2'><a href='#BAD_NEWS'>BAD NEWS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#ACKNOWLEDGEMENTS'>ACKNOWLEDGEMENTS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>String::Approx - Perl extension for approximate matching (fuzzy matching)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use String::Approx &#39;amatch&#39;;

  print if amatch(&#34;foobar&#34;);

  my @matches = amatch(&#34;xyzzy&#34;, @inputs);

  my @catches = amatch(&#34;plugh&#34;, [&#39;2&#39;], @inputs);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>String::Approx lets you match and substitute strings approximately. With this you can emulate errors: typing errorrs, speling errors, closely related vocabularies (colour color), genetic mutations (GAG ACT), abbreviations (McScot, MacScot).</p>

<p>NOTE: String::Approx suits the task of <b>string matching</b>, not <b>string comparison</b>, and it works for <b>strings</b>, not for <b>text</b>.</p>

<p>If you want to compare strings for similarity, you probably just want the Levenshtein edit distance (explained below), the Text::Levenshtein and Text::LevenshteinXS modules in CPAN. See also Text::WagnerFischer and Text::PhraseDistance. (There are functions for this in String::Approx, e.g. adist(), but their results sometimes differ from the bare Levenshtein et al.)</p>

<p>If you want to compare things like text or source code, consisting of <b>words</b> or <b>tokens</b> and <b>phrases</b> and <b>sentences</b>, or <b>expressions</b> and <b>statements</b>, you should probably use some other tool than String::Approx, like for example the standard UNIX diff(1) tool, or the Algorithm::Diff module from CPAN.</p>

<p>The measure of <b>approximateness</b> is the <i>Levenshtein edit distance</i>. It is the total number of &#34;edits&#34;: insertions,</p>

<pre class="sh_perl">        word world</pre>

<p>deletions,</p>

<pre class="sh_perl">        monkey money</pre>

<p>and substitutions</p>

<pre class="sh_perl">        sun fun</pre>

<p>required to transform a string to another string. For example, to transform <i>&#34;lead&#34;</i> into <i>&#34;gold&#34;</i>, you need three edits:</p>

<pre class="sh_perl">        lead gead goad gold</pre>

<p>The edit distance of &#34;lead&#34; and &#34;gold&#34; is therefore three, or 75%.</p>

<p><b>String::Approx uses the Levenshtein edit distance (tLed) as its measure, but String::Approx is not well-suited for comparing the tLeds of strings, in other words, if you want a &#34;fuzzy eq&#34;, see above. Strings::Approx is more like regular expressions or index(), it finds substrings that are close matches.</b></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MATCH"
>MATCH <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">        use String::Approx &#39;amatch&#39;;

        $matched     = amatch(&#34;pattern&#34;) 
        $matched     = amatch(&#34;pattern&#34;, [ modifiers ])

        $any_matched = amatch(&#34;pattern&#34;, @inputs) 
        $any_matched = amatch(&#34;pattern&#34;, [ modifiers ], @inputs)

        @match       = amatch(&#34;pattern&#34;) 
        @match       = amatch(&#34;pattern&#34;, [ modifiers ])

        @matches     = amatch(&#34;pattern&#34;, @inputs) 
        @matches     = amatch(&#34;pattern&#34;, [ modifiers ], @inputs)</pre>

<p>Match <b>pattern</b> approximately. In list context return the matched <b>@inputs</b>. If no inputs are given, match against the <b>$_</b>. In scalar context return true if <i>any</i> of the inputs match, false if none match.</p>

<p>Notice that the pattern is a string. Not a regular expression. None of the regular expression notations (^, ., *, and so on) work. They are characters just like the others. Note-on-note: some limited form of <i>&#34;regular expressionism&#34;</i> is planned in future: for example character classes ([abc]) and <i>any-chars</i> (.). But that feature will be turned on by a special <i>modifier</i> (just a guess: &#34;r&#34;), so there should be no backward compatibility problem.</p>

<p>Notice also that matching is not symmetric. The inputs are matched against the pattern, not the other way round. In other words: the pattern can be a substring, a submatch, of an input element. An input element is always a superstring of the pattern.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="MODIFIERS"
>MODIFIERS</a></h2>

<p>With the modifiers you can control the amount of approximateness and certain other control variables. The modifiers are one or more strings, for example <b>&#34;i&#34;</b>, within a string optionally separated by whitespace. The modifiers are inside an anonymous array: the <b>[ ]</b> in the syntax are not notational, they really do mean <b>[ ]</b>, for example <b>[ &#34;i&#34;, &#34;2&#34; ]</b>. <b>[&#34;2 i&#34;]</b> would be identical.</p>

<p>The implicit default approximateness is 10%, rounded up. In other words: every tenth character in the pattern may be an error, an edit. You can explicitly set the maximum approximateness by supplying a modifier like</p>

<pre class="sh_perl">        number
        number%</pre>

<p>Examples: <b>&#34;3&#34;</b>, <b>&#34;15%&#34;</b>.</p>

<p>Note that <code>0%</code> is not rounded up, it is equal to <code>0</code>.</p>

<p>Using a similar syntax you can separately control the maximum number of insertions, deletions, and substitutions by prefixing the numbers with I, D, or S, like this:</p>

<pre class="sh_perl">        Inumber
        Inumber%
        Dnumber
        Dnumber%
        Snumber
        Snumber%</pre>

<p>Examples: <b>&#34;I2&#34;</b>, <b>&#34;D20%&#34;</b>, <b>&#34;S0&#34;</b>.</p>

<p>You can ignore case (<b>&#34;A&#34;</b> becames equal to <b>&#34;a&#34;</b> and vice versa) by adding the <b>&#34;i&#34;</b> modifier.</p>

<p>For example</p>

<pre class="sh_perl">        [ &#34;i 25%&#34;, &#34;S0&#34; ]</pre>

<p>means <i>ignore case</i>, <i>allow every fourth character to be &#34;an edit&#34;</i>, but allow <i>no substitutions</i>. (See <a href="/perldoc?NOTES" class="podlinkpod"
>NOTES</a> about disallowing substitutions or insertions.)</p>

<p>NOTE: setting <code>I0 D0 S0</code> is not equivalent to using index(). If you want to use index(), use index().</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUBSTITUTE"
>SUBSTITUTE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">        use String::Approx &#39;asubstitute&#39;;

        @substituted = asubstitute(&#34;pattern&#34;, &#34;replacement&#34;)
        @substituted = asubstitute(&#34;pattern&#34;, &#34;replacement&#34;, @inputs) 
        @substituted = asubstitute(&#34;pattern&#34;, &#34;replacement&#34;, [ modifiers ])
        @substituted = asubstitute(&#34;pattern&#34;, &#34;replacement&#34;,
                                   [ modifiers ], @inputs)</pre>

<p>Substitute approximate <b>pattern</b> with <b>replacement</b> and return as a list &#60;copies&#62; of <b>@inputs</b>, the substitutions having been made on the elements that did match the pattern. If no inputs are given, substitute in the <b>$_</b>. The replacement can contain magic strings <b>$&#38;</b>, <b>$`</b>, <b>$&#39;</b> that stand for the matched string, the string before it, and the string after it, respectively. All the other arguments are as in <code>amatch()</code>, plus one additional modifier, <b>&#34;g&#34;</b> which means substitute globally (all the matches in an element and not just the first one, as is the default).</p>

<p>See <a href="#BAD_NEWS" class="podlinkpod"
>&#34;BAD NEWS&#34;</a> about the unfortunate stinginess of <code>asubstitute()</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INDEX"
>INDEX <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">        use String::Approx &#39;aindex&#39;;

        $index   = aindex(&#34;pattern&#34;)
        @indices = aindex(&#34;pattern&#34;, @inputs)
        $index   = aindex(&#34;pattern&#34;, [ modifiers ])
        @indices = aindex(&#34;pattern&#34;, [ modifiers ], @inputs)</pre>

<p>Like <code>amatch()</code> but returns the index/indices at which the pattern matches approximately. In list context and if <code>@inputs</code> are used, returns a list of indices, one index for each input element. If there&#39;s no approximate match, <code>-1</code> is returned as the index.</p>

<p>NOTE: if there is character repetition (e.g. &#34;aa&#34;) either in the pattern or in the text, the returned index might start &#34;too early&#34;. This is consistent with the goal of the module of matching &#34;as early as possible&#34;, just like regular expressions (that there might be a &#34;less approximate&#34; match starting later is of somewhat irrelevant).</p>

<p>There&#39;s also backwards-scanning <code>arindex()</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SLICE"
>SLICE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">        use String::Approx &#39;aslice&#39;;

        ($index, $size)   = aslice(&#34;pattern&#34;)
        ([$i0, $s0], ...) = aslice(&#34;pattern&#34;, @inputs)
        ($index, $size)   = aslice(&#34;pattern&#34;, [ modifiers ])
        ([$i0, $s0], ...) = aslice(&#34;pattern&#34;, [ modifiers ], @inputs)</pre>

<p>Like <code>aindex()</code> but returns also the size (length) of the match. If the match fails, returns an empty list (when matching against <code>$_</code>) or an empty anonymous list corresponding to the particular input.</p>

<p>NOTE: size of the match will very probably be something you did not expect (such as longer than the pattern, or a negative number). This may or may not be fixed in future releases. Also the beginning of the match may vary from the expected as with aindex(), see above.</p>

<p>If the modifier</p>

<pre class="sh_perl">        &#34;minimal_distance&#34;</pre>

<p>is used, the minimal possible edit distance is returned as the third element:</p>

<pre class="sh_perl">        ($index, $size, $distance) = aslice(&#34;pattern&#34;, [ modifiers ])
        ([$i0, $s0, $d0], ...)     = aslice(&#34;pattern&#34;, [ modifiers ], @inputs)</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DISTANCE"
>DISTANCE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">        use String::Approx &#39;adist&#39;;

        $dist = adist(&#34;pattern&#34;, $input);
        @dist = adist(&#34;pattern&#34;, @input);</pre>

<p>Return the <i>edit distance</i> or distances between the pattern and the input or inputs. Zero edit distance means exact match. (Remember that the match can &#39;float&#39; in the inputs, the match is a substring match.) If the pattern is longer than the input or inputs, the returned distance or distances is or are negative.</p>

<pre class="sh_perl">        use String::Approx &#39;adistr&#39;;

        $dist = adistr(&#34;pattern&#34;, $input);
        @dist = adistr(&#34;pattern&#34;, @inputs);</pre>

<p>Return the <b>relative</b> <i>edit distance</i> or distances between the pattern and the input or inputs. Zero relative edit distance means exact match, one means completely different. (Remember that the match can &#39;float&#39; in the inputs, the match is a substring match.) If the pattern is longer than the input or inputs, the returned distance or distances is or are negative.</p>

<p>You can use adist() or adistr() to sort the inputs according to their approximateness:</p>

<pre class="sh_perl">        my %d;
        @d{@inputs} = map { abs } adistr(&#34;pattern&#34;, @inputs);
        my @d = sort { $d{$a} &#60;=&#62; $d{$b} } @inputs;</pre>

<p>Now <code>@d</code> contains the inputs, the most like <code>&#34;pattern&#34;</code> first.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONTROLLING_THE_CACHE"
>CONTROLLING THE CACHE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>String::Approx</code> maintains a LU (least-used) cache that holds the &#39;matching engines&#39; for each instance of a <i>pattern+modifiers</i>. The cache is intended to help the case where you match a small set of patterns against a large set of string. However, the more engines you cache the more you eat memory. If you have a lot of different patterns or if you have a lot of memory to burn, you may want to control the cache yourself. For example, allowing a larger cache consumes more memory but probably runs a little bit faster since the cache fills (and needs flushing) less often.</p>

<p>The cache has two parameters: <i>max</i> and <i>purge</i>. The first one is the maximum size of the cache and the second one is the cache flushing ratio: when the number of cache entries exceeds <i>max</i>, <i>max</i> times <i>purge</i> cache entries are flushed. The default values are 1000 and 0.75, respectively, which means that when the 1001st entry would be cached, 750 least used entries will be removed from the cache. To access the parameters you can use the calls</p>

<pre class="sh_perl">        $now_max = String::Approx::cache_max();
        String::Approx::cache_max($new_max);

        $now_purge = String::Approx::cache_purge();
        String::Approx::cache_purge($new_purge);

        $limit = String::Approx::cache_n_purge();</pre>

<p>To be honest, there are actually <b>two</b> caches: the first one is used far the patterns with no modifiers, the second one for the patterns with pattern modifiers. Using the standard parameters you will therefore actually cache up to 2000 entries. The above calls control both caches for the same price.</p>

<p>To disable caching completely use</p>

<pre class="sh_perl">        String::Approx::cache_disable();</pre>

<p>Note that this doesn&#39;t flush any possibly existing cache entries, to do that use</p>

<pre class="sh_perl">        String::Approx::cache_flush_all();</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTES"
>NOTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Because matching is by <i>substrings</i>, not by whole strings, insertions and substitutions produce often very similar results: &#34;abcde&#34; matches &#34;axbcde&#34; either by insertion <b>or</b> substitution of &#34;x&#34;.</p>

<p>The maximum edit distance is also the maximum number of edits. That is, the <b>&#34;I2&#34;</b> in</p>

<pre class="sh_perl">        amatch(&#34;abcd&#34;, [&#34;I2&#34;])</pre>

<p>is useless because the maximum edit distance is (implicitly) 1. You may have meant to say</p>

<pre class="sh_perl">        amatch(&#34;abcd&#34;, [&#34;2D1S1&#34;])</pre>

<p>or something like that.</p>

<p>If you want to simulate transposes</p>

<pre class="sh_perl">        feet fete</pre>

<p>you need to allow at least edit distance of two because in terms of our edit primitives a transpose is first one deletion and then one insertion.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="TEXT_POSITION"
>TEXT POSITION</a></h2>

<p>The starting and ending positions of matching, substituting, indexing, or slicing can be changed from the beginning and end of the input(s) to some other positions by using either or both of the modifiers</p>

<pre class="sh_perl">        &#34;initial_position=24&#34;
        &#34;final_position=42&#34;</pre>

<p>or the both the modifiers</p>

<pre class="sh_perl">        &#34;initial_position=24&#34;
        &#34;position_range=10&#34;</pre>

<p>By setting the <b>&#34;position_range&#34;</b> to be zero you can limit (anchor) the operation to happen only once (if a match is possible) at the position.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Major release 3.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CHANGES_FROM_VERSION_2"
>CHANGES FROM VERSION 2 <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="GOOD_NEWS"
>GOOD NEWS</a></h2>

<dl>
<dt><a name='The'></a><a name="The_version_3_is_2-3_times_faster_than_version_2"
>The version 3 is 2-3 times faster than version 2</a></dt>

<dd>
<dt><a name='No'></a><a name="No_pattern_length_limitation"
>No pattern length limitation</a></dt>

<dd>
<p>The algorithm is independent on the pattern length: its time complexity is <i>O(kn)</i>, where <i>k</i> is the number of edits and <i>n</i> the length of the text (input). The preprocessing of the pattern will of course take some <i>O(m)</i> (<i>m</i> being the pattern length) time, but <code>amatch()</code> and <code>asubstitute()</code> cache the result of this preprocessing so that it is done only once per pattern.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="BAD_NEWS"
>BAD NEWS</a></h2>

<dl>
<dt><a name='You'></a><a name="You_do_need_a_C_compiler_to_install_the_module"
>You do need a C compiler to install the module</a></dt>

<dd>
<p>Perl&#39;s regular expressions are no more used; instead a faster and more scalable algorithm written in C is used.</p>

<dt><a name='asubstitute'></a><a name="asubstitute()_is_now_always_stingy"
><code>asubstitute()</code> is now always stingy</a></dt>

<dd>
<p>The string matched and substituted is now always stingy, as short as possible. It used to be as long as possible. This is an unfortunate change stemming from switching the matching algorithm. Example: with edit distance of two and substituting for <b>&#34;word&#34;</b> from <b>&#34;cork&#34;</b> and <b>&#34;wool&#34;</b> previously did match <b>&#34;cork&#34;</b> and <b>&#34;wool&#34;</b>. Now it does match <b>&#34;or&#34;</b> and <b>&#34;wo&#34;</b>. As little as possible, or, in other words, with as much approximateness, as many edits, as possible. Because there is no <i>need</i> to match the <b>&#34;c&#34;</b> of <b>&#34;cork&#34;</b>, it is not matched.</p>

<dt><a name='no'></a><a name="no_more_aregex()_because_regular_expressions_are_no_more_used"
>no more <code>aregex()</code> because regular expressions are no more used</a></dt>

<dd>
<dt><a name='no'></a><a name="no_more_compat1_for_String::Approx_version_1_compatibility"
>no more <code>compat1</code> for String::Approx version 1 compatibility</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACKNOWLEDGEMENTS"
>ACKNOWLEDGEMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following people have provided valuable test cases, documentation clarifications, and other feedback:</p>

<p>Jared August, Arthur Bergman, Anirvan Chatterjee, Steve A. Chervitz, Aldo Calpini, David Curiel, Teun van den Dool, Alberto Fontaneda, Rob Fugina, Dmitrij Frishman, Lars Gregersen, Kevin Greiner, B. Elijah Griffin, Mike Hanafey, Mitch Helle, Ricky Houghton, &#39;idallen&#39;, Helmut Jarausch, Damian Keefe, Ben Kennedy, Craig Kelley, Franz Kirsch, Dag Kristian, Mark Land, J. D. Laub, John P. Linderman, Tim Maher, Juha Muilu, Sergey Novoselov, Andy Oram, Ji Y Park, Eric Promislow, Nikolaus Rath, Stefan Ram, Slaven Rezic, Dag Kristian Rognlien, Stewart Russell, Slaven Rezic, Chris Rosin, Pasha Sadri, Ilya Sandler, Bob J.A. Schijvenaars, Ross Smith, Frank Tobin, Greg Ward, Rich Williams, Rick Wise.</p>

<p>The matching algorithm was developed by Udi Manber, Sun Wu, and Burra Gopal in the Department of Computer Science, University of Arizona.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Jarkko Hietaniemi &#60;jhi@iki.fi&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2001-2005 by Jarkko Hietaniemi</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>Furthermore: no warranties or obligations of any kind are given, and the separate file <em>COPYRIGHT</em> must be included intact in all copies and derived materials.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78163 Uploads, 24704 Distributions
105968 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Tue Apr 24 20:29:47 2012 GMT (0.191295146942139) @cpansearch1 -->
 </body>
</html>
