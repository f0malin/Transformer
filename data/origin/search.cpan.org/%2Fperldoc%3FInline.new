<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Inline - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Inline",3]);
    _gaq.push(["_setCustomVar",5,"Release","Inline-0.50",3]);
    _gaq.push(["_setCustomVar",3,"Module","Inline",3]);
    _gaq.push(["_setCustomVar",1,"Author","SISYPHUS",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Inline">permalink</a></div>
  <a href="/~sisyphus/">Sisyphus</a> &gt;
  <a href="/~sisyphus/Inline-0.50/">Inline-0.50</a> &gt;
  Inline
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/388cc01610ffcd7caee1a2ed5c5fa601?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/S/SI/SISYPHUS/Inline-0.50.tar.gz">Inline-0.50.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Inline;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~SISYPHUS/Inline-0.50/Inline.pod">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 5</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 10</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Inline">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.50 &nbsp;
<span class="noprint">
  <a href="/src/SISYPHUS/Inline-0.50/Inline.pm">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~sisyphus/Inline/Inline.pod">Inline-0.50_01</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Why_Inline?'>Why Inline?</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Using_the_Inline.pm_Module'>Using the Inline.pm Module</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#The_Basics'>The Basics</a>
    <li class='indexItem indexItem2'><a href='#More_about_the_DATA_Section'>More about the DATA Section</a>
    <li class='indexItem indexItem2'><a href='#Configuration_Options'>Configuration Options</a>
    <li class='indexItem indexItem2'><a href='#On_and_Off'>On and Off</a>
    <li class='indexItem indexItem2'><a href='#Playing_&#39;with&#39;_Others'>Playing &#39;with&#39; Others</a>
    <li class='indexItem indexItem2'><a href='#Inline_Shortcuts'>Inline Shortcuts</a>
    <li class='indexItem indexItem2'><a href='#The_Inline_DIRECTORY'>The Inline DIRECTORY</a>
    <li class='indexItem indexItem2'><a href='#Debugging_Inline_Errors'>Debugging Inline Errors</a>
    <li class='indexItem indexItem2'><a href='#The_&#39;config&#39;_Registry_File'>The &#39;config&#39; Registry File</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Configuration_Options'>Configuration Options</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#DIRECTORY'>DIRECTORY</a>
    <li class='indexItem indexItem2'><a href='#NAME'>NAME</a>
    <li class='indexItem indexItem2'><a href='#AUTONAME'>AUTONAME</a>
    <li class='indexItem indexItem2'><a href='#VERSION'>VERSION</a>
    <li class='indexItem indexItem2'><a href='#WITH'>WITH</a>
    <li class='indexItem indexItem2'><a href='#GLOBAL_LOAD'>GLOBAL_LOAD</a>
    <li class='indexItem indexItem2'><a href='#UNTAINT'>UNTAINT</a>
    <li class='indexItem indexItem2'><a href='#SAFEMODE'>SAFEMODE</a>
    <li class='indexItem indexItem2'><a href='#FORCE_BUILD'>FORCE_BUILD</a>
    <li class='indexItem indexItem2'><a href='#BUILD_NOISY'>BUILD_NOISY</a>
    <li class='indexItem indexItem2'><a href='#BUILD_TIMERS'>BUILD_TIMERS</a>
    <li class='indexItem indexItem2'><a href='#CLEAN_AFTER_BUILD'>CLEAN_AFTER_BUILD</a>
    <li class='indexItem indexItem2'><a href='#CLEAN_BUILD_AREA'>CLEAN_BUILD_AREA</a>
    <li class='indexItem indexItem2'><a href='#PRINT_INFO'>PRINT_INFO</a>
    <li class='indexItem indexItem2'><a href='#PRINT_VERSION'>PRINT_VERSION</a>
    <li class='indexItem indexItem2'><a href='#REPORTBUG'>REPORTBUG</a>
    <li class='indexItem indexItem2'><a href='#REWRITE_CONFIG_FILE'>REWRITE_CONFIG_FILE</a>
    <li class='indexItem indexItem2'><a href='#WARNINGS'>WARNINGS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Inline_Configuration_Shortcuts'>Inline Configuration Shortcuts</a>
  <li class='indexItem indexItem1'><a href='#Writing_Modules_with_Inline'>Writing Modules with Inline</a>
  <li class='indexItem indexItem1'><a href='#How_Inline_Works'>How Inline Works</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#BUGS_AND_DEFICIENCIES'>BUGS AND DEFICIENCIES</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Inline - Write Perl subroutines in other programming languages.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use Inline C;

    print &#34;9 + 16 = &#34;, add(9, 16), &#34;\n&#34;;
    print &#34;9 - 16 = &#34;, subtract(9, 16), &#34;\n&#34;;

    __END__
    __C__
    int add(int x, int y) {
      return x + y;
    }

    int subtract(int x, int y) {
      return x - y;
    }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Inline module allows you to put source code from other programming languages directly &#34;inline&#34; in a Perl script or module. The code is automatically compiled as needed, and then loaded for immediate access from Perl.</p>

<p>Inline saves you from the hassle of having to write and compile your own glue code using facilities like XS or SWIG. Simply type the code where you want it and run your Perl as normal. All the hairy details are handled for you. The compilation and installation of your code chunks all happen transparently; all you will notice is the delay of compilation on the first run.</p>

<p>The Inline code only gets compiled the first time you run it (or whenever it is modified) so you only take the performance hit once. Code that is Inlined into distributed modules (like on the CPAN) will get compiled when the module is installed, so the end user will never notice the compilation time.</p>

<p>Best of all, it works the same on both Unix and Microsoft Windows. See <a href="/~sisyphus/Inline-0.50/Inline-Support.pod" class="podlinkpod"
>Inline-Support</a> for support information.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Why_Inline?"
>Why Inline?</a></h2>

<p>Do you want to know &#34;Why would I use other languages in Perl?&#34; or &#34;Why should I use Inline to do it?&#34;? I&#39;ll try to answer both.</p>

<dl>
<dt><a name='Why'></a><a name="Why_would_I_use_other_languages_in_Perl?"
>Why would I use other languages in Perl?</a></dt>

<dd>
<p>The most obvious reason is performance. For an interpreted language, Perl is very fast. Many people will say &#34;Anything Perl can do, C can do faster&#34;. (They never mention the development time :-) Anyway, you may be able to remove a bottleneck in your Perl code by using another language, without having to write the entire program in that language. This keeps your overall development time down, because you&#39;re using Perl for all of the non-critical code.</p>

<p>Another reason is to access functionality from existing API-s that use the language. Some of this code may only be available in binary form. But by creating small subroutines in the native language, you can &#34;glue&#34; existing libraries to your Perl. As a user of the CPAN, you know that code reuse is a good thing. So why throw away those Fortran libraries just yet?</p>

<p>If you are using Inline with the C language, then you can access the full internals of Perl itself. This opens up the floodgates to both extreme power and peril.</p>

<p>Maybe the best reason is &#34;Because you want to!&#34;. Diversity keeps the world interesting. TMTOWTDI!</p>

<dt><a name='Why'></a><a name="Why_should_I_use_Inline_to_do_it?"
>Why should I use Inline to do it?</a></dt>

<dd>
<p>There are already two major facilities for extending Perl with C. They are XS and SWIG. Both are similar in their capabilities, at least as far as Perl is concerned. And both of them are quite difficult to learn compared to Inline.</p>

<p>There is a big fat learning curve involved with setting up and using the XS environment. You need to get quite intimate with the following docs:</p>

<pre class="sh_perl"> * perlxs
 * perlxstut
 * perlapi
 * perlguts
 * perlmod
 * h2xs
 * xsubpp
 * ExtUtils::MakeMaker</pre>

<p>With Inline you can be up and running in minutes. There is a C Cookbook with lots of short but complete programs that you can extend to your real-life problems. No need to learn about the complicated build process going on in the background. You don&#39;t even need to compile the code yourself. Inline takes care of every last detail except writing the C code.</p>

<p>Perl programmers cannot be bothered with silly things like compiling. &#34;Tweak, Run, Tweak, Run&#34; is our way of life. Inline does all the dirty work for you.</p>

<p>Another advantage of Inline is that you can use it directly in a script. You can even use it in a Perl one-liner. With XS and SWIG, you always set up an entirely separate module. Even if you only have one or two functions. Inline makes easy things easy, and hard things possible. Just like Perl.</p>

<p>Finally, Inline supports several programming languages (not just C and C++). As of this writing, Inline has support for C, C++, Java, Python, Ruby, Tcl, Assembler, Basic, Guile, Befunge, Octave, Awk, BC, TT (Template Toolkit), WebChat and even PERL. New Inline Language Support Modules (ILSMs) are regularly being added. See <a href="/~sisyphus/Inline-0.50/Inline-API.pod" class="podlinkpod"
>Inline-API</a> for details on how to create your own ILSM.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Using_the_Inline.pm_Module"
>Using the Inline.pm Module <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Inline is a little bit different than most of the Perl modules that you are used to. It doesn&#39;t import any functions into your namespace and it doesn&#39;t have any object oriented methods. Its entire interface (with two minor exceptions) is specified through the <code>&#39;use Inline ...&#39;</code> command.</p>

<p>This section will explain all of the different ways to <code>use Inline</code>. If you want to begin using C with Inline immediately, see <a href="/~sisyphus/Inline-0.50/C/C-Cookbook.pod" class="podlinkpod"
>Inline::C-Cookbook</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_Basics"
>The Basics</a></h2>

<p>The most basic form for using Inline is:</p>

<pre class="sh_perl">    use Inline X =&#62; &#34;X source code&#34;;</pre>

<p>where &#39;X&#39; is one of the supported Inline programming languages. The second parameter identifies the source code that you want to bind to Perl. The source code can be specified using any of the following syntaxes:</p>

<dl>
<dt><a name='The'></a><a name="The_DATA_Keyword."
>The DATA Keyword.</a></dt>

<dd>
<pre class="sh_perl">    use Inline Java =&#62; &#39;DATA&#39;;

    # Perl code goes here ...

    __DATA__
    __Java__
    /* Java code goes here ... */</pre>

<p>The easiest and most visually clean way to specify your source code in an Inline Perl program is to use the special <code>DATA</code> keyword. This tells Inline to look for a special marker in your <code>DATA</code> filehandle&#39;s input stream. In this example the special marker is <code>__Java__</code>, which is the programming language surrounded by double underscores.</p>

<p>In case you&#39;ve forgotten, the <code>DATA</code> pseudo file is comprised of all the text after the <code>__END__</code> or <code>__DATA__</code> section of your program. If you&#39;re working outside the <code>main</code> package, you&#39;d best use the <code>__DATA__</code> marker or else Inline will not find your code.</p>

<p>Using this scheme keeps your Perl code at the top, and all the ugly Java stuff down below where it belongs. This is visually clean and makes for more maintainable code. An excellent side benefit is that you don&#39;t have to escape any characters like you might in a Perl string. The source code is verbatim. For these reasons, I prefer this method the most.</p>

<p>The only problem with this style is that since Perl can&#39;t read the <code>DATA</code> filehandle until runtime, it obviously can&#39;t bind your functions until runtime. The net effect of this is that you can&#39;t use your Inline functions as barewords (without predeclaring them) because Perl has no idea they exist during compile time.</p>

<dt><a name='The'></a><a name="The_FILE_and_BELOW_keywords."
>The FILE and BELOW keywords.</a></dt>

<dd>
<pre class="sh_perl">    use Inline::Files;
    use Inline Java =&#62; &#39;FILE&#39;;

    # Perl code goes here ...

    __JAVA__
    /* Java code goes here ... */</pre>

<p>This is the newest method of specifying your source code. It makes use of the Perl module <code>Inline::Files</code> written by Damian Conway. The basic style and meaning are the same as for the <code>DATA</code> keyword, but there are a few syntactic and semantic twists.</p>

<p>First, you must say &#39;use Inline::Files&#39; before you &#39;use Inline&#39; code that needs those files. The special &#39;<code>DATA</code>&#39; keyword is replaced by either &#39;<code>FILE</code>&#39; or &#39;<code>BELOW</code>&#39;. This allows for the bad pun idiom of:</p>

<pre class="sh_perl">    use Inline C =&#62; &#39;BELOW&#39;;</pre>

<p>You can omit the <code>__DATA__</code> tag now. Inline::Files is a source filter that will remove these sections from your program before Perl compiles it. They are then available for Inline to make use of. And since this can all be done at compile time, you don&#39;t have to worry about the caveats of the &#39;DATA&#39; keyword.</p>

<p>This module has a couple small gotchas. Since Inline::Files only recognizes file markers with capital letters, you must specify the capital form of your language name. Also, there is a startup time penalty for using a source code filter.</p>

<p>At this point Inline::Files is alpha software and use of it is experimental. Inline&#39;s integration of this module is also fledgling at the time being. One of things I plan to do with Inline::Files is to get line number info so when an extension doesn&#39;t compile, the error messages will point to the correct source file and line number.</p>

<p>My best advice is to use Inline::Files for testing (especially as support for it improves), but use DATA for production and distributed/CPAN code.</p>

<dt><a name="Strings"
>Strings</a></dt>

<dd>
<pre class="sh_perl">    use Inline Java =&#62; &#60;&#60;&#39;END&#39;;

    /* Java code goes here ... */
    END

    # Perl code goes here ...</pre>

<p>You also just specify the source code as a single string. A handy way to write the string is to use Perl&#39;s &#34;here document&#34; style of quoting. This is ok for small functions but can get unwieldy in the large. On the other hand, the string variant probably has the least startup penalty and all functions are bound at compile time.</p>

<p>If you wish to put the string into a scalar variable, please be aware that the <code>use</code> statement is a compile time directive. As such, all the variables it uses must also be set at compile time, <code>before</code> the &#39;use Inline&#39; statement. Here is one way to do it:</p>

<pre class="sh_perl">    my $code;
    BEGIN {
        $code = &#60;&#60;END;

    /* Java code goes here ... */
    END
    }
    use Inline Java =&#62; $code;

    # Perl code goes here ...</pre>

<dt><a name='The'></a><a name="The_bind()_Function"
>The bind() Function</a></dt>

<dd>
<p>An alternative to using the BEGIN block method is to specify the source code at run time using the &#39;Inline-&#62;bind()&#39; method. (This is one of the interface exceptions mentioned above) The <code>bind()</code> method takes the same arguments as <code>&#39;use Inline ...&#39;</code>.</p>

<pre class="sh_perl">    my $code = &#60;&#60;END;

    /* Java code goes here ... */
    END

    Inline-&#62;bind(Java =&#62; $code);</pre>

<p>You can think of <code>bind()</code> as a way to <code>eval()</code> code in other programming languages.</p>

<p>Although bind() is a powerful feature, it is not recommended for use in Inline based modules. In fact, it won&#39;t work at all for installable modules. See instructions below for creating modules with Inline.</p>

<dt><a name='Other'></a><a name="Other_Methods"
>Other Methods</a></dt>

<dd>
<p>The source code for Inline can also be specified as an external filename, a reference to a subroutine that returns source code, or a reference to an array that contains lines of source code. (Note that if the external source file is in the current directory it must be specified with a leading &#39;./&#39; - ie &#39;./file.ext&#39; instead of simply &#39;file.ext&#39;.) These methods are less frequently used but may be useful in some situations.</p>

<dt><a name="Shorthand"
>Shorthand</a></dt>

<dd>
<p>If you are using the &#39;DATA&#39; or &#39;FILE&#39; methods described above <b>and</b> there are no extra parameters, you can omit the keyword altogether. For example:</p>

<pre class="sh_perl">    use Inline &#39;Java&#39;;

    # Perl code goes here ...

    __DATA__
    __Java__
    /* Java code goes here ... */</pre>

<p>or</p>

<pre class="sh_perl">    use Inline::Files;
    use Inline &#39;Java&#39;;

    # Perl code goes here ...

    __JAVA__
    /* Java code goes here ... */</pre>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="More_about_the_DATA_Section"
>More about the DATA Section</a></h2>

<p>If you are writing a module, you can also use the DATA section for POD and AutoLoader subroutines. Just be sure to put them before the first Inline marker. If you install the helper module <code>Inline::Filters</code>, you can even use POD inside your Inline code. You just have to specify a filter to strip it out.</p>

<p>You can also specify multiple Inline sections, possibly in different programming languages. Here is another example:</p>

<pre class="sh_perl">    # The module Foo.pm
    package Foo;
    use AutoLoader;

    use Inline C;
    use Inline C =&#62; DATA =&#62; FILTERS =&#62; &#39;Strip_POD&#39;;
    use Inline Python;

    1;

    __DATA__

    sub marine {
        # This is an autoloaded subroutine
    }

    =head1 External subroutines

    =cut

    __C__
    /* First C section */

    __C__
    /* Second C section */
    =head1 My C Function

    Some POD doc.

    =cut

    __Python__
    &#34;&#34;&#34;A Python Section&#34;&#34;&#34;</pre>

<p>An important thing to remember is that you need to have one &#34;use Inline Foo =&#62; &#39;DATA&#39;&#34; for each &#34;__Foo__&#34; marker, and they must be in the same order. This allows you to apply different configuration options to each section.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Configuration_Options"
>Configuration Options</a></h2>

<p>Inline trys to do the right thing as often as possible. But sometimes you may need to override the default actions. This is easy to do. Simply list the Inline configuration options after the regular Inline parameters. All congiguration options are specified as (key, value) pairs.</p>

<pre class="sh_perl">    use Inline (C =&#62; &#39;DATA&#39;,
                DIRECTORY =&#62; &#39;./inline_dir&#39;,
                LIBS =&#62; &#39;-lfoo&#39;,
                INC =&#62; &#39;-I/foo/include&#39;,
                PREFIX =&#62; &#39;XXX_&#39;,
                WARNINGS =&#62; 0,
               );</pre>

<p>You can also specify the configuration options on a separate Inline call like this:</p>

<pre class="sh_perl">    use Inline (C =&#62; Config =&#62;
                DIRECTORY =&#62; &#39;./inline_dir&#39;,
                LIBS =&#62; &#39;-lfoo&#39;,
                INC =&#62; &#39;-I/foo/include&#39;,
                PREFIX =&#62; &#39;XXX_&#39;,
                WARNINGS =&#62; 0,
               );
    use Inline C =&#62; &#60;&#60;&#39;END_OF_C_CODE&#39;;</pre>

<p>The special keyword <code>&#39;Config&#39;</code> tells Inline that this is a configuration-only call. No source code will be compiled or bound to Perl.</p>

<p>If you want to specify global configuration options that don&#39;t apply to a particular language, just leave the language out of the call. Like this:</p>

<pre class="sh_perl">    use Inline Config =&#62; WARNINGS =&#62; 0;</pre>

<p>The Config options are inherited and additive. You can use as many Config calls as you want. And you can apply different options to different code sections. When a source code section is passed in, Inline will apply whichever options have been specified up to that point. Here is a complex configuration example:</p>

<pre class="sh_perl">    use Inline (Config =&#62;
                DIRECTORY =&#62; &#39;./inline_dir&#39;,
               );
    use Inline (C =&#62; Config =&#62;
                LIBS =&#62; &#39;-lglobal&#39;,
               );
    use Inline (C =&#62; &#39;DATA&#39;,         # First C Section
                LIBS =&#62; [&#39;-llocal1&#39;, &#39;-llocal2&#39;],
               );
    use Inline (Config =&#62;
                WARNINGS =&#62; 0,
               );
    use Inline (Python =&#62; &#39;DATA&#39;,    # First Python Section
                LIBS =&#62; &#39;-lmypython1&#39;,
               );
    use Inline (C =&#62; &#39;DATA&#39;,         # Second C Section
                LIBS =&#62; [undef, &#39;-llocal3&#39;],
               );</pre>

<p>The first <code>Config</code> applies to all subsequent calls. The second <code>Config</code> applies to all subsequent <code>C</code> sections (but not <code>Python</code> sections). In the first <code>C</code> section, the external libraries <code>global</code>, <code>local1</code> and <code>local2</code> are used. (Most options allow either string or array ref forms, and do the right thing.) The <code>Python</code> section does not use the <code>global</code> library, but does use the same <code>DIRECTORY</code>, and has warnings turned off. The second <code>C</code> section only uses the <code>local3</code> library. That&#39;s because a value of <code>undef</code> resets the additive behavior.</p>

<p>The <code>DIRECTORY</code> and <code>WARNINGS</code> options are generic Inline options. All other options are language specific. To find out what the <code>C</code> options do, see <code>Inline::C</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="On_and_Off"
>On and Off</a></h2>

<p>If a particular config option has value options of 1 and 0, you can use the ENABLE and DISABLE modifiers. In other words, this:</p>

<pre class="sh_perl">    use Inline Config =&#62;
               FORCE_BUILD =&#62; 1,
               CLEAN_AFTER_BUILD =&#62; 0;</pre>

<p>could be reworded as:</p>

<pre class="sh_perl">    use Inline Config =&#62;
               ENABLE =&#62; FORCE_BUILD,
               DISABLE =&#62; CLEAN_AFTER_BUILD;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Playing_&#39;with&#39;_Others"
>Playing &#39;with&#39; Others</a></h2>

<p>Inline has a special configuration syntax that tells it to get more configuration options from other Perl modules. Here is an example:</p>

<pre class="sh_perl">    use Inline with =&#62; &#39;Event&#39;;</pre>

<p>This tells Inline to load the module <code>Event.pm</code> and ask it for configuration information. Since <code>Event</code> has a C API of its own, it can pass Inline all of the information it needs to be able to use <code>Event</code> C callbacks seamlessly.</p>

<p>That means that you don&#39;t need to specify the typemaps, shared libraries, include files and other information required to get this to work.</p>

<p>You can specify a single module or a list of them. Like:</p>

<pre class="sh_perl">    use Inline with =&#62; qw(Event Foo Bar);</pre>

<p>Currently, <code>Event</code> is the only module that works <i>with</i> Inline.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Inline_Shortcuts"
>Inline Shortcuts</a></h2>

<p>Inline lets you set many configuration options from the command line. These options are called &#39;shortcuts&#39;. They can be very handy, especially when you only want to set the options temporarily, for say, debugging.</p>

<p>For instance, to get some general information about your Inline code in the script <code>Foo.pl</code>, use the command:</p>

<pre class="sh_perl">    perl -MInline=INFO Foo.pl</pre>

<p>If you want to force your code to compile, even if its already done, use:</p>

<pre class="sh_perl">    perl -MInline=FORCE Foo.pl</pre>

<p>If you want to do both, use:</p>

<pre class="sh_perl">    perl -MInline=INFO -MInline=FORCE Foo.pl</pre>

<p>or better yet:</p>

<pre class="sh_perl">    perl -MInline=INFO,FORCE Foo.pl</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_Inline_DIRECTORY"
>The Inline DIRECTORY</a></h2>

<p>Inline needs a place to build your code and to install the results of the build. It uses a single directory named <code>&#39;.Inline/&#39;</code> under normal circumstances. If you create this directory in your home directory, the current directory or in the directory where your program resides, Inline will find and use it. You can also specify it in the environment variable <code>PERL_INLINE_DIRECTORY</code> or directly in your program, by using the <code>DIRECTORY</code> keyword option. If Inline cannot find the directory in any of these places it will create a <code>&#39;_Inline/&#39;</code> directory in either your current directory or the directory where your script resides.</p>

<p>One of the key factors to using Inline successfully, is understanding this directory. When developing code it is usually best to create this directory (or let Inline do it) in your current directory. Remember that there is nothing sacred about this directory except that it holds your compiled code. Feel free to delete it at any time. Inline will simply start from scratch and recompile your code on the next run. If you have several programs that you want to force to recompile, just delete your <code>&#39;.Inline/&#39;</code> directory.</p>

<p>It is probably best to have a separate <code>&#39;.Inline/&#39;</code> directory for each project that you are working on. You may want to keep stable code in the &#60;.Inline/&#62; in your home directory. On multi-user systems, each user should have their own <code>&#39;.Inline/&#39;</code> directories. It could be a security risk to put the directory in a shared place like <code>/tmp/</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Debugging_Inline_Errors"
>Debugging Inline Errors</a></h2>

<p>All programmers make mistakes. When you make a mistake with Inline, like writing bad C code, you&#39;ll get a big error report on your screen. This report tells you where to look to do the debugging. Some languages may also dump out the error messages generated from the build.</p>

<p>When Inline needs to build something it creates a subdirectory under your <code>DIRECTORY/build/</code> directory. This is where it writes all the components it needs to build your extension. Things like XS files, Makefiles and output log files.</p>

<p>If everything goes OK, Inline will delete this subdirectory. If there is an error, Inline will leave the directory intact and print its location. The idea is that you are supposed to go into that directory and figure out what happened.</p>

<p>Read the doc for your particular Inline Language Support Module for more information.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_&#39;config&#39;_Registry_File"
>The &#39;config&#39; Registry File</a></h2>

<p>Inline keeps a cached file of all of the Inline Language Support Module&#39;s meta data in a file called <code>config</code>. This file can be found in your <code>DIRECTORY</code> directory. If the file does not exist, Inline creates a new one. It will search your system for any module beginning with <code>Inline::</code>. It will then call that module&#39;s <code>register()</code> method to get useful information for future invocations.</p>

<p>Whenever you add a new ILSM, you should delete this file so that Inline will auto-discover your newly installed language module. (This should no longer be necessary as of Inline-0.49.)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Configuration_Options"
>Configuration Options <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This section lists all of the generic Inline configuration options. For language specific configuration, see the doc for that language.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DIRECTORY"
>DIRECTORY</a></h2>

<p>The <code>DIRECTORY</code> config option is the directory that Inline uses to both build and install an extension.</p>

<p>Normally Inline will search in a bunch of known places for a directory called <code>&#39;.Inline/&#39;</code>. Failing that, it will create a directory called <code>&#39;_Inline/&#39;</code></p>

<p>If you want to specify your own directory, use this configuration option.</p>

<p>Note that you must create the <code>DIRECTORY</code> directory yourself. Inline will not do it for you.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME</a></h2>

<p>You can use this option to set the name of your Inline extension object module. For example:</p>

<pre class="sh_perl">    use Inline C =&#62; &#39;DATA&#39;,
               NAME =&#62; &#39;Foo::Bar&#39;;</pre>

<p>would cause your C code to be compiled in to the object:</p>

<pre class="sh_perl">    lib/auto/Foo/Bar/Bar.so
    lib/auto/Foo/Bar/Bar.inl</pre>

<p>(The .inl component contains dependency information to make sure the source code is in sync with the executable)</p>

<p>If you don&#39;t use NAME, Inline will pick a name for you based on your program name or package name. In this case, Inline will also enable the AUTONAME option which mangles in a small piece of the MD5 fingerprint into your object name, to make it unique.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="AUTONAME"
>AUTONAME</a></h2>

<p>This option is enabled whenever the NAME parameter is not specified. To disable it say:</p>

<pre class="sh_perl">    use Inline C =&#62; &#39;DATA&#39;,
               DISABLE =&#62; &#39;AUTONAME&#39;;</pre>

<p>AUTONAME mangles in enough of the MD5 fingerprint to make your module name unique. Objects created with AUTONAME will never get replaced. That also means they will never get cleaned up automatically.</p>

<p>AUTONAME is very useful for small throw away scripts. For more serious things, always use the NAME option.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION</a></h2>

<p>Specifies the version number of the Inline extension object. It is used <b>only</b> for modules, and it must match the global variable $VERSION. Additionally, this option should used if (and only if) a module is being set up to be installed permanently into the Perl sitelib tree. Inline will croak if you use it otherwise.</p>

<p>The presence of the VERSION parameter is the official way to let Inline know that your code is an installable/installed module. Inline will never generate an object in the temporary cache (_Inline/ directory) if VERSION is set. It will also never try to recompile a module that was installed into someone&#39;s Perl site tree.</p>

<p>So the basic rule is develop without VERSION, and deliver with VERSION.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="WITH"
>WITH</a></h2>

<p><code>WITH</code> can also be used as a configuration option instead of using the special &#39;with&#39; syntax. Do this if you want to use different sections of Inline code <i>with</i> different modules. (Probably a very rare usage)</p>

<pre class="sh_perl">    use Event;
    use Inline C =&#62; DATA =&#62; WITH =&#62; &#39;Event&#39;;</pre>

<p>Modules specified using the config form of <code>WITH</code> will <b>not</b> be automatically required. You must <code>use</code> them yourself.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="GLOBAL_LOAD"
>GLOBAL_LOAD</a></h2>

<p>This option is for compiled languages only. It tells Inline to tell DynaLoader to load an object file in such a way that its symbols can be dynamically resolved by other object files. May not work on all platforms. See the <code>GLOBAL</code> shortcut below.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="UNTAINT"
>UNTAINT</a></h2>

<p>You can use this option whenever you use Perl&#39;s <code>-T</code> switch, for taint checking. This option tells Inline to blindly untaint all tainted variables. (This is generally considerd to be an appallingly insecure thing to do, and not to be recommended - but the option is there for you to use if you want. Please consider using something other than Inline for scripts that need taint checking.) It also turns on SAFEMODE by default. See the <code>UNTAINT</code> shortcut below. You will see warnings about blindly untainting fields in both %ENV and Inline objects. If you want to silence these warnings, set the Config option NO_UNTAINT_WARN =&#62; 1. There can be some problems untainting Inline scripts where older versions of Cwd, such as those that shipped with early versions of perl-5.8 (and earlier), are installed. Updating Cwd will probably solve these problems.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="SAFEMODE"
>SAFEMODE</a></h2>

<p>Perform extra safety checking, in an attempt to thwart malicious code. This option cannot guarantee security, but it does turn on all the currently implemented checks. (Currently, the only &#34;currently implemented check&#34; is to ensure that the <code>DIRECTORY</code> option has also been used.)</p>

<p>There is a slight startup penalty by using SAFEMODE. Also, using UNTAINT automatically turns this option on. If you need your code to start faster under <code>-T</code> (taint) checking, you&#39;ll need to turn this option off manually. Only do this if you are not worried about security risks. See the <code>UNSAFE</code> shortcut below.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="FORCE_BUILD"
>FORCE_BUILD</a></h2>

<p>Makes Inline build (compile) the source code every time the program is run. The default is 0. See the <code>FORCE</code> shortcut below.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="BUILD_NOISY"
>BUILD_NOISY</a></h2>

<p>Tells ILSMs that they should dump build messages to the terminal rather than be silent about all the build details.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="BUILD_TIMERS"
>BUILD_TIMERS</a></h2>

<p>Tells ILSMs to print timing information about how long each build phase took. Usually requires <code>Time::HiRes</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CLEAN_AFTER_BUILD"
>CLEAN_AFTER_BUILD</a></h2>

<p>Tells Inline to clean up the current build area if the build was successful. Sometimes you want to DISABLE this for debugging. Default is 1. See the <code>NOCLEAN</code> shortcut below.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CLEAN_BUILD_AREA"
>CLEAN_BUILD_AREA</a></h2>

<p>Tells Inline to clean up the old build areas within the entire Inline DIRECTORY. Default is 0. See the <code>CLEAN</code> shortcut below.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="PRINT_INFO"
>PRINT_INFO</a></h2>

<p>Tells Inline to print various information about the source code. Default is 0. See the <code>INFO</code> shortcut below.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="PRINT_VERSION"
>PRINT_VERSION</a></h2>

<p>Tells Inline to print Version info about itself. Default is 0. See the <code>VERSION</code> shortcut below.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="REPORTBUG"
>REPORTBUG</a></h2>

<p>Puts Inline into &#39;REPORTBUG&#39; mode, which is what you want if you desire to report a bug.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="REWRITE_CONFIG_FILE"
>REWRITE_CONFIG_FILE</a></h2>

<p>Default is 0, but setting &#39;REWRITE_CONFIG_FILE =&#62; 1&#39; will mean that the existing configuration file in the Inline DIRECTORY will be overwritten. (This is useful if the existing config file is not up to date as regards supported languages.)</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="WARNINGS"
>WARNINGS</a></h2>

<p>This option tells Inline whether to print certain warnings. Default is 1.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Inline_Configuration_Shortcuts"
>Inline Configuration Shortcuts <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This is a list of all the shorcut configuration options currently available for Inline. Specify them from the command line when running Inline scripts.</p>

<pre class="sh_perl">    perl -MInline=NOCLEAN inline_script.pl</pre>

<p>or</p>

<pre class="sh_perl">    perl -MInline=Info,force,NoClean inline_script.pl</pre>

<p>You can specify multiple shortcuts separated by commas. They are not case sensitive. You can also specify shorcuts inside the Inline program like this:</p>

<pre class="sh_perl">    use Inline &#39;Info&#39;, &#39;Force&#39;, &#39;Noclean&#39;;</pre>

<p>NOTE: If a <code>&#39;use Inline&#39;</code> statement is used to set shortcuts, it can not be used for additional purposes.</p>

<dl>
<dt><a name="CLEAN"
>CLEAN</a></dt>

<dd>
<p>Tells Inline to remove any build directories that may be lying around in your build area. Normally these directories get removed immediately after a successful build. Exceptions are when the build fails, or when you use the NOCLEAN or REPORTBUG options.</p>

<dt><a name="FORCE"
>FORCE</a></dt>

<dd>
<p>Forces the code to be recompiled, even if everything is up to date.</p>

<dt><a name="GLOBAL"
>GLOBAL</a></dt>

<dd>
<p>Turns on the GLOBAL_LOAD option.</p>

<dt><a name="INFO"
>INFO</a></dt>

<dd>
<p>This is a very useful option when you want to know what&#39;s going on under the hood. It tells Inline to print helpful information to <code>STDERR</code>. Among the things that get printed is a list of which Inline functions were successfully bound to Perl.</p>

<dt><a name="NOCLEAN"
>NOCLEAN</a></dt>

<dd>
<p>Tells Inline to leave the build files after compiling.</p>

<dt><a name="NOISY"
>NOISY</a></dt>

<dd>
<p>Use the BUILD_NOISY option to print messages during a build.</p>

<dt><a name="REPORTBUG"
>REPORTBUG</a></dt>

<dd>
<p>Puts Inline into &#39;REPORTBUG&#39; mode, which does special processing when you want to report a bug. REPORTBUG also automatically forces a build, and doesn&#39;t clean up afterwards. This is so that you can tar and mail the build directory to me. REPORTBUG will print exact instructions on what to do. Please read and follow them carefully.</p>

<p>NOTE: REPORTBUG informs you to use the tar command. If your system does not have tar, please use the equivalent <code>zip</code> command.</p>

<dt><a name="SAFE"
>SAFE</a></dt>

<dd>
<p>Turns SAFEMODE on. UNTAINT will turn this on automatically. While this mode performs extra security checking, it does not guarantee safety.</p>

<dt><a name="SITE_INSTALL"
>SITE_INSTALL</a></dt>

<dd>
<p>This parameter used to be used for creating installable Inline modules. It has been removed from Inline altogether and replaced with a much simpler and more powerful mechanism, <code>Inline::MakeMaker</code>. See the section below on how to create modules with Inline.</p>

<dt><a name="_TESTING"
>_TESTING</a></dt>

<dd>
<p>Used internally by C/t/09parser.t and C/t/10callback.t(in the Inline::C test suite). Setting this option with Inline::C will mean that files named &#39;parser_id&#39; and &#39;void_test&#39; are created in the ./Inline_test directory, creating that directory if it doesn&#39;t already exist. The files (but not the ./Inline_test directory) are cleaned up by calling Inline::C::_testing_cleanup(). Also used by t/06rewrite_config.t to trigger a warning.</p>

<dt><a name="TIMERS"
>TIMERS</a></dt>

<dd>
<p>Turn on BUILD_TIMERS to get extra diagnostic info about builds.</p>

<dt><a name="UNSAFE"
>UNSAFE</a></dt>

<dd>
<p>Turns SAFEMODE off. Use this in combination with UNTAINT for slightly faster startup time under <code>-T</code>. Only use this if you are sure the environment is safe.</p>

<dt><a name="UNTAINT"
>UNTAINT</a></dt>

<dd>
<p>Turn the UNTAINT option on. Used with <code>-T</code> switch. In terms of secure practices, this is definitely *not* a recommended way of dealing with taint checking, but it&#39;s the *only* option currently available with Inline. Use it at your own risk.</p>

<dt><a name="VERSION"
>VERSION</a></dt>

<dd>
<p>Tells Inline to report its release version.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Writing_Modules_with_Inline"
>Writing Modules with Inline <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Writing CPAN modules that use C code is easy with Inline. Let&#39;s say that you wanted to write a module called <code>Math::Simple</code>. Start by using the following command:</p>

<pre class="sh_perl">    h2xs -PAXn Math::Simple</pre>

<p>This will generate a bunch of files that form a skeleton of what you need for a distributable module. (Read the h2xs manpage to find out what the options do) Next, modify the <code>Simple.pm</code> file to look like this:</p>

<pre class="sh_perl">    package Math::Simple;
    $VERSION = &#39;1.23&#39;;

    use base &#39;Exporter&#39;;
    @EXPORT_OK = qw(add subtract);
    use strict;

    use Inline C =&#62; &#39;DATA&#39;,
               VERSION =&#62; &#39;1.23&#39;,
               NAME =&#62; &#39;Math::Simple&#39;;

    1;

    __DATA__

    =pod

    =cut

    __C__
    int add(int x, int y) {
      return x + y;
    }

    int subtract(int x, int y) {
      return x - y;
    }</pre>

<p>The important things to note here are that you <b>must</b> specify a <code>NAME</code> and <code>VERSION</code> parameter. The <code>NAME</code> must match your module&#39;s package name. The <code>VERSION</code> parameter must match your module&#39;s <code>$VERSION</code> variable and they must be of the form <code>/^\d\.\d\d$/</code>.</p>

<p>NOTE: These are Inline&#39;s sanity checks to make sure you know what you&#39;re doing before uploading your code to CPAN. They insure that once the module has been installed on someone&#39;s system, the module would not get automatically recompiled for any reason. This makes Inline based modules work in exactly the same manner as XS based ones.</p>

<p>Finally, you need to modify the Makefile.PL. Simply change:</p>

<pre class="sh_perl">    use ExtUtils::MakeMaker;</pre>

<p>to</p>

<pre class="sh_perl">    use Inline::MakeMaker;</pre>

<p>And, in order that the module build work correctly in the cpan shell, add the following directive to the Makefile.PL&#39;s WriteMakefile():</p>

<pre class="sh_perl">        CONFIGURE_REQUIRES  =&#62;  {
            &#39;Inline::MakeMaker&#39;     =&#62; 0.45,
            &#39;ExtUtils::MakeMaker&#39;   =&#62; 6.52,
        },</pre>

<p>This &#34;CONFIGURE_REQUIRES&#34; directive ensures that the cpan shell will install Inline on the user&#39;s machine (if it&#39;s not already present) before building your Inline-based module. Specifying of &#34;ExtUtils::MakeMaker =&#62; 6.52,&#34; is optional, and can be omitted if you like. It ensures only that some harmless warnings relating to the &#34;CONFIGURE_REQUIRES&#34; directive won&#39;t be emitted during the building of the module. It also means, of course, that ExtUtils::Makemaker will first be updated on the user&#39;s machine unless the user already has version 6.52 or later.</p>

<p>When the person installing <code>Math::Simple</code> does a &#34;<code>make</code>&#34;, the generated Makefile will invoke Inline in such a way that the C code will be compiled and the executable code will be placed into the <code>./blib</code> directory. Then when a &#34;<code>make install</code>&#34; is done, the module will be copied into the appropriate Perl sitelib directory (which is where an installed module should go).</p>

<p>Now all you need to do is:</p>

<pre class="sh_perl">    perl Makefile.PL
    make dist</pre>

<p>That will generate the file <code>Math-Simple-0.20.tar.gz</code> which is a distributable package. (It will also generate some harmless warnings in relation to &#34;CONFIGURE_REQUIRES&#34; unless the version of your ExtUtils::MakeMaker is 6.52 or later.) That&#39;s all there is to it.</p>

<p>IMPORTANT NOTE: Although the above steps will produce a workable module, you still have a few more responsibilities as a budding new CPAN author. You need to write lots of documentation and write lots of tests. Take a look at some of the better CPAN modules for ideas on creating a killer test harness. Actually, don&#39;t listen to me, go read these:</p>

<pre class="sh_perl">    perldoc perlnewmod
    <a href="http://www.cpan.org/modules/04pause.html" class="podlinkurl"
>http://www.cpan.org/modules/04pause.html</a>
    <a href="http://www.cpan.org/modules/00modlist.long.html" class="podlinkurl"
>http://www.cpan.org/modules/00modlist.long.html</a></pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="How_Inline_Works"
>How Inline Works <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>In reality, Inline just automates everything you would need to do if you were going to do it by hand (using XS, etc).</p>

<p>Inline performs the following steps:</p>

<dl>
<dt><a name='1'></a><a name="1)_Receive_the_Source_Code"
>1) Receive the Source Code</a></dt>

<dd>
<p>Inline gets the source code from your script or module with a statements like the following:</p>

<pre class="sh_perl">    use Inline C =&#62; &#34;Source-Code&#34;;</pre>

<p>or</p>

<pre class="sh_perl">    use Inline;
    bind Inline C =&#62; &#34;Source-Code&#34;;</pre>

<p>where <code>C</code> is the programming language of the source code, and <code>Source-Code</code> is a string, a file name, an array reference, or the special <code>&#39;DATA&#39;</code> keyword.</p>

<p>Since Inline is coded in a &#34;<code>use</code>&#34; statement, everything is done during Perl&#39;s compile time. If anything needs to be done that will affect the <code>Source-Code</code>, it needs to be done in a <code>BEGIN</code> block that is <i>before</i> the &#34;<code>use Inline ...</code>&#34; statement. If you really need to specify code to Inline at runtime, you can use the <code>bind()</code> method.</p>

<p>Source code that is stowed in the <code>&#39;DATA&#39;</code> section of your code, is read in by an <code>INIT</code> subroutine in Inline. That&#39;s because the <code>DATA</code> filehandle is not available at compile time.</p>

<dt><a name='2'></a><a name="2)_Check_if_the_Source_Code_has_been_Built"
>2) Check if the Source Code has been Built</a></dt>

<dd>
<p>Inline only needs to build the source code if it has not yet been built. It accomplishes this seemingly magical task in an extremely simple and straightforward manner. It runs the source text through the <code>Digest::MD5</code> module to produce a 128-bit &#34;fingerprint&#34; which is virtually unique. The fingerprint along with a bunch of other contingency information is stored in a <code>.inl</code> file that sits next to your executable object. For instance, the <code>C</code> code from a script called <code>example.pl</code> might create these files:</p>

<pre class="sh_perl">    example_pl_3a9a.so
    example_pl_3a9a.inl</pre>

<p>If all the contingency information matches the values stored in the <code>.inl</code> file, then proceed to step 8. (No compilation is necessary)</p>

<dt><a name='3'></a><a name="3)_Find_a_Place_to_Build_and_Install"
>3) Find a Place to Build and Install</a></dt>

<dd>
<p>At this point Inline knows it needs to build the source code. The first thing to figure out is where to create the great big mess associated with compilation, and where to put the object when it&#39;s done.</p>

<p>By default Inline will try to build and install under the first place that meets one of the following conditions:</p>

<pre class="sh_perl">    A) The DIRECTORY= config option; if specified
    B) The PERL_INLINE_DIRECTORY environment variable; if set
    C) .Inline/ (in current directory); if exists and $PWD != $HOME
    D) bin/.Inline/ (in directory of your script); if exists
    E) ~/.Inline/; if exists
    F) ./_Inline/; if exists
    G) bin/_Inline; if exists
    H) Create ./_Inline/; if possible
    I) Create bin/_Inline/; if possible</pre>

<p>Failing that, Inline will croak. This is rare and easily remedied by just making a directory that Inline will use.</p>

<p>If the PERL_INSTALL_ROOT Environment Variable has been set, you will need to make special provision for that if the &#39;make install&#39; phase of your Inline scripts are to succeed.</p>

<p>If the module option is being compiled for permanent installation, then Inline will only use <code>./_Inline/</code> to build in, and the <code>$Config{installsitearch}</code> directory to install the executable in. This action is caused by Inline::MakeMaker, and is intended to be used in modules that are to be distributed on the CPAN, so that they get installed in the proper place.</p>

<dt><a name='4'></a><a name="4)_Parse_the_Source_for_Semantic_Cues"
>4) Parse the Source for Semantic Cues</a></dt>

<dd>
<p>Inline::C uses the module <code>Parse::RecDescent</code> to parse through your chunks of C source code and look for things that it can create run-time bindings to. In <code>C</code> it looks for all of the function definitions and breaks them down into names and data types. These elements are used to correctly bind the <code>C</code> function to a <code>Perl</code> subroutine. Other Inline languages like Python and Java actually use the <code>python</code> and <code>javac</code> modules to parse the Inline code.</p>

<dt><a name='5'></a><a name="5)_Create_the_Build_Environment"
>5) Create the Build Environment</a></dt>

<dd>
<p>Now Inline can take all of the gathered information and create an environment to build your source code into an executable. Without going into all the details, it just creates the appropriate directories, creates the appropriate source files including an XS file (for C) and a <code>Makefile.PL</code>.</p>

<dt><a name='6'></a><a name="6)_Build_the_Code_and_Install_the_Executable"
>6) Build the Code and Install the Executable</a></dt>

<dd>
<p>The planets are in alignment. Now for the easy part. Inline just does what you would do to install a module. &#34;<code>perl Makefile.PL &#38;&#38; make &#38;&#38; make test &#38;&#38; make install</code>&#34;. If something goes awry, Inline will croak with a message indicating where to look for more info.</p>

<dt><a name='7'></a><a name="7)_Tidy_Up"
>7) Tidy Up</a></dt>

<dd>
<p>By default, Inline will remove all of the mess created by the build process, assuming that everything worked. If the build fails, Inline will leave everything intact, so that you can debug your errors. Setting the <code>NOCLEAN</code> shortcut option will also stop Inline from cleaning up.</p>

<dt><a name='8'></a><a name="8)_DynaLoad_the_Executable"
>8) DynaLoad the Executable</a></dt>

<dd>
<p>For C (and C++), Inline uses the <code>DynaLoader::bootstrap</code> method to pull your external module into <code>Perl</code> space. Now you can call all of your external functions like Perl subroutines.</p>

<p>Other languages like Python and Java, provide their own loaders.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>For information about using Inline with C see <a href="/~sisyphus/Inline-0.50/C/C.pod" class="podlinkpod"
>Inline::C</a>.</p>

<p>For sample programs using Inline with C see <a href="/~sisyphus/Inline-0.50/C/C-Cookbook.pod" class="podlinkpod"
>Inline::C-Cookbook</a>.</p>

<p>For &#34;Formerly Answered Questions&#34; about Inline, see <a href="/~sisyphus/Inline-0.50/Inline-FAQ.pod" class="podlinkpod"
>Inline-FAQ</a>.</p>

<p>For information on supported languages and platforms see <a href="/~sisyphus/Inline-0.50/Inline-Support.pod" class="podlinkpod"
>Inline-Support</a>.</p>

<p>For information on writing your own Inline Language Support Module, see <a href="/~sisyphus/Inline-0.50/Inline-API.pod" class="podlinkpod"
>Inline-API</a>.</p>

<p>Inline&#39;s mailing list is inline@perl.org</p>

<p>To subscribe, send email to inline-subscribe@perl.org</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS_AND_DEFICIENCIES"
>BUGS AND DEFICIENCIES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>When reporting a bug, please do the following:</p>

<pre class="sh_perl"> - Put &#34;use Inline REPORTBUG;&#34; at the top of your code, or
   use the command line option &#34;perl -MInline=REPORTBUG ...&#34;.
 - Run your code.
 - Follow the printed directions.</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Brian Ingerson &#60;INGY@cpan.org&#62;</p>

<p>Neil Watkiss &#60;NEILW@cpan.org&#62; is the author of <code>Inline::CPP</code>, <code>Inline::Python</code>, <code>Inline::Ruby</code>, <code>Inline::ASM</code>, <code>Inline::Struct</code> and <code>Inline::Filters</code>. He is known in the innermost Inline circles as the &#34;Boy Wonder&#34;.</p>

<p>Sisyphus &#60;sisyphus@cpan.org&#62; fixed some bugs and is current co-maintainer.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2000-2002. Brian Ingerson.</p>

<p>Copyright (c) 2008, 2010-2012. Sisyphus.</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>See <a href="http://www.perl.com/perl/misc/Artistic.html" class="podlinkurl"
>http://www.perl.com/perl/misc/Artistic.html</a></p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78231 Uploads, 24723 Distributions
106029 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Thu Apr 26 21:05:07 2012 GMT (0.156987905502319) @cpansearch1 -->
 </body>
</html>
