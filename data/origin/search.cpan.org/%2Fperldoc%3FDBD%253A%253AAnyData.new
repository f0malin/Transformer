<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>DBD::AnyData - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","DBD-AnyData",3]);
    _gaq.push(["_setCustomVar",5,"Release","DBD-AnyData-0.110",3]);
    _gaq.push(["_setCustomVar",3,"Module","DBD::AnyData",3]);
    _gaq.push(["_setCustomVar",1,"Author","REHSACK",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?DBD::AnyData">permalink</a></div>
  <a href="/~rehsack/">Jens Rehsack</a> &gt;
  <a href="/~rehsack/DBD-AnyData-0.110/">DBD-AnyData-0.110</a> &gt;
  DBD::AnyData
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/e760f8612ca0b1bc0996feee03ece44f?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/R/RE/REHSACK/DBD-AnyData-0.110.tar.gz">DBD-AnyData-0.110.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=DBD%3A%3AAnyData;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~REHSACK/DBD-AnyData-0.110/lib/DBD/AnyData.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?DBD%3A%3ACSV">DBD::CSV</a><br>
<a href="/perldoc?SQL%3A%3AStatement">SQL::Statement</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?DBD%3A%3ARAM">DBD::RAM</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Text%3A%3ACSV">Text::CSV</a><br>
<a href="/perldoc?Text%3A%3ACSV_XS">Text::CSV_XS</a><br>
<a href="/perldoc?XML%3A%3ATwig">XML::Twig</a><br>
<a href="/perldoc?Tie%3A%3AFile">Tie::File</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=DBD%3A%3AAnyData">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 7</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=DBD-AnyData">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.110 &nbsp;
<span class="noprint">
  <a href="/src/REHSACK/DBD-AnyData-0.110/lib/DBD/AnyData.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#INSTALLATION'>INSTALLATION</a>
  <li class='indexItem indexItem1'><a href='#QUICK_START'>QUICK START</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#The_Basics'>The Basics</a>
    <li class='indexItem indexItem2'><a href='#Customizing_table_structure'>Customizing table structure</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SUPPORTED_FORMATS'>SUPPORTED FORMATS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#CSV,_Tab,_Pipe,_Ini,_Paragraph'>CSV, Tab, Pipe, Ini, Paragraph</a>
    <li class='indexItem indexItem2'><a href='#Fixed'>Fixed</a>
    <li class='indexItem indexItem2'><a href='#XML'>XML</a>
    <li class='indexItem indexItem2'><a href='#HTMLtable'>HTMLtable</a>
    <li class='indexItem indexItem2'><a href='#DBI'>DBI</a>
    <li class='indexItem indexItem2'><a href='#Passwd,_Weblog,_Mp3'>Passwd, Weblog, Mp3</a>
    <li class='indexItem indexItem2'><a href='#Other_Formats'>Other Formats</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#FURTHER_DETAILS'>FURTHER DETAILS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Converting_between_formats'>Converting between formats</a>
    <li class='indexItem indexItem2'><a href='#Using_remote_files'>Using remote files</a>
    <li class='indexItem indexItem2'><a href='#Working_with_in-memory_tables'>Working with in-memory tables</a>
    <li class='indexItem indexItem2'><a href='#Using_Multiple_Databases,_Simulating_Joins'>Using Multiple Databases, Simulating Joins</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#REFERENCE'>REFERENCE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Overview_of_DBD::AnyData_Methods'>Overview of DBD::AnyData Methods</a>
    <li class='indexItem indexItem2'><a href='#connect'>connect</a>
    <li class='indexItem indexItem2'><a href='#ad_catalog'>ad_catalog</a>
    <li class='indexItem indexItem2'><a href='#ad_import'>ad_import</a>
    <li class='indexItem indexItem2'><a href='#ad_export'>ad_export</a>
    <li class='indexItem indexItem2'><a href='#ad_convert'>ad_convert</a>
    <li class='indexItem indexItem2'><a href='#Data_Sources'>Data Sources</a>
    <li class='indexItem indexItem2'><a href='#ad_clear'>ad_clear</a>
    <li class='indexItem indexItem2'><a href='#SQL_Syntax'>SQL Syntax</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#SUPPORT'>SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#ACKNOWLEDGEMENTS'>ACKNOWLEDGEMENTS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR_&#38;_COPYRIGHT'>AUTHOR &#38; COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>DBD::AnyData - DBI access to XML,
CSV and other formats</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> use DBI;
 my $dbh = DBI-&#62;connect(&#39;dbi:AnyData(RaiseError=&#62;1):&#39;);
 $dbh-&#62;func( &#39;trains&#39;, &#39;CSV&#39;, &#39;/users/joe/cars.csv&#39;, &#39;ad_catalog&#39;);
 $dbh-&#62;func( &#39;bikes&#39;,  &#39;XML&#39;, [$xml_str],            &#39;ad_import&#39;);
 $dbh-&#62;func( &#39;cars&#39;,   &#39;DBI&#39;, $mysql_dbh,            &#39;ad_import&#39;);
 #
 # ... DBI/SQL methods to access/modify the tables &#39;cars&#39;,&#39;bikes&#39;,&#39;trains&#39;
 #
 print $dbh-&#62;func( &#39;cars&#39;, &#39;HTMLtable&#39;, &#39;ad_export&#39;);

 or

 use DBI;
 my $dbh = DBI-&#62;connect(&#39;dbi:AnyData(RaiseError=&#62;1):&#39;);
 $dbh-&#62;func( &#39;Pipe&#39;, &#39;data.pipe&#39;, &#39;XML&#39;, &#39;data.xml&#39;, &#39;ad_convert&#39;);

 or

 (many combinations of a dozen other data formats, see below)</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The DBD::AnyData module provides a DBI/SQL interface to data in many formats and from many sources.</p>

<p>Currently supported formats include general format flatfiles (CSV, Fixed Length, Tab or Pipe &#34;delimited&#34;, etc.), specific formats (passwd files, web logs, etc.), a variety of other kinds of formats (XML, Mp3, HTML tables), and, for some operations, any DBI accessible database. The number of supported formats will continue to grow rapidly since there is an open API making it easy for any author to create additional format parsers which can be plugged in to AnyData.</p>

<p>Data in these various formats can come from local files, from remote files, or from perl data structures such as strings and arrays.</p>

<p>Regardless of the format or source of the data, it may be accessed and/or modified using all standard DBI methods and a subset of SQL syntax.</p>

<p>In addition to standard database access to files, the module also supports in-memory tables which allow you to create temporary views; to combine data from a number of sources; to quickly prototype database systems; and to display or save the data in any of the supported formats (e.g. to display data in a CSV file as an HTML table). These in-memory tables can be created from any combination of DBI databases or files of any format. They may also be created from perl data structures which means it&#39;s possible to quickly prototype a database system without any file access or rdbms backend.</p>

<p>The module also supports converting files between any of the supported formats (e.g. save selected data from MySQL or Oracle to an XML file).</p>

<p>Here a just a few examples of the capabilities:</p>

<pre class="sh_perl">    # SELECT DATA FROM A PASSWD FILE
    #
    $dbh-&#62;func( &#39;users&#39;, &#39;Passwd&#39;, &#39;/etc/passwd&#39;, &#39;ad_catalog&#39;);
    my $sth = $dbh-&#62;prepare(&#34;SELECT username,homedir,GID FROM users&#39;);

    # INSERT A NEW ROW INTO A CSV FILE
    #
    $dbh-&#62;func( &#39;cars&#39;, &#39;CSV&#39;, &#39;cars.csv&#39;, &#39;ad_catalog&#39;);
    $dbh-&#62;do(&#34;INSERT INTO cars VALUES (&#39;Honda&#39;,&#39;Odyssey&#39;)&#34;);

    # READ A REMOTE XML FILE AND PRINT IT AS AN HTML TABLE
    #
    print $dbh-&#62;func( &#39;XML&#39;, $url, &#39;HTMLtable&#39;, &#39;ad_convert&#39;);

    # CONVERT A MYSQL DATABASE INTO XML AND SAVE IT IN A NEW FILE
    #
    $dbh-&#62;func( &#39;DBI&#39;, $mysql_dbh, &#39;XML&#39;, &#39;data.xml&#39;, &#39;ad_convert&#39;);

    # CREATE AND ACCESS A VIEW CONTAINING DATA FROM AN ORACLE DATABASE
    # AND A TAB DELIMITED FILE
    #
    $dbh-&#62;func( &#39;combo&#39;, &#39;DBI&#39;, $oracle_dbh, &#39;ad_import&#39;);
    $dbh-&#62;func( &#39;combo&#39;, &#39;Tab&#39;, &#39;data.tab&#39;, &#39;ad_import&#39;);
    my $sth = $dbh-&#62;prepare(&#34;SELECT * FROM combo&#34;);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INSTALLATION"
>INSTALLATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>To use DBD::AnyData you will need to install these modules, all available from CPAN and most available from activeState.</p>

<pre class="sh_perl">  * DBI
  * DBI::DBD::SqlEngine
  * SQL::Statement
  * AnyData
  * DBD::AnyData</pre>

<p>Note: DBI::DBD::SqlEngine is part of the DBI distribution</p>

<p>Some advanced features require additional modules:</p>

<dl>
<dt><a name='remote'></a><a name="remote_file_access"
>remote file access</a></dt>

<dd>
<p>requires <a href="/perldoc?LWP" class="podlinkpod"
>LWP</a> (the libwww bundle)</p>

<dt><a name='XML'></a><a name="XML_access"
>XML access</a></dt>

<dd>
<p>requires <a href="/perldoc?XML%3A%3AParser" class="podlinkpod"
>XML::Parser</a> and <a href="/perldoc?XML%3A%3ATwig" class="podlinkpod"
>XML::Twig</a></p>

<dt><a name='HTML'></a><a name="HTML_table"
>HTML table</a></dt>

<dd>
<p>access requires <a href="/perldoc?HTML%3A%3AParser" class="podlinkpod"
>HTML::Parser</a> and <a href="/perldoc?HTML%3A%3ATableExtract" class="podlinkpod"
>HTML::TableExtract</a></p>

<dt><a name='HTML'></a><a name="HTML_table_writing"
>HTML table writing</a></dt>

<dd>
<p>requires <a href="/perldoc?CGI" class="podlinkpod"
>CGI</a></p>
</dd>
</dl>

<p>AnyData and DBD::AnyData themselves can either be installed via cpan, cpanplus or cpanminus, using the distributed Build.PL manually with</p>

<pre class="sh_perl">  perl Build.PL
  ./Build
  ./Build test
  ./Build install</pre>

<p>or by copying the AnyData.pm file manually to it&#39;s right place within your perl library path.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="QUICK_START"
>QUICK START <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_Basics"
>The Basics</a></h2>

<dl>
<dt><a name='There'></a><a name="There_are_four_main_steps_in_using_DBD::AnyData_in_a_script:"
>There are four main steps in using DBD::AnyData in a script:</a></dt>

<dd>
<pre class="sh_perl"> 1. Specify that you want to use the DBI module
 2. Create a database handle
 3. Specify the tables, files, and formats you want
 4. Use DBI/SQL commands to access and/or modify the data</pre>

<p>Steps #1, #2, and #3 can be as little as a single line of code each.</p>

<p>Steps #3 and #4 can be omitted in some situations, see the sections below on &#34;Working with In-Memory Data&#34; and &#34;Converting Data&#34;</p>

<dt><a name='Step'></a><a name="Step_#1_:_Specify_that_you_want_to_use_the_DBI_module"
>Step #1 : Specify that you want to use the DBI module</a></dt>

<dd>
<p>This step is always the same: just put this at the top of your script:</p>

<pre class="sh_perl">  use DBI;</pre>

<dt><a name='Step'></a><a name="Step_#2_Create_a_Database_Handle"
>Step #2 Create a Database Handle</a></dt>

<dd>
<p>This step can vary slightly depending on your needs but is usually this:</p>

<pre class="sh_perl">  my $dbh = DBI-&#62;connect(&#39;dbi:AnyData(RaiseError=&#62;1):&#39;);</pre>

<p>See the section below on &#34;Connection Options&#34; for other forms of connecting. See the section below on &#34;Using Multiple Databases&#34; for cases in which you may be creating more than one database handle.</p>

<dt><a name='Step'></a><a name="Step_#3_:_Specify_the_tables,_files,_and_formats"
>Step #3 : Specify the tables, files, and formats</a></dt>

<dd>
<p>This step makes use of one of several methods unique to DBD::AnyData. These methods use the database handle created in step #2 to make a func() call and specify the name of the method as the last parameter. For example the &#39;ad_catalog&#39; method would be called like this:</p>

<pre class="sh_perl">  $dbh-&#62;func( ..., &#39;ad_catalog&#39;)</pre>

<p>The ad_catalog() method takes three required parameters and one optional parameter:</p>

<pre class="sh_perl">  # $table  = the name you will use to refer to the table in SQL commands
  # $format = the format of the data (&#39;XML&#39;, &#39;CSV&#39;, &#39;Fixed&#39;, etc.)
  # $file   = the name of a local or remote file holding the data
  # $flags  = an optional hash of flags required by some data formats
  $dbh-&#62;func( $table, $format, $file, $flags, &#39;ad_catalog&#39;)

  # For example:
  $dbh-&#62;func( &#39;cars&#39;, &#39;XML&#39;, &#39;cars.xml&#39;, &#39;ad_catalog&#39; )</pre>

<p>This specifies that the table name &#39;cars&#39; will be used to access XML data stored in the file &#39;cars.xml&#39;.</p>

<p>Once you have issued a catalog command, you can use the name $table in SQL commands to access or modify the data in $file. The catalog only needs to be specified once for a table/file/format combination and can then be used for an unlimited number of processing commands.</p>

<dt><a name='Step'></a><a name="Step_#4_:_Use_DBI/SQL_commands_to_access_and/or_modify_data"
>Step #4 : Use DBI/SQL commands to access and/or modify data</a></dt>

<dd>
<p>DBD::AnyData supports all standard DBI methods and a subset of SQL syntax. See the section below &#34;SQL Syntax&#34; for a description of the supported SQL commands. See the DBI documentation for detailed description of DBI commands.</p>

<p>The do() method can be used to create or drop a table and insert, delete, or update rows:</p>

<pre class="sh_perl">  $dbh-&#62;do(&#34;CREATE TABLE ... )
  $dbh-&#62;do(&#34;DROP TABLE ... )
  $dbh-&#62;do(&#34;INSERT INTO ... )
  $dbh-&#62;do(&#34;UPDATE ... )
  $dbh-&#62;do(&#34;DELETE ... )</pre>

<p>A combination of the prepare(), execute(), and fetch() methods can be used to access data:</p>

<pre class="sh_perl">  my $sth = $dbh-&#62;prepare(&#34;SELECT * FROM cars WHERE make = &#39;Honda&#39;&#34;);
  $sth-&#62;execute();
  while (my $row = $sth-&#62;fetchrow_hashref){
      print $row-&#62;{model};
  }</pre>

<dt><a name='Putting'></a><a name="Putting_it_all_together"
>Putting it all together</a></dt>

<dd>
<p>This is the complete script needed to access data stored in CSV format in a file called &#34;cars.csv&#34;. It prints all data from the &#34;make&#34; and &#34;model&#34; columns of the database.</p>

<pre class="sh_perl">  # specifies that you will use the DBI module.
  use DBI;
  # creates a database handle
  my $dbh = DBI-&#62;connect(&#39;dbi:AnyData(RaiseError=&#62;1):&#39;);
  # specifies the table, format, and file holding the data
  $dbh-&#62;func( &#39;cars&#39;, &#39;CSV&#39;, &#39;cars.csv&#39; &#39;ad_catalog&#39;);
  # through 8 use DBI and SQL to access data in the file
  my $sth = $dbh-&#62;prepare(&#34;SELECT make, model FROM cars&#34;);
  $sth-&#62;execute();
  while (my $row = $sth-&#62;fetch) {
      print &#34;@$row\n&#34;;
  }</pre>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Customizing_table_structure"
>Customizing table structure</a></h2>

<p>DBD::AnyData uses a number of defaults when it decides how to read data from a database and in many cases these defaults are all you will need. However, depending on the format and database you are using, you may need to specify other features such as column names, record separators, etc.</p>

<p>You can specify this additional information in the $flags parameter of the ad_catalog and other DBD::AnyData methods. $flags is always a reference to a hash, i.e. one or more key value pairs joined with a =&#62;, separated by commas, and delimited by curly braces:</p>

<pre class="sh_perl">  $flags = { key1 =&#62; value1, key2 =&#62; value2 ... }

  # or in the method call:
  $dbh-&#62;func( $table, $format, $file, { key1=&#62;,val1 ... }, &#39;ad_catalog&#39;);</pre>

<dl>
<dt><a name='Column'></a><a name="Column_Names"
>Column Names</a></dt>

<dd>
<p>Some formats have pre-defined column names:</p>

<pre class="sh_perl">    Passwd  username
            passwd
            UID
            GID
            fullname
            homedir
            shell

    Weblog  remotehost
            usernname
            authuser
            date
            request
            status
            bytes
            referer
            client

    Mp3     song
            artist
            album
            year
            genre
            filename
            filesize</pre>

<p>Column names for the other formats can either be specified in the database itself or supplied by you in the $flags parameter.</p>

<p>If the column names are specified in the database, they are taken from the first record in the database. For example in a CSV (Comma Separated Values) file or a Fixed Length file, the default is to treat the first line of the table as the list of column names. In an HTMLtable file, the default is to look for the first &#60;tr&#62; in the first table. In an XML file, the default is to use the names of all attributes and all CDATA and PCDATA elements contained within the first non-initial tag.</p>

<p>In most cases, this first record that defines the column names is in the same format as the rest of the table e.g. a CSV string in a CSV file, a tab delimited string in a Tab delimited file, etc. The one exception to this is that in a Fixed Length file the first row of the file can contain a *comma-separated* list of column names, not a fixed length list. HTMLtable and XML also use other flags to select the column names (e.g. the number of the table or the depth in the tree to examine). Please see the documentation for these formats for further details of how defaults are selected.</p>

<p>For most formats, if the column names are not contained in the first record in the file, then you can specify them as a comma separated list in the $flags parameter, for example:</p>

<pre class="sh_perl">  $dbh-&#62;func(
      &#39;cars&#39;,
      &#39;Tab&#39;,
      &#39;data.tab&#39;,
      { col_names =&#62; &#39;make,model,year&#39; },
  &#39;ad_catalog&#39;)</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORTED_FORMATS"
>SUPPORTED FORMATS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CSV,_Tab,_Pipe,_Ini,_Paragraph"
>CSV, Tab, Pipe, Ini, Paragraph</a></h2>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Fixed"
>Fixed</a></h2>

<p>Fixed Length format files (where each column is a specified length) are unique in several respects. First, as mentioned above, if you wish to include the column names in the file itself, they should be on the first line of the file as a *comma separated* string.</p>

<p>Secondly, there is a mandatory flag called &#39;pattern&#39; that you must use whenever you use the Fixed length format. This flag specifies the widths of the columns. It uses the standard Perl pack/unpack syntax to specify the pattern. See the Perl documentation for those commands for further details. In most cases simply using a capital &#39;A&#39; followed by the length of the field suffices:</p>

<pre class="sh_perl">  { pattern =&#62; &#39;A10 A12 A4&#39; }</pre>

<p>This specifies that the table contains three fields with widths of 10, 12, and 14 characters.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="XML"
>XML</a></h2>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="HTMLtable"
>HTMLtable</a></h2>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBI"
>DBI</a></h2>

<p>DBD::AnyData supports importing any DBI database into memory and can also convert any DBI database into any of the other AnyData formats.</p>

<p>Use the format name &#39;DBI&#39;, and instead of a filename, pass the ad_import call a connection in whatever database you are using, and specify a SQL SELECT statement:</p>

<pre class="sh_perl">  my $dbh = DBI-&#62;connect(&#39;dbi:AnyData:(RaiseError=&#62;1)&#39;);
  $dbh-&#62;func(
      &#39;table1&#39;,
      &#39;DBI&#39;,
      DBI-&#62;connect(&#39;dbi:mysql:database=test:(RaiseError=&#62;1)&#39;),
      {sql=&#62;&#34;SELECT make, model FROM cars WHERE make = &#39;honda&#39;&#34;},
  &#39;ad_import&#39;);</pre>

<p>That snippet imports a view from a MySQL database (selecting only the named columns and the selected rows) into an AnyData in-memory table. It can then be queried and/or modified in memory and then either displayed or stored to a file in some other format such as XML.</p>

<p>You may also use a bind_parameters form for the SQL call by passing an additional flag with an arrayref of the parameters:</p>

<pre class="sh_perl">  {
      sql     =&#62; &#34;SELECT make,model FROM CARS WHERE make = ?&#34;
      params  =&#62; [&#39;honda&#39;]
  }</pre>

<p>To convert from a DBI accessible database such as ORACLE or MySQL to one of the AnyData formats such as XML you must also include a flag with the table_name within the database:</p>

<pre class="sh_perl">  my $dbh = DBI-&#62;connect(&#39;dbi:AnyData:(RaiseError=&#62;1)&#39;);
  $dbh-&#62;func(
      &#39;DBI&#39;,
      DBI-&#62;connect(&#39;dbi:mysql:database=test:(RaiseError=&#62;1)&#39;),
      &#39;XML&#39;,
      &#39;cars.xml&#39;,
      {table_name=&#62;&#39;cars&#39;},
  &#39;ad_convert&#39;);</pre>

<p>Or to print out the same data as an HTML table without storing it:</p>

<pre class="sh_perl">  my $dbh = DBI-&#62;connect(&#39;dbi:AnyData:(RaiseError=&#62;1)&#39;);
  print $dbh-&#62;func(
      &#39;DBI&#39;,
      DBI-&#62;connect(&#39;dbi:mysql:database=test:(RaiseError=&#62;1)&#39;),
      &#39;HTMLtable&#39;,
      undef,
      {table_name=&#62;&#39;cars&#39;},
  &#39;ad_convert&#39;);</pre>

<p>The ad_convert() method works on the entire database. If you need to convert only a selected portion of the databse, use ad_import() with a SELECT clause and then ad_export() it to the new format.</p>

<p>The ad_import method by default closes the connection for the imported database. If you need to continue using the handle for the other datbase, pass the flag {keep_connection=&#62;1}:</p>

<pre class="sh_perl">  my $dbh       = DBI-&#62;connect(&#39;dbi:AnyData:(RaiseError=&#62;1)&#39;);
  my $mysql_dbh = DBI-&#62;connect(&#39;dbi:mysql:database=test:(RaiseError=&#62;1)&#39;),
  $dbh-&#62;func(
      &#39;cars&#39;,
      &#39;DBI&#39;,
      $mysql_dbh,
      { keep_connection=&#62;1 },
  &#39;ad_import&#39;);
  #...
  $mysql_dbh-&#62;disconnect;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Passwd,_Weblog,_Mp3"
>Passwd, Weblog, Mp3</a></h2>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Other_Formats"
>Other Formats</a></h2>

<p>DBD::AnyData supports an open API that allows other authors to build support for other formats. This means that the list of supported formats will continually grow. At the moment Wes Hardaker is working on AnyData::Format::SNMP and Earl Cahill is working on AnyData::Format::Storable. Anyone who is interested in working on a new format module, please open a ticket with an appropriate patch or write to dbi-dev@perl.org.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FURTHER_DETAILS"
>FURTHER DETAILS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Converting_between_formats"
>Converting between formats</a></h2>

<p>The $dbh-&#62;func(...,&#39;ad_convert&#39;) method provides a one-step way to convert between any of the data formats supported by DBD::AnyData. For example: read a CSV file and save it as an XML file or vice versa. See the section below on &#34;convert&#34; for details. See the section on &#34;Working with other DBI databases&#34; for information on converting data from ORACLE, or MySQL or almost any other database into XML, CSV, or any of the DBD::AnyData formats.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Using_remote_files"
>Using remote files</a></h2>

<p>You can import remote files accessible by FTP or HTTP directly into a DBD::AnyData in memory database using &#39;ad_import&#39; or you can use ad_convert to print the remote files as strings or save them to a local file. If the $file parameter of ad_import or ad_convert starts with &#34;ftp&#34; or &#34;http&#34;, DBD::AnyData will call LWP behind the scenes and fetch the file.</p>

<p>This will fetch the remote file, parse its XML, and provide you with an in-memory table which you can query with DBI/SQL or save to a local file:</p>

<pre class="sh_perl">  $dbh-&#62;func(
      &#39;news&#39;,
      &#39;XML&#39;,
      &#39;<a href="http://www.somewhere.org/files/news.xml" class="podlinkurl"
>http://www.somewhere.org/files/news.xml</a>&#39;,
  &#39;ad_import&#39;);</pre>

<p>This will fetch the remote file, parse its XML, and print it out as an HTML table:</p>

<pre class="sh_perl">  print $dbh-&#62;func(
      &#39;XML&#39;,
      &#39;<a href="http://www.somewhere.org/files/news.xml" class="podlinkurl"
>http://www.somewhere.org/files/news.xml</a>&#39;,
      &#39;HTMLtable&#39;,
  &#39;ad_convert&#39;);</pre>

<p>If the remote file requires authorization, you can include values for &#34;user&#34; and &#34;pass&#34; in the $flags parameter:</p>

<pre class="sh_perl">  $dbh-&#62;func(
      &#39;news&#39;,
      &#39;XML&#39;,
      &#39;<a href="http://www.somewhere.org/news.xml" class="podlinkurl"
>http://www.somewhere.org/news.xml</a>&#39;,
      { user =&#62; &#39;fred&#39;, passwd =&#62; &#39;x9y77d&#39; },
  &#39;ad_import&#39;);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Working_with_in-memory_tables"
>Working with in-memory tables</a></h2>

<p>In addition to normal file storage databases, DBD::AnyData supports databases that are stored and modified in-memory. You may either simply query the databases and then close them, or you can use the ad_export method to display data to the screen or save it to a file. There are a variety of reasons you might want to work with in-memory databases, including:</p>

<dl>
<dt><a name="Prototyping"
>Prototyping</a></dt>

<dd>
<p>quickly create a database from a string, an array, or the DATA section of a script without needing any file access or rdbms.</p>

<dt><a name='Creating'></a><a name="Creating_Views"
>Creating Views</a></dt>

<dd>
<p>pull selected columns and selected rows from an ORACLE or MySQL database en masse and work with them in memory rather than having to use the full database.</p>

<dt><a name='Combining'></a><a name="Combining_Data_from_multiple_formats"
>Combining Data from multiple formats</a></dt>

<dd>
<p>create a single in-memory table by importing selected columns and rows from e.g. an XML file, an Oracle database, and a CSV file.</p>

<dt><a name='Rollback'></a><a name="Rollback/Commit"
>Rollback/Commit</a></dt>

<dd>
<p>You can make multiple changes to the in-memory database and then, depending on the sucess or failure of those changes either commit by using export to save the changes to disk or skip export which effectively rolls back the database to its state before the import.</p>
</dd>
</dl>

<p>In-memory tables may be modified with DBI/SQL commands and can then be either printed to the screen or saved as a file in any of the AnyData formats. (see the ad_export method below)</p>

<p>In-memory tables may be created in several ways:</p>

<pre class="sh_perl"> 1. Create and populate the table from one or more local or remote files
 2. Create and populate the table from a string
 3. Create and populate the table from an array
 4. Use DBI/SQL commands to create &#38; populate the table</pre>

<dl>
<dt><a name='Creating'></a><a name="Creating_in-memory_tables_from_local_or_remote_files"
>Creating in-memory tables from local or remote files</a></dt>

<dd>
<p>You can create an in-memory table from a string in a specified format, Note: the string should be enclosed in square brackets.</p>

<p>This reads a CSV file into an in-memory table. Further access and modification takes place in-memory without further file access unless you specifically use ad_export to save the table to a file.</p>

<pre class="sh_perl">  # CREATE A TABLE FROM A LOCAL FILE
  $dbh-&#62;func( &#39;test2&#39;, &#39;CSV&#39;, $filename, &#39;ad_import&#39;);

  # CREATE A TABLE FROM A REMOTE FILE
  $dbh-&#62;func( &#39;test2&#39;, &#39;CSV&#39;, $url, &#39;ad_import&#39;);</pre>

<p>See the section on &#34;Remote File Access&#34; for further details of using remote Files.</p>

<dt><a name='Creating'></a><a name="Creating_an_in-memory_table_from_Strings"
>Creating an in-memory table from Strings</a></dt>

<dd>
<p>You can create an in-memory table from a string in a specified format, Note: the string should be enclosed in square brackets.</p>

<p>This example creates an in-memory table from a CSV string:</p>

<pre class="sh_perl">  # CREATE A TABLE FROM A CSV STRING
  $dbh-&#62;func( &#39;test2&#39;, &#39;CSV&#39;,
       [&#34;id,phrase\n1,foo\n2,bar&#34;],
  &#39;ad_import&#39;);</pre>

<dt><a name='Creating'></a><a name="Creating_an_in-memory_table_from_the_DATA_section_of_a_script"
>Creating an in-memory table from the DATA section of a script</a></dt>

<dd>
<p>Perl has the really cool feature that if you put text after the marker __END__, you can access that text as if it were from a file using the DATA array. This can be great for quick prototyping.</p>

<p>For example this is a complete script to build and access a small table and print out &#34;Just Another Perl Hacker&#34;:</p>

<pre class="sh_perl">  use DBI;
  my $dbh=DBI-&#62;connect(&#39;dbi:AnyData(RaiseError=&#62;1):&#39;);
  $dbh-&#62;func( &#39;test&#39;, &#39;XML&#39;,  [&#60;DATA&#62;],  &#39;ad_import&#39;);
  print $dbh-&#62;selectcol_arrayref(qq{
      SELECT phrase FROM test WHERE id = 2
  })-&#62;[0];
  __END__
  &#60;phrases&#62;
      &#60;phrase id=&#34;1&#34;&#62;Hello World!&#60;/phrase&#62;
      &#60;phrase id=&#34;2&#34;&#62;Just Another Perl Hacker!&#60;/phrase&#62;
  &#60;/phrases&#62;</pre>

<p>The same idea can be used with DATA sections of any size in any of the supported formats.</p>

<dt><a name='Creating'></a><a name="Creating_an_in-memory_table_from_Arrays"
>Creating an in-memory table from Arrays</a></dt>

<dd>
<p>In-memory tables may also be created from arrays. Or, more technically, from references to arrays. The array should consist of rows which are themselves references to arrays of the row values. The first row should be column names.</p>

<p>For example:</p>

<pre class="sh_perl"> # CREATE A TABLE FROM AN ARRAY
 $dbh-&#62;func( &#39;test3&#39;, &#39;ARRAY&#39;,
             [
                [&#39;id&#39;,&#39;phrase&#39;],
                [1,&#39;foo&#39;],
                [2,&#39;bar&#39;]
             ],
 &#39;ad_import&#39;);</pre>

<dt><a name='Creating'></a><a name="Creating_an_in-memory_table_from_DBI/SQL_commands"
>Creating an in-memory table from DBI/SQL commands</a></dt>

<dd>
<p>If you do not use ad_catalog or ad_import to associate a table name with a file, then the table will be an in-memory table, so you can just start right out by using it in DBI/SQL commands:</p>

<pre class="sh_perl">  # CREATE &#38; POPULATE A TABLE FROM DBI/SQL COMMANDS
  use DBI;
  my $dbh = DBI-&#62;connect(&#39;dbi:AnyData(RaiseError=&#62;1):&#39;);
  $dbh-&#62;do(&#34;CREATE TABLE test (id TEXT,phrase TEXT)&#34;);
  $dbh-&#62;do(&#34;INSERT INTO test VALUES (1,&#39;foo&#39;)&#34;);
  $dbh-&#62;do(&#34;INSERT INTO test VALUES (2,&#39;bar&#39;)&#34;);
  $dbh-&#62;do(&#34;UPDATE test SET phrase=&#39;baz&#39; WHERE id = &#39;2&#39;&#34;);
  $dbh-&#62;do(&#34;DELETE FROM test WHERE id = &#39;1&#39;&#34;);</pre>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Using_Multiple_Databases,_Simulating_Joins"
>Using Multiple Databases, Simulating Joins</a></h2>

<p>You may access any number of databases within a single script and can mix and match from the various data formats.</p>

<p>For example, this creates two in-memory tables from two different data formats</p>

<pre class="sh_perl">  $dbh-&#62;func( &#39;classes&#39;, &#39;CSV&#39;, &#39;classes.csv&#39; &#39;ad_import&#39;);
  $dbh-&#62;func( &#39;profs&#39;,   &#39;XML&#39;, &#39;profs.xml&#39;,  &#39;ad_import&#39;);</pre>

<p>You can also import columns from several different formats into a single table. For example this imports data from an XML file, a CSV file and a Pipe delimited file into a single in-memory database. Note that the $table parameter is the same in each call so the data from each import will be appended into that one table.</p>

<pre class="sh_perl">  $dbh-&#62;func( &#39;test&#39;, &#39;XML&#39;,  [$xmlStr],  &#39;ad_import&#39;);
  $dbh-&#62;func( &#39;test&#39;, &#39;CSV&#39;,  [$csvStr],  &#39;ad_import&#39;);
  $dbh-&#62;func( &#39;test&#39;, &#39;Pipe&#39;, [$pipeStr], &#39;ad_import&#39;);</pre>

<p>When you import more than one table into a single table like this, the resulting table will be a cross join unless you supply a lookup_key flag. If a lookup_key is supplied, then a the resulting table will be a full outer join on that key column. This feature is experimental for the time being but should work as expected unless there are columns other than the key column with the same names in the various tables. You can specify that the joined table will only contain certain columns by creating a blank empty table before doing the imports. You can specify only certain rows with the sql flag. For example:</p>

<pre class="sh_perl">  $dbh-&#62;func(&#39;test&#39;,&#39;ARRAY&#39;,[],{col_names=&#62;&#39;foo,bar&#39;baz&#39;}, &#39;ad_import&#39;);
  $dbh-&#62;func(&#39;test&#39;,&#39;XML&#39;,$file1,{lookup_key=&#62;&#39;baz&#39;},&#39;ad_import&#39;);
  $dbh-&#62;func(&#39;test&#39;,&#39;CSV&#39;,$file1,{lookup_key=&#62;&#39;baz&#39;},&#39;ad_import&#39;);</pre>

<p>DBD::AnyData does not currently support using multiple tables in a single SQL statement. However it does support using multiple tables and querying them separately with different SQL statements. This means you can simulate joins by creating two statement handles and using the values from the first handle as a lookup key for the second handle. Like this:</p>

<pre class="sh_perl">  $dbh-&#62;func( &#39;classes&#39;, &#39;CSV&#39;, &#39;classes.csv&#39; &#39;ad_import&#39;);
  $dbh-&#62;func( &#39;profs&#39;,   &#39;XML&#39;, &#39;profs.xml&#39;,  &#39;ad_import&#39;);
  my $classes_sth = $dbh-&#62;prepare( &#34;SELECT pid,title FROM classes&#34; );
  my $profs_sth   = $dbh-&#62;prepare( &#34;SELECT name FROM profs WHERE pid = ?&#34; );
  $classes_sth-&#62;execute;
  while (my($pid,$class_title) = $classes_sth-&#62;fetchrow_array) {
      $profs_sth-&#62;execute($pid);
      my $row = $profs_sth-&#62;fetchrow_arrayref;
      my $prof_name = $row ? $row-&#62;[0] : &#39;&#39;;
      print &#34;$class_title : $prof_name\n&#34;;
  }

  # That will produce the same results as:
  SELECT classes.title,profs.name FROM classes,profs WHERE pid = pid</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="REFERENCE"
>REFERENCE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Overview_of_DBD::AnyData_Methods"
>Overview of DBD::AnyData Methods</a></h2>

<p>DBD::AnyData makes use of five methods not found in other drivers:</p>

<dl>
<dt><a name="ad_catalog"
>ad_catalog</a></dt>

<dd>
<p>specifies a file to be used for DBI/SQL continuous file access</p>

<dt><a name="ad_import"
>ad_import</a></dt>

<dd>
<p>imports data into an in-memory table</p>

<dt><a name="ad_export"
>ad_export</a></dt>

<dd>
<p>exports data from an in-memory table to a file</p>

<dt><a name="ad_clear"
>ad_clear</a></dt>

<dd>
<p>clears an in-memory table (deletes it from memory)</p>

<dt><a name="ad_convert"
>ad_convert</a></dt>

<dd>
<p>converts data from one format to another and either saves it in a new file or returns it as a string</p>
</dd>
</dl>

<p>These methods are called using DBI func(), for example:</p>

<pre class="sh_perl">  $dbh-&#62;func( $table, $format, &#39;ad_export&#39;);

  # Here are the parameters for the various methods:
  $dbh-&#62;func( $table, $format, $file, $flags, &#39;ad_catalog&#39;);
  $dbh-&#62;func( $table, $format, $data, $flags, &#39;ad_import&#39;);

  $dbh-&#62;func( $source_format, $source_data,
              $target_format, $target_file,
              $source_flags,  $target_flags,
  &#39;ad_convert&#39;);

  $dbh-&#62;func( $table, $format, $file, $flags, &#39;ad_export&#39;);
  $dbh-&#62;func( $table, &#39;ad_clear&#39; );
     
  # $table is a valid SQL table name
  # $format is one of the AnyData formats (&#39;XML&#39;,&#39;CSV&#39;,etc.)
  # $file is a valid file name (relative or absolute) on the local computer
  # $flags is a hashref containing key/value pairs, e.g.
  { col_names =&#62; &#39;make,model,year&#39;, pattern =&#62; &#39;A10 A12 A4&#39; }

  # $data is one of:
  # * a valid file name (relative or absolute) on the local computer
  # * a valid absolute FTP or HTTP URL
  # * an arrayref containing arrayrefs of rows with column names first
  #     [
  #       [&#39;make&#39;,&#39;model&#39;],
  #       [&#39;Honda&#39;,&#39;Odyssy&#39;],
  #       [&#39;Ford&#39;,&#39;Suburban&#39;],
  #     ]

  # * an arrayref containing a string in a specified format
  #     CSV  :  [&#34;id,phrase\n1,foo\n2,bar&#34;]
  #     Pipe :  [&#34;id|phrase\n1|foo\n2|bar&#34;]

  # * a reference to the DATA section of a file
  #      [&#60;DATA&#62;]

  # * a DBI Database handle
  #      DBI-&#62;connect(&#39;dbi:mysql:database=...)</pre>

<p>The ad_catalog method is the standard way to treat files as databases. Each time you access data, it is read from the file and each time you modify data, it is written to the file. The entire file is never read en masse into memory unless you explicitly request it.</p>

<p>The ad_import method can import data from local or remote files, from any other DBI accessible database, from perl data structures such as arrays and strings. You may import an entire table or only the columns and rows you specify. If the data is imported from a file, all of the data you select is read into memory when you call ad_import so this should not be done with selections larger than will fit in your memory. :-). All accessing and modification is done in memory. If you want to save the results of any changes, you will need to call ad_export explicitly.</p>

<p>Not all formats and data sources will work with all methods. Here is a summary of what will work. &#34;all sources&#34; includes local files, remote files, any DBI accessible database, perl arrayrefs, perl strings.</p>

<pre class="sh_perl"> Import From   all formats, all sources
 Convert From  all formats, all sources
 Convert To    all formats except DBI, local files, arrays or strings only
 Export To     all formats except DBI, local files, arrays or strings only
 Catalog       all formats except DBI, XML, HTMLtable, Mp3, ARRAY,
               local files only</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="connect"
>connect</a></h2>

<p>The DBI-&#62;connect call</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ad_catalog"
>ad_catalog</a></h2>

<pre class="sh_perl"> PURPOSE:

    Creates an association betweeen a table name, a data format, and a file.

 SYNTAX:

     $dbh-&#62;func( $table, $format, $file, $flags, &#39;ad_catalog&#39; )

 PARAMETERS:

     $table  = the name of the table to be used in SQL commands

     $format = an AnyData format (&#39;XML&#39;,&#39;CSV&#39;, etc.)

     $file   = the name of a local file (either full path or relative)

     $flags  = a optional hashref of column names or other values

 EXAMPLE:

    This specifies that any DBI/SQL statements to the table
    &#39;cars&#39; will access and/or modify XML data in the file 
    &#39;/users/me/data.xml&#39;

       $dbh-&#62;func( &#39;cars&#39;, &#39;XML&#39;, &#39;/usrs/me/data.xml&#39;, &#39;ad_catalog&#39; )

 REMARKS:

    The format may be any AnyData format *except* DBI, XML, HTMLtable,
    and MP3.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ad_import"
>ad_import</a></h2>

<pre class="sh_perl"> PURPOSE:

     Imports data from any source and any format into an in-memory table.

 SYNTAX:

     $dbh-&#62;func( $table, $format, $data_source, $flags, &#39;ad_import&#39; )

 PARAMETERS:

     $table       = the name of the table to be used in SQL commands

     $format      = an AnyData format (&#39;XML&#39;,&#39;CSV&#39;, etc.)

     $data_source = $file_name
                 or $url
                 or [$string]
                 or [&#60;DATA&#62;]
                 or $reference_to_an array of arrays
                 or $DBI_database_handle

     (See section &#34;Data Sources&#34; for more specifics of $data_source)

 EXAMPLES:

     $dbh-&#62;func( &#39;cars&#39;, &#39;XML&#39;, &#39;/usrs/me/data.xml&#39;, &#39;ad_import&#39; )

     For further examples, see sections on &#34;In-Memory Tables&#34;,
     &#34;Remote Files&#34;, &#34;DBI databases&#34;.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ad_export"
>ad_export</a></h2>

<pre class="sh_perl"> PURPOSE:

     Converts an in-memory table into a specified format and either saves
     it to a file or returns it as a string.

 SYNTAX:

     $dbh-&#62;func( $table, $format, $file, $flags, &#39;ad_export&#39; )

     OR

     my $string = $dbh-&#62;func( $table, $format, $flags, &#39;ad_export&#39; )

 PARAMETERS:

     $table  = the name of the in-memory table to export

     $format = an AnyData format (&#39;XML&#39;,&#39;CSV&#39;, etc.)

     $file   = the name of a local file (either full path or relative)

 EXAMPLES:

     Save a table as an XML file:

        $dbh-&#62;func( &#39;cars&#39;, &#39;XML&#39;, &#39;/usrs/me/data.xml&#39;, &#39;ad_export&#39; )

     Print a table as an HTML table

         print $dbh-&#62;func( &#39;cars&#39;, &#39;HTMLtable&#39;, &#39;ad_export&#39; )</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ad_convert"
>ad_convert</a></h2>

<pre class="sh_perl"> PURPOSE:

     Converts data from one format into another and either returns it
     as a string in the new format or saves it to a file in the new
     format.

 SYNTAX:

   my $str = $dbh-&#62;func(
       $source_format,
       $data_source
       $target_format,
       $source_flags,
       $target_flags,
   &#39;ad_convert&#39; );

   OR

   $dbh-&#62;func(
       $source_format,
       $data_source
       $target_format,
       $target_file,
       $source_flags,
       $target_flags,
   &#39;ad_convert&#39; );

 PARAMETERS:

     $source_format = AnyData format (&#39;XML&#39;,&#39;CSV&#39;, etc.) of the source db

     $target_format = AnyData format (&#39;XML&#39;,&#39;CSV&#39;, etc.) of the target db

     $target_file  = name of file to store converted data in

     $data_source = $file_name
                 or $url
                 or [$string]
                 or [&#60;DATA&#62;]
                 or $reference_to_an array of arrays
                 or $DBI_database_handle

     (See section &#34;Data Sources&#34; for more specifics of $data_source)

 EXAMPLES:

 # CONVERT A CSV FILE TO AN XML FILE
 #
 $dbh-&#62;func( &#39;CSV&#39;, &#39;data.csv&#39;, &#39;XML&#39;, &#39;data.xml&#39;, &#39;ad_convert&#39;);

 # CONVERT AN ARRAYREF TO AN HTML TABLE AND PRINT IT
 #
 print $dbh-&#62;func( &#39;ARRAY&#39;, $aryref, &#39;HTMLtable&#39;, &#39;ad_convert&#39;);

 # CONVERT AN ARRAYREF TO XML AND SAVE IT IN A FILE
 #
 $dbh-&#62;func( &#39;ARRAY&#39;, $aryref, &#39;XML&#39;, &#39;data.xml&#39;, &#39;ad_convert&#39;);

 # CONVERT A SELECTION FROM A MySQL DATABASE TO XML
 # AND SAVE IT IN A FILE
 #
 $dbh-&#62;func(
     &#39;DBI&#39;,
     $mysql_dbh,
     &#39;XML&#39;,
     &#39;data.xml&#39;,
     {sql=&#62;&#34;SELECT make,model FROM CARS where year &#62; 1996&#34;}
 &#39;ad_convert&#39;);

 REMARKS

 The format &#39;DBI&#39; (any DBI accessible database) may be used as the
 source of a conversion, but not as the target of a conversion.

 The format &#39;ARRAY&#39; may be used to indicate that the source of the
 conversion is a reference to an array.  Or that the result of the
 conversion should be returned as an array reference.  (See above, 
 working with in-memory database for information on the structure of
 the array reference).</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Data_Sources"
>Data Sources</a></h2>

<pre class="sh_perl"> The ad_import and ad_convert methods can take data from many
 sources, including local files, remote files, strings, arrays,
 any DBI accessible database, the DATA section of a script.

 The $data_source parameter to ad_import and ad_convert will
 vary depending on the specific data source, see below.

 Local Files

     A string containing the name of a local file.  It may either
     be a full path, or a path or file relative to the currently
     defined f_dir (see ?);

     e.g. &#39;/users/me/data.xml&#39;

 Remote Files

     A string containing the url of the data.  Must start with
     &#39;ftp://&#39; or &#39;http://&#39;

     e.g. &#39;<a href="http://www.somewhere.org/misc/news.xml" class="podlinkurl"
>http://www.somewhere.org/misc/news.xml</a>&#39;

 Arrays of Arrays

     A reference to an array of data.  Each row of the data is
     a reference to an array of values.  The first row is the
     column names. E.G.:

        [
          [&#39;make&#39;,&#39;model&#39;],
          [&#39;Honda&#39;,&#39;Odyssy&#39;],
          [&#39;Ford&#39;,&#39;Suburban&#39;],
        ]

  Strings

     A string in the specified format including all field and record
     separators.  The string should be the only row in an array reference
     (i.e. it should be enclosed in square brackets)

     e.g. a CSV string

         [&#34;id,phrase\n1,foo\n2,bar&#34;]

     or in Pipe Delimited string

         [&#34;id|phrase\n1|foo\n2|bar&#34;]

  The DATA section of a file

      A reference to the array obtained from the lines after 
      __END__ in a script.

         [&#60;DATA&#62;]

  DBI Databases

      A database handle for a specified rdbms.

      DBI-&#62;connect(&#39;dbi:mysql:database=...)</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ad_clear"
>ad_clear</a></h2>

<pre class="sh_perl"> PURPOSE:

     Clears an in-memory table (deletes it from memory)

 SYNTAX:

     $dbh-&#62;func( $table, &#39;ad_clear&#39; )

 PARAMETERS:

     $table  = the name of the in-memory table to clear

 REMARKS:

 In-memory tables will be deleted from memory automatically when the
 database handle used to create them goes out of scope.  They will also
 be deleted if you call $dbh-&#62;disconnect() on the database handle
 used to create them.  The ad_clear method is a way to free up memory
 if you intend to keep using the database handle but no longer need a
 given table.  As with other (all?) Perl memory operations, this frees
 memory for the remainder of your perl script to use but does not decrease
 the total amount of system memory used by the script.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="SQL_Syntax"
>SQL Syntax</a></h2>

<pre class="sh_perl"> Currently only a limited subset of SQL commands are supported.
 Only a single table may be used in each command.  This means
 That there are *no joins*, but see the section above on simulating
 joins.  In coming months additional SQL capabilities will be added,
 so keep your eyes out for ANNOUNCE message on usenet or the dbi-users
 mailing list (see below &#34;Getting More Help&#34;).

 Here is a brief synopsis, please see the documentation for
 SQL::Statement for a more complete description of these commands.

       CREATE  TABLE $table
                     ( $col1 $type1, ..., $colN $typeN,
                     [ PRIMARY KEY ($col1, ... $colM) ] )

        DROP  TABLE  $table

        INSERT  INTO $table
                     [ ( $col1, ..., $colN ) ]
                     VALUES ( $val1, ... $valN )

        DELETE  FROM $table
                     [ WHERE $wclause ]

             UPDATE  $table
                     SET $col1 = $val1, ... $colN = $valN
                     [ WHERE $wclause ]

  SELECT  [DISTINCT] $col1, ... $colN
                     FROM $table
                     [ WHERE $wclause ] 
                     [ ORDER BY $ocol1 [ASC|DESC], ... $ocolM [ASC|DESC] ]

           $wclause  [NOT] $col $op $val|$col
                     [ AND|OR $wclause2 ... AND|OR $wclauseN ]

                $op  = |  &#60;&#62; |  &#60; | &#62; | &#60;= | &#62;= 
                     | IS NULL | IS NOT NULL | LIKE | CLIKE

 The &#34;CLIKE&#34; operator works exactly like &#34;LIKE&#34; but is case insensitive.</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Please report any bugs or feature requests to <code>bug-dbd-anydata at rt.cpan.org</code>, or through the web interface at <a href="http://rt.cpan.org/NoAuth/ReportBug.html?Queue=DBD-AnyData" class="podlinkurl"
>http://rt.cpan.org/NoAuth/ReportBug.html?Queue=DBD-AnyData</a>. I will be notified, and then you&#39;ll automatically be notified of progress on your bug as I make changes.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT"
>SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can find documentation for this module with the perldoc command.</p>

<pre class="sh_perl">  perldoc DBD::AnyData</pre>

<p>You can also look for information at:</p>

<ul>
<li>RT: CPAN&#39;s request tracker
<p><a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=DBD-AnyData" class="podlinkurl"
>http://rt.cpan.org/NoAuth/Bugs.html?Dist=DBD-AnyData</a></p>
</li>

<li>AnnoCPAN: Annotated CPAN documentation
<p><a href="http://annocpan.org/dist/DBD-AnyData" class="podlinkurl"
>http://annocpan.org/dist/DBD-AnyData</a></p>
</li>

<li>CPAN Ratings
<p><a href="http://cpanratings.perl.org/d/DBD-AnyData" class="podlinkurl"
>http://cpanratings.perl.org/d/DBD-AnyData</a></p>
</li>

<li>Search CPAN
<p><a href="http://search.cpan.org/dist/DBD-AnyData/" class="podlinkurl"
>http://search.cpan.org/dist/DBD-AnyData/</a></p>
</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACKNOWLEDGEMENTS"
>ACKNOWLEDGEMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Many people have contributed ideas and code, found bugs, and generally been supportive including Tom Lowery, Andy Duncan, Randal Schwartz, Michel Rodriguez, Wes Hardraker, Bob Starr, Earl Cahill, Bryan Fife, Matt Sisk, Matthew Wickline, Wolfgang Weisseberg. Thanks to Jochen Weidmann for DBD::File and SQL::Statement and of course Tim Bunce and Alligator Descartes for DBI and its documentation.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR_&#38;_COPYRIGHT"
>AUTHOR &#38; COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2000, Jeff Zucker &#60;jeff@vpservices.com&#62;</p>

<p>Copyright 2010, Jens Rehsack &#60;rehsack@cpan.org&#62;</p>

<p>This program is free software; you can redistribute it and/or modify it under the terms of either: the GNU General Public License as published by the Free Software Foundation; or the Artistic License.</p>

<p>See <a href="http://dev.perl.org/licenses/" class="podlinkurl"
>http://dev.perl.org/licenses/</a> for more information.</p>

<p>All rights reserved</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78283 Uploads, 24725 Distributions
106015 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 06:56:04 2012 GMT (0.716571807861328) @cpansearch1 -->
 </body>
</html>
