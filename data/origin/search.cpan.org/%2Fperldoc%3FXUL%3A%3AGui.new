<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>XUL::Gui - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","XUL-Gui",3]);
    _gaq.push(["_setCustomVar",5,"Release","XUL-Gui-0.63",3]);
    _gaq.push(["_setCustomVar",3,"Module","XUL::Gui",3]);
    _gaq.push(["_setCustomVar",1,"Author","ASG",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?XUL::Gui">permalink</a></div>
  <a href="/~asg/">Eric Strom</a> &gt;
  <a href="/~asg/XUL-Gui-0.63/">XUL-Gui-0.63</a> &gt;
  XUL::Gui
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/37d8e0ce7024584f0c4d2eddfcfacd2f?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/A/AS/ASG/XUL-Gui-0.63.tar.gz">XUL-Gui-0.63.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=XUL%3A%3AGui;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~ASG/XUL-Gui-0.63/lib/XUL/Gui.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 3</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 3</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=XUL-Gui">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.63 &nbsp;
<span class="noprint">
  <a href="/src/ASG/XUL-Gui-0.63/lib/XUL/Gui.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#how_things_work'>how things work</a>
    <li class='indexItem indexItem2'><a href='#building_blocks'>building blocks</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#xul_documentation_links'>xul documentation links</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#event_handlers'>event handlers</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXPORT'>EXPORT</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#object_oriented_interface'>object oriented interface</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#gui_functions'>gui functions</a>
    <li class='indexItem indexItem2'><a href='#data_binding'>data binding</a>
    <li class='indexItem indexItem2'><a href='#pragmatic_blocks'>pragmatic blocks</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#autobuffering'>autobuffering</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#utility_functions'>utility functions</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#widgets'>widgets</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CAVEATS'>CAVEATS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#ACKNOWLEDGMENTS'>ACKNOWLEDGMENTS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_&#38;_LICENSE'>COPYRIGHT &#38; LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>XUL::Gui - render cross platform gui applications with firefox from perl</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>version 0.63</p>

<p>this module is under active development,
interfaces may change.</p>

<p>this code is currently in beta,
use in production environments at your own risk</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use XUL::Gui;
    display Label &#39;hello, world!&#39;;

    # short enough?  remove &#34;Label&#34; for bonus points

    use XUL::Gui;
    display Window title =&#62; &#34;XUL::Gui&#39;s long hello&#34;,
        GroupBox(
            Caption(&#39;XUL&#39;),
            Button(
                label     =&#62; &#39;click me&#39;,
                oncommand =&#62; sub {$_-&#62;label = &#39;ouch&#39;}
            ),
            Button(
                id        =&#62; &#39;btn&#39;,
                label     =&#62;&#39;automatic id registration&#39;,
                oncommand =&#62; sub {
                    ID(btn)-&#62;label = &#39;means no more variable clutter&#39;;
                    ID(txt)-&#62;value = &#39;and makes cross tag updates easy&#39;;
            }),
            Button(
                type  =&#62; &#39;menu&#39;,
                label =&#62; &#39;menu button&#39;,
                MenuPopup map
                    {MenuItem label =&#62; $_} qw/first second third/
            ),
            TextBox( id =&#62; &#39;txt&#39;, width =&#62; 300 ),
            ProgressMeter( mode =&#62; &#39;undetermined&#39; ),
        ),
        GroupBox(
            Caption(&#39;HTML too&#39;),
            TABLE( width =&#62; &#39;100%&#39;,
                TR map {TD $_}
                    &#39;one&#39;, I(&#39;two&#39;), B(&#39;three&#39;), U(&#39;four&#39;), SUP(&#39;five&#39;)
            ),
            BR, HR,
            P(&#39;all the HTML tags are in CAPS&#39;),
        );</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>this module exposes the entire functionality of mozilla firefox&#39;s rendering engine to perl by providing all of the <code> XUL </code> and <code> HTML </code> tags as functions and allowing you to interact with those objects directly from perl. gui applications created with this toolkit are cross platform, fully support CSS styling, inherit firefox&#39;s rich assortment of web technologies (browser, canvas and video tags, flash and other plugins), and are even easier to write than <code> HTML </code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="how_things_work"
>how things work</a></h2>

<p>gui&#39;s created with this module are event driven. an arbitrarily complex (and runtime mutable) object tree is passed to <code> display </code>, which then creates the gui in firefox and starts the event loop. <code> display </code> will wait for and respond to events until the <code> quit </code> function is called, or the user closes the window.</p>

<p>all of javascript&#39;s event handlers are available, and can be written in perl (normally) or javascript (for handlers that need to be very fast such as image rollovers with onmouseover or the like). this is not to say that perl side handlers are slow, but with rollovers and fast mouse movements, sometimes there is mild lag due to protocol overhead.</p>

<p>this module is written in pure perl, and only depends upon core modules, making it easy to distribute your application. the goal of this module is to make all steps of gui development as easy as possible. XUL&#39;s widgets and nested design structure gets us most of the way there, and this module with its light weight syntax, and &#39;do what i mean&#39; nature hopefully finishes the job. everything has sensible defaults with minimal boilerplate, and nested design means a logical code flow that isn&#39;t littered with variables. please send feedback if you think anything could be improved.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="building_blocks"
>building blocks</a></h2>

<p>just like in <code> HTML</code>, you build up your gui using tags. all tags (<code> XUL </code> tags, <code> HTML </code> tags, user defined widgets, and the <code> display </code> function) are parsed the same way, and can fit into one of four templates:</p>

<ul>
<li>no arguments
<pre class="sh_perl">    HR()
    &#60;hr /&#62;</pre>
</li>

<li>one simple argument
<pre class="sh_perl">    B(&#39;some bold text&#39;)
    &#60;b&#62;some bold text&#60;b/&#62;</pre>

<p>in the special case of a tag with one argument, which is not another tag, that argument is added to that tag as a text node. this is mostly useful for HTML tags, but works with XUL as well. once parsed, the line <code> B(&#39;...&#39;) </code> becomes <code>B( TEXT =&#62; &#39;...&#39; )</code>. the special <code> TEXT </code> attribute can be used directly if other attributes need to be set: <code>FONT( color=&#62;&#39;blue&#39;, TEXT=&#62;&#39;...&#39; )</code>.</p>
</li>

<li>multiple attributes
<pre class="sh_perl">    Label( value=&#62;&#39;some text&#39;, style=&#62;&#39;color: red&#39; )
    &#60;label value=&#34;some text&#34;   style=&#34;color: red;&#34; /&#62;</pre>
</li>

<li>attributes and children
<pre class="sh_perl">    Hbox( id =&#62; &#39;mybox&#39;, pack =&#62; &#39;center&#39;,
        Label( value =&#62; &#39;hello&#39; ),
        BR,
        B(&#39;world&#39;)
    )

    &#60;hbox id=&#34;mybox&#34; pack=&#34;center&#34;&#62;
        &#60;label value=&#34;hello&#34; /&#62;
        &#60;br /&#62;
        &#60;b&#62;world&#60;/b&#62;
    &#60;/hbox&#62;</pre>
</li>
</ul>

<p>as you can see, the tag functions in perl nest and behave the same way as their counterpart element constructors in <code> HTML/XUL </code>. just like in <code> HTML </code>, you access the elements in your gui by <code> id </code>. but rather than using <code> document.getElementById(...) </code> all the time, setting the <code> id </code> attribute names an element in the global <code> %ID </code> hash. the same hash can be accessed using the <code> ID(some_id) </code> function.</p>

<pre class="sh_perl">    my $object = Button( id =&#62; &#39;btn&#39;, label =&#62; &#39;OK&#39; );

    #  $ID{btn} == ID(btn) == $object</pre>

<p>the ID hash also exists in javascript:</p>

<pre class="sh_perl">    ID.btn == document.getElementById(&#39;btn&#39;)</pre>

<p>due to the way this module works, every element needs an <code> id </code>, so if you don&#39;t set one yourself, an auto generated <code> id </code> matching <code> /^xul_\d+$/ </code> is used. you can use any <code> id </code> that matches <code> /\w+/ </code></p>

<p>Tk&#39;s attribute style with a leading dash is supported. this is useful for readability when collapsing attribute lists with <code> qw// </code></p>

<pre class="sh_perl">    TextBox id=&#62;&#39;txt&#39;, width=&#62;75, height=&#62;20, type=&#62;&#39;number&#39;, decimalplaces=&#62;4;
    TextBox qw/-id txt -width 75 -height 20 -type number -decimalplaces 4/;</pre>

<p>multiple &#39;style&#39; attributes are joined with &#39;;&#39; into a single attribute</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="xul_documentation_links"
>xul documentation links</a></h3>

<p>all <code> XUL </code> and <code> HTML </code> objects in perl are exact mirrors of their javascript counterparts and can be acted on as such. for anything not written in this document or <a href="/~asg/XUL-Gui-0.63/lib/XUL/Gui/Manual.pm" class="podlinkpod"
>XUL::Gui::Manual</a>, developer.mozilla.com is the official source of documentation:</p>

<ul>
<li><a href="https://developer.mozilla.org/en/XUL" class="podlinkurl"
>https://developer.mozilla.org/en/XUL</a></li>

<li><a href="https://developer.mozilla.org/en/XUL_Reference" class="podlinkurl"
>https://developer.mozilla.org/en/XUL_Reference</a></li>

<li><a href="https://developer.mozilla.org/En/Documentation_hot_links" class="podlinkurl"
>https://developer.mozilla.org/En/Documentation_hot_links</a></li>

<li><a href="http://www.hevanet.com/acorbin/xul/top.xul" class="podlinkurl"
>http://www.hevanet.com/acorbin/xul/top.xul</a> - XUL periodic table</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="event_handlers"
>event handlers</a></h2>

<p>any tag attribute name that matches <code> /^on/ </code> is an event handler (onclick, onfocus, ...), and expects a <code> sub {...} </code> (perl event handler) or <code> function q{...} </code> (javascript event handler).</p>

<p>perl event handlers get passed a reference to their object and an event object</p>

<pre class="sh_perl">    Button( label=&#62;&#39;click me&#39;, oncommand=&#62; sub {
        my ($self, $event) = @_;
        $self-&#62;label = $event-&#62;type;
    })</pre>

<p>in the event handler, <code> $_ == $_[0] </code> so a shorter version would be:</p>

<pre class="sh_perl">    oncommand =&#62; sub {$_-&#62;label = pop-&#62;type}</pre>

<p>javascript event handlers have <code> event </code> and <code> this </code> set for you</p>

<pre class="sh_perl">    Button( label=&#62;&#39;click me&#39;, oncommand=&#62; function q{
        this.label = event.type;
    })</pre>

<p>any attribute with a name that doesn&#39;t match <code> /^on/ </code> that has a code ref value is added to the object as a method. methods are explained in more detail later on.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORT"
>EXPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use XUL::Gui;   # is the same as
    use XUL::Gui qw/:base :util :pragma :xul :html :const :image/;

    the following export tags are available:

    :base       %ID ID alert display quit widget
    :tools      function gui interval serve timeout toggle XUL
    :pragma     buffered cached delay doevents flush noevents now
    :const      BLUR FILL FIT FLEX MIDDLE SCROLL
    :widgets    ComboBox filepicker prompt
    :image      bitmap bitmap2src
    :util       apply mapn trace zip
    :internal   genid object realid tag

    :all     (all exports)
    :default (same as with &#39;use XUL::Gui;&#39;)

    :xul    (also exported as Titlecase)
      Action ArrowScrollBox Assign BBox Binding Bindings Box Broadcaster
      BroadcasterSet Browser Button Caption CheckBox ColorPicker Column Columns
      Command CommandSet Conditions Content DatePicker Deck Description Dialog
      DialogHeader DropMarker Editor Grid Grippy GroupBox HBox IFrame Image Key
      KeySet Label ListBox ListCell ListCol ListCols ListHead ListHeader
      ListItem Member Menu MenuBar MenuItem MenuList MenuPopup MenuSeparator
      Notification NotificationBox Observes Overlay Page Panel Param PopupSet
      PrefPane PrefWindow Preference Preferences ProgressMeter Query QuerySet
      Radio RadioGroup Resizer RichListBox RichListItem Row Rows Rule Scale
      Script ScrollBar ScrollBox ScrollCorner Separator Spacer SpinButtons
      Splitter Stack StatusBar StatusBarPanel StringBundle StringBundleSet Tab
      TabBox TabPanel TabPanels Tabs Template TextBox TextNode TimePicker
      TitleBar ToolBar ToolBarButton ToolBarGrippy ToolBarItem ToolBarPalette
      ToolBarSeparator ToolBarSet ToolBarSpacer ToolBarSpring ToolBox ToolTip
      Tree TreeCell TreeChildren TreeCol TreeCols TreeItem TreeRow TreeSeparator
      Triple VBox Where Window Wizard WizardPage

    :html   (also exported as html_lowercase)
      A ABBR ACRONYM ADDRESS APPLET AREA AUDIO B BASE BASEFONT BDO BGSOUND BIG
      BLINK BLOCKQUOTE BODY BR BUTTON CANVAS CAPTION CENTER CITE CODE COL
      COLGROUP COMMENT DD DEL DFN DIR DIV DL DT EM EMBED FIELDSET FONT FORM
      FRAME FRAMESET H1 H2 H3 H4 H5 H6 HEAD HR HTML I IFRAME ILAYER IMG INPUT
      INS ISINDEX KBD LABEL LAYER LEGEND LI LINK LISTING MAP MARQUEE MENU META
      MULTICOL NOBR NOEMBED NOFRAMES NOLAYER NOSCRIPT OBJECT OL OPTGROUP OPTION
      P PARAM PLAINTEXT PRE Q RB RBC RP RT RTC RUBY S SAMP SCRIPT SELECT SMALL
      SOURCE SPACER SPAN STRIKE STRONG STYLE SUB SUP TABLE TBODY TD TEXTAREA
      TFOOT TH THEAD TITLE TR TT U UL VAR VIDEO WBR XML XMP</pre>

<p>constants:</p>

<pre class="sh_perl">    FLEX    flex =&#62; 1
    FILL    flex =&#62; 1, align =&#62;&#39;stretch&#39;
    FIT     sizeToContent =&#62; 1
    SCROLL  style =&#62; &#39;overflow: auto&#39;
    MIDDLE  align =&#62; &#39;center&#39;, pack =&#62; &#39;center&#39;
    BLUR    onfocus =&#62; &#39;this.blur()&#39;

    each is a function that returns its constant, prepended to its arguments,
    thus the following are both valid:

    Box FILL pack=&#62;&#39;end&#39;;
    Box FILL, pack=&#62;&#39;end&#39;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="object_oriented_interface"
>object oriented interface</a></h2>

<p>if you prefer an OO interface, there are a few ways to get one:</p>

<pre class="sh_perl">    use XUL::Gui &#39;g-&#62;*&#39;;  # DYOI: draw your own interface</pre>

<p><code> g </code> (which could be any empty package name) now has all of XUL::Gui&#39;s functions as methods. since draw your own interface does what you mean (<code> dyoidwym </code> ), each of the following graphic styles are equivalent: <code>g-&#62;*, g-&#62;, -&#62;g, install_into-&#62;g</code>.</p>

<p>normally, installing methods into an existing package will cause a fatal error, however you can add <code>!</code> to force installation into an existing package</p>

<p>no functions are imported into your namespace by default, but you can request any you do want as usual:</p>

<pre class="sh_perl">    use XUL::Gui qw( g-&#62;* :base :pragma );</pre>

<p>to use the OO interface:</p>

<pre class="sh_perl">    g-&#62;display( g-&#62;Label(&#39;hello world&#39;) );
    # is the same as
    XUL::Gui::display( XUL::Gui::Label(&#39;hello world&#39;) );

    use g-&#62;id(&#39;someid&#39;) or g-&#62;ID(&#39;someid&#39;) to access the %ID hash

    the XUL tags are also available in lc and lcfirst:
        g-&#62;label       == XUI::Gui::Label
        g-&#62;colorpicker == XUL::Gui::ColorPicker
        g-&#62;colorPicker == XUL::Gui::ColorPicker

    the HTML tags are also available in lc, unless an XUL tag
    of the same name exists</pre>

<p>if you prefer an object (which behaves exactly the same as the package &#39;g&#39;):</p>

<pre class="sh_perl">    use XUL::Gui ();        # or anything you do want
    my $g = XUL::Gui-&#62;oo;   # $g now has XUL::Gui&#39;s functions as methods</pre>

<p>if you like <b>all</b> the OO lowercase names, but want functions, draw that:</p>

<pre class="sh_perl">    use XUL::Gui qw( -&#62;main:: );  # -&#62;:: will also export to main::
                                  #  &#39;::&#39; implies &#39;!&#39;
    display label &#39;hello, world&#39;;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="gui_functions"
>gui functions</a></h2>

<dl>
<dt><a name='display'></a><a name="display_LIST"
><code> display LIST </code></a></dt>

<dd>
<p><code> display </code> starts the http server, launches firefox, and waits for events.</p>

<p>it takes a list of gui objects, and several optional parameters:</p>

<pre class="sh_perl">    debug     (0) .. 6  adjust verbosity to stderr
    silent    (0) 1     disables all stderr status messages
    trusted    0 (1)    starts firefox with &#39;-app&#39; (requires firefox 3+)
    launch     0 (1)    launches firefox, if 0 connect to <a href="http://localhost:port" class="podlinkurl"
>http://localhost:port</a>
    skin       0 (1)    use the default &#39;<a href="chrome://global/skin" class="podlinkurl"
>chrome://global/skin</a>&#39; skin
    chrome     0 (1)    chrome mode disables all normal firefox gui elements,
                            setting this to 0 will turn those elements back on.
    xml       (0) 1     returns the object tree as xml, the gui is not launched
                 perl       includes deparsed perl event handlers
    delay  milliseconds delays each gui update cycle (for debugging)
    port                first port to start the server on, port++ after that
                            otherwise a random 5 digit port is used
    mozilla    0 (1)    setting this to 0 disables all mozilla specific features
                            including all XUL tags, the filepicker, and any
                            trusted mode features. (used to implement Web::Gui)</pre>

<p>if the first object is a <code> Window </code>, that window is created, otherwise a default one is added. the remaining objects are then added to the window.</p>

<p><code> display </code> will not return until the the gui quits</p>

<p>see <code> SYNOPSIS </code>, <a href="/~asg/XUL-Gui-0.63/lib/XUL/Gui/Manual.pm" class="podlinkpod"
>XUL::Gui::Manual</a>, <a href="/~asg/XUL-Gui-0.63/lib/XUL/Gui/Tutorial.pm" class="podlinkpod"
>XUL::Gui::Tutorial</a>, and the <code> examples </code> folder in this distribution for more details</p>

<dt><a name='quit'></a><a name="quit"
><code> quit </code></a></dt>

<dd>
<p>shuts down the server (causes a call to <code> display </code> to return at the end of the current event cycle)</p>

<p><code> quit </code> will shut down the server, but it can only shut down the client in trusted mode.</p>

<dt><a name='serve'></a><a name="serve_PATH_MIMETYPE_DATA"
><code> serve PATH MIMETYPE DATA </code></a></dt>

<dd>
<p>add a virtual file to the server</p>

<pre class="sh_perl">    serve &#39;/myfile.jpg&#39;, &#39;text/jpeg&#39;, $jpegdata;</pre>

<p>the paths <code> qw( / /client.js /event /ping /exit /perl ) </code> are reserved</p>

<dt><a name='object'></a><a name="object_TAGNAME_LIST"
><code> object TAGNAME LIST </code></a></dt>

<dd>
<p>creates a gui proxy object, allows run time addition of custom tags</p>

<pre class="sh_perl">    object(&#39;Label&#39;, value=&#62;&#39;hello&#39;) is the same as Label( value=&#62;&#39;hello&#39; )</pre>

<p>the <code> object </code> function is the constructor of all proxied gui objects, and all these objects inherit from <code> [object] </code> which provides the following methods.</p>

<dt><a name='object'></a><a name="object_introspection"
>object introspection</a></dt>

<dd>
<p>objects and widgets inherit from a base class <code> [object] </code> that provides the following object inspection / extension methods. these methods operate on the current data that XUL::Gui is holding in perl, none of them will ever call out to the gui</p>

<pre class="sh_perl">    -&#62;has(&#39;item!&#39;)      returns attributes or methods (see widget for details)
    -&#62;attr(&#39;rows&#39;)      lvalue access to $$self{A} attributes
    -&#62;child(2)          lvalue access to $$self{C} children
                          it only makes sense to use attr or child to set
                          values on objects before they are written to the gui
    -&#62;can(&#39;update&#39;)     lvalue access to $$self{M} methods
    -&#62;attributes        returns %{ $$self{A} }
    -&#62;children          returns @{ $$self{C} }
    -&#62;methods           returns %{ $$self{M} }
    -&#62;widget            returns $$self{W}
    -&#62;id                returns $$self{ID}
    -&#62;parent            returns $$self{P}
    -&#62;super             returns $$self{ISA}[0]
    -&#62;super(2)          returns $$self{ISA}[2]
    -&#62;extends(...)      sets inheritance (see widget for details)</pre>

<p>these methods are always available for widgets, and if they end up getting in the way of any javascript methods you want to call for gui objects:</p>

<pre class="sh_perl">    $object-&#62;extends(...)   # calls the perl introspection function
    $object-&#62;extends_(...)  # calls &#39;object.extends(...)&#39; in the gui
    $x = $object-&#62;_extends; # fetches the &#39;object.extends&#39; property
    $object-&#62;setAtribute(&#39;extends&#39;, ...); # and setting an attribute</pre>

<p>or at runtime:</p>

<pre class="sh_perl">    local $XUL::Gui::EXTENDED_OBJECTS = 0; # which prevents object inheritance
                                           # in the current lexical scope
    $object-&#62;extends(...);
        # calls the real javascript &#39;extends&#39; method assuming that it exists</pre>

<dt><a name='tag'></a><a name="tag_NAME"
><code> tag NAME </code></a></dt>

<dd>
<p>returns a code ref that generates proxy objects, allows for user defined tag functions</p>

<pre class="sh_perl">    *mylabel = tag &#39;label&#39;;
    \&#38;mylabel == \&#38;Label</pre>

<dt><a name='ID'></a><a name="ID_OBJECTID"
><code> ID OBJECTID </code></a></dt>

<dd>
<p>returns the gui object with the id <code> OBJECTID </code>. it is exactly the same as <code> $ID{OBJECTID} </code> and has <code> (*) </code> glob context so you don&#39;t need to quote the id.</p>

<pre class="sh_perl">    Label( id =&#62; &#39;myid&#39; )
    ...
    $ID{myid}-&#62;value = 5;
    ID(myid)-&#62;value = 5;  # same</pre>

<dt><a name='widget'></a><a name="widget_{CODE}_HASH"
><code> widget {CODE} HASH </code></a></dt>

<dd>
<p>widgets are containers used to group tags together into common patterns. in addition to grouping, widgets can have methods, attached data, and can inherit from other widgets</p>

<pre class="sh_perl">    *MyWidget = widget {
        Hbox(
            Label( $_-&#62;has(&#39;label-&#62;value&#39;) ),
            Button( label =&#62; &#39;OK&#39;, $_-&#62;has(&#39;oncommand&#39;) ),
            $_-&#62;children
        )
    }   method  =&#62; sub{ ... },
        method2 =&#62; sub{ ... },
        some_data =&#62;  [ ... ];  # unless the value is a CODE ref, each widget
                                # instance gets a new deep copy of the data

    $ID{someobject}-&#62;appendChild(
        MyWidget( label=&#62;&#39;widget&#39;, oncommand=&#62;\&#38;event_handler )
    );</pre>

<p>inside the widget&#39;s code block, several variables are defined:</p>

<pre class="sh_perl">    variable   contains the passed in
       $_{A} = { attributes }
       $_{C} = [ children   ]
       $_{M} = { methods    }
       $_    = a reference to the current widget (also as $_{W})
       @_    = the unchanged runtime argument list</pre>

<p>widgets have the following predefined (and overridable) methods that are synonyms / syntactic sugar for the widget variables:</p>

<pre class="sh_perl">    $_-&#62;has(&#39;label&#39;)        ~~ exists $_{A}{label} ? (label=&#62;$_{A}{label}) : ()
    $_-&#62;has(&#39;label-&#62;value&#39;) ~~ exists $_{A}{label} ? (value=&#62;$_{A}{label}) : ()

    $_-&#62;has(&#39;!label !command-&#62;oncommand style&#39;)

    -&#62;has(...) splits its arguments on whitespace and will search $_{A}, then
    $_{M} for the attribute. if an ! is attached (anywhere) to an attribute,
    it is required, and the widget will croak without it.
    in scalar context, if only one key =&#62; value pair is found, -&#62;has() will
    return the value.  otherwise, the number of found pairs is returned

    $_-&#62;attr( STRING )     $_{A}{STRING} # lvalue
    $_-&#62;attributes         %{ $_{A} }
    $_-&#62;child( NUMBER )    $_{C}[NUMBER] # lvalue
    $_-&#62;children           @{ $_{C} }
    $_-&#62;can( STRING )      $_{M}{STRING} # lvalue
    $_-&#62;methods            %{ $_{M} }</pre>

<p>most everything that you would want to access is available as a method of the widget (attributes, children, instance data, methods). since there may be namespace collisions, here is the namespace construction order:</p>

<pre class="sh_perl">    %widget_methods = (
        passed in attributes,
        predefined widget methods,
        widget methods and instance data,
        passed in methods
    );</pre>

<p>widgets can inherit from other widgets using the -&#62;extends() method:</p>

<pre class="sh_perl">    *MySubWidget = widget {$_-&#62;extends( &#38;MyWidget )}
        submethod =&#62; sub {...};</pre>

<p>more detail in <a href="/~asg/XUL-Gui-0.63/lib/XUL/Gui/Manual.pm" class="podlinkpod"
>XUL::Gui::Manual</a></p>

<dt><a name='alert'></a><a name="alert_STRING"
><code> alert STRING </code></a></dt>

<dd>
<p>open an alert message box</p>

<dt><a name='prompt'></a><a name="prompt_STRING"
><code> prompt STRING </code></a></dt>

<dd>
<p>open an prompt message box</p>

<dt><a name='filepicker'></a><a name="filepicker_MODE_FILTER_PAIRS"
><code> filepicker MODE FILTER_PAIRS </code></a></dt>

<dd>
<p>opens a filepicker dialog. modes are &#39;open&#39;, &#39;dir&#39;, or &#39;save&#39;. returns the path or undef on failure. if mode is &#39;open&#39; and <code> filepicker </code> is called in list context, the picker can select multiple files. the filepicker is only available when the gui is running in &#39;trusted&#39; mode.</p>

<pre class="sh_perl">    my @files = filepicker open =&#62;
                    Text   =&#62; &#39;*.txt; *.rtf&#39;,
                    Images =&#62; &#39;*.jpg; *.gif; *.png&#39;;</pre>

<dt><a name='trace'></a><a name="trace_LIST"
><code> trace LIST </code></a></dt>

<dd>
<p>carps <code> LIST </code> with object details, and then returns <code> LIST </code> unchanged</p>

<dt><a name='function'></a><a name="function_JAVASCRIPT"
><code> function JAVASCRIPT </code></a></dt>

<dd>
<p>create a javascript event handler, useful for mouse events that need to be very fast, such as onmousemove or onmouseover</p>

<pre class="sh_perl">    Button( label=&#62;&#39;click me&#39;, oncommand=&#62; function q{
        this.label = &#39;ouch&#39;;
        alert(&#39;hello from javascript&#39;);
        if (some_condition) {
            perl(&#34;print &#39;hello from perl&#39;&#34;);
        }
    })

    $ID{myid} in perl is ID.myid in javascript</pre>

<p>to access widget siblings by id, wrap the id with <code> W{...} </code></p>

<dt><a name='interval'></a><a name="interval_{CODE}_TIME_LIST"
><code> interval {CODE} TIME LIST </code></a></dt>

<dd>
<p>perl interface to javascript&#39;s <code> setInterval() </code>. interval returns a code ref which when called will cancel the interval. <code> TIME </code> is in milliseconds. <code> @_ </code> will be set to <code> LIST </code> when the code block is executed.</p>

<dt><a name='timeout'></a><a name="timeout_{CODE}_TIME_LIST"
><code> timeout {CODE} TIME LIST </code></a></dt>

<dd>
<p>perl interface to javascript&#39;s <code> setTimeout() </code>. timeout returns a code ref which when called will cancel the timeout. <code> TIME </code> is in milliseconds. <code> @_ </code> will be set to <code> LIST </code> when the code block is executed.</p>

<dt><a name='XUL'></a><a name="XUL_STRING"
><code> XUL STRING </code></a></dt>

<dd>
<p>converts an XML XUL string to <code> XUL::Gui </code> objects. experimental.</p>

<p>this function is provided to facilitate drag and drop of XML based XUL from tutorials for testing. the perl functional syntax for tags should be used in all other cases</p>

<dt><a name='gui'></a><a name="gui_JAVASCRIPT"
><code> gui JAVASCRIPT </code></a></dt>

<dd>
<p>executes <code> JAVASCRIPT </code> in the gui, returns the result</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="data_binding"
>data binding</a></h2>

<blockquote>
<p>passing a reference to a scalar or coderef as a value in an object constructor will create a data binding between the perl variable and its corresponding value in the gui.</p>

<pre class="sh_perl">    use XUL::Gui;

    my $title = &#39;initial title&#39;;

    display Window title =&#62; \$title,
        Button(
            label =&#62; &#39;update title&#39;,
            oncommand =&#62; sub {
                $title = &#39;title updated via data binding&#39;;
            }
        );</pre>

<p>a property on a previously declared object can also be bound by taking a reference to it:</p>

<pre class="sh_perl">    display
        Label( id =&#62; &#39;lbl&#39;, value =&#62; &#39;initial value&#39;),
        Button(
            label =&#62; &#39;update&#39;,
            oncommand =&#62; sub {
                my $label = \ID(lbl)-&#62;value;

                $$label = &#39;new value&#39;;
            }
        )</pre>

<p>this is just an application of the normal bidirectional behavior of gui accessors:</p>

<pre class="sh_perl">    for (ID(lbl)-&#62;value) {
        print &#34;$_\n&#34;;  # gets the current value from the gui

        $_ = &#39;new&#39;;    # sets the value in the gui

        print &#34;$_\n&#34;;  # gets the value from the gui again
    }</pre>
</blockquote>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="pragmatic_blocks"
>pragmatic blocks</a></h2>

<p>the following functions all apply pragmas to their CODE blocks. in some cases, they also take a list. this list will be <code> @_ </code> when the CODE block executes. this is useful for sending in values from the gui, if you don&#39;t want to use a <code> now {block} </code></p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="autobuffering"
>autobuffering</a></h3>

<p>this module will automatically buffer certain actions within event handlers. autobuffering will queue setting of values in the gui until there is a get, the event handler ends, or <code> doevents </code> is called. this eliminates the need for many common applications of the <code> buffered </code> pragma.</p>

<dl>
<dt><a name='flush'></a><a name="flush"
><code> flush </code></a></dt>

<dd>
<p>flush the autobuffer</p>

<dt><a name='buffered'></a><a name="buffered_{CODE}_LIST"
><code> buffered {CODE} LIST </code></a></dt>

<dd>
<p>delays sending all messages to the gui. partially deprecated (see autobuffering)</p>

<pre class="sh_perl">    buffered {
        $ID{$_}-&#62;value = &#39;&#39; for qw/a bunch of labels/
    }; # all labels are cleared at once</pre>

<dt><a name='cached'></a><a name="cached_{CODE}"
><code> cached {CODE} </code></a></dt>

<dd>
<p>turns on caching of gets from the gui</p>

<dt><a name='now'></a><a name="now_{CODE}"
><code> now {CODE} </code></a></dt>

<dd>
<p>execute immediately, from inside a buffered or cached block, without causing a buffer flush or cache reset. buffered and cached will not work inside a now block.</p>

<dt><a name='delay'></a><a name="delay_{CODE}_LIST"
><code> delay {CODE} LIST </code></a></dt>

<dd>
<p>delays executing its CODE until the next gui refresh</p>

<p>useful for triggering widget initialization code that needs to run after the gui objects are rendered. the first element of <code> LIST </code> will be in <code> $_ </code> when the code block is executed</p>

<dt><a name='noevents'></a><a name="noevents_{CODE}_LIST"
><code> noevents {CODE} LIST </code></a></dt>

<dd>
<p>disable event handling</p>

<dt><a name='doevents'></a><a name="doevents"
><code> doevents </code></a></dt>

<dd>
<p>force a gui update cycle before an event handler finishes</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="utility_functions"
>utility functions</a></h2>

<dl>
<dt><a name='mapn'></a><a name="mapn_{CODE}_NUMBER_LIST"
><code> mapn {CODE} NUMBER LIST </code></a></dt>

<dd>
<p>map over n elements at a time in <code> @_ </code> with <code> $_ == $_[0] </code></p>

<pre class="sh_perl">    print mapn {$_ % 2 ? &#34;@_&#34; : &#34; [@_] &#34;} 3 =&#62; 1..20;
    &#62; 1 2 3 [4 5 6] 7 8 9 [10 11 12] 13 14 15 [16 17 18] 19 20</pre>

<dt><a name='zip'></a><a name="zip_LIST_of_ARRAYREF"
><code> zip LIST of ARRAYREF </code></a></dt>

<dd>
<pre class="sh_perl">    %hash = zip [qw/a b c/], [1..3];</pre>

<dt><a name='apply'></a><a name="apply_{CODE}_LIST"
><code> apply {CODE} LIST </code></a></dt>

<dd>
<p>apply a function to a copy of <code> LIST </code> and return the copy</p>

<pre class="sh_perl">    print join &#34;, &#34; =&#62; apply {s/$/ one/} &#34;this&#34;, &#34;and that&#34;;
    &#62; this one, and that one</pre>

<dt><a name='toggle'></a><a name="toggle_TARGET_OPT1_OPT2"
><code> toggle TARGET OPT1 OPT2 </code></a></dt>

<dd>
<p>alternate a variable between two states</p>

<pre class="sh_perl">    toggle $state;          # opts default to 0, 1
    toggle $state =&#62; &#39;red&#39;, &#39;blue&#39;;</pre>

<dt><a name='bitmap'></a><a name="bitmap_WIDTH_HEIGHT_OCTETS"
><code> bitmap WIDTH HEIGHT OCTETS </code></a></dt>

<dd>
<p>returns a binary .bmp bitmap image. <code> OCTETS </code> is a list of <code> BGR </code> values</p>

<pre class="sh_perl">    bitmap 2, 2, qw(255 0 0 255 0 0 255 0 0 255 0 0); # 2px blue square</pre>

<p>for efficiency, rather than a list of <code> OCTETS </code>, you can send in a single array reference. each element of the array reference can either be an array reference of octets, or a packed string <code>pack &#34;C*&#34; =&#62; OCTETS</code></p>

<dt><a name='bitmap2src'></a><a name="bitmap2src_WIDTH_HEIGHT_OCTETS"
><code> bitmap2src WIDTH HEIGHT OCTETS </code></a></dt>

<dd>
<p>returns a packaged bitmap image that can be directly assigned to an image tag&#39;s src attribute. arguments are the same as <code> bitmap() </code></p>

<pre class="sh_perl">    $ID{myimage}-&#62;src = bitmap2src 320, 180, @image_data;</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    # access attributes and properties

        $object-&#62;value = 5;                   # sets the value in the gui
        print $object-&#62;value;                 # gets the value from the gui

    # the attribute is set if it exists, otherwise the property is set

        $object-&#62;_value = 7;                  # sets the property directly

    # method calls

        $object-&#62;focus;                       # void context or
        $object-&#62;appendChild( H2(&#39;title&#39;) );  # any arguments are always methods
        print $object-&#62;someAccessorMethod_;   # append _ to force interpretation
                                              # as a JS method call</pre>

<p>in addition to mirroring all of an object&#39;s existing javascript methods / attributes / and properties to perl (with identical spelling / capitalization), several default methods have been added to all objects</p>

<dl>
<dt><a name='removeChildren'></a><a name="-&#62;removeChildren(_LIST_)"
><code>-&#62;removeChildren( LIST )</code></a></dt>

<dd>
<p>removes the children in <code> LIST </code>, or all children if none are given</p>

<dt><a name='removeItems'></a><a name="-&#62;removeItems(_LIST_)"
><code>-&#62;removeItems( LIST )</code></a></dt>

<dd>
<p>removes the items in <code> LIST </code>, or all items if none are given</p>

<dt><a name='appendChildren'></a><a name="-&#62;appendChildren(_LIST_)"
><code>-&#62;appendChildren( LIST )</code></a></dt>

<dd>
<p>appends the children in <code> LIST </code></p>

<dt><a name='prependChild'></a><a name="-&#62;prependChild(_CHILD,_[INDEX]_)"
><code>-&#62;prependChild( CHILD, [INDEX] )</code></a></dt>

<dd>
<p>inserts <code> CHILD </code> at <code> INDEX </code> (defaults to 0) in the parent&#39;s child list</p>

<dt><a name='replaceChildren'></a><a name="-&#62;replaceChildren(_LIST_)"
><code>-&#62;replaceChildren( LIST )</code></a></dt>

<dd>
<p>removes all children, then appends <code> LIST</code></p>

<dt><a name='appendItems'></a><a name="-&#62;appendItems(_LIST_)"
><code>-&#62;appendItems( LIST )</code></a></dt>

<dd>
<p>append a list of items</p>

<dt><a name='replaceItems'></a><a name="-&#62;replaceItems(_LIST_)"
><code>-&#62;replaceItems( LIST )</code></a></dt>

<dd>
<p>removes all items, then appends <code> LIST</code></p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="widgets"
>widgets</a></h2>

<dl>
<dt><a name="ComboBox"
>ComboBox</a></dt>

<dd>
<p>create dropdown list boxes</p>

<pre class="sh_perl">    items =&#62; [
        [&#39;displayed label&#39; =&#62; &#39;value&#39;],
        &#39;label is same as value&#39;
        ...
    ]
    default =&#62; &#39;item selected if this matches its value&#39;

    also takes: label, oncommand, editable, flex
    styles:     liststyle, popupstyle, itemstyle
    getter:     value</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CAVEATS"
>CAVEATS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>too many changes to count. if anything is broken, please send in a bug report.</p>

<p>some options for display have been reworked from 0.36 to remove double negatives</p>

<p>widgets have changed quite a bit from version 0.36. they are the same under the covers, but the external interface is cleaner. for the most part, the following substitutions are all you need:</p>

<pre class="sh_perl">    $W       --&#62;  $_ or $_{W}
    $A{...}  --&#62;  $_{A}{...} or $_-&#62;attr(...)
    $C[...]  --&#62;  $_{C}[...] or $_-&#62;child(...)
    $M{...}  --&#62;  $_{M}{...} or $_-&#62;can(...)

    attribute &#39;label onclick&#39;  --&#62;  $_-&#62;has(&#39;label onclick&#39;)
    widget {extends ...}       --&#62;  widget {$_-&#62;extends(...)}</pre>

<p>export tags were changed a little bit from 0.36</p>

<p>thread safety should be better than in 0.36</p>

<p>currently it is not possible to open more than one window, hopefully this will be fixed soon</p>

<p>the code that attempts to find firefox may not work in all cases, patches welcome</p>

<p>for the TextBox object, the behaviors of the &#34;value&#34; and &#34;_value&#34; methods are reversed. it works better that way and is more consistent with the behavior of other tags.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Eric Strom, <code>&#60;asg at cpan.org&#62;</code></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>please report any bugs or feature requests to <code> bug-xul-gui at rt.cpan.org </code>, or through the web interface at <a href="http://rt.cpan.org/NoAuth/ReportBug.html?Queue=XUL-Gui" class="podlinkurl"
>http://rt.cpan.org/NoAuth/ReportBug.html?Queue=XUL-Gui</a>. I will be notified, and then you&#39;ll automatically be notified of progress on your bug as I make changes.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACKNOWLEDGMENTS"
>ACKNOWLEDGMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>the mozilla development team</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_&#38;_LICENSE"
>COPYRIGHT &#38; LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>copyright 2009-2010 Eric Strom.</p>

<p>this program is free software; you can redistribute it and/or modify it under the terms of either: the GNU General Public License as published by the Free Software Foundation; or the Artistic License.</p>

<p>see <a href="http://dev.perl.org/licenses/" class="podlinkurl"
>http://dev.perl.org/licenses/</a> for more information.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78071 Uploads, 24685 Distributions
105889 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 21 16:26:04 2012 GMT (0.207641124725342) @cpansearch1 -->
 </body>
</html>
