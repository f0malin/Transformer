<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>File::Tail - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","File-Tail",3]);
    _gaq.push(["_setCustomVar",5,"Release","File-Tail-0.99.3",3]);
    _gaq.push(["_setCustomVar",3,"Module","File::Tail",3]);
    _gaq.push(["_setCustomVar",1,"Author","MGRABNAR",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?File::Tail">permalink</a></div>
  <a href="/~mgrabnar/">Matija Grabnar</a> &gt;
  <a href="/~mgrabnar/File-Tail-0.99.3/">File-Tail-0.99.3</a> &gt;
  File::Tail
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/c8de6c765b95f54cfcef6b494dfe86cf?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/M/MG/MGRABNAR/File-Tail-0.99.3.tar.gz">File-Tail-0.99.3.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=File%3A%3ATail;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~MGRABNAR/File-Tail-0.99.3/Tail.pm">Annotate this POD
(1)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Tie%3A%3AFile">Tie::File</a><br>
<a href="/perldoc?IO%3A%3ASelect">IO::Select</a><br>
<a href="/perldoc?IO%3A%3ASocket">IO::Socket</a><br>
<a href="/perldoc?Time%3A%3AHiRes">Time::HiRes</a><br>
<a href="/perldoc?IO%3A%3AHandle">IO::Handle</a><br>
<a href="/perldoc?Net%3A%3AIRC">Net::IRC</a><br>
<a href="/perldoc?IPC%3A%3AOpen3">IPC::Open3</a><br>
<a href="/perldoc?IO%3A%3AFile">IO::File</a><br>
<a href="/perldoc?File%3A%3Astat">File::stat</a><br>
<a href="/perldoc?Date%3A%3AManip">Date::Manip</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=File%3A%3ATail">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 9</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 6</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=File-Tail">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.99.3 &nbsp;
<span class="noprint">
  <a href="/src/MGRABNAR/File-Tail-0.99.3/Tail.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#CONSTRUCTOR'>CONSTRUCTOR</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#new_([_ARGS_])'>new ([ ARGS ])</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#read'>read</a>
    <li class='indexItem indexItem2'><a href='#select'>select</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#TO_BE_DONE'>TO BE DONE</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>File::Tail - Perl extension for reading from continously updated files</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use File::Tail;
  $file=File::Tail-&#62;new(&#34;/some/log/file&#34;);
  while (defined($line=$file-&#62;read)) {
      print &#34;$line&#34;;
  }

  use File::Tail;
  $file=File::Tail-&#62;new(name=&#62;$name, maxinterval=&#62;300, adjustafter=&#62;7);
  while (defined($line=$file-&#62;read)) {
      print &#34;$line&#34;;
  }</pre>

<p>OR, you could use tie (additional parameters can be passed with the name, or can be set using $ref):</p>

<pre class="sh_perl">    use File::Tail;
    my $ref=tie *FH,&#34;File::Tail&#34;,(name=&#62;$name);
    while (&#60;FH&#62;) {
        print &#34;$_&#34;;
    }</pre>

<p>Note that the above script will never exit. If there is nothing being written to the file, it will simply block.</p>

<p>You can find more synopsii in the file logwatch, which is included in the distribution.</p>

<p>Note: Select functionality was added in version 0.9, and it required some reworking of all routines. ***PLEASE*** let me know if you see anything strange happening.</p>

<p>You can find two way of using select in the file select_demo which is included in the ditribution.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The primary purpose of File::Tail is reading and analysing log files while they are being written, which is especialy usefull if you are monitoring the logging process with a tool like Tobias Oetiker&#39;s MRTG.</p>

<p>The module tries very hard NOT to &#34;busy-wait&#34; on a file that has little traffic. Any time it reads new data from the file, it counts the number of new lines, and divides that number by the time that passed since data were last written to the file before that. That is considered the average time before new data will be written. When there is no new data to read, <code>File::Tail</code> sleeps for that number of seconds. Thereafter, the waiting time is recomputed dynamicaly. Note that <code>File::Tail</code> never sleeps for more than the number of seconds set by <code>maxinterval</code>.</p>

<p>If the file does not get altered for a while, <code>File::Tail</code> gets suspicious and startschecking if the file was truncated, or moved and recreated. If anything like that had happened, <code>File::Tail</code> will quietly reopen the file, and continue reading. The only way to affect what happens on reopen is by setting the reset_tail parameter (see below). The effect of this is that the scripts need not be aware when the logfiles were rotated, they will just quietly work on.</p>

<p>Note that the sleep and time used are from Time::HiRes, so this module should do the right thing even if the time to sleep is less than one second.</p>

<p>The logwatch script (also included) demonstrates several ways of calling the methods.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTOR"
>CONSTRUCTOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="new_([_ARGS_])"
>new ([ ARGS ])</a></h2>

<p>Creates a <code>File::Tail</code>. If it has only one paramter, it is assumed to be the filename. If the open fails, the module performs a croak. I am currently looking for a way to set $! and return undef.</p>

<p>You can pass several parameters to new:</p>

<dl>
<dt><a name="name"
>name</a></dt>

<dd>
<p>This is the name of the file to open. The file will be opened for reading. This must be a regular file, not a pipe or a terminal (i.e. it must be seekable).</p>

<dt><a name="maxinterval"
>maxinterval</a></dt>

<dd>
<p>The maximum number of seconds (real number) that will be spent sleeping. Default is 60, meaning <code>File::Tail</code> will never spend more than sixty seconds without checking the file.</p>

<dt><a name="interval"
>interval</a></dt>

<dd>
<p>The initial number of seconds (real number) that will be spent sleeping, before the file is first checked. Default is ten seconds, meaning <code>File::Tail</code> will sleep for 10 seconds and then determine, how many new lines have appeared in the file.</p>

<dt><a name="adjustafter"
>adjustafter</a></dt>

<dd>
<p>The number of <code>times</code> <code>File::Tail</code> waits for the current interval, before adjusting the interval upwards. The default is 10.</p>

<dt><a name="resetafter"
>resetafter</a></dt>

<dd>
<p>The number of seconds after last change when <code>File::Tail</code> decides the file may have been closed and reopened. The default is adjustafter*maxinterval.</p>

<dt><a name="maxbuf"
>maxbuf</a></dt>

<dd>
<p>The maximum size of the internal buffer. When File::Tail suddenly found an enormous ammount of information in the file (for instance if the retry parameters were set to very infrequent checking and the file was rotated), File::Tail sometimes slurped way too much file into memory. This sets the maximum size of File::Tail&#39;s buffer.</p>

<p>Default value is 16384 (bytes).</p>

<p>A large internal buffer may result in worse performance (as well as increased memory usage), since File::Tail will have to do more work processing the internal buffer.</p>

<dt><a name="nowait"
>nowait</a></dt>

<dd>
<p>Does not block on read, but returns an empty string if there is nothing to read. DO NOT USE THIS unless you know what you are doing. If you are using it in a loop, you probably DON&#39;T know what you are doing. If you want to read tails from multiple files, use select.</p>

<dt><a name="ignore_nonexistant"
>ignore_nonexistant</a></dt>

<dd>
<pre class="sh_perl">    Do not complain if the file doesn&#39;t exist when it is first 
opened or when it is to be reopened. (File may be reopened after 
resetafter seconds have passed since last data was found.)</pre>

<dt><a name="tail"
>tail</a></dt>

<dd>
<pre class="sh_perl">    When first started, read and return C&#60;n&#62; lines from the file. 
If C&#60;n&#62; is zero, start at the end of file. If C&#60;n&#62; is negative, 
return the whole file.

    Default is C&#60;0&#62;.</pre>

<dt><a name="reset_tail"
>reset_tail</a></dt>

<dd>
<pre class="sh_perl">    Same as tail, but applies after reset. (i.e. after the
file has been automaticaly closed and reopened). Defaults to
C&#60;-1&#62;, i.e. does not skip any information present in the
file when it first checks it.

   Why would you want it otherwise? I&#39;ve seen files which
have been cycled like this:

   grep -v lastmonth log &#62;newlog 
   mv log archive/lastmonth 
   mv newlog log 
   kill -HUP logger </pre>

<p>Obviously, if this happens and you have reset_tail set to c&#60;-1&#62;, you will suddenly get a whole bunch of lines - lines you already saw. So in this case, reset_tail should probably be set to a small positive number or even <code>0</code>.</p>

<dt><a name="name_changes"
>name_changes</a></dt>

<dd>
<p>Some logging systems change the name of the file they are writing to, sometimes to include a date, sometimes a sequence number, sometimes other, even more bizarre changes.</p>

<p>Instead of trying to implement various clever detection methods, File::Tail will call the code reference defined in name_changes. The code reference should return the string which is the new name of the file to try opening.</p>

<p>Note that if the file does not exist, File::Tail will report a fatal error (unless ignore_nonexistant has also been specified).</p>

<dt><a name="debug"
>debug</a></dt>

<dd>
<p>Set to nonzero if you want to see more about the inner workings of File::Tail. Otherwise not useful.</p>

<dt><a name="errmode"
>errmode</a></dt>

<dd>
<p>Modeled after the methods from Net:Telnet, here you decide how the errors should be handled. The parameter can be a code reference which is called with the error string as a parameter, an array with a code reference as the first parameter and other parameters to be passed to handler subroutine, or one of the words:</p>

<p>return - ignore any error (just put error message in errmsg). warn - output the error message but continue die - display error message and exit</p>

<p>Default is die.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="read"
>read</a></h2>

<p><code>read</code> returns one line from the input file. If there are no lines ready, it blocks until there are.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="select"
>select</a></h2>

<p><code>select</code> is intended to enable the programmer to simoultaneously wait for input on normal filehandles and File::Tail filehandles. Of course, you may use it to simply read from more than one File::Tail filehandle at a time.</p>

<p>Basicaly, you call File::Tail::select just as you would normal select, with fields for rbits, wbits and ebits, as well as a timeout, however, you can tack any number of File::Tail objects (not File::Tail filehandles!) to the end.</p>

<p>Usage example:</p>

<pre class="sh_perl"> foreach (@ARGV) {
     push(@files,File::Tail-&#62;new(name=&#62;&#34;$_&#34;,debug=&#62;$debug));
 }
 while (1) {
   ($nfound,$timeleft,@pending)=
             File::Tail::select(undef,undef,undef,$timeout,@files);
   unless ($nfound) {
     # timeout - do something else here, if you need to
   } else {
     foreach (@pending) {
        print $_-&#62;{&#34;input&#34;}.&#34; (&#34;.localtime(time).&#34;) &#34;.$_-&#62;read;
   }
 }

 #
 # There is a more elaborate example in select_demo in the distribution.
 #</pre>

<p>When you do this, File::Tail&#39;s select emulates normal select, with two exceptions:</p>

<p>a) it will return if there is input on any of the parameters (i.e. normal filehandles) _or_ File::Tails.</p>

<p>b) In addition to <code>($nfound, $timeleft)</code>, the return array will also contain a list of File::Tail objects which are ready for reading. <code>$nfound</code> will contain the correct number of filehandles to be read (i.e. both normal and File::Tails).</p>

<p>Once select returns, when you want to determine which File::Tail objects have input ready, you can either use the list of objects select returned, or you can check each individual object with $object-&#62;predict. This returns the ammount of time (in fractional seconds) after which the handle expects input. If it returns 0, there is input waiting. There is no guarantee that there will be input waiting after the returned number of seconds has passed. However, File::Tail won&#39;t do any I/O on the file until that time has passed. Note that the value of $timeleft may or may not be correct - that depends on the underlying operating system (and it&#39;s select), so you&#39;re better off NOT relying on it.</p>

<p>Also note, if you are determining which files are ready for input by calling each individual predict, the <code>$nfound</code> value may be invalid, because one or more of File::Tail object may have become ready between the time select has returned and the time when you checked it.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TO_BE_DONE"
>TO BE DONE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Planned for 1.0: Using $/ instead of \n to separate &#34;lines&#34; (which should make it possible to read wtmp type files). Except that I discovered I have no need for that enhancement If you do, feel free to send me the patches and I&#39;ll apply them - if I feel they don&#39;t add too much processing time.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Matija Grabnar, matija.grabnar@arnes.si</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perl(1), tail (1), MRTG (<a href="http://ee-staff.ethz.ch/~oetiker/webtools/mrtg/mrtg.html" class="podlinkurl"
>http://ee-staff.ethz.ch/~oetiker/webtools/mrtg/mrtg.html</a>)</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78272 Uploads, 24723 Distributions
106001 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 19:33:55 2012 GMT (0.0830368995666504) @cpansearch1 -->
 </body>
</html>
