<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Inline::CPP - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Inline-CPP",3]);
    _gaq.push(["_setCustomVar",5,"Release","Inline-CPP-0.38",3]);
    _gaq.push(["_setCustomVar",3,"Module","Inline::CPP",3]);
    _gaq.push(["_setCustomVar",1,"Author","DAVIDO",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Inline::CPP">permalink</a></div>
  <a href="/~davido/">David J. Oswald</a> &gt;
  <a href="/~davido/Inline-CPP-0.38/">Inline-CPP-0.38</a> &gt;
  Inline::CPP
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/107367e63538420fd194b97d22d2c9a0?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DA/DAVIDO/Inline-CPP-0.38.tar.gz">Inline-CPP-0.38.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Inline%3A%3ACPP;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DAVIDO/Inline-CPP-0.38/lib/Inline/CPP.pod">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Inline%3A%3AC">Inline::C</a><br>
<a href="/perldoc?Win32%3A%3AAPI">Win32::API</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Module%3A%3ABuild">Module::Build</a><br>
<a href="/perldoc?Parse%3A%3ARecDescent">Parse::RecDescent</a><br>
<a href="/perldoc?Scalar%3A%3AUtil">Scalar::Util</a><br>
<a href="/perldoc?File%3A%3AFind%3A%3ARule">File::Find::Rule</a><br>
<a href="/perldoc?Math%3A%3ABigFloat">Math::BigFloat</a><br>
<a href="/perldoc?Tk%3A%3AZinc">Tk::Zinc</a><br>
<a href="/perldoc?HTTP%3A%3ADaemon">HTTP::Daemon</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Inline%3A%3ACPP">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Inline-CPP">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.38 &nbsp;
<span class="noprint">
  <a href="/src/DAVIDO/Inline-CPP-0.38/CPP.pm">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~davido/Inline-CPP/lib/Inline/CPP.pod">Inline-CPP-0.38_004</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#Choosing_a_C++_Compiler'>Choosing a C++ Compiler</a>
  <li class='indexItem indexItem1'><a href='#Using_Inline::CPP'>Using Inline::CPP</a>
  <li class='indexItem indexItem1'><a href='#C++_Configuration_Options'>C++ Configuration Options</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#ALTLIBS'>ALTLIBS</a>
    <li class='indexItem indexItem2'><a href='#AUTO_INCLUDE'>AUTO_INCLUDE</a>
    <li class='indexItem indexItem2'><a href='#BOOT'>BOOT</a>
    <li class='indexItem indexItem2'><a href='#CC'>CC</a>
    <li class='indexItem indexItem2'><a href='#CCFLAGS'>CCFLAGS</a>
    <li class='indexItem indexItem2'><a href='#FILTERS'>FILTERS</a>
    <li class='indexItem indexItem2'><a href='#INC'>INC</a>
    <li class='indexItem indexItem2'><a href='#LD'>LD</a>
    <li class='indexItem indexItem2'><a href='#LDDLFLAGS'>LDDLFLAGS</a>
    <li class='indexItem indexItem2'><a href='#LIBS'>LIBS</a>
    <li class='indexItem indexItem2'><a href='#MAKE'>MAKE</a>
    <li class='indexItem indexItem2'><a href='#MYEXTLIB'>MYEXTLIB</a>
    <li class='indexItem indexItem2'><a href='#PREFIX'>PREFIX</a>
    <li class='indexItem indexItem2'><a href='#PRESERVE_ELLIPSIS'>PRESERVE_ELLIPSIS</a>
    <li class='indexItem indexItem2'><a href='#STD_IOSTREAM'>STD_IOSTREAM</a>
    <li class='indexItem indexItem2'><a href='#STRUCTS'>STRUCTS</a>
    <li class='indexItem indexItem2'><a href='#TYPEMAPS'>TYPEMAPS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#C++-Perl_Bindings'>C++-Perl Bindings</a>
  <li class='indexItem indexItem1'><a href='#&#60;iostream&#62;,_Standard_Headers,_Namespaces,_and_Portability_Solutions'>&#60;iostream&#62;, Standard Headers, Namespaces, and Portability Solutions</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Example_1_-_Farmer_Bob'>Example 1 - Farmer Bob</a>
    <li class='indexItem indexItem2'><a href='#Example_2_-_Plane_and_Simple'>Example 2 - Plane and Simple</a>
    <li class='indexItem indexItem2'><a href='#Example_3_-_The_Ellipsis_Abridged'>Example 3 - The Ellipsis Abridged</a>
    <li class='indexItem indexItem2'><a href='#Example_4_-_Stacks_and_Queues'>Example 4 - Stacks and Queues</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Minimum_Perl_version_requirements'>Minimum Perl version requirements</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#BUGS_AND_DEFICIENCIES'>BUGS AND DEFICIENCIES</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#LICENSE_AND_COPYRIGHT'>LICENSE AND COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Inline::CPP - Write Perl subroutines and classes in C++.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">   use Inline CPP;

   print &#34;9 + 16 = &#34;, add(9, 16), &#34;\n&#34;;
   print &#34;9 - 16 = &#34;, subtract(9, 16), &#34;\n&#34;;

   __END__
   __CPP__

   int add(int x, int y) {
      return x + y;
   }

   int subtract(int x, int y) {
      return x - y;
   }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <code>Inline::CPP</code> module allows you to put C++ source code directly &#34;inline&#34; in a Perl script or module. You code classes or functions in C++, and you can use them as if they were written in Perl.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Choosing_a_C++_Compiler"
>Choosing a C++ Compiler <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Inline::CPP just parses your C++ code and creates bindings to it. Like Inline::C, you will need a suitable compiler the first time you run the script. Choosing a C++ compiler can prove difficult, because Perl is written in C, not C++.</p>

<p>Here&#39;s the rule: use any C++ compiler that&#39;s compatible with the compiler which built <code>perl</code>. For instance, if <code>perl</code> was built with <code>gcc</code>, use <code>g++</code>. If you&#39;re on a Sun or an IRIX box and the system C compiler <code>cc</code> built <code>perl</code>, then use the system C++ compiler, <code>CC</code>.</p>

<p>Some compilers actually compile both C and C++ with the same compiler. Microsoft&#39;s <code>cl.exe</code> is one such compiler -- you pass it the &#60;-TP&#62; flag to convince it that you want C++ mode.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Using_Inline::CPP"
>Using Inline::CPP <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Inline::CPP is very similar to Inline::C. It uses a grammar to parse your C++ code, and binds to functions or classes which are recognized. If a function is recognized, it will be available from Perl space. If the function&#39;s signature is not recognized, it will not be available from Perl space, but will be available from other functions in C++.</p>

<p>For more information about the grammar used to parse C++ code, see the section called &#34;Grammar&#34;.</p>

<p>The following example shows how C++ snippets map into the Perl namespace:</p>

<p>Example 1:</p>

<pre class="sh_perl">   use Inline CPP =&#62; &#60;&#60;&#39;END&#39;;

   using namespace std;

   int doodle() { }

   class Foo {
     public:
       Foo();
       ~Foo();

       int get_data() { return data; }
       void set_data(int a) { data = a; }
     private:
       int data;
   };

   Foo::Foo() { cout &#60;&#60; &#34;creating a Foo()&#34; &#60;&#60; endl; }
   Foo::~Foo() { cout &#60;&#60; &#34;deleting a Foo()&#34; &#60;&#60; endl; }

   END</pre>

<p>After running the code above, Perl&#39;s namespace would look similar to if following code had been run:</p>

<pre class="sh_perl">   sub main::doodle { }

   package main::Foo;

   sub new { print &#34;creating a Foo()\n&#34;; bless {}, shift }
   sub DESTROY { print &#34;deleting a Foo()\n&#34; }

   sub get_data { my $o=shift; $o-&#62;{data} }
   sub set_data { my $o=shift; $o-&#62;{data} = shift }</pre>

<p>The difference, of course, is that in the latter, Perl does the work. In the Inline::CPP example, all function calls get sent off to your C++ code. That means that things like this won&#39;t work:</p>

<pre class="sh_perl">   my $obj = new Foo;
   $obj-&#62;{extrafield} = 10;</pre>

<p>It doesn&#39;t work because <code>$obj</code> is not a blessed hash. It&#39;s a blessed reference to a C++ object (and anyway, C++ wouldn&#39;t let you do that either, since extrafield wasn&#39;t defined).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="C++_Configuration_Options"
>C++ Configuration Options <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>For information on how to specify Inline configuration options, see <a href="/perldoc?Inline" class="podlinkpod"
>Inline</a>. This section describes each of the configuration options available for C. Most of the options correspond either the MakeMaker or XS options of the same name. See <a href="/perldoc?ExtUtils%3A%3AMakeMaker" class="podlinkpod"
>ExtUtils::MakeMaker</a> and <a href="/perldoc?perlxs" class="podlinkpod"
>perlxs</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ALTLIBS"
>ALTLIBS</a></h2>

<p>Adds a new entry to the end of the list of alternative libraries to bind with. MakeMaker will search through this list and use the first entry where all the libraries are found.</p>

<pre class="sh_perl">   use Inline Config =&#62; ALTLIBS =&#62; &#39;-L/my/other/lib -lfoo&#39;;</pre>

<p>See also the LIBS config option, which appends to the last entry in the list.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="AUTO_INCLUDE"
>AUTO_INCLUDE</a></h2>

<p>Specifies extra statements to be automatically included. They will be added on to the defaults. A newline char will automatically be added.</p>

<pre class="sh_perl">   use Inline Config =&#62; AUTO_INCLUDE =&#62; &#39;#include &#34;something.h&#34;&#39;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="BOOT"
>BOOT</a></h2>

<p>Specifies code to be run when your code is loaded. May not contain any blank lines. See <a href="/perldoc?perlxs" class="podlinkpod"
>perlxs</a> for more information.</p>

<pre class="sh_perl">   use Inline Config =&#62; BOOT =&#62; &#39;foo();&#39;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CC"
>CC</a></h2>

<p>Specifies which compiler to use.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CCFLAGS"
>CCFLAGS</a></h2>

<p>Specifies extra compiler flags. Corresponds to the MakeMaker option.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="FILTERS"
>FILTERS</a></h2>

<p>Specifies one (or more, in an array ref) filter which is to be applied to the code just prior to parsing. The filters are executed one after another, each operating on the output of the previous one. You can pass in a code reference or the name of a prepackaged filter.</p>

<pre class="sh_perl">   use Inline Config =&#62; FILTERS =&#62; [Strip_POD =&#62; \&#38;myfilter];</pre>

<p>The filter may do anything. The code is passed as the first argument, and it returns the filtered code.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="INC"
>INC</a></h2>

<p>Specifies extra include directories. Corresponds to the MakeMaker parameter.</p>

<pre class="sh_perl">   use Inline Config =&#62; INC =&#62; &#39;-I/my/path&#39;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="LD"
>LD</a></h2>

<p>Specifies the linker to use.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="LDDLFLAGS"
>LDDLFLAGS</a></h2>

<p>Specifies which linker flags to use.</p>

<p>NOTE: These flags will completely override the existing flags, instead of just adding to them. So if you need to use those too, you must respecify them here.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="LIBS"
>LIBS</a></h2>

<p>Specifies external libraries that should be linked into your code. Corresponds to the MakeMaker parameter.</p>

<pre class="sh_perl">   use Inline Config =&#62; LIBS =&#62; &#39;-L/your/path -lyourlib&#39;;</pre>

<p>Unlike the LIBS configuration parameter used in Inline::C, successive calls to LIBS append to the previous calls. For example,</p>

<pre class="sh_perl">   use Inline Config =&#62; LIBS =&#62; &#39;-L/my/path&#39;, LIBS =&#62; &#39;-lyourlib&#39;;</pre>

<p>will work correctly. If you want to add a new element to the list of possible libraries to link with, use the Inline::CPP configuration ALTLIBS.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="MAKE"
>MAKE</a></h2>

<p>Specifies the name of the &#39;make&#39; utility to use.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="MYEXTLIB"
>MYEXTLIB</a></h2>

<p>Specifies a user compiled object that should be linked in. Corresponds to the MakeMaker parameter.</p>

<pre class="sh_perl">   use Inline Config =&#62; MYEXTLIB =&#62; &#39;/your/path/something.o&#39;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="PREFIX"
>PREFIX</a></h2>

<p>Specifies a prefix that will automatically be stripped from C++ functions when they are bound to Perl. Less useful than in C, because C++ mangles its function names to facilitate function overloading.</p>

<pre class="sh_perl">   use Inline Config =&#62; PREFIX =&#62; &#39;ZLIB_&#39;;</pre>

<p>This only affects C++ function names, not C++ class names or methods.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="PRESERVE_ELLIPSIS"
>PRESERVE_ELLIPSIS</a></h2>

<p>By default, Inline::CPP replaces <code>...</code> in bound functions with three spaces, since the arguments are always passed on the Perl Stack, not on the C stack. This is usually desired, since it allows functions with no fixed arguments (most compilers require at least one fixed argument).</p>

<pre class="sh_perl">   use Inline Config =&#62; PRESERVE_ELLIPSIS =&#62; 1;
or
   use Inline Config =&#62; ENABLE =&#62; PRESERVE_ELLIPSIS;</pre>

<p>For an example of why PRESERVE_ELLIPSIS is normally not needed, see the examples section, below.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="STD_IOSTREAM"
>STD_IOSTREAM</a></h2>

<p>By default, Inline::CPP includes the standard iostream header at the top of your code. Inline::CPP will try to make the proper selection between <code>iostream.h</code> (for older compilers) and <code>iostream</code> (for newer &#34;Standard compliant&#34; compilers).</p>

<p>This option assures that it include <code>iostream</code>, which is the ANSI-compliant version of the header. For most compilers the use of this configuration option should no longer be necessary. It is still included to maintain backward compatibility with code that used to need it.</p>

<pre class="sh_perl">   use Inline CPP =&#62; Config =&#62; ENABLE =&#62; STD_IOSTREAM;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="STRUCTS"
>STRUCTS</a></h2>

<p>Specifies whether to bind C structs into Perl using Inline::Struct. NOTE: Support for this option is experimental. Inline::CPP already binds to structs defined in your code. Structs and classes are treated as the same construct, except that a struct&#39;s initial scope is public, not private. Inline::Struct provides autogenerated get/set methods, an overloaded constructor, and several other features not available in Inline::CPP.</p>

<p>You can invoke STRUCTS in several ways:</p>

<pre class="sh_perl">   use Inline Config =&#62; STRUCTS =&#62; &#39;Foo&#39;;
or
   use Inline Config =&#62; STRUCTS =&#62; [&#39;Bar&#39;, &#39;Baz&#39;];</pre>

<p>Binds the named structs to Perl. Emits warnings if a struct was requested but could not be bound for some reason.</p>

<pre class="sh_perl">   use Inline Config =&#62; ENABLE =&#62; &#39;STRUCTS&#39;;
or
   use Inline Config =&#62; STRUCTS =&#62; 1;</pre>

<p>Enables binding structs to Perl. All structs which can be bound, will. This parameter overrides all requests for particular structs.</p>

<pre class="sh_perl">   use Inline Config =&#62; DISABLE =&#62; &#39;STRUCTS&#39;;
or
   use Inline Config =&#62; STRUCTS =&#62; 0;</pre>

<p>Disables binding structs to Perl. Overrides any other settings.</p>

<p>See <a href="/perldoc?Inline%3A%3AStruct" class="podlinkpod"
>Inline::Struct</a> for more details about how <code>Inline::Struct</code> binds C structs to Perl.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="TYPEMAPS"
>TYPEMAPS</a></h2>

<p>Specifies extra typemap files to use. These types will modify the behaviour of C++ parsing. Corresponds to the MakeMaker parameter.</p>

<pre class="sh_perl">   use Inline Config =&#62; TYPEMAPS =&#62; &#39;/your/path/typemap&#39;;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="C++-Perl_Bindings"
>C++-Perl Bindings <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This section describes how the <code>Perl</code> variables get mapped to <code>C++</code> variables and back again.</p>

<p>Perl uses a stack to pass arguments back and forth to subroutines. When a sub is called, it pops off all its arguments from the stack; when it&#39;s done, it pushes its return values back onto the stack.</p>

<p>XS (Perl&#39;s language for creating C or C++ extensions for Perl) uses &#34;typemaps&#34; to turn SVs into C types and back again. This is done through various XS macro calls, casts, and the Perl API. XS also allows you to define your own mappings.</p>

<p><code>Inline::CPP</code> uses a much simpler approach. It parses the system&#39;s typemap files and only binds to functions with supported types. You can tell <code>Inline::CPP</code> about custom typemap files too.</p>

<p>If you have very complicated data structures in either C++ or Perl, you should just pass them as an SV* and do the conversion yourself in your C++ function.</p>

<p>In C++, a struct is a class whose default scope is public, not private. Inline::CPP binds to structs with this in mind -- get/set methods are not yet auto-generated (although they are scheduled to land in an upcoming release).</p>

<p>If you have a C struct, you can use Inline::Struct to allow Perl complete access to the internals of the struct. You can create and modify structs from inside Perl, as well as pass structs into C++ functions and return them from functions. Please note that Inline::Struct does not understand any C++ features, so constructors and member functions are not supported. See <a href="/perldoc?Inline%3A%3AStruct" class="podlinkpod"
>Inline::Struct</a> for more details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="&#60;iostream&#62;,_Standard_Headers,_Namespaces,_and_Portability_Solutions"
>&#60;iostream&#62;, Standard Headers, Namespaces, and Portability Solutions <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>As mentioned earlier, Inline::CPP automatically includes &#60;iostream&#62;, or &#60;iostream.h&#62;, depending on the preference of the target compiler. This distinction illustrates a potential problem when trying to write portable code in C++. Legacy C++ (pre-ANSI-Standard) used headers named, for example, &#60;iostream.h&#62;. As legacy C++ didn&#39;t fully support namespaces, these standard tools were not segregated into a separate namespace.</p>

<p>ANSI Standard C++ changed that. Headers were renamed without the &#39;.h&#39; suffix, and standard tools were placed in the &#39;<code>std</code>&#39; namespace. The <code>using namespace</code> construct was also added to facilitate working with namespaces.</p>

<p>So pre-Standard (Legacy) C++ code might look like this:</p>

<pre class="sh_perl">   #include &#60;iostream.h&#62;
   int main() {
       cout &#60;&#60; &#34;Hello world.\n&#34;;
       return 0;
   }</pre>

<p>Modern &#34;ANSI Standard C++&#34; compilers would require code like this:</p>

<pre class="sh_perl">   #include &#60;iostream&#62;
   using namespace std;
   int main() {
       cout &#60;&#60; &#34;Hello world.\n&#34;;
       return 0;
   }</pre>

<p>... or ...</p>

<pre class="sh_perl">   #include &#60;iostream&#62;
   int main() {
       std::cout &#60;&#60; &#34;Hello world.\n&#34;;
       return 0;
   }</pre>

<p>... or even ...</p>

<pre class="sh_perl">   #include &#60;iostream&#62;
   int main() {
       using std::cout;
       cout &#60;&#60; &#34;Hello world.\n&#34;;
       return 0;
   }</pre>

<p>Obviously the first snippet is going to be completely incompabible with the second, third or fourth snippets. This is no problem for a C++ developer who knows his target compiler. But Perl runs just about everywhere. If similar portability is a design goal, Inline::CPP helps by providing two <code>#define</code> constants that may be checked to ascertain which style of headers are being used. The constants are:</p>

<pre class="sh_perl">   __INLINE_CPP_STANDARD_HEADERS
   __INLINE_CPP_NAMESPACE_STD</pre>

<p><code>__INLINE_CPP_STANDARD_HEADERS</code> will be defined if the target compiler accepts ANSI Standard headers, such as &#60;iostream&#62;. <code>__INLINE_CPP_NAMESPACE_STD</code> will be defined if the target compiler supports namespaces. Realistically the two are synonymous; ANSI Standard C++ uses namespaces, places standard library tools in the <code>std</code> namespace, and invokes headers with the modern (no &#39;.h&#39; suffix) naming convention. So if one is defined they both should be.</p>

<p>They can be used as follows:</p>

<pre class="sh_perl">    use Inline CPP =&#62; &#39;DATA&#39;;

    greet();

    __DATA__
    __CPP__

    #ifdef __INLINE_CPP_STANDARD_HEADERS
    #include &#60;string&#62;
    #else
    #include &#60;string.h&#62;
    #endif

    #ifdef __INLINE_CPP_NAMESPACE_STD
    using namespace std;
    #endif

    void greet() {
        string mygreeting = &#34;Hello world!\n&#34;;
        cout &#60;&#60; mygreeting;
    }</pre>

<p>You may decide that you don&#39;t care about maintaining portability with compilers that are a decade (or more) old. But if you do care (maybe you&#39;re basing a CPAN module on Inline::CPP), use these constant definitions as a tool in building a widely portable solution.</p>

<p>If you wish, you may <code>#undef</code> either of those constants. The constants are defined before any <code>AUTO_INCLUDE</code>s -- even &#60;iostream&#62;. Consequently, you may even list <code>#undef __INLINE_CPP_....</code> within an <code>AUTO_INCLUDE</code> configuration directive. I&#39;m not sure why it would be necessary, but could be useful in testing.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Here are some examples.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Example_1_-_Farmer_Bob"
>Example 1 - Farmer Bob</a></h2>

<p>This example illustrates how to use a simple class (<code>Farmer</code>) from Perl. One of the new features in Inline::CPP is binding to classes with inline method definitions:</p>

<pre class="sh_perl">   use Inline CPP;

   my $farmer = new Farmer(&#34;Ingy&#34;, 42);
   my $slavedriver = 1;
   while($farmer-&#62;how_tired &#60; 420) {
     $farmer-&#62;do_chores($slavedriver);
     $slavedriver &#60;&#60;= 1;
   }

   print &#34;Wow! The farmer worked &#34;, $farmer-&#62;how_long, &#34; hours!\n&#34;;

   __END__
   __CPP__

   class Farmer {
   public:
     Farmer(char *name, int age);
     ~Farmer();

     int how_tired() { return tiredness; }
     int how_long() { return howlong; }
     void do_chores(int howlong);

   private:
     char *name;
     int age;
     int tiredness;
     int howlong;
   };

   Farmer::Farmer(char *name, int age) {
     this-&#62;name = strdup(name);
     this-&#62;age = age;
     tiredness = 0;
     howlong = 0;
   }

   Farmer::~Farmer() {
     free(name);
   }

   void Farmer::do_chores(int hl) {
     howlong += hl;
     tiredness += (age * hl);
   }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Example_2_-_Plane_and_Simple"
>Example 2 - Plane and Simple</a></h2>

<p>This example demonstrates some new features of Inline::CPP: support for inheritance and abstract classes. The defined methods of the abstract class <code>Object</code> are bound to Perl, but there is no constructor or destructor, meaning you cannot instantiate an <code>Object</code>.</p>

<p>The <code>Airplane</code> is a fully-bound class which can be created and manipulated from Perl.</p>

<pre class="sh_perl">   use Inline CPP;

   my $plane = new Airplane;
   $plane-&#62;print;
   if ($plane-&#62;isa(&#34;Object&#34;)) { print &#34;Plane is an Object!\n&#34;; }
   unless ($plane-&#62;can(&#34;fly&#34;)) { print &#34;This plane sucks!\n&#34;; }

   __END__
   __CPP__

   using namespace std;

   /* Abstract class (interface) */
   class Object {
   public:
     virtual void print() { cout &#60;&#60; &#34;Object (&#34; &#60;&#60; this &#60;&#60; &#34;)&#34; &#60;&#60; endl; }
     virtual void info() = 0;
     virtual bool isa(char *klass) = 0;
     virtual bool can(char *method) = 0;
   };

   class Airplane : public Object {
   public:
     Airplane() {}
     ~Airplane() {}

     virtual void info() { print(); }
     virtual bool isa(char *klass) { return strcmp(klass, &#34;Object&#34;)==0; }
     virtual bool can(char *method) {
       bool yes = false;
       yes |= strcmp(method, &#34;print&#34;)==0;
       yes |= strcmp(method, &#34;info&#34;)==0;
       yes |= strcmp(method, &#34;isa&#34;)==0;
       yes |= strcmp(method, &#34;can&#34;)==0;
       return yes;
     }
   };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Example_3_-_The_Ellipsis_Abridged"
>Example 3 - The Ellipsis Abridged</a></h2>

<p>One of the big advantages of Perl over C or C++ is the ability to pass an arbitrary number of arguments to a subroutine. You can do it in C, but it&#39;s messy and difficult to get it right. All of this mess is necessary because C doesn&#39;t give the programmer access to the stack. Perl, on the other hand, gives you access to everything.</p>

<p>Here&#39;s a useful function written in Perl that is relatively slow:</p>

<pre class="sh_perl">   sub average {
      my $average = 0;
      for (my $i=0; $i&#60;@_; $i++) {
         $average *= $i;
         $average += $_[$i];
         $average /= $i + 1;
      }
      return $average;
   }</pre>

<p>Here&#39;s the same function written in C:</p>

<pre class="sh_perl">   double average() {
      Inline_Stack_Vars;
      double avg = 0.0;
      for (int i=0; i&#60;Inline_Stack_Items; i++) {
         avg *= i;
         avg += SvNV(Inline_Stack_Item(i));
         avg /= i + 1;
      }
      return avg;
   }</pre>

<p>Here&#39;s a benchmark program that tests which is faster:</p>

<pre class="sh_perl">   use Inline CPP;
   my @numbers = map { rand } (1 .. 10000);
   my ($a, $stop);
   $stop = 200;
   if (@ARGV) {
      $a = avg(@numbers) while $stop--;
   }
   else {
      $a = average(@numbers) while $stop--;
   }
   print &#34;The average of 10000 random numbers is: &#34;, $a, &#34;\n&#34;;

   sub average {
       my $average = 0;
       for (my $i=0; $i&#60;@_; $i++) {
           $average *= $i;
           $average += $_[$i];
           $average /= $i + 1;
       }
       return $average;
   }

   __END__
   __CPP__

   double avg(...) {
       Inline_Stack_Vars;
       double avg = 0.0;
       for (int i=0; i&#60;items; i++) {
           avg *= i;
           avg += SvNV(ST(i));
           avg /= i + 1;
       }
       return avg;
   }</pre>

<p>The perl sub runs in 14.18 seconds, an average of 0.0709s per call. The C function runs in 1.52 seconds, an average of 0.0076s per call. Mind you, those both include the time taken to initialize the array with random numbers. And by varying the number of elements in the array and the number of repetitions of the function, we can change this number a lot.</p>

<p>What&#39;s the point? Of <b>course</b> C or C++ is faster than Perl. Well..., actually, that wasn&#39;t really the point; that was an aside. Look at the function declaration:</p>

<pre class="sh_perl">   double avg(...)</pre>

<p>Why didn&#39;t we need to use varargs macros to get at the arguments? Why didn&#39;t the compiler complain that there were no required arguments? Because Inline::C++ actually compiled this:</p>

<pre class="sh_perl">   double avg(   )</pre>

<p>When it bound to the function, it noticed the ellipsis and decided to get rid of it. Any function bound to Perl that has an ellipsis in it will have its arguments passed via the Perl stack, not the C stack. That means if you write a function like this:</p>

<pre class="sh_perl">   void myprintf(char *format, ...);</pre>

<p>then you&#39;d better be reading things from the Perl stack. If you aren&#39;t, then specify the PRESERVE_ELLIPSIS option in your script. That will leave the ellipsis in the code for the compiler to whine about. :)</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Example_4_-_Stacks_and_Queues"
>Example 4 - Stacks and Queues</a></h2>

<p>Everyone who learns C++ writes a stack and queue class sooner or later. I might as well try it from Inline. But why reinvent the wheel? Perl has a perfectly good Array type, which can easily implement both a Queue and a Stack.</p>

<p>This example implements a Queue and a Stack class, and shows off just a few more new features of Inline::CPP: default values to arguments,</p>

<pre class="sh_perl">   use Inline CPP;

   my $q = new Queue;
   $q-&#62;q(50);
   $q-&#62;q(&#34;Where am I?&#34;);
   $q-&#62;q(&#34;In a queue.&#34;);
   print &#34;There are &#34;, $q-&#62;size, &#34; items in the queue\n&#34;;
   while($q-&#62;size) {
     print &#34;About to dequeue:  &#34;, $q-&#62;peek, &#34;\n&#34;;
     print &#34;Actually dequeued: &#34;, $q-&#62;dq, &#34;\n&#34;;
   }

   my $s = new Stack;
   $s-&#62;push(42);
   $s-&#62;push(&#34;What?&#34;);
   print &#34;There are &#34;, $s-&#62;size, &#34; items on the stack\n&#34;;
   while($s-&#62;size) {
     print &#34;About to pop:    &#34;, $s-&#62;peek, &#34;\n&#34;;
     print &#34;Actually popped: &#34;, $s-&#62;pop, &#34;\n&#34;;
   }

   __END__
   __CPP__

   class Queue {
   public:
     Queue(int sz=0) { q = newAV(); if (sz) av_extend(q, sz-1); }
     ~Queue() { av_undef(q); }

     int size() {return av_len(q) + 1; }

     int q(SV *item) { av_push(q, SvREFCNT_inc(item)); return av_len(q)+1; }
     SV *dq() { return av_shift(q); }
     SV *peek() { return size() ? SvREFCNT_inc(*av_fetch(q,0,0)): &#38;PL_sv_undef;}

   private:
     AV *q;
   };

   class Stack {
   public:
     Stack(int sz=0) { s = newAV(); if (sz) av_extend(s, sz-1); }
     ~Stack() { av_undef(s); }

     int size() { return av_len(s) + 1; }

     int push(SV *i) { av_push(s, SvREFCNT_inc(i)); return av_len(s)+1; }
     SV *pop() { return av_pop(s); }
     SV *peek() { return size() ? SvREFCNT_inc(*av_fetch(s,size()-1,0)) : &#38;PL_sv_undef; }

   private:
     AV *s;
   };</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Minimum_Perl_version_requirements"
>Minimum Perl version requirements <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>As <a href="/perldoc?Inline" class="podlinkpod"
>Inline</a> currently requires Perl 5.6.0 or later. Since <a href="/~davido/Inline-CPP-0.38/lib/Inline/CPP.pod" class="podlinkpod"
>Inline::CPP</a> depends on <a href="/perldoc?Inline" class="podlinkpod"
>Inline</a>, Perl 5.6.0 is also required for <a href="/~davido/Inline-CPP-0.38/lib/Inline/CPP.pod" class="podlinkpod"
>Inline::CPP</a>. It&#39;s hard to imagine anyone still using a Perl older than 5.6.0 wanting to interface with C++, but if you&#39;re in that camp, you&#39;ll need to roll back <a href="/perldoc?Inline" class="podlinkpod"
>Inline</a> and <a href="/~davido/Inline-CPP-0.38/lib/Inline/CPP.pod" class="podlinkpod"
>Inline::CPP</a> to older versions through the magic of backpan. <a href="/~davido/Inline-CPP-0.38/lib/Inline/CPP.pod" class="podlinkpod"
>Inline::CPP</a> version 0.25 was still compatible with Perl 5.005_03. Review the Changes file from the <a href="/perldoc?Inline" class="podlinkpod"
>Inline</a> distribution to decide which <a href="/perldoc?Inline" class="podlinkpod"
>Inline</a> version is appropriate for your pre-5.6.0 Perl.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>For general information about how <code>Inline</code> binds code to Perl, see <a href="/perldoc?Inline" class="podlinkpod"
>Inline</a>.</p>

<p>For information on using C with Perl, see <a href="/perldoc?Inline%3A%3AC" class="podlinkpod"
>Inline::C</a> and <a href="/perldoc?Inline%3A%3AC-Cookbook" class="podlinkpod"
>Inline::C-Cookbook</a>. For <code>WMTYEWTK</code>, see <a href="/perldoc?perlguts" class="podlinkpod"
>perlguts</a>, <a href="/perldoc?perlxs" class="podlinkpod"
>perlxs</a>, <a href="/perldoc?perlxstut" class="podlinkpod"
>perlxstut</a>, <a href="/perldoc?perlapi" class="podlinkpod"
>perlapi</a>, and <a href="/perldoc?perlcall" class="podlinkpod"
>perlcall</a>.</p>

<p>For information on using C and C++ structs with Perl, see <a href="/perldoc?Inline%3A%3AStruct" class="podlinkpod"
>Inline::Struct</a>.</p>

<p>User and development discussion for Inline modules, including <a href="/~davido/Inline-CPP-0.38/lib/Inline/CPP.pod" class="podlinkpod"
>Inline::CPP</a> occurs on the inline.perl.org mailing list. See <a href="http://lists.perl.org/list/inline.html" class="podlinkurl"
>http://lists.perl.org/list/inline.html</a> to learn how to subscribe.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS_AND_DEFICIENCIES"
>BUGS AND DEFICIENCIES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There are bound to be other bugs in code this uncivilized. If you find one, please file a bug report.</p>

<p>When reporting a bug, please do the following:</p>

<pre class="sh_perl"> - If possible, create a brief stand-alone snippet of code that
   demonstrates the issue.
 - Use rt.cpan.org&#39;s bug reporting facility:
   L&#60;<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Inline-CPP" class="podlinkurl"
>https://rt.cpan.org/Public/Dist/Display.html?Name=Inline-CPP</a>&#62;
 - Patches are always welcome, as are tests that tickle a newfound bug.</pre>

<p>...or...</p>

<pre class="sh_perl"> - Put &#34;use Inline REPORTBUG;&#34; at the top of your code, or
   use the command line option &#34;perl -MInline=REPORTBUG ...&#34;.
 - Run your code.
 - Follow the printed instructions.</pre>

<p><b>Get involved!</b> Module development is being tracked on a github repository: <a href="https://github.com/daoswald/Inline-CPP" class="podlinkurl"
>https://github.com/daoswald/Inline-CPP</a></p>

<p>The master branch will always hold the latest stable CPAN release. (Stable releases have version numbers in the following format: &#39;x.xx&#39;.)</p>

<p>The dev branch will hold a combination of minor commits and CPAN &#34;Developer&#34; releases (these will have a version number formatted as: &#39;x.xx_xxx&#39;).</p>

<p>Other &#39;topic&#39; branches will come and go as needed.</p>

<p>Most discussion relating to this module (user or developer) occurs on the Inline mailing list, inline.perl.org. See <a href="http://lists.perl.org/list/inline.html" class="podlinkurl"
>http://lists.perl.org/list/inline.html</a> for details on subscribing.</p>

<p>Here are some things to watch out for:</p>

<dl>
<dt><a name='1'></a><a name="1_The_grammar_used_for_parsing_C++_is_still_quite_simple,_and_does_not_allow_several_features_of_C++:"
>1 The grammar used for parsing C++ is still quite simple, and does not allow several features of C++:</a></dt>

<dd>
<dl>
<dt><a 
>a Templates: You may use existing template libraries in your code, but <a href="/~davido/Inline-CPP-0.38/lib/Inline/CPP.pod" class="podlinkpod"
>Inline::CPP</a> won&#39;t know how to parse and bind template definitions. Keep the templates encapsulated away from the interface that will be exposed to Perl.</a></dt>

<dd>
<dt><a name='b'></a><a name="b_Operator_overloading"
>b Operator overloading</a></dt>

<dd>
<dt><a name='c'></a><a name="c_Function_overloading"
>c Function overloading</a></dt>

<dd>
<dt><a name='d'></a><a name="d_Multiple_inheritance_doesn&#39;t_work_right_(yet)."
>d Multiple inheritance doesn&#39;t work right (yet).</a></dt>

<dd>
<dt><a name='e'></a><a name="e_Multi-dimensional_arrays_as_member_data_aren&#39;t_implemented_(yet)."
>e Multi-dimensional arrays as member data aren&#39;t implemented (yet).</a></dt>

<dd>
<dt><a name='f'></a><a name="f_Declaring_a_paramater_type_of_void_isn&#39;t_implemented_(yet)._Just_use_int_myfunc();_instead_of_int_myfunc(void);."
>f Declaring a paramater type of void isn&#39;t implemented (yet). Just use <code>int myfunc();</code> instead of <code>int myfunc(void);</code>.</a></dt>
</dl>

<p>Other grammar problems will probably be noticed quickly.</p>

<dt><a name="2"
>2</a></dt>

<dd>
<p>In order of relative importance, improvements planned in the near future are:</p>

<dl>
<dt><a 
>a Work through issues relating to successful installation and use on as many platforms as possible. The goal is to achieve a smoke-test &#34;pass&#34; rate similar to Inline::C.</a></dt>

<dd>
<p>The current &#34;smoke test&#34; pass rate seems to be around 95%. I&#39;m always working on chipping away at that last 5%. If you&#39;re one of the unfortunate 5% get in touch with me so we can try to figure out what the problem is.</p>

<dt><a name='b'></a><a name="b_Improvements_to_the_test_suite."
>b Improvements to the test suite.</a></dt>

<dd>
<dt><a name='c'></a><a name="c_Address_other_bugs_and_deficiences_mentioned_above."
>c Address other bugs and deficiences mentioned above.</a></dt>

<dd>
<dt><a name='d'></a><a name="d_Binding_to_unions."
>d Binding to unions.</a></dt>
</dl>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Neil Watkiss &#60;NEILW@cpan.org&#62;</p>

<p>David Oswald &#60;DAVIDO@cpan.org&#62; is the current maintainer. David Oswald&#39;s Inline::CPP githug repo is: <a href="https://github.com/daoswald/Inline-CPP" class="podlinkurl"
>https://github.com/daoswald/Inline-CPP</a></p>

<p>Brian Ingerson &#60;INGY@cpan.org&#62; is the author of <code>Inline</code>, <code>Inline::C</code> and <code>Inline::CPR</code>. He is known in the innermost Inline circles as &#34;Batman&#34;. ;)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE_AND_COPYRIGHT"
>LICENSE AND COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2000 - 2003 Neil Watkiss. Copyright (c) 2011 - 2012 David Oswald.</p>

<p>All Rights Reserved. This module is free software. It may be used, redistributed and/or modified under the same terms as Perl itself.</p>

<p>See <a href="http://www.perl.com/perl/misc/Artistic.html" class="podlinkurl"
>http://www.perl.com/perl/misc/Artistic.html</a></p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78275 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 01:07:03 2012 GMT (0.0780789852142334) @cpansearch1 -->
 </body>
</html>
