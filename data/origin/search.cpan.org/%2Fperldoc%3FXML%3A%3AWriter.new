<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>XML::Writer - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","XML-Writer",3]);
    _gaq.push(["_setCustomVar",5,"Release","XML-Writer-0.615",3]);
    _gaq.push(["_setCustomVar",3,"Module","XML::Writer",3]);
    _gaq.push(["_setCustomVar",1,"Author","JOSEPHW",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?XML::Writer">permalink</a></div>
  <a href="/~josephw/">Joseph Walton</a> &gt;
  <a href="/~josephw/XML-Writer-0.615/">XML-Writer-0.615</a> &gt;
  XML::Writer
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/f4e5c40404cb7a21fc15a2d3f2388439?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/J/JO/JOSEPHW/XML-Writer-0.615.tar.gz">XML-Writer-0.615.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=XML%3A%3AWriter;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~JOSEPHW/XML-Writer-0.615/Writer.pm">Annotate this POD
(3)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?XML%3A%3ASimple">XML::Simple</a><br>
<a href="/perldoc?XML%3A%3AParser">XML::Parser</a><br>
<a href="/perldoc?XML%3A%3ATwig">XML::Twig</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?IO%3A%3AFile">IO::File</a><br>
<a href="/perldoc?XML%3A%3ALibXML">XML::LibXML</a><br>
<a href="/perldoc?XML%3A%3AXPath">XML::XPath</a><br>
<a href="/perldoc?XML%3A%3ADOM">XML::DOM</a><br>
<a href="/perldoc?XML%3A%3APastor">XML::Pastor</a><br>
<a href="/perldoc?IO%3A%3AString">IO::String</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=XML%3A%3AWriter">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=XML-Writer">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.615 &nbsp;
<span class="noprint">
  <a href="/src/JOSEPHW/XML-Writer-0.615/Writer.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Writing_XML'>Writing XML</a>
    <li class='indexItem indexItem2'><a href='#Querying_XML'>Querying XML</a>
    <li class='indexItem indexItem2'><a href='#Additional_Namespace_Support'>Additional Namespace Support</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#ERROR_REPORTING'>ERROR REPORTING</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>XML::Writer - Perl extension for writing XML documents.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use XML::Writer;
  use IO::File;

  my $output = IO::File-&#62;new(&#34;&#62;output.xml&#34;);

  my $writer = XML::Writer-&#62;new(OUTPUT =&#62; $output);
  $writer-&#62;startTag(&#34;greeting&#34;,
                    &#34;class&#34; =&#62; &#34;simple&#34;);
  $writer-&#62;characters(&#34;Hello, world!&#34;);
  $writer-&#62;endTag(&#34;greeting&#34;);
  $writer-&#62;end();
  $output-&#62;close();</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>XML::Writer is a helper module for Perl programs that write an XML document. The module handles all escaping for attribute values and character data and constructs different types of markup, such as tags, comments, and processing instructions.</p>

<p>By default, the module performs several well-formedness checks to catch errors during output. This behaviour can be extremely useful during development and debugging, but it can be turned off for production-grade code.</p>

<p>The module can operate either in regular mode in or Namespace processing mode. In Namespace mode, the module will generate Namespace Declarations itself, and will perform additional checks on the output.</p>

<p>Additional support is available for a simplified data mode with no mixed content: newlines are automatically inserted around elements and elements can optionally be indented based as their nesting level.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Writing_XML"
>Writing XML</a></h2>

<dl>
<dt><a name='new'></a><a name="new([$params])"
>new([$params])</a></dt>

<dd>
<p>Create a new XML::Writer object:</p>

<pre class="sh_perl">  my $writer = XML::Writer-&#62;new(OUTPUT =&#62; $output, NEWLINES =&#62; 1);</pre>

<p>Arguments are an anonymous hash array of parameters:</p>

<dl>
<dt><a name="OUTPUT"
>OUTPUT</a></dt>

<dd>
<p>An object blessed into IO::Handle or one of its subclasses (such as IO::File), or a reference to a string, or any blessed object that has a print() method; if this parameter is not present, the module will write to standard output. If a string reference is passed, it will capture the generated XML (as a string; to get bytes use the <code>Encode</code> module).</p>

<dt><a name="NAMESPACES"
>NAMESPACES</a></dt>

<dd>
<p>A true (1) or false (0, undef) value; if this parameter is present and its value is true, then the module will accept two-member array reference in the place of element and attribute names, as in the following example:</p>

<pre class="sh_perl">  my $rdfns = &#34;<a href="http://www.w3.org/1999/02/22-rdf-syntax-ns" class="podlinkurl"
>http://www.w3.org/1999/02/22-rdf-syntax-ns</a>#&#34;;
  my $writer = XML::Writer-&#62;new(NAMESPACES =&#62; 1);
  $writer-&#62;startTag([$rdfns, &#34;Description&#34;]);</pre>

<p>The first member of the array is a namespace URI, and the second part is the local part of a qualified name. The module will automatically generate appropriate namespace declarations and will replace the URI part with a prefix.</p>

<dt><a name="PREFIX_MAP"
>PREFIX_MAP</a></dt>

<dd>
<p>A hash reference; if this parameter is present and the module is performing namespace processing (see the NAMESPACES parameter), then the module will use this hash to look up preferred prefixes for namespace URIs:</p>

<pre class="sh_perl">  my $rdfns = &#34;<a href="http://www.w3.org/1999/02/22-rdf-syntax-ns" class="podlinkurl"
>http://www.w3.org/1999/02/22-rdf-syntax-ns</a>#&#34;;
  my $writer = XML::Writer-&#62;new(NAMESPACES =&#62; 1,
                               PREFIX_MAP =&#62; {$rdfns =&#62; &#39;rdf&#39;});</pre>

<p>The keys in the hash table are namespace URIs, and the values are the associated prefixes. If there is not a preferred prefix for the namespace URI in this hash, then the module will automatically generate prefixes of the form &#34;__NS1&#34;, &#34;__NS2&#34;, etc.</p>

<p>To set the default namespace, use &#39;&#39; for the prefix.</p>

<dt><a name="FORCED_NS_DECLS"
>FORCED_NS_DECLS</a></dt>

<dd>
<p>An array reference; if this parameter is present, the document element will contain declarations for all the given namespace URIs. Declaring namespaces in advance is particularly useful when a large number of elements from a namespace are siblings, but don&#39;t share a direct ancestor from the same namespace.</p>

<dt><a name="NEWLINES"
>NEWLINES</a></dt>

<dd>
<p>A true or false value; if this parameter is present and its value is true, then the module will insert an extra newline before the closing delimiter of start, end, and empty tags to guarantee that the document does not end up as a single, long line. If the parameter is not present, the module will not insert the newlines.</p>

<dt><a name="UNSAFE"
>UNSAFE</a></dt>

<dd>
<p>A true or false value; if this parameter is present and its value is true, then the module will skip most well-formedness error checking. If the parameter is not present, the module will perform the well-formedness error checking by default. Turn off error checking at your own risk!</p>

<dt><a name="DATA_MODE"
>DATA_MODE</a></dt>

<dd>
<p>A true or false value; if this parameter is present and its value is true, then the module will enter a special data mode, inserting newlines automatically around elements and (unless UNSAFE is also specified) reporting an error if any element has both characters and elements as content.</p>

<dt><a name="DATA_INDENT"
>DATA_INDENT</a></dt>

<dd>
<p>A numeric value or white space; if this parameter is present, it represents the indent step for elements in data mode (it will be ignored when not in data mode). If it is white space it will be repeated for each level of indentation.</p>

<dt><a name="ENCODING"
>ENCODING</a></dt>

<dd>
<p>A character encoding; currently this must be one of &#39;utf-8&#39; or &#39;us-ascii&#39;. If present, it will be used for the underlying character encoding and as the default in the XML declaration.</p>

<dt><a name="CHECK_PRINT"
>CHECK_PRINT</a></dt>

<dd>
<p>A true or false value; if this parameter is present and its value is true, all prints to the underlying output will be checked for success. Failures will cause a croak rather than being ignored.</p>
</dd>
</dl>

<dt><a name='end'></a><a name="end()"
>end()</a></dt>

<dd>
<p>Finish creating an XML document. This method will check that the document has exactly one document element, and that all start tags are closed:</p>

<pre class="sh_perl">  $writer-&#62;end();</pre>

<dt><a name='xmlDecl'></a><a name="xmlDecl([$encoding,_$standalone])"
>xmlDecl([$encoding, $standalone])</a></dt>

<dd>
<p>Add an XML declaration to the beginning of an XML document. The version will always be &#34;1.0&#34;. If you provide a non-null encoding or standalone argument, its value will appear in the declaration (any non-null value for standalone except &#39;no&#39; will automatically be converted to &#39;yes&#39;). If not given here, the encoding will be taken from the ENCODING argument. Pass the empty string to suppress this behaviour.</p>

<pre class="sh_perl">  $writer-&#62;xmlDecl(&#34;UTF-8&#34;);</pre>

<dt><a name='doctype'></a><a name="doctype($name,_[$publicId,_$systemId])"
>doctype($name, [$publicId, $systemId])</a></dt>

<dd>
<p>Add a DOCTYPE declaration to an XML document. The declaration must appear before the beginning of the root element. If you provide a publicId, you must provide a systemId as well, but you may provide just a system ID by passing &#39;undef&#39; for the publicId.</p>

<pre class="sh_perl">  $writer-&#62;doctype(&#34;html&#34;);</pre>

<dt><a name='comment'></a><a name="comment($text)"
>comment($text)</a></dt>

<dd>
<p>Add a comment to an XML document. If the comment appears outside the document element (either before the first start tag or after the last end tag), the module will add a carriage return after it to improve readability. In data mode, comments will be treated as empty tags:</p>

<pre class="sh_perl">  $writer-&#62;comment(&#34;This is a comment&#34;);</pre>

<dt><a name='pi'></a><a name="pi($target_[,_$data])"
>pi($target [, $data])</a></dt>

<dd>
<p>Add a processing instruction to an XML document:</p>

<pre class="sh_perl">  $writer-&#62;pi(&#39;xml-stylesheet&#39;, &#39;href=&#34;style.css&#34; type=&#34;text/css&#34;&#39;);</pre>

<p>If the processing instruction appears outside the document element (either before the first start tag or after the last end tag), the module will add a carriage return after it to improve readability.</p>

<p>The $target argument must be a single XML name. If you provide the $data argument, the module will insert its contents following the $target argument, separated by a single space.</p>

<dt><a name='startTag'></a><a name="startTag($name_[,_$aname1_=&#62;_$value1,_...])"
>startTag($name [, $aname1 =&#62; $value1, ...])</a></dt>

<dd>
<p>Add a start tag to an XML document. Any arguments after the element name are assumed to be name/value pairs for attributes: the module will escape all &#39;&#38;&#39;, &#39;&#60;&#39;, &#39;&#62;&#39;, and &#39;&#34;&#39; characters in the attribute values using the predefined XML entities:</p>

<pre class="sh_perl">  $writer-&#62;startTag(&#39;doc&#39;, &#39;version&#39; =&#62; &#39;1.0&#39;,
                           &#39;status&#39; =&#62; &#39;draft&#39;,
                           &#39;topic&#39; =&#62; &#39;AT&#38;T&#39;);</pre>

<p>All start tags must eventually have matching end tags.</p>

<dt><a name='emptyTag'></a><a name="emptyTag($name_[,_$aname1_=&#62;_$value1,_...])"
>emptyTag($name [, $aname1 =&#62; $value1, ...])</a></dt>

<dd>
<p>Add an empty tag to an XML document. Any arguments after the element name are assumed to be name/value pairs for attributes (see startTag() for details):</p>

<pre class="sh_perl">  $writer-&#62;emptyTag(&#39;img&#39;, &#39;src&#39; =&#62; &#39;portrait.jpg&#39;,
                           &#39;alt&#39; =&#62; &#39;Portrait of Emma.&#39;);</pre>

<dt><a name='endTag'></a><a name="endTag([$name])"
>endTag([$name])</a></dt>

<dd>
<p>Add an end tag to an XML document. The end tag must match the closest open start tag, and there must be a matching and properly-nested end tag for every start tag:</p>

<pre class="sh_perl">  $writer-&#62;endTag(&#39;doc&#39;);</pre>

<p>If the $name argument is omitted, then the module will automatically supply the name of the currently open element:</p>

<pre class="sh_perl">  $writer-&#62;startTag(&#39;p&#39;);
  $writer-&#62;endTag();</pre>

<dt><a name='dataElement'></a><a name="dataElement($name,_$data_[,_$aname1_=&#62;_$value1,_...])"
>dataElement($name, $data [, $aname1 =&#62; $value1, ...])</a></dt>

<dd>
<p>Print an entire element containing only character data. This is equivalent to</p>

<pre class="sh_perl">  $writer-&#62;startTag($name [, $aname1 =&#62; $value1, ...]);
  $writer-&#62;characters($data);
  $writer-&#62;endTag($name);</pre>

<dt><a name='characters'></a><a name="characters($data)"
>characters($data)</a></dt>

<dd>
<p>Add character data to an XML document. All &#39;&#60;&#39;, &#39;&#62;&#39;, and &#39;&#38;&#39; characters in the $data argument will automatically be escaped using the predefined XML entities:</p>

<pre class="sh_perl">  $writer-&#62;characters(&#34;Here is the formula: &#34;);
  $writer-&#62;characters(&#34;a &#60; 100 &#38;&#38; a &#62; 5&#34;);</pre>

<p>You may invoke this method only within the document element (i.e. after the first start tag and before the last end tag).</p>

<p>In data mode, you must not use this method to add whitespace between elements.</p>

<dt><a name='raw'></a><a name="raw($data)"
>raw($data)</a></dt>

<dd>
<p>Print data completely unquoted and unchecked to the XML document. For example <code>raw(&#39;&#60;&#39;)</code> will print a literal &#60; character. This necessarily bypasses all well-formedness checking, and is therefore only available in unsafe mode.</p>

<p>This can sometimes be useful for printing entities which are defined for your XML format but the module doesn&#39;t know about, for example &#38;nbsp; for XHTML.</p>

<dt><a name='cdata'></a><a name="cdata($data)"
>cdata($data)</a></dt>

<dd>
<p>As <code>characters()</code> but writes the data quoted in a CDATA section, that is, between &#60;![CDATA[ and ]]&#62;. If the data to be written itself contains ]]&#62;, it will be written as several consecutive CDATA sections.</p>

<dt><a name='cdataElement'></a><a name="cdataElement($name,_$data_[,_$aname1_=&#62;_$value1,_...])"
>cdataElement($name, $data [, $aname1 =&#62; $value1, ...])</a></dt>

<dd>
<p>As <code>dataElement()</code> but the element content is written as one or more CDATA sections (see <code>cdata()</code>).</p>

<dt><a name='setOutput'></a><a name="setOutput($output)"
>setOutput($output)</a></dt>

<dd>
<p>Set the current output destination, as in the OUTPUT parameter for the constructor.</p>

<dt><a name='getOutput'></a><a name="getOutput()"
>getOutput()</a></dt>

<dd>
<p>Return the current output destination, as in the OUTPUT parameter for the constructor.</p>

<dt><a name='setDataMode'></a><a name="setDataMode($mode)"
>setDataMode($mode)</a></dt>

<dd>
<p>Enable or disable data mode, as in the DATA_MODE parameter for the constructor.</p>

<dt><a name='getDataMode'></a><a name="getDataMode()"
>getDataMode()</a></dt>

<dd>
<p>Return the current data mode, as in the DATA_MODE parameter for the constructor.</p>

<dt><a name='setDataIndent'></a><a name="setDataIndent($step)"
>setDataIndent($step)</a></dt>

<dd>
<p>Set the indent step for data mode, as in the DATA_INDENT parameter for the constructor.</p>

<dt><a name='getDataIndent'></a><a name="getDataIndent()"
>getDataIndent()</a></dt>

<dd>
<p>Return the indent step for data mode, as in the DATA_INDENT parameter for the constructor.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Querying_XML"
>Querying XML</a></h2>

<dl>
<dt><a name='in_element'></a><a name="in_element($name)"
>in_element($name)</a></dt>

<dd>
<p>Return a true value if the most recent open element matches $name:</p>

<pre class="sh_perl">  if ($writer-&#62;in_element(&#39;dl&#39;)) {
    $writer-&#62;startTag(&#39;dt&#39;);
  } else {
    $writer-&#62;startTag(&#39;li&#39;);
  }</pre>

<dt><a name='within_element'></a><a name="within_element($name)"
>within_element($name)</a></dt>

<dd>
<p>Return a true value if any open element matches $name:</p>

<pre class="sh_perl">  if ($writer-&#62;within_element(&#39;body&#39;)) {
    $writer-&#62;startTag(&#39;h1&#39;);
  } else {
    $writer-&#62;startTag(&#39;title&#39;);
  }</pre>

<dt><a name='current_element'></a><a name="current_element()"
>current_element()</a></dt>

<dd>
<p>Return the name of the currently open element:</p>

<pre class="sh_perl">  my $name = $writer-&#62;current_element();</pre>

<p>This is the equivalent of</p>

<pre class="sh_perl">  my $name = $writer-&#62;ancestor(0);</pre>

<dt><a name='ancestor'></a><a name="ancestor($n)"
>ancestor($n)</a></dt>

<dd>
<p>Return the name of the nth ancestor, where $n=0 for the current open element.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Additional_Namespace_Support"
>Additional Namespace Support</a></h2>

<p>As of 0.510, these methods may be used while writing a document.</p>

<dl>
<dt><a name='addPrefix'></a><a name="addPrefix($uri,_$prefix)"
>addPrefix($uri, $prefix)</a></dt>

<dd>
<p>Add a preferred mapping between a Namespace URI and a prefix. See also the PREFIX_MAP constructor parameter.</p>

<p>To set the default namespace, omit the $prefix parameter or set it to &#39;&#39;.</p>

<dt><a name='removePrefix'></a><a name="removePrefix($uri)"
>removePrefix($uri)</a></dt>

<dd>
<p>Remove a preferred mapping between a Namespace URI and a prefix.</p>

<dt><a name='forceNSDecl'></a><a name="forceNSDecl($uri)"
>forceNSDecl($uri)</a></dt>

<dd>
<p>Indicate that a namespace declaration for this URI should be included with the next element to be started.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ERROR_REPORTING"
>ERROR REPORTING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>With the default settings, the XML::Writer module can detect several basic XML well-formedness errors:</p>

<ul>
<li>Lack of a (top-level) document element, or multiple document elements.</li>

<li>Unclosed start tags.</li>

<li>Misplaced delimiters in the contents of processing instructions or comments.</li>

<li>Misplaced or duplicate XML declaration(s).</li>

<li>Misplaced or duplicate DOCTYPE declaration(s).</li>

<li>Mismatch between the document type name in the DOCTYPE declaration and the name of the document element.</li>

<li>Mismatched start and end tags.</li>

<li>Attempts to insert character data outside the document element.</li>

<li>Duplicate attributes with the same name.</li>
</ul>

<p>During Namespace processing, the module can detect the following additional errors:</p>

<ul>
<li>Attempts to use PI targets or element or attribute names containing a colon.</li>

<li>Attempts to use attributes with names beginning &#34;xmlns&#34;.</li>
</ul>

<p>To ensure full error detection, a program must also invoke the end method when it has finished writing a document:</p>

<pre class="sh_perl">  $writer-&#62;startTag(&#39;greeting&#39;);
  $writer-&#62;characters(&#34;Hello, world!&#34;);
  $writer-&#62;endTag(&#39;greeting&#39;);
  $writer-&#62;end();</pre>

<p>This error reporting can catch many hidden bugs in Perl programs that create XML documents; however, if necessary, it can be turned off by providing an UNSAFE parameter:</p>

<pre class="sh_perl">  my $writer = XML::Writer-&#62;new(OUTPUT =&#62; $output, UNSAFE =&#62; 1);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>David Megginson &#60;david@megginson.com&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 1999 by Megginson Technologies.</p>

<p>Copyright (c) 2003 Ed Avis &#60;ed@membled.com&#62;</p>

<p>Copyright (c) 2004-2010 Joseph Walton &#60;joe@kafsemo.org&#62;</p>

<p>Redistribution and use in source and compiled forms, with or without modification, are permitted under any circumstances. No warranty.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?XML%3A%3AParser" class="podlinkpod"
>XML::Parser</a></p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78254 Uploads, 24722 Distributions
105996 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 10:25:44 2012 GMT (0.179610013961792) @cpansearch1 -->
 </body>
</html>
