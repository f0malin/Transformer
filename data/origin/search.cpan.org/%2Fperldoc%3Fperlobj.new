<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>perlobj - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","perl",3]);
    _gaq.push(["_setCustomVar",5,"Release","perl-5.14.2",3]);
    _gaq.push(["_setCustomVar",4,"Document","perlobj",3]);
    _gaq.push(["_setCustomVar",1,"Author","FLORA",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?perlobj">permalink</a></div>
  <a href="/~flora/">Florian Ragwitz</a> &gt;
  <a href="/~flora/perl-5.14.2/">perl-5.14.2</a> &gt;
  perlobj
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/fd2bdaaefe41908133793d1ddf38f75d?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/F/FL/FLORA/perl-5.14.2.tar.gz">perl-5.14.2.tar.gz</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~FLORA/perl-5.14.2/pod/perlobj.pod">Annotate this POD
(2)
</a></p>
     <p style="text-align:right"><a href="http://www.perl.org/">Website</a></p>

<div style="float:right">

</div>
</div>
<span class="noprint">
  <a href="/src/FLORA/perl-5.14.2/pod/perlobj.pod">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~abigail/perl/pod/perlobj.pod">perl-5.15.9</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME  </a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#An_Object_is_Simply_a_Reference'>An Object is Simply a Reference    </a>
    <li class='indexItem indexItem2'><a href='#A_Class_is_Simply_a_Package'>A Class is Simply a Package    </a>
    <li class='indexItem indexItem2'><a href='#A_Method_is_Simply_a_Subroutine'>A Method is Simply a Subroutine </a>
    <li class='indexItem indexItem2'><a href='#Method_Invocation'>Method Invocation    </a>
    <li class='indexItem indexItem2'><a href='#Indirect_Object_Syntax'>Indirect Object Syntax   </a>
    <li class='indexItem indexItem2'><a href='#Default_UNIVERSAL_methods'>Default UNIVERSAL methods </a>
    <li class='indexItem indexItem2'><a href='#Destructors'>Destructors  </a>
    <li class='indexItem indexItem2'><a href='#Summary'>Summary</a>
    <li class='indexItem indexItem2'><a href='#Two-Phased_Garbage_Collection'>Two-Phased Garbage Collection      </a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <!--
	INDEX: object
--> <!--
	INDEX: OOP
--> <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perlobj - Perl objects</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>First you need to understand what references are in Perl.
See <a href="/~flora/perl-5.14.2/pod/perlref.pod" class="podlinkpod"
>perlref</a> for that.
Second,
if you still find the following reference work too complicated,
a tutorial on object-oriented programming in Perl can be found in <a href="/~flora/perl-5.14.2/pod/perltoot.pod" class="podlinkpod"
>perltoot</a> and <a href="/~flora/perl-5.14.2/pod/perltooc.pod" class="podlinkpod"
>perltooc</a>.</p>

<p>If you&#39;re still with us,
then here are three very simple definitions that you should find reassuring.</p>

<ol>
<li>An object is simply a reference that happens to know which class it belongs to.</li>

<li>A class is simply a package that happens to provide methods to deal with object references.</li>

<li>A method is simply a subroutine that expects an object reference (or a package name,
for class methods) as the first argument.</li>
</ol>

<p>We&#39;ll cover these points now in more depth.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="An_Object_is_Simply_a_Reference"
>An Object is Simply a Reference <!--
	INDEX: object
--> <!--
	INDEX: bless
--> <!--
	INDEX: constructor
--> <!--
	INDEX: new
--></a></h2>

<p>Unlike say C++,
Perl doesn&#39;t provide any special syntax for constructors.
A constructor is merely a subroutine that returns a reference to something &#34;blessed&#34; into a class,
generally the class that the subroutine is defined in.
Here is a typical constructor:</p>

<pre class="sh_perl">    package Critter;
    sub new { bless {} }</pre>

<p>That word <code>new</code> isn&#39;t special. You could have written a construct this way, too:</p>

<pre class="sh_perl">    package Critter;
    sub spawn { bless {} }</pre>

<p>This might even be preferable, because the C++ programmers won&#39;t be tricked into thinking that <code>new</code> works in Perl as it does in C++. It doesn&#39;t. We recommend that you name your constructors whatever makes sense in the context of the problem you&#39;re solving. For example, constructors in the Tk extension to Perl are named after the widgets they create.</p>

<p>One thing that&#39;s different about Perl constructors compared with those in C++ is that in Perl, they have to allocate their own memory. (The other things is that they don&#39;t automatically call overridden base-class constructors.) The <code>{}</code> allocates an anonymous hash containing no key/value pairs, and returns it The bless() takes that reference and tells the object it references that it&#39;s now a Critter, and returns the reference. This is for convenience, because the referenced object itself knows that it has been blessed, and the reference to it could have been returned directly, like this:</p>

<pre class="sh_perl">    sub new {
        my $self = {};
        bless $self;
        return $self;
    }</pre>

<p>You often see such a thing in more complicated constructors that wish to call methods in the class as part of the construction:</p>

<pre class="sh_perl">    sub new {
        my $self = {};
        bless $self;
        $self-&#62;initialize();
        return $self;
    }</pre>

<p>If you care about inheritance (and you should; see <a href="/~flora/perl-5.14.2/pod/perlmodlib.PL#Modules:_Creation,_Use,_and_Abuse" class="podlinkpod"
>&#34;Modules: Creation, Use, and Abuse&#34; in perlmodlib</a>), then you want to use the two-arg form of bless so that your constructors may be inherited:</p>

<pre class="sh_perl">    sub new {
        my $class = shift;
        my $self = {};
        bless $self, $class;
        $self-&#62;initialize();
        return $self;
    }</pre>

<p>Or if you expect people to call not just <code>CLASS-&#62;new()</code> but also <code>$obj-&#62;new()</code>, then use something like the following. (Note that using this to call new() on an instance does not automatically perform any copying. If you want a shallow or deep copy of an object, you&#39;ll have to specifically allow for that.) The initialize() method used will be of whatever $class we blessed the object into:</p>

<pre class="sh_perl">    sub new {
        my $this = shift;
        my $class = ref($this) || $this;
        my $self = {};
        bless $self, $class;
        $self-&#62;initialize();
        return $self;
    }</pre>

<p>Within the class package, the methods will typically deal with the reference as an ordinary reference. Outside the class package, the reference is generally treated as an opaque value that may be accessed only through the class&#39;s methods.</p>

<p>Although a constructor can in theory re-bless a referenced object currently belonging to another class, this is almost certainly going to get you into trouble. The new class is responsible for all cleanup later. The previous blessing is forgotten, as an object may belong to only one class at a time. (Although of course it&#39;s free to inherit methods from many classes.) If you find yourself having to do this, the parent class is probably misbehaving, though.</p>

<p>A clarification: Perl objects are blessed. References are not. Objects know which package they belong to. References do not. The bless() function uses the reference to find the object. Consider the following example:</p>

<pre class="sh_perl">    $a = {};
    $b = $a;
    bless $a, BLAH;
    print &#34;\$b is a &#34;, ref($b), &#34;\n&#34;;</pre>

<p>This reports $b as being a BLAH, so obviously bless() operated on the object and not on the reference.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="A_Class_is_Simply_a_Package"
>A Class is Simply a Package <!--
	INDEX: class
--> <!--
	INDEX: package
--> <!--
	INDEX: @ISA
--> <!--
	INDEX: inheritance
--></a></h2>

<p>Unlike say C++, Perl doesn&#39;t provide any special syntax for class definitions. You use a package as a class by putting method definitions into the class.</p>

<p>There is a special array within each package called @ISA, which says where else to look for a method if you can&#39;t find it in the current package. This is how Perl implements inheritance. Each element of the @ISA array is just the name of another package that happens to be a class package. The classes are searched for missing methods in depth-first, left-to-right order by default (see <a href="/~flora/perl-5.14.2/ext/mro/mro.pm" class="podlinkpod"
>mro</a> for alternative search order and other in-depth information). The classes accessible through @ISA are known as base classes of the current class.</p>

<p>All classes implicitly inherit from class <code>UNIVERSAL</code> as their last base class. Several commonly used methods are automatically supplied in the UNIVERSAL class; see <a href="#Default_UNIVERSAL_methods" class="podlinkpod"
>&#34;Default UNIVERSAL methods&#34;</a> or <a href="/~flora/perl-5.14.2/lib/UNIVERSAL.pm" class="podlinkpod"
>UNIVERSAL</a> for more details. <!--
	INDEX: UNIVERSAL
--> <!--
	INDEX: base class
--> <!--
	INDEX: class, base
--></p>

<p>If a missing method is found in a base class, it is cached in the current class for efficiency. Changing @ISA or defining new subroutines invalidates the cache and causes Perl to do the lookup again.</p>

<p>If neither the current class, its named base classes, nor the UNIVERSAL class contains the requested method, these three places are searched all over again, this time looking for a method named AUTOLOAD(). If an AUTOLOAD is found, this method is called on behalf of the missing method, setting the package global $AUTOLOAD to be the fully qualified name of the method that was intended to be called. <!--
	INDEX: AUTOLOAD
--></p>

<p>If none of that works, Perl finally gives up and complains.</p>

<p>If you want to stop the AUTOLOAD inheritance say simply <!--
	INDEX: AUTOLOAD
--></p>

<pre class="sh_perl">        sub AUTOLOAD;</pre>

<p>and the call will die using the name of the sub being called.</p>

<p>Perl classes do method inheritance only. Data inheritance is left up to the class itself. By and large, this is not a problem in Perl, because most classes model the attributes of their object using an anonymous hash, which serves as its own little namespace to be carved up by the various classes that might want to do something with the object. The only problem with this is that you can&#39;t sure that you aren&#39;t using a piece of the hash that isn&#39;t already used. A reasonable workaround is to prepend your fieldname in the hash with the package name. <!--
	INDEX: inheritance, method
--> <!--
	INDEX: inheritance, data
--></p>

<pre class="sh_perl">    sub bump {
        my $self = shift;
        $self-&#62;{ __PACKAGE__ . &#34;.count&#34;}++;
    } </pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="A_Method_is_Simply_a_Subroutine"
>A Method is Simply a Subroutine <!--
	INDEX: method
--></a></h2>

<p>Unlike say C++, Perl doesn&#39;t provide any special syntax for method definition. (It does provide a little syntax for method invocation though. More on that later.) A method expects its first argument to be the object (reference) or package (string) it is being invoked on. There are two ways of calling methods, which we&#39;ll call class methods and instance methods.</p>

<p>A class method expects a class name as the first argument. It provides functionality for the class as a whole, not for any individual object belonging to the class. Constructors are often class methods, but see <a href="/~flora/perl-5.14.2/pod/perltoot.pod" class="podlinkpod"
>perltoot</a> and <a href="/~flora/perl-5.14.2/pod/perltooc.pod" class="podlinkpod"
>perltooc</a> for alternatives. Many class methods simply ignore their first argument, because they already know what package they&#39;re in and don&#39;t care what package they were invoked via. (These aren&#39;t necessarily the same, because class methods follow the inheritance tree just like ordinary instance methods.) Another typical use for class methods is to look up an object by name:</p>

<pre class="sh_perl">    sub find {
        my ($class, $name) = @_;
        $objtable{$name};
    }</pre>

<p>An instance method expects an object reference as its first argument. Typically it shifts the first argument into a &#34;self&#34; or &#34;this&#34; variable, and then uses that as an ordinary reference.</p>

<pre class="sh_perl">    sub display {
        my $self = shift;
        my @keys = @_ ? @_ : sort keys %$self;
        foreach $key (@keys) {
            print &#34;\t$key =&#62; $self-&#62;{$key}\n&#34;;
        }
    }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Method_Invocation"
>Method Invocation <!--
	INDEX: invocation
--> <!--
	INDEX: method
--> <!--
	INDEX: arrow
--> <!--
	INDEX: -&#62;
--></a></h2>

<p>For various historical and other reasons, Perl offers two equivalent ways to write a method call. The simpler and more common way is to use the arrow notation:</p>

<pre class="sh_perl">    my $fred = Critter-&#62;find(&#34;Fred&#34;);
    $fred-&#62;display(&#34;Height&#34;, &#34;Weight&#34;);</pre>

<p>You should already be familiar with the use of the <code>-&#62;</code> operator with references. In fact, since <code>$fred</code> above is a reference to an object, you could think of the method call as just another form of dereferencing.</p>

<p>Whatever is on the left side of the arrow, whether a reference or a class name, is passed to the method subroutine as its first argument. So the above code is mostly equivalent to:</p>

<pre class="sh_perl">    my $fred = Critter::find(&#34;Critter&#34;, &#34;Fred&#34;);
    Critter::display($fred, &#34;Height&#34;, &#34;Weight&#34;);</pre>

<p>How does Perl know which package the subroutine is in? By looking at the left side of the arrow, which must be either a package name or a reference to an object, i.e. something that has been blessed to a package. Either way, that&#39;s the package where Perl starts looking. If that package has no subroutine with that name, Perl starts looking for it in any base classes of that package, and so on.</p>

<p>If you need to, you <i>can</i> force Perl to start looking in some other package:</p>

<pre class="sh_perl">    my $barney = MyCritter-&#62;Critter::find(&#34;Barney&#34;);
    $barney-&#62;Critter::display(&#34;Height&#34;, &#34;Weight&#34;);</pre>

<p>Here <code>MyCritter</code> is presumably a subclass of <code>Critter</code> that defines its own versions of find() and display(). We haven&#39;t specified what those methods do, but that doesn&#39;t matter above since we&#39;ve forced Perl to start looking for the subroutines in <code>Critter</code>.</p>

<p>As a special case of the above, you may use the <code>SUPER</code> pseudo-class to tell Perl to start looking for the method in the packages named in the current class&#39;s <code>@ISA</code> list. <!--
	INDEX: SUPER
--></p>

<pre class="sh_perl">    package MyCritter;
    use base &#39;Critter&#39;;    # sets @MyCritter::ISA = (&#39;Critter&#39;);

    sub display { 
        my ($self, @args) = @_;
        $self-&#62;SUPER::display(&#34;Name&#34;, @args);
    }</pre>

<p>It is important to note that <code>SUPER</code> refers to the superclass(es) of the <i>current package</i> and not to the superclass(es) of the object. Also, the <code>SUPER</code> pseudo-class can only currently be used as a modifier to a method name, but not in any of the other ways that class names are normally used, eg: <!--
	INDEX: SUPER
--></p>

<pre class="sh_perl">    something-&#62;SUPER::method(...);      # OK
    SUPER::method(...);                 # WRONG
    SUPER-&#62;method(...);                 # WRONG</pre>

<p>Instead of a class name or an object reference, you can also use any expression that returns either of those on the left side of the arrow. So the following statement is valid:</p>

<pre class="sh_perl">    Critter-&#62;find(&#34;Fred&#34;)-&#62;display(&#34;Height&#34;, &#34;Weight&#34;);</pre>

<p>and so is the following:</p>

<pre class="sh_perl">    my $fred = (reverse &#34;rettirC&#34;)-&#62;find(reverse &#34;derF&#34;);</pre>

<p>The right side of the arrow typically is the method name, but a simple scalar variable containing either the method name or a subroutine reference can also be used.</p>

<p>If the right side of the arrow is a scalar containing a reference to a subroutine, then this is equivalent to calling the referenced subroutine directly with the class name or object on the left side of the arrow as its first argument. No lookup is done and there is no requirement that the subroutine be defined in any package related to the class name or object on the left side of the arrow.</p>

<p>For example, the following calls to $display are equivalent:</p>

<pre class="sh_perl">    my $display = sub { my $self = shift; ... };
    $fred-&#62;$display(&#34;Height&#34;, &#34;Weight&#34;);
    $display-&#62;($fred, &#34;Height&#34;, &#34;Weight&#34;);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Indirect_Object_Syntax"
>Indirect Object Syntax <!--
	INDEX: indirect object syntax
--> <!--
	INDEX: invocation, indirect
--> <!--
	INDEX: indirect
--></a></h2>

<p>The other way to invoke a method is by using the so-called &#34;indirect object&#34; notation. This syntax was available in Perl 4 long before objects were introduced, and is still used with filehandles like this:</p>

<pre class="sh_perl">   print STDERR &#34;help!!!\n&#34;;</pre>

<p>The same syntax can be used to call either object or class methods.</p>

<pre class="sh_perl">   my $fred = find Critter &#34;Fred&#34;;
   display $fred &#34;Height&#34;, &#34;Weight&#34;;</pre>

<p>Notice that there is no comma between the object or class name and the parameters. This is how Perl can tell you want an indirect method call instead of an ordinary subroutine call.</p>

<p>But what if there are no arguments? In that case, Perl must guess what you want. Even worse, it must make that guess <i>at compile time</i>. Usually Perl gets it right, but when it doesn&#39;t you get a function call compiled as a method, or vice versa. This can introduce subtle bugs that are hard to detect.</p>

<p>For example, a call to a method <code>new</code> in indirect notation (as C++ programmers are wont to make) can be miscompiled into a subroutine call if there&#39;s already a <code>new</code> function in scope. You&#39;d end up calling the current package&#39;s <code>new</code> as a subroutine, rather than the desired class&#39;s method. The compiler tries to cheat by remembering bareword <code>require</code>s, but the grief when it messes up just isn&#39;t worth the years of debugging it will take you to track down such subtle bugs.</p>

<p>There is another problem with this syntax: the indirect object is limited to a name, a scalar variable, or a block, because it would have to do too much lookahead otherwise, just like any other postfix dereference in the language. (These are the same quirky rules as are used for the filehandle slot in functions like <code>print</code> and <code>printf</code>.) This can lead to horribly confusing precedence problems, as in these next two lines:</p>

<pre class="sh_perl">    move $obj-&#62;{FIELD};                 # probably wrong!
    move $ary[$i];                      # probably wrong!</pre>

<p>Those actually parse as the very surprising:</p>

<pre class="sh_perl">    $obj-&#62;move-&#62;{FIELD};                # Well, lookee here
    $ary-&#62;move([$i]);                   # Didn&#39;t expect this one, eh?</pre>

<p>Rather than what you might have expected:</p>

<pre class="sh_perl">    $obj-&#62;{FIELD}-&#62;move();              # You should be so lucky.
    $ary[$i]-&#62;move;                     # Yeah, sure.</pre>

<p>To get the correct behavior with indirect object syntax, you would have to use a block around the indirect object:</p>

<pre class="sh_perl">    move {$obj-&#62;{FIELD}};
    move {$ary[$i]};</pre>

<p>Even then, you still have the same potential problem if there happens to be a function named <code>move</code> in the current package. <b>The <code>-&#62;</code> notation suffers from neither of these disturbing ambiguities, so we recommend you use it exclusively.</b> However, you may still end up having to read code using the indirect object notation, so it&#39;s important to be familiar with it.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Default_UNIVERSAL_methods"
>Default UNIVERSAL methods <!--
	INDEX: UNIVERSAL
--></a></h2>

<p>The <code>UNIVERSAL</code> package automatically contains the following methods that are inherited by all other classes:</p>

<dl>
<dt><a name='isa'></a><a name="isa(CLASS)"
>isa(CLASS) <!--
	INDEX: isa
--></a></dt>

<dd>
<p><code>isa</code> returns <i>true</i> if its object is blessed into a subclass of <code>CLASS</code></p>

<dt><a name='DOES'></a><a name="DOES(ROLE)"
>DOES(ROLE) <!--
	INDEX: DOES
--></a></dt>

<dd>
<p><code>DOES</code> returns <i>true</i> if its object claims to perform the role <code>ROLE</code>. By default, this is equivalent to <code>isa</code>.</p>

<dt><a name='can'></a><a name="can(METHOD)"
>can(METHOD) <!--
	INDEX: can
--></a></dt>

<dd>
<p><code>can</code> checks to see if its object has a method called <code>METHOD</code>, if it does then a reference to the sub is returned, if it does not then <code>undef</code> is returned.</p>

<dt><a name='VERSION'></a><a name="VERSION(_[NEED]_)"
>VERSION( [NEED] ) <!--
	INDEX: VERSION
--></a></dt>

<dd>
<p><code>VERSION</code> returns the version number of the class (package). If the NEED argument is given then it will check that the current version (as defined by the $VERSION variable in the given package) not less than NEED; it will die if this is not the case. This method is called automatically by the <code>VERSION</code> form of <code>use</code>.</p>

<pre class="sh_perl">    use Package 1.2 qw(some imported subs);
    # implies:
    Package-&#62;VERSION(1.2);</pre>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Destructors"
>Destructors <!--
	INDEX: destructor
--> <!--
	INDEX: DESTROY
--></a></h2>

<p>When the last reference to an object goes away, the object is automatically destroyed. (This may even be after you exit, if you&#39;ve stored references in global variables.) If you want to capture control just before the object is freed, you may define a DESTROY method in your class. It will automatically be called at the appropriate moment, and you can do any extra cleanup you need to do. Perl passes a reference to the object under destruction as the first (and only) argument. Beware that the reference is a read-only value, and cannot be modified by manipulating <code>$_[0]</code> within the destructor. The object itself (i.e. the thingy the reference points to, namely <code>${$_[0]}</code>, <code>@{$_[0]}</code>, <code>%{$_[0]}</code> etc.) is not similarly constrained.</p>

<p>Since DESTROY methods can be called at unpredictable times, it is important that you localise any global variables that the method may update. In particular, localise <code>$@</code> if you use <code>eval {}</code> and localise <code>$?</code> if you use <code>system</code> or backticks.</p>

<p>If you arrange to re-bless the reference before the destructor returns, perl will again call the DESTROY method for the re-blessed object after the current one returns. This can be used for clean delegation of object destruction, or for ensuring that destructors in the base classes of your choosing get called. Explicitly calling DESTROY is also possible, but is usually never needed.</p>

<p>DESTROY is subject to AUTOLOAD lookup, just like any other method. Hence, if your class has an AUTOLOAD method, but does not need any DESTROY actions, you probably want to provide a DESTROY method anyway, to prevent an expensive call to AUTOLOAD each time an object is freed. As this technique makes empty DESTROY methods common, the implementation is optimised so that a DESTROY method that is an empty or constant subroutine, and hence could have no side effects anyway, is not actually called. <!--
	INDEX: AUTOLOAD
--> <!--
	INDEX: DESTROY
--></p>

<p>Do not confuse the previous discussion with how objects <i>CONTAINED</i> in the current one are destroyed. Such objects will be freed and destroyed automatically when the current object is freed, provided no other references to them exist elsewhere.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Summary"
>Summary</a></h2>

<p>That&#39;s about all there is to it. Now you need just to go off and buy a book about object-oriented design methodology, and bang your forehead with it for the next six months or so.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Two-Phased_Garbage_Collection"
>Two-Phased Garbage Collection <!--
	INDEX: garbage collection
--> <!--
	INDEX: GC
--> <!--
	INDEX: circular reference
--> <!--
	INDEX: reference, circular
--> <!--
	INDEX: DESTROY
--> <!--
	INDEX: destructor
--></a></h2>

<p>For most purposes, Perl uses a fast and simple, reference-based garbage collection system. That means there&#39;s an extra dereference going on at some level, so if you haven&#39;t built your Perl executable using your C compiler&#39;s <code>-O</code> flag, performance will suffer. If you <i>have</i> built Perl with <code>cc -O</code>, then this probably won&#39;t matter.</p>

<p>A more serious concern is that unreachable memory with a non-zero reference count will not normally get freed. Therefore, this is a bad idea:</p>

<pre class="sh_perl">    {
        my $a;
        $a = \$a;
    }</pre>

<p>Even thought $a <i>should</i> go away, it can&#39;t. When building recursive data structures, you&#39;ll have to break the self-reference yourself explicitly if you don&#39;t care to leak. For example, here&#39;s a self-referential node such as one might use in a sophisticated tree structure:</p>

<pre class="sh_perl">    sub new_node {
        my $class = shift;
        my $node  = {};
        $node-&#62;{LEFT} = $node-&#62;{RIGHT} = $node;
        $node-&#62;{DATA} = [ @_ ];
        return bless $node =&#62; $class;
    }</pre>

<p>If you create nodes like that, they (currently) won&#39;t go away unless you break their self reference yourself. (In other words, this is not to be construed as a feature, and you shouldn&#39;t depend on it.)</p>

<p>Almost.</p>

<p>When an interpreter thread finally shuts down (usually when your program exits), then a rather costly but complete mark-and-sweep style of garbage collection is performed, and everything allocated by that thread gets destroyed. This is essential to support Perl as an embedded or a multithreadable language. For example, this program demonstrates Perl&#39;s two-phased garbage collection:</p>

<pre class="sh_perl">    #!/usr/bin/perl
    package Subtle;

    sub new {
        my $test;
        $test = \$test;
        warn &#34;CREATING &#34; . \$test;
        return bless \$test;
    }

    sub DESTROY {
        my $self = shift;
        warn &#34;DESTROYING $self&#34;;
    }

    package main;

    warn &#34;starting program&#34;;
    {
        my $a = Subtle-&#62;new;
        my $b = Subtle-&#62;new;
        $$a = 0;  # break selfref
        warn &#34;leaving block&#34;;
    }

    warn &#34;just exited block&#34;;
    warn &#34;time to die...&#34;;
    exit;</pre>

<p>When run as <em>/foo/test</em>, the following output is produced:</p>

<pre class="sh_perl">    starting program at /foo/test line 18.
    CREATING SCALAR(0x8e5b8) at /foo/test line 7.
    CREATING SCALAR(0x8e57c) at /foo/test line 7.
    leaving block at /foo/test line 23.
    DESTROYING Subtle=SCALAR(0x8e5b8) at /foo/test line 13.
    just exited block at /foo/test line 26.
    time to die... at /foo/test line 27.
    DESTROYING Subtle=SCALAR(0x8e57c) during global destruction.</pre>

<p>Notice that &#34;global destruction&#34; bit there? That&#39;s the thread garbage collector reaching the unreachable.</p>

<p>Objects are always destructed, even when regular refs aren&#39;t. Objects are destructed in a separate pass before ordinary refs just to prevent object destructors from using refs that have been themselves destructed. Plain refs are only garbage-collected if the destruct level is greater than 0. You can test the higher levels of global destruction by setting the PERL_DESTRUCT_LEVEL environment variable, presuming <code>-DDEBUGGING</code> was enabled during perl build time. See <a href="/~flora/perl-5.14.2/pod/perlhacktips.pod#PERL_DESTRUCT_LEVEL" class="podlinkpod"
>&#34;PERL_DESTRUCT_LEVEL&#34; in perlhacktips</a> for more information.</p>

<p>A more complete garbage collection strategy will be implemented at a future date.</p>

<p>In the meantime, the best solution is to create a non-recursive container class that holds a pointer to the self-referential data structure. Define a DESTROY method for the containing object&#39;s class that manually breaks the circularities in the self-referential structure.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A kinder, gentler tutorial on object-oriented programming in Perl can be found in <a href="/~flora/perl-5.14.2/pod/perltoot.pod" class="podlinkpod"
>perltoot</a>, <a href="/~flora/perl-5.14.2/pod/perlboot.pod" class="podlinkpod"
>perlboot</a> and <a href="/~flora/perl-5.14.2/pod/perltooc.pod" class="podlinkpod"
>perltooc</a>. You should also check out <a href="/~flora/perl-5.14.2/pod/perlbot.pod" class="podlinkpod"
>perlbot</a> for other object tricks, traps, and tips, as well as <a href="/~flora/perl-5.14.2/pod/perlmodlib.PL" class="podlinkpod"
>perlmodlib</a> for some style guides on constructing both modules and classes.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78231 Uploads, 24723 Distributions
106029 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Document']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Document']);
    });
  });
</script>
<!-- Thu Apr 26 22:41:16 2012 GMT (0.15071702003479) @cpansearch1 -->
 </body>
</html>
