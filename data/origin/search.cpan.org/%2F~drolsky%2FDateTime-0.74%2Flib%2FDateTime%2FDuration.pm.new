<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>DateTime::Duration - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","DateTime",3]);
    _gaq.push(["_setCustomVar",5,"Release","DateTime-0.74",3]);
    _gaq.push(["_setCustomVar",3,"Module","DateTime::Duration",3]);
    _gaq.push(["_setCustomVar",1,"Author","DROLSKY",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?DateTime::Duration">permalink</a></div>
  <a href="/~drolsky/">Dave Rolsky</a> &gt;
  <a href="/~drolsky/DateTime-0.74/">DateTime-0.74</a> &gt;
  DateTime::Duration
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/1401e7f176d9e13ad2a9380ecd1f18f6?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DR/DROLSKY/DateTime-0.74.tar.gz">DateTime-0.74.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=DateTime%3A%3ADuration;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DROLSKY/DateTime-0.74/lib/DateTime/Duration.pm">Annotate this POD
(5)
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 5</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 9</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=DateTime">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.74 &nbsp;
<span class="noprint">
  <a href="/src/DROLSKY/DateTime-0.74/lib/DateTime/Duration.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Overloading'>Overloading</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SUPPORT'>SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>DateTime::Duration - Duration objects for date math</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>version 0.74</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use DateTime::Duration;

  $dur = DateTime::Duration-&#62;new(
      years       =&#62; 3,
      months      =&#62; 5,
      weeks       =&#62; 1,
      days        =&#62; 1,
      hours       =&#62; 6,
      minutes     =&#62; 15,
      seconds     =&#62; 45,
      nanoseconds =&#62; 12000
  );

  my ( $days, $hours, $seconds ) = $dur-&#62;in_units(&#39;days&#39;, &#39;hours&#39;, &#39;seconds&#39;);

  # Human-readable accessors, always positive, but consider using
  # DateTime::Format::Duration instead
  $dur-&#62;years;
  $dur-&#62;months;
  $dur-&#62;weeks;
  $dur-&#62;days;
  $dur-&#62;hours;
  $dur-&#62;minutes;
  $dur-&#62;seconds;
  $dur-&#62;nanoseconds;

  $dur-&#62;is_wrap_mode
  $dur-&#62;is_limit_mode
  $dur-&#62;is_preserve_mode

  print $dur-&#62;end_of_month_mode;

  # Multiply all values by -1
  my $opposite = $dur-&#62;inverse;

  my $bigger  = $dur1 + $dur2;
  my $smaller = $dur1 - $dur2; # the result could be negative
  my $bigger  = $dur1 * 3;

  my $base_dt = DateTime-&#62;new( year =&#62; 2000 );
  my @sorted =
      sort { DateTime::Duration-&#62;compare( $a, $b, $base_dt ) } @durations;

  if ( $dur-&#62;is_positive ) { ... }
  if ( $dur-&#62;is_zero )     { ... }
  if ( $dur-&#62;is_negative ) { ... }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This is a simple class for representing duration objects. These objects are used whenever you do date math with DateTime.pm.</p>

<p>See the <a href="/~drolsky/DateTime-0.74/lib/DateTime.pm#How_Date_Math_is_Done" class="podlinkpod"
>How Date Math is Done</a> section of the DateTime.pm documentation for more details. The short course: One cannot in general convert between seconds, minutes, days, and months, so this class will never do so. Instead, create the duration with the desired units to begin with, for example by calling the appropriate subtraction/delta method on a <code>DateTime.pm</code> object.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Like <code>DateTime</code> itself, <code>DateTime::Duration</code> returns the object from mutator methods in order to make method chaining possible.</p>

<p><code>DateTime::Duration</code> has the following methods:</p>

<ul>
<li>new( ... )
<p>This method takes the parameters &#34;years&#34;, &#34;months&#34;, &#34;weeks&#34;, &#34;days&#34;, &#34;hours&#34;, &#34;minutes&#34;, &#34;seconds&#34;, &#34;nanoseconds&#34;, and &#34;end_of_month&#34;. All of these except &#34;end_of_month&#34; are numbers. If any of the numbers are negative, the entire duration is negative.</p>

<p>All of the numbers <b>must be integers</b>.</p>

<p>Internally, years as just treated as 12 months. Similarly, weeks are treated as 7 days, and hours are converted to minutes. Seconds and nanoseconds are both treated separately.</p>

<p>The &#34;end_of_month&#34; parameter must be either &#34;wrap&#34;, &#34;limit&#34;, or &#34;preserve&#34;. This parameter specifies how date math that crosses the end of a month is handled.</p>

<p>In &#34;wrap&#34; mode, adding months or years that result in days beyond the end of the new month will roll over into the following month. For instance, adding one year to Feb 29 will result in Mar 1.</p>

<p>If you specify &#34;end_of_month&#34; mode as &#34;limit&#34;, the end of the month is never crossed. Thus, adding one year to Feb 29, 2000 will result in Feb 28, 2001. If you were to then add three more years this will result in Feb 28, 2004.</p>

<p>If you specify &#34;end_of_month&#34; mode as &#34;preserve&#34;, the same calculation is done as for &#34;limit&#34; except that if the original date is at the end of the month the new date will also be. For instance, adding one month to Feb 29, 2000 will result in Mar 31, 2000.</p>

<p>For positive durations, the &#34;end_of_month&#34; parameter defaults to wrap. For negative durations, the default is &#34;limit&#34;. This should match how most people &#34;intuitively&#34; expect datetime math to work.</p>
</li>

<li>clone
<p>Returns a new object with the same properties as the object on which this method was called.</p>
</li>

<li>in_units( ... )
<p>Returns the length of the duration in the units (any of those that can be passed to <code>new</code>) given as arguments. All lengths are integral, but may be negative. Smaller units are computed from what remains after taking away the larger units given, so for example:</p>

<pre class="sh_perl">  my $dur = DateTime::Duration-&#62;new( years =&#62; 1, months =&#62; 15 );

  $dur-&#62;in_units( &#39;years&#39; );            # 2
  $dur-&#62;in_units( &#39;months&#39; );           # 27
  $dur-&#62;in_units( &#39;years&#39;, &#39;months&#39; );  # (2, 3)
  $dur-&#62;in_units( &#39;weeks&#39;, &#39;days&#39; );    # (0, 0) !</pre>

<p>The last example demonstrates that there will not be any conversion between units which don&#39;t have a fixed conversion rate. The only conversions possible are:</p>

<ul>
<li>years &#60;=&#62; months</li>

<li>weeks &#60;=&#62; days</li>

<li>hours &#60;=&#62; minutes</li>

<li>seconds &#60;=&#62; nanoseconds</li>
</ul>

<p>For the explanation of why this is the case, please see the <a href="/~drolsky/DateTime-0.74/lib/DateTime.pm#How_DateTime_Math_Works" class="podlinkpod"
>How Datetime Math Works</a> section of the DateTime.pm documentation</p>

<p>Note that the numbers returned by this method may not match the values given to the constructor.</p>

<p>In list context, in_units returns the lengths in the order of the units given. In scalar context, it returns the length in the first unit (but still computes in terms of all given units).</p>

<p>If you need more flexibility in presenting information about durations, please take a look a <code>DateTime::Format::Duration</code>.</p>
</li>

<li>is_positive, is_zero, is_negative
<p>Indicates whether or not the duration is positive, zero, or negative.</p>

<p>If the duration contains both positive and negative units, then it will return false for <b>all</b> of these methods.</p>
</li>

<li>is_wrap_mode, is_limit_mode, is_preserve_mode
<p>Indicates what mode is used for end of month wrapping.</p>
</li>

<li>end_of_month_mode
<p>Returns one of &#34;wrap&#34;, &#34;limit&#34;, or &#34;preserve&#34;.</p>
</li>

<li>calendar_duration
<p>Returns a new object with the same <i>calendar</i> delta (months and days only) and end of month mode as the current object.</p>
</li>

<li>clock_duration
<p>Returns a new object with the same <i>clock</i> deltas (minutes, seconds, and nanoseconds) and end of month mode as the current object.</p>
</li>

<li>inverse( ... )
<p>Returns a new object with the same deltas as the current object, but multiple by -1. The end of month mode for the new object will be the default end of month mode, which depends on whether the new duration is positive or negative.</p>

<p>You can set the end of month mode in the inverted duration explicitly by passing &#34;end_of_month =&#62; ...&#34; to the <code>inverse()</code> method.</p>
</li>

<li>add_duration( $duration_object ), subtract_duration( $duration_object )
<p>Adds or subtracts one duration from another.</p>
</li>

<li>add( ... ), subtract( ... )
<p>Syntactic sugar for addition and subtraction. The parameters given to these methods are used to create a new object, which is then passed to <code>add_duration()</code> or <code>subtract_duration()</code>, as appropriate.</p>
</li>

<li>multiply( $number )
<p>Multiplies each unit in the by the specified number.</p>
</li>

<li>DateTime::Duration-&#62;compare( $duration1, $duration2, $base_datetime )
<p>This is a class method that can be used to compare or sort durations. Comparison is done by adding each duration to the specified <code>DateTime.pm</code> object and comparing the resulting datetimes. This is necessary because without a base, many durations are not comparable. For example, 1 month may or may not be longer than 29 days, depending on what datetime it is added to.</p>

<p>If no base datetime is given, then the result of <code>DateTime-&#62;now</code> is used instead. Using this default will give non-repeatable results if used to compare two duration objects containing different units. It will also give non-repeatable results if the durations contain multiple types of units, such as months and days.</p>

<p>However, if you know that both objects only consist of one type of unit (months <i>or</i> days <i>or</i> hours, etc.), and each duration contains the same type of unit, then the results of the comparison will be repeatable.</p>
</li>

<li>delta_months, delta_days, delta_minutes, delta_seconds, delta_nanoseconds
<p>These methods provide the information <code>DateTime.pm</code> needs for doing date math. The numbers returned may be positive or negative. This is mostly useful for doing date math in <a href="/~drolsky/DateTime-0.74/lib/DateTime.pm" class="podlinkpod"
>DateTime</a>.</p>
</li>

<li>deltas
<p>Returns a hash with the keys &#34;months&#34;, &#34;days&#34;, &#34;minutes&#34;, &#34;seconds&#34;, and &#34;nanoseconds&#34;, containing all the delta information for the object. This is mostly useful for doing date math in <a href="/~drolsky/DateTime-0.74/lib/DateTime.pm" class="podlinkpod"
>DateTime</a>.</p>
</li>

<li>years, months, weeks, days, hours, minutes, seconds, nanoseconds
<p>These methods return numbers indicating how many of the given unit the object represents, after having done a conversion to any larger units. For example, days are first converted to weeks, and then the remainder is returned. These numbers are always positive.</p>

<p>Here&#39;s what each method returns:</p>

<pre class="sh_perl"> $dur-&#62;years()       == abs( $dur-&#62;in_units(&#39;years&#39;) )
 $dur-&#62;months()      == abs( ( $dur-&#62;in_units( &#39;months&#39;, &#39;years&#39; ) )[0] )
 $dur-&#62;weeks()       == abs( $dur-&#62;in_units( &#39;weeks&#39; ) )
 $dur-&#62;days()        == abs( ( $dur-&#62;in_units( &#39;days&#39;, &#39;weeks&#39; ) )[0] )
 $dur-&#62;hours()       == abs( $dur-&#62;in_units( &#39;hours&#39; ) )
 $dur-&#62;minutes       == abs( ( $dur-&#62;in_units( &#39;minutes&#39;, &#39;hours&#39; ) )[0] )
 $dur-&#62;seconds       == abs( $dur-&#62;in_units( &#39;seconds&#39; ) )
 $dur-&#62;nanoseconds() == abs( ( $dur-&#62;in_units( &#39;nanoseconds&#39;, &#39;seconds&#39; ) )[0] )</pre>

<p>If this seems confusing, remember that you can always use the <code>in_units()</code> method to specify exactly what you want.</p>

<p>Better yet, if you are trying to generate output suitable for humans, use the <code>DateTime::Format::Duration</code> module.</p>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Overloading"
>Overloading</a></h2>

<p>This class overloads addition, subtraction, and mutiplication.</p>

<p>Comparison is <b>not</b> overloaded. If you attempt to compare durations using <code>&#60;=&#62;</code> or <code>cmp</code>, then an exception will be thrown! Use the <code>compare()</code> class method instead.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT"
>SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Support for this module is provided via the datetime@perl.org email list. See <a href="http://lists.perl.org/" class="podlinkurl"
>http://lists.perl.org/</a> for more details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>datetime@perl.org mailing list</p>

<p><a href="http://datetime.perl.org/" class="podlinkurl"
>http://datetime.perl.org/</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Dave Rolsky &#60;autarch@urth.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This software is Copyright (c) 2012 by Dave Rolsky.</p>

<p>This is free software, licensed under:</p>

<pre class="sh_perl">  The Artistic License 2.0 (GPL Compatible)</pre>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78066 Uploads, 24685 Distributions
105889 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 21 13:50:03 2012 GMT (0.065032958984375) @cpansearch1 -->
 </body>
</html>
