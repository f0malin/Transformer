<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Crypt::CBC - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Crypt-CBC",3]);
    _gaq.push(["_setCustomVar",5,"Release","Crypt-CBC-2.30",3]);
    _gaq.push(["_setCustomVar",3,"Module","Crypt::CBC",3]);
    _gaq.push(["_setCustomVar",1,"Author","LDS",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Crypt::CBC">permalink</a></div>
  <a href="/~lds/">Lincoln D. Stein</a> &gt;
  <a href="/~lds/Crypt-CBC/">Crypt-CBC</a> &gt;
  Crypt::CBC
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/d5d94e49bade52d29be36e2a5259993b?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/L/LD/LDS/Crypt-CBC-2.30.tar.gz">Crypt-CBC-2.30.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Crypt%3A%3ACBC;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~LDS/Crypt-CBC-2.30/CBC.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Crypt%3A%3ABlowfish">Crypt::Blowfish</a><br>
<a href="/perldoc?Crypt%3A%3ARijndael">Crypt::Rijndael</a><br>
<a href="/perldoc?Digest%3A%3AMD5">Digest::MD5</a><br>
<a href="/perldoc?MIME%3A%3ABase64">MIME::Base64</a><br>
<a href="/perldoc?Crypt%3A%3ADES">Crypt::DES</a><br>
<a href="/perldoc?Net%3A%3ASSH">Net::SSH</a><br>
<a href="/perldoc?Apache%3A%3ASession">Apache::Session</a><br>
<a href="/perldoc?Digest%3A%3ASHA1">Digest::SHA1</a><br>
<a href="/perldoc?Crypt%3A%3AOpenPGP">Crypt::OpenPGP</a><br>
<a href="/perldoc?Crypt%3A%3AIDEA">Crypt::IDEA</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Crypt%3A%3ACBC">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 5</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Crypt-CBC">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.30 &nbsp;
<span class="noprint">
  <a href="/src/LDS/Crypt-CBC-2.30/CBC.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#new()'>new()</a>
    <li class='indexItem indexItem2'><a href='#start()'>start()</a>
    <li class='indexItem indexItem2'><a href='#crypt()'>crypt()</a>
    <li class='indexItem indexItem2'><a href='#finish()'>finish()</a>
    <li class='indexItem indexItem2'><a href='#encrypt()'>encrypt()</a>
    <li class='indexItem indexItem2'><a href='#decrypt()'>decrypt()</a>
    <li class='indexItem indexItem2'><a href='#encrypt_hex(),_decrypt_hex()'>encrypt_hex(), decrypt_hex()</a>
    <li class='indexItem indexItem2'><a href='#get_initialization_vector()'>get_initialization_vector()</a>
    <li class='indexItem indexItem2'><a href='#set_initialization_vector()'>set_initialization_vector()</a>
    <li class='indexItem indexItem2'><a href='#iv()'>iv()</a>
    <li class='indexItem indexItem2'><a href='#key()'>key()</a>
    <li class='indexItem indexItem2'><a href='#salt()'>salt()</a>
    <li class='indexItem indexItem2'><a href='#passphrase()'>passphrase()</a>
    <li class='indexItem indexItem2'><a href='#$data_=_get_random_bytes($numbytes)'>$data = get_random_bytes($numbytes)</a>
    <li class='indexItem indexItem2'><a href='#cipher(),_padding(),_keysize(),_blocksize(),_pcbc()'>cipher(), padding(), keysize(), blocksize(), pcbc()</a>
    <li class='indexItem indexItem2'><a href='#Padding_methods'>Padding methods</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <li class='indexItem indexItem1'><a href='#LIMITATIONS'>LIMITATIONS</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Crypt::CBC - Encrypt Data with Cipher Block Chaining Mode</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Crypt::CBC;
  $cipher = Crypt::CBC-&#62;new( -key    =&#62; &#39;my secret key&#39;,
                             -cipher =&#62; &#39;Blowfish&#39;
                            );

  $ciphertext = $cipher-&#62;encrypt(&#34;This data is hush hush&#34;);
  $plaintext  = $cipher-&#62;decrypt($ciphertext);

  $cipher-&#62;start(&#39;encrypting&#39;);
  open(F,&#34;./BIG_FILE&#34;);
  while (read(F,$buffer,1024)) {
      print $cipher-&#62;crypt($buffer);
  }
  print $cipher-&#62;finish;

  # do-it-yourself mode -- specify key, initialization vector yourself
  $key    = Crypt::CBC-&#62;random_bytes(8);  # assuming a 8-byte block cipher
  $iv     = Crypt::CBC-&#62;random_bytes(8);
  $cipher = Crypt::CBC-&#62;new(-literal_key =&#62; 1,
                            -key         =&#62; $key,
                            -iv          =&#62; $iv,
                            -header      =&#62; &#39;none&#39;);

  $ciphertext = $cipher-&#62;encrypt(&#34;This data is hush hush&#34;);
  $plaintext  = $cipher-&#62;decrypt($ciphertext);

  # RANDOMIV-compatible mode
  $cipher = Crypt::CBC-&#62;new(-key         =&#62; &#39;Super Secret!&#39;
                            -header      =&#62; &#39;randomiv&#39;);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is a Perl-only implementation of the cryptographic cipher block chaining mode (CBC). In combination with a block cipher such as DES or IDEA, you can encrypt and decrypt messages of arbitrarily long length. The encrypted messages are compatible with the encryption format used by the <b>OpenSSL</b> package.</p>

<p>To use this module, you will first create a Crypt::CBC cipher object with new(). At the time of cipher creation, you specify an encryption key to use and, optionally, a block encryption algorithm. You will then call the start() method to initialize the encryption or decryption process, crypt() to encrypt or decrypt one or more blocks of data, and lastly finish(), to pad and encrypt the final block. For your convenience, you can call the encrypt() and decrypt() methods to operate on a whole data value at once.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="new()"
>new()</a></h2>

<pre class="sh_perl">  $cipher = Crypt::CBC-&#62;new( -key    =&#62; &#39;my secret key&#39;,
                             -cipher =&#62; &#39;Blowfish&#39;,
                           );

  # or (for compatibility with versions prior to 2.13)
  $cipher = Crypt::CBC-&#62;new( {
                              key    =&#62; &#39;my secret key&#39;,
                              cipher =&#62; &#39;Blowfish&#39;
                             }
                           );


  # or (for compatibility with versions prior to 2.0)
  $cipher = new Crypt::CBC(&#39;my secret key&#39; =&#62; &#39;Blowfish&#39;);</pre>

<p>The new() method creates a new Crypt::CBC object. It accepts a list of -argument =&#62; value pairs selected from the following list:</p>

<pre class="sh_perl">  Argument        Description
  --------        -----------

  -key            The encryption/decryption key (required)

  -cipher         The cipher algorithm (defaults to Crypt::DES), or
                     a preexisting cipher object.

  -salt           Enables OpenSSL-compatibility. If equal to a value
                    of &#34;1&#34; then causes a random salt to be generated
                    and used to derive the encryption key and IV. Other
                    true values are taken to be the literal salt.

  -iv             The initialization vector (IV)

  -header         What type of header to prepend to ciphertext. One of
                    &#39;salt&#39;   -- use OpenSSL-compatible salted header
                    &#39;randomiv&#39; -- Randomiv-compatible &#34;RandomIV&#34; header
                    &#39;none&#39;   -- prepend no header at all

  -padding        The padding method, one of &#34;standard&#34; (default),
                     &#34;space&#34;, &#34;oneandzeroes&#34;, &#34;rijndael_compat&#34;,
                     or &#34;null&#34; (default &#34;standard&#34;).

  -literal_key    If true, the key provided by &#34;key&#34; is used directly
                      for encryption/decryption.  Otherwise the actual
                      key used will be a hash of the provided key.
                      (default false)

  -pcbc           Whether to use the PCBC chaining algorithm rather than
                    the standard CBC algorithm (default false).

  -keysize        Force the cipher keysize to the indicated number of bytes.

  -blocksize      Force the cipher blocksize to the indicated number of bytes.

  -insecure_legacy_decrypt
                  Allow decryption of data encrypted using the &#34;RandomIV&#34; header
                    produced by pre-2.17 versions of Crypt::CBC.

  -add_header     [deprecated; use -header instread]
                   Whether to add the salt and IV to the header of the output
                    cipher text.

  -regenerate_key [deprecated; use literal_key instead]
                  Whether to use a hash of the provided key to generate
                    the actual encryption key (default true)

  -prepend_iv     [deprecated; use add_header instead]
                  Whether to prepend the IV to the beginning of the
                    encrypted stream (default true)</pre>

<p>Crypt::CBC requires three pieces of information to do its job. First it needs the name of the block cipher algorithm that will encrypt or decrypt the data in blocks of fixed length known as the cipher&#39;s &#34;blocksize.&#34; Second, it needs an encryption/decryption key to pass to the block cipher. Third, it needs an initialization vector (IV) that will be used to propagate information from one encrypted block to the next. Both the key and the IV must be exactly the same length as the chosen cipher&#39;s blocksize.</p>

<p>Crypt::CBC can derive the key and the IV from a passphrase that you provide, or can let you specify the true key and IV manually. In addition, you have the option of embedding enough information to regenerate the IV in a short header that is emitted at the start of the encrypted stream, or outputting a headerless encryption stream. In the first case, Crypt::CBC will be able to decrypt the stream given just the original key or passphrase. In the second case, you will have to provide the original IV as well as the key/passphrase.</p>

<p>The <b>-cipher</b> option specifies which block cipher algorithm to use to encode each section of the message. This argument is optional and will default to the quick-but-not-very-secure DES algorithm unless specified otherwise. You may use any compatible block encryption algorithm that you have installed. Currently, this includes Crypt::DES, Crypt::DES_EDE3, Crypt::IDEA, Crypt::Blowfish, Crypt::CAST5 and Crypt::Rijndael. You may refer to them using their full names (&#34;Crypt::IDEA&#34;) or in abbreviated form (&#34;IDEA&#34;).</p>

<p>Instead of passing the name of a cipher class, you may pass an already-created block cipher object. This allows you to take advantage of cipher algorithms that have parameterized new() methods, such as Crypt::Eksblowfish:</p>

<pre class="sh_perl">  my $eksblowfish = Crypt::Eksblowfish-&#62;new(8,$salt,$key);
  my $cbc         = Crypt::CBC-&#62;new(-cipher=&#62;$eksblowfish);</pre>

<p>The <b>-key</b> argument provides either a passphrase to use to generate the encryption key, or the literal value of the block cipher key. If used in passphrase mode (which is the default), <b>-key</b> can be any number of characters; the actual key will be derived by passing the passphrase through a series of MD5 hash operations. To take full advantage of a given block cipher, the length of the passphrase should be at least equal to the cipher&#39;s blocksize. To skip this hashing operation and specify the key directly, pass a true value to the <b>-literal_key</b> option. In this case, you should choose a key of length exactly equal to the cipher&#39;s key length. You should also specify the IV yourself and a -header mode of &#39;none&#39;.</p>

<p>If you pass an existing Crypt::* object to new(), then the -key argument is ignored and the module will generate a warning.</p>

<p>The <b>-header</b> argument specifies what type of header, if any, to prepend to the beginning of the encrypted data stream. The header allows Crypt::CBC to regenerate the original IV and correctly decrypt the data without your having to provide the same IV used to encrypt the data. Valid values for the <b>-header</b> are:</p>

<pre class="sh_perl"> &#34;salt&#34; -- Combine the passphrase with an 8-byte random value to
           generate both the block cipher key and the IV from the
           provided passphrase. The salt will be appended to the
           beginning of the data stream allowing decryption to
           regenerate both the key and IV given the correct passphrase.
           This method is compatible with current versions of OpenSSL.

 &#34;randomiv&#34; -- Generate the block cipher key from the passphrase, and
           choose a random 8-byte value to use as the IV. The IV will
           be prepended to the data stream. This method is compatible
           with ciphertext produced by versions of the library prior to
           2.17, but is incompatible with block ciphers that have non
           8-byte block sizes, such as Rijndael. Crypt::CBC will exit
           with a fatal error if you try to use this header mode with a
           non 8-byte cipher.

 &#34;none&#34;   -- Do not generate a header. To decrypt a stream encrypted
           in this way, you will have to provide the original IV
           manually.</pre>

<p><b>The &#34;salt&#34; header is now the default as of Crypt::CBC version 2.17. In all earlier versions &#34;randomiv&#34; was the default.</b></p>

<p>When using a &#34;salt&#34; header, you may specify your own value of the salt, by passing the desired 8-byte salt to the <b>-salt</b> argument. Otherwise, the module will generate a random salt for you. Crypt::CBC will generate a fatal error if you specify a salt value that isn&#39;t exactly 8 bytes long. For backward compatibility reasons, passing a value of &#34;1&#34; will generate a random salt, the same as if no <b>-salt</b> argument was provided.</p>

<p>The <b>-padding</b> argument controls how the last few bytes of the encrypted stream are dealt with when they not an exact multiple of the cipher block length. The default is &#34;standard&#34;, the method specified in PKCS#5.</p>

<p>The <b>-pcbc</b> argument, if true, activates a modified chaining mode known as PCBC. It provides better error propagation characteristics than the default CBC encryption and is required for authenticating to Kerberos4 systems (see RFC 2222).</p>

<p>The <b>-keysize</b> and <b>-blocksize</b> arguments can be used to force the cipher&#39;s keysize and/or blocksize. This is only currently useful for the Crypt::Blowfish module, which accepts a variable length keysize. If -keysize is not specified, then Crypt::CBC will use the maximum length Blowfish key size of 56 bytes (448 bits). The Openssl library defaults to 16 byte Blowfish key sizes, so for compatibility with Openssl you may wish to set -keysize=&#62;16. There are currently no Crypt::* modules that have variable block sizes, but an option to change the block size is provided just in case.</p>

<p>For compatibility with earlier versions of this module, you can provide new() with a hashref containing key/value pairs. The key names are the same as the arguments described earlier, but without the initial hyphen. You may also call new() with one or two positional arguments, in which case the first argument is taken to be the key and the second to be the optional block cipher algorithm.</p>

<p><b>IMPORTANT NOTE:</b> Versions of this module prior to 2.17 were incorrectly using 8-byte IVs when generating the &#34;randomiv&#34; style of header, even when the chosen cipher&#39;s blocksize was greater than 8 bytes. This primarily affects the Rijndael algorithm. Such encrypted data streams were <b>not secure</b>. From versions 2.17 onward, Crypt::CBC will refuse to encrypt or decrypt using the &#34;randomiv&#34; header and non-8 byte block ciphers. To decrypt legacy data encrypted with earlier versions of the module, you can override the check using the <b>-insecure_legacy_decrypt</b> option. It is not possible to override encryption. Please use the default &#34;salt&#34; header style, or no headers at all.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="start()"
>start()</a></h2>

<pre class="sh_perl">   $cipher-&#62;start(&#39;encrypting&#39;);
   $cipher-&#62;start(&#39;decrypting&#39;);</pre>

<p>The start() method prepares the cipher for a series of encryption or decryption steps, resetting the internal state of the cipher if necessary. You must provide a string indicating whether you wish to encrypt or decrypt. &#34;E&#34; or any word that begins with an &#34;e&#34; indicates encryption. &#34;D&#34; or any word that begins with a &#34;d&#34; indicates decryption.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="crypt()"
>crypt()</a></h2>

<pre class="sh_perl">   $ciphertext = $cipher-&#62;crypt($plaintext);</pre>

<p>After calling start(), you should call crypt() as many times as necessary to encrypt the desired data.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="finish()"
>finish()</a></h2>

<pre class="sh_perl">   $ciphertext = $cipher-&#62;finish();</pre>

<p>The CBC algorithm must buffer data blocks inernally until they are even multiples of the encryption algorithm&#39;s blocksize (typically 8 bytes). After the last call to crypt() you should call finish(). This flushes the internal buffer and returns any leftover ciphertext.</p>

<p>In a typical application you will read the plaintext from a file or input stream and write the result to standard output in a loop that might look like this:</p>

<pre class="sh_perl">  $cipher = new Crypt::CBC(&#39;hey jude!&#39;);
  $cipher-&#62;start(&#39;encrypting&#39;);
  print $cipher-&#62;crypt($_) while &#60;&#62;;
  print $cipher-&#62;finish();</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="encrypt()"
>encrypt()</a></h2>

<pre class="sh_perl">  $ciphertext = $cipher-&#62;encrypt($plaintext)</pre>

<p>This convenience function runs the entire sequence of start(), crypt() and finish() for you, processing the provided plaintext and returning the corresponding ciphertext.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="decrypt()"
>decrypt()</a></h2>

<pre class="sh_perl">  $plaintext = $cipher-&#62;decrypt($ciphertext)</pre>

<p>This convenience function runs the entire sequence of start(), crypt() and finish() for you, processing the provided ciphertext and returning the corresponding plaintext.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="encrypt_hex(),_decrypt_hex()"
>encrypt_hex(), decrypt_hex()</a></h2>

<pre class="sh_perl">  $ciphertext = $cipher-&#62;encrypt_hex($plaintext)
  $plaintext  = $cipher-&#62;decrypt_hex($ciphertext)</pre>

<p>These are convenience functions that operate on ciphertext in a hexadecimal representation. <b>encrypt_hex($plaintext)</b> is exactly equivalent to <b>unpack(&#39;H*&#39;,encrypt($plaintext))</b>. These functions can be useful if, for example, you wish to place the encrypted in an email message.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="get_initialization_vector()"
>get_initialization_vector()</a></h2>

<pre class="sh_perl">  $iv = $cipher-&#62;get_initialization_vector()</pre>

<p>This function will return the IV used in encryption and or decryption. The IV is not guaranteed to be set when encrypting until start() is called, and when decrypting until crypt() is called the first time. Unless the IV was manually specified in the new() call, the IV will change with every complete encryption operation.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="set_initialization_vector()"
>set_initialization_vector()</a></h2>

<pre class="sh_perl">  $cipher-&#62;set_initialization_vector(&#39;76543210&#39;)</pre>

<p>This function sets the IV used in encryption and/or decryption. This function may be useful if the IV is not contained within the ciphertext string being decrypted, or if a particular IV is desired for encryption. Note that the IV must match the chosen cipher&#39;s blocksize bytes in length.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="iv()"
>iv()</a></h2>

<pre class="sh_perl">  $iv = $cipher-&#62;iv();
  $cipher-&#62;iv($new_iv);</pre>

<p>As above, but using a single method call.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="key()"
>key()</a></h2>

<pre class="sh_perl">  $key = $cipher-&#62;key();
  $cipher-&#62;key($new_key);</pre>

<p>Get or set the block cipher key used for encryption/decryption. When encrypting, the key is not guaranteed to exist until start() is called, and when decrypting, the key is not guaranteed to exist until after the first call to crypt(). The key must match the length required by the underlying block cipher.</p>

<p>When salted headers are used, the block cipher key will change after each complete sequence of encryption operations.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="salt()"
>salt()</a></h2>

<pre class="sh_perl">  $salt = $cipher-&#62;salt();
  $cipher-&#62;salt($new_salt);</pre>

<p>Get or set the salt used for deriving the encryption key and IV when in OpenSSL compatibility mode.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="passphrase()"
>passphrase()</a></h2>

<pre class="sh_perl">  $passphrase = $cipher-&#62;passphrase();
  $cipher-&#62;passphrase($new_passphrase);</pre>

<p>This gets or sets the value of the <b>key</b> passed to new() when <b>literal_key</b> is false.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$data_=_get_random_bytes($numbytes)"
>$data = get_random_bytes($numbytes)</a></h2>

<p>Return $numbytes worth of random data. On systems that support the &#34;/dev/urandom&#34; device file, this data will be read from the device. Otherwise, it will be generated by repeated calls to the Perl rand() function.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="cipher(),_padding(),_keysize(),_blocksize(),_pcbc()"
>cipher(), padding(), keysize(), blocksize(), pcbc()</a></h2>

<p>These read-only methods return the identity of the chosen block cipher algorithm, padding method, key and block size of the chosen block cipher, and whether PCBC chaining is in effect.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Padding_methods"
>Padding methods</a></h2>

<p>Use the &#39;padding&#39; option to change the padding method.</p>

<p>When the last block of plaintext is shorter than the block size, it must be padded. Padding methods include: &#34;standard&#34; (i.e., PKCS#5), &#34;oneandzeroes&#34;, &#34;space&#34;, &#34;rijndael_compat&#34; and &#34;null&#34;.</p>

<pre class="sh_perl">   standard: (default) Binary safe
      pads with the number of bytes that should be truncated. So, if 
      blocksize is 8, then &#34;0A0B0C&#34; will be padded with &#34;05&#34;, resulting
      in &#34;0A0B0C0505050505&#34;. If the final block is a full block of 8 
      bytes, then a whole block of &#34;0808080808080808&#34; is appended.

   oneandzeroes: Binary safe
      pads with &#34;80&#34; followed by as many &#34;00&#34; necessary to fill the
      block. If the last block is a full block and blocksize is 8, a
      block of &#34;8000000000000000&#34; will be appended.

   rijndael_compat: Binary safe, with caveats
      similar to oneandzeroes, except that no padding is performed if
      the last block is a full block. This is provided for
      compatibility with Crypt::Rijndael only and can only be used
      with messages that are a multiple of the Rijndael blocksize
      of 16 bytes.

   null: text only
      pads with as many &#34;00&#34; necessary to fill the block. If the last 
      block is a full block and blocksize is 8, a block of
      &#34;0000000000000000&#34; will be appended.

   space: text only
      same as &#34;null&#34;, but with &#34;20&#34;.</pre>

<p>Both the standard and oneandzeroes paddings are binary safe. The space and null paddings are recommended only for text data. Which type of padding you use depends on whether you wish to communicate with an external (non Crypt::CBC library). If this is the case, use whatever padding method is compatible.</p>

<p>You can also pass in a custom padding function. To do this, create a function that takes the arguments:</p>

<pre class="sh_perl">   $padded_block = function($block,$blocksize,$direction);</pre>

<p>where $block is the current block of data, $blocksize is the size to pad it to, $direction is &#34;e&#34; for encrypting and &#34;d&#34; for decrypting, and $padded_block is the result after padding or depadding.</p>

<p>When encrypting, the function should always return a string of &#60;blocksize&#62; length, and when decrypting, can expect the string coming in to always be that length. See _standard_padding(), _space_padding(), _null_padding(), or _oneandzeroes_padding() in the source for examples.</p>

<p>Standard and oneandzeroes padding are recommended, as both space and null padding can potentially truncate more characters than they should.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Two examples, des.pl and idea.pl can be found in the eg/ subdirectory of the Crypt-CBC distribution. These implement command-line DES and IDEA encryption algorithms.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LIMITATIONS"
>LIMITATIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The encryption and decryption process is about a tenth the speed of the equivalent SSLeay programs (compiled C). This could be improved by implementing this module in C. It may also be worthwhile to optimize the DES and IDEA block algorithms further.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Please report them.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Lincoln Stein, lstein@cshl.org</p>

<p>This module is distributed under the ARTISTIC LICENSE using the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perl(1), <a href="/perldoc?Crypt%3A%3ADES" class="podlinkpod"
>Crypt::DES</a>(3), <a href="/perldoc?Crypt%3A%3AIDEA" class="podlinkpod"
>Crypt::IDEA</a>(3), rfc2898 (PKCS#5)</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78262 Uploads, 24722 Distributions
105996 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 15:44:36 2012 GMT (0.246104001998901) @cpansearch1 -->
 </body>
</html>
