<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Crypt::OpenPGP - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Crypt-OpenPGP",3]);
    _gaq.push(["_setCustomVar",5,"Release","Crypt-OpenPGP-1.06",3]);
    _gaq.push(["_setCustomVar",3,"Module","Crypt::OpenPGP",3]);
    _gaq.push(["_setCustomVar",1,"Author","BTROTT",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Crypt::OpenPGP">permalink</a></div>
  <a href="/~btrott/">Benjamin Trott</a> &gt;
  <a href="/~btrott/Crypt-OpenPGP-1.06/">Crypt-OpenPGP-1.06</a> &gt;
  Crypt::OpenPGP
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/6be1a4eb5479cef0cdf07984c2c3b8ea?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/B/BT/BTROTT/Crypt-OpenPGP-1.06.tar.gz">Crypt-OpenPGP-1.06.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Crypt%3A%3AOpenPGP;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~BTROTT/Crypt-OpenPGP-1.06/lib/Crypt/OpenPGP.pm">Annotate this POD
(1)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Crypt%3A%3ACBC">Crypt::CBC</a><br>
<a href="/perldoc?Crypt%3A%3ABlowfish">Crypt::Blowfish</a><br>
<a href="/perldoc?Mail%3A%3APOP3Client">Mail::POP3Client</a><br>
<a href="/perldoc?Crypt%3A%3ARijndael">Crypt::Rijndael</a><br>
<a href="/perldoc?Crypt%3A%3ARSA">Crypt::RSA</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?Crypt%3A%3ARC4">Crypt::RC4</a><br>
<a href="/perldoc?GnuPG%3A%3AInterface">GnuPG::Interface</a><br>
<a href="/perldoc?MIME%3A%3ADecoder">MIME::Decoder</a><br>
<a href="/perldoc?Net%3A%3ASSH%3A%3APerl">Net::SSH::Perl</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Crypt%3A%3AOpenPGP">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 12</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Crypt-OpenPGP">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.06 &nbsp;
<span class="noprint">
  <a href="/src/BTROTT/Crypt-OpenPGP-1.06/lib/Crypt/OpenPGP.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#COMPATIBILITY'>COMPATIBILITY</a>
  <li class='indexItem indexItem1'><a href='#USAGE'>USAGE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Crypt::OpenPGP-&#62;new(_%args_)'>Crypt::OpenPGP-&#62;new( %args )</a>
    <li class='indexItem indexItem2'><a href='#$pgp-&#62;handle(_%args_)'>$pgp-&#62;handle( %args )</a>
    <li class='indexItem indexItem2'><a href='#$pgp-&#62;encrypt(_%args_)'>$pgp-&#62;encrypt( %args )</a>
    <li class='indexItem indexItem2'><a href='#$pgp-&#62;decrypt(_%args_)'>$pgp-&#62;decrypt( %args )</a>
    <li class='indexItem indexItem2'><a href='#$pgp-&#62;sign(_%args_)'>$pgp-&#62;sign( %args )</a>
    <li class='indexItem indexItem2'><a href='#$pgp-&#62;verify(_%args_)'>$pgp-&#62;verify( %args )</a>
    <li class='indexItem indexItem2'><a href='#$pgp-&#62;keygen(_%args_)'>$pgp-&#62;keygen( %args )</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#ERROR_HANDLING'>ERROR HANDLING</a>
  <li class='indexItem indexItem1'><a href='#SAMPLES/TUTORIALS'>SAMPLES/TUTORIALS</a>
  <li class='indexItem indexItem1'><a href='#LICENSE'>LICENSE</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR_&#38;_COPYRIGHT'>AUTHOR &#38; COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#REFERENCES'>REFERENCES</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Crypt::OpenPGP - Pure-Perl OpenPGP implementation</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    my $pgp = Crypt::OpenPGP-&#62;new;

    # Given an input stream (could be a signature, ciphertext, etc),
    # do the &#34;right thing&#34; to it.
    my $message_body; $message_body .= $_ while &#60;STDIN&#62;;
    my $result = $pgp-&#62;handle( Data =&#62; $message_body );

    # Create a detached, ASCII-armoured signature of $file using the
    # secret key $key_id, protected with the passphrase $pass. 
    my $file = &#39;really-from-me.txt&#39;;
    my $key_id = &#39;...&#39;;
    my $pass = &#39;foo bar&#39;;
    my $signature = $pgp-&#62;sign(
        Filename   =&#62; $file,
        KeyID      =&#62; $key_id,
        Passphrase =&#62; $pass,
        Detach     =&#62; 1,
        Armour     =&#62; 1,
    );

    # Verify the detached signature $signature, which should be of the
    # source file $file.
    my $is_valid = $pgp-&#62;verify(
        Signature  =&#62; $signature,
        Files      =&#62; [ $file ],
    );

    # Using the public key associated with $key_id, encrypt the contents
    # of the file $file, and ASCII-armour the ciphertext.
    my $ciphertext = $pgp-&#62;encrypt(
        Filename   =&#62; $file,
        Recipients =&#62; $key_id,
        Armour     =&#62; 1,
    );

    # Decrypt $ciphertext using the secret key used to encrypt it,
    # which key is protected with the passphrase $pass.
    my $plaintext = $pgp-&#62;decrypt(
        Data       =&#62; $ciphertext,
        Passphrase =&#62; $pass,
    );</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><i>Crypt::OpenPGP</i> is a pure-Perl implementation of the OpenPGP standard[1]. In addition to support for the standard itself, <i>Crypt::OpenPGP</i> claims compatibility with many other PGP implementations, both those that support the standard and those that preceded it.</p>

<p><i>Crypt::OpenPGP</i> provides signing/verification, encryption/decryption, keyring management, and key-pair generation; in short it should provide you with everything you need to PGP-enable yourself. Alternatively it can be used as part of a larger system; for example, perhaps you have a web-form-to-email generator written in Perl, and you&#39;d like to encrypt outgoing messages, because they contain sensitive information. <i>Crypt::OpenPGP</i> can be plugged into such a scenario, given your public key, and told to encrypt all messages; they will then be readable only by you.</p>

<p>This module currently supports <code>RSA</code> and <code>DSA</code> for digital signatures, and <code>RSA</code> and <code>ElGamal</code> for encryption/decryption. It supports the symmetric ciphers <code>3DES</code>, <code>Blowfish</code>, <code>IDEA</code>, <code>Twofish</code>, <code>CAST5</code>, and <code>Rijndael</code> (<code>AES</code>). <code>Rijndael</code> is supported for key sizes of <code>128</code>, <code>192</code>, and <code>256</code> bits. <i>Crypt::OpenPGP</i> supports the digest algorithms <code>MD5</code>, <code>SHA-1</code>, and <code>RIPE-MD/160</code>. And it supports <code>ZIP</code> and <code>Zlib</code> compression.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COMPATIBILITY"
>COMPATIBILITY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>One of the highest priorities for <i>Crypt::OpenPGP</i> is compatibility with other PGP implementations, including PGP implementations that existed before the OpenPGP standard.</p>

<p>As a means towards that end, some of the high-level <i>Crypt::OpenPGP</i> methods can be used in compatibility mode; given an argument <i>Compat</i> and a PGP implementation with which they should be compatible, these method will do their best to choose ciphers, digest algorithms, etc. that are compatible with that implementation. For example, PGP2 only supports <code>IDEA</code> encryption, <code>MD5</code> digests, and version 3 signature formats; if you tell <i>Crypt::OpenPGP</i> that it must be compatible with PGP2, it will only use these algorithms/formats when encrypting and signing data.</p>

<p>To use this feature, supply either <i>sign</i> or <i>encrypt</i> with the <i>Compat</i> parameter, giving it one of the values from the list below. For example:</p>

<pre class="sh_perl">    my $ct = $pgp-&#62;encrypt(
                  Compat     =&#62; &#39;PGP2&#39;,
                  Filename   =&#62; &#39;foo.pl&#39;,
                  Recipients =&#62; $key_id,
             );</pre>

<p>Because <i>PGP2</i> was specified, the data will automatically be encrypted using the <code>IDEA</code> cipher, and will be compressed using <code>ZIP</code>.</p>

<p>Here is a list of the current compatibility sets and the algorithms and formats they support.</p>

<ul>
<li>PGP2
<p>Encryption: symmetric cipher = <code>IDEA</code>, compression = <code>ZIP</code>, modification detection code (MDC) = <code>0</code></p>

<p>Signing: digest = <code>MD5</code>, packet format = version 3</p>
</li>

<li>PGP5
<p>Encryption: symmetric cipher = <code>3DES</code>, compression = <code>ZIP</code>, modification detection code (MDC) = <code>0</code></p>

<p>Signing: digest = <code>SHA-1</code>, packet format = version 3</p>
</li>

<li>GnuPG
<p>Encryption: symmetric cipher = <code>Rijndael</code>, compression = <code>Zlib</code>, modification detection code (MDC) = <code>1</code></p>

<p>Signing: digest = <code>RIPE-MD/160</code>, packet format = version 4</p>
</li>
</ul>

<p>If the compatibility setting is unspecified (that is, if no <i>Compat</i> argument is supplied), the settings (ciphers, digests, etc.) fall back to their default settings.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="USAGE"
>USAGE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><i>Crypt::OpenPGP</i> has the following high-level interface. On failure, all methods will return <code>undef</code> and set the <i>errstr</i> for the object; look below at the <i>ERROR HANDLING</i> section for more information.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Crypt::OpenPGP-&#62;new(_%args_)"
>Crypt::OpenPGP-&#62;new( %args )</a></h2>

<p>Constructs a new <i>Crypt::OpenPGP</i> instance and returns that object. Returns <code>undef</code> on failure.</p>

<p><i>%args</i> can contain:</p>

<ul>
<li>Compat
<p>The compatibility mode for this <i>Crypt::OpenPGP</i> object. This value will propagate down into method calls upon this object, meaning that it will be applied for all method calls invoked on this object. For example, if you set <i>Compat</i> here, you do not have to set it again when calling <i>encrypt</i> or <i>sign</i> (below), unless, of course, you want to set <i>Compat</i> to a different value for those methods.</p>

<p><i>Compat</i> influences several factors upon object creation, unless otherwise overridden in the constructor arguments: if you have a configuration file for this compatibility mode (eg. <em>~/.gnupg/options</em> for GnuPG), it will be automatically read in, and <i>Crypt::OpenPGP</i> will set any options relevant to its execution (symmetric cipher algorithm, etc.); <i>PubRing</i> and <i>SecRing</i> (below) are set according to the default values for this compatibility mode (eg. <em>~/.gnupg/pubring.gpg</em> for the GnuPG public keyring).</p>
</li>

<li>SecRing
<p>Path to your secret keyring. If unspecified, <i>Crypt::OpenPGP</i> will look for your keyring in a number of default places.</p>

<p>As an alternative to passing in a path to the keyring file, you can pass in a <i>Crypt::OpenPGP::KeyRing</i> object representing a secret keyring.</p>
</li>

<li>PubRing
<p>Path to your public keyring. If unspecified, <i>Crypt::OpenPGP</i> will look for your keyring in a number of default places.</p>

<p>As an alternative to passing in a path to the keyring file, you can pass in a <i>Crypt::OpenPGP::KeyRing</i> object representing a public keyring.</p>
</li>

<li>ConfigFile
<p>Path to a PGP/GnuPG config file. If specified, you must also pass in a value for the <i>Compat</i> parameter, stating what format config file you are passing in. For example, if you are passing in the path to a GnuPG config file, you should give a value of <code>GnuPG</code> for the <i>Compat</i> flag.</p>

<p>If you leave <i>ConfigFile</i> unspecified, but you have specified a value for <i>Compat</i>, <i>Crypt::OpenPGP</i> will try to find your config file, based on the value of <i>Compat</i> that you pass in (eg. <em>~/.gnupg/options</em> if <i>Compat</i> is <code>GnuPG</code>).</p>

<p>NOTE: if you do not specify a <i>Compat</i> flag, <i>Crypt::OpenPGP</i> cannot read any configuration files, even if you <i>have</i> specified a value for the <i>ConfigFile</i> parameter, because it will not be able to determine the proper config file format.</p>
</li>

<li>KeyServer
<p>The hostname of the HKP keyserver. You can get a list of keyservers through</p>

<pre class="sh_perl">    % host -l pgp.net | grep wwwkeys</pre>

<p>If <i>AutoKeyRetrieve</i> is set to a true value, keys will be automatically retrieved from the keyserver if they are not found in your local keyring.</p>
</li>

<li>AutoKeyRetrieve
<p>If set to a true value, and if <i>KeyServer</i> is set to a keyserver name, <i>encrypt</i> and <i>verify</i> will automatically try to fetch public keys from the keyserver if they are not found in your local keyring.</p>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$pgp-&#62;handle(_%args_)"
>$pgp-&#62;handle( %args )</a></h2>

<p>A do-what-I-mean wrapper around <i>decrypt</i> and <i>verify</i>. Given either a filename or a block of data--for example, data from an incoming email message--<i>handle</i> &#34;handles&#34; it as appropriate for whatever encryption or signing the message contains. For example, if the data is encrypted, <i>handle</i> will return the decrypted data (after prompting you for the passphrase). If the data is signed, <i>handle</i> will check the validity of the signature and return indication of the validity of the signature.</p>

<p>The return value is a reference to a hash, which may contain the following keys, depending on the data passed to the method:</p>

<ul>
<li>Plaintext
<p>If the data is encrypted, the decrypted message.</p>
</li>

<li>Validity
<p>If the data is signed, a true value if the signature is valid, a false value otherwise. The true value will be either the signer&#39;s email address, if available, or <code>1</code>, if not.</p>
</li>

<li>Signature
<p>If the data is signed, the <i>Crypt::OpenPGP::Signature</i> object representing the signature.</p>
</li>
</ul>

<p>If an error occurs, the return value will be <code>undef</code>, and the error message can be obtained by calling <i>errstr</i> on the <i>Crypt::OpenPGP</i> object.</p>

<p><i>%args</i> can contain:</p>

<ul>
<li>Data
<p>The data to be &#34;handled&#34;. This should be a simple scalar containing an arbitrary amount of data.</p>

<p><i>Data</i> is optional; if unspecified, you should specify a filename (see <i>Filename</i>, below).</p>
</li>

<li>Filename
<p>The path to a file to &#34;handle&#34;.</p>

<p><i>Filename</i> is optional; if unspecified, you should specify the data in <i>Data</i>, above. If both <i>Data</i> and <i>Filename</i> are specified, the data in <i>Data</i> overrides that in <i>Filename</i>.</p>
</li>

<li>PassphraseCallback
<p>If the data is encrypted, you will need to supply <i>handle</i> with the proper passphrase to unlock the private key, or the password to decrypt the symmetrically-encrypted data (depending on the method of encryption used). If you do not specify this parameter, this default passphrase callback will be used:</p>

<pre class="sh_perl">    sub _default_passphrase_cb {
        my($cert) = @_;
        my $prompt;
        if ($cert) {
            $prompt = sprintf qq(
    You need a passphrase to unlock the secret key for
    user &#34;%s&#34;.
    %d-bit %s key, ID %s
    
    Enter passphrase: ), $cert-&#62;uid,
                         $cert-&#62;key-&#62;size,
                         $cert-&#62;key-&#62;alg,
                         substr($cert-&#62;key_id_hex, -8, 8);
        } else {
            $prompt = &#34;Enter passphrase: &#34;;
        }
        _prompt($prompt, &#39;&#39;, 1);
    }</pre>

<p>If you do specify this parameter, make sure that your callback function can handle both asymmetric and symmetric encryption.</p>

<p>See the <i>PassphraseCallback</i> parameter for <i>decrypt</i>, below.</p>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$pgp-&#62;encrypt(_%args_)"
>$pgp-&#62;encrypt( %args )</a></h2>

<p>Encrypts a block of data. The encryption is actually done with a symmetric cipher; the key for the symmetric cipher is then encrypted with either the public key of the recipient or using a passphrase that you enter. The former case is using public-key cryptography, the latter, standard symmetric ciphers. In the first case, the session key can only be unlocked by someone with the corresponding secret key; in the second, it can only be unlocked by someone who knows the passphrase.</p>

<p>Given the parameter <i>SignKeyID</i> (see below), <i>encrypt</i> will first sign the message before encrypting it, adding a Signature packet to the encrypted plaintext.</p>

<p>Returns a block of data containing two PGP packets: the encrypted symmetric key and the encrypted data.</p>

<p>On failure returns <code>undef</code>.</p>

<p><i>%args</i> can contain:</p>

<ul>
<li>Compat
<p>Specifies the PGP compatibility setting. See <i>COMPATIBILITY</i>, above.</p>
</li>

<li>Data
<p>The plaintext to be encrypted. This should be a simple scalar containing an arbitrary amount of data.</p>

<p><i>Data</i> is optional; if unspecified, you should specify a filename (see <i>Filename</i>, below).</p>
</li>

<li>Filename
<p>The path to a file to encrypt.</p>

<p><i>Filename</i> is optional; if unspecified, you should specify the data in <i>Data</i>, above. If both <i>Data</i> and <i>Filename</i> are specified, the data in <i>Data</i> overrides that in <i>Filename</i>.</p>
</li>

<li>Recipients
<p>The intended recipients of the encrypted message. In other words, either the key IDs or user IDs of the public keys that should be used to encrypt the message. Each recipient specified should be either a key ID--an 8-digit or 16-digit hexadecimal number--or part of a user ID that can be used to look up the user&#39;s public key in your keyring. Examples:</p>

<pre class="sh_perl">    8-digit hex key ID: 123ABC45
    16-digit hex key ID: 678DEF90123ABC45
    (Part of) User ID: foo@bar</pre>

<p>Note that the 8-digit hex key ID is the last 8 digits of the (long) 16-digit hex key ID.</p>

<p>If you wish to encrypt the message for multiple recipients, the value of <i>Recipients</i> should be a reference to a list of recipients (as defined above). For each recipient in the list, the public key will be looked up in your public keyring, and an encrypted session key packet will be added to the encrypted message.</p>

<p>This argument is optional; if not provided you should provide the <i>Passphrase</i> option (below) to perform symmetric-key encryption when encrypting the session key.</p>
</li>

<li>KeyID
<p>A deprecated alias for <i>Recipients</i> (above). There is no need to use <i>KeyID</i>, as its functionality has been completely subsumed into the <i>Recipients</i> parameter.</p>
</li>

<li>Passphrase
<p>The mechanism to use symmetric-key, or &#34;conventional&#34;, encryption, when encrypting the session key. In other words, this allows you to use <i>Crypt::OpenPGP</i> for encryption/decryption without using public-key cryptography; this can be useful in certain circumstances (for example, when encrypting data locally on disk).</p>

<p>This argument is optional; if not provided you should provide the <i>Recipients</i> option (above) to perform public-key encryption when encrypting the session key.</p>
</li>

<li>RecipientsCallback
<p>After the list of recipients for a message (as given in <i>Recipients</i>, above) has been mapped into a set of keys from your public keyring, you can use <i>RecipientsCallback</i> to review/modify that list of keys. The value of <i>RecipientsCallback</i> should be a reference to a subroutine; when invoked that routine will be handed a reference to an array of <i>Crypt::OpenPGP::Certificate</i> objects. It should then return a reference to a list of such objects.</p>

<p>This can be useful particularly when supplying user IDs in the list of <i>Recipients</i> for an encrypted message. Since user IDs are looked up using partial matches (eg. <i>b</i> could match <i>b</i>, <i>abc</i>, <i>bar</i>, etc.), one intended recipient may actually turn up multiple keys. You can use <i>RecipientsCallback</i> to audit that list before actually encrypting the message:</p>

<pre class="sh_perl">    my %BAD_KEYS = (
        ABCDEF1234567890 =&#62; 1,
        1234567890ABCDEF =&#62; 1,
    );
    my $cb = sub {
        my $keys = shift;
        my @return;
        for my $cert (@$keys) {
            push @return, $cert unless $BAD_KEYS{ $cert-&#62;key_id_hex };
        }
        \@returns;
    };
    my $ct = $pgp-&#62;encrypt( ..., RecipientsCallback =&#62; $cb, ... );</pre>
</li>

<li>Cipher
<p>The name of a symmetric cipher with which the plaintext will be encrypted. Valid arguments are <code>DES3</code>, <code>CAST5</code>, <code>Blowfish</code>, <code>IDEA</code>, <code>Twofish</code>, <code>Rijndael</code>, <code>Rijndael192</code>, and <code>Rijndael256</code> (the last two are <code>Rijndael</code> with key sizes of 192 and 256 bits, respectively).</p>

<p>This argument is optional; if you have provided a <i>Compat</i> parameter, <i>Crypt::OpenPGP</i> will use the appropriate cipher for the supplied compatibility mode. Otherwise, <i>Crypt::OpenPGP</i> currently defaults to <code>DES3</code>; this could change in the future.</p>
</li>

<li>Compress
<p>The name of a compression algorithm with which the plaintext will be compressed before it is encrypted. Valid values are <code>ZIP</code> and <code>Zlib</code>.</p>

<p>By default text is not compressed.</p>
</li>

<li>Armour
<p>If true, the data returned from <i>encrypt</i> will be ASCII-armoured. This can be useful when you need to send data through email, for example.</p>

<p>By default the returned data is not armoured.</p>
</li>

<li>SignKeyID
<p>If you wish to sign the plaintext message before encrypting it, provide <i>encrypt</i> with the <i>SignKeyID</i> parameter and give it a key ID with which the message can be signed. This allows recipients of your message to verify its validity.</p>

<p>By default messages not signed.</p>
</li>

<li>SignPassphrase
<p>The passphrase to unlock the secret key to be used when signing the message.</p>

<p>If you are signing the message--that is, if you have provided the <i>SignKeyID</i> parameter--either this argument or <i>SignPassphraseCallback</i> is required.</p>
</li>

<li>SignPassphraseCallback
<p>The callback routine to enable the passphrase being passed in through some user-defined routine. See the <i>PassphraseCallback</i> parameter for <i>sign</i>, below.</p>

<p>If you are signing the message--that is, if you have provided the <i>SignKeyID</i> parameter--either this argument or <i>SignPassphrase</i> is required.</p>
</li>

<li>MDC
<p>When set to a true value, instructs <i>encrypt</i> to use encrypted MDC (modification detection code) packets instead of standard encrypted data packets. These are a newer form of encrypted data packets that are followed by a <code>SHA-1</code> hash of the plaintext data. This prevents attacks that modify the encrypted text by using a message digest to detect changes.</p>

<p>By default <i>MDC</i> is set to <code>0</code>, and <i>encrypt</i> generates standard encrypted data packets. Set it to a true value to turn on MDC packets. Note that <i>MDC</i> will automatically be turned on if you are using a <i>Compat</i> mode that is known to support it.</p>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$pgp-&#62;decrypt(_%args_)"
>$pgp-&#62;decrypt( %args )</a></h2>

<p>Decrypts a block of ciphertext. The ciphertext should be of the sort returned from <i>encrypt</i>, in either armoured or non-armoured form. This is compatible with all other implementations of PGP: the output of their encryption should serves as the input to this method.</p>

<p>When called in scalar context, returns the plaintext (that is, the decrypted ciphertext), or <code>undef</code> on failure. When called in list context, returns a three-element list containing the plaintext and the result of signature verification (see next paragraph), or the empty list on failure. Either of the failure conditions listed here indicates that decryption failed.</p>

<p>If <i>decrypt</i> is called in list context, and the encrypted text contains a signature over the plaintext, <i>decrypt</i> will attempt to verify the signature and will return the result of that verification as the second element in the return list, and the actual <i>Crypt::OpenPGP::Signature</i> object as the third element in the return list. If you call <i>decrypt</i> in list context and the ciphertext does <i>not</i> contain a signature, that second element will be <code>undef</code>, and the <i>errstr</i> will be set to the string <code>No Signature\n</code>. The second element in the return list can have one of three possible values: <code>undef</code>, meaning that either an error occurred in verifying the signature, <i>or</i> the ciphertext did not contain a signature; <code>0</code>, meaning that the signature is invalid; or a true value of either the signer&#39;s user ID or <code>1</code>, if the user ID cannot be determined. Note that these are the same values returned from <i>verify</i> (below).</p>

<p>For example, to decrypt a message that may contain a signature that you want verified, you might use code like this:</p>

<pre class="sh_perl">    my($pt, $valid, $sig) = $pgp-&#62;decrypt( ... );
    die &#34;Decryption failed: &#34;, $pgp-&#62;errstr unless $pt;
    die &#34;Signature verification failed: &#34;, $pgp-&#62;errstr
        unless defined $valid || $pgp-&#62;errstr !~ /^No Signature/;
    print &#34;Signature created at &#34;, $sig-&#62;timestamp, &#34;\n&#34;;</pre>

<p>This checks for errors in decryption, as well as errors in signature verification, excluding the error denoting that the plaintext was not signed.</p>

<p><i>%args</i> can contain:</p>

<ul>
<li>Data
<p>The ciphertext to be decrypted. This should be a simple scalar containing an arbitrary amount of data.</p>

<p><i>Data</i> is optional; if unspecified, you should specify a filename (see <i>Filename</i>, below).</p>
</li>

<li>Filename
<p>The path to a file to decrypt.</p>

<p><i>Filename</i> is optional; if unspecified, you should specify the data in <i>Data</i>, above. If both <i>Data</i> and <i>Filename</i> are specified, the data in <i>Data</i> overrides that in <i>Filename</i>.</p>
</li>

<li>Passphrase
<p>The passphrase to unlock your secret key, or to decrypt a symmetrically-encrypted message; the usage depends on how the message is encrypted.</p>

<p>This argument is optional if your secret key is protected; if not provided you should supply the <i>PassphraseCallback</i> parameter (below).</p>
</li>

<li>PassphraseCallback
<p>A callback routine to allow interactive users (for example) to enter the passphrase for the specific key being used to decrypt the ciphertext, or the passphrase used to encrypt a symmetrically-encrypted message. This is useful when your ciphertext is encrypted to several recipients, if you do not necessarily know ahead of time the secret key that will be used to decrypt it. It is also useful when you wish to provide an interactive user with some feedback about the key being used to decrypt the message, or when you don&#39;t know what type of encryption (symmetric or public-key) will be used to encrypt a message.</p>

<p>The value of this parameter should be a reference to a subroutine. This routine will be called when a passphrase is needed from the user, and it will be given either zero arguments or one argument, depending on whether the message is encrypted symmetrically (zero arguments) or using public-key encryption (one argument). If the latter, the one argument is a <i>Crypt::OpenPGP::Certificate</i> object representing the secret key. You can use the information in this object to present details about the key to the user.</p>

<p>In either case, the callback routine should return the passphrase, a scalar string.</p>

<p>Your callback routine can use the number of arguments to determine how to prompt the user for a passphrase; for example:</p>

<pre class="sh_perl">    sub passphrase_cb {
        if (my $cert = $_[0]) {
            printf &#34;Enter passphrase for secret key %s: &#34;,
                $cert-&#62;key_id_hex;
        } else {
            print &#34;Enter passphrase: &#34;;
        }
    }</pre>

<p>This argument is optional if your secret key is protected; if not provided you should supply the <i>Passphrase</i> parameter (above).</p>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$pgp-&#62;sign(_%args_)"
>$pgp-&#62;sign( %args )</a></h2>

<p>Creates and returns a digital signature on a block of data.</p>

<p>On failure returns <code>undef</code>.</p>

<p><i>%args</i> can contain:</p>

<ul>
<li>Compat
<p>Specifies the PGP compatibility setting. See <i>COMPATIBILITY</i>, above.</p>
</li>

<li>Data
<p>The text to be signed. This should be a simple scalar containing an arbitrary amount of data.</p>

<p><i>Data</i> is optional; if unspecified, you should specify a filename (see <i>Filename</i>, below).</p>
</li>

<li>Filename
<p>The path to a file to sign.</p>

<p><i>Filename</i> is optional; if unspecified, you should specify the data in <i>Data</i>, above. If both <i>Data</i> and <i>Filename</i> are specified, the data in <i>Data</i> overrides that in <i>Filename</i>.</p>
</li>

<li>Detach
<p>If set to a true value the signature created will be a detached signature; that is, a signature that does not contain the original text. This assumes that the person who will be verifying the signature can somehow obtain the original text (for example, if you sign the text of an email message, the original text is the message).</p>

<p>By default signatures are not detached.</p>
</li>

<li>Armour
<p>If true, the data returned from <i>sign</i> will be ASCII-armoured. This can be useful when you need to send data through email, for example.</p>

<p>By default the returned signature is not armoured.</p>
</li>

<li>Clearsign
<p>If true, the signature created on the data is a clear-text signature. This form of signature displays the clear text of the signed data, followed by the ASCII-armoured signature on that data. Such a format is desirable when sending signed messages to groups of users who may or may not have PGP, because it allows the text of the message to be readable without special software.</p>

<p>When <i>Clearsign</i> is set to true, <i>Armour</i> and <i>Detach</i> are automatically turned on, because the signature created is a detached, armoured signature.</p>

<p>By default <i>Clearsign</i> is false.</p>
</li>

<li>KeyID
<p>The ID of the secret key that should be used to sign the message. The value of the key ID should be specified as a 16-digit hexadecimal number.</p>

<p>This argument is mandatory.</p>
</li>

<li>Passphrase
<p>The passphrase to unlock your secret key.</p>

<p>This argument is optional if your secret key is protected; if not provided you should supply the <i>PassphraseCallback</i> parameter (below).</p>
</li>

<li>PassphraseCallback
<p>A callback routine to allow interactive users (for example) to enter the passphrase for the specific key being used to sign the message. This is useful when you wish to provide an interactive user with some feedback about the key being used to sign the message.</p>

<p>The value of this parameter should be a reference to a subroutine. This routine will be called when a passphrase is needed from the user, and it will be given one argument: a <i>Crypt::OpenPGP::Certificate</i> object representing the secret key. You can use the information in this object to present details about the key to the user. The callback routine should return the passphrase, a scalar string.</p>

<p>This argument is optional if your secret key is protected; if not provided you should supply the <i>Passphrase</i> parameter (above).</p>
</li>

<li>Digest
<p>The digest algorithm to use when creating the signature; the data to be signed is hashed by a message digest algorithm, then signed. Possible values are <code>MD5</code>, <code>SHA1</code>, and <code>RIPEMD160</code>.</p>

<p>This argument is optional; if not provided, the digest algorithm will be set based on the <i>Compat</i> setting provided to <i>sign</i> or <i>new</i>. If you have not provided a <i>Compat</i> setting, <i>SHA1</i> will be used.</p>
</li>

<li>Version
<p>The format version of the created signature. The two possible values are <code>3</code> and <code>4</code>; version 4 signatures will not be compatible with older PGP implementations.</p>

<p>The default value is <code>4</code>, although this could change in the future.</p>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$pgp-&#62;verify(_%args_)"
>$pgp-&#62;verify( %args )</a></h2>

<p>Verifies a digital signature. Returns true for a valid signature, <code>0</code> for an invalid signature, and <code>undef</code> if an error occurs (in which case you should call <i>errstr</i> to determine the source of the error). The &#39;true&#39; value returned for a successful signature will be, if available, the PGP User ID of the person who created the signature. If that value is unavailable, the return value will be <code>1</code>.</p>

<p>If called in list context, the second element returned in the return list will be the <i>Crypt::OpenPGP::Signature</i> object representing the actual signature.</p>

<p><i>%args</i> can contain:</p>

<ul>
<li>Signature
<p>The signature data, as returned from <i>sign</i>. This data can be either a detached signature or a non-detached signature. If the former, you will need to specify the list of files comprising the original signed data (see <i>Data</i> or <i>Files</i>, below).</p>

<p>Either this argument or <i>SigFile</i> is required.</p>
</li>

<li>SigFile
<p>The path to a file containing the signature data. This data can be either a detached signature or a non-detached signature. If the former, you will need to specify the list of files comprising the original signed data (see <i>Data</i> or <i>Files</i>, below).</p>

<p>Either this argument or <i>SigFile</i> is required.</p>
</li>

<li>Data
<p>Specifies the original signed data.</p>

<p>If the signature (in either <i>Signature</i> or <i>SigFile</i>) is a detached signature, either <i>Data</i> or <i>Files</i> is a mandatory argument.</p>
</li>

<li>Files
<p>Specifies a list of files comprising the original signed data. The value should be a reference to a list of file paths; if there is only one file, the value can be specified as a scalar string, rather than a reference to a list.</p>

<p>If the signature (in either <i>Signature</i> or <i>SigFile</i>) is a detached signature, either <i>Data</i> or <i>Files</i> is a mandatory argument.</p>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$pgp-&#62;keygen(_%args_)"
>$pgp-&#62;keygen( %args )</a></h2>

<p>NOTE: this interface is alpha and could change in future releases!</p>

<p>Generates a public/secret PGP keypair. Returns two keyblocks (objects of type <i>Crypt::OpenPGP::KeyBlock</i>), a public and a secret keyblock, respectively. A keyblock is essentially a block of keys, subkeys, signatures, and user ID PGP packets.</p>

<p><i>%args</i> can contain:</p>

<ul>
<li>Type
<p>The type of key to generate. Currently there are two valid values: <code>RSA</code> and <code>DSA</code>. <code>ElGamal</code> key generation is not supported at the moment.</p>

<p>This is a required argument.</p>
</li>

<li>Size
<p>Bitsize of the key to be generated. This should be an even integer; there is no low end currently implemented in <i>Crypt::OpenPGP</i>, but for the sake of security <i>Size</i> should be at least 1024 bits.</p>

<p>This is a required argument.</p>
</li>

<li>Identity
<p>A string that identifies the owner of the key. Typically this is the combination of the user&#39;s name and an email address; for example,</p>

<pre class="sh_perl">    Foo Bar &#60;foo@bar.com&#62;</pre>

<p>The <i>Identity</i> is used to build a User ID packet that is stored in each of the returned keyblocks.</p>

<p>This is a required argument.</p>
</li>

<li>Passphrase
<p>String with which the secret key will be encrypted. When read in from disk, the key can then only be unlocked using this string.</p>

<p>This is a required argument.</p>
</li>

<li>Version
<p>Specifies the key version; defaults to version <code>4</code> keys. You should only set this to version <code>3</code> if you know why you are doing so (for backwards compatibility, most likely). Version <code>3</code> keys only support RSA.</p>
</li>

<li>Verbosity
<p>Set to a true value to enable a status display during key generation; since key generation is a relatively lengthy process, it is helpful to have an indication that some action is occurring.</p>

<p><i>Verbosity</i> is 0 by default.</p>
</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ERROR_HANDLING"
>ERROR HANDLING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If an error occurs in any of the above methods, the method will return <code>undef</code>. You should then call the method <i>errstr</i> to determine the source of the error:</p>

<pre class="sh_perl">    $pgp-&#62;errstr</pre>

<p>In the case that you do not yet have a <i>Crypt::OpenPGP</i> object (that is, if an error occurs while creating a <i>Crypt::OpenPGP</i> object), the error can be obtained as a class method:</p>

<pre class="sh_perl">    Crypt::OpenPGP-&#62;errstr</pre>

<p>For example, if you try to decrypt some encrypted text, and you do not give a passphrase to unlock your secret key:</p>

<pre class="sh_perl">    my $pt = $pgp-&#62;decrypt( Filename =&#62; &#34;encrypted_data&#34; )
        or die &#34;Decryption failed: &#34;, $pgp-&#62;errstr;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SAMPLES/TUTORIALS"
>SAMPLES/TUTORIALS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Take a look at <em>bin/pgplet</em> for an example of usage of <i>Crypt::OpenPGP</i>. It gives you an example of using the four main major methods (<i>encrypt</i>, <i>sign</i>, <i>decrypt</i>, and <i>verify</i>), as well as the various parameters to those methods. It also demonstrates usage of the callback parameters (eg. <i>PassphraseCallback</i>).</p>

<p><em>bin/pgplet</em> currently does not have any documentation, but its interface mirrors that of <i>gpg</i>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE"
>LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Crypt::OpenPGP is free software; you may redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR_&#38;_COPYRIGHT"
>AUTHOR &#38; COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Except where otherwise noted, Crypt::OpenPGP is Copyright 2001 Benjamin Trott, cpan@stupidfool.org. All rights reserved.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="REFERENCES"
>REFERENCES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='1'></a><a name="1_RFC2440_-_OpenPGP_Message_Format_(1998)._http://www.faqs.org/rfcs/rfc2440.html"
>1 RFC2440 - OpenPGP Message Format (1998). <a href="http://www.faqs.org/rfcs/rfc2440.html" class="podlinkurl"
>http://www.faqs.org/rfcs/rfc2440.html</a></a></dt>
</dl>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78152 Uploads, 24702 Distributions
105959 Modules, 9642 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Tue Apr 24 16:04:36 2012 GMT (0.449898958206177) @cpansearch1 -->
 </body>
</html>
