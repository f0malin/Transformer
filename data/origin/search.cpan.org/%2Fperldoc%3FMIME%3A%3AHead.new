<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>MIME::Head - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","MIME-tools",3]);
    _gaq.push(["_setCustomVar",5,"Release","MIME-tools-5.502",3]);
    _gaq.push(["_setCustomVar",3,"Module","MIME::Head",3]);
    _gaq.push(["_setCustomVar",1,"Author","DSKOLL",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?MIME::Head">permalink</a></div>
  <a href="/~dskoll/">David F. Skoll</a> &gt;
  <a href="/~dskoll/MIME-tools-5.502/">MIME-tools-5.502</a> &gt;
  MIME::Head
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/77ceb1d700a17c6454d82e26e73d9807?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DS/DSKOLL/MIME-tools-5.502.tar.gz">MIME-tools-5.502.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=MIME%3A%3AHead;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DSKOLL/MIME-tools-5.502/lib/MIME/Head.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?MIME%3A%3AParser">MIME::Parser</a><br>
<a href="/perldoc?MIME%3A%3AEntity">MIME::Entity</a><br>
<a href="/perldoc?Mail%3A%3APOP3Client">Mail::POP3Client</a><br>
<a href="/perldoc?Mail%3A%3AHeader">Mail::Header</a><br>
<a href="/perldoc?Inline%3A%3AC">Inline::C</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Mail%3A%3AMboxParser">Mail::MboxParser</a><br>
<a href="/perldoc?Mail%3A%3AProcmail">Mail::Procmail</a><br>
<a href="/perldoc?MIME%3A%3ALite">MIME::Lite</a><br>
<a href="/perldoc?Mail%3A%3AField">Mail::Field</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=MIME%3A%3AHead">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 6</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 8</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=MIME-tools">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  5.502 &nbsp;
<span class="noprint">
  <a href="/src/DSKOLL/MIME-tools-5.502/lib/MIME/Head.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Construction'>Construction</a>
    <li class='indexItem indexItem2'><a href='#Output'>Output</a>
    <li class='indexItem indexItem2'><a href='#Getting_field_contents'>Getting field contents</a>
    <li class='indexItem indexItem2'><a href='#Setting_field_contents'>Setting field contents</a>
    <li class='indexItem indexItem2'><a href='#Manipulating_field_contents'>Manipulating field contents</a>
    <li class='indexItem indexItem2'><a href='#Getting_high-level_MIME_information'>Getting high-level MIME information</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#PUBLIC_INTERFACE'>PUBLIC INTERFACE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Creation,_input,_and_output'>Creation, input, and output</a>
    <li class='indexItem indexItem2'><a href='#Getting/setting_fields'>Getting/setting fields</a>
    <li class='indexItem indexItem2'><a href='#MIME-specific_methods'>MIME-specific methods</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#NOTES'>NOTES</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>MIME::Head - MIME message header (a subclass of Mail::Header)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Before reading further,
you should see <a href="/perldoc?MIME%3A%3ATools" class="podlinkpod"
>MIME::Tools</a> to make sure that you understand where this module fits into the grand scheme of things.
Go on,
do it now.
I&#39;ll wait.</p>

<p>Ready?
Ok...</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Construction"
>Construction</a></h2>

<pre class="sh_perl">    ### Create a new, empty header, and populate it manually:
    $head = MIME::Head-&#62;new;
    $head-&#62;replace(&#39;content-type&#39;, &#39;text/plain; charset=US-ASCII&#39;);
    $head-&#62;replace(&#39;content-length&#39;, $len);

    ### Parse a new header from a filehandle:
    $head = MIME::Head-&#62;read(\*STDIN);

    ### Parse a new header from a file, or a readable pipe:
    $testhead = MIME::Head-&#62;from_file(&#34;/tmp/test.hdr&#34;);
    $a_b_head = MIME::Head-&#62;from_file(&#34;cat a.hdr b.hdr |&#34;);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Output"
>Output</a></h2>

<pre class="sh_perl">    ### Output to filehandle:
    $head-&#62;print(\*STDOUT);

    ### Output as string:
    print STDOUT $head-&#62;as_string;
    print STDOUT $head-&#62;stringify;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Getting_field_contents"
>Getting field contents</a></h2>

<pre class="sh_perl">    ### Is this a reply?
    $is_reply = 1 if ($head-&#62;get(&#39;Subject&#39;) =~ /^Re: /);

    ### Get receipt information:
    print &#34;Last received from: &#34;, $head-&#62;get(&#39;Received&#39;, 0);
    @all_received = $head-&#62;get(&#39;Received&#39;);

    ### Print the subject, or the empty string if none:
    print &#34;Subject: &#34;, $head-&#62;get(&#39;Subject&#39;,0);

    ### Too many hops?  Count &#39;em and see!
    if ($head-&#62;count(&#39;Received&#39;) &#62; 5) { ...

    ### Test whether a given field exists
    warn &#34;missing subject!&#34; if (! $head-&#62;count(&#39;subject&#39;));</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Setting_field_contents"
>Setting field contents</a></h2>

<pre class="sh_perl">    ### Declare this to be an HTML header:
    $head-&#62;replace(&#39;Content-type&#39;, &#39;text/html&#39;);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Manipulating_field_contents"
>Manipulating field contents</a></h2>

<pre class="sh_perl">    ### Get rid of internal newlines in fields:
    $head-&#62;unfold;

    ### Decode any Q- or B-encoded-text in fields (DEPRECATED):
    $head-&#62;decode;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Getting_high-level_MIME_information"
>Getting high-level MIME information</a></h2>

<pre class="sh_perl">    ### Get/set a given MIME attribute:
    unless ($charset = $head-&#62;mime_attr(&#39;content-type.charset&#39;)) {
        $head-&#62;mime_attr(&#34;content-type.charset&#34; =&#62; &#34;US-ASCII&#34;);
    }

    ### The content type (e.g., &#34;text/html&#34;):
    $mime_type     = $head-&#62;mime_type;

    ### The content transfer encoding (e.g., &#34;quoted-printable&#34;):
    $mime_encoding = $head-&#62;mime_encoding;

    ### The recommended name when extracted:
    $file_name     = $head-&#62;recommended_filename;

    ### The boundary text, for multipart messages:
    $boundary      = $head-&#62;multipart_boundary;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A class for parsing in and manipulating RFC-822 message headers, with some methods geared towards standard (and not so standard) MIME fields as specified in the various <i>Multipurpose Internet Mail Extensions</i> RFCs (starting with RFC 2045)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PUBLIC_INTERFACE"
>PUBLIC INTERFACE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Creation,_input,_and_output"
>Creation, input, and output</a></h2>

<dl>
<dt><a name='new'></a><a name="new_[ARG],[OPTIONS]"
>new [ARG],[OPTIONS]</a></dt>

<dd>
<p><i>Class method, inherited.</i> Creates a new header object. Arguments are the same as those in the superclass.</p>

<dt><a name='from_file'></a><a name="from_file_EXPR,OPTIONS"
>from_file EXPR,OPTIONS</a></dt>

<dd>
<p><i>Class or instance method</i>. For convenience, you can use this to parse a header object in from EXPR, which may actually be any expression that can be sent to open() so as to return a readable filehandle. The &#34;file&#34; will be opened, read, and then closed:</p>

<pre class="sh_perl">    ### Create a new header by parsing in a file:
    my $head = MIME::Head-&#62;from_file(&#34;/tmp/test.hdr&#34;);</pre>

<p>Since this method can function as either a class constructor <i>or</i> an instance initializer, the above is exactly equivalent to:</p>

<pre class="sh_perl">    ### Create a new header by parsing in a file:
    my $head = MIME::Head-&#62;new-&#62;from_file(&#34;/tmp/test.hdr&#34;);</pre>

<p>On success, the object will be returned; on failure, the undefined value.</p>

<p>The OPTIONS are the same as in new(), and are passed into new() if this is invoked as a class method.</p>

<p><b>Note:</b> This is really just a convenience front-end onto <code>read()</code>, provided mostly for backwards-compatibility with MIME-parser 1.0.</p>

<dt><a name='read'></a><a name="read_FILEHANDLE"
>read FILEHANDLE</a></dt>

<dd>
<p><i>Instance (or class) method.</i> This initiallizes a header object by reading it in from a FILEHANDLE, until the terminating blank line is encountered. A syntax error or end-of-stream will also halt processing.</p>

<p>Supply this routine with a reference to a filehandle glob; e.g., <code>\*STDIN</code>:</p>

<pre class="sh_perl">    ### Create a new header by parsing in STDIN:
    $head-&#62;read(\*STDIN);</pre>

<p>On success, the self object will be returned; on failure, a false value.</p>

<p><b>Note:</b> in the MIME world, it is perfectly legal for a header to be empty, consisting of nothing but the terminating blank line. Thus, we can&#39;t just use the formula that &#34;no tags equals error&#34;.</p>

<p><b>Warning:</b> as of the time of this writing, Mail::Header::read did not flag either syntax errors or unexpected end-of-file conditions (an EOF before the terminating blank line). MIME::ParserBase takes this into account.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Getting/setting_fields"
>Getting/setting fields</a></h2>

<p>The following are methods related to retrieving and modifying the header fields. Some are inherited from Mail::Header, but I&#39;ve kept the documentation around for convenience.</p>

<dl>
<dt><a name='add'></a><a name="add_TAG,TEXT,[INDEX]"
>add TAG,TEXT,[INDEX]</a></dt>

<dd>
<p><i>Instance method, inherited.</i> Add a new occurence of the field named TAG, given by TEXT:</p>

<pre class="sh_perl">    ### Add the trace information:
    $head-&#62;add(&#39;Received&#39;,
               &#39;from eryq.pr.mcs.net by gonzo.net with smtp&#39;);</pre>

<p>Normally, the new occurence will be <i>appended</i> to the existing occurences. However, if the optional INDEX argument is 0, then the new occurence will be <i>prepended</i>. If you want to be <i>explicit</i> about appending, specify an INDEX of -1.</p>

<p><b>Warning</b>: this method always adds new occurences; it doesn&#39;t overwrite any existing occurences... so if you just want to <i>change</i> the value of a field (creating it if necessary), then you probably <b>don&#39;t</b> want to use this method: consider using <code>replace()</code> instead.</p>

<dt><a name='count'></a><a name="count_TAG"
>count TAG</a></dt>

<dd>
<p><i>Instance method, inherited.</i> Returns the number of occurences of a field; in a boolean context, this tells you whether a given field exists:</p>

<pre class="sh_perl">    ### Was a &#34;Subject:&#34; field given?
    $subject_was_given = $head-&#62;count(&#39;subject&#39;);</pre>

<p>The TAG is treated in a case-insensitive manner. This method returns some false value if the field doesn&#39;t exist, and some true value if it does.</p>

<dt><a name='decode'></a><a name="decode_[FORCE]"
>decode [FORCE]</a></dt>

<dd>
<p><i>Instance method, DEPRECATED.</i> Go through all the header fields, looking for RFC 1522 / RFC 2047 style &#34;Q&#34; (quoted-printable, sort of) or &#34;B&#34; (base64) encoding, and decode them in-place. Fellow Americans, you probably don&#39;t know what the hell I&#39;m talking about. Europeans, Russians, et al, you probably do. <code>:-)</code>.</p>

<p><b>This method has been deprecated.</b> See <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Parser.pm#decode_headers" class="podlinkpod"
>&#34;decode_headers&#34; in MIME::Parser</a> for the full reasons. If you absolutely must use it and don&#39;t like the warning, then provide a FORCE:</p>

<pre class="sh_perl">   &#34;I_NEED_TO_FIX_THIS&#34;
          Just shut up and do it.  Not recommended.
          Provided only for those who need to keep old scripts functioning.

   &#34;I_KNOW_WHAT_I_AM_DOING&#34;
          Just shut up and do it.  Not recommended.
          Provided for those who REALLY know what they are doing.</pre>

<p><b>What this method does.</b> For an example, let&#39;s consider a valid email header you might get:</p>

<pre class="sh_perl">    From: =?US-ASCII?Q?Keith_Moore?= &#60;moore@cs.utk.edu&#62;
    To: =?ISO-8859-1?Q?Keld_J=F8rn_Simonsen?= &#60;keld@dkuug.dk&#62;
    CC: =?ISO-8859-1?Q?Andr=E9_?= Pirard &#60;PIRARD@vm1.ulg.ac.be&#62;
    Subject: =?ISO-8859-1?B?SWYgeW91IGNhbiByZWFkIHRoaXMgeW8=?=
     =?ISO-8859-2?B?dSB1bmRlcnN0YW5kIHRoZSBleGFtcGxlLg==?=
     =?US-ASCII?Q?.._cool!?=</pre>

<p>That basically decodes to (sorry, I can only approximate the Latin characters with 7 bit sequences /o and &#39;e):</p>

<pre class="sh_perl">    From: Keith Moore &#60;moore@cs.utk.edu&#62;
    To: Keld J/orn Simonsen &#60;keld@dkuug.dk&#62;
    CC: Andr&#39;e  Pirard &#60;PIRARD@vm1.ulg.ac.be&#62;
    Subject: If you can read this you understand the example... cool!</pre>

<p><b>Note:</b> currently, the decodings are done without regard to the character set: thus, the Q-encoding <code>=F8</code> is simply translated to the octet (hexadecimal <code>F8</code>), period. For piece-by-piece decoding of a given field, you want the array context of <code>MIME::Words::decode_mimewords()</code>.</p>

<p><b>Warning:</b> the CRLF+SPACE separator that splits up long encoded words into shorter sequences (see the Subject: example above) gets lost when the field is unfolded, and so decoding after unfolding causes a spurious space to be left in the field. <i>THEREFORE: if you&#39;re going to decode, do so BEFORE unfolding!</i></p>

<p>This method returns the self object.</p>

<p><i>Thanks to Kent Boortz for providing the idea, and the baseline RFC-1522-decoding code.</i></p>

<dt><a name='delete'></a><a name="delete_TAG,[INDEX]"
>delete TAG,[INDEX]</a></dt>

<dd>
<p><i>Instance method, inherited.</i> Delete all occurences of the field named TAG.</p>

<pre class="sh_perl">    ### Remove some MIME information:
    $head-&#62;delete(&#39;MIME-Version&#39;);
    $head-&#62;delete(&#39;Content-type&#39;);</pre>

<dt><a name='get'></a><a name="get_TAG,[INDEX]"
>get TAG,[INDEX]</a></dt>

<dd>
<p><i>Instance method, inherited.</i> Get the contents of field TAG.</p>

<p>If a <b>numeric INDEX</b> is given, returns the occurence at that index, or undef if not present:</p>

<pre class="sh_perl">    ### Print the first and last &#39;Received:&#39; entries (explicitly):
    print &#34;First, or most recent: &#34;, $head-&#62;get(&#39;received&#39;, 0);
    print &#34;Last, or least recent: &#34;, $head-&#62;get(&#39;received&#39;,-1);</pre>

<p>If <b>no INDEX</b> is given, but invoked in a <b>scalar</b> context, then INDEX simply defaults to 0:</p>

<pre class="sh_perl">    ### Get the first &#39;Received:&#39; entry (implicitly):
    my $most_recent = $head-&#62;get(&#39;received&#39;);</pre>

<p>If <b>no INDEX</b> is given, and invoked in an <b>array</b> context, then <i>all</i> occurences of the field are returned:</p>

<pre class="sh_perl">    ### Get all &#39;Received:&#39; entries:
    my @all_received = $head-&#62;get(&#39;received&#39;);</pre>

<p><b>NOTE</b>: The header(s) returned may end with a newline. If you don&#39;t want this, then <b>chomp</b> the return value.</p>

<dt><a name='get_all'></a><a name="get_all_FIELD"
>get_all FIELD</a></dt>

<dd>
<p><i>Instance method.</i> Returns the list of <i>all</i> occurences of the field, or the empty list if the field is not present:</p>

<pre class="sh_perl">    ### How did it get here?
    @history = $head-&#62;get_all(&#39;Received&#39;);</pre>

<p><b>Note:</b> I had originally experimented with having <code>get()</code> return all occurences when invoked in an array context... but that causes a lot of accidents when you get careless and do stuff like this:</p>

<pre class="sh_perl">    print &#34;\u$field: &#34;, $head-&#62;get($field);</pre>

<p>It also made the intuitive behaviour unclear if the INDEX argument was given in an array context. So I opted for an explicit approach to asking for all occurences.</p>

<dt><a name='print'></a><a name="print_[OUTSTREAM]"
>print [OUTSTREAM]</a></dt>

<dd>
<p><i>Instance method, override.</i> Print the header out to the given OUTSTREAM, or the currently-selected filehandle if none. The OUTSTREAM may be a filehandle, or any object that responds to a print() message.</p>

<p>The override actually lets you print to any object that responds to a print() method. This is vital for outputting MIME entities to scalars.</p>

<p>Also, it defaults to the <i>currently-selected</i> filehandle if none is given (not STDOUT!), so <i>please</i> supply a filehandle to prevent confusion.</p>

<dt><a name="stringify"
>stringify</a></dt>

<dd>
<p><i>Instance method.</i> Return the header as a string. You can also invoke it as <code>as_string</code>.</p>

<dt><a name='unfold'></a><a name="unfold_[FIELD]"
>unfold [FIELD]</a></dt>

<dd>
<p><i>Instance method, inherited.</i> Unfold (remove newlines in) the text of all occurences of the given FIELD. If the FIELD is omitted, <i>all</i> fields are unfolded. Returns the &#34;self&#34; object.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="MIME-specific_methods"
>MIME-specific methods</a></h2>

<p>All of the following methods extract information from the following fields:</p>

<pre class="sh_perl">    Content-type
    Content-transfer-encoding
    Content-disposition</pre>

<p>Be aware that they do not just return the raw contents of those fields, and in some cases they will fill in sensible (I hope) default values. Use <code>get()</code> or <code>mime_attr()</code> if you need to grab and process the raw field text.</p>

<p><b>Note:</b> some of these methods are provided both as a convenience and for backwards-compatibility only, while others (like recommended_filename()) <i>really do have to be in MIME::Head to work properly,</i> since they look for their value in more than one field. However, if you know that a value is restricted to a single field, you should really use the Mail::Field interface to get it.</p>

<dl>
<dt><a name='mime_attr'></a><a name="mime_attr_ATTR,[VALUE]"
>mime_attr ATTR,[VALUE]</a></dt>

<dd>
<p>A quick-and-easy interface to set/get the attributes in structured MIME fields:</p>

<pre class="sh_perl">    $head-&#62;mime_attr(&#34;content-type&#34;         =&#62; &#34;text/html&#34;);
    $head-&#62;mime_attr(&#34;content-type.charset&#34; =&#62; &#34;US-ASCII&#34;);
    $head-&#62;mime_attr(&#34;content-type.name&#34;    =&#62; &#34;homepage.html&#34;);</pre>

<p>This would cause the final output to look something like this:</p>

<pre class="sh_perl">    Content-type: text/html; charset=US-ASCII; name=&#34;homepage.html&#34;</pre>

<p>Note that the special empty sub-field tag indicates the anonymous first sub-field.</p>

<p><b>Giving VALUE as undefined</b> will cause the contents of the named subfield to be deleted:</p>

<pre class="sh_perl">    $head-&#62;mime_attr(&#34;content-type.charset&#34; =&#62; undef);</pre>

<p><b>Supplying no VALUE argument</b> just returns the attribute&#39;s value, or undefined if it isn&#39;t there:</p>

<pre class="sh_perl">    $type = $head-&#62;mime_attr(&#34;content-type&#34;);      ### text/html
    $name = $head-&#62;mime_attr(&#34;content-type.name&#34;); ### homepage.html</pre>

<p>In all cases, the new/current value is returned.</p>

<dt><a name="mime_encoding"
>mime_encoding</a></dt>

<dd>
<p><i>Instance method.</i> Try <i>real hard</i> to determine the content transfer encoding (e.g., <code>&#34;base64&#34;</code>, <code>&#34;binary&#34;</code>), which is returned in all-lowercase.</p>

<p>If no encoding could be found, the default of <code>&#34;7bit&#34;</code> is returned I quote from RFC 2045 section 6.1:</p>

<pre class="sh_perl">    This is the default value -- that is, &#34;Content-Transfer-Encoding: 7BIT&#34;
    is assumed if the Content-Transfer-Encoding header field is not present.</pre>

<p>I do one other form of fixup: &#34;7_bit&#34;, &#34;7-bit&#34;, and &#34;7 bit&#34; are corrected to &#34;7bit&#34;; likewise for &#34;8bit&#34;.</p>

<dt><a name='mime_type'></a><a name="mime_type_[DEFAULT]"
>mime_type [DEFAULT]</a></dt>

<dd>
<p><i>Instance method.</i> Try <code>real hard</code> to determine the content type (e.g., <code>&#34;text/plain&#34;</code>, <code>&#34;image/gif&#34;</code>, <code>&#34;x-weird-type&#34;</code>, which is returned in all-lowercase. &#34;Real hard&#34; means that if no content type could be found, the default (usually <code>&#34;text/plain&#34;</code>) is returned. From RFC 2045 section 5.2:</p>

<pre class="sh_perl">   Default RFC 822 messages without a MIME Content-Type header are
   taken by this protocol to be plain text in the US-ASCII character
   set, which can be explicitly specified as:

      Content-type: text/plain; charset=us-ascii

   This default is assumed if no Content-Type header field is specified.</pre>

<p>Unless this is a part of a &#34;multipart/digest&#34;, in which case &#34;message/rfc822&#34; is the default. Note that you can also <i>set</i> the default, but you shouldn&#39;t: normally only the MIME parser uses this feature.</p>

<dt><a name="multipart_boundary"
>multipart_boundary</a></dt>

<dd>
<p><i>Instance method.</i> If this is a header for a multipart message, return the &#34;encapsulation boundary&#34; used to separate the parts. The boundary is returned exactly as given in the <code>Content-type:</code> field; that is, the leading double-hyphen (<code>--</code>) is <i>not</i> prepended.</p>

<p>Well, <i>almost</i> exactly... this passage from RFC 2046 dictates that we remove any trailing spaces:</p>

<pre class="sh_perl">   If a boundary appears to end with white space, the white space
   must be presumed to have been added by a gateway, and must be deleted.</pre>

<p>Returns undef (<b>not</b> the empty string) if either the message is not multipart or if there is no specified boundary.</p>

<dt><a name="recommended_filename"
>recommended_filename</a></dt>

<dd>
<p><i>Instance method.</i> Return the recommended external filename. This is used when extracting the data from the MIME stream. The filename is always returned as a string in Perl&#39;s internal format (the UTF8 flag may be on!)</p>

<p>Returns undef if no filename could be suggested.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTES"
>NOTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='Why'></a><a name="Why_have_separate_objects_for_the_entity,_head,_and_body?"
>Why have separate objects for the entity, head, and body?</a></dt>

<dd>
<p>See the documentation for the MIME-tools distribution for the rationale behind this decision.</p>

<dt><a name='Why'></a><a name="Why_assume_that_MIME_headers_are_email_headers?"
>Why assume that MIME headers are email headers?</a></dt>

<dd>
<p>I quote from Achim Bohnet, who gave feedback on v.1.9 (I think he&#39;s using the word &#34;header&#34; where I would use &#34;field&#34;; e.g., to refer to &#34;Subject:&#34;, &#34;Content-type:&#34;, etc.):</p>

<pre class="sh_perl">    There is also IMHO no requirement [for] MIME::Heads to look
    like [email] headers; so to speak, the MIME::Head [simply stores]
    the attributes of a complex object, e.g.:

        new MIME::Head type =&#62; &#34;text/plain&#34;,
                       charset =&#62; ...,
                       disposition =&#62; ..., ... ;</pre>

<p>I agree in principle, but (alas and dammit) RFC 2045 says otherwise. RFC 2045 [MIME] headers are a syntactic subset of RFC-822 [email] headers.</p>

<p>In my mind&#39;s eye, I see an abstract class, call it MIME::Attrs, which does what Achim suggests... so you could say:</p>

<pre class="sh_perl">     my $attrs = new MIME::Attrs type =&#62; &#34;text/plain&#34;,
                                 charset =&#62; ...,
                                 disposition =&#62; ..., ... ;</pre>

<p>We could even make it a superclass of MIME::Head: that way, MIME::Head would have to implement its interface, <i>and</i> allow itself to be initiallized from a MIME::Attrs object.</p>

<p>However, when you read RFC 2045, you begin to see how much MIME information is organized by its presence in particular fields. I imagine that we&#39;d begin to mirror the structure of RFC 2045 fields and subfields to such a degree that this might not give us a tremendous gain over just having MIME::Head.</p>

<dt><a name='Why'></a><a name="Why_all_this_&#34;occurence&#34;_and_&#34;index&#34;_jazz?_Isn&#39;t_every_field_unique?"
>Why all this &#34;occurence&#34; and &#34;index&#34; jazz? Isn&#39;t every field unique?</a></dt>

<dd>
<p>Aaaaaaaaaahh....no.</p>

<p>Looking at a typical mail message header, it is sooooooo tempting to just store the fields as a hash of strings, one string per hash entry. Unfortunately, there&#39;s the little matter of the <code>Received:</code> field, which (unlike <code>From:</code>, <code>To:</code>, etc.) will often have multiple occurences; e.g.:</p>

<pre class="sh_perl">    Received: from gsfc.nasa.gov by eryq.pr.mcs.net  with smtp
        (Linux Smail3.1.28.1 #5) id m0tStZ7-0007X4C;
         Thu, 21 Dec 95 16:34 CST
    Received: from rhine.gsfc.nasa.gov by gsfc.nasa.gov
         (5.65/Ultrix3.0-C) id AA13596;
         Thu, 21 Dec 95 17:20:38 -0500
    Received: (from eryq@localhost) by rhine.gsfc.nasa.gov
         (8.6.12/8.6.12) id RAA28069;
         Thu, 21 Dec 1995 17:27:54 -0500
    Date: Thu, 21 Dec 1995 17:27:54 -0500
    From: Eryq &#60;eryq@rhine.gsfc.nasa.gov&#62;
    Message-Id: &#60;199512212227.RAA28069@rhine.gsfc.nasa.gov&#62;
    To: eryq@eryq.pr.mcs.net
    Subject: Stuff and things</pre>

<p>The <code>Received:</code> field is used for tracing message routes, and although it&#39;s not generally used for anything other than human debugging, I didn&#39;t want to inconvenience anyone who actually wanted to get at that information.</p>

<p>I also didn&#39;t want to make this a special case; after all, who knows what other fields could have multiple occurences in the future? So, clearly, multiple entries had to somehow be stored multiple times... and the different occurences had to be retrievable.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?Mail%3A%3AHeader" class="podlinkpod"
>Mail::Header</a>, <a href="/perldoc?Mail%3A%3AField" class="podlinkpod"
>Mail::Field</a>, <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Words.pm" class="podlinkpod"
>MIME::Words</a>, <a href="/perldoc?MIME%3A%3ATools" class="podlinkpod"
>MIME::Tools</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Eryq (<em>eryq@zeegee.com</em>), ZeeGee Software Inc (<em><a href="http://www.zeegee.com" class="podlinkurl"
>http://www.zeegee.com</a></em>). David F. Skoll (dfs@roaringpenguin.com) <a href="http://www.roaringpenguin.com" class="podlinkurl"
>http://www.roaringpenguin.com</a></p>

<p>All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>The more-comprehensive filename extraction is courtesy of Lee E. Brotzman, Advanced Data Solutions.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78124 Uploads, 24699 Distributions
105950 Modules, 9642 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Tue Apr 24 07:46:45 2012 GMT (0.0861039161682129) @cpansearch1 -->
 </body>
</html>
