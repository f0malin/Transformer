<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Perl6::Slurp - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Perl6-Slurp",3]);
    _gaq.push(["_setCustomVar",5,"Release","Perl6-Slurp-0.050000",3]);
    _gaq.push(["_setCustomVar",3,"Module","Perl6::Slurp",3]);
    _gaq.push(["_setCustomVar",1,"Author","DCONWAY",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Perl6::Slurp">permalink</a></div>
  <a href="/~dconway/">Damian Conway</a> &gt;
  <a href="/~dconway/Perl6-Slurp-0.050000/">Perl6-Slurp-0.050000</a> &gt;
  Perl6::Slurp
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/3d4a6a089964a744d7b3cf2415f81951?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DC/DCONWAY/Perl6-Slurp-0.050000.tar.gz">Perl6-Slurp-0.050000.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Perl6%3A%3ASlurp;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DCONWAY/Perl6-Slurp-0.050000/lib/Perl6/Slurp.pm">Annotate this POD
(1)
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Perl6-Slurp">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.050000 &nbsp;
<span class="noprint">
  <a href="/src/DCONWAY/Perl6-Slurp-0.050000/lib/Perl6/Slurp.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#WARNING'>WARNING</a>
  <li class='indexItem indexItem1'><a href='#DEPENDENCIES'>DEPENDENCIES</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Perl6::Slurp - Implements the Perl 6 &#39;slurp&#39; built-in</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use Perl6::Slurp;

    # Slurp a file by name...

    $file_contents = slurp &#39;filename&#39;;
    $file_contents = slurp &#39;&#60;filename&#39;;
    $file_contents = slurp &#39;&#60;&#39;, &#39;filename&#39;;
    $file_contents = slurp &#39;+&#60;&#39;, &#39;filename&#39;;


    # Slurp a file via an (already open!) handle...

    $file_contents = slurp \*STDIN;
    $file_contents = slurp $filehandle;
    $file_contents = slurp IO::File-&#62;new(&#39;filename&#39;);


    # Slurp a string...

    $str_contents = slurp \$string;
    $str_contents = slurp &#39;&#60;&#39;, \$string;


    # Slurp a pipe...

    $str_contents = slurp &#39;tail -20 $filename |&#39;;
    $str_contents = slurp &#39;-|&#39;, &#39;tail&#39;, -20, $filename;


    # Slurp with no source slurps from whatever $_ indicates...

    for (@files) {
        $contents .= slurp;
    }

    # ...or from the entire ARGV list, if $_ is undefined...

    $_ = undef;
    $ARGV_contents = slurp;


    # Specify I/O layers as part of mode...

    $file_contents = slurp &#39;&#60;:raw&#39;, $file;
    $file_contents = slurp &#39;&#60;:utf8&#39;, $file;
    $file_contents = slurp &#39;&#60;:raw :utf8&#39;, $file;


    # Specify I/O layers as separate options...

    $file_contents = slurp $file, {raw=&#62;1};
    $file_contents = slurp $file, {utf8=&#62;1};
    $file_contents = slurp $file, {raw=&#62;1}, {utf8=&#62;1};
    $file_contents = slurp $file, [raw=&#62;1, utf8=&#62;1];


    # Specify input record separator...

    $file_contents = slurp $file, {irs=&#62;&#34;\n\n&#34;};
    $file_contents = slurp &#39;&#60;&#39;, $file, {irs=&#62;&#34;\n\n&#34;};
    $file_contents = slurp {irs=&#62;&#34;\n\n&#34;}, $file;


    # Input record separator can be regex...

    $file_contents = slurp $file, {irs=&#62;qr/\n+/};
    $file_contents = slurp &#39;&#60;&#39;, $file, {irs=&#62;qr/\n+|\t{2,}};


    # Specify autochomping...

    $file_contents = slurp $file, {chomp=&#62;1};
    $file_contents = slurp {chomp=&#62;1}, $file;
    $file_contents = slurp $file, {chomp=&#62;1, irs=&#62;&#34;\n\n&#34;};
    $file_contents = slurp $file, {chomp=&#62;1, irs=&#62;qr/\n+/};


    # Specify autochomping that replaces irs
    # with another string...

    $file_contents = slurp $file, {irs=&#62;&#34;\n\n&#34;, chomp=&#62;&#34;\n&#34;};
    $file_contents = slurp $file, {chomp=&#62;&#34;\n\n&#34;}, {irs=&#62;qr/\n+/};


    # Specify autochomping that replaces
    # irs with a dynamically computed string...

    my $n = 1;
    $file_contents = slurp $file, {chomp=&#62;sub{ &#34;\n#line &#34;.$n++.&#34;\n&#34;};


    # Slurp in a list context...

    @lines = slurp &#39;filename&#39;;
    @lines = slurp $filehandle;
    @lines = slurp \$string;
    @lines = slurp &#39;&#60;:utf8&#39;, &#39;filename&#39;, {irs=&#62;&#34;\x{2020}&#34;, chomp=&#62;&#34;\n&#34;};</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>slurp</code> takes:</p>

<ul>
<li>a filename,</li>

<li>a filehandle,</li>

<li>a typeglob reference,</li>

<li>an IO::File object, or</li>

<li>a scalar reference,</li>
</ul>

<p>converts it to an input stream if necessary, and reads in the entire stream. If <code>slurp</code> fails to set up or read the stream, it throws an exception.</p>

<p>If no data source is specified <code>slurp</code> uses the value of <code>$_</code> as the source. If <code>$_</code> is undefined, <code>slurp</code> uses the <code>@ARGV</code> list, and magically slurps the contents of <i>all</i> the sources listed in <code>@ARGV</code>. Note that the same magic is also applied if you explicitly slurp &#60;*ARGV&#62;, so the following three input operations:</p>

<pre class="sh_perl">    $contents = join &#34;&#34;, &#60;ARGV&#62;;

    $contents = slurp \*ARGV;

    $/ = undef;
    $contents = slurp;</pre>

<p>are identical in effect.</p>

<p>In a scalar context <code>slurp</code> returns the stream contents as a single string. If the stream is at EOF, it returns an empty string. In a list context, it splits the contents after the appropriate input record separator and returns the resulting list of strings.</p>

<p>You can set the input record separator (<code>{&#160;irs&#160;=&#62;&#160;$your_irs_here}</code>) for the input operation. The separator can be specified as a string or a regex. Note that an explicit input record separator has no effect in a scalar context, since <code>slurp</code> always reads in everything anyway.</p>

<p>In a list context, changing the separator can change how the input is broken up within the list that is returned.</p>

<p>If an input record separator is not explicitly specified, <code>slurp</code> defaults to <code>&#34;\n&#34;</code> (<i>not</i> to the current value of <code>$/</code> &#8211; since Perl 6 doesn&#39;t <i>have</i> a <code>$/</code>);</p>

<p>You can also tell <code>slurp</code> to automagically <code>chomp</code> the input as it is read in, by specifying: (<code>{&#160;chomp&#160;=&#62;&#160;1&#160;}</code>)</p>

<p>Better still, you can tell <code>slurp</code> to automagically <code>chomp</code> the input and <i>replace</i> what it chomps with another string, by specifying: (<code>{&#160;chomp&#160;=&#62;&#160;&#34;another&#160;string&#34;&#160;}</code>)</p>

<p>You can also tell <code>slurp</code> to compute the replacement string on-the-fly by specifying a subroutine as the <code>chomp</code> value: (<code>{&#160;chomp&#160;=&#62;&#160;sub{...}&#160;}</code>). This subroutine is passed the string being chomped off, so for example you could squeeze single newlines to a single space and multiple conseqcutive newlines to a two newlines with:</p>

<pre class="sh_perl">    sub squeeze {
        my ($removed) = @_;
        if ($removed =~ tr/\n/\n/ == 1) { return &#34; &#34; }
        else                            { return &#34;\n\n&#34;; }
    }

    print slurp(\*DATA, {irs=&#62;qr/[ \t]*\n+/, chomp=&#62;\&#38;squeeze}), &#34;\n&#34;;</pre>

<p>Which would transform:</p>

<pre class="sh_perl">    This is the
    first paragraph


    This is the
    second
    paragraph

    This, the
    third




    This one is
    the
    very
    last</pre>

<p>to:</p>

<pre class="sh_perl">    This is the first paragraph

    This is the second paragraph

    This, the third

    This one is the very last</pre>

<p>Autochomping works in both scalar and list contexts. In scalar contexts every instance of the input record separator will be removed (or replaced) within the returned string. In list context, each list item returned with its terminating separator removed (or replaced).</p>

<p>You can specify I/O layers, either using the Perl 5 notation:</p>

<pre class="sh_perl">    slurp &#34;&#60;:layer1 :layer2 :etc&#34;, $filename;</pre>

<p>or as an array of options:</p>

<pre class="sh_perl">    slurp $filename, [layer1=&#62;1, layer2=&#62;1, etc=&#62;1];
    slurp [layer1=&#62;1, layer2=&#62;1, etc=&#62;1], $filename;</pre>

<p>or as individual options (each of which must be in a separate hash):</p>

<pre class="sh_perl">    slurp $filename, {layer1=&#62;1}, {layer2=&#62;1}, {etc=&#62;1};
    slurp {layer1=&#62;1}, {layer2=&#62;1}, {etc=&#62;1}, $filename;</pre>

<p>(...which, of course, would look much cooler in Perl 6:</p>

<pre class="sh_perl">    # Perl 6 only :-(

    slurp $filename, :layer1 :layer2 :etc;
    slurp :layer1 :layer2 :etc, $filename;</pre>

<p>)</p>

<p>A common mistake is to put all the options together in one hash:</p>

<pre class="sh_perl">    slurp $filename, {layer1=&#62;1, layer2=&#62;1, etc=&#62;1};</pre>

<p>This is almost always a disaster, since the order of I/O layers is usually critical, and placing them all in one hash effectively randomizes that order. Use an array instead:</p>

<pre class="sh_perl">    slurp $filename, [layer1=&#62;1, layer2=&#62;1, etc=&#62;1];</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WARNING"
>WARNING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The syntax and semantics of Perl 6 is still being finalized and consequently is at any time subject to change. That means the same caveat applies to this module.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DEPENDENCIES"
>DEPENDENCIES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Requires: Perl 5.8.0, Perl6::Export</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Damian Conway (damian@conway.org)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> Copyright (c) 2003, Damian Conway. All Rights Reserved.
 This module is free software. It may be used, redistributed
    and/or modified under the same terms as Perl itself.</pre>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78056 Uploads, 24684 Distributions
105889 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 21 20:48:51 2012 GMT (0.172981023788452) @cpansearch1 -->
 </body>
</html>
