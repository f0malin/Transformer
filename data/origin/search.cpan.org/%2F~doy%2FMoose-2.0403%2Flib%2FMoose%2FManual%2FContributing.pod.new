<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Moose::Manual::Contributing - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Moose",3]);
    _gaq.push(["_setCustomVar",5,"Release","Moose-2.0403",3]);
    _gaq.push(["_setCustomVar",4,"Document","Moose::Manual::Contributing",3]);
    _gaq.push(["_setCustomVar",1,"Author","DOY",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Moose::Manual::Contributing">permalink</a></div>
  <a href="/~doy/">Jesse Luehrs</a> &gt;
  <a href="/~doy/Moose-2.0403/">Moose-2.0403</a> &gt;
  Moose::Manual::Contributing
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/88766de7a058697d3d0335b8d384fd2a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DO/DOY/Moose-2.0403.tar.gz">Moose-2.0403.tar.gz</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DOY/Moose-2.0403/lib/Moose/Manual/Contributing.pod">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 13</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 27</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=Moose">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
<span class="noprint">
  <a href="/src/DOY/Moose-2.0403/lib/Moose/Manual/Contributing.pod">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~doy/Moose/lib/Moose/Manual/Contributing.pod">Moose-2.0501-TRIAL</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#GETTING_INVOLVED'>GETTING INVOLVED</a>
  <li class='indexItem indexItem1'><a href='#NEW_FEATURES'>NEW FEATURES</a>
  <li class='indexItem indexItem1'><a href='#PEOPLE'>PEOPLE</a>
  <li class='indexItem indexItem1'><a href='#BRANCH_LAYOUT'>BRANCH LAYOUT</a>
  <li class='indexItem indexItem1'><a href='#STANDARD_WORKFLOW'>STANDARD WORKFLOW</a>
  <li class='indexItem indexItem1'><a href='#APPROVAL_WORKFLOW'>APPROVAL WORKFLOW</a>
  <li class='indexItem indexItem1'><a href='#RELEASE_WORKFLOW'>RELEASE WORKFLOW</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Release_How-To'>Release How-To</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EMERGENCY_BUG_WORKFLOW_(for_immediate_release)'>EMERGENCY BUG WORKFLOW (for immediate release)</a>
  <li class='indexItem indexItem1'><a href='#PROJECT_WORKFLOW'>PROJECT WORKFLOW</a>
  <li class='indexItem indexItem1'><a href='#BRANCH_ARCHIVAL'>BRANCH ARCHIVAL</a>
  <li class='indexItem indexItem1'><a href='#TESTS,_TESTS,_TESTS'>TESTS, TESTS, TESTS</a>
  <li class='indexItem indexItem1'><a href='#DOCS,_DOCS,_DOCS'>DOCS, DOCS, DOCS</a>
  <li class='indexItem indexItem1'><a href='#BACKWARDS_COMPATIBILITY'>BACKWARDS COMPATIBILITY</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose::Manual::Contributing - How to get involved in Moose</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>version 2.0403</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="GETTING_INVOLVED"
>GETTING INVOLVED <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose is an open project,
and we are always willing to accept bug fixes,
more tests,
and documentation patches.
Commit bits are given out freely,
and the <a href="#STANDARD_WORKFLOW" class="podlinkpod"
>&#34;STANDARD WORKFLOW&#34;</a> is very simple.
The general gist is: clone the Git repository,
create a new topic branch,
hack away,
then find a committer to review your changes.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NEW_FEATURES"
>NEW FEATURES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose already has a fairly large feature set,
and we are currently <b>not</b> looking to add any major new features to it.
If you have an idea for a new feature in Moose,
you are encouraged to create a MooseX module first.</p>

<p>At this stage,
no new features will even be considered for addition into the core without first being vetted as a MooseX module,
unless it is absolutely 100% impossible to implement the feature outside the core.</p>

<p>If you think it is 100% impossible,
please come discuss it with us on IRC or via e-mail.
Your feature may need a small hook in the core,
or a refactoring of some core modules,
and we are definitely open to that.</p>

<p>Moose was built from the ground up with the idea of being highly extensible,
and quite often the feature requests we see can be implemented through small extensions.
Try it,
it&#39;s much easier than you might think.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PEOPLE"
>PEOPLE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>As Moose has matured,
some structure has emerged in the process.</p>

<dl>
<dt><a name='Contributors'></a><a name="Contributors_-_people_creating_a_topic_or_branch"
>Contributors - people creating a topic or branch</a></dt>

<dd>
<p>You.</p>

<p>If you have commit access,
you can create a topic on the main Moose.git repository.
If you don&#39;t have a commit bit,
give us your SSH key or create your own clone of the <a href="git://git.moose.perl.org/Moose.git" class="podlinkurl"
>git://git.moose.perl.org/Moose.git</a> repository.</p>

<p>The relevant repository URIs are:</p>

<dl>
<dt><a name='Read'></a><a name="Read-Only"
>Read-Only</a></dt>

<dd>
<p><a href="git://git.moose.perl.org/Moose.git" class="podlinkurl"
>git://git.moose.perl.org/Moose.git</a></p>

<dt><a name='Read'></a><a name="Read+Write"
>Read+Write</a></dt>

<dd>
<p><a href="/perldoc?gitmo%40git.moose.perl.org%3AMoose.git" class="podlinkpod"
>gitmo@git.moose.perl.org:Moose.git</a></p>
</dd>
</dl>

<dt><a name='Cabal'></a><a name="Cabal_-_people_who_can_release_moose"
>Cabal - people who can release moose</a></dt>

<dd>
<p>These people are the ones who have co-maint on Moose itself and can create a release.
They&#39;re listed under <a href="/~doy/Moose-2.0403/lib/Moose.pm#CABAL" class="podlinkpod"
>&#34;CABAL&#34; in Moose</a> in the Moose documentation.
They are responsible for reviewing branches,
and are the only people who are allowed to push to stable branches.</p>

<p>Cabal members are listed in <a href="/~doy/Moose-2.0403/lib/Moose.pm" class="podlinkpod"
>Moose</a> and can often be found on irc in the <a href="irc://irc.perl.org/#moose-dev" class="podlinkurl"
>irc://irc.perl.org/#moose-dev</a> channel.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BRANCH_LAYOUT"
>BRANCH LAYOUT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The repository is divided into several branches to make maintenance easier for everyone involved.
The branches below are ordered by level of stability.</p>

<dl>
<dt><a name='stable'></a><a name="stable/*"
>stable/*</a></dt>

<dd>
<p>The branch from which releases are cut.
When making a new major release,
the release manager makes a new <code>stable/X.YY</code> branch at the current position of <code>master</code>.
The version used in the stable branch should not include the last two digits of the version number.</p>

<p>For minor releases,
patches will be committed to <code>master</code>,
and backported (cherry-picked) to the appropriate stable branch as needed.
A stable branch is only updated by someone from the Cabal during a release.</p>

<dt><a name="master"
>master</a></dt>

<dd>
<p>The main development branch.
All new code should be written against this branch.
This branch contains code that has been reviewed,
and will be included in the next major release.
Commits which are judged to not break backwards compatibility may be backported into <code>stable</code> to be included in the next minor release.</p>

<dt><a name='rfc'></a><a name="rfc/*"
>rfc/*</a></dt>

<dd>
<p>Topic branches that are completed and waiting on review.
A Cabal member will look over branches in this namespace,
and either merge them to <code>master</code> if they are acceptable,
or move them back to a different namespace otherwise.</p>

<dt><a name='topic'></a><a name="topic/*"
>topic/*</a></dt>

<dd>
<p>Small personal branches that are still in progress.
They can be freely rebased.
They contain targeted features that may span a handful of commits.
Any change or bugfix should be created in a topic branch.</p>

<dt><a name='attic'></a><a name="attic/*"
>attic/*</a></dt>

<dd>
<p>Branches which have been reviewed,
and rejected.
They remain in the repository in case we later change our mind,
or in case parts of them are still useful.</p>

<dt><a name='abandoned'></a><a name="abandoned/*"
>abandoned/*</a></dt>

<dd>
<p>Topic branches which have had no activity for a long period of time will be moved here,
to keep the main areas clean.</p>
</dd>
</dl>

<p>Larger,
longer term branches can also be created in the root namespace (i.e.
at the same level as master and stable).
This may be appropriate if multiple people are intending to work on the branch.
These branches should not be rebased without checking with other developers first.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="STANDARD_WORKFLOW"
>STANDARD WORKFLOW <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    # update your copy of master
    git checkout master
    git pull --rebase

    # create a new topic branch
    git checkout -b topic/my-feature

    # hack, commit, feel free to break fast forward
    git commit --amend        # allowed
    git rebase --interactive  # allowed
    git push --force          # allowed

    # keep the branch rebased on top of master, for easy reviewing
    git remote update
    git rebase origin/master
    git push --force

    # when finished, move the branch to the rfc/ namespace
    git branch -m rfc/my-feature
    git push
    git push origin :topic/my-feature</pre>

<p>When your branch is completed, make sure it has been moved to the <code>rfc/</code> namespace and is rebased on top of master, and ask for review/approval (see <a href="#APPROVAL_WORKFLOW" class="podlinkpod"
>&#34;APPROVAL WORKFLOW&#34;</a>). If it is approved, the reviewer will merge it into <code>master</code>.</p>

<p>No actual merging (as in a human resolving conflicts) should be done when merging into <code>master</code>, only from <code>master</code> into other branches.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="APPROVAL_WORKFLOW"
>APPROVAL WORKFLOW <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose is an open project but it is also an increasingly important one. Many modules depend on Moose being stable. Therefore, we have a basic set of criteria for reviewing and merging branches. What follows is a set of rough guidelines that ensures all new code is properly vetted before it is merged to the master branch.</p>

<p>It should be noted that if you want your specific branch to be approved, it is <b>your</b> responsibility to follow this process and advocate for your branch. The preferred way is to send a request to the mailing list for review/approval; this allows us to better keep track of the branches awaiting approval and those which have been approved.</p>

<dl>
<dt><a name='Small'></a><a name="Small_bug_fixes,_doc_patches_and_additional_passing_tests."
>Small bug fixes, doc patches and additional passing tests.</a></dt>

<dd>
<p>These items don&#39;t really require approval beyond one of the core contributors just doing a simple review. For especially simple patches (doc patches especially), committing directly to master is fine.</p>

<dt><a name='Larger'></a><a name="Larger_bug_fixes,_doc_additions_and_TODO_or_failing_tests."
>Larger bug fixes, doc additions and TODO or failing tests.</a></dt>

<dd>
<p>Larger bug fixes should be reviewed by at least one cabal member and should be tested using the <em>xt/author/test-my-dependents.t</em> test.</p>

<p>New documentation is always welcome, but should also be reviewed by a cabal member for accuracy.</p>

<p>TODO tests are basically feature requests, see our <a href="#NEW_FEATURES" class="podlinkpod"
>&#34;NEW FEATURES&#34;</a> section for more information on that. If your feature needs core support, create a <code>topic/</code> branch using the <a href="#STANDARD_WORKFLOW" class="podlinkpod"
>&#34;STANDARD WORKFLOW&#34;</a> and start hacking away.</p>

<p>Failing tests are basically bug reports. You should find a core contributor and/or cabal member to see if it is a real bug, then submit the bug and your test to the RT queue. Source control is not a bug reporting tool.</p>

<dt><a name='New'></a><a name="New_user-facing_features."
>New user-facing features.</a></dt>

<dd>
<p>Anything that creates a new user-visible feature needs to be approved by <b>more than one</b> cabal member.</p>

<p>Make sure you have reviewed <a href="#NEW_FEATURES" class="podlinkpod"
>&#34;NEW FEATURES&#34;</a> to be sure that you are following the guidelines. Do not be surprised if a new feature is rejected for the core.</p>

<dt><a name='New'></a><a name="New_internals_features."
>New internals features.</a></dt>

<dd>
<p>New features for Moose internals are less restrictive than user facing features, but still require approval by <b>at least one</b> cabal member.</p>

<p>Ideally you will have run the <em>test-my-dependents.t</em> script to be sure you are not breaking any MooseX module or causing any other unforeseen havoc. If you do this (rather than make us do it), it will only help to hasten your branch&#39;s approval.</p>

<dt><a name='Backwards'></a><a name="Backwards_incompatible_changes."
>Backwards incompatible changes.</a></dt>

<dd>
<p>Anything that breaks backwards compatibility must be discussed by the cabal. Backwards incompatible changes should not be merged to master if there are strong objections from any cabal members.</p>

<p>We have a policy for what we see as sane <a href="#BACKWARDS_COMPATIBILITY" class="podlinkpod"
>&#34;BACKWARDS COMPATIBILITY&#34;</a> for Moose. If your changes break back-compat, you must be ready to discuss and defend your change.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="RELEASE_WORKFLOW"
>RELEASE WORKFLOW <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    # major releases (including trial releases)
    git checkout master

    # minor releases
    git checkout stable/X.YY

    # do final changelogging, etc
    vim dist.ini # increment version number
    git commit
    dzil release # or dzil release --trial for trial releases
    git commit # to add the actual release date
    git branch stable/X.YY # only for non-trial major releases</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Release_How-To"
>Release How-To</a></h2>

<p>Moose uses <a href="/perldoc?Dist%3A%3AZilla" class="podlinkpod"
>Dist::Zilla</a> to manage releases. Although the git repository comes with a <code>Makefile.PL</code>, it is a very basic one just to allow the basic <code>perl Makefile.PL &#38;&#38; make &#38;&#38; make test</code> cycle to work. In particular, it doesn&#39;t include any release metadata, such as dependencies. In order to get started with Dist::Zilla, first install it: <code>cpanm Dist::Zilla</code>, and then install the plugins necessary for reading the <code>dist.ini</code>: <code>dzil authordeps | cpanm</code>.</p>

<p>Moose releases fall into two categories, each with their own level of release preparation. A minor release is one which does not include any API changes, deprecations, and so on. In that case, it is sufficient to simply test the release candidate against a few different different Perls. Testing should be done against at least two recent major version of Perl (5.8.8 and 5.10.1, for example). If you have more versions available, you are encouraged to test them all. However, we do not put a lot of effort into supporting older 5.8.x releases.</p>

<p>For major releases which include an API change or deprecation, you should run the <em>xt/author/test-my-dependents.t</em> test. This tests a long list of MooseX and other Moose-using modules from CPAN. In order to run this script, you must arrange to have the new version of Moose in Perl&#39;s include path. You can use <code>prove -b</code> and <code>prove -I</code>, install the module, or fiddle with the <code>PERL5LIB</code> environment variable, whatever makes you happy.</p>

<p>This test downloads each module from CPAN, runs its tests, and logs failures and warnings to a set of files named <em>test-mydeps-$$-*.log</em>. If there are failures or warnings, please work with the authors of the modules in question to fix them. If the module author simply isn&#39;t available or does not want to fix the bug, it is okay to make a release.</p>

<p>Regardless of whether or not a new module is available, any breakages should be noted in the conflicts list in the distribution&#39;s <em>dist.ini</em>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EMERGENCY_BUG_WORKFLOW_(for_immediate_release)"
>EMERGENCY BUG WORKFLOW (for immediate release) <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The stable branch exists for easily making bug fix releases.</p>

<pre class="sh_perl">    git remote update
    git checkout -b topic/my-emergency-fix origin/master
    # hack
    git commit</pre>

<p>Then a cabal member merges into <code>master</code>, and backports the change into <code>stable/X.YY</code>:</p>

<pre class="sh_perl">    git checkout master
    git merge topic/my-emergency-fix
    git push
    git checkout stable/X.YY
    git cherry-pick -x master
    git push
    # release</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PROJECT_WORKFLOW"
>PROJECT WORKFLOW <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>For longer lasting branches, we use a subversion style branch layout, where master is routinely merged into the branch. Rebasing is allowed as long as all the branch contributors are using <code>git pull --rebase</code> properly.</p>

<p><code>commit --amend</code>, <code>rebase --interactive</code>, etc. are not allowed, and should only be done in topic branches. Committing to master is still done with the same review process as a topic branch, and the branch must merge as a fast forward.</p>

<p>This is pretty much the way we&#39;re doing branches for large-ish things right now.</p>

<p>Obviously there is no technical limitation on the number of branches. You can freely create topic branches off of project branches, or sub projects inside larger projects freely. Such branches should incorporate the name of the branch they were made off so that people don&#39;t accidentally assume they should be merged into master:</p>

<pre class="sh_perl">    git checkout -b my-project--topic/foo my-project</pre>

<p>(unfortunately Git will not allow <code>my-project/foo</code> as a branch name if <code>my-project</code> is a valid ref).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BRANCH_ARCHIVAL"
>BRANCH ARCHIVAL <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Merged branches should be deleted.</p>

<p>Failed branches may be kept, but should be moved to <code>attic/</code> to differentiate them from in-progress topic branches.</p>

<p>Branches that have not been worked on for a long time will be moved to <code>abandoned/</code> periodically, but feel free to move the branch back to <code>topic/</code> if you want to start working on it again.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TESTS,_TESTS,_TESTS"
>TESTS, TESTS, TESTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you write <i>any</i> code for Moose, you <b>must</b> add tests for that code. If you do not write tests then we cannot guarantee your change will not be removed or altered at a later date, as there is nothing to confirm this is desired behavior.</p>

<p>If your code change/addition is deep within the bowels of Moose and your test exercises this feature in a non-obvious way, please add some comments either near the code in question or in the test so that others know.</p>

<p>We also greatly appreciate documentation to go with your changes, and an entry in the Changes file. Make sure to give yourself credit! Major changes or new user-facing features should also be documented in <a href="/~doy/Moose-2.0403/lib/Moose/Manual/Delta.pod" class="podlinkpod"
>Moose::Manual::Delta</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DOCS,_DOCS,_DOCS"
>DOCS, DOCS, DOCS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Any user-facing changes must be accompanied by documentation. If you&#39;re not comfortable writing docs yourself, you might be able to convince another Moose dev to help you.</p>

<p>Our goal is to make sure that all features are documented. Undocumented features are not considered part of the API when it comes to determining whether a change is backwards compatible.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BACKWARDS_COMPATIBILITY"
>BACKWARDS COMPATIBILITY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Change is inevitable, and Moose is not immune to this. We do our best to maintain backwards compatibility, but we do not want the code base to become overburdened by this. This is not to say that we will be frivolous with our changes, quite the opposite, just that we are not afraid of change and will do our best to keep it as painless as possible for the end user.</p>

<p>Our policy for handling backwards compatibility is documented in more detail in <a href="/~doy/Moose-2.0403/lib/Moose/Manual/Support.pod" class="podlinkpod"
>Moose::Manual::Support</a>.</p>

<p>All backwards incompatible changes <b>must</b> be documented in <a href="/~doy/Moose-2.0403/lib/Moose/Manual/Delta.pod" class="podlinkpod"
>Moose::Manual::Delta</a>. Make sure to document any useful tips or workarounds for the change in that document.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose is maintained by the Moose Cabal, along with the help of many contributors. See <a href="/~doy/Moose-2.0403/lib/Moose.pm#CABAL" class="podlinkpod"
>&#34;CABAL&#34; in Moose</a> and <a href="/~doy/Moose-2.0403/lib/Moose.pm#CONTRIBUTORS" class="podlinkpod"
>&#34;CONTRIBUTORS&#34; in Moose</a> for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This software is copyright (c) 2012 by Infinity Interactive, Inc..</p>

<p>This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78177 Uploads, 24708 Distributions
105988 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Document']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Document']);
    });
  });
</script>
<!-- Wed Apr 25 03:08:24 2012 GMT (0.100874900817871) @cpansearch1 -->
 </body>
</html>
