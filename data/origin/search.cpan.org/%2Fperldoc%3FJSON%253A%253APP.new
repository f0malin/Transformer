<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>JSON::PP - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","JSON-PP",3]);
    _gaq.push(["_setCustomVar",5,"Release","JSON-PP-2.27200",3]);
    _gaq.push(["_setCustomVar",3,"Module","JSON::PP",3]);
    _gaq.push(["_setCustomVar",1,"Author","MAKAMAKA",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?JSON::PP">permalink</a></div>
  <a href="/~makamaka/">Makamaka Hannyaharamitu</a> &gt;
  <a href="/~makamaka/JSON-PP-2.27200/">JSON-PP-2.27200</a> &gt;
  JSON::PP
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/36daaac2532981268006980d18ed4795?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/M/MA/MAKAMAKA/JSON-PP-2.27200.tar.gz">JSON-PP-2.27200.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=JSON%3A%3APP;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~MAKAMAKA/JSON-PP-2.27200/lib/JSON/PP.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=JSON-PP">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.27200 &nbsp;
<span class="noprint">
  <a href="/src/MAKAMAKA/JSON-PP-2.27200/lib/JSON/PP.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#NOTE'>NOTE</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#FEATURES'>FEATURES</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#FUNCTIONAL_INTERFACE'>FUNCTIONAL INTERFACE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#encode_json'>encode_json</a>
    <li class='indexItem indexItem2'><a href='#decode_json'>decode_json</a>
    <li class='indexItem indexItem2'><a href='#JSON::PP::is_bool'>JSON::PP::is_bool</a>
    <li class='indexItem indexItem2'><a href='#JSON::PP::true'>JSON::PP::true</a>
    <li class='indexItem indexItem2'><a href='#JSON::PP::false'>JSON::PP::false</a>
    <li class='indexItem indexItem2'><a href='#JSON::PP::null'>JSON::PP::null</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#HOW_DO_I_DECODE_A_DATA_FROM_OUTER_AND_ENCODE_TO_OUTER'>HOW DO I DECODE A DATA FROM OUTER AND ENCODE TO OUTER</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#new'>new</a>
    <li class='indexItem indexItem2'><a href='#ascii'>ascii</a>
    <li class='indexItem indexItem2'><a href='#latin1'>latin1</a>
    <li class='indexItem indexItem2'><a href='#utf8'>utf8</a>
    <li class='indexItem indexItem2'><a href='#pretty'>pretty</a>
    <li class='indexItem indexItem2'><a href='#indent'>indent</a>
    <li class='indexItem indexItem2'><a href='#space_before'>space_before</a>
    <li class='indexItem indexItem2'><a href='#space_after'>space_after</a>
    <li class='indexItem indexItem2'><a href='#relaxed'>relaxed</a>
    <li class='indexItem indexItem2'><a href='#canonical'>canonical</a>
    <li class='indexItem indexItem2'><a href='#allow_nonref'>allow_nonref</a>
    <li class='indexItem indexItem2'><a href='#allow_unknown'>allow_unknown</a>
    <li class='indexItem indexItem2'><a href='#allow_blessed'>allow_blessed</a>
    <li class='indexItem indexItem2'><a href='#convert_blessed'>convert_blessed</a>
    <li class='indexItem indexItem2'><a href='#filter_json_object'>filter_json_object</a>
    <li class='indexItem indexItem2'><a href='#filter_json_single_key_object'>filter_json_single_key_object</a>
    <li class='indexItem indexItem2'><a href='#shrink'>shrink</a>
    <li class='indexItem indexItem2'><a href='#max_depth'>max_depth</a>
    <li class='indexItem indexItem2'><a href='#max_size'>max_size</a>
    <li class='indexItem indexItem2'><a href='#encode'>encode</a>
    <li class='indexItem indexItem2'><a href='#decode'>decode</a>
    <li class='indexItem indexItem2'><a href='#decode_prefix'>decode_prefix</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#INCREMENTAL_PARSING'>INCREMENTAL PARSING</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#incr_parse'>incr_parse</a>
    <li class='indexItem indexItem2'><a href='#incr_text'>incr_text</a>
    <li class='indexItem indexItem2'><a href='#incr_skip'>incr_skip</a>
    <li class='indexItem indexItem2'><a href='#incr_reset'>incr_reset</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#JSON::PP_OWN_METHODS'>JSON::PP OWN METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#allow_singlequote'>allow_singlequote</a>
    <li class='indexItem indexItem2'><a href='#allow_barekey'>allow_barekey</a>
    <li class='indexItem indexItem2'><a href='#allow_bignum'>allow_bignum</a>
    <li class='indexItem indexItem2'><a href='#loose'>loose</a>
    <li class='indexItem indexItem2'><a href='#escape_slash'>escape_slash</a>
    <li class='indexItem indexItem2'><a href='#indent_length'>indent_length</a>
    <li class='indexItem indexItem2'><a href='#sort_by'>sort_by</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#INTERNAL'>INTERNAL</a>
  <li class='indexItem indexItem1'><a href='#MAPPING'>MAPPING</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#JSON_-&#62;_PERL'>JSON -&#62; PERL</a>
    <li class='indexItem indexItem2'><a href='#PERL_-&#62;_JSON'>PERL -&#62; JSON</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#UNICODE_HANDLING_ON_PERLS'>UNICODE HANDLING ON PERLS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Perl_5.8_and_later'>Perl 5.8 and later</a>
    <li class='indexItem indexItem2'><a href='#Perl_5.6'>Perl 5.6</a>
    <li class='indexItem indexItem2'><a href='#Perl_5.005'>Perl 5.005</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#TODO'>TODO</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>JSON::PP - JSON::XS compatible pure-Perl module.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> use JSON::PP;

 # exported functions, they croak on error
 # and expect/generate UTF-8

 $utf8_encoded_json_text = encode_json $perl_hash_or_arrayref;
 $perl_hash_or_arrayref  = decode_json $utf8_encoded_json_text;

 # OO-interface

 $coder = JSON::PP-&#62;new-&#62;ascii-&#62;pretty-&#62;allow_nonref;
 
 $json_text   = $json-&#62;encode( $perl_scalar );
 $perl_scalar = $json-&#62;decode( $json_text );
 
 $pretty_printed = $json-&#62;pretty-&#62;encode( $perl_scalar ); # pretty-printing
 
 # Note that JSON version 2.0 and above will automatically use
 # JSON::XS or JSON::PP, so you should be able to just:
 
 use JSON;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    2.27200</pre>

<p><a href="/perldoc?JSON%3A%3AXS" class="podlinkpod"
>JSON::XS</a> 2.27 (~2.30) compatible.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTE"
>NOTE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>JSON::PP was inculded in JSON distribution (CPAN module). It comes to be a perl core module in Perl 5.14.</p>

<pre class="sh_perl">    [STEPS]

    * release this module as JSON::PPdev.

    * release other PP::* modules as JSON::PP::Compat*.

    * JSON distribution will inculde yet another JSON::PP modules.
      They are JSNO::backportPP. So JSON.pm should work as it did at all!

    * remove JSON::PP and JSON::PP::* modules from JSON distribution
       and release it as developer version.

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    * release JSON distribution as stable version.

    * rename JSON::PPdev into JSON::PP and release on CPAN. &#60;&#60;&#60;&#60; HERE</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is <a href="/perldoc?JSON%3A%3AXS" class="podlinkpod"
>JSON::XS</a> compatible pure Perl module. (Perl 5.8 or later is recommended)</p>

<p>JSON::XS is the fastest and most proper JSON module on CPAN. It is written by Marc Lehmann in C, so must be compiled and installed in the used environment.</p>

<p>JSON::PP is a pure-Perl module and has compatibility to JSON::XS.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="FEATURES"
>FEATURES</a></h2>

<ul>
<li>correct unicode handling
<p>This module knows how to handle Unicode (depending on Perl version).</p>

<p>See to <a href="/perldoc?JSON%3A%3AXS#A_FEW_NOTES_ON_UNICODE_AND_PERL" class="podlinkpod"
>&#34;A FEW NOTES ON UNICODE AND PERL&#34; in JSON::XS</a> and <a href="#UNICODE_HANDLING_ON_PERLS" class="podlinkpod"
>&#34;UNICODE HANDLING ON PERLS&#34;</a>.</p>
</li>

<li>round-trip integrity
<p>When you serialise a perl data structure using only data types supported by JSON and Perl, the deserialised data structure is identical on the Perl level. (e.g. the string &#34;2.0&#34; doesn&#39;t suddenly become &#34;2&#34; just because it looks like a number). There <i>are</i> minor exceptions to this, read the MAPPING section below to learn about those.</p>
</li>

<li>strict checking of JSON correctness
<p>There is no guessing, no generating of illegal JSON texts by default, and only JSON is accepted as input by default (the latter is a security feature). But when some options are set, loose chcking features are available.</p>
</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONAL_INTERFACE"
>FUNCTIONAL INTERFACE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Some documents are copied and modified from <a href="/perldoc?JSON%3A%3AXS#FUNCTIONAL_INTERFACE" class="podlinkpod"
>&#34;FUNCTIONAL INTERFACE&#34; in JSON::XS</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="encode_json"
>encode_json</a></h2>

<pre class="sh_perl">    $json_text = encode_json $perl_scalar</pre>

<p>Converts the given Perl data structure to a UTF-8 encoded, binary string.</p>

<p>This function call is functionally identical to:</p>

<pre class="sh_perl">    $json_text = JSON::PP-&#62;new-&#62;utf8-&#62;encode($perl_scalar)</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="decode_json"
>decode_json</a></h2>

<pre class="sh_perl">    $perl_scalar = decode_json $json_text</pre>

<p>The opposite of <code>encode_json</code>: expects an UTF-8 (binary) string and tries to parse that as an UTF-8 encoded JSON text, returning the resulting reference.</p>

<p>This function call is functionally identical to:</p>

<pre class="sh_perl">    $perl_scalar = JSON::PP-&#62;new-&#62;utf8-&#62;decode($json_text)</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="JSON::PP::is_bool"
>JSON::PP::is_bool</a></h2>

<pre class="sh_perl">    $is_boolean = JSON::PP::is_bool($scalar)</pre>

<p>Returns true if the passed scalar represents either JSON::PP::true or JSON::PP::false, two constants that act like <code>1</code> and <code>0</code> respectively and are also used to represent JSON <code>true</code> and <code>false</code> in Perl strings.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="JSON::PP::true"
>JSON::PP::true</a></h2>

<p>Returns JSON true value which is blessed object. It <code>isa</code> JSON::PP::Boolean object.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="JSON::PP::false"
>JSON::PP::false</a></h2>

<p>Returns JSON false value which is blessed object. It <code>isa</code> JSON::PP::Boolean object.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="JSON::PP::null"
>JSON::PP::null</a></h2>

<p>Returns <code>undef</code>.</p>

<p>See <a href="/perldoc?MAPPING" class="podlinkpod"
>MAPPING</a>, below, for more information on how JSON values are mapped to Perl.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="HOW_DO_I_DECODE_A_DATA_FROM_OUTER_AND_ENCODE_TO_OUTER"
>HOW DO I DECODE A DATA FROM OUTER AND ENCODE TO OUTER <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This section supposes that your perl vresion is 5.8 or later.</p>

<p>If you know a JSON text from an outer world - a network, a file content, and so on, is encoded in UTF-8, you should use <code>decode_json</code> or <code>JSON</code> module object with <code>utf8</code> enable. And the decoded result will contain UNICODE characters.</p>

<pre class="sh_perl">  # from network
  my $json        = JSON::PP-&#62;new-&#62;utf8;
  my $json_text   = CGI-&#62;new-&#62;param( &#39;json_data&#39; );
  my $perl_scalar = $json-&#62;decode( $json_text );
  
  # from file content
  local $/;
  open( my $fh, &#39;&#60;&#39;, &#39;json.data&#39; );
  $json_text   = &#60;$fh&#62;;
  $perl_scalar = decode_json( $json_text );</pre>

<p>If an outer data is not encoded in UTF-8, firstly you should <code>decode</code> it.</p>

<pre class="sh_perl">  use Encode;
  local $/;
  open( my $fh, &#39;&#60;&#39;, &#39;json.data&#39; );
  my $encoding = &#39;cp932&#39;;
  my $unicode_json_text = decode( $encoding, &#60;$fh&#62; ); # UNICODE
  
  # or you can write the below code.
  #
  # open( my $fh, &#34;&#60;:encoding($encoding)&#34;, &#39;json.data&#39; );
  # $unicode_json_text = &#60;$fh&#62;;</pre>

<p>In this case, <code>$unicode_json_text</code> is of course UNICODE string. So you <b>cannot</b> use <code>decode_json</code> nor <code>JSON</code> module object with <code>utf8</code> enable. Instead of them, you use <code>JSON</code> module object with <code>utf8</code> disable.</p>

<pre class="sh_perl">  $perl_scalar = $json-&#62;utf8(0)-&#62;decode( $unicode_json_text );</pre>

<p>Or <code>encode &#39;utf8&#39;</code> and <code>decode_json</code>:</p>

<pre class="sh_perl">  $perl_scalar = decode_json( encode( &#39;utf8&#39;, $unicode_json_text ) );
  # this way is not efficient.</pre>

<p>And now, you want to convert your <code>$perl_scalar</code> into JSON data and send it to an outer world - a network or a file content, and so on.</p>

<p>Your data usually contains UNICODE strings and you want the converted data to be encoded in UTF-8, you should use <code>encode_json</code> or <code>JSON</code> module object with <code>utf8</code> enable.</p>

<pre class="sh_perl">  print encode_json( $perl_scalar ); # to a network? file? or display?
  # or
  print $json-&#62;utf8-&#62;encode( $perl_scalar );</pre>

<p>If <code>$perl_scalar</code> does not contain UNICODE but <code>$encoding</code>-encoded strings for some reason, then its characters are regarded as <b>latin1</b> for perl (because it does not concern with your $encoding). You <b>cannot</b> use <code>encode_json</code> nor <code>JSON</code> module object with <code>utf8</code> enable. Instead of them, you use <code>JSON</code> module object with <code>utf8</code> disable. Note that the resulted text is a UNICODE string but no problem to print it.</p>

<pre class="sh_perl">  # $perl_scalar contains $encoding encoded string values
  $unicode_json_text = $json-&#62;utf8(0)-&#62;encode( $perl_scalar );
  # $unicode_json_text consists of characters less than 0x100
  print $unicode_json_text;</pre>

<p>Or <code>decode $encoding</code> all string values and <code>encode_json</code>:</p>

<pre class="sh_perl">  $perl_scalar-&#62;{ foo } = decode( $encoding, $perl_scalar-&#62;{ foo } );
  # ... do it to each string values, then encode_json
  $json_text = encode_json( $perl_scalar );</pre>

<p>This method is a proper way but probably not efficient.</p>

<p>See to <a href="/perldoc?Encode" class="podlinkpod"
>Encode</a>, <a href="/perldoc?perluniintro" class="podlinkpod"
>perluniintro</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Basically, check to <a href="/perldoc?JSON" class="podlinkpod"
>JSON</a> or <a href="/perldoc?JSON%3A%3AXS" class="podlinkpod"
>JSON::XS</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="new"
>new</a></h2>

<pre class="sh_perl">    $json = JSON::PP-&#62;new</pre>

<p>Rturns a new JSON::PP object that can be used to de/encode JSON strings.</p>

<p>All boolean flags described below are by default <i>disabled</i>.</p>

<p>The mutators for flags all return the JSON object again and thus calls can be chained:</p>

<pre class="sh_perl">   my $json = JSON::PP-&#62;new-&#62;utf8-&#62;space_after-&#62;encode({a =&#62; [1,2]})
   =&#62; {&#34;a&#34;: [1, 2]}</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ascii"
>ascii</a></h2>

<pre class="sh_perl">    $json = $json-&#62;ascii([$enable])
    
    $enabled = $json-&#62;get_ascii</pre>

<p>If $enable is true (or missing), then the encode method will not generate characters outside the code range 0..127. Any Unicode characters outside that range will be escaped using either a single \uXXXX or a double \uHHHH\uLLLLL escape sequence, as per RFC4627. (See to <a href="/perldoc?JSON%3A%3AXS#OBJECT-ORIENTED_INTERFACE" class="podlinkpod"
>&#34;OBJECT-ORIENTED INTERFACE&#34; in JSON::XS</a>).</p>

<p>In Perl 5.005, there is no character having high value (more than 255). See to <a href="#UNICODE_HANDLING_ON_PERLS" class="podlinkpod"
>&#34;UNICODE HANDLING ON PERLS&#34;</a>.</p>

<p>If $enable is false, then the encode method will not escape Unicode characters unless required by the JSON syntax or other flags. This results in a faster and more compact format.</p>

<pre class="sh_perl">  JSON::PP-&#62;new-&#62;ascii(1)-&#62;encode([chr 0x10401])
  =&#62; [&#34;\ud801\udc01&#34;]</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="latin1"
>latin1</a></h2>

<pre class="sh_perl">    $json = $json-&#62;latin1([$enable])
    
    $enabled = $json-&#62;get_latin1</pre>

<p>If $enable is true (or missing), then the encode method will encode the resulting JSON text as latin1 (or iso-8859-1), escaping any characters outside the code range 0..255.</p>

<p>If $enable is false, then the encode method will not escape Unicode characters unless required by the JSON syntax or other flags.</p>

<pre class="sh_perl">  JSON::XS-&#62;new-&#62;latin1-&#62;encode ([&#34;\x{89}\x{abc}&#34;]
  =&#62; [&#34;\x{89}\\u0abc&#34;]    # (perl syntax, U+abc escaped, U+89 not)</pre>

<p>See to <a href="#UNICODE_HANDLING_ON_PERLS" class="podlinkpod"
>&#34;UNICODE HANDLING ON PERLS&#34;</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="utf8"
>utf8</a></h2>

<pre class="sh_perl">    $json = $json-&#62;utf8([$enable])
    
    $enabled = $json-&#62;get_utf8</pre>

<p>If $enable is true (or missing), then the encode method will encode the JSON result into UTF-8, as required by many protocols, while the decode method expects to be handled an UTF-8-encoded string. Please note that UTF-8-encoded strings do not contain any characters outside the range 0..255, they are thus useful for bytewise/binary I/O.</p>

<p>(In Perl 5.005, any character outside the range 0..255 does not exist. See to <a href="#UNICODE_HANDLING_ON_PERLS" class="podlinkpod"
>&#34;UNICODE HANDLING ON PERLS&#34;</a>.)</p>

<p>In future versions, enabling this option might enable autodetection of the UTF-16 and UTF-32 encoding families, as described in RFC4627.</p>

<p>If $enable is false, then the encode method will return the JSON string as a (non-encoded) Unicode string, while decode expects thus a Unicode string. Any decoding or encoding (e.g. to UTF-8 or UTF-16) needs to be done yourself, e.g. using the Encode module.</p>

<p>Example, output UTF-16BE-encoded JSON:</p>

<pre class="sh_perl">  use Encode;
  $jsontext = encode &#34;UTF-16BE&#34;, JSON::PP-&#62;new-&#62;encode ($object);</pre>

<p>Example, decode UTF-32LE-encoded JSON:</p>

<pre class="sh_perl">  use Encode;
  $object = JSON::PP-&#62;new-&#62;decode (decode &#34;UTF-32LE&#34;, $jsontext);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="pretty"
>pretty</a></h2>

<pre class="sh_perl">    $json = $json-&#62;pretty([$enable])</pre>

<p>This enables (or disables) all of the <code>indent</code>, <code>space_before</code> and <code>space_after</code> flags in one call to generate the most readable (or most compact) form possible.</p>

<p>Equivalent to:</p>

<pre class="sh_perl">   $json-&#62;indent-&#62;space_before-&#62;space_after</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="indent"
>indent</a></h2>

<pre class="sh_perl">    $json = $json-&#62;indent([$enable])
    
    $enabled = $json-&#62;get_indent</pre>

<p>The default indent space length is three. You can use <code>indent_length</code> to change the length.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="space_before"
>space_before</a></h2>

<pre class="sh_perl">    $json = $json-&#62;space_before([$enable])
    
    $enabled = $json-&#62;get_space_before</pre>

<p>If <code>$enable</code> is true (or missing), then the <code>encode</code> method will add an extra optional space before the <code>:</code> separating keys from values in JSON objects.</p>

<p>If <code>$enable</code> is false, then the <code>encode</code> method will not add any extra space at those places.</p>

<p>This setting has no effect when decoding JSON texts.</p>

<p>Example, space_before enabled, space_after and indent disabled:</p>

<pre class="sh_perl">   {&#34;key&#34; :&#34;value&#34;}</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="space_after"
>space_after</a></h2>

<pre class="sh_perl">    $json = $json-&#62;space_after([$enable])
    
    $enabled = $json-&#62;get_space_after</pre>

<p>If <code>$enable</code> is true (or missing), then the <code>encode</code> method will add an extra optional space after the <code>:</code> separating keys from values in JSON objects and extra whitespace after the <code>,</code> separating key-value pairs and array members.</p>

<p>If <code>$enable</code> is false, then the <code>encode</code> method will not add any extra space at those places.</p>

<p>This setting has no effect when decoding JSON texts.</p>

<p>Example, space_before and indent disabled, space_after enabled:</p>

<pre class="sh_perl">   {&#34;key&#34;: &#34;value&#34;}</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="relaxed"
>relaxed</a></h2>

<pre class="sh_perl">    $json = $json-&#62;relaxed([$enable])
    
    $enabled = $json-&#62;get_relaxed</pre>

<p>If <code>$enable</code> is true (or missing), then <code>decode</code> will accept some extensions to normal JSON syntax (see below). <code>encode</code> will not be affected in anyway. <i>Be aware that this option makes you accept invalid JSON texts as if they were valid!</i>. I suggest only to use this option to parse application-specific files written by humans (configuration files, resource files etc.)</p>

<p>If <code>$enable</code> is false (the default), then <code>decode</code> will only accept valid JSON texts.</p>

<p>Currently accepted extensions are:</p>

<ul>
<li>list items can have an end-comma
<p>JSON <i>separates</i> array elements and key-value pairs with commas. This can be annoying if you write JSON texts manually and want to be able to quickly append elements, so this extension accepts comma at the end of such items not just between them:</p>

<pre class="sh_perl">   [
      1,
      2, &#60;- this comma not normally allowed
   ]
   {
      &#34;k1&#34;: &#34;v1&#34;,
      &#34;k2&#34;: &#34;v2&#34;, &#60;- this comma not normally allowed
   }</pre>
</li>

<li>shell-style &#39;#&#39;-comments
<p>Whenever JSON allows whitespace, shell-style comments are additionally allowed. They are terminated by the first carriage-return or line-feed character, after which more white-space and comments are allowed.</p>

<pre class="sh_perl">  [
     1, # this comment not allowed in JSON
        # neither this one...
  ]</pre>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="canonical"
>canonical</a></h2>

<pre class="sh_perl">    $json = $json-&#62;canonical([$enable])
    
    $enabled = $json-&#62;get_canonical</pre>

<p>If <code>$enable</code> is true (or missing), then the <code>encode</code> method will output JSON objects by sorting their keys. This is adding a comparatively high overhead.</p>

<p>If <code>$enable</code> is false, then the <code>encode</code> method will output key-value pairs in the order Perl stores them (which will likely change between runs of the same script).</p>

<p>This option is useful if you want the same data structure to be encoded as the same JSON text (given the same overall settings). If it is disabled, the same hash might be encoded differently even if contains the same data, as key-value pairs have no inherent ordering in Perl.</p>

<p>This setting has no effect when decoding JSON texts.</p>

<p>If you want your own sorting routine, you can give a code referece or a subroutine name to <code>sort_by</code>. See to <code>JSON::PP OWN METHODS</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="allow_nonref"
>allow_nonref</a></h2>

<pre class="sh_perl">    $json = $json-&#62;allow_nonref([$enable])
    
    $enabled = $json-&#62;get_allow_nonref</pre>

<p>If <code>$enable</code> is true (or missing), then the <code>encode</code> method can convert a non-reference into its corresponding string, number or null JSON value, which is an extension to RFC4627. Likewise, <code>decode</code> will accept those JSON values instead of croaking.</p>

<p>If <code>$enable</code> is false, then the <code>encode</code> method will croak if it isn&#39;t passed an arrayref or hashref, as JSON texts must either be an object or array. Likewise, <code>decode</code> will croak if given something that is not a JSON object or array.</p>

<pre class="sh_perl">   JSON::PP-&#62;new-&#62;allow_nonref-&#62;encode (&#34;Hello, World!&#34;)
   =&#62; &#34;Hello, World!&#34;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="allow_unknown"
>allow_unknown</a></h2>

<pre class="sh_perl">    $json = $json-&#62;allow_unknown ([$enable])
    
    $enabled = $json-&#62;get_allow_unknown</pre>

<p>If $enable is true (or missing), then &#34;encode&#34; will *not* throw an exception when it encounters values it cannot represent in JSON (for example, filehandles) but instead will encode a JSON &#34;null&#34; value. Note that blessed objects are not included here and are handled separately by c&#60;allow_nonref&#62;.</p>

<p>If $enable is false (the default), then &#34;encode&#34; will throw an exception when it encounters anything it cannot encode as JSON.</p>

<p>This option does not affect &#34;decode&#34; in any way, and it is recommended to leave it off unless you know your communications partner.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="allow_blessed"
>allow_blessed</a></h2>

<pre class="sh_perl">    $json = $json-&#62;allow_blessed([$enable])
    
    $enabled = $json-&#62;get_allow_blessed</pre>

<p>If <code>$enable</code> is true (or missing), then the <code>encode</code> method will not barf when it encounters a blessed reference. Instead, the value of the <b>convert_blessed</b> option will decide whether <code>null</code> (<code>convert_blessed</code> disabled or no <code>TO_JSON</code> method found) or a representation of the object (<code>convert_blessed</code> enabled and <code>TO_JSON</code> method found) is being encoded. Has no effect on <code>decode</code>.</p>

<p>If <code>$enable</code> is false (the default), then <code>encode</code> will throw an exception when it encounters a blessed object.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="convert_blessed"
>convert_blessed</a></h2>

<pre class="sh_perl">    $json = $json-&#62;convert_blessed([$enable])
    
    $enabled = $json-&#62;get_convert_blessed</pre>

<p>If <code>$enable</code> is true (or missing), then <code>encode</code>, upon encountering a blessed object, will check for the availability of the <code>TO_JSON</code> method on the object&#39;s class. If found, it will be called in scalar context and the resulting scalar will be encoded instead of the object. If no <code>TO_JSON</code> method is found, the value of <code>allow_blessed</code> will decide what to do.</p>

<p>The <code>TO_JSON</code> method may safely call die if it wants. If <code>TO_JSON</code> returns other blessed objects, those will be handled in the same way. <code>TO_JSON</code> must take care of not causing an endless recursion cycle (== crash) in this case. The name of <code>TO_JSON</code> was chosen because other methods called by the Perl core (== not by the user of the object) are usually in upper case letters and to avoid collisions with the <code>to_json</code> function or method.</p>

<p>This setting does not yet influence <code>decode</code> in any way.</p>

<p>If <code>$enable</code> is false, then the <code>allow_blessed</code> setting will decide what to do when a blessed object is found.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="filter_json_object"
>filter_json_object</a></h2>

<pre class="sh_perl">    $json = $json-&#62;filter_json_object([$coderef])</pre>

<p>When <code>$coderef</code> is specified, it will be called from <code>decode</code> each time it decodes a JSON object. The only argument passed to the coderef is a reference to the newly-created hash. If the code references returns a single scalar (which need not be a reference), this value (i.e. a copy of that scalar to avoid aliasing) is inserted into the deserialised data structure. If it returns an empty list (NOTE: <i>not</i> <code>undef</code>, which is a valid scalar), the original deserialised hash will be inserted. This setting can slow down decoding considerably.</p>

<p>When <code>$coderef</code> is omitted or undefined, any existing callback will be removed and <code>decode</code> will not change the deserialised hash in any way.</p>

<p>Example, convert all JSON objects into the integer 5:</p>

<pre class="sh_perl">   my $js = JSON::PP-&#62;new-&#62;filter_json_object (sub { 5 });
   # returns [5]
   $js-&#62;decode (&#39;[{}]&#39;); # the given subroutine takes a hash reference.
   # throw an exception because allow_nonref is not enabled
   # so a lone 5 is not allowed.
   $js-&#62;decode (&#39;{&#34;a&#34;:1, &#34;b&#34;:2}&#39;);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="filter_json_single_key_object"
>filter_json_single_key_object</a></h2>

<pre class="sh_perl">    $json = $json-&#62;filter_json_single_key_object($key [=&#62; $coderef])</pre>

<p>Works remotely similar to <code>filter_json_object</code>, but is only called for JSON objects having a single key named <code>$key</code>.</p>

<p>This <code>$coderef</code> is called before the one specified via <code>filter_json_object</code>, if any. It gets passed the single value in the JSON object. If it returns a single value, it will be inserted into the data structure. If it returns nothing (not even <code>undef</code> but the empty list), the callback from <code>filter_json_object</code> will be called next, as if no single-key callback were specified.</p>

<p>If <code>$coderef</code> is omitted or undefined, the corresponding callback will be disabled. There can only ever be one callback for a given key.</p>

<p>As this callback gets called less often then the <code>filter_json_object</code> one, decoding speed will not usually suffer as much. Therefore, single-key objects make excellent targets to serialise Perl objects into, especially as single-key JSON objects are as close to the type-tagged value concept as JSON gets (it&#39;s basically an ID/VALUE tuple). Of course, JSON does not support this in any way, so you need to make sure your data never looks like a serialised Perl hash.</p>

<p>Typical names for the single object key are <code>__class_whatever__</code>, or <code>$__dollars_are_rarely_used__$</code> or <code>}ugly_brace_placement</code>, or even things like <code>__class_md5sum(classname)__</code>, to reduce the risk of clashing with real hashes.</p>

<p>Example, decode JSON objects of the form <code>{ &#34;__widget__&#34; =&#62; &#60;id&#62; }</code> into the corresponding <code>$WIDGET{&#60;id&#62;}</code> object:</p>

<pre class="sh_perl">   # return whatever is in $WIDGET{5}:
   JSON::PP
      -&#62;new
      -&#62;filter_json_single_key_object (__widget__ =&#62; sub {
            $WIDGET{ $_[0] }
         })
      -&#62;decode (&#39;{&#34;__widget__&#34;: 5&#39;)

   # this can be used with a TO_JSON method in some &#34;widget&#34; class
   # for serialisation to json:
   sub WidgetBase::TO_JSON {
      my ($self) = @_;

      unless ($self-&#62;{id}) {
         $self-&#62;{id} = ..get..some..id..;
         $WIDGET{$self-&#62;{id}} = $self;
      }

      { __widget__ =&#62; $self-&#62;{id} }
   }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="shrink"
>shrink</a></h2>

<pre class="sh_perl">    $json = $json-&#62;shrink([$enable])
    
    $enabled = $json-&#62;get_shrink</pre>

<p>In JSON::XS, this flag resizes strings generated by either <code>encode</code> or <code>decode</code> to their minimum size possible. It will also try to downgrade any strings to octet-form if possible.</p>

<p>In JSON::PP, it is noop about resizing strings but tries <code>utf8::downgrade</code> to the returned string by <code>encode</code>. See to <a href="/perldoc?utf8" class="podlinkpod"
>utf8</a>.</p>

<p>See to <a href="/perldoc?JSON%3A%3AXS#OBJECT-ORIENTED_INTERFACE" class="podlinkpod"
>&#34;OBJECT-ORIENTED INTERFACE&#34; in JSON::XS</a></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="max_depth"
>max_depth</a></h2>

<pre class="sh_perl">    $json = $json-&#62;max_depth([$maximum_nesting_depth])
    
    $max_depth = $json-&#62;get_max_depth</pre>

<p>Sets the maximum nesting level (default <code>512</code>) accepted while encoding or decoding. If a higher nesting level is detected in JSON text or a Perl data structure, then the encoder and decoder will stop and croak at that point.</p>

<p>Nesting level is defined by number of hash- or arrayrefs that the encoder needs to traverse to reach a given point or the number of <code>{</code> or <code>[</code> characters without their matching closing parenthesis crossed to reach a given character in a string.</p>

<p>If no argument is given, the highest possible setting will be used, which is rarely useful.</p>

<p>See <a href="/perldoc?JSON%3A%3AXS#SSECURITY_CONSIDERATIONS" class="podlinkpod"
>&#34;SSECURITY CONSIDERATIONS&#34; in JSON::XS</a> for more info on why this is useful.</p>

<p>When a large value (100 or more) was set and it de/encodes a deep nested object/text, it may raise a warning &#39;Deep recursion on subroutin&#39; at the perl runtime phase.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="max_size"
>max_size</a></h2>

<pre class="sh_perl">    $json = $json-&#62;max_size([$maximum_string_size])
    
    $max_size = $json-&#62;get_max_size</pre>

<p>Set the maximum length a JSON text may have (in bytes) where decoding is being attempted. The default is <code>0</code>, meaning no limit. When <code>decode</code> is called on a string that is longer then this many bytes, it will not attempt to decode the string but throw an exception. This setting has no effect on <code>encode</code> (yet).</p>

<p>If no argument is given, the limit check will be deactivated (same as when <code>0</code> is specified).</p>

<p>See <a href="/perldoc?JSON%3A%3AXS#SSECURITY_CONSIDERATIONS" class="podlinkpod"
>&#34;SSECURITY CONSIDERATIONS&#34; in JSON::XS</a> for more info on why this is useful.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="encode"
>encode</a></h2>

<pre class="sh_perl">    $json_text = $json-&#62;encode($perl_scalar)</pre>

<p>Converts the given Perl data structure (a simple scalar or a reference to a hash or array) to its JSON representation. Simple scalars will be converted into JSON string or number sequences, while references to arrays become JSON arrays and references to hashes become JSON objects. Undefined Perl values (e.g. <code>undef</code>) become JSON <code>null</code> values. References to the integers <code>0</code> and <code>1</code> are converted into <code>true</code> and <code>false</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="decode"
>decode</a></h2>

<pre class="sh_perl">    $perl_scalar = $json-&#62;decode($json_text)</pre>

<p>The opposite of <code>encode</code>: expects a JSON text and tries to parse it, returning the resulting simple scalar or reference. Croaks on error.</p>

<p>JSON numbers and strings become simple Perl scalars. JSON arrays become Perl arrayrefs and JSON objects become Perl hashrefs. <code>true</code> becomes <code>1</code> (<code>JSON::true</code>), <code>false</code> becomes <code>0</code> (<code>JSON::false</code>) and <code>null</code> becomes <code>undef</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="decode_prefix"
>decode_prefix</a></h2>

<pre class="sh_perl">    ($perl_scalar, $characters) = $json-&#62;decode_prefix($json_text)</pre>

<p>This works like the <code>decode</code> method, but instead of raising an exception when there is trailing garbage after the first JSON object, it will silently stop parsing there and return the number of characters consumed so far.</p>

<pre class="sh_perl">   JSON-&#62;new-&#62;decode_prefix (&#34;[1] the tail&#34;)
   =&#62; ([], 3)</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INCREMENTAL_PARSING"
>INCREMENTAL PARSING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Most of this section are copied and modified from <a href="/perldoc?JSON%3A%3AXS#INCREMENTAL_PARSING" class="podlinkpod"
>&#34;INCREMENTAL PARSING&#34; in JSON::XS</a>.</p>

<p>In some cases, there is the need for incremental parsing of JSON texts. This module does allow you to parse a JSON stream incrementally. It does so by accumulating text until it has a full JSON object, which it then can decode. This process is similar to using <code>decode_prefix</code> to see if a full JSON object is available, but is much more efficient (and can be implemented with a minimum of method calls).</p>

<p>This module will only attempt to parse the JSON text once it is sure it has enough text to get a decisive result, using a very simple but truly incremental parser. This means that it sometimes won&#39;t stop as early as the full parser, for example, it doesn&#39;t detect parenthese mismatches. The only thing it guarantees is that it starts decoding as soon as a syntactically valid JSON text has been seen. This means you need to set resource limits (e.g. <code>max_size</code>) to ensure the parser will stop parsing in the presence if syntax errors.</p>

<p>The following methods implement this incremental parser.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="incr_parse"
>incr_parse</a></h2>

<pre class="sh_perl">    $json-&#62;incr_parse( [$string] ) # void context
    
    $obj_or_undef = $json-&#62;incr_parse( [$string] ) # scalar context
    
    @obj_or_empty = $json-&#62;incr_parse( [$string] ) # list context</pre>

<p>This is the central parsing function. It can both append new text and extract objects from the stream accumulated so far (both of these functions are optional).</p>

<p>If <code>$string</code> is given, then this string is appended to the already existing JSON fragment stored in the <code>$json</code> object.</p>

<p>After that, if the function is called in void context, it will simply return without doing anything further. This can be used to add more text in as many chunks as you want.</p>

<p>If the method is called in scalar context, then it will try to extract exactly <i>one</i> JSON object. If that is successful, it will return this object, otherwise it will return <code>undef</code>. If there is a parse error, this method will croak just as <code>decode</code> would do (one can then use <code>incr_skip</code> to skip the errornous part). This is the most common way of using the method.</p>

<p>And finally, in list context, it will try to extract as many objects from the stream as it can find and return them, or the empty list otherwise. For this to work, there must be no separators between the JSON objects or arrays, instead they must be concatenated back-to-back. If an error occurs, an exception will be raised as in the scalar context case. Note that in this case, any previously-parsed JSON texts will be lost.</p>

<p>Example: Parse some JSON arrays/objects in a given string and return them.</p>

<pre class="sh_perl">    my @objs = JSON-&#62;new-&#62;incr_parse (&#34;[5][7][1,2]&#34;);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="incr_text"
>incr_text</a></h2>

<pre class="sh_perl">    $lvalue_string = $json-&#62;incr_text</pre>

<p>This method returns the currently stored JSON fragment as an lvalue, that is, you can manipulate it. This <i>only</i> works when a preceding call to <code>incr_parse</code> in <i>scalar context</i> successfully returned an object. Under all other circumstances you must not call this function (I mean it. although in simple tests it might actually work, it <i>will</i> fail under real world conditions). As a special exception, you can also call this method before having parsed anything.</p>

<p>This function is useful in two cases: a) finding the trailing text after a JSON object or b) parsing multiple JSON objects separated by non-JSON text (such as commas).</p>

<pre class="sh_perl">    $json-&#62;incr_text =~ s/\s*,\s*//;</pre>

<p>In Perl 5.005, <code>lvalue</code> attribute is not available. You must write codes like the below:</p>

<pre class="sh_perl">    $string = $json-&#62;incr_text;
    $string =~ s/\s*,\s*//;
    $json-&#62;incr_text( $string );</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="incr_skip"
>incr_skip</a></h2>

<pre class="sh_perl">    $json-&#62;incr_skip</pre>

<p>This will reset the state of the incremental parser and will remove the parsed text from the input buffer. This is useful after <code>incr_parse</code> died, in which case the input buffer and incremental parser state is left unchanged, to skip the text parsed so far and to reset the parse state.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="incr_reset"
>incr_reset</a></h2>

<pre class="sh_perl">    $json-&#62;incr_reset</pre>

<p>This completely resets the incremental parser, that is, after this call, it will be as if the parser had never parsed anything.</p>

<p>This is useful if you want ot repeatedly parse JSON objects and want to ignore any trailing data, which means you have to reset the parser after each successful decode.</p>

<p>See to <a href="/perldoc?JSON%3A%3AXS#INCREMENTAL_PARSING" class="podlinkpod"
>&#34;INCREMENTAL PARSING&#34; in JSON::XS</a> for examples.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="JSON::PP_OWN_METHODS"
>JSON::PP OWN METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="allow_singlequote"
>allow_singlequote</a></h2>

<pre class="sh_perl">    $json = $json-&#62;allow_singlequote([$enable])</pre>

<p>If <code>$enable</code> is true (or missing), then <code>decode</code> will accept JSON strings quoted by single quotations that are invalid JSON format.</p>

<pre class="sh_perl">    $json-&#62;allow_singlequote-&#62;decode({&#34;foo&#34;:&#39;bar&#39;});
    $json-&#62;allow_singlequote-&#62;decode({&#39;foo&#39;:&#34;bar&#34;});
    $json-&#62;allow_singlequote-&#62;decode({&#39;foo&#39;:&#39;bar&#39;});</pre>

<p>As same as the <code>relaxed</code> option, this option may be used to parse application-specific files written by humans.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="allow_barekey"
>allow_barekey</a></h2>

<pre class="sh_perl">    $json = $json-&#62;allow_barekey([$enable])</pre>

<p>If <code>$enable</code> is true (or missing), then <code>decode</code> will accept bare keys of JSON object that are invalid JSON format.</p>

<p>As same as the <code>relaxed</code> option, this option may be used to parse application-specific files written by humans.</p>

<pre class="sh_perl">    $json-&#62;allow_barekey-&#62;decode(&#39;{foo:&#34;bar&#34;}&#39;);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="allow_bignum"
>allow_bignum</a></h2>

<pre class="sh_perl">    $json = $json-&#62;allow_bignum([$enable])</pre>

<p>If <code>$enable</code> is true (or missing), then <code>decode</code> will convert the big integer Perl cannot handle as integer into a <a href="/perldoc?Math%3A%3ABigInt" class="podlinkpod"
>Math::BigInt</a> object and convert a floating number (any) into a <a href="/perldoc?Math%3A%3ABigFloat" class="podlinkpod"
>Math::BigFloat</a>.</p>

<p>On the contary, <code>encode</code> converts <code>Math::BigInt</code> objects and <code>Math::BigFloat</code> objects into JSON numbers with <code>allow_blessed</code> enable.</p>

<pre class="sh_perl">   $json-&#62;allow_nonref-&#62;allow_blessed-&#62;allow_bignum;
   $bigfloat = $json-&#62;decode(&#39;2.000000000000000000000000001&#39;);
   print $json-&#62;encode($bigfloat);
   # =&#62; 2.000000000000000000000000001</pre>

<p>See to <a href="/perldoc?JSON%3A%3AXS#MAPPING" class="podlinkpod"
>&#34;MAPPING&#34; in JSON::XS</a> aboout the normal conversion of JSON number.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="loose"
>loose</a></h2>

<pre class="sh_perl">    $json = $json-&#62;loose([$enable])</pre>

<p>The unescaped [\x00-\x1f\x22\x2f\x5c] strings are invalid in JSON strings and the module doesn&#39;t allow to <code>decode</code> to these (except for \x2f). If <code>$enable</code> is true (or missing), then <code>decode</code> will accept these unescaped strings.</p>

<pre class="sh_perl">    $json-&#62;loose-&#62;decode(qq|[&#34;abc
                                   def&#34;]|);</pre>

<p>See <a href="/perldoc?JSON%3A%3AXS#SSECURITY_CONSIDERATIONS" class="podlinkpod"
>&#34;SSECURITY CONSIDERATIONS&#34; in JSON::XS</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="escape_slash"
>escape_slash</a></h2>

<pre class="sh_perl">    $json = $json-&#62;escape_slash([$enable])</pre>

<p>According to JSON Grammar, <i>slash</i> (U+002F) is escaped. But default JSON::PP (as same as JSON::XS) encodes strings without escaping slash.</p>

<p>If <code>$enable</code> is true (or missing), then <code>encode</code> will escape slashes.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="indent_length"
>indent_length</a></h2>

<pre class="sh_perl">    $json = $json-&#62;indent_length($length)</pre>

<p>JSON::XS indent space length is 3 and cannot be changed. JSON::PP set the indent space length with the given $length. The default is 3. The acceptable range is 0 to 15.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="sort_by"
>sort_by</a></h2>

<pre class="sh_perl">    $json = $json-&#62;sort_by($function_name)
    $json = $json-&#62;sort_by($subroutine_ref)</pre>

<p>If $function_name or $subroutine_ref are set, its sort routine are used in encoding JSON objects.</p>

<pre class="sh_perl">   $js = $pc-&#62;sort_by(sub { $JSON::PP::a cmp $JSON::PP::b })-&#62;encode($obj);
   # is($js, q|{&#34;a&#34;:1,&#34;b&#34;:2,&#34;c&#34;:3,&#34;d&#34;:4,&#34;e&#34;:5,&#34;f&#34;:6,&#34;g&#34;:7,&#34;h&#34;:8,&#34;i&#34;:9}|);

   $js = $pc-&#62;sort_by(&#39;own_sort&#39;)-&#62;encode($obj);
   # is($js, q|{&#34;a&#34;:1,&#34;b&#34;:2,&#34;c&#34;:3,&#34;d&#34;:4,&#34;e&#34;:5,&#34;f&#34;:6,&#34;g&#34;:7,&#34;h&#34;:8,&#34;i&#34;:9}|);

   sub JSON::PP::own_sort { $JSON::PP::a cmp $JSON::PP::b }</pre>

<p>As the sorting routine runs in the JSON::PP scope, the given subroutine name and the special variables <code>$a</code>, <code>$b</code> will begin &#39;JSON::PP::&#39;.</p>

<p>If $integer is set, then the effect is same as <code>canonical</code> on.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INTERNAL"
>INTERNAL <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>For developers.</p>

<dl>
<dt><a name="PP_encode_box"
>PP_encode_box</a></dt>

<dd>
<p>Returns</p>

<pre class="sh_perl">        {
            depth        =&#62; $depth,
            indent_count =&#62; $indent_count,
        }</pre>

<dt><a name="PP_decode_box"
>PP_decode_box</a></dt>

<dd>
<p>Returns</p>

<pre class="sh_perl">        {
            text    =&#62; $text,
            at      =&#62; $at,
            ch      =&#62; $ch,
            len     =&#62; $len,
            depth   =&#62; $depth,
            encoding      =&#62; $encoding,
            is_valid_utf8 =&#62; $is_valid_utf8,
        };</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MAPPING"
>MAPPING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This section is copied from JSON::XS and modified to <code>JSON::PP</code>. JSON::XS and JSON::PP mapping mechanisms are almost equivalent.</p>

<p>See to <a href="/perldoc?JSON%3A%3AXS#MAPPING" class="podlinkpod"
>&#34;MAPPING&#34; in JSON::XS</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="JSON_-&#62;_PERL"
>JSON -&#62; PERL</a></h2>

<dl>
<dt><a name="object"
>object</a></dt>

<dd>
<p>A JSON object becomes a reference to a hash in Perl. No ordering of object keys is preserved (JSON does not preserver object key ordering itself).</p>

<dt><a name="array"
>array</a></dt>

<dd>
<p>A JSON array becomes a reference to an array in Perl.</p>

<dt><a name="string"
>string</a></dt>

<dd>
<p>A JSON string becomes a string scalar in Perl - Unicode codepoints in JSON are represented by the same codepoints in the Perl string, so no manual decoding is necessary.</p>

<dt><a name="number"
>number</a></dt>

<dd>
<p>A JSON number becomes either an integer, numeric (floating point) or string scalar in perl, depending on its range and any fractional parts. On the Perl level, there is no difference between those as Perl handles all the conversion details, but an integer may take slightly less memory and might represent more values exactly than floating point numbers.</p>

<p>If the number consists of digits only, <code>JSON</code> will try to represent it as an integer value. If that fails, it will try to represent it as a numeric (floating point) value if that is possible without loss of precision. Otherwise it will preserve the number as a string value (in which case you lose roundtripping ability, as the JSON number will be re-encoded toa JSON string).</p>

<p>Numbers containing a fractional or exponential part will always be represented as numeric (floating point) values, possibly at a loss of precision (in which case you might lose perfect roundtripping ability, but the JSON number will still be re-encoded as a JSON number).</p>

<p>Note that precision is not accuracy - binary floating point values cannot represent most decimal fractions exactly, and when converting from and to floating point, <code>JSON</code> only guarantees precision up to but not including the leats significant bit.</p>

<p>When <code>allow_bignum</code> is enable, the big integers and the numeric can be optionally converted into <a href="/perldoc?Math%3A%3ABigInt" class="podlinkpod"
>Math::BigInt</a> and <a href="/perldoc?Math%3A%3ABigFloat" class="podlinkpod"
>Math::BigFloat</a> objects.</p>

<dt><a name='true'></a><a name="true,_false"
>true, false</a></dt>

<dd>
<p>These JSON atoms become <code>JSON::PP::true</code> and <code>JSON::PP::false</code>, respectively. They are overloaded to act almost exactly like the numbers <code>1</code> and <code>0</code>. You can check wether a scalar is a JSON boolean by using the <code>JSON::is_bool</code> function.</p>

<pre class="sh_perl">   print JSON::PP::true . &#34;\n&#34;;
    =&#62; true
   print JSON::PP::true + 1;
    =&#62; 1

   ok(JSON::true eq  &#39;1&#39;);
   ok(JSON::true == 1);</pre>

<p><code>JSON</code> will install these missing overloading features to the backend modules.</p>

<dt><a name="null"
>null</a></dt>

<dd>
<p>A JSON null atom becomes <code>undef</code> in Perl.</p>

<p><code>JSON::PP::null</code> returns <code>unddef</code>.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="PERL_-&#62;_JSON"
>PERL -&#62; JSON</a></h2>

<p>The mapping from Perl to JSON is slightly more difficult, as Perl is a truly typeless language, so we can only guess which JSON type is meant by a Perl value.</p>

<dl>
<dt><a name='hash'></a><a name="hash_references"
>hash references</a></dt>

<dd>
<p>Perl hash references become JSON objects. As there is no inherent ordering in hash keys (or JSON objects), they will usually be encoded in a pseudo-random order that can change between runs of the same program but stays generally the same within a single run of a program. <code>JSON</code> optionally sort the hash keys (determined by the <i>canonical</i> flag), so the same datastructure will serialise to the same JSON text (given same settings and version of JSON::XS), but this incurs a runtime overhead and is only rarely useful, e.g. when you want to compare some JSON text against another for equality.</p>

<dt><a name='array'></a><a name="array_references"
>array references</a></dt>

<dd>
<p>Perl array references become JSON arrays.</p>

<dt><a name='other'></a><a name="other_references"
>other references</a></dt>

<dd>
<p>Other unblessed references are generally not allowed and will cause an exception to be thrown, except for references to the integers <code>0</code> and <code>1</code>, which get turned into <code>false</code> and <code>true</code> atoms in JSON. You can also use <code>JSON::false</code> and <code>JSON::true</code> to improve readability.</p>

<pre class="sh_perl">   to_json [\0,JSON::PP::true]      # yields [false,true]</pre>

<dt><a name='JSON'></a><a name="JSON::PP::true,_JSON::PP::false,_JSON::PP::null"
>JSON::PP::true, JSON::PP::false, JSON::PP::null</a></dt>

<dd>
<p>These special values become JSON true and JSON false values, respectively. You can also use <code>\1</code> and <code>\0</code> directly if you want.</p>

<p>JSON::PP::null returns <code>undef</code>.</p>

<dt><a name='blessed'></a><a name="blessed_objects"
>blessed objects</a></dt>

<dd>
<p>Blessed objects are not directly representable in JSON. See the <code>allow_blessed</code> and <code>convert_blessed</code> methods on various options on how to deal with this: basically, you can choose between throwing an exception, encoding the reference as if it weren&#39;t blessed, or provide your own serialiser method.</p>

<p>See to <a href="/perldoc?convert_blessed" class="podlinkpod"
>convert_blessed</a>.</p>

<dt><a name='simple'></a><a name="simple_scalars"
>simple scalars</a></dt>

<dd>
<p>Simple Perl scalars (any scalar that is not a reference) are the most difficult objects to encode: JSON::XS and JSON::PP will encode undefined scalars as JSON <code>null</code> values, scalars that have last been used in a string context before encoding as JSON strings, and anything else as number value:</p>

<pre class="sh_perl">   # dump as number
   encode_json [2]                      # yields [2]
   encode_json [-3.0e17]                # yields [-3e+17]
   my $value = 5; encode_json [$value]  # yields [5]

   # used as string, so dump as string
   print $value;
   encode_json [$value]                 # yields [&#34;5&#34;]

   # undef becomes null
   encode_json [undef]                  # yields [null]</pre>

<p>You can force the type to be a string by stringifying it:</p>

<pre class="sh_perl">   my $x = 3.1; # some variable containing a number
   &#34;$x&#34;;        # stringified
   $x .= &#34;&#34;;    # another, more awkward way to stringify
   print $x;    # perl does it for you, too, quite often</pre>

<p>You can force the type to be a number by numifying it:</p>

<pre class="sh_perl">   my $x = &#34;3&#34;; # some variable containing a string
   $x += 0;     # numify it, ensuring it will be dumped as a number
   $x *= 1;     # same thing, the choise is yours.</pre>

<p>You can not currently force the type in other, less obscure, ways.</p>

<p>Note that numerical precision has the same meaning as under Perl (so binary to decimal conversion follows the same rules as in Perl, which can differ to other languages). Also, your perl interpreter might expose extensions to the floating point numbers of your platform, such as infinities or NaN&#39;s - these cannot be represented in JSON, and it is an error to pass those in.</p>

<dt><a name='Big'></a><a name="Big_Number"
>Big Number</a></dt>

<dd>
<p>When <code>allow_bignum</code> is enable, <code>encode</code> converts <code>Math::BigInt</code> objects and <code>Math::BigFloat</code> objects into JSON numbers.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="UNICODE_HANDLING_ON_PERLS"
>UNICODE HANDLING ON PERLS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you do not know about Unicode on Perl well, please check <a href="/perldoc?JSON%3A%3AXS#A_FEW_NOTES_ON_UNICODE_AND_PERL" class="podlinkpod"
>&#34;A FEW NOTES ON UNICODE AND PERL&#34; in JSON::XS</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Perl_5.8_and_later"
>Perl 5.8 and later</a></h2>

<p>Perl can handle Unicode and the JSON::PP de/encode methods also work properly.</p>

<pre class="sh_perl">    $json-&#62;allow_nonref-&#62;encode(chr hex 3042);
    $json-&#62;allow_nonref-&#62;encode(chr hex 12345);</pre>

<p>Reuturns <code>&#34;\u3042&#34;</code> and <code>&#34;\ud808\udf45&#34;</code> respectively.</p>

<pre class="sh_perl">    $json-&#62;allow_nonref-&#62;decode(&#39;&#34;\u3042&#34;&#39;);
    $json-&#62;allow_nonref-&#62;decode(&#39;&#34;\ud808\udf45&#34;&#39;);</pre>

<p>Returns UTF-8 encoded strings with UTF8 flag, regarded as <code>U+3042</code> and <code>U+12345</code>.</p>

<p>Note that the versions from Perl 5.8.0 to 5.8.2, Perl built-in <code>join</code> was broken, so JSON::PP wraps the <code>join</code> with a subroutine. Thus JSON::PP works slow in the versions.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Perl_5.6"
>Perl 5.6</a></h2>

<p>Perl can handle Unicode and the JSON::PP de/encode methods also work.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Perl_5.005"
>Perl 5.005</a></h2>

<p>Perl 5.005 is a byte sementics world -- all strings are sequences of bytes. That means the unicode handling is not available.</p>

<p>In encoding,</p>

<pre class="sh_perl">    $json-&#62;allow_nonref-&#62;encode(chr hex 3042);  # hex 3042 is 12354.
    $json-&#62;allow_nonref-&#62;encode(chr hex 12345); # hex 12345 is 74565.</pre>

<p>Returns <code>B</code> and <code>E</code>, as <code>chr</code> takes a value more than 255, it treats as <code>$value % 256</code>, so the above codes are equivalent to :</p>

<pre class="sh_perl">    $json-&#62;allow_nonref-&#62;encode(chr 66);
    $json-&#62;allow_nonref-&#62;encode(chr 69);</pre>

<p>In decoding,</p>

<pre class="sh_perl">    $json-&#62;decode(&#39;&#34;\u00e3\u0081\u0082&#34;&#39;);</pre>

<p>The returned is a byte sequence <code>0xE3 0x81 0x82</code> for UTF-8 encoded japanese character (<code>HIRAGANA LETTER A</code>). And if it is represented in Unicode code point, <code>U+3042</code>.</p>

<p>Next,</p>

<pre class="sh_perl">    $json-&#62;decode(&#39;&#34;\u3042&#34;&#39;);</pre>

<p>We ordinary expect the returned value is a Unicode character <code>U+3042</code>. But here is 5.005 world. This is <code>0xE3 0x81 0x82</code>.</p>

<pre class="sh_perl">    $json-&#62;decode(&#39;&#34;\ud808\udf45&#34;&#39;);</pre>

<p>This is not a character <code>U+12345</code> but bytes - <code>0xf0 0x92 0x8d 0x85</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TODO"
>TODO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name="speed"
>speed</a></dt>

<dd>
<dt><a name='memory'></a><a name="memory_saving"
>memory saving</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Most of the document are copied and modified from <a href="/perldoc?JSON%3A%3AXS" class="podlinkpod"
>JSON::XS</a> doc.</p>

<p><a href="/perldoc?JSON%3A%3AXS" class="podlinkpod"
>JSON::XS</a></p>

<p>RFC4627 (<a href="http://www.ietf.org/rfc/rfc4627.txt" class="podlinkurl"
>http://www.ietf.org/rfc/rfc4627.txt</a>)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Makamaka Hannyaharamitu, &#60;makamaka[at]cpan.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2007-2011 by Makamaka Hannyaharamitu</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78260 Uploads, 24722 Distributions
105996 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 13:34:16 2012 GMT (0.299252033233643) @cpansearch1 -->
 </body>
</html>
