<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Dancer - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Dancer",3]);
    _gaq.push(["_setCustomVar",5,"Release","Dancer-1.3095",3]);
    _gaq.push(["_setCustomVar",3,"Module","Dancer",3]);
    _gaq.push(["_setCustomVar",1,"Author","XSAWYERX",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Dancer">permalink</a></div>
  <a href="/~xsawyerx/">Sawyer X</a> &gt;
  <a href="/~xsawyerx/Dancer-1.3095/">Dancer-1.3095</a> &gt;
  Dancer
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/f2bdad6d5883044b9d3c88e50f957bfc?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/X/XS/XSAWYERX/Dancer-1.3095.tar.gz">Dancer-1.3095.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Dancer;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~XSAWYERX/Dancer-1.3095/lib/Dancer.pm">Annotate this POD
(2)
</a></p>
     <p style="text-align:right"><a href="http://perldancer.org/">Website</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>GitHub</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 51</td></tr>
</table>
<a href="http://github.com/sukria/Dancer/issues">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.3095 &nbsp;
<span class="noprint">
  <a href="/src/XSAWYERX/Dancer-1.3095/lib/Dancer.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#MORE_DOCUMENTATION'>MORE DOCUMENTATION</a>
  <li class='indexItem indexItem1'><a href='#EXPORTS'>EXPORTS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#:moose'>:moose</a>
    <li class='indexItem indexItem2'><a href='#:syntax'>:syntax</a>
    <li class='indexItem indexItem2'><a href='#:tests'>:tests</a>
    <li class='indexItem indexItem2'><a href='#:script'>:script</a>
    <li class='indexItem indexItem2'><a href='#!keyword'>!keyword</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#after'>after</a>
    <li class='indexItem indexItem2'><a href='#any'>any</a>
    <li class='indexItem indexItem2'><a href='#before'>before</a>
    <li class='indexItem indexItem2'><a href='#before_template'>before_template</a>
    <li class='indexItem indexItem2'><a href='#cookies'>cookies</a>
    <li class='indexItem indexItem2'><a href='#cookie'>cookie</a>
    <li class='indexItem indexItem2'><a href='#config'>config</a>
    <li class='indexItem indexItem2'><a href='#content_type'>content_type</a>
    <li class='indexItem indexItem2'><a href='#dance'>dance</a>
    <li class='indexItem indexItem2'><a href='#debug'>debug</a>
    <li class='indexItem indexItem2'><a href='#dirname'>dirname</a>
    <li class='indexItem indexItem2'><a href='#engine'>engine</a>
    <li class='indexItem indexItem2'><a href='#error'>error</a>
    <li class='indexItem indexItem2'><a href='#false'>false</a>
    <li class='indexItem indexItem2'><a href='#forward'>forward</a>
    <li class='indexItem indexItem2'><a href='#from_dumper_($structure)'>from_dumper ($structure)</a>
    <li class='indexItem indexItem2'><a href='#from_json_($structure,_%options)'>from_json ($structure, %options)</a>
    <li class='indexItem indexItem2'><a href='#from_yaml_($structure)'>from_yaml ($structure)</a>
    <li class='indexItem indexItem2'><a href='#from_xml_($structure,_%options)'>from_xml ($structure, %options)</a>
    <li class='indexItem indexItem2'><a href='#get'>get</a>
    <li class='indexItem indexItem2'><a href='#halt'>halt</a>
    <li class='indexItem indexItem2'><a href='#headers'>headers</a>
    <li class='indexItem indexItem2'><a href='#header'>header</a>
    <li class='indexItem indexItem2'><a href='#push_header'>push_header</a>
    <li class='indexItem indexItem2'><a href='#hook'>hook</a>
    <li class='indexItem indexItem2'><a href='#info'>info</a>
    <li class='indexItem indexItem2'><a href='#layout'>layout</a>
    <li class='indexItem indexItem2'><a href='#logger'>logger</a>
    <li class='indexItem indexItem2'><a href='#load'>load</a>
    <li class='indexItem indexItem2'><a href='#load_app'>load_app</a>
    <li class='indexItem indexItem2'><a href='#mime'>mime</a>
    <li class='indexItem indexItem2'><a href='#params'>params</a>
    <li class='indexItem indexItem2'><a href='#param'>param</a>
    <li class='indexItem indexItem2'><a href='#pass'>pass</a>
    <li class='indexItem indexItem2'><a href='#patch'>patch</a>
    <li class='indexItem indexItem2'><a href='#path'>path</a>
    <li class='indexItem indexItem2'><a href='#post'>post</a>
    <li class='indexItem indexItem2'><a href='#prefix'>prefix</a>
    <li class='indexItem indexItem2'><a href='#del'>del</a>
    <li class='indexItem indexItem2'><a href='#options'>options</a>
    <li class='indexItem indexItem2'><a href='#put'>put</a>
    <li class='indexItem indexItem2'><a href='#redirect'>redirect</a>
    <li class='indexItem indexItem2'><a href='#render_with_layout'>render_with_layout</a>
    <li class='indexItem indexItem2'><a href='#request'>request</a>
    <li class='indexItem indexItem2'><a href='#send_error'>send_error</a>
    <li class='indexItem indexItem2'><a href='#send_file'>send_file</a>
    <li class='indexItem indexItem2'><a href='#set'>set</a>
    <li class='indexItem indexItem2'><a href='#setting'>setting</a>
    <li class='indexItem indexItem2'><a href='#set_cookie'>set_cookie</a>
    <li class='indexItem indexItem2'><a href='#session'>session</a>
    <li class='indexItem indexItem2'><a href='#splat'>splat</a>
    <li class='indexItem indexItem2'><a href='#start'>start</a>
    <li class='indexItem indexItem2'><a href='#status'>status</a>
    <li class='indexItem indexItem2'><a href='#template'>template</a>
    <li class='indexItem indexItem2'><a href='#to_dumper_($structure)'>to_dumper ($structure)</a>
    <li class='indexItem indexItem2'><a href='#to_json_($structure,_%options)'>to_json ($structure, %options)</a>
    <li class='indexItem indexItem2'><a href='#to_yaml_($structure)'>to_yaml ($structure)</a>
    <li class='indexItem indexItem2'><a href='#to_xml_($structure,_%options)'>to_xml ($structure, %options)</a>
    <li class='indexItem indexItem2'><a href='#true'>true</a>
    <li class='indexItem indexItem2'><a href='#upload'>upload</a>
    <li class='indexItem indexItem2'><a href='#uri_for'>uri_for</a>
    <li class='indexItem indexItem2'><a href='#captures'>captures</a>
    <li class='indexItem indexItem2'><a href='#var'>var</a>
    <li class='indexItem indexItem2'><a href='#vars'>vars</a>
    <li class='indexItem indexItem2'><a href='#warning'>warning</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#SOURCE_CODE'>SOURCE CODE</a>
  <li class='indexItem indexItem1'><a href='#GETTING_HELP_/_CONTRIBUTING'>GETTING HELP / CONTRIBUTING</a>
  <li class='indexItem indexItem1'><a href='#DEPENDENCIES'>DEPENDENCIES</a>
  <li class='indexItem indexItem1'><a href='#LICENSE'>LICENSE</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Dancer - lightweight yet powerful web application framework</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    #!/usr/bin/perl
    use Dancer;

    get &#39;/hello/:name&#39; =&#62; sub {
        return &#34;Why, hello there &#34; . param(&#39;name&#39;);
    };

    dance;</pre>

<p>The above is a basic but functional web app created with Dancer. If you want to see more examples and get up and running quickly, check out the <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Introduction.pod" class="podlinkpod"
>Dancer::Introduction</a> and the <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Cookbook.pod" class="podlinkpod"
>Dancer::Cookbook</a>. For examples on deploying your Dancer applications, see <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Deployment.pod" class="podlinkpod"
>Dancer::Deployment</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Dancer is a web application framework designed to be as effortless as possible for the developer, taking care of the boring bits as easily as possible, yet staying out of your way and letting you get on with writing your code.</p>

<p>Dancer aims to provide the simplest way for writing web applications, and offers the flexibility to scale between a very simple lightweight web service consisting of a few lines of code in a single file, all the way up to a more complex fully-fledged web application with session support, templates for views and layouts, etc.</p>

<p>If you don&#39;t want to write CGI scripts by hand, and find Catalyst too big or cumbersome for your project, Dancer is what you need.</p>

<p>Dancer has few pre-requisites, so your Dancer webapps will be easy to deploy.</p>

<p>Dancer apps can be used with a an embedded web server (great for easy testing), and can run under PSGI/Plack for easy deployment in a variety of webserver environments.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MORE_DOCUMENTATION"
>MORE DOCUMENTATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This documentation describes all the exported symbols of Dancer. If you want a quick start guide to discover the framework, you should look at <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Introduction.pod" class="podlinkpod"
>Dancer::Introduction</a>, or <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Tutorial.pod" class="podlinkpod"
>Dancer::Tutorial</a> to learn by example.</p>

<p>If you want to have specific examples of code for real-life problems, see the <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Cookbook.pod" class="podlinkpod"
>Dancer::Cookbook</a>.</p>

<p>If you want to see configuration examples of different deployment solutions involving Dancer and Plack, see <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Deployment.pod" class="podlinkpod"
>Dancer::Deployment</a>.</p>

<p>You can find out more about the many useful plugins available for Dancer in <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Plugins.pod" class="podlinkpod"
>Dancer::Plugins</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORTS"
>EXPORTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>By default, <code>use Dancer</code> exports all the functions below plus sets up your app. You can control the exporting through the normal <a href="/perldoc?Exporter" class="podlinkpod"
>Exporter</a> mechanism. For example:</p>

<pre class="sh_perl">    # Just export the route controllers
    use Dancer qw(get post put patch del);

    # Export everything but pass to avoid clashing with Test::More
    use Test::More;
    use Dancer qw(!pass);</pre>

<p>There are also some special tags to control exports and behaviour.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name=":moose"
>:moose</a></h2>

<p>This will export everything except functions which clash with Moose. Currently these are <code>after</code> and <code>before</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name=":syntax"
>:syntax</a></h2>

<p>This tells Dancer to just export symbols and not set up your app. This is most useful for writing Dancer code outside of your main route handler.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name=":tests"
>:tests</a></h2>

<p>This will export everything except functions which clash with commonly used testing modules. Currently these are <code>pass</code>.</p>

<p>It can be combined with other export pragmas. For example, while testing...</p>

<pre class="sh_perl">    use Test::More;
    use Dancer qw(:syntax :tests);

    # Test::Most also exports &#34;set&#34; and &#34;any&#34;
    use Test::Most;
    use Dancer qw(:syntax :tests !set !any);

    # Alternatively, if you want to use Dancer&#39;s set and any...
    use Test::Most qw(!set !any);
    use Dancer qw(:syntax :tests);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name=":script"
>:script</a></h2>

<p>This will export all the keywords, and will also load the configuration.</p>

<p>This is useful when you want to use your Dancer application from a script.</p>

<pre class="sh_perl">    use MyApp;
    use Dancer &#39;:script&#39;;
    MyApp::schema(&#39;DBSchema&#39;)-&#62;deploy();</pre>

<p>By default, the <a href="/perldoc?warnings" class="podlinkpod"
>warnings</a> pragma will also be exported, meaning your app/script will be running under <code>use warnings</code>. If you do not want this, set the <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Config.pm#import_warnings" class="podlinkpod"
>import_warnings</a> setting to a false value.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="!keyword"
>!keyword</a></h2>

<p>If you want to simply prevent Dancer from exporting specific keywords (perhaps you plan to implement them yourself in a different way, or you don&#39;t plan to use them and they clash with another module you&#39;re loading), you can simply exclude them:</p>

<pre class="sh_perl">    use Dancer qw(!session);</pre>

<p>The above would import all keywords as normal, with the exception of <code>session</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="after"
>after</a></h2>

<p>Deprecated - see the <code>after</code> <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer.pm#hook" class="podlinkpod"
>hook</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="any"
>any</a></h2>

<p>Defines a route for multiple HTTP methods at once:</p>

<pre class="sh_perl">    any [&#39;get&#39;, &#39;post&#39;] =&#62; &#39;/myaction&#39; =&#62; sub {
        # code
    };</pre>

<p>Or even, a route handler that would match any HTTP methods:</p>

<pre class="sh_perl">    any &#39;/myaction&#39; =&#62; sub {
        # code
    };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="before"
>before</a></h2>

<p>Deprecated - see the <code>before</code> <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer.pm#hook" class="podlinkpod"
>hook</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="before_template"
>before_template</a></h2>

<p>Deprecated - see the <code>before_template</code> <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer.pm#hook" class="podlinkpod"
>hook</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="cookies"
>cookies</a></h2>

<p>Accesses cookies values, it returns a HashRef of <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Cookie.pm" class="podlinkpod"
>Dancer::Cookie</a> objects:</p>

<pre class="sh_perl">    get &#39;/some_action&#39; =&#62; sub {
        my $cookie = cookies-&#62;{name};
        return $cookie-&#62;value;
    };</pre>

<p>In the case you have stored something else than a Scalar in your cookie:</p>

<pre class="sh_perl">    get &#39;/some_action&#39; =&#62; sub {
        my $cookie = cookies-&#62;{oauth};
        my %values = $cookie-&#62;value;
        return ($values{token}, $values{token_secret});
    };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="cookie"
>cookie</a></h2>

<p>Accesses a cookie value (or sets it). Note that this method will eventually be preferred over <code>set_cookie</code>.</p>

<pre class="sh_perl">    cookie lang =&#62; &#34;fr-FR&#34;;              # set a cookie and return its value
    cookie lang =&#62; &#34;fr-FR&#34;, expires =&#62; &#34;2 hours&#34;;   # extra cookie info
    cookie &#34;lang&#34;                        # return a cookie value</pre>

<p>If your cookie value is a key/value URI string, like</p>

<pre class="sh_perl">    token=ABC&#38;user=foo</pre>

<p><code>cookie</code> will only return the first part (<code>token=ABC</code>) if called in scalar context. Use list context to fetch them all:</p>

<pre class="sh_perl">    my @values = cookie &#34;name&#34;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="config"
>config</a></h2>

<p>Accesses the configuration of the application:</p>

<pre class="sh_perl">    get &#39;/appname&#39; =&#62; sub {
        return &#34;This is &#34; . config-&#62;{appname};
    };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="content_type"
>content_type</a></h2>

<p>Sets the <b>content-type</b> rendered, for the current route handler:</p>

<pre class="sh_perl">    get &#39;/cat/:txtfile&#39; =&#62; sub {
        content_type &#39;text/plain&#39;;

        # here we can dump the contents of param(&#39;txtfile&#39;)
    };</pre>

<p>You can use abbreviations for content types. For instance:</p>

<pre class="sh_perl">    get &#39;/svg/:id&#39; =&#62; sub {
        content_type &#39;svg&#39;;

        # here we can dump the image with id param(&#39;id&#39;)
    };</pre>

<p>Note that if you want to change the default content-type for every route, you have to change the <code>content_type</code> setting instead.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="dance"
>dance</a></h2>

<p>Alias for the <code>start</code> keyword.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="debug"
>debug</a></h2>

<p>Logs a message of debug level:</p>

<pre class="sh_perl">    debug &#34;This is a debug message&#34;;</pre>

<p>See <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Logger.pm" class="podlinkpod"
>Dancer::Logger</a> for details on how to configure where log messages go.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="dirname"
>dirname</a></h2>

<p>Returns the dirname of the path given:</p>

<pre class="sh_perl">    my $dir = dirname($some_path);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="engine"
>engine</a></h2>

<p>Given a namespace, returns the current engine object</p>

<pre class="sh_perl">    my $template_engine = engine &#39;template&#39;;
    my $html = $template_engine-&#62;apply_renderer(...);
    $template_engine-&#62;apply_layout($html);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="error"
>error</a></h2>

<p>Logs a message of error level:</p>

<pre class="sh_perl">    error &#34;This is an error message&#34;;</pre>

<p>See <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Logger.pm" class="podlinkpod"
>Dancer::Logger</a> for details on how to configure where log messages go.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="false"
>false</a></h2>

<p>Constant that returns a false value (0).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="forward"
>forward</a></h2>

<p>Runs an internal redirect of the current request to another request. This helps you avoid having to redirect the user using HTTP and set another request to your application.</p>

<p>It effectively lets you chain routes together in a clean manner.</p>

<pre class="sh_perl">    get &#39;/demo/articles/:article_id&#39; =&#62; sub {

        # you&#39;ll have to implement this next sub yourself :)
        change_the_main_database_to_demo();

        forward &#34;/articles/&#34; . params-&#62;{article_id};
    };</pre>

<p>In the above example, the users that reach <i>/demo/articles/30</i> will actually reach <i>/articles/30</i> but we&#39;ve changed the database to demo before.</p>

<p>This is pretty cool because it lets us retain our paths and offer a demo database by merely going to <i>/demo/...</i>.</p>

<p>You&#39;ll notice that in the example we didn&#39;t indicate whether it was <b>GET</b> or <b>POST</b>. That is because <code>forward</code> chains the same type of route the user reached. If it was a <b>GET</b>, it will remain a <b>GET</b> (but if you do need to change the method, you can do so; read on below for details.)</p>

<p><b>WARNING</b> : Issuing a forward immediately exits the current route, and perform the forward. Thus, any code after a forward is ignored, until the end of the route. e.g.</p>

<pre class="sh_perl">    get &#39;/foo/:article_id&#39; =&#62; sub {
        if ($condition) {
            forward &#34;/articles/&#34; . params-&#62;{article_id};
            # The following code is never executed
            do_stuff();
        }

        more_stuff();
    };</pre>

<p>So it&#39;s not necessary anymore to use <code>return</code> with forward.</p>

<p>Note that forward doesn&#39;t parse GET arguments. So, you can&#39;t use something like:</p>

<pre class="sh_perl">     return forward &#39;/home?authorized=1&#39;;</pre>

<p>But <code>forward</code> supports an optional HashRef with parameters to be added to the actual parameters:</p>

<pre class="sh_perl">     return forward &#39;/home&#39;, { authorized =&#62; 1 };</pre>

<p>Finally, you can add some more options to the forward method, in a third argument, also as a HashRef. That option is currently only used to change the method of your request. Use with caution.</p>

<pre class="sh_perl">    return forward &#39;/home&#39;, { auth =&#62; 1 }, { method =&#62; &#39;POST&#39; };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="from_dumper_($structure)"
>from_dumper ($structure)</a></h2>

<p>Deserializes a Data::Dumper structure.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="from_json_($structure,_%options)"
>from_json ($structure, %options)</a></h2>

<p>Deserializes a JSON structure. Can receive optional arguments. Those arguments are valid <a href="/perldoc?JSON" class="podlinkpod"
>JSON</a> arguments to change the behaviour of the default <code>JSON::from_json</code> function.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="from_yaml_($structure)"
>from_yaml ($structure)</a></h2>

<p>Deserializes a YAML structure.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="from_xml_($structure,_%options)"
>from_xml ($structure, %options)</a></h2>

<p>Deserializes a XML structure. Can receive optional arguments. These arguments are valid <a href="/perldoc?XML%3A%3ASimple" class="podlinkpod"
>XML::Simple</a> arguments to change the behaviour of the default <code>XML::Simple::XMLin</code> function.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="get"
>get</a></h2>

<p>Defines a route for HTTP <b>GET</b> requests to the given path:</p>

<pre class="sh_perl">    get &#39;/&#39; =&#62; sub {
        return &#34;Hello world&#34;;
    }</pre>

<p>Note that a route to match <b>HEAD</b> requests is automatically created as well.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="halt"
>halt</a></h2>

<p>Sets a response object with the content given.</p>

<p>When used as a return value from a filter, this breaks the execution flow and renders the response immediately:</p>

<pre class="sh_perl">    before sub {
        if ($some_condition) {
            halt(&#34;Unauthorized&#34;);
            # This code is not executed :
            do_stuff();
        }
    };

    get &#39;/&#39; =&#62; sub {
        &#34;hello there&#34;;
    };</pre>

<p><b>WARNING</b> : Issuing a halt immediately exits the current route, and perform the halt. Thus, any code after a halt is ignored, until the end of the route. So it&#39;s not necessary anymore to use <code>return</code> with halt.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="headers"
>headers</a></h2>

<p>Adds custom headers to responses:</p>

<pre class="sh_perl">    get &#39;/send/headers&#39;, sub {
        headers &#39;X-Foo&#39; =&#62; &#39;bar&#39;, X-Bar =&#62; &#39;foo&#39;;
    }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="header"
>header</a></h2>

<p>adds a custom header to response:</p>

<pre class="sh_perl">    get &#39;/send/header&#39;, sub {
        header &#39;x-my-header&#39; =&#62; &#39;shazam!&#39;;
    }</pre>

<p>Note that it will overwrite the old value of the header, if any. To avoid that, see <a href="#push_header" class="podlinkpod"
>&#34;push_header&#34;</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="push_header"
>push_header</a></h2>

<p>Do the same as <code>header</code>, but allow for multiple headers with the same name.</p>

<pre class="sh_perl">    get &#39;/send/header&#39;, sub {
        push_header &#39;x-my-header&#39; =&#62; &#39;1&#39;;
        push_header &#39;x-my-header&#39; =&#62; &#39;2&#39;;
        will result in two headers &#34;x-my-header&#34; in the response
    }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="hook"
>hook</a></h2>

<p>Adds a hook at some position. For example :</p>

<pre class="sh_perl">  hook before_serializer =&#62; sub {
    my $response = shift;
    $response-&#62;content-&#62;{generated_at} = localtime();
  };</pre>

<p>There can be multiple hooks assigned to a given position, and each will be executed in order.</p>

<p>(For details on how to register new hooks from within plugins, see <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Hook.pm" class="podlinkpod"
>Dancer::Hook</a>.) Supported <b>before</b> hooks (in order of execution):</p>

<dl>
<dt><a name="before_deserializer"
>before_deserializer</a></dt>

<dd>
<p>This hook receives no arguments.</p>

<pre class="sh_perl">  hook before_deserializer =&#62; sub {
    ...
  };</pre>

<dt><a name="before_file_render"
>before_file_render</a></dt>

<dd>
<p>This hook receives as argument the path of the file to render.</p>

<pre class="sh_perl">  hook before_file_render =&#62; sub {
    my $path = shift;
    ...
  };</pre>

<dt><a name="before_error_init"
>before_error_init</a></dt>

<dd>
<p>This hook receives as argument a <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Error.pm" class="podlinkpod"
>Dancer::Error</a> object.</p>

<pre class="sh_perl">  hook before_error_init =&#62; sub {
    my $error = shift;
    ...
  };</pre>

<dt><a name="before_error_render"
>before_error_render</a></dt>

<dd>
<p>This hook receives as argument a <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Error.pm" class="podlinkpod"
>Dancer::Error</a> object.</p>

<pre class="sh_perl">  hook before_error_render =&#62; sub {
    my $error = shift;
  };</pre>

<dt><a name="before"
>before</a></dt>

<dd>
<p>This hook receives one argument, a reference to the subroutine that implements the route that is being intercepted by this hook.</p>

<pre class="sh_perl">  hook before =&#62; sub {
    my $route_handler = shift;
    ...
  };</pre>

<p>it is equivalent to the deprecated</p>

<pre class="sh_perl">  before sub {
    ...
  };</pre>

<dt><a name="before_template_render"
>before_template_render</a></dt>

<dd>
<p>This is an alias to &#39;before_template&#39;.</p>

<p>This hook receives as argument a HashRef, containing the tokens that will be passed to the template. You can use it to add more tokens, or delete some specific token.</p>

<pre class="sh_perl">  hook before_template_render =&#62; sub {
    my $tokens = shift;
    delete $tokens-&#62;{user};
    $tokens-&#62;{time} = localtime;
  };</pre>

<p>is equivalent to</p>

<pre class="sh_perl">  hook before_template =&#62; sub {
    my $tokens = shift;
    delete $tokens-&#62;{user};
    $tokens-&#62;{time} = localtime;
  };</pre>

<dt><a name="before_layout_render"
>before_layout_render</a></dt>

<dd>
<p>This hook receives two arguments. The first one is a HashRef containing the tokens. The second is a ScalarRef representing the content of the template.</p>

<pre class="sh_perl">  hook before_layout_render =&#62; sub {
    my ($tokens, $html_ref) = @_;
    ...
  };</pre>

<dt><a name="before_serializer"
>before_serializer</a></dt>

<dd>
<p>This hook receives as argument a <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Response.pm" class="podlinkpod"
>Dancer::Response</a> object.</p>

<pre class="sh_perl">  hook before_serializer =&#62; sub {
    my $response = shift;
    $response-&#62;content-&#62;{start_time} = time();
  };</pre>
</dd>
</dl>

<p>Supported <b>after</b> hooks (in order of execution):</p>

<dl>
<dt><a name="after_deserializer"
>after_deserializer</a></dt>

<dd>
<p>This hook receives no arguments.</p>

<pre class="sh_perl">  hook after_deserializer =&#62; sub {
    ...
  };</pre>

<dt><a name="after_file_render"
>after_file_render</a></dt>

<dd>
<p>This hook receives as argument a <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Response.pm" class="podlinkpod"
>Dancer::Response</a> object.</p>

<pre class="sh_perl">  hook after_file_render =&#62; sub {
    my $response = shift;
  };</pre>

<dt><a name="after_template_render"
>after_template_render</a></dt>

<dd>
<p>This hook receives as argument a ScalarRef representing the content generated by the template.</p>

<pre class="sh_perl">  hook after_template_render =&#62; sub {
    my $html_ref = shift;
  };</pre>

<dt><a name="after_layout_render"
>after_layout_render</a></dt>

<dd>
<p>This hook receives as argument a ScalarRef representing the content generated by the layout</p>

<pre class="sh_perl">  hook after_layout_render =&#62; sub {
    my $html_ref = shift;
  };</pre>

<dt><a name="after"
>after</a></dt>

<dd>
<p>This is an alias for <code>after</code>.</p>

<p>This hook runs after a request has been processed, but before the response is sent.</p>

<p>It receives a <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Response.pm" class="podlinkpod"
>Dancer::Response</a> object, which it can modify if it needs to make changes to the response which is about to be sent.</p>

<pre class="sh_perl">  hook after =&#62; sub {
    my $response = shift;
  };</pre>

<p>This is equivalent to</p>

<pre class="sh_perl">  after sub {
    my $response = shift;
  };</pre>

<dt><a name="after_error_render"
>after_error_render</a></dt>

<dd>
<p>This hook receives as argument a <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Response.pm" class="podlinkpod"
>Dancer::Response</a> object.</p>

<pre class="sh_perl">  hook after_error_render =&#62; sub {
    my $response = shift;
  };</pre>

<dt><a name="on_handler_exception"
>on_handler_exception</a></dt>

<dd>
<p>This hook is called when an exception has been caught, at the handler level, just before creating and rendering <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Error.pm" class="podlinkpod"
>Dancer::Error</a>. This hook receives as argument a <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Exception.pm" class="podlinkpod"
>Dancer::Exception</a> object.</p>

<pre class="sh_perl">  hook on_handler_exception =&#62; sub {
    my $exception = shift;
  };</pre>

<dt><a name="on_route_exception"
>on_route_exception</a></dt>

<dd>
<p>This hook is called when an exception has been caught, at the route level, just before rethrowing it higher. This hook receives the exception as argument. It can be a Dancer::Exception, or a string, or whatever was used to <code>die</code>.</p>

<pre class="sh_perl">  hook on_route_exception =&#62; sub {
    my $exception = shift;
  };</pre>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="info"
>info</a></h2>

<p>Logs a message of info level:</p>

<pre class="sh_perl">    info &#34;This is a info message&#34;;</pre>

<p>See <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Logger.pm" class="podlinkpod"
>Dancer::Logger</a> for details on how to configure where log messages go.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="layout"
>layout</a></h2>

<p>This method is deprecated. Use <code>set</code>:</p>

<pre class="sh_perl">    set layout =&#62; &#39;user&#39;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="logger"
>logger</a></h2>

<p>Deprecated. Use <code>&#60;set logger =&#62; &#39;console&#39;</code>&#62; to change current logger engine.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="load"
>load</a></h2>

<p>Loads one or more perl scripts in the current application&#39;s namespace. Syntactic sugar around Perl&#39;s <code>require</code>:</p>

<pre class="sh_perl">    load &#39;UserActions.pl&#39;, &#39;AdminActions.pl&#39;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="load_app"
>load_app</a></h2>

<p>Loads a Dancer package. This method sets the libdir to the current <code>./lib</code> directory:</p>

<pre class="sh_perl">    # if we have lib/Webapp.pm, we can load it like:
    load_app &#39;Webapp&#39;;
    # or with options
    load_app &#39;Forum&#39;, prefix =&#62; &#39;/forum&#39;, settings =&#62; {foo =&#62; &#39;bar&#39;};</pre>

<p>Note that the package loaded using load_app <b>must</b> import Dancer with the <code>:syntax</code> option.</p>

<p>To load multiple apps repeat load_app:</p>

<pre class="sh_perl">    load_app &#39;one&#39;;
    load_app &#39;two&#39;;</pre>

<p>The old way of loading multiple apps in one go (load_app &#39;one&#39;, &#39;two&#39;;) is deprecated.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="mime"
>mime</a></h2>

<p>Shortcut to access the instance object of <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/MIME.pm" class="podlinkpod"
>Dancer::MIME</a>. You should read the <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/MIME.pm" class="podlinkpod"
>Dancer::MIME</a> documentation for full details, but the most commonly-used methods are summarized below:</p>

<pre class="sh_perl">    # set a new mime type
    mime-&#62;add_type( foo =&#62; &#39;text/foo&#39; );

    # set a mime type alias
    mime-&#62;add_alias( f =&#62; &#39;foo&#39; );

    # get mime type for an alias
    my $m = mime-&#62;for_name( &#39;f&#39; );

    # get mime type for a file (based on extension)
    my $m = mime-&#62;for_file( &#34;foo.bar&#34; );

    # get current defined default mime type
    my $d = mime-&#62;default;

    # set the default mime type using config.yml
    # or using the set keyword
    set default_mime_type =&#62; &#39;text/plain&#39;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="params"
>params</a></h2>

<p><i>This method should be called from a route handler</i>. It&#39;s an alias for the <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Request.pm#params" class="podlinkpod"
>Dancer::Request params accessor</a>. It returns an hash reference to all defined parameters. Check <code>param</code> bellow to access quickly to a single parameter value.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="param"
>param</a></h2>

<p><i>This method should be called from a route handler</i>. This method is an accessor to the parameters hash table.</p>

<pre class="sh_perl">   post &#39;/login&#39; =&#62; sub {
       my $username = param &#34;user&#34;;
       my $password = param &#34;pass&#34;;
       # ...
   }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="pass"
>pass</a></h2>

<p><i>This method should be called from a route handler</i>. Tells Dancer to pass the processing of the request to the next matching route.</p>

<p><b>WARNING</b> : Issuing a pass immediately exits the current route, and perform the pass. Thus, any code after a pass is ignored, until the end of the route. So it&#39;s not necessary anymore to use <code>return</code> with pass.</p>

<pre class="sh_perl">    get &#39;/some/route&#39; =&#62; sub {
        if (...) {
            # we want to let the next matching route handler process this one
            pass(...);
            # This code will be ignored
            do_stuff();
        }
    };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="patch"
>patch</a></h2>

<p>Defines a route for HTTP <b>PATCH</b> requests to the given URL:</p>

<pre class="sh_perl">    patch &#39;/resource&#39; =&#62; sub { ... };</pre>

<p>(<code>PATCH</code> is a relatively new and not-yet-common HTTP verb, which is intended to work as a &#34;partial-PUT&#34;, transferring just the changes; please see <a href="http://tools.ietf.org/html/rfc5789|RFC5789" class="podlinkurl"
>http://tools.ietf.org/html/rfc5789|RFC5789</a> for further details.)</p>

<p>Please be aware that, if you run your app in standalone mode, <code>PATCH</code> requests will not reach your app unless you have a new version of <a href="/perldoc?HTTP%3A%3AServer%3A%3ASimple" class="podlinkpod"
>HTTP::Server::Simple</a> which accepts <code>PATCH</code> as a valid verb. The current version at time of writing, <code>0.44</code>, does not. A pull request has been submitted to add this support, which you can find at:</p>

<p><a href="https://github.com/bestpractical/http-server-simple/pull/1" class="podlinkurl"
>https://github.com/bestpractical/http-server-simple/pull/1</a></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="path"
>path</a></h2>

<p>Concatenates multiple paths together, without worrying about the underlying operating system:</p>

<pre class="sh_perl">    my $path = path(dirname($0), &#39;lib&#39;, &#39;File.pm&#39;);</pre>

<p>It also normalizes (cleans) the path aesthetically. It does not verify the path exists.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="post"
>post</a></h2>

<p>Defines a route for HTTP <b>POST</b> requests to the given URL:</p>

<pre class="sh_perl">    post &#39;/&#39; =&#62; sub {
        return &#34;Hello world&#34;;
    }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="prefix"
>prefix</a></h2>

<p>Defines a prefix for each route handler, like this:</p>

<pre class="sh_perl">    prefix &#39;/home&#39;;</pre>

<p>From here, any route handler is defined to /home/*:</p>

<pre class="sh_perl">    get &#39;/page1&#39; =&#62; sub {}; # will match &#39;/home/page1&#39;</pre>

<p>You can unset the prefix value:</p>

<pre class="sh_perl">    prefix undef;
    get &#39;/page1&#39; =&#62; sub {}; will match /page1</pre>

<p>For a safer alternative you can use lexical prefix like this:</p>

<pre class="sh_perl">    prefix &#39;/home&#39; =&#62; sub {
        ## Prefix is set to &#39;/home&#39; here

        get ...;
        get ...;
    };
    ## prefix reset to the previous version here</pre>

<p>This makes it possible to nest prefixes:</p>

<pre class="sh_perl">   prefix &#39;/home&#39; =&#62; sub {
       ## some routes
       
      prefix &#39;/private&#39; =&#62; sub {
         ## here we are under /home/private...

         ## some more routes
      };
      ## back to /home
   };
   ## back to the root</pre>

<p><b>Notice:</b> once you have a prefix set, do not add a caret to the regex:</p>

<pre class="sh_perl">    prefix &#39;/foo&#39;;
    get qr{^/bar} =&#62; sub { ... } # BAD BAD BAD
    get qr{/bar}  =&#62; sub { ... } # Good!</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="del"
>del</a></h2>

<p>Defines a route for HTTP <b>DELETE</b> requests to the given URL:</p>

<pre class="sh_perl">    del &#39;/resource&#39; =&#62; sub { ... };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="options"
>options</a></h2>

<p>Defines a route for HTTP <b>OPTIONS</b> requests to the given URL:</p>

<pre class="sh_perl">    options &#39;/resource&#39; =&#62; sub { ... };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="put"
>put</a></h2>

<p>Defines a route for HTTP <b>PUT</b> requests to the given URL:</p>

<pre class="sh_perl">    put &#39;/resource&#39; =&#62; sub { ... };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="redirect"
>redirect</a></h2>

<p>Generates a HTTP redirect (302). You can either redirect to a complete different site or within the application:</p>

<pre class="sh_perl">    get &#39;/twitter&#39;, sub {
        redirect &#39;<a href="http://twitter.com/me" class="podlinkurl"
>http://twitter.com/me</a>&#39;;
    };</pre>

<p>You can also force Dancer to return a specific 300-ish HTTP response code:</p>

<pre class="sh_perl">    get &#39;/old/:resource&#39;, sub {
        redirect &#39;/new/&#39;.params-&#62;{resource}, 301;
    };</pre>

<p>It is important to note that issuing a redirect by itself does not exit and redirect immediately, redirection is deferred until after the current route or filter has been processed. To exit and redirect immediately, use the return function, e.g.</p>

<pre class="sh_perl">    get &#39;/restricted&#39;, sub {
        return redirect &#39;/login&#39; if accessDenied();
        return &#39;Welcome to the restricted section&#39;;
    };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="render_with_layout"
>render_with_layout</a></h2>

<p>Allows a handler to provide plain HTML (or other content), but have it rendered within the layout still.</p>

<p>This method is <b>DEPRECATED</b>, and will be removed soon. Instead, you should be using the <code>engine</code> keyword:</p>

<pre class="sh_perl">    get &#39;/foo&#39; =&#62; sub {
        # Do something which generates HTML directly (maybe using
        # HTML::Table::FromDatabase or something)
        my $content = ...;

        # get the template engine
        my $template_engine = engine &#39;template&#39;;

        # apply the layout (not the renderer), and return the result
        $template_engine-&#62;apply_layout($content)
    };</pre>

<p>It works very similarly to <code>template</code> in that you can pass tokens to be used in the layout, and/or options to control the way the layout is rendered. For instance, to use a custom layout:</p>

<pre class="sh_perl">    render_with_layout $content, {}, { layout =&#62; &#39;layoutname&#39; };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="request"
>request</a></h2>

<p>Returns a <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Request.pm" class="podlinkpod"
>Dancer::Request</a> object representing the current request.</p>

<p>See the <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Request.pm" class="podlinkpod"
>Dancer::Request</a> documention for the methods you can call, for example:</p>

<pre class="sh_perl">    request-&#62;referer;         # value of the HTTP referer header
    request-&#62;remote_address;  # user&#39;s IP address
    request-&#62;user_agent;      # User-Agent header value</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="send_error"
>send_error</a></h2>

<p>Returns a HTTP error. By default the HTTP code returned is 500:</p>

<pre class="sh_perl">    get &#39;/photo/:id&#39; =&#62; sub {
        if (...) {
            send_error(&#34;Not allowed&#34;, 403);
        } else {
           # return content
        }
    }</pre>

<p><b>WARNING</b> : Issuing a send_error immediately exits the current route, and perform the send_error. Thus, any code after a send_error is ignored, until the end of the route. So it&#39;s not necessary anymore to use <code>return</code> with send_error.</p>

<pre class="sh_perl">    get &#39;/some/route&#39; =&#62; sub {
        if (...) {
            # we want to let the next matching route handler process this one
            send_error(..);
            # This code will be ignored
            do_stuff();
        }
    };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="send_file"
>send_file</a></h2>

<p>Lets the current route handler send a file to the client. Note that the path of the file must be relative to the <b>public</b> directory unless you use the <code>system_path</code> option (see below).</p>

<pre class="sh_perl">    get &#39;/download/:file&#39; =&#62; sub {
        return send_file(params-&#62;{file});
    }</pre>

<p><b>WARNING</b> : Issuing a send_file immediately exits the current route, and perform the send_file. Thus, any code after a send_file is ignored, until the end of the route. So it&#39;s not necessary anymore to use <code>return</code> with send_file.</p>

<pre class="sh_perl">    get &#39;/some/route&#39; =&#62; sub {
        if (...) {
            # we want to let the next matching route handler process this one
            send_file(...);
            # This code will be ignored
            do_stuff();
        }
    };</pre>

<p>Send file supports streaming possibility using PSGI streaming. The server should support it but normal streaming is supported on most, if not all.</p>

<pre class="sh_perl">    get &#39;/download/:file&#39; =&#62; sub {
        return send_file( params-&#62;{file}, streaming =&#62; 1 );
    }</pre>

<p>You can control what happens using callbacks.</p>

<p>First, <code>around_content</code> allows you to get the writer object and the chunk of content read, and then decide what to do with each chunk:</p>

<pre class="sh_perl">    get &#39;/download/:file&#39; =&#62; sub {
        return send_file(
            params-&#62;{file},
            streaming =&#62; 1,
            callbacks =&#62; {
                around_content =&#62; sub {
                    my ( $writer, $chunk ) = @_;
                    $writer-&#62;write(&#34;* $chunk&#34;);
                },
            },
        );
    }</pre>

<p>You can use <code>around</code> to all get all the content (whether a filehandle if it&#39;s a regular file or a full string if it&#39;s a scalar ref) and decide what to do with it:</p>

<pre class="sh_perl">    get &#39;/download/:file&#39; =&#62; sub {
        return send_file(
            params-&#62;{file},
            streaming =&#62; 1,
            callbacks =&#62; {
                around =&#62; sub {
                    my ( $writer, $content 0 = shift;

                    # we know it&#39;s a text file, so we&#39;ll just stream
                    # line by line
                    while ( my $line = &#60;$content&#62; ) {
                        $writer-&#62;write($line);
                    }
                },
            },
        );
    }</pre>

<p>Or you could use <code>override</code> to control the entire streaming callback request:</p>

<pre class="sh_perl">    get &#39;/download/:file&#39; =&#62; sub {
        return send_file(
            params-&#62;{file},
            streaming =&#62; 1,
            callbacks =&#62; {
                override =&#62; sub {
                    my ( $respond, $response ) = @_;

                    my $writer = $respond-&#62;( [ $newstatus, $newheaders ] );
                    $writer-&#62;write(&#34;some line&#34;);
                },
            },
        );
    }</pre>

<p>You can also set the number of bytes that will be read at a time (default being 42K bytes) using <code>bytes</code>:</p>

<pre class="sh_perl">    get &#39;/download/:file&#39; =&#62; sub {
        return send_file(
            params-&#62;{file},
            streaming =&#62; 1,
            bytes     =&#62; 524288, # 512K
        );
    };</pre>

<p>The content-type will be set depending on the current MIME types definition (see <code>mime</code> if you want to define your own).</p>

<p>If your filename does not have an extension, or you need to force a specific mime type, you can pass it to <code>send_file</code> as follows:</p>

<pre class="sh_perl">    return send_file(params-&#62;{file}, content_type =&#62; &#39;image/png&#39;);</pre>

<p>Also, you can use your aliases or file extension names on <code>content_type</code>, like this:</p>

<pre class="sh_perl">    return send_file(params-&#62;{file}, content_type =&#62; &#39;png&#39;);</pre>

<p>For files outside your <b>public</b> folder, you can use the <code>system_path</code> switch. Just bear in mind that its use needs caution as it can be dangerous.</p>

<pre class="sh_perl">   return send_file(&#39;/etc/passwd&#39;, system_path =&#62; 1);</pre>

<p>If you have your data in a scalar variable, <code>send_file</code> can be useful as well. Pass a reference to that scalar, and <code>send_file</code> will behave as if there was a file with that contents:</p>

<pre class="sh_perl">   return send_file( \$data, content_type =&#62; &#39;image/png&#39; );</pre>

<p>Note that Dancer is unable to guess the content type from the data contents. Therefore you might need to set the <code>content_type</code> properly. For this kind of usage an attribute named <code>filename</code> can be useful. It is used as the Content-Disposition header, to hint the brower about the filename it should use.</p>

<pre class="sh_perl">   return send_file( \$data, content_type =&#62; &#39;image/png&#39;
                             filename     =&#62; &#39;onion.png&#39; );</pre>

<p>Note that you should always use <code>return send_file ...</code> to stop execution of your route handler at that point.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="set"
>set</a></h2>

<p>Defines a setting:</p>

<pre class="sh_perl">    set something =&#62; &#39;value&#39;;</pre>

<p>You can set more than one value at once:</p>

<pre class="sh_perl">    set something =&#62; &#39;value&#39;, otherthing =&#62; &#39;othervalue&#39;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="setting"
>setting</a></h2>

<p>Returns the value of a given setting:</p>

<pre class="sh_perl">    setting(&#39;something&#39;); # &#39;value&#39;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="set_cookie"
>set_cookie</a></h2>

<p>Creates or updates cookie values:</p>

<pre class="sh_perl">    get &#39;/some_action&#39; =&#62; sub {
        set_cookie name =&#62; &#39;value&#39;,
                   expires =&#62; (time + 3600),
                   domain  =&#62; &#39;.foo.com&#39;;
    };</pre>

<p>In the example above, only &#39;name&#39; and &#39;value&#39; are mandatory.</p>

<p>You can also store more complex structure in your cookies:</p>

<pre class="sh_perl">    get &#39;/some_auth&#39; =&#62; sub {
        set_cookie oauth =&#62; {
            token        =&#62; $twitter-&#62;request_token,
            token_secret =&#62; $twitter-&#62;secret_token,
            ...
        };
    };</pre>

<p>You can&#39;t store more complex structure than this. All keys in the HashRef should be Scalars; storing references will not work.</p>

<p>See <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Cookie.pm" class="podlinkpod"
>Dancer::Cookie</a> for further options when creating your cookie.</p>

<p>Note that this method will be eventually deprecated in favor of the new <code>cookie</code> method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="session"
>session</a></h2>

<p>Provides access to all data stored in the user&#39;s session (if any).</p>

<p>It can also be used as a setter to store data in the session:</p>

<pre class="sh_perl">    # getter example
    get &#39;/user&#39; =&#62; sub {
        if (session(&#39;user&#39;)) {
            return &#34;Hello, &#34;.session(&#39;user&#39;)-&#62;name;
        }
    };

    # setter example
    post &#39;/user/login&#39; =&#62; sub {
        ...
        if ($logged_in) {
            session user =&#62; $user;
        }
        ...
    };</pre>

<p>You may also need to clear a session:</p>

<pre class="sh_perl">    # destroy session
    get &#39;/logout&#39; =&#62; sub {
        ...
        session-&#62;destroy;
        ...
    };</pre>

<p>If you need to fetch the session ID being used for any reason:</p>

<pre class="sh_perl">    my $id = session-&#62;id;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="splat"
>splat</a></h2>

<p>Returns the list of captures made from a route handler with a route pattern which includes wildcards:</p>

<pre class="sh_perl">    get &#39;/file/*.*&#39; =&#62; sub {
        my ($file, $extension) = splat;
        ...
    };</pre>

<p>There is also the extensive splat (A.K.A. &#34;megasplat&#34;), which allows extensive greedier matching, available using two asterisks. The additional path is broken down and returned as an ArrayRef:</p>

<pre class="sh_perl">    get &#39;/entry/*/tags/**&#39; =&#62; sub {
        my ( $entry_id, $tags ) = splat;
        my @tags = @{$tags};
    };</pre>

<p>This helps with chained actions:</p>

<pre class="sh_perl">    get &#39;/team/*/**&#39; =&#62; sub {
        my ($team) = splat;
        var team =&#62; $team;
        pass;
    };

    prefix &#39;/team/*&#39;;

    get &#39;/player/*&#39; =&#62; sub {
        my ($player) = splat;

        # etc...
    };

    get &#39;/score&#39; =&#62; sub {
        return score_for( vars-&#62;{&#39;team&#39;} );
    };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="start"
>start</a></h2>

<p>Starts the application or the standalone server (depending on the deployment choices).</p>

<p>This keyword should be called at the very end of the script, once all routes are defined. At this point, Dancer takes over control.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="status"
>status</a></h2>

<p>Changes the status code provided by an action. By default, an action will produce an <code>HTTP 200 OK</code> status code, meaning everything is OK:</p>

<pre class="sh_perl">    get &#39;/download/:file&#39; =&#62; {
        if (! -f params-&#62;{file}) {
            status &#39;not_found&#39;;
            return &#34;File does not exist, unable to download&#34;;
        }
        # serving the file...
    };</pre>

<p>In that example, Dancer will notice that the status has changed, and will render the response accordingly.</p>

<p>The status keyword receives either a numeric status code or its name in lower case, with underscores as a separator for blanks - see the list in <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/HTTP.pm#HTTP_CODES" class="podlinkpod"
>&#34;HTTP CODES&#34; in Dancer::HTTP</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="template"
>template</a></h2>

<p>Returns the response of processing the given template with the given parameters (and optional settings), wrapping it in the default or specified layout too, if layouts are in use.</p>

<p>An example of a route handler which returns the result of using template to build a response with the current template engine:</p>

<pre class="sh_perl">    get &#39;/&#39; =&#62; sub {
        ...
        return template &#39;some_view&#39;, { token =&#62; &#39;value&#39;};
    };</pre>

<p>Note that <code>template</code> simply returns the content, so when you use it in a route handler, if execution of the the route handler should stop at that point, make sure you use &#39;return&#39; to ensure your route handler returns the content.</p>

<p>Since template just returns the result of rendering the template, you can also use it to perform other templating tasks, e.g. generating emails:</p>

<pre class="sh_perl">    post &#39;/some/route&#39; =&#62; sub {
        if (...) {
            email {
                to      =&#62; &#39;someone@example.com&#39;,
                from    =&#62; &#39;foo@example.com&#39;,
                subject =&#62; &#39;Hello there&#39;,
                msg     =&#62; template(&#39;emails/foo&#39;, { name =&#62; params-&#62;{name} }),
            };

            return template &#39;message_sent&#39;;
        } else {
            return template &#39;error&#39;;
        }
    };</pre>

<p>Compatibility notice: <code>template</code> was changed in version 1.3090 to immediately interrupt execution of a route handler and return the content, as it&#39;s typically used at the end of a route handler to return content. However, this caused issues for some people who were using <code>template</code> to generate emails etc, rather than accessing the template engine directly, so this change has been reverted in 1.3091.</p>

<p>The first parameter should be a template available in the views directory, the second one (optional) is a HashRef of tokens to interpolate, and the third (again optional) is a HashRef of options.</p>

<p>For example, to disable the layout for a specific request:</p>

<pre class="sh_perl">    get &#39;/&#39; =&#62; sub {
        template &#39;index&#39;, {}, { layout =&#62; undef };
    };</pre>

<p>Or to request a specific layout, of course:</p>

<pre class="sh_perl">    get &#39;/user&#39; =&#62; sub {
        template &#39;user&#39;, {}, { layout =&#62; &#39;user&#39; };
    };</pre>

<p>Some tokens are automatically added to your template (<code>perl_version</code>, <code>dancer_version</code>, <code>settings</code>, <code>request</code>, <code>params</code>, <code>vars</code> and, if you have sessions enabled, <code>session</code>). Check <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Template/Abstract.pm" class="podlinkpod"
>Dancer::Template::Abstract</a> for further details.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="to_dumper_($structure)"
>to_dumper ($structure)</a></h2>

<p>Serializes a structure with Data::Dumper.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="to_json_($structure,_%options)"
>to_json ($structure, %options)</a></h2>

<p>Serializes a structure to JSON. Can receive optional arguments. Thoses arguments are valid <a href="/perldoc?JSON" class="podlinkpod"
>JSON</a> arguments to change the behaviour of the default <code>JSON::to_json</code> function.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="to_yaml_($structure)"
>to_yaml ($structure)</a></h2>

<p>Serializes a structure to YAML.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="to_xml_($structure,_%options)"
>to_xml ($structure, %options)</a></h2>

<p>Serializes a structure to XML. Can receive optional arguments. Thoses arguments are valid <a href="/perldoc?XML%3A%3ASimple" class="podlinkpod"
>XML::Simple</a> arguments to change the behaviour of the default <code>XML::Simple::XMLout</code> function.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="true"
>true</a></h2>

<p>Constant that returns a true value (1).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="upload"
>upload</a></h2>

<p>Provides access to file uploads. Any uploaded file is accessible as a <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Request/Upload.pm" class="podlinkpod"
>Dancer::Request::Upload</a> object. You can access all parsed uploads via:</p>

<pre class="sh_perl">    post &#39;/some/route&#39; =&#62; sub {
        my $file = upload(&#39;file_input_foo&#39;);
        # file is a Dancer::Request::Upload object
    };</pre>

<p>If you named multiple input of type &#34;file&#34; with the same name, the upload keyword will return an Array of Dancer::Request::Upload objects:</p>

<pre class="sh_perl">    post &#39;/some/route&#39; =&#62; sub {
        my ($file1, $file2) = upload(&#39;files_input&#39;);
        # $file1 and $file2 are Dancer::Request::Upload objects
    };</pre>

<p>You can also access the raw HashRef of parsed uploads via the current request object:</p>

<pre class="sh_perl">    post &#39;/some/route&#39; =&#62; sub {
        my $all_uploads = request-&#62;uploads;
        # $all_uploads-&#62;{&#39;file_input_foo&#39;} is a Dancer::Request::Upload object
        # $all_uploads-&#62;{&#39;files_input&#39;} is an ArrayRef of Dancer::Request::Upload objects
    };</pre>

<p>Note that you can also access the filename of the upload received via the params keyword:</p>

<pre class="sh_perl">    post &#39;/some/route&#39; =&#62; sub {
        # params-&#62;{&#39;files_input&#39;} is the filename of the file uploaded
    };</pre>

<p>See <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Request/Upload.pm" class="podlinkpod"
>Dancer::Request::Upload</a> for details about the interface provided.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="uri_for"
>uri_for</a></h2>

<p>Returns a fully-qualified URI for the given path:</p>

<pre class="sh_perl">    get &#39;/&#39; =&#62; sub {
        redirect uri_for(&#39;/path&#39;);
        # can be something like: <a href="http://localhost:3000/path" class="podlinkurl"
>http://localhost:3000/path</a>
    };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="captures"
>captures</a></h2>

<p>Returns a reference to a copy of <code>%+</code>, if there are named captures in the route Regexp.</p>

<p>Named captures are a feature of Perl 5.10, and are not supported in earlier versions:</p>

<pre class="sh_perl">    get qr{
        / (?&#60;object&#62; user   | ticket | comment )
        / (?&#60;action&#62; delete | find )
        / (?&#60;id&#62; \d+ )
        /?$
    }x
    , sub {
        my $value_for = captures;
        &#34;i don&#39;t want to $$value_for{action} the $$value_for{object} $$value_for{id} !&#34;
    };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="var"
>var</a></h2>

<p>Provides an accessor for variables shared between filters and route handlers. Given a key/value pair, it sets a variable:</p>

<pre class="sh_perl">    before sub {
        var foo =&#62; 42;
    };</pre>

<p>Later, route handlers and other filters will be able to read that variable:</p>

<pre class="sh_perl">    get &#39;/path&#39; =&#62; sub {
        my $foo = var &#39;foo&#39;;
        ...
    };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="vars"
>vars</a></h2>

<p>Returns the HashRef of all shared variables set during the filter/route chain with the <code>var</code> keyword:</p>

<pre class="sh_perl">    get &#39;/path&#39; =&#62; sub {
        if (vars-&#62;{foo} eq 42) {
            ...
        }
    };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="warning"
>warning</a></h2>

<p>Logs a warning message through the current logger engine:</p>

<pre class="sh_perl">    warning &#34;This is a warning&#34;;</pre>

<p>See <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Logger.pm" class="podlinkpod"
>Dancer::Logger</a> for details on how to configure where log messages go.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module has been written by Alexis Sukrieh &#60;sukria@cpan.org&#62; and others, see the AUTHORS file that comes with this distribution for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SOURCE_CODE"
>SOURCE CODE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The source code for this module is hosted on GitHub <a href="http://github.com/sukria/Dancer" class="podlinkurl"
>http://github.com/sukria/Dancer</a>. Feel free to fork the repository and submit pull requests! (See <a href="/~xsawyerx/Dancer-1.3095/lib/Dancer/Development.pod" class="podlinkpod"
>Dancer::Development</a> for details on how to contribute).</p>

<p>Also, why not <a href="https://github.com/sukria/Dancer/toggle_watch" class="podlinkurl"
>watch the repo</a> to keep up to date with the latest upcoming changes?</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="GETTING_HELP_/_CONTRIBUTING"
>GETTING HELP / CONTRIBUTING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Dancer development team can be found on #dancer on irc.perl.org: <a href="irc://irc.perl.org/dancer" class="podlinkurl"
>irc://irc.perl.org/dancer</a></p>

<p>If you don&#39;t have an IRC client installed/configured, there is a simple web chat client at <a href="http://www.perldancer.org/irc" class="podlinkurl"
>http://www.perldancer.org/irc</a> for you.</p>

<p>There is also a Dancer users mailing list available - subscribe at:</p>

<p><a href="http://lists.perldancer.org/cgi-bin/listinfo/dancer-users" class="podlinkurl"
>http://lists.perldancer.org/cgi-bin/listinfo/dancer-users</a></p>

<p>If you&#39;d like to contribute to the Dancer project, please see <a href="http://www.perldancer.org/contribute" class="podlinkurl"
>http://www.perldancer.org/contribute</a> for all the ways you can help!</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DEPENDENCIES"
>DEPENDENCIES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following modules are mandatory (Dancer cannot run without them):</p>

<dl>
<dt><a name='HTTP'></a><a name="HTTP::Server::Simple::PSGI"
><a href="/perldoc?HTTP%3A%3AServer%3A%3ASimple%3A%3APSGI" class="podlinkpod"
>HTTP::Server::Simple::PSGI</a></a></dt>

<dd>
<dt><a name='HTTP'></a><a name="HTTP::Body"
><a href="/perldoc?HTTP%3A%3ABody" class="podlinkpod"
>HTTP::Body</a></a></dt>

<dd>
<dt><a name="LWP"
><a href="/perldoc?LWP" class="podlinkpod"
>LWP</a></a></dt>

<dd>
<dt><a name='MIME'></a><a name="MIME::Types"
><a href="/perldoc?MIME%3A%3ATypes" class="podlinkpod"
>MIME::Types</a></a></dt>

<dd>
<dt><a name="URI"
><a href="/perldoc?URI" class="podlinkpod"
>URI</a></a></dt>
</dl>

<p>The following modules are optional:</p>

<dl>
<dt><a name='JSON'></a><a name="JSON_:_needed_to_use_JSON_serializer"
><a href="/perldoc?JSON" class="podlinkpod"
>JSON</a> : needed to use JSON serializer</a></dt>

<dd>
<dt><a name='Plack'></a><a name="Plack_:_in_order_to_use_PSGI"
><a href="/perldoc?Plack" class="podlinkpod"
>Plack</a> : in order to use PSGI</a></dt>

<dd>
<dt><a name='Template'></a><a name="Template_:_in_order_to_use_TT_for_rendering_views"
><a href="/perldoc?Template" class="podlinkpod"
>Template</a> : in order to use TT for rendering views</a></dt>

<dd>
<dt><a name='XML'></a><a name="XML::Simple_and_XML:SAX_or_XML:Parser_for_XML_serialization"
><a href="/perldoc?XML%3A%3ASimple" class="podlinkpod"
>XML::Simple</a> and <a href="XML:SAX" class="podlinkurl"
>XML:SAX</a> or <a href="XML:Parser" class="podlinkurl"
>XML:Parser</a> for XML serialization</a></dt>

<dd>
<dt><a name='YAML'></a><a name="YAML_:_needed_for_configuration_file_support"
><a href="/perldoc?YAML" class="podlinkpod"
>YAML</a> : needed for configuration file support</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE"
>LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is free software and is published under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Main Dancer web site: <a href="http://perldancer.org/" class="podlinkurl"
>http://perldancer.org/</a>.</p>

<p>The concept behind this module comes from the Sinatra ruby project, see <a href="http://www.sinatrarb.com/" class="podlinkurl"
>http://www.sinatrarb.com/</a> for details.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78109 Uploads, 24692 Distributions
105913 Modules, 9639 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Mon Apr 23 07:39:21 2012 GMT (1.14464402198792) @cpansearch1 -->
 </body>
</html>
