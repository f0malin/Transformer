<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Test::Inline - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Test-Inline",3]);
    _gaq.push(["_setCustomVar",5,"Release","Test-Inline-2.212",3]);
    _gaq.push(["_setCustomVar",3,"Module","Test::Inline",3]);
    _gaq.push(["_setCustomVar",1,"Author","ADAMK",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Test::Inline">permalink</a></div>
  <a href="/~adamk/">Adam Kennedy</a> &gt;
  <a href="/~adamk/Test-Inline-2.212/">Test-Inline-2.212</a> &gt;
  Test::Inline
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/884124d0169f41668fb3f948b2ba8b0a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/A/AD/ADAMK/Test-Inline-2.212.tar.gz">Test-Inline-2.212.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Test%3A%3AInline;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~ADAMK/Test-Inline-2.212/lib/Test/Inline.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 9</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Test-Inline">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.212 &nbsp;
<span class="noprint">
  <a href="/src/ADAMK/Test-Inline-2.212/lib/Test/Inline.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#How_does_it_work?'>How does it work?</a>
    <li class='indexItem indexItem2'><a href='#What_is_Test::Inline_good_for?'>What is Test::Inline good for?</a>
    <li class='indexItem indexItem2'><a href='#What_is_Test::Inline_bad_for?'>What is Test::Inline bad for?</a>
    <li class='indexItem indexItem2'><a href='#Getting_Started'>Getting Started</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#new'>new</a>
    <li class='indexItem indexItem2'><a href='#exception'>exception</a>
    <li class='indexItem indexItem2'><a href='#InputHandler'>InputHandler</a>
    <li class='indexItem indexItem2'><a href='#ExtractHandler'>ExtractHandler</a>
    <li class='indexItem indexItem2'><a href='#ContentHandler'>ContentHandler</a>
    <li class='indexItem indexItem2'><a href='#OutputHandler'>OutputHandler</a>
    <li class='indexItem indexItem2'><a href='#add_$file,_$directory,_\$source,_$Handle'>add $file, $directory, \$source, $Handle</a>
    <li class='indexItem indexItem2'><a href='#add_class'>add_class</a>
    <li class='indexItem indexItem2'><a href='#add_all'>add_all</a>
    <li class='indexItem indexItem2'><a href='#classes'>classes</a>
    <li class='indexItem indexItem2'><a href='#class'>class</a>
    <li class='indexItem indexItem2'><a href='#filenames'>filenames</a>
    <li class='indexItem indexItem2'><a href='#schedule'>schedule</a>
    <li class='indexItem indexItem2'><a href='#manifest'>manifest</a>
    <li class='indexItem indexItem2'><a href='#save'>save</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#TO_DO'>TO DO</a>
  <li class='indexItem indexItem1'><a href='#SUPPORT'>SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#ACKNOWLEDGEMENTS'>ACKNOWLEDGEMENTS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Test::Inline - Embed your tests in your code,
next to what is being tested</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Embedding tests allows tests to be placed near the code being tested.</p>

<p>This is a nice supplement to the traditional .t files.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="How_does_it_work?"
>How does it work?</a></h2>

<p><code>Test::Inline</code> lets you write small fragments of general or function-specific testing code,
and insert it anywhere you want in your modules,
inside a specific tagged <a href="/perldoc?perlpod" class="podlinkpod"
>POD</a> segment,
like the following.</p>

<pre class="sh_perl">  =begin testing
  
  # This code assumes we have a cpuinfo file
  ok( -f /proc/cpuinfo, &#39;Host has a standard /proc/cpuinfo file&#39; );
  
  =end testing
  
  =begin testing label
  
  # Test generation of the &#60;label&#62; HTML tag
  is( My::HTML-&#62;label(&#39;foo&#39;),        &#39;&#60;label&#62;foo&#60;/label&#62;&#39;,           &#39;-&#62;label(simple) works&#39; );
  is( My::HTML-&#62;label(&#39;bar&#39;, &#39;foo&#39;), &#39;&#60;label for=&#34;bar&#34;&#62;foo&#60;/label&#62;&#39;, &#39;-&#62;label(for) works&#39;    );
  
  =end testing</pre>

<p>You can add as many, or as few, of these chunks of tests as you wish. The key condition when writing them is that they should be logically independant of each other. Each chunk of testing code should not die or crash if it is run before or after another chunk.</p>

<p>Using <a href="/~adamk/Test-Inline-2.212/script/inline2test" class="podlinkpod"
>inline2test</a> or another test compiler, you can then transform these chunks in a test script, or an entire tree of modules into a complete set of standard <a href="/perldoc?Test%3A%3AMore" class="podlinkpod"
>Test::More</a>-based test scripts.</p>

<p>These test scripts can then be executed as normal.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="What_is_Test::Inline_good_for?"
>What is Test::Inline good for?</a></h2>

<p><code>Test::Inline</code> is incredibly useful for doing ad-hoc unit testing.</p>

<p>In any large groups of modules, you can add testing code here, there and everywhere, anywhere you want. The next time the test compiler is run, a new test script will just appear.</p>

<p>This also makes it great for testing assumptions you normally wouldn&#39;t bother to write run-time code to test. It ensures that your assumptions about the way Perl does some operation, or about the state of the host, are confirmed at install-time.</p>

<p>If your assumption is ever wrong, it gets picked up at install-time and based on the test failures, you can correct your assumption.</p>

<p>It&#39;s also extremely useful for systematically testing self-contained code.</p>

<p>That is, any code which can be independantly tested without the need for external systems such as databases, and that has no side-effects on external systems.</p>

<p>All of this code, written by multiple people, can then have one single set of test files generated. You can check all the bits and pieces of a large API, or anything you like, in fine detail.</p>

<p>Test::Inline also introduces the concept of unit-tested documentation.</p>

<p>Not only can your code be tested, but if you have a FAQ or some other pure documentation module, you can validate that the documentation is correct for the version of the module installed.</p>

<p>If the module ever changes to break the documentation, you can catch it and correct the documentation.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="What_is_Test::Inline_bad_for?"
>What is Test::Inline bad for?</a></h2>

<p><code>Test::Inline</code> is <b>not</b> a complete testing solution, and there are several types of testing you probably DON&#39;T want to use it for.</p>

<ul>
<li>Static testing across the entire codebase</li>

<li>Functional testing</li>

<li>Tests with side-effects such as those that might change a testing database</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Getting_Started"
>Getting Started</a></h2>

<p>Because Test::Inline creates test scripts with file names that <b>don&#39;t</b> start with a number (for ordering purposes), the first step is to create your normal test scripts using file names in the CPAN style of <em>01_compile.t</em>, <em>02_main.t</em>, <em>03_foobar.t</em>, and so on.</p>

<p>You can then add your testing fragments wherever you like throughout your code, and use the <em>inline2test</em> script to generate the test scripts for the inline tests. By default the test scripts will be named after the packages/classes that the test fragments are found in.</p>

<p>Tests for Class::Name will end up in the file <code>class_name.t</code>.</p>

<p>These test files sit quite happily alongside your number test scripts.</p>

<p>When you run the test suite as you normally would, the inline scripts will be run after the numbered tests.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="new"
>new</a></h2>

<pre class="sh_perl">  my $Tests = Test::Inline-&#62;new(
      verbose  =&#62; 1,
      readonly =&#62; 1,
      output   =&#62; &#39;auto&#39;,
      manifest =&#62; &#39;auto/manifest&#39;,
  );</pre>

<p>The <code>new</code> constructor creates a new test generation framework. Once the constructor has been used to create the generator, the <code>add_class</code> method can be used to specify classes, or class heirachies, to generate tests for.</p>

<p><b>verbose</b> - The <code>verbose</code> option causes the generator to write state and debugging information to STDOUT as it runs.</p>

<p><b>manifest</b> - The <code>manifest</code> option, if provided, will cause a manifest file to be created and written to disk. The manifest file contains a list of all the test files generated, but listed in the prefered order they should be processed to best satisfy the class-level dependency of the tests.</p>

<p><b>check_count</b> - The <code>check_count</code> value controls how strictly the test script will watch the number of tests that have been executed.</p>

<p>When set to false, the script does no count checking other than the standard total count for scripts (where all section counts are known)</p>

<p>When set to <code>1</code> (the default), <code>Test::Inline</code> does smart count checking, doing section-by-section checking for known-count sections <b>only</b> when the total for the entire script is not known.</p>

<p>When set to <code>2</code> or higher, <code>Test::Inline</code> does full count checking, doing section-by-section checking for every section with a known number of tests.</p>

<p><b>file_content</b> - The <code>file_content</code> option should be provided as a CODE reference, which will be passed as arguments the <code>Test::Inline</code> object, and a single <a href="/~adamk/Test-Inline-2.212/lib/Test/Inline/Script.pm" class="podlinkpod"
>Test::Inline::Script</a> object, and should return a string containing the contents of the resulting test file. This will be written to the <code>OutputHandler</code>.</p>

<p><b>output</b> - The <code>output</code> option provides the location of the directory where the tests will be written to. It should both already exist, and be writable. If using a custom <code>OutputHandler</code>, the value of <code>output</code> should refer to the location <b>within the OutputHandler</b> that the files will be written to.</p>

<p><b>readonly</b> - The <code>readonly</code> option, if provided, indicates that any generated test files should be created (or set when updated) with read-only permissions, to prevent accidentally adding to or editing the test scripts directly (instead of via the classes).</p>

<p>This option is currently disabled by default, by may be enabled by default in a future release, so if you do NOT want your tests being created as read-only, you should explicitly set this option to false.</p>

<p><b>InputHandler</b> - The <code>InputHandler</code> option, if provided, supplies an alternative <code>FileHandler</code> from which source modules are retrieved.</p>

<p><b>OuputHandler</b> - The <code>OutputHandler</code> option, if provided, supplies an alternative <code>FileHandler</code> to which the resulting test scripts are written.</p>

<p>Returns a new <code>Test::Inline</code> object on success.</p>

<p>Returns <code>undef</code> if there is a problem with one of the options.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="exception"
>exception</a></h2>

<p>The <code>exception</code> method returns a flag which indicates whether error will be returned via exceptions.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="InputHandler"
>InputHandler</a></h2>

<p>The <code>InputHandler</code> method returns the file handler object that will be used to find and load the source code.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ExtractHandler"
>ExtractHandler</a></h2>

<p>The <code>ExtractHandler</code> accessor returns the object that will be used to extract the test sections from the source code.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ContentHandler"
>ContentHandler</a></h2>

<p>The <code>ContentHandler</code> accessor return the script content generation handler.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="OutputHandler"
>OutputHandler</a></h2>

<p>The <code>OutputHandler</code> accessor returns the file handler object that the generated test scripts will be written to.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="add_$file,_$directory,_\$source,_$Handle"
>add $file, $directory, \$source, $Handle</a></h2>

<p>The <code>add</code> method is a parameter-sensitive method for adding something to the build schedule.</p>

<p>It takes as argument a file path, a directory path, a reference to a SCALAR containing perl code, or an <a href="/perldoc?IO%3A%3AHandle" class="podlinkpod"
>IO::Handle</a> (or subclass) object. It will retrieve code from the parameter as appropriate, parse it, and create zero or more <a href="/~adamk/Test-Inline-2.212/lib/Test/Inline/Script.pm" class="podlinkpod"
>Test::Inline::Script</a> objects representing the test scripts that will be generated for that source code.</p>

<p>Returns the number of test scripts added, which could be zero, or <code>undef</code> on error.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="add_class"
>add_class</a></h2>

<pre class="sh_perl">  $Tests-&#62;add_class( &#39;Foo::Bar&#39; );
  $Tests-&#62;add_class( &#39;Foo::Bar&#39;, recursive =&#62; 1 );</pre>

<p>The <code>add_class</code> method adds a class to the list of those to have their tests generated. Optionally, the <code>recursive</code> option can be provided to add not just the class you provide, but all classes below it as well.</p>

<p>Returns the number of classes found with inline tests, and added, including <code>0</code> if no classes with tests are found. Returns <code>undef</code> if an error occurs while adding the class or it&#39;s children.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="add_all"
>add_all</a></h2>

<p>The <code>add_all</code> method will search the <code>InputHandler</code> for all *.pm files, and add them to the generation set.</p>

<p>Returns the total number of test scripts added, which may be zero, or <code>undef</code> on error.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="classes"
>classes</a></h2>

<p>The <code>classes</code> method returns a list of the names of all the classes that have been added to the <code>Test::Inline</code> object, or the null list <code>()</code> if nothing has been added.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="class"
>class</a></h2>

<p>For a given class name, fetches the <a href="/~adamk/Test-Inline-2.212/lib/Test/Inline/Script.pm" class="podlinkpod"
>Test::Inline::Script</a> object for that class, if it has been added to the <code>Test::Inline</code> object. Returns <code>undef</code> if the class has not been added to the <code>Test::Inline</code> object.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="filenames"
>filenames</a></h2>

<p>For all of the classes added, the <code>filenames</code> method generates a map of the filenames that the test files for the various classes should be written to.</p>

<p>Returns a reference to a hash with the classes as keys, and filenames as values.</p>

<p>Returns <code>0</code> if there are no files to write.</p>

<p>Returns <code>undef</code> on error.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="schedule"
>schedule</a></h2>

<p>While the <code>filenames</code> method generates a map of the files for the various classes, the <code>schedule</code> returns the list of file names in the order in which they should actually be executed.</p>

<p>Returns a reference to an array containing the file names as strings.</p>

<p>Returns <code>0</code> if there are no files to write.</p>

<p>Returns <code>undef</code> on error.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="manifest"
>manifest</a></h2>

<p>The <code>manifest</code> generates the contents of the manifest file, if it is both wanted and needed.</p>

<p>Returns the contents of the manifest file as a normal string, false if it is either not wanted or needed, or <code>undef</code> on error.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="save"
>save</a></h2>

<pre class="sh_perl">  $Tests-&#62;save;</pre>

<p>The <code>save</code> method generates the test files for all classes, and saves them to the <code>output</code> directory.</p>

<p>Returns the number of test files generated. Returns <code>undef</code> on error.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The &#34;Extended =begin&#34; syntax used for non-trivial sections is not formalised as part of the POD spec yet, although it is on the track to being included.</p>

<p>While simple &#39;=begin testing&#39; sections are fine and will pass POD testing, extended begin sections may cause POD errors.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TO_DO"
>TO DO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>- Add support for <code>example</code> sections</p>

<p>- Add support for <code>=for</code> sections</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT"
>SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Bugs should always be submitted via the CPAN bug tracker</p>

<p><a href="http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Inline" class="podlinkurl"
>http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Inline</a></p>

<p>Professional support, assistance, or customisations for large scale uses of <code>Test::Inline</code> are available from <a href="http://phase-n.com/" class="podlinkurl"
>http://phase-n.com/</a>.</p>

<p>For other issues, contact the maintainer.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Adam Kennedy &#60;adamk@cpan.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACKNOWLEDGEMENTS"
>ACKNOWLEDGEMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Thank you to Phase N (<a href="http://phase-n.com/" class="podlinkurl"
>http://phase-n.com/</a>) for permitting the open sourcing and release of this distribution.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2004 - 2010 Adam Kennedy.</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>The full text of the license can be found in the LICENSE file included with this module.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78283 Uploads, 24725 Distributions
106015 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 08:06:24 2012 GMT (0.0761849880218506) @cpansearch1 -->
 </body>
</html>
