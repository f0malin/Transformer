<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Class::Date - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Class-Date",3]);
    _gaq.push(["_setCustomVar",5,"Release","Class-Date-1.1.10",3]);
    _gaq.push(["_setCustomVar",3,"Module","Class::Date",3]);
    _gaq.push(["_setCustomVar",1,"Author","DLUX",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Class::Date">permalink</a></div>
  <a href="/~dlux/">Szab&oacute;, Bal&aacute;zs</a> &gt;
  <a href="/~dlux/Class-Date-1.1.10/">Class-Date-1.1.10</a> &gt;
  Class::Date
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/2b3ab67feb925003fcd9aa4130c92c9b?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DL/DLUX/Class-Date-1.1.10.tar.gz">Class-Date-1.1.10.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Class%3A%3ADate;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DLUX/Class-Date-1.1.10/Date.pod">Annotate this POD
(1)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Date%3A%3ACalc">Date::Calc</a><br>
<a href="/perldoc?Date%3A%3AManip">Date::Manip</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?GD%3A%3AGraph">GD::Graph</a><br>
<a href="/perldoc?Time%3A%3ALocal">Time::Local</a><br>
<a href="/perldoc?Apache%3A%3AReload">Apache::Reload</a><br>
<a href="/perldoc?Date%3A%3AHandler">Date::Handler</a><br>
<a href="/perldoc?Getopt%3A%3AStd">Getopt::Std</a><br>
<a href="/perldoc?Date%3A%3ASimple">Date::Simple</a><br>
<a href="/perldoc?MIME%3A%3ALite">MIME::Lite</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Class%3A%3ADate">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 2</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 3</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Class-Date">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.1.10 &nbsp;
<span class="noprint">
  <a href="/src/DLUX/Class-Date-1.1.10/Date.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#USAGE'>USAGE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Creating_a_new_date_object'>Creating a new date object</a>
    <li class='indexItem indexItem2'><a href='#Operations'>Operations</a>
    <li class='indexItem indexItem2'><a href='#Accessing_data_from_a_Class::Date_and_Class::Date::Rel_object'>Accessing data from a Class::Date and Class::Date::Rel object</a>
    <li class='indexItem indexItem2'><a href='#Error_handling'>Error handling</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#DST_ADJUST'>DST_ADJUST</a>
  <li class='indexItem indexItem1'><a href='#MONTHS_AND_YEARS'>MONTHS AND YEARS</a>
  <li class='indexItem indexItem1'><a href='#MONTH_BORDER_ADJUST'>MONTH_BORDER_ADJUST</a>
  <li class='indexItem indexItem1'><a href='#WORKING_WITHOUT_A_C_COMPILER'>WORKING WITHOUT A C COMPILER</a>
  <li class='indexItem indexItem1'><a href='#TIMEZONE_SUPPORT'>TIMEZONE SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#INTERNALS'>INTERNALS</a>
  <li class='indexItem indexItem1'><a href='#DEVELOPMENT_FOCUS'>DEVELOPMENT FOCUS</a>
  <li class='indexItem indexItem1'><a href='#SPEED_ISSUES'>SPEED ISSUES</a>
  <li class='indexItem indexItem1'><a href='#THREAD_SAFETY_and_MOD_PERL'>THREAD SAFETY and MOD_PERL</a>
  <li class='indexItem indexItem1'><a href='#OTHER_BUGS_AND_LIMITATIONS'>OTHER BUGS AND LIMITATIONS</a>
  <li class='indexItem indexItem1'><a href='#SUPPORT'>SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#WIN32_notes'>WIN32 notes</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#CREDITS'>CREDITS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Class::Date - Class for easy date and time manipulation</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Class::Date qw(:errors date localdate gmdate now -DateParse -EnvC);
  
  # creating absolute date object (local time)
  $date = new Class::Date [$year,$month,$day,$hour,$min,$sec];
  $date = date [$year,$month,$day,$hour,$min,$sec]; 
    # ^- &#34;date&#34; is an exportable function, the same as Class::Date-&#62;new
  $date = date { year =&#62; $year, month =&#62; $month, day =&#62; $day,
    hour =&#62; $hour, min =&#62; $min, sec =&#62; $sec };
  $date = date &#34;2001-11-12 07:13:12&#34;;
  $date = localdate &#34;2001-12-11&#34;;
  $date = now;                      #  the same as date(time)
  $date = date($other_date_object); # cloning
  ...

  # creating absolute date object (GMT)
  $date = new Class::Date [$year,$month,$day,$hour,$min,$sec],&#39;GMT&#39;;
  $date = gmdate &#34;2001-11-12 17:13&#34;;
  ...

  # creating absolute date object in any other timezone
  $date = new Class::Date [$year,$month,$day,$hour,$min,$sec],&#39;Iceland&#39;;
  $date = date &#34;2001-11-12 17:13&#34;, &#39;Iceland&#39;;
  $date2 = $date-&#62;new([$y2, $m2, $d2, $h2, $m2, $s2]); 
    # ^- timezone is inherited from the $date object

  # creating relative date object
  # (normally you don&#39;t need to create this object explicitly)
  $reldate = new Class::Date::Rel &#34;3Y 1M 3D 6h 2m 4s&#34;;
  $reldate = new Class::Date::Rel &#34;6Y&#34;;
  $reldate = new Class::Date::Rel $secs;  # secs
  $reldate = new Class::Date::Rel [$year,$month,$day,$hour,$min,$sec];
  $reldate = new Class::Date::Rel { year =&#62; $year, month =&#62; $month, day =&#62; $day,
    hour =&#62; $hour, min =&#62; $min, sec =&#62; $sec };
  $reldate = new Class::Date::Rel &#34;2001-11-12 07:13:12&#34;;
  $reldate = new Class::Date::Rel &#34;2001-12-11&#34;;

  # getting values of an absolute date object
  $date;              # prints the date in default output format (see below)
  $date-&#62;year;        # year, e.g: 2001
  $date-&#62;_year;       # year - 1900, e.g. 101
  $date-&#62;yr;          # 2-digit year 0-99, e.g 1
  $date-&#62;mon;         # month 1..12
  $date-&#62;month;       # same as prev.
  $date-&#62;_mon;        # month 0..11
  $date-&#62;_month;      # same as prev.
  $date-&#62;day;         # day of month
  $date-&#62;mday;        # day of month
  $date-&#62;day_of_month;# same as prev.
  $date-&#62;hour;
  $date-&#62;min;
  $date-&#62;minute;      # same as prev.
  $date-&#62;sec;
  $date-&#62;second;      # same as prev.
  $date-&#62;wday;        # 1 = Sunday
  $date-&#62;_wday;       # 0 = Sunday
  $date-&#62;day_of_week; # same as prev.
  $date-&#62;yday;        
  $date-&#62;day_of_year; # same as prev.
  $date-&#62;isdst;       # DST?
  $date-&#62;daylight_savings; # same as prev.
  $date-&#62;epoch;       # UNIX time_t
  $date-&#62;monname;     # name of month, eg: March
  $date-&#62;monthname;   # same as prev.
  $date-&#62;wdayname;    # Thursday
  $date-&#62;day_of_weekname # same as prev.
  $date-&#62;hms          # 01:23:45
  $date-&#62;ymd          # 2000/02/29
  $date-&#62;mdy          # 02/29/2000
  $date-&#62;dmy          # 29/02/2000
  $date-&#62;meridiam     # 01:23 AM
  $date-&#62;ampm         # AM/PM
  $date-&#62;string       # 2000-02-29 12:21:11 (format can be changed, look below)
  &#34;$date&#34;             # same as prev.
  $date-&#62;tzoffset     # timezone-offset
  $date-&#62;strftime($format) # POSIX strftime (without the huge POSIX.pm)
  $date-&#62;tz           # returns the base timezone as you specify, eg: CET
  $date-&#62;tzdst        # returns the real timezone with dst information, eg: CEST

  ($year,$month,$day,$hour,$min,$sec)=$date-&#62;array;
  ($year,$month,$day,$hour,$min,$sec)=@{ $date-&#62;aref };
  # !! $year: 1900-, $month: 1-12

  ($sec,$min,$hour,$day,$mon,$year,$wday,$yday,$isdst)=$date-&#62;struct;
  ($sec,$min,$hour,$day,$mon,$year,$wday,$yday,$isdst)=@{ $date-&#62;sref };
  # !! $year: 0-, $month: 0-11

  $hash=$date-&#62;href; # $href can be reused as a constructor
  print $hash-&#62;{year}.&#34;-&#34;.$hash-&#62;{month}. ... $hash-&#62;{sec} ... ;
  
  %hash=$date-&#62;hash;
  # !! $hash{year}: 1900-, $hash{month}: 1-12

  $date-&#62;month_begin  # First day of the month (date object)
  $date-&#62;month_end    # Last day of the month
  $date-&#62;days_in_month # 28..31

  # constructing new date based on an existing one:
  $new_date = $date-&#62;clone;
  $new_date = $date-&#62;clone( year =&#62; 1977, sec =&#62; 14 );
  # valid keys: year, _year, month, mon, _month, _mon, day, mday, day_of_month,
  #             hour, min, minute, sec, second, tz
  # constructing a new date, which is the same as the original, but in 
  # another timezone:
  $new_date = $date-&#62;to_tz(&#39;Iceland&#39;);

  # changing date format
  {
    local $Class::Date::DATE_FORMAT=&#34;%Y%m%d%H%M%S&#34;;
    print $date       # result: 20011222000000
    $Class::Date::DATE_FORMAT=undef;
    print $date       # result: Thu Oct 13 04:54:34 1994
    $Class::Date::DATE_FORMAT=&#34;%Y/%m/%d&#34;
    print $date       # result: 1994/10/13
  }

  # error handling
  $a = date($date_string);
  if ($a) { # valid date
    ...
  } else { # invalid date
    if ($a-&#62;error == E_INVALID) { ... }
    print $a-&#62;errstr;
  }

  # adjusting DST in calculations  (see the doc)
  $Class::Date::DST_ADJUST = 1; # this is the default
  $Class::Date::DST_ADJUST = 0;

  # &#34;month-border adjust&#34; flag 
  $Class::Date::MONTH_BORDER_ADJUST = 0; # this is the default
  print date(&#34;2001-01-31&#34;)+&#39;1M&#39;; # will print 2001-03-03
  $Class::Date::MONTH_BORDER_ADJUST = 1;
  print date(&#34;2001-01-31&#34;)+&#39;1M&#39;; # will print 2001-02-28

  # date range check
  $Class::Date::RANGE_CHECK = 0; # this is the default
  print date(&#34;2001-02-31&#34;); # will print 2001-03-03
  $Class::Date::RANGE_CHECK = 1;
  print date(&#34;2001-02-31&#34;); # will print nothing

  # getting values of a relative date object
  $reldate;              # reldate in seconds (assumed 1 month = 2_629_744 secs)
  $reldate-&#62;year;
  $reldate-&#62;mon;
  $reldate-&#62;month;       # same as prev.
  $reldate-&#62;day;
  $reldate-&#62;hour;
  $reldate-&#62;min;
  $reldate-&#62;minute;      # same as prev.
  $reldate-&#62;sec;         # same as $reldate
  $reldate-&#62;second;      # same as prev.
  $reldate-&#62;sec_part;    # &#34;second&#34; part of the relative date
  $reldate-&#62;mon_part;    # &#34;month&#34;  part of the relative date

  # arithmetic with dates:
  print date([2001,12,11,4,5,6])-&#62;truncate; 
                               # will print &#34;2001-12-11&#34;
  $new_date = $date+$reldate;
  $date2    = $date+&#39;3Y 2D&#39;;   # 3 Years and 2 days
  $date3    = $date+[1,2,3];   # $date plus 1 year, 2 months, 3 days
  $date4    = $date+&#39;3-1-5&#39;    # $date plus 3 years, 1 months, 5 days

  $new_date = $date-$reldate;
  $date2    = $date-&#39;3Y&#39;;      # 3 Yearss
  $date3    = $date-[1,2,3];   # $date minus 1 year, 2 months, 3 days
  $date4    = $date-&#39;3-1-5&#39;    # $date minus 3 years, 1 month, 5 days

  $new_reldate = $date1-$date2;
  $reldate2 = Class::Date-&#62;new(&#39;2000-11-12&#39;)-&#39;2000-11-10&#39;;
  $reldate3    = $date3-&#39;1977-11-10&#39;;

  $days_between = (Class::Date-&#62;new(&#39;2001-11-12&#39;)-&#39;2001-07-04&#39;)-&#62;day;

  # comparison between absolute dates
  print $date1 &#62; $date2 ? &#34;I am older&#34; : &#34;I am younger&#34;;

  # comparison between relative dates
  print $reldate1 &#62; $reldate2 ? &#34;I am faster&#34; : &#34;I am slower&#34;;

  # Adding / Subtracting months and years are sometimes tricky:
  print date(&#34;2001-01-29&#34;) + &#39;1M&#39; - &#39;1M&#39;; # gives &#34;2001-02-01&#34;
  print date(&#34;2000-02-29&#34;) + &#39;1Y&#39; - &#39;1Y&#39;; # gives &#34;2000-03-01&#34;

  # Named interface ($date2 does not necessary to be a Class::Date object)
  $date1-&#62;string;               # same as $date1 in scalar context
  $date1-&#62;subtract($date2);     # same as $date1 - $date2
  $date1-&#62;add($date2);          # same as $date1 + $date2
  $date1-&#62;compare($date2);      # same as $date1 &#60;=&#62; $date2

  $reldate1-&#62;sec;               # same as $reldate1 in numeric or scalar context
  $reldate1-&#62;compare($reldate2);# same as $reldate1 &#60;=&#62; $reldate2
  $reldate1-&#62;add($reldate2);    # same as $reldate1 + $reldate2
  $reldate1-&#62;neg                # used for subtraction

  # Disabling Class::Date warnings at load time
  BEGIN { $Class::Date::WARNINGS=0; }
  use Class::Date;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is intended to provide a general-purpose date and datetime type for perl. You have a Class::Date class for absolute date and datetime, and have a Class::Date::Rel class for relative dates.</p>

<p>You can use &#34;+&#34;, &#34;-&#34;, &#34;&#60;&#34; and &#34;&#62;&#34; operators as with native perl data types.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="USAGE"
>USAGE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you want to use a date object, you need to do the following:</p>

<pre class="sh_perl">  - create a new object
  - do some operations (+, -, comparison)
  - get result back</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Creating_a_new_date_object"
>Creating a new date object</a></h2>

<p>You can create a date object by the &#34;date&#34;, &#34;localdate&#34; or &#34;gmdate&#34; function, or by calling the Class::Date constructor.</p>

<p>&#34;date&#34; and &#34;Class::Date-&#62;new&#34; are equivalent, both has two arguments: The date and the timezone.</p>

<pre class="sh_perl">  $date1= date [2000,11,12];
  $date2= Class::Date-&#62;new([2000,06,11,13,11,22],&#39;GMT&#39;);
  $date2= $date1-&#62;new([2000,06,11,13,11,22]);</pre>

<p>If the timezone information is omitted, then it first check if &#34;new&#34; is called as an object method or a class method. If it is an object method, then it inherits the timezone from the base object, otherwise the default timezone is used ($Class::Date::DEFAULT_TIMEZONE), which is usually set to the local timezone (which is stored in $Class::Date::LOCAL_TIMEZONE). These two variables are set only once to the value, which is returned by the Class::Date::local_timezone() function. You can change these values whenever you want.</p>

<p>&#34;localdate $x&#34; is equivalent to &#34;date $x, $Class::Date::LOCAL_TIMEZONE&#34;, &#34;gmdate $x&#34; is equivalent to &#34;date $x, $Class::Date::GMT_TIMEZONE&#34;.</p>

<p>$Class::Date::GMT_TIMEZONE is set to &#39;GMT&#39; by default.</p>

<pre class="sh_perl">  $date1= localdate [2000,11,12];
  $date2= gmdate [2000,4,2,3,33,33];

  $date = localdate(time);</pre>

<p>The format of the accepted input date can be:</p>

<dl>
<dt><a name='year'></a><a name="[$year,$month,$day,$hour,$min,$sec]"
>[$year,$month,$day,$hour,$min,$sec]</a></dt>

<dd>
<p>An array reference with 6 elements. The missing elements have default values (year: 2000, month, day: 1, hour, min, sec: 0)</p>

<dt><a name='year'></a><a name="{_year_=&#62;_$year,_month_=&#62;_$month,_day_=&#62;_$day,_hour_=&#62;_$hour,_min_=&#62;_$min,_sec_=&#62;_$sec_}"
>{ year =&#62; $year, month =&#62; $month, day =&#62; $day, hour =&#62; $hour, min =&#62; $min, sec =&#62; $sec }</a></dt>

<dd>
<p>A hash reference with the same 6 elements as above.</p>

<dt><a name='YYYYMMDDhhmmss'></a><a name="&#34;YYYYMMDDhhmmss&#34;"
>&#34;YYYYMMDDhhmmss&#34;</a></dt>

<dd>
<p>A mysql-style timestamp value, which consist of at least 14 digit.</p>

<dt><a name='973897262'></a><a name="&#34;973897262&#34;"
>&#34;973897262&#34;</a></dt>

<dd>
<p>A valid 32-bit integer: This is parsed as a unix time.</p>

<dt><a name='YYYY'></a><a name="&#34;YYYY-MM-DD_hh:mm:ss&#34;"
>&#34;YYYY-MM-DD hh:mm:ss&#34;</a></dt>

<dd>
<p>A standard ISO(-like) date format. Additional &#34;.fraction&#34; part is ignored, &#34;:ss&#34; can be omitted.</p>

<dt><a name='additional'></a><a name="additional_input_formats"
>additional input formats</a></dt>

<dd>
<p>You can specify &#34;-DateParse&#34; as an import parameter, e.g:</p>

<pre class="sh_perl">  use Class::Date qw(date -DateParse);</pre>

<p>With this, the module will try to load Date::Parse module, and if it find it then all these formats can be used as an input. Please refer to the Date::Parse documentation.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Operations"
>Operations</a></h2>

<dl>
<dt><a name="addition"
>addition</a></dt>

<dd>
<p>You can add the following to a Class::Date object:</p>

<pre class="sh_perl">  - a valid Class::Date::Rel object
  - anything, that can be used for creating a new Class::Date::Rel object</pre>

<p>It means that you don&#39;t need to create a new Class::Date::Rel object every time when you add something to the Class::Date object, it creates them automatically:</p>

<pre class="sh_perl">  $date= Class::Date-&#62;new(&#39;2001-12-11&#39;)+Class::Date::Rel-&#62;new(&#39;3Y&#39;);</pre>

<p>is the same as:</p>

<pre class="sh_perl">  $date= date(&#39;2001-12-11&#39;)+&#39;3Y&#39;;</pre>

<p>You can provide a Class::Date::Rel object in the following form:</p>

<dl>
<dt><a name='array'></a><a name="array_ref"
>array ref</a></dt>

<dd>
<p>The same format as seen in Class::Date format, except the default values are different: all zero.</p>

<dt><a name='hash'></a><a name="hash_ref"
>hash ref</a></dt>

<dd>
<p>The same format as seen in Class::Date format, except the default values are different: all zero.</p>

<dt><a name='973897262'></a><a name="&#34;973897262&#34;"
>&#34;973897262&#34;</a></dt>

<dd>
<p>A valid 32-bit integer is parsed as seconds.</p>

<dt><a name='YYYY'></a><a name="&#34;YYYY-MM-DD_hh:mm:ss&#34;"
>&#34;YYYY-MM-DD hh:mm:ss&#34;</a></dt>

<dd>
<p>A standard ISO date format, but this is parsed as relative date date and time, so month, day and year can be zero (and defaults to zero).</p>

<dt><a name='12Y'></a><a name="&#34;12Y_6M_6D_20h_12m_5s&#34;"
>&#34;12Y 6M 6D 20h 12m 5s&#34;</a></dt>

<dd>
<p>This special string can be used if you don&#39;t want to use the ISO format. This string consists of whitespace separated tags, each tag consists of a number and a unit. The units can be:</p>

<pre class="sh_perl">  Y: year
  M: month
  D: day
  h: hour
  m: min
  s: sec</pre>

<p>The number and unit must be written with no space between them.</p>
</dd>
</dl>

<dt><a name="substraction"
>substraction</a></dt>

<dd>
<p>The same rules are true for substraction, except you can substract two Class::Date object from each other, and you will get a Class::Date::Rel object:</p>

<pre class="sh_perl">  $reldate=$date1-$date2;
  $reldate=date(&#39;2001-11-12 12:11:07&#39;)-date(&#39;2001-10-07 10:3:21&#39;);</pre>

<p>In this case, the &#34;month&#34; field of the $reldate object will be 0, and the other fields will contain the difference between two dates;</p>

<dt><a name="comparison"
>comparison</a></dt>

<dd>
<p>You can compare two Class::Date objects, or one Class::Date object and another data, which can be used for creating a new Class::Data object.</p>

<p>It means that you don&#39;t need to bless both objects, one of them can be a simple string, array ref, hash ref, etc (see how to create a date object).</p>

<pre class="sh_perl">  if ( date(&#39;2001-11-12&#39;) &#62; date(&#39;2000-11-11&#39;) ) { ... }</pre>

<p>or</p>

<pre class="sh_perl">  if ( date(&#39;2001-11-12&#39;) &#62; &#39;2000-11-11&#39; ) { ... }</pre>

<dt><a name="truncate"
>truncate</a></dt>

<dd>
<p>You can chop the time value from this object (set hour, min and sec to 0) with the &#34;truncate&#34; or &#34;trunc&#34; method. It does not modify the specified object, it returns with a new one.</p>

<dt><a name="clone"
>clone</a></dt>

<dd>
<p>You can create new date object based on an existing one, by using the &#34;clone&#34; method. Note, this DOES NOT modify the base object.</p>

<pre class="sh_perl">  $new_date = $date-&#62;clone( year =&#62; 2001, hour =&#62; 14 );</pre>

<p>The valid keys are: year, _year, month, mon, _month, _mon, day, mday, day_of_month, hour, min, minute, sec, second, tz.</p>

<p>There is a &#34;set&#34; method, which does the same as the &#34;clone&#34;, it exists only for compatibility.</p>

<dt><a name="to_tz"
>to_tz</a></dt>

<dd>
<p>You can use &#34;to_tz&#34; to create a new object, which means the same time as the base object, but in the different timezone.</p>

<p>Note that $date-&#62;clone( tz =&#62; &#39;Iceland&#39;) and $date-&#62;to_tz(&#39;Iceland&#39;) is not the same! Cloning a new object with setting timezone will preserve the time information (hour, minute, second, etc.), but transfer the time into other timezone, while to_tz usually change these values based on the difference between the source and the destination timezone.</p>

<dt><a name='Operations'></a><a name="Operations_with_Class::Date::Rel"
>Operations with Class::Date::Rel</a></dt>

<dd>
<p>The Class::Date::Rel object consists of a month part and a day part. Most people only use the &#34;day&#34; part of it. If you use both part, then you can get these parts with the &#34;sec_part&#34; and &#34;mon_part&#34; method. If you use &#34;sec&#34;, &#34;month&#34;, etc. methods or if you use this object in a mathematical conent, then this object is converted to one number, which is interpreted as second. The conversion is based on a 30.436 days month. Don&#39;t use it too often, because it is confusing...</p>

<p>If you use Class::Date::Rel in an expression with other Class::Date or Class::Date::Rel objects, then it does what is expected:</p>

<pre class="sh_perl">  date(&#39;2001-11-12&#39;)+&#39;1M&#39; will be &#39;2001-12-12&#39;</pre>

<p>and</p>

<pre class="sh_perl">  date(&#39;1996-02-11&#39;)+&#39;2M&#39; will be &#39;1996-04-11&#39;</pre>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Accessing_data_from_a_Class::Date_and_Class::Date::Rel_object"
>Accessing data from a Class::Date and Class::Date::Rel object</a></h2>

<p>You can use the methods methods described at the top of the document if you want to access parts of the data which is stored in a Class::Date and Class::Date::Rel object.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Error_handling"
>Error handling</a></h2>

<p>If a date object became invalid, then the object will be reblessed to Class::Date::Invalid. This object is false in boolean environment, so you can test the date validity like this:</p>

<pre class="sh_perl">  $a = date($input_date);
  if ($a) { # valid date
      ...
  } else { # invalid date
      if ($a-&#62;error == E_INVALID) { ... }
      print $a-&#62;errstr;
  }</pre>

<p>Note even the date is invalid, the expression &#34;defined $a&#34; always returns true, so the following is wrong:</p>

<pre class="sh_perl">  $a = date($input_date);
  if (defined $a) ... # WRONG!!!!</pre>

<p>You can test the error by getting the $date-&#62;error value. You might import the &#34;:errors&#34; tag:</p>

<pre class="sh_perl">  use Class::Date qw(:errors);</pre>

<p>Possible error values are:</p>

<dl>
<dt><a name="E_OK"
>E_OK</a></dt>

<dd>
<p>No errors.</p>

<dt><a name="E_INVALID"
>E_INVALID</a></dt>

<dd>
<p>Invalid date. It is set when some of the parts of the date are invalid, and Time::Local functions cannot convert them to a valid date.</p>

<dt><a name="E_RANGE"
>E_RANGE</a></dt>

<dd>
<p>This error is set, when parts of the date are valid, but the whole date is not valid, e.g. 2001-02-31. When the $Class::Date::RANGE_CHECK is not set, then these date values are automatically converted to a valid date: 2001-03-03, but the $date-&#62;error value are set to E_RANGE. If $Class::Date::RANGE_CHECK is set, then a date &#34;2001-02-31&#34; became invalid date.</p>

<dt><a name="E_UNPARSABLE"
>E_UNPARSABLE</a></dt>

<dd>
<p>This error is set, when the constructor cannot be created from a scalar, e.g:</p>

<pre class="sh_perl">  $a = date(&#34;4kd sdlsdf lwekrmk&#34;);</pre>

<dt><a name="E_UNDEFINED"
>E_UNDEFINED</a></dt>

<dd>
<p>This error is set, when you want to create a date object from an undefined value:</p>

<pre class="sh_perl">  $a = new Class::Date (undef);</pre>

<p>Note, that localdate(undef) will create a valid object, because it calls $Class::Date(time).</p>
</dd>
</dl>

<p>You can get the error in string form by calling the &#34;errstr&#34; method.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DST_ADJUST"
>DST_ADJUST <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>$DST_ADJUST is an importable variable, and is a very important configuration option.</p>

<p>If it is set to true (default), then it adjusts the date and time when the operation switches the border of DST. You will see the difference if you run this code:</p>

<pre class="sh_perl">  $Class::Date::DST_ADJUST=0;
  for (my $date=localdate(&#34;2000-06-11&#34;);$date&#60;&#34;2001-4-5&#34;;$date+=&#39;1D&#39;) {
    print $date.&#34;\n&#34;;
  }

  $Class::Date::DST_ADJUST=1;
  for (my $date=localdate(&#34;2000-06-11&#34;);$date&#60;&#34;2001-4-5&#34;;$date+=&#39;1D&#39;) {
    print $date.&#34;\n&#34;;
  }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MONTHS_AND_YEARS"
>MONTHS AND YEARS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you add or subtract &#34;months&#34; and &#34;years&#34; to a date, you may get wrong dates, e.g when you add one month to 2001-01-31, you expect to get 2001-02-31, but this date is invalid and converted to 2001-03-03. Thats&#39; why</p>

<pre class="sh_perl">  date(&#34;2001-01-31&#34;) + &#39;1M&#39; - &#39;1M&#39; != &#34;2001-01-31&#34;</pre>

<p>This problem can occur only with months and years, because others can easily be converted to seconds.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MONTH_BORDER_ADJUST"
>MONTH_BORDER_ADJUST <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>$MONTH_BORDER_ADJUST variable is used to switch on or off the month-adjust feature. This is used only when someone adds months or years to a date and then the resulted date became invalid. An example: adding one month to &#34;2001-01-31&#34; will result &#34;2001-02-31&#34;, and this is an invalid date.</p>

<p>When $MONTH_BORDER_ADJUST is false, this result simply normalized, and becomes &#34;2001-03-03&#34;. This is the default behaviour.</p>

<p>When $MONTH_BORDER_ADJUST is true, this result becomes &#34;2001-02-28&#34;. So when the date overflows, then it returns the last day insted.</p>

<p>Both settings keeps the time information.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WORKING_WITHOUT_A_C_COMPILER"
>WORKING WITHOUT A C COMPILER <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Class::Date can be used without a C compiler since 1.0.8. If you want to do this, you only need to copy the &#34;Date.pm&#34; whereever your perl compiler searches for it. You must make a &#34;Class&#34; directory for it before.</p>

<p>In Debian GNU/Linux system (woody) , a good choice can be the following:</p>

<pre class="sh_perl">  mkdir /usr/local/share/perl/5.6.1/Class
  cp Date.pm /usr/local/share/perl/5.6.1/Class</pre>

<p>And the module will work.</p>

<p>You can use the $WARNINGS switch to switch off the complains about the missing XS part from your perl program:</p>

<pre class="sh_perl">    BEGIN { $Class::Date::WARNINGS=0; }
    use Class::Date;
    ...</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TIMEZONE_SUPPORT"
>TIMEZONE SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Since 1.0.11, Class::Date handle timezones natively on most platforms (see the BUGS AND LIMITATIONS section for more info).</p>

<p>When the module is loaded, then it determines the local base timezone by calling the Class::Date::local_timezone() function, and stores these values into two variables, these are: $Class::Date::LOCAL_TIMEZONE and $Class::Date::DEFAULT_TIMEZONE. The first value is used, when you call the &#34;localdate&#34; function, the second value is used, when you call the &#34;date&#34; function and you don&#39;t specify the timezone. There is a $Class::Date::GMT_TIMEZONE function also, which is used by the &#34;gmdate&#34; function, this is set to &#39;GMT&#39;.</p>

<p>You can query the timezone of a date object by calling the $date-&#62;tz method. Note this value returns the timezone as you specify, so if you create the object with an unknown timezone, you will get this back. If you want to query the effective timezone, you can call the $date-&#62;tzdst method. This method returns only valid timezones, but it is not necessarily the timezone, which can be used to create a new object. For example $date-&#62;tzdst can return &#39;CEST&#39;, which is not a valid base timezone, because it contains daylight savings information also. On Linux systems, you can see the possible base timezones in the /usr/share/zoneinfo directory.</p>

<p>In Class::Date 1.1.6, a new environment variable is introduced: $Class::Date::NOTZ_TIMEZONE. This variable stores the local timezone, which is used, when the TZ environment variable is not set. It is introduced, because there are some systems, which cannot handle the queried timezone well. For example the local timezone is CST, it is returned by the tzname() perl function, but when I set the TZ environment variable to CST, it works like it would be GMT. The workaround is NOTZ_TIMEZONE: if a date object has a timezone, which is the same as NOTZ_TIMEZONE, then the TZ variable will be removed before each calculation. In normal case, it would be the same as setting TZ to $NOTZ_TIMEZONE, but some systems don&#39;t like it, so I decided to introduce this variable. The $Class::Date::NOTZ_TIMEZONE variable is set in the initialization of the module by removing the TZ variable from the environment and querying the tzname variable.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INTERNALS"
>INTERNALS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module uses operator overloading very heavily. I&#39;ve found it quite stable, but I am afraid of it a bit.</p>

<p>A Class::Date object is an array reference.</p>

<p>A Class::Date::Rel object is an array reference, which contains month and second information. I need to store it as an array ref, because array and month values cannot be converted into seconds, because of our super calendar.</p>

<p>You can add code references to the @Class::Date::NEW_FROM_SCALAR and @Class::Date::Rel::NEW_FROM_SCALAR. These arrays are iterated through when a scalar-format date must be parsed. These arrays only have one or two values at initialization. The parameters which the code references got are the same as the &#34;new&#34; method of each class. In this way, you can personalize the date parses as you want.</p>

<p>As of 0.90, the Class::Date has been rewritten. A lot of code and design decision has been borrowed from Matt Sergeant&#39;s Time::Object, and there will be some incompatibility with the previous public version (0.5). I tried to keep compatibility methods in Class::Date. If you have problems regarding this, please drop me an email with the description of the problem, and I will set the compatibility back.</p>

<p>Invalid dates are Class::Date::Invalid objects. Every method call on this object and every operation with this object returns undef or 0.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DEVELOPMENT_FOCUS"
>DEVELOPMENT FOCUS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module tries to be as full-featured as can be. It currently lacks business-day calculation, which is planned to be implemented in the 1.0.x series.</p>

<p>I try to keep this module not to depend on other modules and I want this module usable without a C compiler.</p>

<p>Currently the module uses the POSIX localtime function very extensively. This makes the date calculation a bit slow, but provides a rich interface, which is not provided by any other module. When I tried to redesign the internals to not depend on localtime, I failed, because there are no other way to determine the daylight savings information.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SPEED_ISSUES"
>SPEED ISSUES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There are two kind of adjustment in this module, DST_ADJUST and MONTH_BORDER_ADJUST. Both of them makes the &#34;+&#34; and &#34;-&#34; operations slower. If you don&#39;t need them, switch them off to achieve faster calculations.</p>

<p>In general, if you really need fast date and datetime calculation, don&#39;t use this module. As you see in the previous section, the focus of development is not the speed in 1.0. For fast date and datetime calculations, use Date::Calc module instead.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="THREAD_SAFETY_and_MOD_PERL"
>THREAD SAFETY and MOD_PERL <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is NOT thread-safe, since it uses C library functions, which are not thread-safe. Using this module in a multi-threaded environment can cause timezones to be messed up. I did not put any warning about it, you have to make sure that you understand this!</p>

<p>Under some circumstances in a mod_perl environment, you require the Env::C module to set the TZ variable properly before calling the time functions. I added the -EnvC import option to automatically load this module if it is not loaded already. Please read the mod_perl documentation about the environment variables and mod_perl to get the idea why it is required sometimes:</p>

<pre class="sh_perl">  <a href="http://perl.apache.org/docs/2.0/user/troubleshooting/troubleshooting.html#C_Libraries_Don_t_See_C__ENV__Entries_Set_by_Perl_Code" class="podlinkurl"
>http://perl.apache.org/docs/2.0/user/troubleshooting/troubleshooting.html#C_Libraries_Don_t_See_C__ENV__Entries_Set_by_Perl_Code</a></pre>

<p>You are sure have this problem if the $Class::Date::NOTZ_TIMEZONE variable is set to &#39;UTC&#39;, althought you are sure that your timezone is not that. Try -EnvC in this case, but make sure that you are not using it in a multi-threaded environment!</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OTHER_BUGS_AND_LIMITATIONS"
>OTHER BUGS AND LIMITATIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li>I cannot manage to get the timezone code working properly on ActivePerl 5.8.0 on win XP and earlier versions possibly have this problem also. If you have a system like this, then you will have only two timezones, the local and the GMT. Every timezone, which is not equal to $Class::Date::GMT_TIMEZONE is assumed to be local. This seems to be caused by the win32 implementation of timezone routines. I don&#39;t really know how to make this thing working, so I gave up this issue. If anyone know a working solution, then I will integrate it into Class::Date, but until then, the timezone support will not be available for these platforms.</li>

<li>Perl 5.8.0 and earlier versions has a bug in the strftime code on some operating systems (for example Linux), which is timezone related. I recommend using the strftime, which is provided with Class::Date, so don&#39;t try to use the module without the compiled part. The module will not work with a buggy strftime - the test is hardcoded into the beginning of the code. If you anyway want to use the module, remove the hardcoded &#34;die&#34; from the module, but do it for your own risk.</li>

<li>This module uses the POSIX functions for date and time calculations, so it is not working for dates beyond 2038 and before 1902.
<p>I don&#39;t know what systems support dates in 1902-1970 range, it may not work on your system. I know it works on the Linux glibc system with perl 5.6.1 and 5.7.2. I know it does not work with perl 5.005_03 (it may be the bug of the Time::Local module). Please report if you know any system where it does _not_ work with perl 5.6.1 or later.</p>

<p>I hope that someone will fix this with new time_t in libc. If you really need dates over 2038 and before 1902, you need to completely rewrite this module or use Date::Calc or other date modules.</p>
</li>

<li>This module uses Time::Local, and when it croaks, Class::Date returns &#34;Invalid date or time&#34; error message. Time::Local is different in the 5.005 and 5.6.x (and even 5.7.x) version of perl, so the following code will return different results:
<pre class="sh_perl">  $a = date(&#34;2006-11-11&#34;)-&#62;clone(year =&#62; -1);</pre>

<p>In perl 5.6.1, it returns an invalid date with error message &#34;Invali date or time&#34;, in perl 5.005 it returns an invalid date with range check error. Both are false if you use them in boolean context though, only the error message is different, but don&#39;t rely on the error message in this case. It however works in the same way if you change other fields than &#34;year&#34; to an invalid field.</p>
</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT"
>SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Class::Date is free software. IT COMES WITHOUT WARRANTY OF ANY KIND.</p>

<p>If you have questions, you can send questions directly to me:</p>

<pre class="sh_perl">  dlux@dlux.hu</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WIN32_notes"
>WIN32 notes <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can get a binary win32 version of Class::Date from Chris Winters&#39; .ppd repository with the following commands:</p>

<p>For people using PPM2:</p>

<pre class="sh_perl">  c:\&#62; ppm
  PPM&#62; set repository oi <a href="http://openinteract.sourceforge.net/ppmpackages/" class="podlinkurl"
>http://openinteract.sourceforge.net/ppmpackages/</a>
  PPM&#62; set save
  PPM&#62; install Class-Date</pre>

<p>For people using PPM3:</p>

<pre class="sh_perl">  c:\&#62; ppm
  PPM&#62; repository <a href="http://openinteract.sourceforge.net/ppmpackages/" class="podlinkurl"
>http://openinteract.sourceforge.net/ppmpackages/</a>
  PPM&#62; install Class-Date</pre>

<p>The first steps in PPM only needs to be done at the first time. Next time you just run the &#39;install&#39;.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2001 Szab&#243;, Bal&#225;zs (dLux)</p>

<p>All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>Portions Copyright (c) Matt Sergeant</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  dLux (Szab&#243;, Bal&#225;zs) &#60;dlux@dlux.hu&#62;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CREDITS"
>CREDITS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  - Matt Sergeant &#60;matt@sergeant.org&#62;
    (Lots of code are borrowed from the Time::Object module)
  - Tatsuhiko Miyagawa &#60;miyagawa@cpan.org&#62; (bugfixes)
  - Stas Bekman &#60;stas@stason.org&#62; (suggestions, bugfix)
  - Chris Winters &#60;chris@cwinters.com&#62; (win32 .ppd version)
  - Benoit Beausejour &#60;bbeausej@pobox.com&#62;
    (Parts of the timezone code is borrowed from his Date::Handler module)</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perl(1). <a href="/perldoc?Date%3A%3ACalc" class="podlinkpod"
>Date::Calc</a>(3pm). <a href="/perldoc?Time%3A%3AObject" class="podlinkpod"
>Time::Object</a>(3pm). <a href="/perldoc?Date%3A%3AHandler" class="podlinkpod"
>Date::Handler</a>(3pm).</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78052 Uploads, 24684 Distributions
105889 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 21 19:55:48 2012 GMT (0.0656418800354004) @cpansearch1 -->
 </body>
</html>
