<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Tie::DBI - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Tie-DBI",3]);
    _gaq.push(["_setCustomVar",5,"Release","Tie-DBI-1.05",3]);
    _gaq.push(["_setCustomVar",3,"Module","Tie::DBI",3]);
    _gaq.push(["_setCustomVar",1,"Author","TODDR",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Tie::DBI">permalink</a></div>
  <a href="/~toddr/">Todd Rinaldo</a> &gt;
  <a href="/~toddr/Tie-DBI-1.05/">Tie-DBI-1.05</a> &gt;
  Tie::DBI
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/593351ab4ba45a73fb5de512d89432d2?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/T/TO/TODDR/Tie-DBI-1.05.tar.gz">Tie-DBI-1.05.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Tie%3A%3ADBI;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~TODDR/Tie-DBI-1.05/lib/Tie/DBI.pm">Annotate this POD
(4)
</a></p>
     <p style="text-align:right"><a href="http://wiki.github.com/toddr/Tie-DBI/">Website</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?Tie%3A%3AFile">Tie::File</a><br>
<a href="/perldoc?DBD%3A%3AAnyData">DBD::AnyData</a><br>
<a href="/perldoc?DBIx%3A%3ASimple">DBIx::Simple</a><br>
<a href="/perldoc?DBIx%3A%3ASQLEngine">DBIx::SQLEngine</a><br>
<a href="/perldoc?MLDBM%3A%3ASync">MLDBM::Sync</a><br>
<a href="/perldoc?DBIx%3A%3ARecordset">DBIx::Recordset</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?DBD%3A%3ASybase">DBD::Sybase</a><br>
<a href="/perldoc?IPC%3A%3AShareable">IPC::Shareable</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Tie%3A%3ADBI">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Tie-DBI">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.05 &nbsp;
<span class="noprint">
  <a href="/src/TODDR/Tie-DBI-1.05/lib/Tie/DBI.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#USING_THE_MODULE'>USING THE MODULE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Creating_the_tie'>Creating the tie</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#USING_THE_TIED_ARRAY'>USING THE TIED ARRAY</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Fetching_information'>Fetching information</a>
    <li class='indexItem indexItem2'><a href='#Updating_information'>Updating information</a>
    <li class='indexItem indexItem2'><a href='#Other_functions'>Other functions</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#PERFORMANCE'>PERFORMANCE</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#AVAILABILITY'>AVAILABILITY</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Tie::DBI - Tie hashes to DBI relational databases</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Tie::DBI;
  tie %h,&#39;Tie::DBI&#39;,&#39;mysql:test&#39;,&#39;test&#39;,&#39;id&#39;,{CLOBBER=&#62;1};

  tie %h,&#39;Tie::DBI&#39;,{db       =&#62; &#39;mysql:test&#39;,
                   table    =&#62; &#39;test&#39;,
                   key      =&#62; &#39;id&#39;,
                   user     =&#62; &#39;nobody&#39;,
                   password =&#62; &#39;ghost&#39;,
                   CLOBBER  =&#62; 1};

  # fetching keys and values
  @keys = keys %h;
  @fields = keys %{$h{$keys[0]}};
  print $h{&#39;id1&#39;}-&#62;{&#39;field1&#39;};
  while (($key,$value) = each %h) {
    print &#34;Key = $key:\n&#34;;
    foreach (sort keys %$value) {
        print &#34;\t$_ =&#62; $value-&#62;{$_}\n&#34;;
    }
  }

  # changing data
  $h{&#39;id1&#39;}-&#62;{&#39;field1&#39;} = &#39;new value&#39;;
  $h{&#39;id1&#39;} = { field1 =&#62; &#39;newer value&#39;,
                field2 =&#62; &#39;even newer value&#39;,
                field3 =&#62; &#34;so new it&#39;s squeaky clean&#34; };

  # other functions
  tied(%h)-&#62;commit;
  tied(%h)-&#62;rollback;
  tied(%h)-&#62;select_where(&#39;price &#62; 1.20&#39;);
  @fieldnames = tied(%h)-&#62;fields;
  $dbh = tied(%h)-&#62;dbh;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module allows you to tie Perl associative arrays (hashes) to SQL databases using the DBI interface. The tied hash is associated with a table in a local or networked database. One column becomes the hash key. Each row of the table becomes an associative array, from which individual fields can be set or retrieved.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="USING_THE_MODULE"
>USING THE MODULE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>To use this module, you must have the DBI interface and at least one DBD (database driver) installed. Make sure that your database is up and running, and that you can connect to it and execute queries using DBI.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Creating_the_tie"
>Creating the tie</a></h2>

<pre class="sh_perl">   tie %var,&#39;Tie::DBI&#39;,[database,table,keycolumn] [,\%options]</pre>

<p>Tie a variable to a database by providing the variable name, the tie interface (always &#34;Tie::DBI&#34;), the data source name, the table to tie to, and the column to use as the hash key. You may also pass various flags to the interface in an associative array.</p>

<dl>
<dt><a name="database"
>database</a></dt>

<dd>
<p>The database may either be a valid DBI-style data source string of the form &#34;dbi:driver:database_name[:other information]&#34;, or a database handle that has previously been opened. See the documentation for DBI and your DBD driver for details. Because the initial &#34;dbi&#34; is always present in the data source, Tie::DBI will add it for you if necessary.</p>

<p>Note that some drivers (Oracle in particular) have an irritating habit of appending blanks to the end of fixed-length fields. This will screw up Tie::DBI&#39;s routines for getting key names. To avoid this you should create the database handle with a <b>ChopBlanks</b> option of TRUE. You should also use a <b>PrintError</b> option of true to avoid complaints during STORE and LISTFIELD calls.</p>

<dt><a name="table"
>table</a></dt>

<dd>
<p>The table in the database to bind to. The table must previously have been created with a SQL CREATE statement. This module will not create tables for you or modify the schema of the database.</p>

<dt><a name="key"
>key</a></dt>

<dd>
<p>The column to use as the hash key. This column must prevoiusly have been defined when the table was created. In order for this module to work correctly, the key column <i>must</i> be declared unique and not nullable. For best performance, the column should be also be declared a key. These three requirements are automatically satisfied for primary keys.</p>
</dd>
</dl>

<p>It is possible to omit the database, table and keycolumn arguments, in which case the module tries to retrieve the values from the options array. The options array contains a set of option/value pairs. If not provided, defaults are assumed. The options are:</p>

<dl>
<dt><a name="user"
>user</a></dt>

<dd>
<p>Account name to use for database authentication, if necessary. Default is an empty string (no authentication necessary).</p>

<dt><a name="password"
>password</a></dt>

<dd>
<p>Password to use for database authentication, if necessary. Default is an empty string (no authentication necessary).</p>

<dt><a name="db"
>db</a></dt>

<dd>
<p>The database to bind to the hash, if not provided in the argument list. It may be a DBI-style data source string, or a previously-opened database handle.</p>

<dt><a name="table"
>table</a></dt>

<dd>
<p>The name of the table to bind to the hash, if not provided in the argument list.</p>

<dt><a name="key"
>key</a></dt>

<dd>
<p>The name of the column to use as the hash key, if not provided in the argument list.</p>

<dt><a name='CLOBBER'></a><a name="CLOBBER_(default_0)"
>CLOBBER (default 0)</a></dt>

<dd>
<p>This controls whether the database is writable via the bound hash. A zero value (the default) makes the database essentially read only. An attempt to store to the hash will result in a fatal error. A CLOBBER value of 1 will allow you to change individual fields in the database, and to insert new records, but not to delete entire records. A CLOBBER value of 2 allows you to delete records, but not to erase the entire table. A CLOBBER value of 3 or higher will allow you to erase the entire table.</p>

<pre class="sh_perl">    Operation                       Clobber      Comment

    $i = $h{strawberries}-&#62;{price}     0       All read operations
    $h{strawberries}-&#62;{price} += 5     1       Update fields
    $h{bananas}={price=&#62;23,quant=&#62;3}   1       Add records
    delete $h{strawberries}            2       Delete records
    %h = ()                            3       Clear entire table
    undef %h                           3       Another clear operation</pre>

<p>All database operations are contingent upon your access privileges. If your account does not have write permission to the database, hash store operations will fail despite the setting of CLOBBER.</p>

<dt><a name='AUTOCOMMIT'></a><a name="AUTOCOMMIT_(default_1)"
>AUTOCOMMIT (default 1)</a></dt>

<dd>
<p>If set to a true value, the &#34;autocommit&#34; option causes the database driver to commit after every store statement. If set to a false value, this option will not commit to the database until you explicitly call the Tie::DBI commit() method.</p>

<p>The autocommit option defaults to true.</p>

<dt><a name='DEBUG'></a><a name="DEBUG_(default_0)"
>DEBUG (default 0)</a></dt>

<dd>
<p>When the DEBUG option is set to a non-zero value the module will echo the contents of SQL statements and other debugging information to standard error. Higher values of DEBUG result in more verbose (and annoying) output.</p>

<dt><a name='WARN'></a><a name="WARN_(default_1)"
>WARN (default 1)</a></dt>

<dd>
<p>If set to a non-zero value, warns of illegal operations, such as attempting to delete the value of the key column. If set to a zero value, these errors will be ignored silently.</p>

<dt><a name='CASESENSITIV'></a><a name="CASESENSITIV_(default_0)"
>CASESENSITIV (default 0)</a></dt>

<dd>
<p>If set to a non-zero value, all Fieldnames are casesensitiv. Keep in mind, that your database has to support casesensitiv Fields if you want to use it.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="USING_THE_TIED_ARRAY"
>USING THE TIED ARRAY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The tied array represents the database table. Each entry in the hash is a record, keyed on the column chosen in the tie() statement. Ordinarily this will be the table&#39;s primary key, although any unique column will do.</p>

<p>Fetching an individual record returns a reference to a hash of field names and values. This hash reference is itself a tied object, so that operations on it directly affect the database.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Fetching_information"
>Fetching information</a></h2>

<p>In the following examples, we will assume a database table structured like this one:</p>

<pre class="sh_perl">                    -produce-
    produce_id    price   quantity   description

    strawberries  1.20    8          Fresh Maine strawberries
    apricots      0.85    2          Ripe Norwegian apricots
    bananas       1.30    28         Sweet Alaskan bananas
    kiwis         1.50    9          Juicy New York kiwi fruits
    eggs          1.00   12          Farm-fresh Atlantic eggs</pre>

<p>We tie the variable %produce to the table in this way:</p>

<pre class="sh_perl">    tie %produce,&#39;Tie::DBI&#39;,{db    =&#62; &#39;mysql:stock&#39;,
                           table =&#62; &#39;produce&#39;,
                           key   =&#62; &#39;produce_id&#39;,
                           CLOBBER =&#62; 2 # allow most updates
                           };</pre>

<p>We can get the list of keys this way:</p>

<pre class="sh_perl">    print join(&#34;,&#34;,keys %produce);
       =&#62; strawberries,apricots,bananas,kiwis</pre>

<p>Or get the price of eggs thusly:</p>

<pre class="sh_perl">    $price = $produce{eggs}-&#62;{price};
    print &#34;The price of eggs = $price&#34;;
        =&#62; The price of eggs = 1.2</pre>

<p>String interpolation works as you would expect:</p>

<pre class="sh_perl">    print &#34;The price of eggs is still $produce{eggs}-&#62;{price}&#34;
        =&#62; The price of eggs is still 1.2</pre>

<p>Various types of syntactic sugar are allowed. For example, you can refer to $produce{eggs}{price} rather than $produce{eggs}-&#62;{price}. Array slices are fully supported as well:</p>

<pre class="sh_perl">    ($apricots,$kiwis) = @produce{apricots,kiwis};
    print &#34;Kiwis are $kiwis-&#62;{description};
        =&#62; Kiwis are Juicy New York kiwi fruits

    ($price,$description) = @{$produce{eggs}}{price,description};
        =&#62; (2.4,&#39;Farm-fresh Atlantic eggs&#39;)</pre>

<p>If you provide the tied hash with a comma-delimited set of record names, and you are <b>not</b> requesting an array slice, then the module does something interesting. It generates a single SQL statement that fetches the records from the database in a single pass (rather than the multiple passes required for an array slice) and returns the result as a reference to an array. For many records, this can be much faster. For example:</p>

<pre class="sh_perl">     $result = $produce{apricots,bananas};
         =&#62; ARRAY(0x828a8ac)

     ($apricots,$bananas) = @$result;
     print &#34;The price of apricots is $apricots-&#62;{price}&#34;;
         =&#62; The price of apricots is 0.85</pre>

<p>Field names work in much the same way:</p>

<pre class="sh_perl">     ($price,$quantity) = @{$produce{apricots}{price,quantity}};
     print &#34;There are $quantity apricots at $price each&#34;;
         =&#62; There are 2 apricots at 0.85 each&#34;;</pre>

<p>Note that this takes advantage of a bit of Perl syntactic sugar which automagically treats $h{&#39;a&#39;,&#39;b&#39;,&#39;c&#39;} as if the keys were packed together with the $; pack character. Be careful not to fall into this trap:</p>

<pre class="sh_perl">     $result = $h{join( &#39;,&#39;, &#39;apricots&#39;, &#39;bananas&#39; )};
         =&#62; undefined</pre>

<p>What you really want is this:</p>

<pre class="sh_perl">     $result = $h{join( $;, &#39;apricots&#39;, &#39;bananas&#39; )};
         =&#62; ARRAY(0x828a8ac)</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Updating_information"
>Updating information</a></h2>

<p>If CLOBBER is set to a non-zero value (and the underlying database privileges allow it), you can update the database with new values. You can operate on entire records at once or on individual fields within a record.</p>

<p>To insert a new record or update an existing one, assign a hash reference to the record. For example, you can create a new record in %produce with the key &#34;avocados&#34; in this manner:</p>

<pre class="sh_perl">   $produce{avocados} = { price       =&#62; 2.00,
                          quantity    =&#62; 8,
                          description =&#62; &#39;Choice Irish avocados&#39; };</pre>

<p>This will work with any type of hash reference, including records extracted from another table or database.</p>

<p>Only keys that correspond to valid fields in the table will be accepted. You will be warned if you attempt to set a field that doesn&#39;t exist, but the other fields will be correctly set. Likewise, you will be warned if you attempt to set the key field. These warnings can be turned off by setting the WARN option to a zero value. It is not currently possible to add new columns to the table. You must do this manually with the appropriate SQL commands.</p>

<p>The same syntax can be used to update an existing record. The fields given in the hash reference replace those in the record. Fields that aren&#39;t explicitly listed in the hash retain their previous values. In the following example, the price and quantity of the &#34;kiwis&#34; record are updated, but the description remains the same:</p>

<pre class="sh_perl">    $produce{kiwis} = { price=&#62;1.25,quantity=&#62;20 };</pre>

<p>You may update existing records on a field-by-field manner in the natural way:</p>

<pre class="sh_perl">    $produce{eggs}{price} = 1.30;
    $produce{eggs}{price} *= 2;
    print &#34;The price of eggs is now $produce{eggs}{price}&#34;;
        =&#62; The price of eggs is now 2.6.</pre>

<p>Obligingly enough, you can use this syntax to insert new records too, as in $produce{mangoes}{description}=&#34;Sun-ripened Idaho mangoes&#34;. However, this type of update is inefficient because a separate SQL statement is generated for each field. If you need to update more than one field at a time, use the record-oriented syntax shown earlier. It&#39;s much more efficient because it gets the work done with a single SQL command.</p>

<p>Insertions and updates may fail for any of a number of reasons, most commonly:</p>

<dl>
<dt><a name='1'></a><a name="1._You_do_not_have_sufficient_privileges_to_update_the_database"
>1. You do not have sufficient privileges to update the database</a></dt>

<dd>
<dt><a 
>2. The update would violate an integrity constraint, such as making a non-nullable field null, overflowing a numeric field, storing a string value in a numeric field, or violating a uniqueness constraint.</a></dt>
</dl>

<p>The module dies with an error message when it encounters an error during an update. To trap these erorrs and continue processing, wrap the update an eval().</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Other_functions"
>Other functions</a></h2>

<p>The tie object supports several useful methods. In order to call these methods, you must either save the function result from the tie() call (which returns the object), or call tied() on the tie variable to recover the object.</p>

<dl>
<dt><a name='connect'></a><a name="connect(),_error(),_errstr()"
>connect(), error(), errstr()</a></dt>

<dd>
<p>These are low-level class methods. Connect() is responsible for establishing the connection with the DBI database. Errstr() and error() return $DBI::errstr and $DBI::error respectively. You may may override these methods in subclasses if you wish. For example, replace connect() with this code in order to use persistent database connections in Apache modules:</p>

<pre class="sh_perl"> use Apache::DBI;  # somewhere in the declarations
 sub connect {
 my ($class,$dsn,$user,$password,$options) = @_;
    return Apache::DBI-&#62;connect($dsn,$user,
                                $password,$options);
 }</pre>

<dt><a name='commit'></a><a name="commit()"
>commit()</a></dt>

<dd>
<pre class="sh_perl">   (tied %produce)-&#62;commit();</pre>

<p>When using a database with the autocommit option turned off, values that are stored into the hash will not become permanent until commit() is called. Otherwise they are lost when the application terminates or the hash is untied.</p>

<p>Some SQL databases don&#39;t support transactions, in which case you will see a warning message if you attempt to use this function.</p>

<dt><a name='rollback'></a><a name="rollback()"
>rollback()</a></dt>

<dd>
<pre class="sh_perl">   (tied %produce)-&#62;rollback();</pre>

<p>When using a database with the autocommit option turned off, this function will roll back changes to the database to the state they were in at the last commit(). This function has no effect on database that don&#39;t support transactions.</p>

<dt><a name='select_where'></a><a name="select_where()"
>select_where()</a></dt>

<dd>
<pre class="sh_perl">   @keys=(tied %produce)-&#62;select_where(&#39;price &#62; 1.00 and quantity &#60; 10&#39;);</pre>

<p>This executes a limited form of select statement on the tied table and returns a list of records that satisfy the conditions. The argument you provide should be the contents of a SQL WHERE clause, minus the keyword &#34;WHERE&#34; and everything that ordinarily precedes it. Anything that is legal in the WHERE clause is allowed, including function calls, ordering specifications, and sub-selects. The keys to those records that meet the specified conditions are returned as an array, in the order in which the select statement returned them.</p>

<p>Don&#39;t expect too much from this function. If you want to execute a complex query, you&#39;re better off using the database handle (see below) to make the SQL query yourself with the DBI interface.</p>

<dt><a name='dbh'></a><a name="dbh()"
>dbh()</a></dt>

<dd>
<pre class="sh_perl">   $dbh = (tied %produce)-&#62;dbh();</pre>

<p>This returns the tied hash&#39;s underlying database handle. You can use this handle to create and execute your own SQL queries.</p>

<dt><a name='CLOBBER'></a><a name="CLOBBER,_DEBUG,_WARN"
>CLOBBER, DEBUG, WARN</a></dt>

<dd>
<p>You can get and set the values of CLOBBER, DEBUG and WARN by directly accessing the object&#39;s hash:</p>

<pre class="sh_perl">    (tied %produce)-&#62;{DEBUG}++;</pre>

<p>This lets you change the behavior of the tied hash on the fly, such as temporarily granting your program write permission.</p>

<p>There are other variables there too, such as the name of the key column and database table. Change them at your own risk!</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PERFORMANCE"
>PERFORMANCE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>What is the performance hit when you use this module rather than the direct DBI interface? It can be significant. To measure the overhead, I used a simple benchmark in which Perl parsed a 6180 word text file into individual words and stored them into a database, incrementing the word count with each store. The benchmark then read out the words and their counts in an each() loop. The database driver was mySQL, running on a 133 MHz Pentium laptop with Linux 2.0.30. I compared Tie::RDBM, to DB_File, and to the same task using vanilla DBI SQL statements. The results are shown below:</p>

<pre class="sh_perl">              UPDATE         FETCH
  Tie::DBI      70 s        6.1  s
  Vanilla DBI   14 s        2.0  s
  DB_File        3 s        1.06 s</pre>

<p>There is about a five-fold penalty for updates, and a three-fold penalty for fetches when using this interface. Some of the penalty is due to the overhead for creating sub-objects to handle individual fields, and some of it is due to the inefficient way the store and fetch operations are implemented. For example, using the tie interface, a statement like $h{record}{field}++ requires as much as four trips to the database: one to verify that the record exists, one to fetch the field, and one to store the incremented field back. If the record doesn&#39;t already exist, an additional statement is required to perform the insertion. I have experimented with cacheing schemes to reduce the number of trips to the database, but the overhead of maintaining the cache is nearly equal to the performance improvement, and cacheing raises a number of potential concurrency problems.</p>

<p>Clearly you would not want to use this interface for applications that require a large number of updates to be processed rapidly.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The each() call produces a fatal error when used with the Sybase driver to access Microsoft SQL server. This is because this server only allows one query to be active at a given time. A workaround is to use keys() to fetch all the keys yourself. It is not known whether real Sybase databases suffer from the same problem.</p>

<p>The delete() operator will not work correctly for setting field values to null with DBD::CSV or with DBD::Pg. CSV files do not have a good conception of database nulls. Instead you will set the field to an empty string. DBD::Pg just seems to be broken in this regard.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Lincoln Stein, lstein@cshl.org</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  Copyright (c) 1998, Lincoln D. Stein</pre>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AVAILABILITY"
>AVAILABILITY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The latest version can be obtained from:</p>

<pre class="sh_perl">   <a href="http://www.genome.wi.mit.edu/~lstein/Tie-DBI/" class="podlinkurl"
>http://www.genome.wi.mit.edu/~lstein/Tie-DBI/</a></pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perl(1), DBI(3), <a href="/~toddr/Tie-DBI-1.05/lib/Tie/RDBM.pm" class="podlinkpod"
>Tie::RDBM</a>(3)</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78260 Uploads, 24722 Distributions
105996 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 13:41:11 2012 GMT (0.357127904891968) @cpansearch1 -->
 </body>
</html>
