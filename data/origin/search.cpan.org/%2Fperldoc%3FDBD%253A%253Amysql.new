<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>DBD::mysql - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","DBD-mysql",3]);
    _gaq.push(["_setCustomVar",5,"Release","DBD-mysql-4.020",3]);
    _gaq.push(["_setCustomVar",3,"Module","DBD::mysql",3]);
    _gaq.push(["_setCustomVar",1,"Author","CAPTTOFU",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?DBD::mysql">permalink</a></div>
  <a href="/~capttofu/">Patrick Galbraith</a> &gt;
  <a href="/~capttofu/DBD-mysql-4.020/">DBD-mysql-4.020</a> &gt;
  DBD::mysql
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/0ca6dd79c182533292e101aa603504e9?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/C/CA/CAPTTOFU/DBD-mysql-4.020.tar.gz">DBD-mysql-4.020.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=DBD%3A%3Amysql;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~CAPTTOFU/DBD-mysql-4.020/lib/DBD/mysql.pm">Annotate this POD
(2)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?DBD%3A%3APg">DBD::Pg</a><br>
<a href="/perldoc?CGI%3A%3ACarp">CGI::Carp</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?Apache%3A%3ADBI">Apache::DBI</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?DBD%3A%3AOracle">DBD::Oracle</a><br>
<a href="/perldoc?DBD%3A%3AODBC">DBD::ODBC</a><br>
<a href="/perldoc?DBD%3A%3ASybase">DBD::Sybase</a><br>
<a href="/perldoc?CGI%3A%3AApplication">CGI::Application</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=DBD%3A%3Amysql">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 43</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 40</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=DBD-mysql">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  4.020 &nbsp;
<span class="noprint">
  <a href="/src/CAPTTOFU/DBD-mysql-4.020/lib/DBD/mysql.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLE'>EXAMPLE</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Class_Methods'>Class Methods</a>
    <li class='indexItem indexItem2'><a href='#Private_MetaData_Methods'>Private MetaData Methods</a>
    <li class='indexItem indexItem2'><a href='#Server_Administration'>Server Administration</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#DATABASE_HANDLES'>DATABASE HANDLES</a>
  <li class='indexItem indexItem1'><a href='#STATEMENT_HANDLES'>STATEMENT HANDLES</a>
  <li class='indexItem indexItem1'><a href='#TRANSACTION_SUPPORT'>TRANSACTION SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#MULTIPLE_RESULT_SETS'>MULTIPLE RESULT SETS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Issues_with_Multiple_result_sets'>Issues with Multiple result sets</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#MULTITHREADING'>MULTITHREADING</a>
  <li class='indexItem indexItem1'><a href='#ASYNCHRONOUS_QUERIES'>ASYNCHRONOUS QUERIES</a>
  <li class='indexItem indexItem1'><a href='#INSTALLATION'>INSTALLATION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Environment_Variables'>Environment Variables</a>
    <li class='indexItem indexItem2'><a href='#Installing_with_CPAN'>Installing with CPAN</a>
    <li class='indexItem indexItem2'><a href='#Manual_Installation'>Manual Installation</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#WIN32_INSTALLATION'>WIN32 INSTALLATION</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#CONTRIBUTIONS'>CONTRIBUTIONS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#MAILING_LIST_SUPPORT'>MAILING LIST SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#ADDITIONAL_DBI_INFORMATION'>ADDITIONAL DBI INFORMATION</a>
  <li class='indexItem indexItem1'><a href='#BUG_REPORTING,_ENHANCEMENT/FEATURE_REQUESTS'>BUG REPORTING, ENHANCEMENT/FEATURE REQUESTS</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>DBD::mysql - MySQL driver for the Perl5 Database Interface (DBI)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use DBI;

    $dsn = &#34;DBI:mysql:database=$database;host=$hostname;port=$port&#34;;

    $dbh = DBI-&#62;connect($dsn, $user, $password);


    $drh = DBI-&#62;install_driver(&#34;mysql&#34;);
    @databases = DBI-&#62;data_sources(&#34;mysql&#34;);
       or
    @databases = DBI-&#62;data_sources(&#34;mysql&#34;,
      {&#34;host&#34; =&#62; $host, &#34;port&#34; =&#62; $port, &#34;user&#34; =&#62; $user, password =&#62; $pass});

    $sth = $dbh-&#62;prepare(&#34;SELECT * FROM foo WHERE bla&#34;);
       or
    $sth = $dbh-&#62;prepare(&#34;LISTFIELDS $table&#34;);
       or
    $sth = $dbh-&#62;prepare(&#34;LISTINDEX $table $index&#34;);
    $sth-&#62;execute;
    $numRows = $sth-&#62;rows;
    $numFields = $sth-&#62;{&#39;NUM_OF_FIELDS&#39;};
    $sth-&#62;finish;

    $rc = $drh-&#62;func(&#39;createdb&#39;, $database, $host, $user, $password, &#39;admin&#39;);
    $rc = $drh-&#62;func(&#39;dropdb&#39;, $database, $host, $user, $password, &#39;admin&#39;);
    $rc = $drh-&#62;func(&#39;shutdown&#39;, $host, $user, $password, &#39;admin&#39;);
    $rc = $drh-&#62;func(&#39;reload&#39;, $host, $user, $password, &#39;admin&#39;);

    $rc = $dbh-&#62;func(&#39;createdb&#39;, $database, &#39;admin&#39;);
    $rc = $dbh-&#62;func(&#39;dropdb&#39;, $database, &#39;admin&#39;);
    $rc = $dbh-&#62;func(&#39;shutdown&#39;, &#39;admin&#39;);
    $rc = $dbh-&#62;func(&#39;reload&#39;, &#39;admin&#39;);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLE"
>EXAMPLE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  #!/usr/bin/perl

  use strict;
  use DBI();

  # Connect to the database.
  my $dbh = DBI-&#62;connect(&#34;DBI:mysql:database=test;host=localhost&#34;,
                         &#34;joe&#34;, &#34;joe&#39;s password&#34;,
                         {&#39;RaiseError&#39; =&#62; 1});

  # Drop table &#39;foo&#39;. This may fail, if &#39;foo&#39; doesn&#39;t exist.
  # Thus we put an eval around it.
  eval { $dbh-&#62;do(&#34;DROP TABLE foo&#34;) };
  print &#34;Dropping foo failed: $@\n&#34; if $@;

  # Create a new table &#39;foo&#39;. This must not fail, thus we don&#39;t
  # catch errors.
  $dbh-&#62;do(&#34;CREATE TABLE foo (id INTEGER, name VARCHAR(20))&#34;);

  # INSERT some data into &#39;foo&#39;. We are using $dbh-&#62;quote() for
  # quoting the name.
  $dbh-&#62;do(&#34;INSERT INTO foo VALUES (1, &#34; . $dbh-&#62;quote(&#34;Tim&#34;) . &#34;)&#34;);

  # Same thing, but using placeholders
  $dbh-&#62;do(&#34;INSERT INTO foo VALUES (?, ?)&#34;, undef, 2, &#34;Jochen&#34;);

  # Now retrieve data from the table.
  my $sth = $dbh-&#62;prepare(&#34;SELECT * FROM foo&#34;);
  $sth-&#62;execute();
  while (my $ref = $sth-&#62;fetchrow_hashref()) {
    print &#34;Found a row: id = $ref-&#62;{&#39;id&#39;}, name = $ref-&#62;{&#39;name&#39;}\n&#34;;
  }
  $sth-&#62;finish();

  # Disconnect from the database.
  $dbh-&#62;disconnect();</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>DBD::mysql</b> is the Perl5 Database Interface driver for the MySQL database. In other words: DBD::mysql is an interface between the Perl programming language and the MySQL programming API that comes with the MySQL relational database management system. Most functions provided by this programming API are supported. Some rarely used functions are missing, mainly because noone ever requested them. :-)</p>

<p>In what follows we first discuss the use of DBD::mysql, because this is what you will need the most. For installation, see the sections on <a href="/perldoc?INSTALLATION" class="podlinkpod"
>INSTALLATION</a>, and <a href="#WIN32_INSTALLATION" class="podlinkpod"
>&#34;WIN32 INSTALLATION&#34;</a> below. See <a href="/perldoc?EXAMPLE" class="podlinkpod"
>EXAMPLE</a> for a simple example above.</p>

<p>From perl you activate the interface with the statement</p>

<pre class="sh_perl">    use DBI;</pre>

<p>After that you can connect to multiple MySQL database servers and send multiple queries to any of them via a simple object oriented interface. Two types of objects are available: database handles and statement handles. Perl returns a database handle to the connect method like so:</p>

<pre class="sh_perl">  $dbh = DBI-&#62;connect(&#34;DBI:mysql:database=$db;host=$host&#34;,
                      $user, $password, {RaiseError =&#62; 1});</pre>

<p>Once you have connected to a database, you can can execute SQL statements with:</p>

<pre class="sh_perl">  my $query = sprintf(&#34;INSERT INTO foo VALUES (%d, %s)&#34;,
                      $number, $dbh-&#62;quote(&#34;name&#34;));
  $dbh-&#62;do($query);</pre>

<p>See <a href="http://man.he.net/man3/DBI" class="podlinkman"
>DBI(3)</a> for details on the quote and do methods. An alternative approach is</p>

<pre class="sh_perl">  $dbh-&#62;do(&#34;INSERT INTO foo VALUES (?, ?)&#34;, undef,
           $number, $name);</pre>

<p>in which case the quote method is executed automatically. See also the bind_param method in <a href="http://man.he.net/man3/DBI" class="podlinkman"
>DBI(3)</a>. See <a href="#DATABASE_HANDLES" class="podlinkpod"
>&#34;DATABASE HANDLES&#34;</a> below for more details on database handles.</p>

<p>If you want to retrieve results, you need to create a so-called statement handle with:</p>

<pre class="sh_perl">  $sth = $dbh-&#62;prepare(&#34;SELECT * FROM $table&#34;);
  $sth-&#62;execute();</pre>

<p>This statement handle can be used for multiple things. First of all you can retreive a row of data:</p>

<pre class="sh_perl">  my $row = $sth-&#62;fetchrow_hashref();</pre>

<p>If your table has columns ID and NAME, then $row will be hash ref with keys ID and NAME. See <a href="#STATEMENT_HANDLES" class="podlinkpod"
>&#34;STATEMENT HANDLES&#34;</a> below for more details on statement handles.</p>

<p>But now for a more formal approach:</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Class_Methods"
>Class Methods</a></h2>

<dl>
<dt><a name="connect"
><b>connect</b></a></dt>

<dd>
<pre class="sh_perl">    use DBI;

    $dsn = &#34;DBI:mysql:$database&#34;;
    $dsn = &#34;DBI:mysql:database=$database;host=$hostname&#34;;
    $dsn = &#34;DBI:mysql:database=$database;host=$hostname;port=$port&#34;;

    $dbh = DBI-&#62;connect($dsn, $user, $password);</pre>

<p>A <code>database</code> must always be specified.</p>

<dl>
<dt><a name="host"
>host</a></dt>

<dd>
<dt><a name="port"
>port</a></dt>

<dd>
<p>The hostname, if not specified or specified as &#39;&#39; or &#39;localhost&#39;, will default to a MySQL server running on the local machine using the default for the UNIX socket. To connect to a MySQL server on the local machine via TCP, you must specify the loopback IP address (127.0.0.1) as the host.</p>

<p>Should the MySQL server be running on a non-standard port number, you may explicitly state the port number to connect to in the <code>hostname</code> argument, by concatenating the <i>hostname</i> and <i>port number</i> together separated by a colon ( <code>:</code> ) character or by using the <code>port</code> argument.</p>

<p>To connect to a MySQL server on localhost using TCP/IP, you must specify the hostname as 127.0.0.1 (with the optional port).</p>

<dt><a name="mysql_client_found_rows"
>mysql_client_found_rows</a></dt>

<dd>
<p>Enables (TRUE value) or disables (FALSE value) the flag CLIENT_FOUND_ROWS while connecting to the MySQL server. This has a somewhat funny effect: Without mysql_client_found_rows, if you perform a query like</p>

<pre class="sh_perl">  UPDATE $table SET id = 1 WHERE id = 1</pre>

<p>then the MySQL engine will always return 0, because no rows have changed. With mysql_client_found_rows however, it will return the number of rows that have an id 1, as some people are expecting. (At least for compatibility to other engines.)</p>

<dt><a name="mysql_compression"
>mysql_compression</a></dt>

<dd>
<p>As of MySQL 3.22.3, a new feature is supported: If your DSN contains the option &#34;mysql_compression=1&#34;, then the communication between client and server will be compressed.</p>

<dt><a name="mysql_connect_timeout"
>mysql_connect_timeout</a></dt>

<dd>
<p>If your DSN contains the option &#34;mysql_connect_timeout=##&#34;, the connect request to the server will timeout if it has not been successful after the given number of seconds.</p>

<pre class="sh_perl"> =item mysql_init_command

 If your DSN contains the option &#34;mysql_init_command_timeout=##&#34;, then
 this SQL statement is executed when connecting to the MySQL server.
 It is automatically re-executed if reconnection occurs.</pre>

<dt><a name="mysql_read_default_file"
>mysql_read_default_file</a></dt>

<dd>
<dt><a name="mysql_read_default_group"
>mysql_read_default_group</a></dt>

<dd>
<p>These options can be used to read a config file like /etc/my.cnf or ~/.my.cnf. By default MySQL&#39;s C client library doesn&#39;t use any config files unlike the client programs (mysql, mysqladmin, ...) that do, but outside of the C client library. Thus you need to explicitly request reading a config file, as in</p>

<pre class="sh_perl">    $dsn = &#34;DBI:mysql:test;mysql_read_default_file=/home/joe/my.cnf&#34;;
    $dbh = DBI-&#62;connect($dsn, $user, $password)</pre>

<p>The option mysql_read_default_group can be used to specify the default group in the config file: Usually this is the <i>client</i> group, but see the following example:</p>

<pre class="sh_perl">    [client]
    host=localhost

    [perl]
    host=perlhost</pre>

<p>(Note the order of the entries! The example won&#39;t work, if you reverse the [client] and [perl] sections!)</p>

<p>If you read this config file, then you&#39;ll be typically connected to <i>localhost</i>. However, by using</p>

<pre class="sh_perl">    $dsn = &#34;DBI:mysql:test;mysql_read_default_group=perl;&#34;
        . &#34;mysql_read_default_file=/home/joe/my.cnf&#34;;
    $dbh = DBI-&#62;connect($dsn, $user, $password);</pre>

<p>you&#39;ll be connected to <i>perlhost</i>. Note that if you specify a default group and do not specify a file, then the default config files will all be read. See the documentation of the C function mysql_options() for details.</p>

<dt><a name="mysql_socket"
>mysql_socket</a></dt>

<dd>
<p>As of MySQL 3.21.15, it is possible to choose the Unix socket that is used for connecting to the server. This is done, for example, with</p>

<pre class="sh_perl">    mysql_socket=/dev/mysql</pre>

<p>Usually there&#39;s no need for this option, unless you are using another location for the socket than that built into the client.</p>

<dt><a name="mysql_ssl"
>mysql_ssl</a></dt>

<dd>
<p>A true value turns on the CLIENT_SSL flag when connecting to the MySQL database:</p>

<pre class="sh_perl">  mysql_ssl=1</pre>

<p>This means that your communication with the server will be encrypted.</p>

<p>If you turn mysql_ssl on, you might also wish to use the following flags:</p>

<dt><a name="mysql_ssl_client_key"
>mysql_ssl_client_key</a></dt>

<dd>
<dt><a name="mysql_ssl_client_cert"
>mysql_ssl_client_cert</a></dt>

<dd>
<dt><a name="mysql_ssl_ca_file"
>mysql_ssl_ca_file</a></dt>

<dd>
<dt><a name="mysql_ssl_ca_path"
>mysql_ssl_ca_path</a></dt>

<dd>
<dt><a name="mysql_ssl_cipher"
>mysql_ssl_cipher</a></dt>

<dd>
<p>These are used to specify the respective parameters of a call to mysql_ssl_set, if mysql_ssl is turned on.</p>

<dt><a name="mysql_local_infile"
>mysql_local_infile</a></dt>

<dd>
<p>As of MySQL 3.23.49, the LOCAL capability for LOAD DATA may be disabled in the MySQL client library by default. If your DSN contains the option &#34;mysql_local_infile=1&#34;, LOAD DATA LOCAL will be enabled. (However, this option is *ineffective* if the server has also been configured to disallow LOCAL.)</p>

<dt><a name="mysql_multi_statements"
>mysql_multi_statements</a></dt>

<dd>
<p>As of MySQL 4.1, support for multiple statements seperated by a semicolon (;) may be enabled by using this option. Enabling this option may cause problems if server-side prepared statements are also enabled.</p>

<dt><a name='Prepared'></a><a name="Prepared_statement_support_(server_side_prepare)"
>Prepared statement support (server side prepare)</a></dt>

<dd>
<p>As of 3.0002_1, server side prepare statements were on by default (if your server was &#62;= 4.1.3). As of 3.0009, they were off by default again due to issues with the prepared statement API (all other mysql connectors are set this way until C API issues are resolved). The requirement to use prepared statements still remains that you have a server &#62;= 4.1.3</p>

<p>To use server side prepared statements, all you need to do is set the variable mysql_server_prepare in the connect:</p>

<p>$dbh = DBI-&#62;connect( &#34;DBI:mysql:database=test;host=localhost;mysql_server_prepare=1&#34;, &#34;&#34;, &#34;&#34;, { RaiseError =&#62; 1, AutoCommit =&#62; 1 } );</p>

<p>* Note: delimiter for this param is &#39;;&#39;</p>

<p>There are many benefits to using server side prepare statements, mostly if you are performing many inserts because of that fact that a single statement is prepared to accept multiple insert values.</p>

<p>To make sure that the &#39;make test&#39; step tests whether server prepare works, you just need to export the env variable MYSQL_SERVER_PREPARE:</p>

<p>export MYSQL_SERVER_PREPARE=1</p>

<dt><a name="mysql_embedded_options"
>mysql_embedded_options</a></dt>

<dd>
<p>The option &#60;mysql_embedded_options&#62; can be used to pass &#39;command-line&#39; options to embedded server.</p>

<p>Example:</p>

<p>use DBI; $testdsn=&#34;DBI:mysqlEmb:database=test;mysql_embedded_options=--help,--verbose&#34;; $dbh = DBI-&#62;connect($testdsn,&#34;a&#34;,&#34;b&#34;);</p>

<p>This would cause the command line help to the embedded MySQL server library to be printed.</p>

<dt><a name="mysql_embedded_groups"
>mysql_embedded_groups</a></dt>

<dd>
<p>The option &#60;mysql_embedded_groups&#62; can be used to specify the groups in the config file(<i>my.cnf</i>) which will be used to get options for embedded server. If not specified [server] and [embedded] groups will be used.</p>

<p>Example:</p>

<p>$testdsn=&#34;DBI:mysqlEmb:database=test;mysql_embedded_groups=embedded_server,common&#34;;</p>
</dd>
</dl>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Private_MetaData_Methods"
>Private MetaData Methods</a></h2>

<dl>
<dt><a name="ListDBs"
><b>ListDBs</b></a></dt>

<dd>
<pre class="sh_perl">    my $drh = DBI-&#62;install_driver(&#34;mysql&#34;);
    @dbs = $drh-&#62;func(&#34;$hostname:$port&#34;, &#39;_ListDBs&#39;);
    @dbs = $drh-&#62;func($hostname, $port, &#39;_ListDBs&#39;);
    @dbs = $dbh-&#62;func(&#39;_ListDBs&#39;);</pre>

<p>Returns a list of all databases managed by the MySQL server running on <code>$hostname</code>, port <code>$port</code>. This is a legacy method. Instead, you should use the portable method</p>

<pre class="sh_perl">    @dbs = DBI-&#62;data_sources(&#34;mysql&#34;);</pre>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Server_Administration"
>Server Administration</a></h2>

<dl>
<dt><a name="admin"
>admin</a></dt>

<dd>
<pre class="sh_perl">    $rc = $drh-&#62;func(&#34;createdb&#34;, $dbname, [host, user, password,], &#39;admin&#39;);
    $rc = $drh-&#62;func(&#34;dropdb&#34;, $dbname, [host, user, password,], &#39;admin&#39;);
    $rc = $drh-&#62;func(&#34;shutdown&#34;, [host, user, password,], &#39;admin&#39;);
    $rc = $drh-&#62;func(&#34;reload&#34;, [host, user, password,], &#39;admin&#39;);

      or

    $rc = $dbh-&#62;func(&#34;createdb&#34;, $dbname, &#39;admin&#39;);
    $rc = $dbh-&#62;func(&#34;dropdb&#34;, $dbname, &#39;admin&#39;);
    $rc = $dbh-&#62;func(&#34;shutdown&#34;, &#39;admin&#39;);
    $rc = $dbh-&#62;func(&#34;reload&#34;, &#39;admin&#39;);</pre>

<p>For server administration you need a server connection. For obtaining this connection you have two options: Either use a driver handle (drh) and supply the appropriate arguments (host, defaults localhost, user, defaults to &#39;&#39; and password, defaults to &#39;&#39;). A driver handle can be obtained with</p>

<pre class="sh_perl">    $drh = DBI-&#62;install_driver(&#39;mysql&#39;);</pre>

<p>Otherwise reuse the existing connection of a database handle (dbh).</p>

<p>There&#39;s only one function available for administrative purposes, comparable to the m(y)sqladmin programs. The command being execute depends on the first argument:</p>

<dl>
<dt><a name="createdb"
>createdb</a></dt>

<dd>
<p>Creates the database $dbname. Equivalent to &#34;m(y)sqladmin create $dbname&#34;.</p>

<dt><a name="dropdb"
>dropdb</a></dt>

<dd>
<p>Drops the database $dbname. Equivalent to &#34;m(y)sqladmin drop $dbname&#34;.</p>

<p>It should be noted that database deletion is <i>not prompted for</i> in any way. Nor is it undo-able from DBI.</p>

<pre class="sh_perl">    Once you issue the dropDB() method, the database will be gone!</pre>

<p>These method should be used at your own risk.</p>

<dt><a name="shutdown"
>shutdown</a></dt>

<dd>
<p>Silently shuts down the database engine. (Without prompting!) Equivalent to &#34;m(y)sqladmin shutdown&#34;.</p>

<dt><a name="reload"
>reload</a></dt>

<dd>
<p>Reloads the servers configuration files and/or tables. This can be particularly important if you modify access privileges or create new users.</p>
</dd>
</dl>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DATABASE_HANDLES"
>DATABASE HANDLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The DBD::mysql driver supports the following attributes of database handles (read only):</p>

<pre class="sh_perl">  $errno = $dbh-&#62;{&#39;mysql_errno&#39;};
  $error = $dbh-&#62;{&#39;mysql_error&#39;};
  $info = $dbh-&#62;{&#39;mysql_hostinfo&#39;};
  $info = $dbh-&#62;{&#39;mysql_info&#39;};
  $insertid = $dbh-&#62;{&#39;mysql_insertid&#39;};
  $info = $dbh-&#62;{&#39;mysql_protoinfo&#39;};
  $info = $dbh-&#62;{&#39;mysql_serverinfo&#39;};
  $info = $dbh-&#62;{&#39;mysql_stat&#39;};
  $threadId = $dbh-&#62;{&#39;mysql_thread_id&#39;};</pre>

<p>These correspond to mysql_errno(), mysql_error(), mysql_get_host_info(), mysql_info(), mysql_insert_id(), mysql_get_proto_info(), mysql_get_server_info(), mysql_stat() and mysql_thread_id(), respectively.</p>

<pre class="sh_perl"> $info_hashref = $dhb-&#62;{mysql_dbd_stats}</pre>

<p>DBD::mysql keeps track of some statistics in the mysql_dbd_stats attribute. The following stats are being maintained:</p>

<dl>
<dt><a name="auto_reconnects_ok"
>auto_reconnects_ok</a></dt>

<dd>
<p>The number of times that DBD::mysql successfully reconnected to the mysql server.</p>

<dt><a name="auto_reconnects_failed"
>auto_reconnects_failed</a></dt>

<dd>
<p>The number of times that DBD::mysql tried to reconnect to mysql but failed.</p>
</dd>
</dl>

<p>The DBD::mysql driver also supports the following attribute(s) of database handles (read/write):</p>

<pre class="sh_perl"> $bool_value = $dbh-&#62;{mysql_auto_reconnect};
 $dbh-&#62;{mysql_auto_reconnect} = $AutoReconnect ? 1 : 0;</pre>

<dl>
<dt><a name="mysql_auto_reconnect"
>mysql_auto_reconnect</a></dt>

<dd>
<p>This attribute determines whether DBD::mysql will automatically reconnect to mysql if the connection be lost. This feature defaults to off; however, if either the GATEWAY_INTERFACE or MOD_PERL envionment variable is set, DBD::mysql will turn mysql_auto_reconnect on. Setting mysql_auto_reconnect to on is not advised if &#39;lock tables&#39; is used because if DBD::mysql reconnect to mysql all table locks will be lost. This attribute is ignored when AutoCommit is turned off, and when AutoCommit is turned off, DBD::mysql will not automatically reconnect to the server.</p>

<p>It is also possible to set the default value of the <code>mysql_auto_reconnect</code> attribute for the $dbh by passing it in the <code>\%attr</code> hash for <code>DBI-</code>connect&#62;.</p>

<p>Note that if you are using a module or framework that performs reconnections for you (for example <a href="/perldoc?DBIx%3A%3AConnector" class="podlinkpod"
>DBIx::Connector</a> in fixup mode), this value must be set to 0.</p>

<dt><a name="mysql_use_result"
>mysql_use_result</a></dt>

<dd>
<p>This attribute forces the driver to use mysql_use_result rather than mysql_store_result. The former is faster and less memory consuming, but tends to block other processes. (That&#39;s why mysql_store_result is the default.)</p>

<p>It is possible to set the default value of the <code>mysql_use_result</code> attribute for the $dbh using several ways:</p>

<pre class="sh_perl"> - through DSN

   $dbh= DBI-&#62;connect(&#34;DBI:mysql:test;mysql_use_result=1&#34;, &#34;root&#34;, &#34;&#34;);

 - after creation of database handle

   $dbh-&#62;{&#39;mysql_use_result&#39;}=0; #disable
   $dbh-&#62;{&#39;mysql_use_result&#39;}=1; #enable</pre>

<p>It is possible to set/unset the <code>mysql_use_result</code> attribute after creation of the statement handle. See below.</p>

<dt><a name="mysql_enable_utf8"
>mysql_enable_utf8</a></dt>

<dd>
<p>This attribute determines whether DBD::mysql should assume strings stored in the database are utf8. This feature defaults to off.</p>

<p>When set, a data retrieved from a textual column type (char, varchar, etc) will have the UTF-8 flag turned on if necessary. This enables character semantics on that string. You will also need to ensure that your database / table / column is configured to use UTF8. See Chapter 10 of the mysql manual for details.</p>

<p>Additionally, turning on this flag tells MySQL that incoming data should be treated as UTF-8. This will only take effect if used as part of the call to connect(). If you turn the flag on after connecting, you will need to issue the command <code>SET NAMES utf8</code> to get the same effect.</p>

<p>This option is experimental and may change in future versions.</p>

<dt><a name="mysql_bind_type_guessing"
>mysql_bind_type_guessing</a></dt>

<dd>
<p>This attribute causes the driver (emulated prepare statements) to attempt to guess if a value being bound is a numeric value, and if so, doesn&#39;t quote the value. This was created by Dragonchild and is one way to deal with the performance issue of using quotes in a statement that is inserting or updating a large numeric value. This was previously called <code>unsafe_bind_type_guessing</code> because it is experimental. I have successfully run the full test suite with this option turned on, the name can now be simply <code>mysql_bind_type_guessing</code>.</p>

<p>CAVEAT: Even though you can insert an integer value into a character column, if this column is indexed, if you query that column with the integer value not being quoted, it will not use the index:</p>

<p>MariaDB [test]&#62; explain select * from test where value0 = &#39;3&#39; \G *************************** 1. row *************************** id: 1 select_type: SIMPLE table: test type: ref possible_keys: value0 key: value0 key_len: 13 ref: const rows: 1 Extra: Using index condition 1 row in set (0.00 sec)</p>

<p>MariaDB [test]&#62; explain select * from test where value0 = 3 -&#62; \G *************************** 1. row *************************** id: 1 select_type: SIMPLE table: test type: ALL possible_keys: value0 key: NULL key_len: NULL ref: NULL rows: 6 Extra: Using where 1 row in set (0.00 sec)</p>

<p>See bug: <a href="https://rt.cpan.org/Ticket/Display.html?id=43822" class="podlinkurl"
>https://rt.cpan.org/Ticket/Display.html?id=43822</a></p>

<dt><a name="mysql_bind_comment_placeholders"
>mysql_bind_comment_placeholders</a></dt>

<dd>
<p>This attribute causes the driver (emulated prepare statements) will cause any placeholders in comments to be bound. This is not correct prepared statement behavior, but some developers have come to depend on this behavior, so I have made it available in 4.015</p>

<p>See bug: <a href="https://rt.cpan.org/Ticket/Display.html?id" class="podlinkurl"
>https://rt.cpan.org/Ticket/Display.html?id</a>=</p>

<p><code>mysql_bind_type_guessing</code> can be turned on via</p>

<pre class="sh_perl"> - through DSN

  my $dbh= DBI-&#62;connect(&#39;DBI:mysql:test&#39;, &#39;username&#39;, &#39;pass&#39;,
  { mysql_bind_type_guessing =&#62; 1})

  - OR after handle creation

  $dbh-&#62;{mysql_bind_type_guessing} = 1;</pre>

<dt><a name="mysql_no_autocommit_cmd"
>mysql_no_autocommit_cmd</a></dt>

<dd>
<p>This attribute causes the driver to not issue &#39;set autocommit&#39; either through explicit or using mysql_autocommit(). This is particularly useful in the case of using MySQL Proxy.</p>

<p>See the bug report:</p>

<p><a href="https://rt.cpan.org/Public/Bug/Display.html?id=46308" class="podlinkurl"
>https://rt.cpan.org/Public/Bug/Display.html?id=46308</a></p>

<p>As well as:</p>

<p><a href="http://bugs.mysql.com/bug.php?id=32464" class="podlinkurl"
>http://bugs.mysql.com/bug.php?id=32464</a></p>

<p><code>mysql_no_autocommit_cmd</code> can be turned on via</p>

<pre class="sh_perl"> - through DSN

  my $dbh= DBI-&#62;connect(&#39;DBI:mysql:test&#39;, &#39;username&#39;, &#39;pass&#39;,
  { mysql_no_autocommit_cmd =&#62; 1})

  - OR after handle creation

  $dbh-&#62;{mysql_no_autocommit_cmd} = 1;</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="STATEMENT_HANDLES"
>STATEMENT HANDLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The statement handles of DBD::mysql support a number of attributes. You access these by using, for example,</p>

<pre class="sh_perl">  my $numFields = $sth-&#62;{&#39;NUM_OF_FIELDS&#39;};</pre>

<p>Note, that most attributes are valid only after a successfull <i>execute</i>. An <code>undef</code> value will returned in that case. The most important exception is the <code>mysql_use_result</code> attribute: This forces the driver to use mysql_use_result rather than mysql_store_result. The former is faster and less memory consuming, but tends to block other processes. (That&#39;s why mysql_store_result is the default.)</p>

<p>To set the <code>mysql_use_result</code> attribute, use either of the following:</p>

<pre class="sh_perl">  my $sth = $dbh-&#62;prepare(&#34;QUERY&#34;, { &#34;mysql_use_result&#34; =&#62; 1});</pre>

<p>or</p>

<pre class="sh_perl">  my $sth = $dbh-&#62;prepare(&#34;QUERY&#34;);
  $sth-&#62;{&#34;mysql_use_result&#34;} = 1;</pre>

<p>Column dependent attributes, for example <i>NAME</i>, the column names, are returned as a reference to an array. The array indices are corresponding to the indices of the arrays returned by <i>fetchrow</i> and similar methods. For example the following code will print a header of table names together with all rows:</p>

<pre class="sh_perl">  my $sth = $dbh-&#62;prepare(&#34;SELECT * FROM $table&#34;);
  if (!$sth) {
      die &#34;Error:&#34; . $dbh-&#62;errstr . &#34;\n&#34;;
  }
  if (!$sth-&#62;execute) {
      die &#34;Error:&#34; . $sth-&#62;errstr . &#34;\n&#34;;
  }
  my $names = $sth-&#62;{&#39;NAME&#39;};
  my $numFields = $sth-&#62;{&#39;NUM_OF_FIELDS&#39;};
  for (my $i = 0;  $i &#60; $numFields;  $i++) {
      printf(&#34;%s%s&#34;, $i ? &#34;,&#34; : &#34;&#34;, $$names[$i]);
  }
  print &#34;\n&#34;;
  while (my $ref = $sth-&#62;fetchrow_arrayref) {
      for (my $i = 0;  $i &#60; $numFields;  $i++) {
          printf(&#34;%s%s&#34;, $i ? &#34;,&#34; : &#34;&#34;, $$ref[$i]);
      }
      print &#34;\n&#34;;
  }</pre>

<p>For portable applications you should restrict yourself to attributes with capitalized or mixed case names. Lower case attribute names are private to DBD::mysql. The attribute list includes:</p>

<dl>
<dt><a name="ChopBlanks"
>ChopBlanks</a></dt>

<dd>
<p>this attribute determines whether a <i>fetchrow</i> will chop preceding and trailing blanks off the column values. Chopping blanks does not have impact on the <i>max_length</i> attribute.</p>

<dt><a name="mysql_insertid"
>mysql_insertid</a></dt>

<dd>
<p>MySQL has the ability to choose unique key values automatically. If this happened, the new ID will be stored in this attribute. An alternative way for accessing this attribute is via $dbh-&#62;{&#39;mysql_insertid&#39;}. (Note we are using the $dbh in this case!)</p>

<dt><a name="mysql_is_blob"
>mysql_is_blob</a></dt>

<dd>
<p>Reference to an array of boolean values; TRUE indicates, that the respective column is a blob. This attribute is valid for MySQL only.</p>

<dt><a name="mysql_is_key"
>mysql_is_key</a></dt>

<dd>
<p>Reference to an array of boolean values; TRUE indicates, that the respective column is a key. This is valid for MySQL only.</p>

<dt><a name="mysql_is_num"
>mysql_is_num</a></dt>

<dd>
<p>Reference to an array of boolean values; TRUE indicates, that the respective column contains numeric values.</p>

<dt><a name="mysql_is_pri_key"
>mysql_is_pri_key</a></dt>

<dd>
<p>Reference to an array of boolean values; TRUE indicates, that the respective column is a primary key.</p>

<dt><a name="mysql_is_auto_increment"
>mysql_is_auto_increment</a></dt>

<dd>
<p>Reference to an array of boolean values; TRUE indicates that the respective column is an AUTO_INCREMENT column. This is only valid for MySQL.</p>

<dt><a name="mysql_length"
>mysql_length</a></dt>

<dd>
<dt><a name="mysql_max_length"
>mysql_max_length</a></dt>

<dd>
<p>A reference to an array of maximum column sizes. The <i>max_length</i> is the maximum physically present in the result table, <i>length</i> gives the theoretically possible maximum. <i>max_length</i> is valid for MySQL only.</p>

<dt><a name="mysql_clientinfo"
>mysql_clientinfo</a></dt>

<dd>
<p>List information of the MySQL client library that DBD::mysql was built against:</p>

<p>print &#34;$dbh-&#62;{mysql_clientinfo}\n&#34;;</p>

<p>5.2.0-MariaDB</p>

<dt><a name="mysql_clientversion"
>mysql_clientversion</a></dt>

<dd>
<p>print &#34;$dbh-&#62;{mysql_clientversion}\n&#34;;</p>

<p>50200</p>

<dt><a name="mysql_serverversion"
>mysql_serverversion</a></dt>

<dd>
<p>print &#34;$dbh-&#62;{mysql_serverversion}\n&#34;;</p>

<p>50200</p>

<dt><a name="NAME"
>NAME</a></dt>

<dd>
<p>A reference to an array of column names.</p>

<dt><a name="NULLABLE"
>NULLABLE</a></dt>

<dd>
<p>A reference to an array of boolean values; TRUE indicates that this column may contain NULL&#39;s.</p>

<dt><a name="NUM_OF_FIELDS"
>NUM_OF_FIELDS</a></dt>

<dd>
<p>Number of fields returned by a <i>SELECT</i> or <i>LISTFIELDS</i> statement. You may use this for checking whether a statement returned a result: A zero value indicates a non-SELECT statement like <i>INSERT</i>, <i>DELETE</i> or <i>UPDATE</i>.</p>

<dt><a name="mysql_table"
>mysql_table</a></dt>

<dd>
<p>A reference to an array of table names, useful in a <i>JOIN</i> result.</p>

<dt><a name="TYPE"
>TYPE</a></dt>

<dd>
<p>A reference to an array of column types. The engine&#39;s native column types are mapped to portable types like DBI::SQL_INTEGER() or DBI::SQL_VARCHAR(), as good as possible. Not all native types have a meaningfull equivalent, for example DBD::mysql::FIELD_TYPE_INTERVAL is mapped to DBI::SQL_VARCHAR(). If you need the native column types, use <i>mysql_type</i>. See below.</p>

<dt><a name="mysql_type"
>mysql_type</a></dt>

<dd>
<p>A reference to an array of MySQL&#39;s native column types, for example DBD::mysql::FIELD_TYPE_SHORT() or DBD::mysql::FIELD_TYPE_STRING(). Use the <i>TYPE</i> attribute, if you want portable types like DBI::SQL_SMALLINT() or DBI::SQL_VARCHAR().</p>

<dt><a name="mysql_type_name"
>mysql_type_name</a></dt>

<dd>
<p>Similar to mysql, but type names and not numbers are returned. Whenever possible, the ANSI SQL name is preferred.</p>

<dt><a name="mysql_warning_count"
>mysql_warning_count</a></dt>

<dd>
<p>The number of warnings generated during execution of the SQL statement.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TRANSACTION_SUPPORT"
>TRANSACTION SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Beginning with DBD::mysql 2.0416, transactions are supported. The transaction support works as follows:</p>

<ul>
<li>By default AutoCommit mode is on, following the DBI specifications.</li>

<li>If you execute
<pre class="sh_perl">    $dbh-&#62;{&#39;AutoCommit&#39;} = 0;</pre>

<p>or</p>

<pre class="sh_perl">    $dbh-&#62;{&#39;AutoCommit&#39;} = 1;</pre>

<p>then the driver will set the MySQL server variable autocommit to 0 or 1, respectively. Switching from 0 to 1 will also issue a COMMIT, following the DBI specifications.</p>
</li>

<li>The methods
<pre class="sh_perl">    $dbh-&#62;rollback();
    $dbh-&#62;commit();</pre>

<p>will issue the commands COMMIT and ROLLBACK, respectively. A ROLLBACK will also be issued if AutoCommit mode is off and the database handles DESTROY method is called. Again, this is following the DBI specifications.</p>
</li>
</ul>

<p>Given the above, you should note the following:</p>

<ul>
<li>You should never change the server variable autocommit manually, unless you are ignoring DBI&#39;s transaction support.</li>

<li>Switching AutoCommit mode from on to off or vice versa may fail. You should always check for errors, when changing AutoCommit mode. The suggested way of doing so is using the DBI flag RaiseError. If you don&#39;t like RaiseError, you have to use code like the following:
<pre class="sh_perl">  $dbh-&#62;{&#39;AutoCommit&#39;} = 0;
  if ($dbh-&#62;{&#39;AutoCommit&#39;}) {
    # An error occurred!
  }</pre>
</li>

<li>If you detect an error while changing the AutoCommit mode, you should no longer use the database handle. In other words, you should disconnect and reconnect again, because the transaction mode is unpredictable. Alternatively you may verify the transaction mode by checking the value of the server variable autocommit. However, such behaviour isn&#39;t portable.</li>

<li>DBD::mysql has a &#34;reconnect&#34; feature that handles the so-called MySQL &#34;morning bug&#34;: If the server has disconnected, most probably due to a timeout, then by default the driver will reconnect and attempt to execute the same SQL statement again. However, this behaviour is disabled when AutoCommit is off: Otherwise the transaction state would be completely unpredictable after a reconnect.</li>

<li>The &#34;reconnect&#34; feature of DBD::mysql can be toggled by using the <a href="/perldoc?mysql_auto_reconnect" class="podlinkpod"
>mysql_auto_reconnect</a> attribute. This behaviour should be turned off in code that uses LOCK TABLE because if the database server time out and DBD::mysql reconnect, table locks will be lost without any indication of such loss.</li>
</ul>

<blockquote></blockquote>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MULTIPLE_RESULT_SETS"
>MULTIPLE RESULT SETS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>As of version 3.0002_5, DBD::mysql supports multiple result sets (Thanks to Guy Harrison!). This is the first release of this functionality, so there may be issues. Please report bugs if you run into them!</p>

<p>The basic usage of multiple result sets is</p>

<pre class="sh_perl">  do
  {
    while (@row= $sth-&#62;fetchrow_array())
    {
      do stuff;
    }
  } while ($sth-&#62;more_results)</pre>

<p>An example would be:</p>

<pre class="sh_perl">  $dbh-&#62;do(&#34;drop procedure if exists someproc&#34;) or print $DBI::errstr;

  $dbh-&#62;do(&#34;create procedure somproc() deterministic
   begin
   declare a,b,c,d int;
   set a=1;
   set b=2;
   set c=3;
   set d=4;
   select a, b, c, d;
   select d, c, b, a;
   select b, a, c, d;
   select c, b, d, a;
  end&#34;) or print $DBI::errstr;

  $sth=$dbh-&#62;prepare(&#39;call someproc()&#39;) ||
  die $DBI::err.&#34;: &#34;.$DBI::errstr;

  $sth-&#62;execute || die DBI::err.&#34;: &#34;.$DBI::errstr; $rowset=0;
  do {
    print &#34;\nRowset &#34;.++$i.&#34;\n---------------------------------------\n\n&#34;;
    foreach $colno (0..$sth-&#62;{NUM_OF_FIELDS}) {
      print $sth-&#62;{NAME}-&#62;[$colno].&#34;\t&#34;;
    }
    print &#34;\n&#34;;
    while (@row= $sth-&#62;fetchrow_array())  {
      foreach $field (0..$#row) {
        print $row[$field].&#34;\t&#34;;
      }
      print &#34;\n&#34;;
    }
  } until (!$sth-&#62;more_results)</pre>

<p>For more examples, please see the eg/ directory. This is where helpful DBD::mysql code snippits will be added in the future.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Issues_with_Multiple_result_sets"
>Issues with Multiple result sets</a></h2>

<p>So far, the main issue is if your result sets are &#34;jagged&#34;, meaning, the number of columns of your results vary. Varying numbers of columns could result in your script crashing. This is something that will be fixed soon.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MULTITHREADING"
>MULTITHREADING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The multithreading capabilities of DBD::mysql depend completely on the underlying C libraries: The modules are working with handle data only, no global variables are accessed or (to the best of my knowledge) thread unsafe functions are called. Thus DBD::mysql is believed to be completely thread safe, if the C libraries are thread safe and you don&#39;t share handles among threads.</p>

<p>The obvious question is: Are the C libraries thread safe? In the case of MySQL the answer is &#34;mostly&#34; and, in theory, you should be able to get a &#34;yes&#34;, if the C library is compiled for being thread safe (By default it isn&#39;t.) by passing the option -with-thread-safe-client to configure. See the section on <i>How to make a threadsafe client</i> in the manual.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ASYNCHRONOUS_QUERIES"
>ASYNCHRONOUS QUERIES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can make a single asynchronous query per MySQL connection; this allows you to submit a long-running query to the server and have an event loop inform you when it&#39;s ready. An asynchronous query is started by either setting the &#39;async&#39; attribute to a truthy value in the <a href="/perldoc?DBI#do" class="podlinkpod"
>&#34;do&#34; in DBI</a> method, or in the <a href="/perldoc?DBI#prepare" class="podlinkpod"
>&#34;prepare&#34; in DBI</a> method. Statements created with &#39;async&#39; set to true in prepare always run their queries asynchronously when <a href="/perldoc?DBI#execute" class="podlinkpod"
>&#34;execute&#34; in DBI</a> is called. The driver also offers three additional methods: <code>mysql_async_result</code>, <code>mysql_async_ready</code>, and <code>mysql_fd</code>. <code>mysql_async_result</code> returns what do or execute would have; that is, the number of rows affected. <code>mysql_async_ready</code> returns true if <code>mysql_async_result</code> will not block, and zero otherwise. They both return <code>undef</code> if that handle is not currently running an asynchronous query. <code>mysql_fd</code> returns the file descriptor number for the MySQL connection; you can use this in an event loop.</p>

<p>Here&#39;s an example of how to use the asynchronous query interface:</p>

<pre class="sh_perl">  use feature &#39;say&#39;;
  $dbh-&#62;do(&#39;SELECT SLEEP(10)&#39;, { async =&#62; 1 });
  until($dbh-&#62;mysql_async_ready) {
    say &#39;not ready yet!&#39;;
    sleep 1;
  }
  my $rows = $dbh-&#62;mysql_async_result;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INSTALLATION"
>INSTALLATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Windows users may skip this section and pass over to <a href="#WIN32_INSTALLATION" class="podlinkpod"
>&#34;WIN32 INSTALLATION&#34;</a> below. Others, go on reading.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Environment_Variables"
>Environment Variables</a></h2>

<p>For ease of use, you can now set environment variables for DBD::mysql installation. You can set any or all of the options, and export them by putting them in your .bashrc or the like:</p>

<pre class="sh_perl">    export DBD_MYSQL_CFLAGS=-I/usr/local/mysql/include/mysql
    export DBD_MYSQL_LIBS=&#34;-L/usr/local/mysql/lib/mysql -lmysqlclient&#34;
    export DBD_MYSQL_EMBEDDED=
    export DBD_MYSQL_CONFIG=mysql_config
    export DBD_MYSQL_NOCATCHSTDERR=0
    export DBD_MYSQL_NOFOUNDROWS=0
    export DBD_MYSQL_SSL=
    export DBD_MYSQL_TESTDB=test
    export DBD_MYSQL_TESTHOST=localhost
    export DBD_MYSQL_TESTPASSWORD=s3kr1+
    export DBD_MYSQL_TESTPORT=3306
    export DBD_MYSQL_TESTUSER=me</pre>

<p>The most useful may be the host, database, port, socket, user, and password.</p>

<p>Installation will first look to your mysql_config, and then your environment variables, and then it will guess with intelligent defaults.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Installing_with_CPAN"
>Installing with CPAN</a></h2>

<p>First of all, you do not need an installed MySQL server for installing DBD::mysql. However, you need at least the client libraries and possibly the header files, if you are compiling DBD::mysql from source. In the case of MySQL you can create a client-only version by using the configure option --without-server. If you are using precompiled binaries, then it may be possible to use just selected RPM&#39;s like MySQL-client and MySQL-devel or something similar, depending on the distribution.</p>

<p>First you need to install the DBI module. For using <i>dbimon</i>, a simple DBI shell it is recommended to install Data::ShowTable another Perl module.</p>

<p>I recommend trying automatic installation via the CPAN module. Try</p>

<pre class="sh_perl">  perl -MCPAN -e shell</pre>

<p>If you are using the CPAN module for the first time, it will prompt you a lot of questions. If you finally receive the CPAN prompt, enter</p>

<pre class="sh_perl">  install Bundle::DBD::mysql</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Manual_Installation"
>Manual Installation</a></h2>

<p>If this fails (which may be the case for a number of reasons, for example because you are behind a firewall or don&#39;t have network access), you need to do a manual installation. First of all you need to fetch the modules from CPAN search</p>

<pre class="sh_perl">   <a href="http://search.cpan.org/" class="podlinkurl"
>http://search.cpan.org/</a></pre>

<p>The following modules are required</p>

<pre class="sh_perl">  DBI
  Data::ShowTable
  DBD::mysql</pre>

<p>Then enter the following commands (note - versions are just examples):</p>

<pre class="sh_perl">  gzip -cd DBI-(version).tar.gz | tar xf -
  cd DBI-(version)
  perl Makefile.PL
  make
  make test
  make install

  cd ..
  gzip -cd Data-ShowTable-(version).tar.gz | tar xf -
  cd Data-ShowTable-3.3
  perl Makefile.PL
  make
  make install

  cd ..
  gzip -cd DBD-mysql-(version)-tar.gz | tar xf -
  cd DBD-mysql-(version)
  perl Makefile.PL
  make
  make test
  make install</pre>

<p>During &#34;perl Makefile.PL&#34; you will be prompted some questions. Other questions are the directories with header files and libraries. For example, of your file <em>mysql.h</em> is in <em>/usr/include/mysql/mysql.h</em>, then enter the header directory <em>/usr</em>, likewise for <em>/usr/lib/mysql/libmysqlclient.a</em> or <em>/usr/lib/libmysqlclient.so</em>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WIN32_INSTALLATION"
>WIN32 INSTALLATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you are using ActivePerl, you may use ppm to install DBD-mysql. For Perl 5.6, upgrade to Build 623 or later, then it is sufficient to run</p>

<pre class="sh_perl">  ppm install DBI
  ppm install DBD::mysql</pre>

<p>If you need an HTTP proxy, you might need to set the environment variable http_proxy, for example like this:</p>

<pre class="sh_perl">  set http_proxy=<a href="http://myproxy.com:8080/" class="podlinkurl"
>http://myproxy.com:8080/</a></pre>

<p>As of this writing, DBD::mysql is missing in the ActivePerl 5.8.0 repository. However, Randy Kobes has kindly donated an own distribution and the following might succeed:</p>

<pre class="sh_perl">  ppm install <a href="http://theoryx5.uwinnipeg.ca/ppms/DBD-mysql.ppd" class="podlinkurl"
>http://theoryx5.uwinnipeg.ca/ppms/DBD-mysql.ppd</a></pre>

<p>Otherwise you definitely *need* a C compiler. And it *must* be the same compiler that was being used for compiling Perl itself. If you don&#39;t have a C compiler, the file README.win32 from the Perl source distribution tells you where to obtain freely distributable C compilers like egcs or gcc. The Perl sources are available via CPAN search</p>

<pre class="sh_perl">  <a href="http://search.cpan.org" class="podlinkurl"
>http://search.cpan.org</a></pre>

<p>I recommend using the win32clients package for installing DBD::mysql under Win32, available for download on www.tcx.se. The following steps have been required for me:</p>

<dl>
<dt><a name="-"
>-</a></dt>

<dd>
<p>The current Perl versions (5.6, as of this writing) do have a problem with detecting the C libraries. I recommend to apply the following patch:</p>

<pre class="sh_perl">  *** c:\Perl\lib\ExtUtils\Liblist.pm.orig Sat Apr 15 20:03:40 2000
  --- c:\Perl\lib\ExtUtils\Liblist.pm      Sat Apr 15 20:03:45 2000
  ***************
  *** 230,235 ****
  --- 230,239 ----
      # add &#34;$Config{installarchlib}/CORE&#34; to default search path
      push @libpath, &#34;$Config{installarchlib}/CORE&#34;;

  +     if ($VC  and  exists($ENV{LIB})  and  defined($ENV{LIB})) {
  +       push(@libpath, split(/;/, $ENV{LIB}));
  +     }
  +
      foreach (Text::ParseWords::quotewords(&#39;\s+&#39;, 0, $potential_libs)){

        $thislib = $_;</pre>

<dt><a name="-"
>-</a></dt>

<dd>
<p>Extract sources into <em>C:\</em>. This will create a directory <em>C:\mysql</em> with subdirectories include and lib.</p>

<p>IMPORTANT: Make sure this subdirectory is not shared by other TCX files! In particular do *not* store the MySQL server in the same directory. If the server is already installed in <em>C:\mysql</em>, choose a location like <em>C:\tmp</em>, extract the win32clients there. Note that you can remove this directory entirely once you have installed DBD::mysql.</p>

<dt><a name="-"
>-</a></dt>

<dd>
<p>Extract the DBD::mysql sources into another directory, for example <em>C:\src\siteperl</em></p>

<dt><a name="-"
>-</a></dt>

<dd>
<p>Open a DOS shell and change directory to <em>C:\src\siteperl</em>.</p>

<dt><a name="-"
>-</a></dt>

<dd>
<p>The next step is only required if you repeat building the modules: Make sure that you have a clean build tree by running</p>

<pre class="sh_perl">  nmake realclean</pre>

<p>If you don&#39;t have VC++, replace nmake with your flavour of make. If error messages are reported in this step, you may safely ignore them.</p>

<dt><a name="-"
>-</a></dt>

<dd>
<p>Run</p>

<pre class="sh_perl">  perl Makefile.PL</pre>

<p>which will prompt you for some settings. The really important ones are:</p>

<pre class="sh_perl">  Which DBMS do you want to use?</pre>

<p>enter a 1 here (MySQL only), and</p>

<pre class="sh_perl">  Where is your mysql installed? Please tell me the directory that
  contains the subdir include.</pre>

<p>where you have to enter the win32clients directory, for example <em>C:\mysql</em> or <em>C:\tmp\mysql</em>.</p>

<dt><a name="-"
>-</a></dt>

<dd>
<p>Continued in the usual way:</p>

<pre class="sh_perl">  nmake
  nmake install</pre>
</dd>
</dl>

<p>If you want to create a PPM package for the ActiveState Perl version, then modify the above steps as follows: Run</p>

<pre class="sh_perl">  perl Makefile.PL NAME=DBD-mysql BINARY_LOCATION=DBD-mysql.tar.gz
  nmake ppd
  nmake</pre>

<p>Once that is done, use tar and gzip (for example those from the CygWin32 distribution) to create an archive:</p>

<pre class="sh_perl">  mkdir x86
  tar cf x86/DBD-mysql.tar blib
  gzip x86/DBD-mysql.tar</pre>

<p>Put the files x86/DBD-mysql.tar.gz and DBD-mysql.ppd onto some WWW server and install them by typing</p>

<pre class="sh_perl">  install <a href="http://your.server.name/your/directory/DBD-mysql.ppd" class="podlinkurl"
>http://your.server.name/your/directory/DBD-mysql.ppd</a></pre>

<p>in the PPM program.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Originally, there was a non-DBI driver, Mysql, which was much like PHP drivers such as mysql and mysqli. The <b>Mysql</b> module was originally written by Andreas K&#246;nig &#60;koenig@kulturbox.de&#62; who still, to this day, contributes patches to DBD::mysql. An emulated version of Mysql was provided to DBD::mysql from Jochen Wiedmann, but eventually deprecated as it was another bundle of code to maintain.</p>

<p>The first incarnation of DBD::mysql was developed by Alligator Descartes, who was also aided and abetted by Gary Shea, Andreas K&#246;nig and Tim Bunce.</p>

<p>The current incarnation of <b>DBD::mysql</b> was written by Jochen Wiedmann, then numerous changes and bug-fixes were added by Rudy Lippan. Next, prepared statement support was added by Patrick Galbraith and Alexy Stroganov (who also soley added embedded server support).</p>

<p>For the past seven years DBD::mysql has been maintained by Patrick Galbraith (<i>patg@patg.net</i>) along with the entire community of Perl developers who keep sending patches and making Patrick&#39;s job easier.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONTRIBUTIONS"
>CONTRIBUTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Anyone who desires to contribute to this project is encouraged to do so. Currently, the sourcecode for this project can be found at Github:</p>

<p><a href="git://github.com/CaptTofu/DBD-mysql.git" class="podlinkurl"
>git://github.com/CaptTofu/DBD-mysql.git</a></p>

<p>Either fork this repository and produce a branch with your changeset that the maintainer can merge to his tree, or create a diff with git. The maintainer is more than glad to take contributions from the community as many features and fixes from DBD::mysql have come from the community.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is Large Portions Copyright (c) 2004-2010 Patrick Galbraith Large Portions Copyright (c) 2004-2006 Alexey Stroganov Large Portions Copyright (c) 2003-2005 Rudolf Lippan Large Portions Copyright (c) 1997-2003 Jochen Wiedmann, with code portions Copyright (c)1994-1997 their original authors This module is released under the same license as Perl itself. See the Perl README for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MAILING_LIST_SUPPORT"
>MAILING LIST SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is maintained and supported on a mailing list,</p>

<pre class="sh_perl">    perl@lists.mysql.com</pre>

<p>To subscribe to this list, go to</p>

<p><a href="http://lists.mysql.com/perl?sub=1" class="podlinkurl"
>http://lists.mysql.com/perl?sub=1</a></p>

<p>Mailing list archives are available at</p>

<p><a href="http://lists.mysql.com/perl" class="podlinkurl"
>http://lists.mysql.com/perl</a></p>

<p>Additionally you might try the dbi-user mailing list for questions about DBI and its modules in general. Subscribe via</p>

<p>dbi-users-subscribe@perl.org</p>

<p>Mailing list archives are at</p>

<p><a href="http://groups.google.com/group/perl.dbi.users?hl=en&#38;lr" class="podlinkurl"
>http://groups.google.com/group/perl.dbi.users?hl=en&#38;lr</a>=</p>

<p>Also, the main DBI site is at</p>

<p><a href="http://dbi.perl.org/" class="podlinkurl"
>http://dbi.perl.org/</a></p>

<p>And source:</p>

<p><a href="git://github.com/CaptTofu/DBD-mysql.git" class="podlinkurl"
>git://github.com/CaptTofu/DBD-mysql.git</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ADDITIONAL_DBI_INFORMATION"
>ADDITIONAL DBI INFORMATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Additional information on the DBI project can be found on the World Wide Web at the following URL:</p>

<pre class="sh_perl">    <a href="http://dbi.perl.org" class="podlinkurl"
>http://dbi.perl.org</a></pre>

<p>where documentation, pointers to the mailing lists and mailing list archives and pointers to the most current versions of the modules can be used.</p>

<p>Information on the DBI interface itself can be gained by typing:</p>

<pre class="sh_perl">    perldoc DBI</pre>

<p>right now!</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUG_REPORTING,_ENHANCEMENT/FEATURE_REQUESTS"
>BUG REPORTING, ENHANCEMENT/FEATURE REQUESTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Please report bugs, including all the information needed such as DBD::mysql version, MySQL version, OS type/version, etc to this link:</p>

<p><a href="http://bugs.mysql.com/" class="podlinkurl"
>http://bugs.mysql.com/</a></p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78269 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 23:17:51 2012 GMT (0.128777980804443) @cpansearch1 -->
 </body>
</html>
