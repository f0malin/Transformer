<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Thread::Tie - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Thread-Tie",3]);
    _gaq.push(["_setCustomVar",5,"Release","Thread-Tie-0.13",3]);
    _gaq.push(["_setCustomVar",3,"Module","Thread::Tie",3]);
    _gaq.push(["_setCustomVar",1,"Author","ELIZABETH",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Thread::Tie">permalink</a></div>
  <a href="/~elizabeth/">Elizabeth Mattijsen</a> &gt;
  <a href="/~elizabeth/Thread-Tie-0.13/">Thread-Tie-0.13</a> &gt;
  Thread::Tie
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/f6f8083d758244cb1b1df1997adc1791?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/E/EL/ELIZABETH/Thread-Tie-0.13.tar.gz">Thread-Tie-0.13.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Thread%3A%3ATie;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~ELIZABETH/Thread-Tie-0.13/lib/Thread/Tie.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Thread-Tie">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.13 &nbsp;
<span class="noprint">
  <a href="/src/ELIZABETH/Thread-Tie-0.13/lib/Thread/Tie.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#tie()'>tie()</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#class_to_tie_with'>class to tie with</a>
    <li class='indexItem indexItem2'><a href='#reference_to_parameter_hash'>reference to parameter hash</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CLASS_METHODS'>CLASS METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#shutdown'>shutdown</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#OBJECT_METHODS'>OBJECT METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#semaphore'>semaphore</a>
    <li class='indexItem indexItem2'><a href='#module'>module</a>
    <li class='indexItem indexItem2'><a href='#thread'>thread</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#REQUIRED_MODULES'>REQUIRED MODULES</a>
  <li class='indexItem indexItem1'><a href='#CAVEATS'>CAVEATS</a>
  <li class='indexItem indexItem1'><a href='#TODO'>TODO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Thread::Tie - tie variables into a thread of their own</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This documentation describes version 0.13.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use Thread::Tie; # use as early as possible for maximum memory savings

    # use default thread + tieing + create thread when needed
    tie $scalar, &#39;Thread::Tie&#39;;
    tie @array, &#39;Thread::Tie&#39;;
    tie %hash, &#39;Thread::Tie&#39;;
    tie *HANDLE, &#39;Thread::Tie&#39;;

    # use alternate implementation
    tie $scalar, &#39;Thread::Tie&#39;,
     { module =&#62; &#39;Own::Tie::Implementation&#39;, # used automatically
       use    =&#62; &#39;Use::This::Module::Also&#39;,  # optional, also as []
       eval   =&#62; &#39;arbitrary Perl code&#39;,      # optional
     };

    # initialize right away
    tie $scalar, &#39;Thread::Tie&#39;, {}, 10;
    tie @array, &#39;Thread::Tie&#39;, {}, qw(a b c);
    tie %hash, &#39;Thread::Tie&#39;, {}, (a =&#62; &#39;A&#39;, b =&#62; &#39;B&#39;, c =&#62; &#39;C&#39;);
    tie *HANDLE, &#39;Thread::Tie&#39;, {},&#39;&#62;:layer&#39;,&#39;filename&#39;;
    
    # create an alternate thread and use that
    my $tiethread = Thread::Tie::Thread-&#62;new;
    tie $scalar, &#39;Thread::Tie&#39;, {thread =&#62; $tiethread};

    # object methods
    my $tied = tie stuff,&#39;Thread::Tie&#39;,parameters;
    my $tied = tied( stuff );
    my $semaphore = $tied-&#62;semaphore; # scalar for lock()ing tied variable
    my $module = $tied-&#62;module;       # module tied to in thread
    my $tiethread = $tied-&#62;thread;    # thread to which variable is tied

    my $tid = $tiethread-&#62;tid;        # thread id of tied thread
    my $thread = $tiethread-&#62;thread;  # actual &#34;threads&#34; thread

    untie( stuff ); # calls DESTROY in thread, cleans up thoroughly

    Thread::Tie-&#62;shutdown; # shut down default handling thread
    $tiethread-&#62;shutdown;  # shut down specific thread</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">                  *** A note of CAUTION ***

 This module only functions on Perl versions 5.8.0 and later.
 And then only when threads are enabled with -Dusethreads.  It
 is of no use with any version of Perl before 5.8.0 or without
 threads enabled.

                  *************************</pre>

<p>The standard shared variable scheme used by Perl, is based on tie-ing the variable to some very special dark magic. This dark magic ensures that shared variables, which are copied just as any other variable when a thread is started, update values in all of the threads where they exist as soon as the value of a shared variable is changed.</p>

<p>Needless to say, this could use some improvement.</p>

<p>The Thread::Tie module is a proof-of-concept implementation of another approach to shared variables. Instead of having shared variables exist in all the threads from which they are accessible, shared variable exist as &#34;normal&#34;, unshared variables in a seperate thread. Only a tied object exists in each thread from which the shared variable is accesible.</p>

<p>Through the use of a client-server model, any thread can fetch and/or update variables living in that thread. This client-server functionality is hidden under the hood of tie(). So you could say that one dark magic (the current shared variables implementation) is replaced by another dark magic.</p>

<p>I see the following advantages to this approach:</p>

<dl>
<dt><a name='memory'></a><a name="memory_usage"
>memory usage</a></dt>

<dd>
<p>This implementation circumvents the memory leak that currently (threads::shared version 0.90) plagues any shared array or shared hash access.</p>

<dt><a name='tieing'></a><a name="tieing_shared_variables"
>tieing shared variables</a></dt>

<dd>
<p>Because the current implementation uses tie-ing, you can <b>not</b> tie a shared variable. The same applies for this implementation you might say. However, it <b>is</b> possible to specify a non-standard tie implementation for use <b>within</b> the thread. So with this implementation you <b>can</b> <code>tie()</code> a shared variable. So you <b>could</b> tie a shared hash to a DBM file &#224; la dbmopen() with this module.</p>
</dd>
</dl>

<p>Of course there are disadvantages to this approach:</p>

<dl>
<dt><a name='pure'></a><a name="pure_perl_implementation"
>pure perl implementation</a></dt>

<dd>
<p>This module is currently a pure perl implementation. This is ok for a proof of concept, but may need re-implementation in pure XS or in Inline::C for production use.</p>

<dt><a name='tradeoff'></a><a name="tradeoff_between_cpu_and_memory"
>tradeoff between cpu and memory</a></dt>

<dd>
<p>This implementation currently uses (much) more cpu than the standard shared variables implementation. Whether this would still be true when re-implemented in XS or Inline::C, remains to be seen.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="tie()"
>tie() <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You cannot activate this module with a named class method. Instead, you should tie() a scalar, array, hash or glob (handle). The appropriate class method will then be selected for you by Perl.</p>

<p>Whether you tie a scalar, array, hash or glob, the first parameter to tie(), the second and third parameter (if specified) to tie() are always the same. And the tie() always returns the same thing: the blessed Thread::Tie object to which the variable is tied. You may or may not need that in your application. If you need to do lock()ing on the tied variable, then you need the object to be able to call the <a href="/perldoc?semaphore" class="podlinkpod"
>semaphore</a> method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="class_to_tie_with"
>class to tie with</a></h2>

<p>You should always tie() to the class <b>Thread::Tie</b>. So the second parameter should always read <b>&#39;Thread::Tie&#39;</b>. This parameter is <b>not</b> optional.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="reference_to_parameter_hash"
>reference to parameter hash</a></h2>

<p>The third parameter is optional. If specified, it should be a reference to a hash with key/value pairs. The following fields may be specified in the hash.</p>

<dl>
<dt><a name="module"
>module</a></dt>

<dd>
<pre class="sh_perl"> module =&#62; &#39;Your::Tie::Implementation&#39;,</pre>

<p>The optional &#34;module&#34; field specifies the module to which the variable should be tied inside the thread. If there is no &#34;module&#34; field specified, a standard tie implementation, associated with the type of the variable, will be assumed.</p>

<p>Please note that you should probably <b>not</b> use() the module yourself. The specified module will be use()d automatically inside the thread (only), avoiding bloat in all the other threads.</p>

<dt><a name="use"
>use</a></dt>

<dd>
<pre class="sh_perl"> use =&#62; &#39;Additional::Module&#39;,

 use =&#62; [qw(Additional::Module::1 Additional::Module::2)],</pre>

<p>The optional &#34;use&#34; field specifies one or more modules that should <b>also</b> be loaded inside the thread before the variable is tied. These can e.g. be prerequisites for the module specified in the &#34;module&#34; field.</p>

<p>A single module can be specified by its name. If you need more than one module to be use()d, you can specify these in an array reference.</p>

<dt><a name="eval"
>eval</a></dt>

<dd>
<pre class="sh_perl"> eval =&#62; &#39;any Perl code that you like;&#39;,</pre>

<p>The optional &#34;eval&#34; field specifies additional Perl code that should be executed inside the thread before the variable is tied. This can e.g. be used to set up prerequisites.</p>

<p>Please note that the code to be executed currently needs to be specified as a string that is valid in an eval().</p>

<dt><a name="thread"
>thread</a></dt>

<dd>
<pre class="sh_perl"> thread =&#62; Thread::Tie::Thread-&#62;new,

 thread =&#62; $thread,</pre>

<p>The optional &#34;thread&#34; field specifies the instantiated <a href="/~elizabeth/Thread-Tie-0.13/lib/Thread/Tie/Thread.pm" class="podlinkpod"
>Thread::Tie::Thread</a> object that should be used to tie the variable in. This is only needed if you want to use more than one thread to tie variables in, which could e.g. be needed if there is a conflict between different tie implementations.</p>

<p>You can create a new thread for tie()ing with the &#34;new&#34; class method of the Thread::Tie::Thread module.</p>
</dd>
</dl>

<p>All the other input parameters are passed through to the tie() implementation of your choice. If you are using the default tie() implementation for the type of variable that you have specified, then the input parameters have the following meaning:</p>

<dl>
<dt><a name="scalar"
>scalar</a></dt>

<dd>
<pre class="sh_perl"> tie my $scalar,&#39;Thread::Tie&#39;,{},10;</pre>

<p>Initialize the tied scalar to <b>10</b>.</p>

<dt><a name="array"
>array</a></dt>

<dd>
<pre class="sh_perl"> tie my @array,&#39;Thread::Tie&#39;,{},qw(a b c);</pre>

<p>Initialize the tied array with the elements &#39;a&#39;, &#39;b&#39; and &#39;c&#39;.</p>

<dt><a name="hash"
>hash</a></dt>

<dd>
<pre class="sh_perl"> tie my %hash,&#39;Thread::Tie&#39;,{},(a =&#62; &#39;A&#39;, b =&#62; &#39;B&#39;, c =&#62; &#39;C&#39;);</pre>

<p>Initialize the tied hash with the keys &#39;a&#39;, &#39;b&#39; and &#39;c&#39; with values that are the uppercase version of the key.</p>

<dt><a name="glob"
>glob</a></dt>

<dd>
<pre class="sh_perl"> tie *HANDLE,&#39;Thread::Tie&#39;,{},&#34;&#62;$file&#34;;   # 2 parameter open()

 tie *HANDLE,&#39;Thread::Tie&#39;,{},&#39;&#62;&#39;,$file;  # 3 parameter open()</pre>

<p>Initialize the tied glob by calling open() with the indicated parameters.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CLASS_METHODS"
>CLASS METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There is only one named class method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="shutdown"
>shutdown</a></h2>

<pre class="sh_perl"> Thread::Tie-&#62;shutdown;</pre>

<p>The &#34;shutdown&#34; class method shuts down the thread that is used for variables that have been tie()d without specifying an explicit thread with the &#34;thread&#34; field. It in fact calls the &#34;shutdown&#34; method of the <a href="/~elizabeth/Thread-Tie-0.13/lib/Thread/Tie/Thread.pm" class="podlinkpod"
>Thread::Tie::Thread</a> module on the instantiated object of the default thread.</p>

<p>Any variables that were tie()d, will not function anymore. Any variables that are tie()d <b>after</b> the thread was shut down, will automatically create a new default thread.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OBJECT_METHODS"
>OBJECT METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following object methods are available for the instantiated Thread::Tie object, as returned by the tie() function.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="semaphore"
>semaphore</a></h2>

<pre class="sh_perl"> my $semaphore = $tied-&#62;semaphore;

 my $semaphore = (tie my $variable,&#39;Thread::Tie)-&#62;semaphore;

 my $semaphore = tied( $variable )-&#62;semaphore;

 {lock( $semaphore ); do stuff with tied variable privately}</pre>

<p>The &#34;semaphore&#34; object method returns a reference to a shared scalar that is associated with the tied variable. It can be used for lock()ing access to the tied variable. Scalar values can be assigned to the shared scalar without any problem: it is not used internally for anything other than to allow the developer to lock() access to the tied variable.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="module"
>module</a></h2>

<pre class="sh_perl"> my $module = $tied-&#62;module;

 my $module = (tie my $variable,&#39;Thread::Tie)-&#62;module;

 my $module = tied( $variable )-&#62;module;</pre>

<p>The &#34;module&#34; object method returns the name of the module to which the variable is tied inside the thread. It is the same as what was (implicitely) specified with the &#34;module&#34; field when the variable was tied.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="thread"
>thread</a></h2>

<pre class="sh_perl"> my $tiethread = $tied-&#62;thread;

 my $tiethread = (tie my $variable,&#39;Thread::Tie)-&#62;thread;

 my $tiethread = tied( $variable )-&#62;thread;</pre>

<p>The &#34;thread&#34; object method returns the instantiated &#39;Thread::Tie::Thread&#39; object to which the variable is tied. It is the same as what was (implicetely) specified with the &#34;thread&#34; field when the variable was tied.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="REQUIRED_MODULES"
>REQUIRED MODULES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> load (0.11)
 Thread::Serialize (0.07)</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CAVEATS"
>CAVEATS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Because transport of data structures between threads is severely limited in the current threads implementation (perl 5.8.0), data structures need to be serialized. This is achieved by using the <a href="/perldoc?Thread%3A%3ASerialize" class="podlinkpod"
>Thread::Serialize</a> library. Please check that module for information about the limitations (of any) of data structure transport between threads.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TODO"
>TODO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Examples should be added.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Elizabeth Mattijsen, &#60;liz@dijkmat.nl&#62;.</p>

<p>Please report bugs to &#60;perlbugs@dijkmat.nl&#62;.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2002-2003, 2010 Elizabeth Mattijsen &#60;liz@dijkmat.nl&#62;. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?threads" class="podlinkpod"
>threads</a>, <a href="/perldoc?Thread%3A%3ASerialize" class="podlinkpod"
>Thread::Serialize</a>.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78276 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 03:30:37 2012 GMT (0.11074686050415) @cpansearch1 -->
 </body>
</html>
