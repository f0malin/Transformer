<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>COPS::Client - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","COPS-Client",3]);
    _gaq.push(["_setCustomVar",5,"Release","COPS-Client-0.03",3]);
    _gaq.push(["_setCustomVar",3,"Module","COPS::Client",3]);
    _gaq.push(["_setCustomVar",1,"Author","SHAMROCK",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?COPS::Client">permalink</a></div>
  <a href="/~shamrock/">Andrew S. Kennedy</a> &gt;
  <a href="/~shamrock/COPS-Client-0.03/">COPS-Client-0.03</a> &gt;
  COPS::Client
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/c3eb8d391d672a806bf9805360281087?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/S/SH/SHAMROCK/COPS-Client-0.03.tar.gz">COPS-Client-0.03.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=COPS%3A%3AClient;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~SHAMROCK/COPS-Client-0.03/lib/COPS/Client.pm">Annotate this POD
</a></p>

<div style="float:right">
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=COPS-Client">View/Report Bugs</a><br/>

</div>
</div>
  Module Version:  0.03 &nbsp;
<span class="noprint">
  <a href="/src/SHAMROCK/COPS-Client-0.03/lib/COPS/Client.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#EXPORT'>EXPORT</a>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#new'>new</a>
    <li class='indexItem indexItem2'><a href='#set_command'>set_command</a>
    <li class='indexItem indexItem2'><a href='#subscriber_set'>subscriber_set</a>
    <li class='indexItem indexItem2'><a href='#gate_specification_add'>gate_specification_add</a>
    <li class='indexItem indexItem2'><a href='#classifier_add'>classifier_add</a>
    <li class='indexItem indexItem2'><a href='#envelope_add'>envelope_add</a>
    <li class='indexItem indexItem2'><a href='#rks_set'>rks_set</a>
    <li class='indexItem indexItem2'><a href='#decode_radius_attribute'>decode_radius_attribute</a>
    <li class='indexItem indexItem2'><a href='#volume_set'>volume_set</a>
    <li class='indexItem indexItem2'><a href='#timebase_set'>timebase_set</a>
    <li class='indexItem indexItem2'><a href='#opaque_set'>opaque_set</a>
    <li class='indexItem indexItem2'><a href='#Summary'>Summary</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#SUPPORT'>SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#ACKNOWLEDGEMENTS'>ACKNOWLEDGEMENTS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_&#38;_LICENSE'>COPYRIGHT &#38; LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>COPS::Client - COPS Protocol - Packet Cable Client</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Version 0.03</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    This module provides a simple COPS client for managing Packet Cable Multi
Media sessions for CMTS. It should provide all the neccessary functionality to
enable a service provider to deploy, manage and control service flows within
their network. This does not maintain a connection to the CMTS but issue the
configured command, get the response and then close the TCP connection. I am
working on a stateful Client however this is not yet available.

    As basic initial use of the module is as follows

    my $cops_client = new COPS::Client (
        [
        ServerIP =&#62; &#39;192.168.0.1&#39;,
        ServerPort =&#62; &#39;3918&#39;,
        Timeout =&#62; 2,
        DataHandler =&#62; \&#38;display_data
        ]
        );

    $cops_client-&#62;set_command(&#34;set&#34;);
    $cops_client-&#62;subscriber_set(&#34;ipv4&#34;,&#34;172.20.1.1&#34;);

    $cops_client-&#62;gate_specification_add(
        [
        Direction       =&#62; &#39;Downstream&#39;,
        DSCPToSMark     =&#62; 0,
        Priority        =&#62; 0,
        PreEmption      =&#62; 0,
        Gate_Flags      =&#62; 0,
        Gate_TOSField   =&#62; 0,
        Gate_TOSMask    =&#62; 0,
        Gate_Class      =&#62; 0,
        Gate_T1         =&#62; 0,
        Gate_T2         =&#62; 0,
        Gate_T3         =&#62; 0,
        Gate_T4         =&#62; 0
        ]
        );

    $cops_client-&#62;classifier_add(
        [
        Classifier_Type         =&#62; &#39;Classifier&#39;,
        Classifier_Priority =&#62; 64,
        Classifier_SourceIP =&#62; &#34;172.20.1.1&#34;,
        ]
        );

    $cops_client-&#62;envelope_add (
        [
        Envelope_Type           =&#62; &#34;authorize,reserve,commit&#34;,
        Service_Type            =&#62; &#39;DOCSIS Service Class Name&#39;,
        ServiceClassName        =&#62; &#39;S_down&#39;
        ]
        );

    $cops_client-&#62;connect();
    $cops_client-&#62;check_data_available();

    This will connect to a CMTS on IP 192.168.0.1 and apply a PCMM gate to 
the subscriber with IP address 172.20.1.1 and apply the service class S_down.

    It should be noted not all CMTS support all the functions available, so
    if the COPS request is failing for you remove opaque_set, timebase_set or
    volume_set and try again.

    You may also get a very cryptic error if an envelope or classifier is
    incorrectly configured.</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORT"
>EXPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There are no exports.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    new
    set_command
    subscriber_set
    gate_specification_add
    classifier_add
    envelope_add
    rks_set
    decode_radius_attribute
    volume_set
    timebase_set
    opaque_set</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="new"
>new</a></h2>

<pre class="sh_perl">    The new function initialises the module and sets the CMTS IP, Port and
the data handling function which gets called if a RTP message is received.

    The parameters are

        ServerIP    -  The IP address of the CMTS to connect to

        ServerPort  -  The port that the Packet Cable service is running
                       on. There is no default value however most server
                       implementations use port 3918, so this should be
                       set to that

        Timeout     -  This is a timeout parameter for the connection to the
                       CMTS. It has a default of 5 so can be omitted.

        DataHandler -  This should be set to point to a local function to
                       handle any data returned by a COPS message sent.

                       The function will accept 2 variables as input the
                       first is the module point, the second is a point to
                       a hash containing any data returned.

    An example of use would be.

    my $cops_client = new COPS::Client (
        [
        ServerIP =&#62; &#39;192.168.0.1&#39;,
        ServerPort =&#62; &#39;3918&#39;,
        Timeout =&#62; 2,
        DataHandler =&#62; \&#38;display_data
        ]
        );

    sub display_data
        {
        my ( $self ) = shift;
        my ( $data ) = shift;
        print &#34;Report Datagram sent.\n\n&#34;;
        foreach my $name ( sort { $a cmp $b } keys %{$data} )
            {
            print &#34;Attribute Name  is &#39;$name&#39; value is &#39;${$data}{$name}&#39;\n&#34;;
            }
        }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="set_command"
>set_command</a></h2>

<pre class="sh_perl">    This command sets the type of command to be sent in the connection. It
    can be one of 4 types as follows

            set        -    Meaning GateSet
            delete     -    Meaning GateDelete
            info       -    Meaning GateInfo
            synch      -    Meaning Synch Request

    An example of use is

        $cops_client-&#62;set_command ( &#34;set&#34; );

    The command specified must match *Exactly* otherwise it will be ignored. It
    appears Cisco CMTS do NOT respond to Synch requests. Cisco have been asked
    to respond to this query but no information has been forthcoming.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="subscriber_set"
>subscriber_set</a></h2>

<pre class="sh_perl">    This function sets the subscriber ID to be used. The subcriber ID can be
    either an IPV4 or IPV6 address. If you use an IPV6 address it *MUST* be
    fully qualified.

    The function takes two parameters the first specifies which IPVx to use,
    the second is the IPVx value.

    An example of use is

        $cops_client-&#62;subscriber_set(&#34;ipv4&#34;,&#34;172.20.1.1&#34;);

    The subscriber ID is required for 99% of all COPS messages.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="gate_specification_add"
>gate_specification_add</a></h2>

<pre class="sh_perl">    This function builds a gate with the attributes specified. Possible
    attributes are

        Direction      -  This can be &#39;Upstream&#39; or &#39;Downstream&#39; only.
                          If specified this overrides Gate_Flags as
                          direction is one bit of the Gate_Flags 
                          parameter.

        Priority       -  This is a value of 0 to 7. If specified this
                          overrides Gate_Class as Priority is 3 bits
                          of that parameter.

        PreEmption     -  This has a value of 0 or 1. This allows this
                          gate to take bandwidth from any other gates
                          already set against this subscriber. If
                          specified this overrides Gate_Class as this is
                          1 bit of that parameter.

        DSCPToSMark    -  This has a value of 0 or 1

        Priority       -  This has a value between 0 and 255 and should
                          determine the priority of the gate.

        Gate_Flags     -  This field is broken down into 2 used bits and
                          6 unused bits.

                          Bit 0    -  Direction. 
                                      0 is Downstream
                                      1 is Upstream
 
                                      If you use the Direction parameter
                                      this is set for you.

                          Bit 1    -  DSCP/TOS Field
                                      0 is enable
                                      1 is overwrite

        GateTOSField    - IP TOS and Precedence value.

        GateTOSMask     - IP TOS Mask settings

        GateClass       - This field is broken down into 8 bits as follows
                       
                          Bit 0-2   - Priority of 0-7
                          Bit 3     - PreEmption bit
                          Bit 4-7   - Configurable but should default 0

        Gate_T1         - Gate T1 timer

        Gate_T2         - Gate T2 timer

        Gate_T3         - Gate T3 timer

        Gate_T4         - Gate T4 timer

    An example of use would be

    $cops_client-&#62;gate_specification_add(
        [
        Direction       =&#62; &#39;Downstream&#39;,
        DSCPToSMark     =&#62; 0,
        Priority        =&#62; 0,
        PreEmption      =&#62; 0,
        Gate_Flags      =&#62; 0,
        Gate_TOSField   =&#62; 0,
        Gate_TOSMask    =&#62; 0,
        Gate_Class      =&#62; 0,
        Gate_T1         =&#62; 0,
        Gate_T2         =&#62; 0,
        Gate_T3         =&#62; 0,
        Gate_T4         =&#62; 0
        ]
        );</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="classifier_add"
>classifier_add</a></h2>

<pre class="sh_perl">    This function adds a classifier to the COPS request being sent and
    supports normal and extended classifiers.

    The function requires two types of parameters depending on the type
    of classifier specified.

    To specify the correct classifier the attribute Classifier_Type
    can be used as follows

        Classifier_Type   -  This should be &#39;Classifier&#39; or &#39;Extended&#39;

    Classifier_Type &#39;Classifier&#39; attributes are as follows

        Classifier_IPProtocolId      - This is a standard IP protocol
                                       number. You can set this to 0
                                       or omit this and a default of 0
                                       will be used.

        Classifier_TOSField          - The TOSField of the IP packets
                                       to match. You can set this to 0
                                       or omit this and a default of 0
                                       will be used.

        Classifier_TOSMask           - The TOSMask of the IP packets 
                                       to match. you can set this to 0
                                       or omit this and a default of 0
                                       will be used.

        Classifier_SourceIP          - This should be set to the source
                                       IP address of the associated flow.
                                       If you have a device attached to
                                       the cable modem such as a PC, then
                                       you should use the IP of that
                                       device, not that of the cable modem.

        Classifier_DestinationIP     - This is the destination IP of the 
                                       flow. It can be a wildcard of 0.
                                       If you omit this then a default 0
                                       will be used.

        Classifier_SourcePort        - The source port of the flow. If
                                       you omit this then a default of 0
                                       will be used.

        Classifier_DestinationPort   - This is the destination port of the
                                       flow. If you omit this then a default
                                       if 0 will be used.

        Classifier_Priority          - The priority of this Classifier. If
                                       you have multiple Classifiers then
                                       this determines the order they are
                                       checked.

    An example of use would be

    $cops_client-&#62;classifier_add(
        [
        Classifier_Type         =&#62; &#39;Classifier&#39;,
        Classifier_Priority =&#62; 64,
        Classifier_SourceIP =&#62; &#34;172.20.1.1&#34;,
        ]
        );

    This sets up a Standard classifier with a priority of 64, Source IP of
    172.20.1.1,any port and a wildcard destination address any port.

    Classifier_Type &#39;Extended&#39; attributes are as follows

        EClassifier_IPProtocolId     - This is a standard IP protocol
                                       number. You can set this to 0
                                       or omit this and a default of 0
                                       will be used.

        EClassifier_TOSField         - The TOSField of the IP packets
                                       to match. You can set this to 0
                                       or omit this and a default of 0
                                       will be used.

        EClassifier_TOSMask          - The TOSMask of the IP packets
                                       to match. you can set this to 0
                                       or omit this and a default of 0
                                       will be used.

        EClassifier_SourceIP         - This should be set to the source
                                       IP address of the associated flow.
                                       If you have a device attached to
                                       the cable modem such as a PC, then
                                       you should use the IP of that
                                       device, not that of the cable modem.
                                       With an extended classifier you can
                                       also specify a network address.

        EClassifier_SourceMask       - This is the associated netmask for
                                       the SourceIP specified.

        EClassifier_DestinationIP    - This is the destination IP of the
                                       flow. It can be a wildcard of 0.
                                       If you omit this then a default 0
                                       will be used.
                                       With an extended classifier you can
                                       also specify a network address.

        EClassifier_DestinationMask  - This is the associated netmask for
                                       the DestinationIP specified.

        EClassifier_SourcePortStart  - The start source port of the flow.
                                       If you omit this then a default of 0
                                       will be used.

        EClassifier_SourcePortEnd    - The end source port of the flow. If
                                       both the start and end ports are 0
                                       then all ports are matched.

        EClassifier_DestinationPortStart - The start destination port of the
                                       flow. If you omit this then a default
                                       of 0 will be used.

        EClassifier_DestinationPortEnd - The end destination port of the flow.
                                       If both the start and end ports are 0
                                       then all ports are matched.

        EClassifier_ClassifierID     - An extended classifier must have numerical
                                       ID and it should unique per classifier per
                                       gate. It can range from 1 to 65535 (16bit)

        EClassifier_Priority         - The priority of this Classifier. If
                                       you have multiple Classifiers then
                                       this determines the order they are
                                       checked.

        EClassifier_State            - This determines if this classifier is
                                       Inactive or Active, values 0 and 1
                                       respectively.

        EClassifier_Action           - This has 4 possible values

                                       0 - Means Add - This is the default if not
                                                       specified.
                                       1 - Replace
                                       2 - Delete
                                       3 - No Change

    An example of use would be

    $cops_client-&#62;classifier_add(
        [
        Classifier_Type         =&#62; &#39;Extended&#39;,
        EClassifier_Priority =&#62; 64,
        EClassifier_SourceIP =&#62; &#34;172.20.1.1&#34;,
        EClassifier_ClassifierID =&#62; 100,
        EClassifier_State =&#62; 1
        ]
        );

    This sets up an Extended classifier with a priority of 64, Source IP of
    172.20.1.1,any port and a wildcard destination address any port. The ID is set
    to 100 and it is set to State 1 which is Active.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="envelope_add"
>envelope_add</a></h2>

<pre class="sh_perl">    This function adds the correct envelope type to the gate. All the possible parameters
    can not be detailed here as it would this man page *VERY* long. I may add them in the
    future.

    The Attributes that are *ALWAYS* required at

        Envelope_Type                - This specifies the type of request and is managed
                                       by three bits (LSB first), lowest value 1 highest
                                       value 7

                                       0 - Authorize    - Value 1
                                       1 - Reserve      - Value 2
                                       2 - Commit       - Value 4

                                       This is a string and should be one/more of the following

                                       authorize reserve commit

        Service_Type                 - This determines the type of service that the gate
                                       will apply. By specifying the Service_Type and
                                       Envelope_Type this determines the additional
                                       parameters required.

                                       The following values are valid for Service_Type

                                       Flow Spec
                                       DOCSIS Service Class Name
                                       Best Effort Service
                                       Non-Real-Time Polling Service
                                       Real-Time Polling Service
                                       Unsolicited Grant Service
                                       Unsolicited Grant Service with Activity Detection
                                       Downstream

                                       There is an example of each one in the examples
                                       directory examples/profiles/
    
    An example of use would be

    $cops_client-&#62;envelope_add (
        [
        Envelope_Type           =&#62; &#34;authorize reserve commit&#34;,
        Service_Type            =&#62; &#39;DOCSIS Service Class Name&#39;,
        ServiceClassName        =&#62; &#39;S_down&#39;
        ]
        );

    This sets up the Envelope to be authorized, reserved and committed. It contains a Service
    Class Name (this should be configured on the CMTS already) and it has been named as
    S_down. If the specified ServiceClassName is incorrect or does not correspond to the
    direction specified an error will be returned.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="rks_set"
>rks_set</a></h2>

<pre class="sh_perl">    This function add a Reporting server to the COPS request. You can have a primary and
    secondary Reporting server and events, such as volume quota reached, time reached should
    be report to the Reporting server configured. All Reporting server messages are via 
    the RADIUS protocol. This rks_set only supports IPV4 addressing.

    As part of a RKS request you can also specify unique indentifiers that will be sent in
    the Reporting request for each specific gate created. The Gate ID is not sent in the 
    reporting request so some external management system will need to track these.

    The variables you can set in an RKS configuration are as follows

    PRKS_IPAddress                 - This is the PRIMARY (PRKS) reporting server IP address.
                                     It should be specified as an IP, hostnames are not
                                     supported and only IPV4 is available.

    PRKS_Port                      - This is the Port that reporting messages are sent to.
                                     The protocol used is RADIUS so the standard 1813 port
                                     should be used if a default RADIUS server configuration
                                     is to be used.

    PRKS_Flags                     - Ignore, further work is required, however if you
                                     understand this usage it is available to be set.

    SRKS_IPAddress                 - This is the SECONDARY (SRKS) reporting server IP address.
                                     This is ONLY used if the primary is considered down.
                                     It should be specified as an IP, hostnames are not
                                     supported and only IPV4 is available.

    SRKS_Port                      - This is the Port that reporting messages are sent to
                                     for the SECONDARY reporting server.

    SRKS_Flags                     - Ignore, further work is required, however if you
                                     understand this usage it is available to be set.

    
    Billing Correlation Identification

    BCID_TimeStamp                 - This is a 32bit number and EPOCH is a good use here.
                                  
    BCID_ElementID                 - This is an eight (8) character entry and should be
                                     alphanumeric only to be supported by all vendors.

    BCID_TimeZone                  - This is an eight(8) character entry and specifies
                                     the timezone of the entry. 

    BCID_EventCounter              - This is a 32bit number and can be anything within that
                                     range. This could be an auto-increment in a table, so
                                     allowing GateID to be linked back later.

    An example of use would be

        my $timer=time();

        $cops_client-&#62;rks_set (
                        [
                        PRKS_IPAddress          =&#62; &#39;192.168.50.2&#39;,
                        PRKS_Port               =&#62; 2000,
                        PRKS_Flags              =&#62; 0,
                        SRKS_IPAddress          =&#62; 0,
                        SRKS_Port               =&#62; 0,
                        SRKS_Flags              =&#62; 0,
                        BCID_TimeStamp          =&#62; $timer,
                        BCID_ElementID          =&#62; &#39;99999999&#39;,
                        BCID_TimeZone           =&#62; &#39;00000000&#39;,
                        BCID_EventCounter       =&#62; 12347890
                        ]
                        );

    You can omit fields which are not used and they will default to 0, but for completeness
    are included above.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="decode_radius_attribute"
>decode_radius_attribute</a></h2>

<pre class="sh_perl">    This function takes the output from FreeRadius 2.1.9 and expands it where possible. The
    supported attributes are

         CableLabs-Event-Message
         CableLabs-QoS-Descriptor

    When called this function returns the converted attribute into a hash of the attributes
    found and decoded.

    An example of use would be

    my %return_data;

    $cops_client-&#62;decode_radius_attribute(&#34;CableLabs-Event-Message&#34;,
        &#34;
        0x00034c163b873939393939393939303030303030303000bc69f2000700022020203232323200312b3030303030300000002b32303130303631343135313233382e3032330000000080000400&#34;,
        \%return_data);

    Note the 0x is required at the beginning so validity checking will pass.

    The %return_data has should then contain the following keys with values.

        EventMessageVersionID        -  3
        TimeZone                     -  1+000000
        Status                       -  0
        AttributeCount               -  4
        SequenceNumber               -  43
        BCID_TimeZone                -  00000000
        EventObject                  -  0
        ElementType                  -  2
        EventMessageType             -  7
        BCID_Timestamp               -  1276525447
        BCID_ElementID               -  99999999
        BCID_EventCounter            -  12347890
        EventMessageTypeName         -  QoS_Reserve
        Priority                     -  128
        ElementID                    -  &#39;   2222&#39;
        EventTime                    -  20100614151238.023</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="volume_set"
>volume_set</a></h2>

<pre class="sh_perl">    This functions adds a volume limit to the gate being sent. You should be aware the CMTS
    may not stop traffic flowing through the gate when the limit is reached, implementation
    dependent, however should send a RKS notification.

    The only attribute for this function is

        VolumeLimit                  - This is a 64bit number and is the number of bytes
                                       allowed through the gate.

    An example of use would be

    $cops_client-&#62;volume_set(
        [
        VolumeLimit =&#62; 3000000000
        ]
        );
   
    This would set the volume to 3Gigabytes.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="timebase_set"
>timebase_set</a></h2>

<pre class="sh_perl">    This function add a time limit to the gate being sent. You should be aware the CMTS may
    not stop traffifc flowing through the gate when the limit is reached, implementation
    dependent, however should sent a RKS notification.

    The only attribute for this function is
        
        TimeLimit                    - This is a 32bit number and is the number of seconds
                                       the gate should remain active.

    An example of use would be

    $cops_client-&#62;timebase_set(
        [
        TimeLimit =&#62; 60
        ]
        );

    This would set the time limit to 60 seconds.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="opaque_set"
>opaque_set</a></h2>

<pre class="sh_perl">    This function allows you to add arbitary data to the COPS message sent which *may* be
    recorded against the gate by the remote CMTS.

    The only attribute for this function is

        OpaqueData                   - This be any data, although keeping it to something
                                       humanly readable is probably a good idea.

    An example of use would be

    $cops_client-&#62;opaque_set(
        [
        OpaqueData =&#62; &#39;a test string&#39;
        ]
        );

    This would add &#39;a test string&#39; as Opaque data to the gate.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Summary"
>Summary</a></h2>

<pre class="sh_perl">    This is very much a &#39;work in progress&#39;. </pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>shamrock@cpan.org, <code>&#60;shamrock at cpan.org&#62;</code></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>- Sync messages to Cisco CMTS do not seem to work. I have tried alternative formats, headers, etc but to no avail. They do work to Motorola and Aris. I have raised this with Cisco but do not expect a response any time soon. If anyone has a packet trace with a working Synch using a Cisco CMTS that would be useful.</p>

<p>- The different traffic profiles need work, see examples/profiles. The following examples produce an &#39;Unspecified error&#39; and may be down to the values being used. If any one can help with the values that should be used, packet trace, then I can look at improving their use.</p>

<pre class="sh_perl">      Flow Spec                       
      Non-Real-Time Polling Service  
      Real-Time Polling Service  
      Unsolicited Grant Service  </pre>

<p>Please report any bugs or feature requests to <code>bug-cops-cmts at rt.cpan.org</code>, or through the web interface at <a href="http://rt.cpan.org/NoAuth/ReportBug.html?Queue=COPS-Client" class="podlinkurl"
>http://rt.cpan.org/NoAuth/ReportBug.html?Queue=COPS-Client</a>. I will be notified, and then you&#39;ll automatically be notified of progress on your bug as I make changes.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT"
>SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Please do email me if you have any issues so they can be looked at as soon as possible.</p>

<p>You can find documentation for this module with the perldoc command.</p>

<pre class="sh_perl">    perldoc COPS::Client</pre>

<p>You can also look for information at:</p>

<ul>
<li>RT: CPAN&#39;s request tracker
<p><a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=COPS-Client" class="podlinkurl"
>http://rt.cpan.org/NoAuth/Bugs.html?Dist=COPS-Client</a></p>
</li>

<li>AnnoCPAN: Annotated CPAN documentation
<p><a href="http://annocpan.org/dist/COPS-Client" class="podlinkurl"
>http://annocpan.org/dist/COPS-Client</a></p>
</li>

<li>CPAN Ratings
<p><a href="http://cpanratings.perl.org/d/COPS-Client" class="podlinkurl"
>http://cpanratings.perl.org/d/COPS-Client</a></p>
</li>

<li>Search CPAN
<p><a href="http://search.cpan.org/dist/COPS-Client/" class="podlinkurl"
>http://search.cpan.org/dist/COPS-Client/</a></p>
</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACKNOWLEDGEMENTS"
>ACKNOWLEDGEMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_&#38;_LICENSE"
>COPYRIGHT &#38; LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2010 shamrock@cpan.org, all rights reserved.</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78269 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 00:26:34 2012 GMT (0.588812112808228) @cpansearch1 -->
 </body>
</html>
