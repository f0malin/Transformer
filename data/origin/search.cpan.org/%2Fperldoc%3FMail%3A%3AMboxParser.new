<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Mail::MboxParser - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Mail-MboxParser",3]);
    _gaq.push(["_setCustomVar",5,"Release","Mail-MboxParser-0.55",3]);
    _gaq.push(["_setCustomVar",3,"Module","Mail::MboxParser",3]);
    _gaq.push(["_setCustomVar",1,"Author","VPARSEVAL",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Mail::MboxParser">permalink</a></div>
  <a href="/~vparseval/">Tassilo von Parseval</a> &gt;
  <a href="/~vparseval/Mail-MboxParser-0.55/">Mail-MboxParser-0.55</a> &gt;
  Mail::MboxParser
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/e1ff375377ad97efe7fe497bf1fd73bf?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/V/VP/VPARSEVAL/Mail-MboxParser-0.55.tar.gz">Mail-MboxParser-0.55.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Mail%3A%3AMboxParser;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~VPARSEVAL/Mail-MboxParser-0.55/MboxParser.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Mail%3A%3AInternet">Mail::Internet</a><br>
<a href="/perldoc?Mail%3A%3ABox">Mail::Box</a><br>
<a href="/perldoc?MIME%3A%3AParser">MIME::Parser</a><br>
<a href="/perldoc?Mail%3A%3APOP3Client">Mail::POP3Client</a><br>
<a href="/perldoc?Mail%3A%3AProcmail">Mail::Procmail</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?MIME%3A%3AEntity">MIME::Entity</a><br>
<a href="/perldoc?MIME%3A%3ALite">MIME::Lite</a><br>
<a href="/perldoc?MIME%3A%3ADecoder">MIME::Decoder</a><br>
<a href="/perldoc?IO%3A%3AStringy">IO::Stringy</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Mail%3A%3AMboxParser">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 8</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Mail-MboxParser">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.55 &nbsp;
<span class="noprint">
  <a href="/src/VPARSEVAL/Mail-MboxParser-0.55/MboxParser.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Specifying_parser_options'>Specifying parser options</a>
    <li class='indexItem indexItem2'><a href='#METHODS_SHARED_BY_ALL_OBJECTS'>METHODS SHARED BY ALL OBJECTS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#ERROR-HANDLING'>ERROR-HANDLING</a>
  <li class='indexItem indexItem1'><a href='#CAVEATS'>CAVEATS</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#TODO'>TODO</a>
  <li class='indexItem indexItem1'><a href='#THANKS'>THANKS</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR_AND_COPYRIGHT'>AUTHOR AND COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Mail::MboxParser - read-only access to UNIX-mailboxes</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use Mail::MboxParser;

    my $parseropts = {
        enable_cache    =&#62; 1,
        enable_grep     =&#62; 1,
        cache_file_name =&#62; &#39;mail/cache-file&#39;,
    };
    my $mb = Mail::MboxParser-&#62;new(&#39;some_mailbox&#39;, 
                                    decode     =&#62; &#39;ALL&#39;,
                                    parseropts =&#62; $parseropts);

    # -----------
    
    # slurping
    for my $msg ($mb-&#62;get_messages) {
        print $msg-&#62;header-&#62;{subject}, &#34;\n&#34;;
        $msg-&#62;store_all_attachments(path =&#62; &#39;/tmp&#39;);
    }

    # iterating
    while (my $msg = $mb-&#62;next_message) {
        print $msg-&#62;header-&#62;{subject}, &#34;\n&#34;;
        # ...
    }

    # we forgot to do something with the messages
    $mb-&#62;rewind;
    while (my $msg = $mb-&#62;next_message) {
        # iterate again
        # ...
    }

    # subscripting one message after the other
    for my $idx (0 .. $mb-&#62;nmsgs - 1) {
        my $msg = $mb-&#62;get_message($idx);
    }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module attempts to provide a simplified access to standard UNIX-mailboxes. It offers only a subset of methods to get &#39;straight to the point&#39;. More sophisticated things can still be done by invoking any method from MIME::Tools on the appropriate return values.</p>

<p>Mail::MboxParser has not been derived from Mail::Box and thus isn&#39;t acquainted with it in any way. It, however, incorporates some invaluable hints by the author of Mail::Box, Mark Overmeer.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>See also the section ERROR-HANDLING much further below.</p>

<p>More to that, see the relevant manpages of Mail::MboxParser::Mail, Mail::MboxParser::Mail::Body and Mail::MboxParser::Mail::Convertable for a description of the methods for these objects.</p>

<dl>
<dt><a name='new'></a><a name="new(mailbox,_options)"
><b>new(mailbox, options)</b></a></dt>

<dd>
<dt><a name='new'></a><a name="new(scalar-ref,_options)"
><b>new(scalar-ref, options)</b></a></dt>

<dd>
<dt><a name='new'></a><a name="new(array-ref,_options)"
><b>new(array-ref, options)</b></a></dt>

<dd>
<dt><a name='new'></a><a name="new(filehandle,_options)"
><b>new(filehandle, options)</b></a></dt>

<dd>
<p>This creates a new MboxParser-object opening the specified &#39;mailbox&#39; with either absolute or relative path.</p>

<p>new() can also take a reference to a variable containing the mailbox either as one string (reference to a scalar) or linewise (reference to an array), or a filehandle from which to read the mailbox.</p>

<p>The following option(s) may be useful. The value in brackets below the key is the default if none given.</p>

<pre class="sh_perl">    key:      | value:     | description:
    ==========|============|===============================
    decode    | &#39;NEVER&#39;    | never decode transfer-encoded
    (NEVER)   |            | data
              |------------|-------------------------------
              | &#39;BODY&#39;     | will decode body into a human-
              |            | readable format
              |------------|-------------------------------
              | &#39;HEADER&#39;   | will decode header fields if
              |            | any is encoded
              |------------|-------------------------------
              | &#39;ALL&#39;      | decode any data
    ==========|============|===============================
    uudecode  | 1          | enable extraction of uuencoded
    (0)       |            | attachments in MIME::Parser
              |------------|-------------------------------
              | 0          | uuencoded attachments are
              |            | treated as plain body text
    ==========|============|===============================
    newline   | &#39;UNIX&#39;     | UNIXish line-endings 
    (AUTO)    |            | (&#34;\n&#34; aka \012)
              |------------|-------------------------------
              | &#39;WIN&#39;      | Win32 line-endings
              |            | (&#34;\n\r&#34; aka \012\015)
              |------------|-------------------------------
              | &#39;AUTO&#39;     | try to do autodetection
              |------------|-------------------------------
              | custom     | a user-given value for totally
              |            | borked mailboxes
    ==========|============|===============================
    oldparser | 1          | uses the old (and slower) 
    (0)       |            | parser (but guaranteed to show
              |            | the old behaviour)
              |------------|-------------------------------
              | 0          | uses Mail::Mbox::MessageParser
    ==========|============|===============================
    parseropts|            | see &#34;Specifying parser opts&#34;
              |            | below
    ==========|============|===============================</pre>

<p>The <i>newline</i> option comes in handy if you have a mbox-file that happens to not conform to the rules of your operating-system&#39;s character semantics one way or another. One such scenario: You are using the module under Win but deliberately have mailboxes with UNIX-newlines (or the other way round). If you do not give this option, &#39;AUTO&#39; is assumed and some basic tests on the mailbox are performed. This autoedection is of course not capable of detecting cases where you use something like &#39;#DELIMITER&#39; as line-ending. It can as to yet only distinguish between UNIX and Win32ish newlines. You may be lucky and it even works for Macintoshs. If you have more extravagant wishes, pass a costum value:</p>

<pre class="sh_perl">    my $mb = new Mail::MboxParser (&#34;mbox&#34;, newline =&#62; &#39;#DELIMITER&#39;);</pre>

<p>You can&#39;t use regexes here since internally this relies on the $/ var ($INPUT_RECORD_SEPERATOR, that is).</p>

<p>When passing either a scalar-, array-ref or \*STDIN as first-argument, an anonymous tmp-file is created to hold the data. This procedure is hidden away from the user so there is no need to worry about it. Since a tmp-file acts just like an ordinary mailbox-file you don&#39;t need to be concerned about loss of data or so once you have been walking through the mailbox-data. No data will be lost and it&#39;ll all be fine and smooth.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Specifying_parser_options"
>Specifying parser options</a></h2>

<p>When available, the module will use <code>Mail::Mbox::MessageParser</code> to do the parsing. To get the most speed out of it, you can tweak some of its options. Arguably, you even have to do that in order to make it use caching. Options for the parser are given via the <i>parseropts</i> switch that expects a reference to a hash as values. The values you can specify are:</p>

<dl>
<dt><a name="enable_cache"
>enable_cache</a></dt>

<dd>
<p>When set to a true value, caching is used <b>but only</b> if you gave <i>cache_file_name</i>. There is no default value here!</p>

<dt><a name="cache_file_name"
>cache_file_name</a></dt>

<dd>
<p>The file used for caching. This option is mandatory if <i>enable_cache</i> is true.</p>

<dt><a name="enable_grep"
>enable_grep</a></dt>

<dd>
<p>When set to a true value (which is the default), the extern grep(1) is used to speed up parsing. If your system does not provide a usable grep implementation, it silently falls back to the pure Perl parser.</p>
</dd>
</dl>

<p>When the module was unable to create a <code>Mail::Mbox::MessageParser</code> object, it will fall back to the old parser in the hope that the construction of the object then succeeds.</p>

<dl>
<dt><a name='open'></a><a name="open(source,_options)"
><b>open(source, options)</b></a></dt>

<dd>
<p>Takes exactly the same arguments as new() does just that it can be used to change the characteristics of a mailbox on the fly.</p>
</dd>
</dl>

<dl>
<dt><a name="get_messages"
><b>get_messages</b></a></dt>

<dd>
<p>Returns an array containing all messages in the mailbox respresented as Mail::MboxParser::Mail objects. This method is _minimally_ quicker than iterating over the mailbox using <code>next_message</code> but eats much more memory. Memory-usage will grow linearly for each new message detected since this method creates a huge array containing all messages. After creating this array, it will be returned.</p>
</dd>
</dl>

<dl>
<dt><a name='get_message'></a><a name="get_message(n)"
><b>get_message(n)</b></a></dt>

<dd>
<p>Returns the n-th message (first message has index 0) in a mailbox. Examine <code>$mb-&#62;error</code> which contains an error-string if the message does not exist. In this case, <code>get_message</code> returns undef.</p>
</dd>
</dl>

<dl>
<dt><a name="next_message"
><b>next_message</b></a></dt>

<dd>
<p>This lets you iterate over a mailbox one mail after another. The great advantage over <code>get_messages</code> is the very low memory-comsumption. It will be at a constant level throughout the execution of your script. Secondly, it almost instantly begins spitting out Mail::MboxParser::Mail-objects since it doesn&#39;t have to slurp in all mails before returing them.</p>
</dd>
</dl>

<dl>
<dt><a name='set_pos'></a><a name="set_pos(n)"
><b>set_pos(n)</b></a></dt>

<dd>
<dt><a name="rewind"
><b>rewind</b></a></dt>

<dd>
<dt><a name="current_pos"
><b>current_pos</b></a></dt>

<dd>
<p>These three methods deal with the position of the internal filehandle backening the mailbox. Once you have iterated over the whole mailbox using <code>next_message</code> MboxParser has reached the end of the mailbox and you have to do repositioning if you want to iterate again. You could do this with either <code>set_pos</code> or <code>rewind</code>.</p>

<pre class="sh_perl">    $mb-&#62;rewind;  # equivalent to
    $mb-&#62;set_pos(0);</pre>

<p><code>current_pos</code> reveals the current position in the mailbox and can be used to later return to this position if you want to do tricky things. Mark that <code>current_pos</code> does *not* return the current line but rather the current character as returned by Perl&#39;s tell() function.</p>

<pre class="sh_perl">    my $last_pos;
    while (my $msg = $mb-&#62;next_message) {
        # ...
        if ($msg-&#62;header-&#62;{subject} eq &#39;I was looking for this&#39;) {
            $last_pos = $mb-&#62;current_pos;
            last; # bail out here and do something else
        }
    }
    
    # ...
    # ...
    
    # now continue where we stopped:
    $mb-&#62;set_pos($last_pos)
    while (my $msg = $mb-&#62;next_message) {
        # ...
    }</pre>

<p><b>WARNING: </b> Be very careful with these methods when using the parser of <code>Mail::Mbox::MessageParser</code>. This parser maintains its own state and you shouldn&#39;t expect it to always be in sync with the state of <code>Mail::MboxParser</code>. If you need some finer control over the parsing, better consider to use the public interface as described in <a href="/perldoc?Mail%3A%3AMbox%3A%3AMessageParser" class="podlinkpod"
>the manpage of Mail::Mbox::MessageParser</a>. Use <code>parser()</code> to get the underlying parser object.</p>

<p>This however may expose you to the same problems turned around: <code>Mail::MboxParser</code> may loose its sync with its parser when you do that.</p>

<p>Therefore: Just avoid any of the above for now and wait till <code>Mail::Mbox::MessageParser</code> has a stable interface.</p>
</dd>
</dl>

<dl>
<dt><a name="make_index"
><b>make_index</b></a></dt>

<dd>
<p>You can force the creation of a message-index with this method. The message-index is a mapping between the index-number of a message (0 .. $mb-&#62;nmsgs - 1) and the byte-position of the filehandle. This is usually done automatically for you once you call <code>get_message</code> hence the first call for a particular message will be a little slower since the message-index first has to be built. This is, however, done rather quickly.</p>

<p>You can have a peek at the index if you are interested. The following produces a nicely padded table (suitable for mailboxes up to 9.9999...GB ;-).</p>

<pre class="sh_perl">    $mb-&#62;make_index;
    for (0 .. $mb-&#62;nmsgs - 1) {
        printf &#34;%5.5d =&#62; %10.10d\n&#34;, 
                $_, $mb-&#62;get_pos($_);
    }   </pre>
</dd>
</dl>

<dl>
<dt><a name='get_pos'></a><a name="get_pos(n)"
><b>get_pos(n)</b></a></dt>

<dd>
<p>This method takes the index-number of a certain message within the mailbox and returns the corresponding position of the filehandle that represents that start of the file.</p>

<p>It is mainly used by <code>get_message()</code> and you wouldn&#39;t really have to bother using it yourself except for statistical purpose as demonstrated above along with <b>make_index</b>.</p>
</dd>
</dl>

<dl>
<dt><a name="nmsgs"
><b>nmsgs</b></a></dt>

<dd>
<p>Returns the number of messages in a mailbox. You could naturally also call get_messages in scalar-context, but this one wont create new objects. It just counts them and thus it is much quicker and wont eat a lot of memory.</p>
</dd>
</dl>

<dl>
<dt><a name="parser"
><b>parser</b></a></dt>

<dd>
<p>Returns the bare <code>Mail::Mbox::MessageParser</code> object. If no such object exists returns <code>undef</code>.</p>

<p>You can use this method to check whether the module actually uses the old or new parser. If <code>parser</code> returns a false value, it is using the old parsing routines.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="METHODS_SHARED_BY_ALL_OBJECTS"
>METHODS SHARED BY ALL OBJECTS</a></h2>

<dl>
<dt><a name="error"
><b>error</b></a></dt>

<dd>
<p>Call this immediately after one of the methods above that mention a possible error-message.</p>

<dt><a name="log"
><b>log</b></a></dt>

<dd>
<p>Sort of internal weirdnesses are recorded here. Again only the last event is saved.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ERROR-HANDLING"
>ERROR-HANDLING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Mail::MboxParser provides a mechanism for you to figure out why some methods did not function as you expected. There are four classes of unexpected behavior:</p>

<dl>
<dt><a name='1'></a><a name="(1)_bad_arguments"
><b>(1) bad arguments </b></a></dt>

<dd>
<p>In this case you called a method with arguments that did not make sense, hence you confused Mail::MboxParser. Example:</p>

<pre class="sh_perl">  $mail-&#62;store_entity_body;           # wrong, needs two arguments
  $mail-&#62;store_entity_body(0);        # wrong, still needs one more</pre>

<p>In any of the above two cases, you&#39;ll get an error message and your script will exit. The message will, however, tell you in which line of your script this error occured.</p>

<dt><a name='2'></a><a name="(2)_correct_arguments_but..."
><b>(2) correct arguments but...</b></a></dt>

<dd>
<p>Consider this line:</p>

<pre class="sh_perl">  $mail-&#62;store_entity_body(50, \*FH); # could be wrong</pre>

<p>Obviously you did call store_entity_body with the correct number of arguments. That&#39;s good because now your script wont just exit. Unfortunately, your program can&#39;t know in advance whether the particular mail ($mail) has a 51st entity.</p>

<p>So, what to do?</p>

<p>Just be brave: Write the above line and do the error-checking afterwards by calling $mail-&#62;error immediately after store_entity_body:</p>

<pre class="sh_perl">        $mail-&#62;store_entity_body(50, *\FH);
        if ($mail-&#62;error) {
                print &#34;Oups, something wrong:&#34;, $mail-&#62;error;
        }</pre>

<p>In the description of the available methods above, you always find a remark when you could use $mail-&#62;error. It always returns a string that you can print out and investigate any further.</p>

<dt><a name='3'></a><a name="(3)_errors,_that_never_get_visible"
><b>(3) errors, that never get visible</b></a></dt>

<dd>
<p>Well, they exist. When you handle MIME-stuff a lot such as attachments etc., Mail::MboxParser internally calls a lot of methods provided by the MIME::Tools package. These work splendidly in most cases, but the MIME::Tools may fail to produce something sensible if you have a very queer or even screwed up mailbox.</p>

<p>If this happens you might find information on that when calling $mail-&#62;log. This will give you the more or less unfiltered error-messages produced by MIME::Tools.</p>

<p>My advice: Ignore them! If there really is something in $mail-&#62;log it is either because you&#39;re mails are totally weird (there is nothing you can do about that then) or these errors are smoothly catched inside Mail::MboxParser in which case all should be fine for you.</p>

<dt><a name='4'></a><a name="(4)_the_apocalyps"
><b>(4) the apocalyps</b></a></dt>

<dd>
<p>If nothing seems to work the way it should and $mail-&#62;error is empty, then the worst case has set in: Mail::MboxParser has a bug.</p>

<p>Needless to say that there is any way to get around of this. In this case you should contact and I&#39;ll examine that.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CAVEATS"
>CAVEATS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>I have been working hard on making Mail::MboxParser eat less memory and as quick as possible. Due to that, two time and memory consuming matters are now called on demand. That is, parsing out the MIME-parts and turning the raw header into a hash have become closures.</p>

<p>The drawback of that is that it may get inefficient if you often call</p>

<pre class="sh_perl"> $mail-&#62;header-&#62;{field}</pre>

<p>In this case you should probably save the return value of $mail-&#62;header (a hashref) into a variable since each time you call it the raw header is parsed.</p>

<p>On the other hand, if you have a mailbox of, say, 25MB, and hold each header of each message in memory, you&#39;ll quickly run out of that. So, you can now choose between more performance and more memory.</p>

<p>This all does not happen if you just parse a mailbox to extract one header-field (eg. subject), work with that and exit. In this case it will need both less memory and is still considerably quicker. :-)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Some mailers have a fancy idea of how a &#34;To: &#34;- or &#34;Cc: &#34;-line should look. I have seen things like:</p>

<pre class="sh_perl">        To: &#34;\&#34;John Doe&#34;\&#34; &#60;john.doe@example.com&#62;</pre>

<p>The splitting into name and email, however, does still work here, but you have to remove these silly double-quotes and backslashes yourself.</p>

<p>The way of counting the messages and detecting them now complies to RFC 822. This is, however, no guarentee that it all works seamlessly. There are just so many mailboxes that get screwed up by mal-formated mails.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TODO"
>TODO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Apart from new bugs that almost certainly have been introduced with this release, following things still need to be done:</p>

<dl>
<dt><a name='Transfer'></a><a name="Transfer-Encoding"
>Transfer-Encoding</a></dt>

<dd>
<p>Still, only quoted-printable encoding is correctly handled.</p>

<dt><a name="Tests"
>Tests</a></dt>

<dd>
<p>Clean-up of the test-scripts is desperately needed. Now they represent rather an arbitrary selection of tested functions. Some are tested several times while others don&#39;t show up at all in the suits.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="THANKS"
>THANKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Thanks to a number of people who gave me invaluable hints that helped me with Mail::Box, notably Mark Overmeer for his hints on more object-orientedness.</p>

<p>Kenn Frankel (kenn AT kenn DOT cc) kindly patched the broken split-header routine and added get_field().</p>

<p>David Coppit for making me aware of <code>Mail::Mbox::MessageParser</code> and designing it the way I needed to make it work for my module.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This is version 0.55.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR_AND_COPYRIGHT"
>AUTHOR AND COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Tassilo von Parseval &#60;tassilo.von.parseval@rwth-aachen.de&#62;</p>

<p>Copyright (c) 2001-2005 Tassilo von Parseval. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?MIME%3A%3AEntity" class="podlinkpod"
>MIME::Entity</a></p>

<p><a href="/~vparseval/Mail-MboxParser-0.55/MboxParser/Mail.pm" class="podlinkpod"
>Mail::MboxParser::Mail</a>, <a href="/~vparseval/Mail-MboxParser-0.55/MboxParser/Mail/Body.pm" class="podlinkpod"
>Mail::MboxParser::Mail::Body</a>, <a href="/~vparseval/Mail-MboxParser-0.55/MboxParser/Mail/Convertable.pm" class="podlinkpod"
>Mail::MboxParser::Mail::Convertable</a></p>

<p><a href="/perldoc?Mail%3A%3AMbox%3A%3AMessageParser" class="podlinkpod"
>Mail::Mbox::MessageParser</a></p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78283 Uploads, 24725 Distributions
106015 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 06:48:18 2012 GMT (0.154501914978027) @cpansearch1 -->
 </body>
</html>
