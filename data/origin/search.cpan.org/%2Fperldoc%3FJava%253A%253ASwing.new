<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Java::Swing - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Java-Swing",3]);
    _gaq.push(["_setCustomVar",5,"Release","Java-Swing-0.14",3]);
    _gaq.push(["_setCustomVar",3,"Module","Java::Swing",3]);
    _gaq.push(["_setCustomVar",1,"Author","PHILCROW",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Java::Swing">permalink</a></div>
  <a href="/~philcrow/">Philip Crow</a> &gt;
  <a href="/~philcrow/Java-Swing-0.14/">Java-Swing-0.14</a> &gt;
  Java::Swing
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/caa0277c56b2089582c12961915eb20f?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/P/PH/PHILCROW/Java-Swing-0.14.tar.gz">Java-Swing-0.14.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Java%3A%3ASwing;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~PHILCROW/Java-Swing-0.14/lib/Java/Swing.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Inline%3A%3AJava">Inline::Java</a><br>
<a href="/perldoc?Parse%3A%3ARecDescent">Parse::RecDescent</a><br>
<a href="/perldoc?Inline%3A%3AC">Inline::C</a><br>
<a href="/perldoc?Test%3A%3AMore">Test::More</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Tk%3A%3AZinc">Tk::Zinc</a><br>
<a href="/perldoc?Tcl%3A%3ATk">Tcl::Tk</a><br>
<a href="/perldoc?Win32%3A%3AGUI">Win32::GUI</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Java%3A%3ASwing">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Java-Swing">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.14 &nbsp;
<span class="noprint">
  <a href="/src/PHILCROW/Java-Swing-0.14/lib/Java/Swing.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#ABSTRACT'>ABSTRACT</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLE'>EXAMPLE</a>
  <li class='indexItem indexItem1'><a href='#EXTENDING'>EXTENDING</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Adding_Components_or_Families_of_Them'>Adding Components or Families of Them</a>
    <li class='indexItem indexItem2'><a href='#Adding_Listeners'>Adding Listeners</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#One_Listener_at_a_Time'>One Listener at a Time</a>
      <li class='indexItem indexItem3'><a href='#Families_of_Listeners'>Families of Listeners</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Adding_Constant_Interfaces'>Adding Constant Interfaces</a>
    <li class='indexItem indexItem2'><a href='#EXPORT'>EXPORT</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Java::Swing - Perl extension providing direct access to the Java Swing API</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  BEGIN { $ENV{CLASSPATH} .= &#39;:/path/to/Java/Swing/java&#39;; }

  use Java::Swing;
  my $swinger = Java::Swing-&#62;new();

  my $frame  = JFrame-&#62;new();
  my $button = JButton-&#62;new( { label =&#62; &#39;Press Me&#39; } );

  $frame-&#62;getContentPane()-&#62;add($button);

  $swinger-&#62;connect(
    &#39;ActionListener&#39;, $button, { actionPerformed =&#62; \&#38;myListener }
  );

  my $timer = Timer-&#62;new(10, { actionPerformed =&#62; \&#38;timer_catcher });
  $timer-&#62;start();

  $swinger-&#62;start();

  sub mylistener {
    my $generating_object = shift;
    my $event             = shift;
    print &#34;Hello, Rob!\n&#34;;
  }

  my $count = 1;
  sub timer_catcher {
    print &#34;Timer went off &#34; . $count++;
  }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ABSTRACT"
>ABSTRACT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  Provides direct access to the Java Swing toolkit from Perl.</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Though you can write a Java program which is driven by Perl, some people may prefer to keep their Perl pure. This package lets you do that in manner similar to the way Perl/Tk and Gtk2:: provide access to their underlying libraries. This lets us code in our favorite language, while using the graphical interface capabilities of Java Swing.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLE"
>EXAMPLE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>In the example directory of the distribution there is an example called calc. Here I will walk through it a bit at a time. To see it in one piece look in the untarred distribution. To run it after make and before installing Java::Swing type:</p>

<pre class="sh_perl">    perl -I blib/lib example/calc</pre>

<p>After installation just use:</p>

<pre class="sh_perl">    perl example/calc</pre>

<p>But remember to change the path separators to fit your OS.</p>

<pre class="sh_perl">    use strict; use warnings;

    # This program provides an example of a simple Java::Swing application.
    # Type an expression in the top text box, press evaluate, and see the
    # answer in the other box.</pre>

<p>As the comment tries to say, this program displays two JTextFields and a JButton. When the button is pressed, the expression in the first field is eval&#39;d and the result is placed in the second field.</p>

<pre class="sh_perl">    # Note that to make the example work, you must have the directory containing
    # the Java::Swing classes in the classpath.  In the distribution this is
    # called java.

    BEGIN { $ENV{CLASSPATH} .= &#39;:java&#39; }</pre>

<p>No changes to the CLASSPATH will be effective if they come after use Java::Swing, so put them in a BEGIN block before that statement. The classes in the java directory of the distribution provide support for event listeners.</p>

<pre class="sh_perl">    use Java::Swing;</pre>

<p>This innocuous looking statement actually sets up the aliases that make it easy to refer to Java Swing classes. In particular, it sets up namespaces for each Component so you can refer to them directly as shown immediately below. It does not load the Java classes until you actually use them.</p>

<pre class="sh_perl">    my $expression  = JTextField-&#62;new();
    my $answer      = JTextField-&#62;new( { columns =&#62; 10 } );
    my $submit      = JButton   -&#62;new(&#34;Evaluate&#34;);
    my $frame       = JFrame    -&#62;new();
    my $root_pane   = $frame    -&#62;getContentPane();
    my $south_panel = JPanel    -&#62;new();</pre>

<p>Once you use Java::Swing, you can refer to javax.swing classes by their class name alone as if it name were a Perl package name. All class methods, including constructors, can be called as normal through this Perl package name.</p>

<p>But, if you like, you may also use Java::Swing named attribute construction, as shown for the second JTextField above. Simply supply a hash reference whose keys are attributes of the class with the proper values. Your object will be constructed by calling the empty argument constructor. Then the attribute values will be supplied by calling set accessors. So columns =&#62; 10 will translate into setColumns(10).</p>

<p>As of version 0.12, you may add an Object attribute to the constructor hash. Then Java::Swing will call the constructor on the underlying class which expects it, and then call set accessors for any additional attributes. For example:</p>

<pre class="sh_perl">        my $label = JLabel-&#62;new(
            { Object =&#62; $icon,
              text   =&#62; &#39;caption&#39;, }
        );
Thanks to Andreas Puerzer for suggesting this additional sugar.</pre>

<p>Continuing with the example:</p>

<pre class="sh_perl">    $south_panel-&#62;add(JLabel-&#62;new(&#34;Answer:&#34;), &#34;West&#34;  );
    $south_panel-&#62;add($answer,                &#34;Center&#34;);
    $south_panel-&#62;add($submit,                &#34;East&#34;  );

    $root_pane-&#62;add($expression,  &#34;North&#34;);
    $root_pane-&#62;add($south_panel, &#34;South&#34;);

    $frame-&#62;setSize(300, 100);
    $frame-&#62;show();</pre>

<p>These lines perform Component layout. If you are not familiar with layouts in Java Swing (which has the same scheme as awt), consult a book (O&#39;Reilly has more than one that will do, try the Java Foundation Classes in a Nutshell or Java Swing).</p>

<pre class="sh_perl">    my $swinger = Java::Swing-&#62;new();</pre>

<p>At some point, you must obtain a Java::Swing object. Through it, you stop and start event listening. It also allows you to connect listeners directly to Perl code.</p>

<pre class="sh_perl">    $swinger-&#62;connect(
            &#34;ActionListener&#34;, $submit, { actionPerformed =&#62; \&#38;evaluate }
    );

    $swinger-&#62;connect(
            &#34;WindowListener&#34;, $frame, { windowClosing =&#62; \&#38;ending }
    );</pre>

<p>Call connect through your Java::Swing object passing it the listener type, the object to listen to, and a hash reference whose keys are all the events you care about. The values in the hash must be code references. These will be called when the event is triggered. They will receive the stringified name of the sending object (the originator of the event) and the event object. If you need the actual sending object, ask the event for it (try getSource). You only need to supply the events you care about. Leave others out, default no-ops will be called for them.</p>

<p>If you plan to disconnect, you need to store the hash reference in a variable, so that you can pass EXACTLY the same arguments to the disconnect method. It is not enough to have the same data in the hash reference, it must be the same reference.</p>

<p>If you want multiple routines called for the same event, call connect repeatedly. Give it a different hash reference each time, even if that reference refers to the same name/code ref pairs.</p>

<pre class="sh_perl">    $swinger-&#62;start();</pre>

<p>After everything is ready, call start on your Java::Swing object. Once you do this Java takes over control with its event loop. This probably makes Java::Swing incompatible with other packages that want to manage the main loop, like POE (if you can make such packages cooperate, please advise me on how it is done).</p>

<pre class="sh_perl">    sub evaluate {
        my $sender_name = shift;
        my $event       = shift;

        $answer-&#62;setText(eval $expression-&#62;getText());
    }</pre>

<p>Here, evaluate pays no attention to the arguments it receives, but they are included so you can see how they come in. Instead, the text in the expression box is passed directly to eval (yes, security is important here, don&#39;t set uid). That answer is directly placed in the answer field via setText.</p>

<pre class="sh_perl">    sub ending {
        $swinger-&#62;stop();
    }</pre>

<p>When you receive control via an event, you can stop the Java event loop by calling stop on your Java::Swing object. Here that happens when the user closes the window. When you stop the event loop, your program terminates.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXTENDING"
>EXTENDING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>While I have tried to provide all the Swing you will ever need, there are inevitably some things I have not gotten to. Further, you may have in house code which you would like to incoroprate into this scheme. This section explains the pieces needed to use other code as part of Java::Swing.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Adding_Components_or_Families_of_Them"
>Adding Components or Families of Them</a></h2>

<p>While most of the Components from Swing are implemented, AWT, SWT and other kits are not implemented (though parts of AWT are). Most Components have the same basic plan. They are part of Swing. They have a no argument constructor and accessors for all of their attributes. If that describes your widget, there is only one thing to do:</p>

<pre class="sh_perl">    Add the base name of your class to the @packages list in
    Swing::PerlFakeLocalPackages</pre>

<p>If your widget is not at the top level of its package include the subdirectories leading from the package to it like so:</p>

<pre class="sh_perl">    text::html::AccessibleHTML</pre>

<p>If the widget has all of the above traits, but is in a different package, you should still add it to <code>@packages</code> in <code>Swing::PerlFakeLocalPackages</code>. But, you also need to add an entry for it in <code>%names</code> like so:</p>

<pre class="sh_perl">    YourWidget =&#62; &#39;com.yourcompany.package&#39;,</pre>

<p>If you are adding lots of widgets, you&#39;ll want to automate this, but I don&#39;t have a lot of advice on how to do so. I did it once and forgot the scripts. I don&#39;t think they were complex.</p>

<p>If the Java class is standard (for some sense of standard), send the module to me so I can add it to future distributions.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Adding_Listeners"
>Adding Listeners</a></h2>

<p>In Java::Swing, events are handled through callbacks to Perl code. To make the callbacks happen, you need a Java class which implements the listener interface. As of version 0.10, you no longer need a corresponding Perl module, the code from those modules is now implemented once in Swing.pm. It is possible to hand code the Java listener implementation, but it is a pain.</p>

<p>There are two real possibilities. Either you have a single listener or you have several. In the first case, you can use listener_generator. This script is not installed, but can be found in the Swing/Generate subdirectory of the distribution. Details follow.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="One_Listener_at_a_Time"
>One Listener at a Time</a></h3>

<p>Create a file describing the listener with a valid Perl hash reference in it like this:</p>

<p>{ &#39;listener&#39; =&#62; &#39;TreeWillExpandListener&#39;, &#39;methods&#39; =&#62; [ { &#39;name&#39; =&#62; &#39;treeWillExpand&#39;, &#39;type&#39; =&#62; &#39;javax.swing.event.TreeExpansionEvent&#39;, &#39;throws&#39; =&#62; &#39;javax.swing.tree.ExpandVetoException&#39; }, { &#39;name&#39; =&#62; &#39;treeWillCollapse&#39;, &#39;type&#39; =&#62; &#39;javax.swing.event.TreeExpansionEvent&#39;, &#39;throws&#39; =&#62; &#39;javax.swing.tree.ExpandVetoException&#39; } ], &#39;full_name&#39; =&#62; &#39;javax.swing.event.TreeWillExpandListener&#39; }</p>

<p>Always use all three keys:</p>

<dl>
<dt><a name="full_name"
>full_name</a></dt>

<dd>
<p>The fully qualified name of the listener interface.</p>

<dt><a name="listener"
>listener</a></dt>

<dd>
<p>The interface name (short form, not qualified).</p>

<dt><a name="methods"
>methods</a></dt>

<dd>
<p>An anonymous list of hash references. Each hash needs two keys:</p>

<dl>
<dt><a name='name'></a><a name="name_(required)"
>name (required)</a></dt>

<dd>
<p>The name of the method.</p>

<dt><a name='type'></a><a name="type_(required)"
>type (required)</a></dt>

<dd>
<p>The type of event the method receives.</p>

<dt><a name='throws'></a><a name="throws_(optional)"
>throws (optional)</a></dt>

<dd>
<p>The type of event the method throws.</p>
</dd>
</dl>
</dd>
</dl>

<p>Once you have a file describing your listener, run <code>listener_generator</code> with that file as the only command line argument. This writes to standard out. Save the resulting file as <code>PerlNameListener.java</code>. When you compile the java file, include the Inline classes in the CLASSPATH, these will be in a directory like</p>

<pre class="sh_perl">    /cpan/modules/Inline-Java-0.47/Java/classes</pre>

<p>(During run time, Inline::Java makes sure these are in the CLASSPATH.)</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Families_of_Listeners"
>Families of Listeners</a></h3>

<p>When adding a whole new toolkit (like swt) you need to add all the listeners. To do this use the following steps (all scripts mentioned are in the Swing/Generate directory of the distribution):</p>

<ol>
<li>Use <code>decomp_listeners</code>, giving it the package name and the directory where source and class files live. (Note that it relies on a hard coded path to your rt.jar, change that to the correct location.) (If you don&#39;t have sources, you&#39;ll have to change the script substantially.) The output comes to standard out, store it in a file.</li>

<li>Use <code>all_listeners</code>, giving it the name of the file from step one along with directory for the java pieces.</li>

<li>Compile the java programs. Remember to include the Inline::Java classes in the CLASSPATH for compilation (they are supplied for you at run time). On my machine these are in /usr/src/Inline-Java-0.47/Java/classes.</li>

<li>Make sure that the classes from step 3 are in the CLASSPATH for all scripts that need them.</li>
</ol>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Adding_Constant_Interfaces"
>Adding Constant Interfaces</a></h2>

<p>Since <code>Java::Swing</code> is based on <code>Inline::Java</code> it is inherently a remote procedure call system. Among other things this means that only methods can be called from one language to another. Constants cannot be seen. Therefore, if you have constants in an interface, or even in a class, you must provide methods for these, typically in both java and perl.</p>

<p>To see how to do this, consult <code>PerlSwingConstants.java</code> in the java directory of the distribution and its pair <code>SwingConstants.pm</code> in the Swing directory.</p>

<p>There is not currently an automated way to build these wrappers.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="EXPORT"
>EXPORT</a></h2>

<p>None.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The documentation above is, of course, incomplete. It gives you the spirit of using the kit. The real documentation is the official Java documentation for the version of the jdk you have installed.</p>

<p>Particular <a href="/~philcrow/Java-Swing-0.14/lib/Java/Swing.pm" class="podlinkpod"
>Java::Swing</a>:: modules may have additional Perl specific documentation. See the Swing directory for these modules.</p>

<p>Questions about this module may be addressed to the author or posted to the Inline mailing list to which the author and other interested parties subscribe.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Phil Crow, &#60;philcrow2000@yahoo.com&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2004 by Philip Crow</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl 5.8.0 itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78276 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 02:48:26 2012 GMT (0.0873610973358154) @cpansearch1 -->
 </body>
</html>
