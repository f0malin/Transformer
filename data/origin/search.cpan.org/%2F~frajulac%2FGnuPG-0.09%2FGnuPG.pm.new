<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>GnuPG - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","GnuPG",3]);
    _gaq.push(["_setCustomVar",5,"Release","GnuPG-0.09",3]);
    _gaq.push(["_setCustomVar",3,"Module","GnuPG",3]);
    _gaq.push(["_setCustomVar",1,"Author","FRAJULAC",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?GnuPG">permalink</a></div>
  <a href="/~frajulac/">Francis J. Lacoste</a> &gt;
  <a href="/~frajulac/GnuPG-0.09/">GnuPG-0.09</a> &gt;
  GnuPG
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/8b6b10bb1f82d4e125a8d9727e545691?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/F/FR/FRAJULAC/GnuPG-0.09.tar.gz">GnuPG-0.09.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=GnuPG;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~FRAJULAC/GnuPG-0.09/GnuPG.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 2</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 3</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=GnuPG">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.09 &nbsp;
<span class="noprint">
  <a href="/src/FRAJULAC/GnuPG-0.09/GnuPG.pm">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~yanick/GnuPG/GnuPG.pm">GnuPG-0.19</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#API_OVERVIEW'>API OVERVIEW</a>
  <li class='indexItem indexItem1'><a href='#CONSTRUCTOR'>CONSTRUCTOR</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#new_(_[params]_)'>new ( [params] )</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#gen_key(_[params]_)'>gen_key( [params] )</a>
    <li class='indexItem indexItem2'><a href='#import_keys(_[params]_)'>import_keys( [params] )</a>
    <li class='indexItem indexItem2'><a href='#export_keys(_[params]_)'>export_keys( [params] )</a>
    <li class='indexItem indexItem2'><a href='#encrypt(_[params]_)'>encrypt( [params] )</a>
    <li class='indexItem indexItem2'><a href='#sign(_[params]_)'>sign( [params] )</a>
    <li class='indexItem indexItem2'><a href='#clearsign(_[params]_)'>clearsign( [params] )</a>
    <li class='indexItem indexItem2'><a href='#verify(_[params]_)'>verify( [params] )</a>
    <li class='indexItem indexItem2'><a href='#decrypt(_[params]_)'>decrypt( [params] )</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>GnuPG - Perl module interface to the GNU Privacy Guard.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use GnuPG qw( :algo );

    my $gpg = new GnuPG();

    $gpg-&#62;encrypt(  plaintext   =&#62; &#34;file.txt&#34;,  output      =&#62; &#34;file.gpg&#34;,
                    armor       =&#62; 1,            sign   =&#62; 1,
                    passphrase  =&#62; $secret );

    $gpg-&#62;decrypt( ciphertext   =&#62; &#34;file.gpg&#34;,  output      =&#62; &#34;file.txt&#34; );

    $gpg-&#62;clearsign( plaintext =&#62; &#34;file.txt&#34;, output =&#62; &#34;file.txt.asc&#34;,
                     passphrase =&#62; $secret,   armor =&#62; 1,
                    );

    $gpg-&#62;verify( signature =&#62; &#34;file.txt.asc&#34;, file =&#62; &#34;file.txt&#34; );

    $gpg-&#62;gen_key( name =&#62; &#34;Joe Blow&#34;,      comment =&#62; &#34;My GnuPG key&#34;,
                   passphrase =&#62; $secret,
                    );</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>GnuPG is a perl interface to the GNU Privacy Guard. It uses the shared memory coprocess interface that gpg provides for its wrappers. It tries its best to map the interactive interface of the gpg to a more programmatic model.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="API_OVERVIEW"
>API OVERVIEW <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The API is accessed through methods on a GnuPG object which is a wrapper around the <b>gpg</b> program. All methods takes their argument using named parameters, and errors are returned by throwing an exception (using croak). If you wan&#39;t to catch errors you will have to use eval.</p>

<p>There is also a tied file handle interface which you may find more convenient for encryption and decryption. See GnuPG::Tie(3) for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTOR"
>CONSTRUCTOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="new_(_[params]_)"
>new ( [params] )</a></h2>

<p>You create a new GnuPG wrapper object by invoking its new method. (How original !). The module will try to finds the <b>gpg</b> program in your path and will croak if it can&#39;t find it. Here are the parameters that it accepts :</p>

<dl>
<dt><a name="gnupg_path"
>gnupg_path</a></dt>

<dd>
<p>Path to the <b>gpg</b> program.</p>

<dt><a name="options"
>options</a></dt>

<dd>
<p>Path to the options file for <b>gpg</b>. If not specified, it will use the default one (usually <em>~/.gnupg/options</em>).</p>

<dt><a name="homedir"
>homedir</a></dt>

<dd>
<p>Path to the <b>gpg</b> home directory. This is the directory that contains the default <em>options</em> file, the public and private key rings as well as the trust database.</p>

<dt><a name="trace"
>trace</a></dt>

<dd>
<p>If this variable is set to true, <b>gpg</b> debugging output will be sent to stderr.</p>
</dd>
</dl>

<pre class="sh_perl">    Example: my $gpg = new GnuPG();</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="gen_key(_[params]_)"
>gen_key( [params] )</a></h2>

<p>This methods is used to create a new gpg key pair. The methods croaks if there is an error. It is a good idea to press random keys on the keyboard while running this methods because it consumes a lot of entropy from the computer. Here are the parameters it accepts :</p>

<pre class="sh_perl">    Ex: $gpg-&#62;</pre>

<dl>
<dt><a name="algo"
>algo</a></dt>

<dd>
<p>This is the algorithm use to create the key. Can be ELGAMAL, DSA_ELGAMAL or DSA. It defaults to DSA_ELGAMAL. To import those constant in your name space, use the :algo tag.</p>

<dt><a name="size"
>size</a></dt>

<dd>
<p>The size of the public key. Defaults to 1024. Cannot be less than 768 bits, and keys longer than 2048 are also discouraged. (You *DO* know that your monitor may be leaking sensitive informations ;-).</p>

<dt><a name="valid"
>valid</a></dt>

<dd>
<p>How long the key is valid. Defaults to 0 or never expire.</p>

<dt><a name="name"
>name</a></dt>

<dd>
<p>This is the only mandatory argument. This is the name that will used to construct the user id.</p>

<dt><a name="email"
>email</a></dt>

<dd>
<p>Optional email portion of the user id.</p>

<dt><a name="comment"
>comment</a></dt>

<dd>
<p>Optional comment portion of the user id.</p>

<dt><a name="passphrase"
>passphrase</a></dt>

<dd>
<p>The passphrase that will be used to encrypt the private key. Optional but strongly recommended.</p>
</dd>
</dl>

<pre class="sh_perl">    Example: $gpg-&#62;gen_key( algo =&#62; DSA_ELGAMAL, size =&#62; 1024,
                            name =&#62; &#34;My name&#34; );</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="import_keys(_[params]_)"
>import_keys( [params] )</a></h2>

<p>Import keys into the GnuPG private or public keyring. The method croaks if it encounters an error. It returns the number of keys imported. Parameters :</p>

<dl>
<dt><a name="keys"
>keys</a></dt>

<dd>
<p>Only parameter and mandatory. It can either be a filename or a reference to an array containing a list of files that will be imported.</p>
</dd>
</dl>

<pre class="sh_perl">    Example: $gpg-&#62;import_keys( keys =&#62; [ qw( key.pub key.sec ) ] );</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="export_keys(_[params]_)"
>export_keys( [params] )</a></h2>

<p>Exports keys from the GnuPG keyrings. The method croaks if it encounters an error. Parameters :</p>

<dl>
<dt><a name="keys"
>keys</a></dt>

<dd>
<p>Optional argument that restricts the keys that will be exported. Can either be a user id or a reference to an array of userid that specifies the keys to be exported. If left unspecified, all keys will be exported.</p>

<dt><a name="secret"
>secret</a></dt>

<dd>
<p>If this argument is to true, the secret keys rather than the public ones will be exported.</p>

<dt><a name="all"
>all</a></dt>

<dd>
<p>If this argument is set to true, all keys (even those that aren&#39;t OpenPGP compliant) will be exported.</p>

<dt><a name="output"
>output</a></dt>

<dd>
<p>This argument specifies where the keys will be exported. Can be either a file name or a reference to a file handle. If not specified, the keys will be exported to stdout.</p>

<dt><a name="armor"
>armor</a></dt>

<dd>
<p>Set this parameter to true, if you want the exported keys to be ASCII armored.</p>
</dd>
</dl>

<pre class="sh_perl">    Example: $gpg-&#62;export_keys( armor =&#62; 1, output =&#62; &#34;keyring.pub&#34; );</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="encrypt(_[params]_)"
>encrypt( [params] )</a></h2>

<p>This method is used to encrypt a message, either using assymetric or symmetric cryptography. The methods croaks if an error is encountered. Parameters:</p>

<dl>
<dt><a name="plaintext"
>plaintext</a></dt>

<dd>
<p>This argument specifies what to encrypt. It can be either a filename or a reference to a file handle. If left unspecified, STDIN will be encrypted.</p>

<dt><a name="output"
>output</a></dt>

<dd>
<p>This optional argument specifies where the ciphertext will be output. It can be either a file name or a reference to a file handle. If left unspecified, the ciphertext will be sent to STDOUT.</p>

<dt><a name="armor"
>armor</a></dt>

<dd>
<p>If this parameter is set to true, the ciphertext will be ASCII armored.</p>

<dt><a name="symmetric"
>symmetric</a></dt>

<dd>
<p>If this parameter is set to true, symmetric cryptography will be used to encrypt the message. You will need to provide a <i>passphrase</i> parameter.</p>

<dt><a name="recipient"
>recipient</a></dt>

<dd>
<p>If not using symmetric cryptography, you will have to provide this parameter. It should contains the userid of the intended recipient of the message. It will be used to look up the key to use to encrypt the message.</p>

<dt><a name="sign"
>sign</a></dt>

<dd>
<p>If this parameter is set to true, the message will also be signed. You will probably have to use the <i>passphrase</i> parameter to unlock the private key used to sign message. This option is incompatible with the <i>symmetric</i> one.</p>

<dt><a name='local'></a><a name="local-user"
>local-user</a></dt>

<dd>
<p>This parameter is used to specified the private key that will be used to sign the message. If left unspecified, the default user will be used. This option only makes sense when using the <i>sign</i> option.</p>

<dt><a name="passphrase"
>passphrase</a></dt>

<dd>
<p>This parameter contains either the secret passphrase for the symmetric algorithm or the passphrase that should be used to decrypt the private key.</p>
</dd>
</dl>

<pre class="sh_perl">    Example: $gpg-&#62;encrypt( plaintext =&#62; file.txt, output =&#62; &#34;file.gpg&#34;,
                            sign =&#62; 1, passphrase =&#62; $secret
                            );</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="sign(_[params]_)"
>sign( [params] )</a></h2>

<p>This method is used create a signature for a file or stream of data. This method croaks on errors. Parameters :</p>

<dl>
<dt><a name="plaintext"
>plaintext</a></dt>

<dd>
<p>This argument specifies what to sign. It can be either a filename or a reference to a file handle. If left unspecified, the data read on STDIN will be signed.</p>

<dt><a name="output"
>output</a></dt>

<dd>
<p>This optional argument specifies where the signature will be output. It can be either a file name or a reference to a file handle. If left unspecified, the signature will be sent to STDOUT.</p>

<dt><a name="armor"
>armor</a></dt>

<dd>
<p>If this parameter is set to true, the signature will be ASCII armored.</p>

<dt><a name="passphrase"
>passphrase</a></dt>

<dd>
<p>This parameter contains the secret that should be used to decrypt the private key.</p>

<dt><a name='local'></a><a name="local-user"
>local-user</a></dt>

<dd>
<p>This parameter is used to specified the private key that will be used to make the signature . If left unspecified, the default user will be used.</p>

<dt><a name='detach'></a><a name="detach-sign"
>detach-sign</a></dt>

<dd>
<p>If set to true, a digest of the data will be signed rather than the whole file.</p>
</dd>
</dl>

<pre class="sh_perl">    Example: $gpg-&#62;sign( plaintext =&#62; &#34;file.txt&#34;, output =&#62; &#34;file.txt.asc&#34;,
                         armor =&#62; 1,
                         );</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="clearsign(_[params]_)"
>clearsign( [params] )</a></h2>

<p>This methods clearsign a message. The output will contains the original message with a signature appended. It takes the same parameters as the <b>sign</b> method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="verify(_[params]_)"
>verify( [params] )</a></h2>

<p>This method verifies a signature against the signed message. The methods croaks if the signature is invalid or an error is encountered. If the signature is valid, it returns an hash with the signature parameters. Here are the method&#39;s parameters :</p>

<dl>
<dt><a name="signature"
>signature</a></dt>

<dd>
<p>If the message and the signature are in the same file (i.e. a clearsigned message), this parameter can be either a file name or a reference to a file handle. If the signature doesn&#39;t follows the message, than it must be the name of the file that contains the signature.</p>

<dt><a name="file"
>file</a></dt>

<dd>
<p>This is a file name or a reference to an array of file names that contains the signed data.</p>
</dd>
</dl>

<p>When the signature is valid, here are the elements of the hash that is returned by the method :</p>

<dl>
<dt><a name="sigid"
>sigid</a></dt>

<dd>
<p>The signature id. This can be used to protect against replay attack.</p>

<dt><a name="date"
>date</a></dt>

<dd>
<p>The data at which the signature has been made.</p>

<dt><a name="timestamp"
>timestamp</a></dt>

<dd>
<p>The epoch timestamp of the signature.</p>

<dt><a name="keyid"
>keyid</a></dt>

<dd>
<p>The key id used to make the signature.</p>

<dt><a name="user"
>user</a></dt>

<dd>
<p>The userid of the signer.</p>

<dt><a name="fingerprint"
>fingerprint</a></dt>

<dd>
<p>The fingerprint of the signature.</p>

<dt><a name="trust"
>trust</a></dt>

<dd>
<p>The trust value of the public key of the signer. Those are values that can be imported in your namespace with the :trust tag. They are (TRUST_UNDEFINED, TRUST_NEVER, TRUST_MARGINAL, TRUST_FULLY, TRUST_ULTIMATE).</p>
</dd>
</dl>

<pre class="sh_perl">    Example : my $sig = $gpg-&#62;verify( signature =&#62; &#34;file.txt.asc&#34;,
                                      file =&#62; &#34;file.txt&#34; );</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="decrypt(_[params]_)"
>decrypt( [params] )</a></h2>

<p>This method decrypts an encrypted message. It croaks, if there is an error while decrypting the message. If the message was signed, this method also verifies the signature. If decryption is sucessful, the method either returns the valid signature parameters if present, or true. Method parameters :</p>

<dl>
<dt><a name="ciphertext"
>ciphertext</a></dt>

<dd>
<p>This optional parameter contains either the name of the file containing the ciphertext or a reference to a file handle containing the ciphertext. If not present, STDIN will be decrypted.</p>

<dt><a name="output"
>output</a></dt>

<dd>
<p>This optional parameter determines where the plaintext will be stored. It can be either a file name or a reference to a file handle. If left unspecified, the plaintext will be sent to STDOUT.</p>

<dt><a name="symmetric"
>symmetric</a></dt>

<dd>
<p>This should be set to true, if the message is encrypted using symmetric cryptography.</p>

<dt><a name="passphrase"
>passphrase</a></dt>

<dd>
<p>The passphrase that should be used to decrypt the message (in the case of a message encrypted using a symmetric cipher) or the secret that will unlock the private key that should be used to decrypt the message.</p>
</dd>
</dl>

<pre class="sh_perl">    Example: $gpg-&#62;decrypt( ciphertext =&#62; &#34;file.gpg&#34;, output =&#62; &#34;file.txt&#34; 
                            passphrase =&#62; $secret );</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Francis J. Lacoste &#60;francis.lacoste@Contre.COM&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 1999,2000 iNsu Innovations. Inc. Copyright (c) 2001 Francis J. Lacoste</p>

<p>This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>gpg(1) <a href="/perldoc?GnuPG%3A%3ATie" class="podlinkpod"
>GnuPG::Tie</a>(3)</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78067 Uploads, 24686 Distributions
105893 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sun Apr 22 02:23:48 2012 GMT (0.0854129791259766) @cpansearch1 -->
 </body>
</html>
