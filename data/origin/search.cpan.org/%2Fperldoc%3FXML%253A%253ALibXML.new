<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>XML::LibXML - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","XML-LibXML",3]);
    _gaq.push(["_setCustomVar",5,"Release","XML-LibXML-1.96",3]);
    _gaq.push(["_setCustomVar",3,"Module","XML::LibXML",3]);
    _gaq.push(["_setCustomVar",1,"Author","SHLOMIF",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?XML::LibXML">permalink</a></div>
  <a href="/~shlomif/">Shlomi Fish</a> &gt;
  <a href="/~shlomif/XML-LibXML-1.96/">XML-LibXML-1.96</a> &gt;
  XML::LibXML
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/072331b92b0e6e9d9bc31c3af8f8ccea?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/S/SH/SHLOMIF/XML-LibXML-1.96.tar.gz">XML-LibXML-1.96.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=XML%3A%3ALibXML;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~SHLOMIF/XML-LibXML-1.96/LibXML.pod">Annotate this POD
(4)
</a></p>
     <p style="text-align:right"><a href="https://bitbucket.org/shlomif/perl-xml-libxml">Website</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?XML%3A%3ASimple">XML::Simple</a><br>
<a href="/perldoc?XML%3A%3ATwig">XML::Twig</a><br>
<a href="/perldoc?XML%3A%3AParser">XML::Parser</a><br>
<a href="/perldoc?XML%3A%3AXPath">XML::XPath</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?XML%3A%3ADOM">XML::DOM</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?HTML%3A%3AParser">HTML::Parser</a><br>
<a href="/perldoc?XML%3A%3AXSLT">XML::XSLT</a><br>
<a href="/perldoc?LWP%3A%3ASimple">LWP::Simple</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=XML%3A%3ALibXML">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 5</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 12</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=XML-LibXML">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.96 &nbsp;
<span class="noprint">
  <a href="/src/SHLOMIF/XML-LibXML-1.96/LibXML.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#ENCODINGS_SUPPORT_IN_XML::LIBXML'>ENCODINGS SUPPORT IN XML::LIBXML</a>
  <li class='indexItem indexItem1'><a href='#THREAD_SUPPORT'>THREAD SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#VERSION_INFORMATION'>VERSION INFORMATION</a>
  <li class='indexItem indexItem1'><a href='#EXPORTS'>EXPORTS</a>
  <li class='indexItem indexItem1'><a href='#EXPORT_TAGS'>EXPORT TAGS</a>
  <li class='indexItem indexItem1'><a href='#RELATED_MODULES'>RELATED MODULES</a>
  <li class='indexItem indexItem1'><a href='#XML::LIBXML_AND_XML::GDOME'>XML::LIBXML AND XML::GDOME</a>
  <li class='indexItem indexItem1'><a href='#CONTACTS'>CONTACTS</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>XML::LibXML - Perl Binding for libxml2</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use XML::LibXML;
  my $dom = XML::LibXML-&#62;load_xml(string =&#62; &#60;&#60;&#39;EOT&#39;);
  &#60;some-xml/&#62;
  EOT

  $Version_String = XML::LibXML::LIBXML_DOTTED_VERSION;
  $Version_ID = XML::LibXML::LIBXML_VERSION;
  $DLL_Version = XML::LibXML::LIBXML_RUNTIME_VERSION;
  $libxmlnode = XML::LibXML-&#62;import_GDOME( $node, $deep );
  $gdomenode = XML::LibXML-&#62;export_GDOME( $node, $deep );</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is an interface to libxml2, providing XML and HTML parsers with DOM, SAX and XMLReader interfaces, a large subset of DOM Layer 3 interface and a XML::XPath-like interface to XPath API of libxml2. The module is split into several packages which are not described in this section; unless stated otherwise, you only need to <code>use XML::LibXML;</code> in your programs.</p>

<p>For further information, please check the following documentation:</p>

<dl>
<dt><a name='XML'></a><a name="XML::LibXML::Parser"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/Parser.pod" class="podlinkpod"
>XML::LibXML::Parser</a></a></dt>

<dd>
<p>Parsing XML files with XML::LibXML</p>

<dt><a name='XML'></a><a name="XML::LibXML::DOM"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/DOM.pod" class="podlinkpod"
>XML::LibXML::DOM</a></a></dt>

<dd>
<p>XML::LibXML Document Object Model (DOM) Implementation</p>

<dt><a name='XML'></a><a name="XML::LibXML::SAX"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/SAX.pod" class="podlinkpod"
>XML::LibXML::SAX</a></a></dt>

<dd>
<p>XML::LibXML direct SAX parser</p>

<dt><a name='XML'></a><a name="XML::LibXML::Reader"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/Reader.pod" class="podlinkpod"
>XML::LibXML::Reader</a></a></dt>

<dd>
<p>Reading XML with a pull-parser</p>

<dt><a name='XML'></a><a name="XML::LibXML::Dtd"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/Dtd.pod" class="podlinkpod"
>XML::LibXML::Dtd</a></a></dt>

<dd>
<p>XML::LibXML frontend for DTD validation</p>

<dt><a name='XML'></a><a name="XML::LibXML::RelaxNG"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/RelaxNG.pod" class="podlinkpod"
>XML::LibXML::RelaxNG</a></a></dt>

<dd>
<p>XML::LibXML frontend for RelaxNG schema validation</p>

<dt><a name='XML'></a><a name="XML::LibXML::Schema"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/Schema.pod" class="podlinkpod"
>XML::LibXML::Schema</a></a></dt>

<dd>
<p>XML::LibXML frontend for W3C Schema schema validation</p>

<dt><a name='XML'></a><a name="XML::LibXML::XPathContext"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/XPathContext.pod" class="podlinkpod"
>XML::LibXML::XPathContext</a></a></dt>

<dd>
<p>API for evaluating XPath expressions with enhanced support for the evaluation context</p>

<dt><a name='XML'></a><a name="XML::LibXML::InputCallback"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/InputCallback.pod" class="podlinkpod"
>XML::LibXML::InputCallback</a></a></dt>

<dd>
<p>Implementing custom URI Resolver and input callbacks</p>

<dt><a name='XML'></a><a name="XML::LibXML::Common"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/Common.pod" class="podlinkpod"
>XML::LibXML::Common</a></a></dt>

<dd>
<p>Common functions for XML::LibXML related Classes</p>
</dd>
</dl>

<p>The nodes in the Document Object Model (DOM) are represented by the following classes (most of which &#34;inherit&#34; from <a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/Node.pod" class="podlinkpod"
>XML::LibXML::Node</a>):</p>

<dl>
<dt><a name='XML'></a><a name="XML::LibXML::Document"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/Document.pod" class="podlinkpod"
>XML::LibXML::Document</a></a></dt>

<dd>
<p>XML::LibXML class for DOM document nodes</p>

<dt><a name='XML'></a><a name="XML::LibXML::Node"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/Node.pod" class="podlinkpod"
>XML::LibXML::Node</a></a></dt>

<dd>
<p>Abstract base class for XML::LibXML DOM nodes</p>

<dt><a name='XML'></a><a name="XML::LibXML::Element"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/Element.pod" class="podlinkpod"
>XML::LibXML::Element</a></a></dt>

<dd>
<p>XML::LibXML class for DOM element nodes</p>

<dt><a name='XML'></a><a name="XML::LibXML::Text"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/Text.pod" class="podlinkpod"
>XML::LibXML::Text</a></a></dt>

<dd>
<p>XML::LibXML class for DOM text nodes</p>

<dt><a name='XML'></a><a name="XML::LibXML::Comment"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/Comment.pod" class="podlinkpod"
>XML::LibXML::Comment</a></a></dt>

<dd>
<p>XML::LibXML class for comment DOM nodes</p>

<dt><a name='XML'></a><a name="XML::LibXML::CDATASection"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/CDATASection.pod" class="podlinkpod"
>XML::LibXML::CDATASection</a></a></dt>

<dd>
<p>XML::LibXML class for DOM CDATA sections</p>

<dt><a name='XML'></a><a name="XML::LibXML::Attr"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/Attr.pod" class="podlinkpod"
>XML::LibXML::Attr</a></a></dt>

<dd>
<p>XML::LibXML DOM attribute class</p>

<dt><a name='XML'></a><a name="XML::LibXML::DocumentFragment"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/DocumentFragment.pod" class="podlinkpod"
>XML::LibXML::DocumentFragment</a></a></dt>

<dd>
<p>XML::LibXML&#39;s DOM L2 Document Fragment implementation</p>

<dt><a name='XML'></a><a name="XML::LibXML::Namespace"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/Namespace.pod" class="podlinkpod"
>XML::LibXML::Namespace</a></a></dt>

<dd>
<p>XML::LibXML DOM namespace nodes</p>

<dt><a name='XML'></a><a name="XML::LibXML::PI"
><a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/PI.pod" class="podlinkpod"
>XML::LibXML::PI</a></a></dt>

<dd>
<p>XML::LibXML DOM processing instruction nodes</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ENCODINGS_SUPPORT_IN_XML::LIBXML"
>ENCODINGS SUPPORT IN XML::LIBXML <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Recall that since version 5.6.1, Perl distinguishes between character strings (internally encoded in UTF-8) and so called binary data and, accordingly, applies either character or byte semantics to them. A scalar representing a character string is distinguished from a byte string by special flag (UTF8). Please refer to <i>perlunicode</i> for details.</p>

<p>XML::LibXML&#39;s API is designed to deal with many encodings of XML documents completely transparently, so that the application using XML::LibXML can be completely ignorant about the encoding of the XML documents it works with. On the other hand, functions like <code>XML::LibXML::Document-&#62;setEncoding</code> give the user control over the document encoding.</p>

<p>To ensure the aforementioned transparency and uniformity, most functions of XML::LibXML that work with in-memory trees accept and return data as character strings (i.e. UTF-8 encoded with the UTF8 flag on) regardless of the original document encoding; however, the functions related to I/O operations (i.e. parsing and saving) operate with binary data (in the original document encoding) obeying the encoding declaration of the XML documents.</p>

<p>Below we summarize basic rules and principles regarding encoding:</p>

<ol>
<li>Do NOT apply any encoding-related PerlIO layers (<code>:utf8</code> or <code>:encoding(...)</code>) to file handles that are an input for the parses or an output for a serializer of (full) XML documents. This is because the conversion of the data to/from the internal character representation is provided by libxml2 itself which must be able to enforce the encoding specified by the <code>&#60;?xml version=&#34;1.0&#34; encoding=&#34;...&#34;?&#62;</code> declaration. Here is an example to follow:
<pre class="sh_perl">  use XML::LibXML;
  # load
  open my $fh, &#39;&#60;&#39;, &#39;file.xml&#39;;
  binmode $fh; # drop all PerlIO layers possibly created by a use open pragma
  $doc = XML::LibXML-&#62;load_xml(IO =&#62; $fh);

  # save
  open my $out, &#39;&#62;&#39;, &#39;out.xml&#39;;
  binmode $out; # as above
  $doc-&#62;toFH($out);
  # or
  print {$out} $doc-&#62;toString();</pre>
</li>

<li>All functions working with DOM accept and return character strings (UTF-8 encoded with UTF8 flag on). E.g.
<pre class="sh_perl">  my $doc = XML::LibXML::Document-&#62;new(&#39;1.0&#39;,$some_encoding);
  my $element = $doc-&#62;createElement($name);
  $element-&#62;appendText($text);
  $xml_fragment = $element-&#62;toString(); # returns a character string
  $xml_document = $doc-&#62;toString(); # returns a byte string</pre>

<p>where <code>$some_encoding</code> is the document encoding that will be used when saving the document, and <code>$name</code> and <code>$text</code> contain character strings (UTF-8 encoded with UTF8 flag on). Note that the method <code>toString</code> returns XML as a character string if applied to other node than the Document node and a byte string containing the appropriate</p>

<pre class="sh_perl">  &#60;?xml version=&#34;1.0&#34; encoding=&#34;...&#34;?&#62;</pre>

<p>declaration if applied to a <a href="/~shlomif/XML-LibXML-1.96/lib/XML/LibXML/Document.pod" class="podlinkpod"
>XML::LibXML::Document</a>.</p>
</li>

<li>DOM methods also accept binary strings in the original encoding of the document to which the node belongs (UTF-8 is assumed if the node is not attached to any document). Exploiting this feature is NOT RECOMMENDED since it is considered bad practice.
<pre class="sh_perl">  my $doc = XML::LibXML::Document-&#62;new(&#39;1.0&#39;,&#39;iso-8859-2&#39;);
  my $text = $doc-&#62;createTextNode($some_latin2_encoded_byte_string);
  # WORKS, BUT NOT RECOMMENDED!</pre>
</li>
</ol>

<p><i>NOTE:</i> libxml2 support for many encodings is based on the iconv library. The actual list of supported encodings may vary from platform to platform. To test if your platform works correctly with your language encoding, build a simple document in the particular encoding and try to parse it with XML::LibXML to see if the parser produces any errors. Occasional crashes were reported on rare platforms that ship with a broken version of iconv.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="THREAD_SUPPORT"
>THREAD SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>XML::LibXML since 1.67 partially supports Perl threads in Perl &#62;= 5.8.8. XML::LibXML can be used with threads in two ways:</p>

<p>By default, all XML::LibXML classes use CLONE_SKIP class method to prevent Perl from copying XML::LibXML::* objects when a new thread is spawn. In this mode, all XML::LibXML::* objects are thread specific. This is the safest way to work with XML::LibXML in threads.</p>

<p>Alternatively, one may use</p>

<pre class="sh_perl">  use threads;
  use XML::LibXML qw(:threads_shared);</pre>

<p>to indicate, that all XML::LibXML node and parser objects should be shared between the main thread and any thread spawn from there. For example, in</p>

<pre class="sh_perl">  my $doc = XML::LibXML-&#62;load_xml(location =&#62; $filename);
  my $thr = threads-&#62;new(sub{
    # code working with $doc
    1;
  });
  $thr-&#62;join;</pre>

<p>the variable <code>$doc</code> refers to the exact same XML::LibXML::Document in the spawned thread as in the main thread.</p>

<p>Without using mutex locks, parallel threads may read the same document (i.e. any node that belongs to the document), parse files, and modify different documents.</p>

<p>However, if there is a chance that some of the threads will attempt to modify a document (or even create new nodes based on that document, e.g. with <code>$doc-&#62;createElement</code>) that other threads may be reading at the same time, the user is responsible for creating a mutex lock and using it in <i>both</i> in the thread that modifies and the thread that reads:</p>

<pre class="sh_perl">  my $doc = XML::LibXML-&#62;load_xml(location =&#62; $filename);
  my $mutex : shared;
  my $thr = threads-&#62;new(sub{
     lock $mutex;
     my $el = $doc-&#62;createElement(&#39;foo&#39;);
     # ...
    1;
  });
  {
    lock $mutex;
    my $root = $doc-&#62;documentElement;
    say $root-&#62;name;
  }
  $thr-&#62;join;</pre>

<p>Note that libxml2 uses dictionaries to store short strings and these dictionaries are kept on a document node. Without mutex locks, it could happen in the previous example that the thread modifies the dictionary while other threads attempt to read from it, which could easily lead to a crash.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION_INFORMATION"
>VERSION INFORMATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Sometimes it is useful to figure out, for which version XML::LibXML was compiled for. In most cases this is for debugging or to check if a given installation meets all functionality for the package. The functions XML::LibXML::LIBXML_DOTTED_VERSION and XML::LibXML::LIBXML_VERSION provide this version information. Both functions simply pass through the values of the similar named macros of libxml2. Similarly, XML::LibXML::LIBXML_RUNTIME_VERSION returns the version of the (usually dynamically) linked libxml2.</p>

<dl>
<dt><a name='XML'></a><a name="XML::LibXML::LIBXML_DOTTED_VERSION"
>XML::LibXML::LIBXML_DOTTED_VERSION</a></dt>

<dd>
<pre class="sh_perl">  $Version_String = XML::LibXML::LIBXML_DOTTED_VERSION;</pre>

<p>Returns the version string of the libxml2 version XML::LibXML was compiled for. This will be &#34;2.6.2&#34; for &#34;libxml2 2.6.2&#34;.</p>

<dt><a name='XML'></a><a name="XML::LibXML::LIBXML_VERSION"
>XML::LibXML::LIBXML_VERSION</a></dt>

<dd>
<pre class="sh_perl">  $Version_ID = XML::LibXML::LIBXML_VERSION;</pre>

<p>Returns the version id of the libxml2 version XML::LibXML was compiled for. This will be &#34;20602&#34; for &#34;libxml2 2.6.2&#34;. Don&#39;t mix this version id with $XML::LibXML::VERSION. The latter contains the version of XML::LibXML itself while the first contains the version of libxml2 XML::LibXML was compiled for.</p>

<dt><a name='XML'></a><a name="XML::LibXML::LIBXML_RUNTIME_VERSION"
>XML::LibXML::LIBXML_RUNTIME_VERSION</a></dt>

<dd>
<pre class="sh_perl">  $DLL_Version = XML::LibXML::LIBXML_RUNTIME_VERSION;</pre>

<p>Returns a version string of the libxml2 which is (usually dynamically) linked by XML::LibXML. This will be &#34;20602&#34; for libxml2 released as &#34;2.6.2&#34; and something like &#34;20602-CVS2032&#34; for a CVS build of libxml2.</p>

<p>XML::LibXML issues a warning if the version of libxml2 dynamically linked to it is less than the version of libxml2 which it was compiled against.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORTS"
>EXPORTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>By default the module exports all constants and functions listed in the :all tag, described below.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORT_TAGS"
>EXPORT TAGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='all'></a><a name=":all"
><code>:all</code></a></dt>

<dd>
<p>Includes the tags <code>:libxml</code>, <code>:encoding</code>, and <code>:ns</code> described below.</p>

<dt><a name='libxml'></a><a name=":libxml"
><code>:libxml</code></a></dt>

<dd>
<p>Exports integer constants for DOM node types.</p>

<pre class="sh_perl">  XML_ELEMENT_NODE            =&#62; 1
  XML_ATTRIBUTE_NODE          =&#62; 2
  XML_TEXT_NODE               =&#62; 3
  XML_CDATA_SECTION_NODE      =&#62; 4
  XML_ENTITY_REF_NODE         =&#62; 5
  XML_ENTITY_NODE             =&#62; 6
  XML_PI_NODE                 =&#62; 7
  XML_COMMENT_NODE            =&#62; 8
  XML_DOCUMENT_NODE           =&#62; 9
  XML_DOCUMENT_TYPE_NODE      =&#62; 10
  XML_DOCUMENT_FRAG_NODE      =&#62; 11
  XML_NOTATION_NODE           =&#62; 12
  XML_HTML_DOCUMENT_NODE      =&#62; 13
  XML_DTD_NODE                =&#62; 14
  XML_ELEMENT_DECL            =&#62; 15
  XML_ATTRIBUTE_DECL          =&#62; 16
  XML_ENTITY_DECL             =&#62; 17
  XML_NAMESPACE_DECL          =&#62; 18
  XML_XINCLUDE_START          =&#62; 19
  XML_XINCLUDE_END            =&#62; 20</pre>

<dt><a name='encoding'></a><a name=":encoding"
><code>:encoding</code></a></dt>

<dd>
<p>Exports two encoding conversion functions from XML::LibXML::Common.</p>

<pre class="sh_perl">  encodeToUTF8()
  decodeFromUTF8()</pre>

<dt><a name='ns'></a><a name=":ns"
><code>:ns</code></a></dt>

<dd>
<p>Exports two convenience constants: the implicit namespace of the reserved <code>xml:</code> prefix, and the implicit namespace for the reserved <code>xmlns:</code> prefix.</p>

<pre class="sh_perl">  XML_XML_NS    =&#62; &#39;<a href="http://www.w3.org/XML/1998/namespace" class="podlinkurl"
>http://www.w3.org/XML/1998/namespace</a>&#39;
  XML_XMLNS_NS  =&#62; &#39;<a href="http://www.w3.org/2000/xmlns/" class="podlinkurl"
>http://www.w3.org/2000/xmlns/</a>&#39;</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="RELATED_MODULES"
>RELATED MODULES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The modules described in this section are not part of the XML::LibXML package itself. As they support some additional features, they are mentioned here.</p>

<dl>
<dt><a name='XML'></a><a name="XML::LibXSLT"
><a href="/perldoc?XML%3A%3ALibXSLT" class="podlinkpod"
>XML::LibXSLT</a></a></dt>

<dd>
<p>XSLT 1.0 Processor using libxslt and XML::LibXML</p>

<dt><a name='XML'></a><a name="XML::LibXML::Iterator"
><a href="/perldoc?XML%3A%3ALibXML%3A%3AIterator" class="podlinkpod"
>XML::LibXML::Iterator</a></a></dt>

<dd>
<p>XML::LibXML Implementation of the DOM Traversal Specification</p>

<dt><a name='XML'></a><a name="XML::CompactTree::XS"
><a href="/perldoc?XML%3A%3ACompactTree%3A%3AXS" class="podlinkpod"
>XML::CompactTree::XS</a></a></dt>

<dd>
<p>Uses XML::LibXML::Reader to very efficiently to parse XML document or element into native Perl data structures, which are less flexible but significantly faster to process then DOM.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="XML::LIBXML_AND_XML::GDOME"
>XML::LIBXML AND XML::GDOME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Note: <i>THE FUNCTIONS DESCRIBED HERE ARE STILL EXPERIMENTAL</i></p>

<p>Although both modules make use of libxml2&#39;s XML capabilities, the DOM implementation of both modules are not compatible. But still it is possible to exchange nodes from one DOM to the other. The concept of this exchange is pretty similar to the function cloneNode(): The particular node is copied on the low-level to the opposite DOM implementation.</p>

<p>Since the DOM implementations cannot coexist within one document, one is forced to copy each node that should be used. Because you are always keeping two nodes this may cause quite an impact on a machines memory usage.</p>

<p>XML::LibXML provides two functions to export or import GDOME nodes: import_GDOME() and export_GDOME(). Both function have two parameters: the node and a flag for recursive import. The flag works as in cloneNode().</p>

<p>The two functions allow to export and import XML::GDOME nodes explicitly, however, XML::LibXML allows also the transparent import of XML::GDOME nodes in functions such as appendChild(), insertAfter() and so on. While native nodes are automatically adopted in most functions XML::GDOME nodes are always cloned in advance. Thus if the original node is modified after the operation, the node in the XML::LibXML document will not have this information.</p>

<dl>
<dt><a name="import_GDOME"
>import_GDOME</a></dt>

<dd>
<pre class="sh_perl">  $libxmlnode = XML::LibXML-&#62;import_GDOME( $node, $deep );</pre>

<p>This clones an XML::GDOME node to an XML::LibXML node explicitly.</p>

<dt><a name="export_GDOME"
>export_GDOME</a></dt>

<dd>
<pre class="sh_perl">  $gdomenode = XML::LibXML-&#62;export_GDOME( $node, $deep );</pre>

<p>Allows to clone an XML::LibXML node into an XML::GDOME node.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONTACTS"
>CONTACTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>For bug reports, please use the CPAN request tracker on <a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=XML-LibXML" class="podlinkurl"
>http://rt.cpan.org/NoAuth/Bugs.html?Dist=XML-LibXML</a></p>

<p>For suggestions etc., and other issues related to XML::LibXML you may use the perl XML mailing list (<code>perl-xml@listserv.ActiveState.com</code>), where most XML-related Perl modules are discussed. In case of problems you should check the archives of that list first. Many problems are already discussed there. You can find the list&#39;s archives and subscription options at <a href="http://aspn.activestate.com/ASPN/Mail/Browse/Threaded/perl-xml" class="podlinkurl"
>http://aspn.activestate.com/ASPN/Mail/Browse/Threaded/perl-xml</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Matt Sergeant, Christian Glahn, Petr Pajas</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>1.96</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>2001-2007, AxKit.com Ltd.</p>

<p>2002-2006, Christian Glahn.</p>

<p>2006-2009, Petr Pajas.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78280 Uploads, 24725 Distributions
106010 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 04:46:07 2012 GMT (0.086400032043457) @cpansearch1 -->
 </body>
</html>
