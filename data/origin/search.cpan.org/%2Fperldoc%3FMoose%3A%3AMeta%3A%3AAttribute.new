<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Moose::Meta::Attribute - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Moose",3]);
    _gaq.push(["_setCustomVar",5,"Release","Moose-2.0403",3]);
    _gaq.push(["_setCustomVar",3,"Module","Moose::Meta::Attribute",3]);
    _gaq.push(["_setCustomVar",1,"Author","DOY",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Moose::Meta::Attribute">permalink</a></div>
  <a href="/~doy/">Jesse Luehrs</a> &gt;
  <a href="/~doy/Moose-2.0403/">Moose-2.0403</a> &gt;
  Moose::Meta::Attribute
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/88766de7a058697d3d0335b8d384fd2a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DO/DOY/Moose-2.0403.tar.gz">Moose-2.0403.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Moose%3A%3AMeta%3A%3AAttribute;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DOY/Moose-2.0403/lib/Moose/Meta/Attribute.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 13</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 27</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=Moose">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.0403 &nbsp;
<span class="noprint">
  <a href="/src/DOY/Moose-2.0403/lib/Moose/Meta/Attribute.pm">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~doy/Moose/lib/Moose/Meta/Attribute.pm">Moose-2.0502-TRIAL</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#INHERITANCE'>INHERITANCE</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Creation'>Creation</a>
    <li class='indexItem indexItem2'><a href='#Value_management'>Value management</a>
    <li class='indexItem indexItem2'><a href='#Attribute_Accessor_generation'>Attribute Accessor generation</a>
    <li class='indexItem indexItem2'><a href='#Additional_Moose_features'>Additional Moose features</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose::Meta::Attribute - The Moose attribute metaclass</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>version 2.0403</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This class is a subclass of <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm" class="podlinkpod"
>Class::MOP::Attribute</a> that provides additional Moose-specific functionality.</p>

<p>To really understand this class,
you will need to start with the <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm" class="podlinkpod"
>Class::MOP::Attribute</a> documentation.
This class can be understood as a set of additional features on top of the basic feature provided by that parent class.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INHERITANCE"
>INHERITANCE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>Moose::Meta::Attribute</code> is a subclass of <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm" class="podlinkpod"
>Class::MOP::Attribute</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Many of the documented below override methods in <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm" class="podlinkpod"
>Class::MOP::Attribute</a> and add Moose specific features.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Creation"
>Creation</a></h2>

<dl>
<dt><a name='Moose'></a><a name="Moose::Meta::Attribute-&#62;new(%options)"
><b>Moose::Meta::Attribute-&#62;new(%options)</b></a></dt>

<dd>
<p>This method overrides the <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm" class="podlinkpod"
>Class::MOP::Attribute</a> constructor.</p>

<p>Many of the options below are described in more detail in the <a href="/~doy/Moose-2.0403/lib/Moose/Manual/Attributes.pod" class="podlinkpod"
>Moose::Manual::Attributes</a> document.</p>

<p>It adds the following options to the constructor:</p>

<ul>
<li>is =&#62; &#39;ro&#39;,
&#39;rw&#39;,
&#39;bare&#39;
<p>This provides a shorthand for specifying the <code>reader</code>,
<code>writer</code>,
or <code>accessor</code> names.
If the attribute is read-only (&#39;ro&#39;) then it will have a <code>reader</code> method with the same attribute as the name.</p>

<p>If it is read-write (&#39;rw&#39;) then it will have an <code>accessor</code> method with the same name.
If you provide an explicit <code>writer</code> for a read-write attribute,
then you will have a <code>reader</code> with the same name as the attribute,
and a <code>writer</code> with the name you provided.</p>

<p>Use &#39;bare&#39; when you are deliberately not installing any methods (accessor,
reader,
etc.) associated with this attribute; otherwise,
Moose will issue a deprecation warning when this attribute is added to a metaclass.</p>
</li>

<li>isa =&#62; $type
<p>This option accepts a type.
The type can be a string,
which should be a type name.
If the type name is unknown,
it is assumed to be a class name.</p>

<p>This option can also accept a <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint</a> object.</p>

<p>If you <i>also</i> provide a <code>does</code> option,
then your <code>isa</code> option must be a class name,
and that class must do the role specified with <code>does</code>.</p>
</li>

<li>does =&#62; $role
<p>This is short-hand for saying that the attribute&#39;s type must be an object which does the named role.</p>
</li>

<li>coerce =&#62; $bool
<p>This option is only valid for objects with a type constraint (<code>isa</code>) that defined a coercion.
If this is true,
then coercions will be applied whenever this attribute is set.</p>

<p>You can make both this and the <code>weak_ref</code> option true.</p>
</li>

<li>trigger =&#62; $sub
<p>This option accepts a subroutine reference,
which will be called after the attribute is set.</p>
</li>

<li>required =&#62; $bool
<p>An attribute which is required must be provided to the constructor.
An attribute which is required can also have a <code>default</code> or <code>builder</code>,
which will satisfy its required-ness.</p>

<p>A required attribute must have a <code>default</code>,
<code>builder</code> or a non-<code>undef</code> <code>init_arg</code></p>
</li>

<li>lazy =&#62; $bool
<p>A lazy attribute must have a <code>default</code> or <code>builder</code>.
When an attribute is lazy,
the default value will not be calculated until the attribute is read.</p>
</li>

<li>weak_ref =&#62; $bool
<p>If this is true,
the attribute&#39;s value will be stored as a weak reference.</p>
</li>

<li>auto_deref =&#62; $bool
<p>If this is true,
then the reader will dereference the value when it is called.
The attribute must have a type constraint which defines the attribute as an array or hash reference.</p>
</li>

<li>lazy_build =&#62; $bool
<p>Setting this to true makes the attribute lazy and provides a number of default methods.</p>

<pre class="sh_perl">  has &#39;size&#39; =&#62; (
      is         =&#62; &#39;ro&#39;,
      lazy_build =&#62; 1,
  );</pre>

<p>is equivalent to this:</p>

<pre class="sh_perl">  has &#39;size&#39; =&#62; (
      is        =&#62; &#39;ro&#39;,
      lazy      =&#62; 1,
      builder   =&#62; &#39;_build_size&#39;,
      clearer   =&#62; &#39;clear_size&#39;,
      predicate =&#62; &#39;has_size&#39;,
  );</pre>

<p>If your attribute name starts with an underscore (<code>_</code>), then the clearer and predicate will as well:</p>

<pre class="sh_perl">  has &#39;_size&#39; =&#62; (
      is         =&#62; &#39;ro&#39;,
      lazy_build =&#62; 1,
  );</pre>

<p>becomes:</p>

<pre class="sh_perl">  has &#39;_size&#39; =&#62; (
      is        =&#62; &#39;ro&#39;,
      lazy      =&#62; 1,
      builder   =&#62; &#39;_build__size&#39;,
      clearer   =&#62; &#39;_clear_size&#39;,
      predicate =&#62; &#39;_has_size&#39;,
  );</pre>

<p>Note the doubled underscore in the builder name. Internally, Moose simply prepends the attribute name with &#34;_build_&#34; to come up with the builder name.</p>
</li>

<li>documentation
<p>An arbitrary string that can be retrieved later by calling <code>$attr-&#62;documentation</code>.</p>
</li>
</ul>

<dt><a name='attr'></a><a name="$attr-&#62;clone(%options)"
><b>$attr-&#62;clone(%options)</b></a></dt>

<dd>
<p>This creates a new attribute based on attribute being cloned. You must supply a <code>name</code> option to provide a new name for the attribute.</p>

<p>The <code>%options</code> can only specify options handled by <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm" class="podlinkpod"
>Class::MOP::Attribute</a>.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Value_management"
>Value management</a></h2>

<dl>
<dt><a name='attr'></a><a name="$attr-&#62;initialize_instance_slot($meta_instance,_$instance,_$params)"
><b>$attr-&#62;initialize_instance_slot($meta_instance, $instance, $params)</b></a></dt>

<dd>
<p>This method is used internally to initialize the attribute&#39;s slot in the object <code>$instance</code>.</p>

<p>This overrides the <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm" class="podlinkpod"
>Class::MOP::Attribute</a> method to handle lazy attributes, weak references, and type constraints.</p>

<dt><a name="get_value"
><b>get_value</b></a></dt>

<dd>
<dt><a name="set_value"
><b>set_value</b></a></dt>

<dd>
<pre class="sh_perl">  eval { $point-&#62;meta-&#62;get_attribute(&#39;x&#39;)-&#62;set_value($point, &#39;forty-two&#39;) };
  if($@) {
    print &#34;Oops: $@\n&#34;;
  }</pre>

<p><i>Attribute (x) does not pass the type constraint (Int) with &#39;forty-two&#39;</i></p>

<p>Before setting the value, a check is made on the type constraint of the attribute, if it has one, to see if the value passes it. If the value fails to pass, the set operation dies with a <a href="#throw_error" class="podlinkpod"
>&#34;throw_error&#34;</a>.</p>

<p>Any coercion to convert values is done before checking the type constraint.</p>

<p>To check a value against a type constraint before setting it, fetch the attribute instance using <a href="/~doy/Moose-2.0403/lib/Class/MOP/Class.pm#find_attribute_by_name" class="podlinkpod"
>&#34;find_attribute_by_name&#34; in Class::MOP::Class</a>, fetch the type_constraint from the attribute using <a href="/~doy/Moose-2.0403/lib/Moose/Meta/Attribute.pm#type_constraint" class="podlinkpod"
>&#34;type_constraint&#34; in Moose::Meta::Attribute</a> and call <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint.pm#check" class="podlinkpod"
>&#34;check&#34; in Moose::Meta::TypeConstraint</a>. See <a href="/~doy/Moose-2.0403/lib/Moose/Cookbook/Basics/Recipe4.pod" class="podlinkpod"
>Moose::Cookbook::Basics::Recipe4</a> for an example.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Attribute_Accessor_generation"
>Attribute Accessor generation</a></h2>

<dl>
<dt><a name='attr'></a><a name="$attr-&#62;install_accessors"
><b>$attr-&#62;install_accessors</b></a></dt>

<dd>
<p>This method overrides the parent to also install delegation methods.</p>

<p>If, after installing all methods, the attribute object has no associated methods, it throws an error unless <code>is =&#62; &#39;bare&#39;</code> was passed to the attribute constructor. (Trying to add an attribute that has no associated methods is almost always an error.)</p>

<dt><a name='attr'></a><a name="$attr-&#62;remove_accessors"
><b>$attr-&#62;remove_accessors</b></a></dt>

<dd>
<p>This method overrides the parent to also remove delegation methods.</p>

<dt><a name='attr'></a><a name="$attr-&#62;inline_set($instance_var,_$value_var)"
><b>$attr-&#62;inline_set($instance_var, $value_var)</b></a></dt>

<dd>
<p>This method return a code snippet suitable for inlining the relevant operation. It expect strings containing variable names to be used in the inlining, like <code>&#39;$self&#39;</code> or <code>&#39;$_[1]&#39;</code>.</p>

<dt><a name='attr'></a><a name="$attr-&#62;install_delegation"
><b>$attr-&#62;install_delegation</b></a></dt>

<dd>
<p>This method adds its delegation methods to the attribute&#39;s associated class, if it has any to add.</p>

<dt><a name='attr'></a><a name="$attr-&#62;remove_delegation"
><b>$attr-&#62;remove_delegation</b></a></dt>

<dd>
<p>This method remove its delegation methods from the attribute&#39;s associated class.</p>

<dt><a name='attr'></a><a name="$attr-&#62;accessor_metaclass"
><b>$attr-&#62;accessor_metaclass</b></a></dt>

<dd>
<p>Returns the accessor metaclass name, which defaults to <a href="/~doy/Moose-2.0403/lib/Moose/Meta/Method/Accessor.pm" class="podlinkpod"
>Moose::Meta::Method::Accessor</a>.</p>

<dt><a name='attr'></a><a name="$attr-&#62;delegation_metaclass"
><b>$attr-&#62;delegation_metaclass</b></a></dt>

<dd>
<p>Returns the delegation metaclass name, which defaults to <a href="/~doy/Moose-2.0403/lib/Moose/Meta/Method/Delegation.pm" class="podlinkpod"
>Moose::Meta::Method::Delegation</a>.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Additional_Moose_features"
>Additional Moose features</a></h2>

<p>These methods are not found in the superclass. They support features provided by Moose.</p>

<dl>
<dt><a name='attr'></a><a name="$attr-&#62;does($role)"
><b>$attr-&#62;does($role)</b></a></dt>

<dd>
<p>This indicates whether the <i>attribute itself</i> does the given role. The role can be given as a full class name, or as a resolvable trait name.</p>

<p>Note that this checks the attribute itself, not its type constraint, so it is checking the attribute&#39;s metaclass and any traits applied to the attribute.</p>

<dt><a name='Moose'></a><a name="Moose::Meta::Class-&#62;interpolate_class_and_new($name,_%options)"
><b>Moose::Meta::Class-&#62;interpolate_class_and_new($name, %options)</b></a></dt>

<dd>
<p>This is an alternate constructor that handles the <code>metaclass</code> and <code>traits</code> options.</p>

<p>Effectively, this method is a factory that finds or creates the appropriate class for the given <code>metaclass</code> and/or <code>traits</code>.</p>

<p>Once it has the appropriate class, it will call <code>$class-&#62;new($name, %options)</code> on that class.</p>

<dt><a name='attr'></a><a name="$attr-&#62;clone_and_inherit_options(%options)"
><b>$attr-&#62;clone_and_inherit_options(%options)</b></a></dt>

<dd>
<p>This method supports the <code>has &#39;+foo&#39;</code> feature. It does various bits of processing on the supplied <code>%options</code> before ultimately calling the <code>clone</code> method.</p>

<p>One of its main tasks is to make sure that the <code>%options</code> provided does not include the options returned by the <code>illegal_options_for_inheritance</code> method.</p>

<dt><a name='attr'></a><a name="$attr-&#62;illegal_options_for_inheritance"
><b>$attr-&#62;illegal_options_for_inheritance</b></a></dt>

<dd>
<p>This returns a blacklist of options that can not be overridden in a subclass&#39;s attribute definition.</p>

<p>This exists to allow a custom metaclass to change or add to the list of options which can not be changed.</p>

<dt><a name='attr'></a><a name="$attr-&#62;type_constraint"
><b>$attr-&#62;type_constraint</b></a></dt>

<dd>
<p>Returns the <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint</a> object for this attribute, if it has one.</p>

<dt><a name='attr'></a><a name="$attr-&#62;has_type_constraint"
><b>$attr-&#62;has_type_constraint</b></a></dt>

<dd>
<p>Returns true if this attribute has a type constraint.</p>

<dt><a name='attr'></a><a name="$attr-&#62;verify_against_type_constraint($value)"
><b>$attr-&#62;verify_against_type_constraint($value)</b></a></dt>

<dd>
<p>Given a value, this method returns true if the value is valid for the attribute&#39;s type constraint. If the value is not valid, it throws an error.</p>

<dt><a name='attr'></a><a name="$attr-&#62;handles"
><b>$attr-&#62;handles</b></a></dt>

<dd>
<p>This returns the value of the <code>handles</code> option passed to the constructor.</p>

<dt><a name='attr'></a><a name="$attr-&#62;has_handles"
><b>$attr-&#62;has_handles</b></a></dt>

<dd>
<p>Returns true if this attribute performs delegation.</p>

<dt><a name='attr'></a><a name="$attr-&#62;is_weak_ref"
><b>$attr-&#62;is_weak_ref</b></a></dt>

<dd>
<p>Returns true if this attribute stores its value as a weak reference.</p>

<dt><a name='attr'></a><a name="$attr-&#62;is_required"
><b>$attr-&#62;is_required</b></a></dt>

<dd>
<p>Returns true if this attribute is required to have a value.</p>

<dt><a name='attr'></a><a name="$attr-&#62;is_lazy"
><b>$attr-&#62;is_lazy</b></a></dt>

<dd>
<p>Returns true if this attribute is lazy.</p>

<dt><a name='attr'></a><a name="$attr-&#62;is_lazy_build"
><b>$attr-&#62;is_lazy_build</b></a></dt>

<dd>
<p>Returns true if the <code>lazy_build</code> option was true when passed to the constructor.</p>

<dt><a name='attr'></a><a name="$attr-&#62;should_coerce"
><b>$attr-&#62;should_coerce</b></a></dt>

<dd>
<p>Returns true if the <code>coerce</code> option passed to the constructor was true.</p>

<dt><a name='attr'></a><a name="$attr-&#62;should_auto_deref"
><b>$attr-&#62;should_auto_deref</b></a></dt>

<dd>
<p>Returns true if the <code>auto_deref</code> option passed to the constructor was true.</p>

<dt><a name='attr'></a><a name="$attr-&#62;trigger"
><b>$attr-&#62;trigger</b></a></dt>

<dd>
<p>This is the subroutine reference that was in the <code>trigger</code> option passed to the constructor, if any.</p>

<dt><a name='attr'></a><a name="$attr-&#62;has_trigger"
><b>$attr-&#62;has_trigger</b></a></dt>

<dd>
<p>Returns true if this attribute has a trigger set.</p>

<dt><a name='attr'></a><a name="$attr-&#62;documentation"
><b>$attr-&#62;documentation</b></a></dt>

<dd>
<p>Returns the value that was in the <code>documentation</code> option passed to the constructor, if any.</p>

<dt><a name='attr'></a><a name="$attr-&#62;has_documentation"
><b>$attr-&#62;has_documentation</b></a></dt>

<dd>
<p>Returns true if this attribute has any documentation.</p>

<dt><a name='attr'></a><a name="$attr-&#62;applied_traits"
><b>$attr-&#62;applied_traits</b></a></dt>

<dd>
<p>This returns an array reference of all the traits which were applied to this attribute. If none were applied, this returns <code>undef</code>.</p>

<dt><a name='attr'></a><a name="$attr-&#62;has_applied_traits"
><b>$attr-&#62;has_applied_traits</b></a></dt>

<dd>
<p>Returns true if this attribute has any traits applied.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>See <a href="/~doy/Moose-2.0403/lib/Moose.pm#BUGS" class="podlinkpod"
>&#34;BUGS&#34; in Moose</a> for details on reporting bugs.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose is maintained by the Moose Cabal, along with the help of many contributors. See <a href="/~doy/Moose-2.0403/lib/Moose.pm#CABAL" class="podlinkpod"
>&#34;CABAL&#34; in Moose</a> and <a href="/~doy/Moose-2.0403/lib/Moose.pm#CONTRIBUTORS" class="podlinkpod"
>&#34;CONTRIBUTORS&#34; in Moose</a> for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This software is copyright (c) 2012 by Infinity Interactive, Inc..</p>

<p>This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78179 Uploads, 24710 Distributions
106004 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Wed Apr 25 07:52:40 2012 GMT (0.107593059539795) @cpansearch1 -->
 </body>
</html>
