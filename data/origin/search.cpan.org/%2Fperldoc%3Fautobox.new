<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>autobox - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","autobox",3]);
    _gaq.push(["_setCustomVar",5,"Release","autobox-2.75",3]);
    _gaq.push(["_setCustomVar",3,"Module","autobox",3]);
    _gaq.push(["_setCustomVar",1,"Author","CHOCOLATE",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?autobox">permalink</a></div>
  <a href="/~chocolate/">chocolateboy</a> &gt;
  <a href="/~chocolate/autobox-2.75/">autobox-2.75</a> &gt;
  autobox
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/53901b090fa84a630206b5df96f222a1?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/C/CH/CHOCOLATE/autobox-2.75.tar.gz">autobox-2.75.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=autobox;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~CHOCOLATE/autobox-2.75/lib/autobox.pod">Annotate this POD
(1)
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=autobox">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.75 &nbsp;
<span class="noprint">
  <a href="/src/CHOCOLATE/autobox-2.75/lib/autobox.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#OPTIONS'>OPTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#DEFAULT'>DEFAULT</a>
    <li class='indexItem indexItem2'><a href='#UNDEF'>UNDEF</a>
    <li class='indexItem indexItem2'><a href='#NUMBER,_SCALAR_and_UNIVERSAL'>NUMBER, SCALAR and UNIVERSAL</a>
    <li class='indexItem indexItem2'><a href='#DEBUG'>DEBUG</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#import'>import</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXPORTS'>EXPORTS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#autobox_class'>autobox_class</a>
    <li class='indexItem indexItem2'><a href='#type'>type</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CAVEATS'>CAVEATS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Performance'>Performance</a>
    <li class='indexItem indexItem2'><a href='#Gotchas'>Gotchas</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#Precedence'>Precedence</a>
      <li class='indexItem indexItem3'><a href='#print_BLOCK'>print BLOCK</a>
      <li class='indexItem indexItem3'><a href='#eval_EXPR'>eval EXPR</a>
    </ul>
  </ul>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>autobox - call methods on native types</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use autobox;

    # integers

        my $range = 10-&#62;to(1); # [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ]

    # floats

        my $error = 3.1415927-&#62;minus(22/7)-&#62;abs();

    # strings

        my @list = &#39;SELECT * FROM foo&#39;-&#62;list();
        my $greeting = &#34;Hello, world!&#34;-&#62;upper(); # &#34;HELLO, WORLD!&#34;

        $greeting-&#62;for_each(\&#38;character_handler);

    # arrays and array refs

        my $schwartzian = @_-&#62;map(...)-&#62;sort(...)-&#62;map(...);
        my $hash = [ &#39;SELECT * FROM foo WHERE id IN (?, ?)&#39;, 1, 2 ]-&#62;hash();

    # hashes and hash refs

        { alpha =&#62; &#39;beta&#39;, gamma =&#62; &#39;vlissides&#39; }-&#62;for_each(...);
        %hash-&#62;keys();

    # code refs

        my $plus_five = (\&#38;add)-&#62;curry()-&#62;(5);
        my $minus_three = sub { $_[0] - $_[1] }-&#62;reverse-&#62;curry-&#62;(3);

    # can, isa, VERSION, import and unimport can be accessed via autobox_class

        42-&#62;autobox_class-&#62;isa(&#39;MyNumber&#39;)
        say []-&#62;autobox_class-&#62;VERSION</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The autobox pragma allows methods to be called on integers, floats, strings, arrays, hashes, and code references in exactly the same manner as blessed references.</p>

<p>The autoboxing is transparent: boxed values are not blessed into their (user-defined) implementation class (unless the method elects to bestow such a blessing) - they simply use its methods as though they are.</p>

<p>The classes (packages) into which the native types are boxed are fully configurable. By default, a method invoked on a non-object is assumed to be defined in a class whose name corresponds to the <code>ref()</code> type of that value - or SCALAR if the value is a non-reference.</p>

<p>This mapping can be overridden by passing key/value pairs to the <code>use autobox</code> statement, in which the keys represent native types, and the values their associated classes.</p>

<p>As with regular objects, autoboxed values are passed as the first argument of the specified method. Consequently, given a vanilla <code>use autobox</code>:</p>

<pre class="sh_perl">    &#34;Hello, world!&#34;-&#62;upper()</pre>

<p>is invoked as:</p>

<pre class="sh_perl">    SCALAR::upper(&#34;hello, world!&#34;)</pre>

<p>while:</p>

<pre class="sh_perl">    [ 1 .. 10 ]-&#62;for_each(sub { ... })</pre>

<p>resolves to:</p>

<pre class="sh_perl">    ARRAY::for_each([ 1 .. 10 ], sub { ... })</pre>

<p>Values beginning with the array <code>@</code> and hash <code>%</code> sigils are passed by reference, i.e. under the default bindings:</p>

<pre class="sh_perl">    @array-&#62;join(&#39;, &#39;)
    @{ ... }-&#62;length()
    %hash-&#62;keys()
    %$hash-&#62;values()</pre>

<p>are equivalent to:</p>

<pre class="sh_perl">    ARRAY::join(\@array, &#39;, &#39;)
    ARRAY::length(\@{ ... })
    HASH::keys(\%hash)
    HASH::values(\%$hash)</pre>

<p>Multiple <code>use autobox</code> statements can appear in the same scope. These are merged both &#34;horizontally&#34; (i.e. multiple classes can be associated with a particular type) and &#34;vertically&#34; (i.e. multiple classes can be associated with multiple types).</p>

<p>Thus:</p>

<pre class="sh_perl">    use autobox SCALAR =&#62; &#39;Foo&#39;;
    use autobox SCALAR =&#62; &#39;Bar&#39;;</pre>

<p>- associates SCALAR types with a synthetic class whose <code>@ISA</code> includes both <code>Foo</code> and <code>Bar</code> (in that order).</p>

<p>Likewise:</p>

<pre class="sh_perl">    use autobox SCALAR =&#62; &#39;Foo&#39;;
    use autobox SCALAR =&#62; &#39;Bar&#39;;
    use autobox ARRAY  =&#62; &#39;Baz&#39;;</pre>

<p>and</p>

<pre class="sh_perl">    use autobox SCALAR =&#62; [ &#39;Foo&#39;, &#39;Bar&#39; ];
    use autobox ARRAY  =&#62; &#39;Baz&#39;;</pre>

<p>- bind SCALAR types to the <code>Foo</code> and <code>Bar</code> classes and ARRAY types to <code>Baz</code>.</p>

<p><code>autobox</code> is lexically scoped, and bindings for an outer scope can be extended or countermanded in a nested scope:</p>

<pre class="sh_perl">    {
        use autobox; # default bindings: autobox all native types
        ...

        {
            # appends &#39;MyScalar&#39; to the @ISA associated with SCALAR types
            use autobox SCALAR =&#62; &#39;MyScalar&#39;;
            ...
        }

        # back to the default (no MyScalar)
        ...
    }</pre>

<p>Autoboxing can be turned off entirely by using the <code>no</code> syntax:</p>

<pre class="sh_perl">    {
        use autobox;
        ...
        no autobox;
        ...
    }</pre>

<p>- or can be selectively disabled by passing arguments to the <code>no autobox</code> statement:</p>

<pre class="sh_perl">    use autobox; # default bindings

    no autobox qw(SCALAR);

    []-&#62;foo(); # OK: ARRAY::foo([])

    &#34;Hello, world!&#34;-&#62;bar(); # runtime error</pre>

<p>Autoboxing is not performed for barewords i.e.</p>

<pre class="sh_perl">    my $foo = Foo-&#62;new();</pre>

<p>and:</p>

<pre class="sh_perl">    my $foo = new Foo;</pre>

<p>behave as expected.</p>

<p>Methods are called on native types by means of the <a href="/perldoc?perlop#The_Arrow_Operator" class="podlinkpod"
>arrow operator</a>. As with regular objects, the right hand side of the operator can either be a bare method name or a variable containing a method name or subroutine reference. Thus the following are all valid:</p>

<pre class="sh_perl">    sub method1 { ... }
    my $method2 = &#39;some_method&#39;;
    my $method3 = sub { ... };
    my $method4 = \&#38;some_method;

    &#34; ... &#34;-&#62;method1();
    [ ... ]-&#62;$method2();
    { ... }-&#62;$method3();
    sub { ... }-&#62;$method4();</pre>

<p>A native type is only asociated with a class if the type =&#62; class mapping is supplied in the <code>use autobox</code> statement. Thus the following will not work:</p>

<pre class="sh_perl">    use autobox SCALAR =&#62; &#39;MyScalar&#39;;

    @array-&#62;some_array_method();</pre>

<p>- as no class is specified for the ARRAY type. Note: the result of calling a method on a native type that is not associated with a class is the usual runtime error message:</p>

<pre class="sh_perl">    Can&#39;t call method &#34;some_array_method&#34; on unblessed reference at ...</pre>

<p>As a convenience, there is one exception to this rule. If <code>use autobox</code> is invoked with no arguments (ignoring the DEBUG option) the four main native types are associated with classes of the same name.</p>

<p>Thus:</p>

<pre class="sh_perl">    use autobox;</pre>

<p>- is equivalent to:</p>

<pre class="sh_perl">    use autobox
        SCALAR =&#62; &#39;SCALAR&#39;,
        ARRAY  =&#62; &#39;ARRAY&#39;,
        HASH   =&#62; &#39;HASH&#39;,
        CODE   =&#62; &#39;CODE&#39;;</pre>

<p>This facilitates one-liners and prototypes:</p>

<pre class="sh_perl">    use autobox;

    sub SCALAR::split { [ split &#39;&#39;, $_[0] ] }
    sub ARRAY::length { scalar @{$_[0]} }

    print &#34;Hello, world!&#34;-&#62;split-&#62;length();</pre>

<p>However, using these default bindings is not recommended as there&#39;s no guarantee that another piece of code won&#39;t trample over the same namespace/methods.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OPTIONS"
>OPTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A mapping from native types to their user-defined classes can be specified by passing a list of key/value pairs to the <code>use autobox</code> statement.</p>

<p>The following example shows the range of valid arguments:</p>

<pre class="sh_perl">    use autobox
        SCALAR    =&#62; &#39;MyScalar&#39;                     # class name
        ARRAY     =&#62; &#39;MyNamespace::&#39;,               # class prefix (ending in &#39;::&#39;)
        HASH      =&#62; [ &#39;MyHash&#39;, &#39;MyNamespace::&#39; ], # one or more class names and/or prefixes
        CODE      =&#62; ...,                           # any of the 3 value types above
        INTEGER   =&#62; ...,                           # any of the 3 value types above
        FLOAT     =&#62; ...,                           # any of the 3 value types above
        NUMBER    =&#62; ...,                           # any of the 3 value types above
        STRING    =&#62; ...,                           # any of the 3 value types above
        UNDEF     =&#62; ...,                           # any of the 3 value types above
        UNIVERSAL =&#62; ...,                           # any of the 3 value types above
        DEFAULT   =&#62; ...,                           # any of the 3 value types above
        DEBUG     =&#62; ...;                           # boolean or coderef</pre>

<p>The INTEGER, FLOAT, NUMBER, STRING, SCALAR, ARRAY, HASH, CODE, UNDEF, DEFAULT and UNIVERSAL options can take three different types of value:</p>

<ul>
<li>A class name e.g.
<pre class="sh_perl">    use autobox INTEGER =&#62; &#39;MyInt&#39;;</pre>

<p>This binds the specified native type to the specified class. All methods invoked on literals or values of type <code>key</code> will be dispatched as methods of the class specified in the corresponding <code>value</code>.</p>
</li>

<li>A namespace: this is a class prefix (up to and including the final &#39;::&#39;) to which the specified type name (INTEGER, FLOAT, STRING &#38;c.) will be appended:
<p>Thus:</p>

<pre class="sh_perl">    use autobox ARRAY =&#62; &#39;Prelude::&#39;;</pre>

<p>is equivalent to:</p>

<pre class="sh_perl">    use autobox ARRAY =&#62; &#39;Prelude::ARRAY&#39;;</pre>
</li>

<li>A reference to an array of class names and/or namespaces. This associates multiple classes with the specified type.</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DEFAULT"
>DEFAULT</a></h2>

<p>The <code>DEFAULT</code> option specifies bindings for any of the four default types (SCALAR, ARRAY, HASH and CODE) not supplied in the <code>use autobox</code> statement. As with the other options, the <code>value</code> corresponding to the <code>DEFAULT</code> <code>key</code> can be a class name, a namespace, or a reference to an array containing one or more class names and/or namespaces.</p>

<p>Thus:</p>

<pre class="sh_perl">    use autobox
        STRING  =&#62; &#39;MyString&#39;,
        DEFAULT =&#62; &#39;MyDefault&#39;;</pre>

<p>is equivalent to:</p>

<pre class="sh_perl">    use autobox
        STRING  =&#62; &#39;MyString&#39;,
        SCALAR  =&#62; &#39;MyDefault&#39;,
        ARRAY   =&#62; &#39;MyDefault&#39;,
        HASH    =&#62; &#39;MyDefault&#39;,
        CODE    =&#62; &#39;MyDefault&#39;;</pre>

<p>Which in turn is equivalent to:</p>

<pre class="sh_perl">    use autobox
        INTEGER =&#62; &#39;MyDefault&#39;,
        FLOAT   =&#62; &#39;MyDefault&#39;,
        STRING  =&#62; [ &#39;MyString&#39;, &#39;MyDefault&#39; ],
        ARRAY   =&#62; &#39;MyDefault&#39;,
        HASH    =&#62; &#39;MyDefault&#39;,
        CODE    =&#62; &#39;MyDefault&#39;;</pre>

<p>Namespaces in DEFAULT values have the default type name appended, which, in the case of defaulted SCALAR types, is SCALAR rather than INTEGER, FLOAT &#38;c.</p>

<p>Thus:</p>

<pre class="sh_perl">    use autobox
        ARRAY   =&#62; &#39;MyArray&#39;,
        HASH    =&#62; &#39;MyHash&#39;,
        CODE    =&#62; &#39;MyCode&#39;,
        DEFAULT =&#62; &#39;MyNamespace::&#39;;</pre>

<p>is equivalent to:</p>

<pre class="sh_perl">    use autobox
        INTEGER =&#62; &#39;MyNamespace::SCALAR&#39;,
        FLOAT   =&#62; &#39;MyNamespace::SCALAR&#39;,
        STRING  =&#62; &#39;MyNamespace::SCALAR&#39;,
        ARRAY   =&#62; &#39;MyArray&#39;,
        HASH    =&#62; &#39;MyArray&#39;,
        CODE    =&#62; &#39;MyCode&#39;;</pre>

<p>Any of the four default types can be exempted from defaulting to the DEFAULT value by supplying a value of undef:</p>

<pre class="sh_perl">    use autobox
        HASH    =&#62; undef,
        DEFAULT =&#62; &#39;MyDefault&#39;;

    42-&#62;foo # ok: MyDefault::foo
    []-&#62;bar # ok: MyDefault::bar

    %INC-&#62;baz # not ok: runtime error</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="UNDEF"
>UNDEF</a></h2>

<p>The pseudotype, UNDEF, can be used to autobox undefined values. These are not autoboxed by default.</p>

<p>This doesn&#39;t work:</p>

<pre class="sh_perl">    use autobox;

    undef-&#62;foo() # runtime error</pre>

<p>This works:</p>

<pre class="sh_perl">    use autobox UNDEF =&#62; &#39;MyUndef&#39;;

    undef-&#62;foo(); # ok</pre>

<p>So does this:</p>

<pre class="sh_perl">    use autobox UNDEF =&#62; &#39;MyNamespace::&#39;;

    undef-&#62;foo(); # ok</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="NUMBER,_SCALAR_and_UNIVERSAL"
>NUMBER, SCALAR and UNIVERSAL</a></h2>

<p>The virtual types NUMBER, SCALAR and UNIVERSAL function as macros or shortcuts which create bindings for their subtypes. The type hierarchy is as follows:</p>

<pre class="sh_perl">  UNIVERSAL -+
             |
             +- SCALAR -+
             |          |
             |          +- NUMBER -+
             |          |          |
             |          |          +- INTEGER
             |          |          |
             |          |          +- FLOAT
             |          |
             |          +- STRING
             |
             +- ARRAY
             |
             +- HASH
             |
             +- CODE</pre>

<p>Thus:</p>

<pre class="sh_perl">    use autobox NUMBER =&#62; &#39;MyNumber&#39;;</pre>

<p>is equivalent to:</p>

<pre class="sh_perl">    use autobox
        INTEGER =&#62; &#39;MyNumber&#39;,
        FLOAT   =&#62; &#39;MyNumber&#39;;</pre>

<p>And:</p>

<pre class="sh_perl">    use autobox SCALAR =&#62; &#39;MyScalar&#39;;</pre>

<p>is equivalent to:</p>

<pre class="sh_perl">    use autobox
        INTEGER =&#62; &#39;MyScalar&#39;,
        FLOAT   =&#62; &#39;MyScalar&#39;,
        STRING  =&#62; &#39;MyScalar&#39;;</pre>

<p>Virtual types can also be passed to <code>unimport</code> via the <code>no autobox</code> syntax. This disables autoboxing for the corresponding subtypes e.g.</p>

<pre class="sh_perl">    no autobox qw(NUMBER);</pre>

<p>is equivalent to:</p>

<pre class="sh_perl">    no autobox qw(INTEGER FLOAT);</pre>

<p>Virtual type bindings can be mixed with ordinary bindings to provide fine-grained control over inheritance and delegation. For instance:</p>

<pre class="sh_perl">    use autobox
        INTEGER =&#62; &#39;MyInteger&#39;,
        NUMBER  =&#62; &#39;MyNumber&#39;,
        SCALAR  =&#62; &#39;MyScalar&#39;;</pre>

<p>would result in the following bindings:</p>

<pre class="sh_perl">    42-&#62;foo             -&#62; [ MyInteger, MyNumber, MyScalar ]
    3.1415927-&#62;bar      -&#62; [ MyNumber, MyScalar ]
    &#34;Hello, world!-&#62;baz -&#62; [ MyScalar ]</pre>

<p>Note that DEFAULT bindings take precedence over virtual type bindings i.e.</p>

<pre class="sh_perl">    use autobox
        UNIVERSAL =&#62; &#39;MyUniversal&#39;,
        DEFAULT   =&#62; &#39;MyDefault&#39;; # default SCALAR, ARRAY, HASH and CODE before UNIVERSAL</pre>

<p>is equivalent to:</p>

<pre class="sh_perl">  use autobox
      INTEGER =&#62; [ &#39;MyDefault&#39;, &#39;MyUniversal&#39; ],
      FLOAT   =&#62; [ &#39;MyDefault&#39;, &#39;MyUniversal&#39; ], # ... &#38;c.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DEBUG"
>DEBUG</a></h2>

<p><code>DEBUG</code> exposes the current bindings for the scope in which <code>use autobox</code> is called by means of a callback, or a static debugging function.</p>

<p>This allows the computed bindings to be seen in &#34;longhand&#34;.</p>

<p>The option is ignored if the value corresponding to the <code>DEBUG</code> key is false.</p>

<p>If the value is a CODE ref, then this sub is called with a reference to the hash containing the computed bindings for the current scope.</p>

<p>Finally, if <code>DEBUG</code> is true but not a CODE ref, the bindings are dumped to STDERR.</p>

<p>Thus:</p>

<pre class="sh_perl">    use autobox DEBUG =&#62; 1, ...</pre>

<p>or</p>

<pre class="sh_perl">    use autobox DEBUG =&#62; sub { ... }, ...</pre>

<p>or</p>

<pre class="sh_perl">    sub my_callback ($) {
        my $hashref = shift;
        ...
    }

    use autobox DEBUG =&#62; \&#38;my_callback, ...</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="import"
>import</a></h2>

<p>On its own, <code>autobox</code> doesn&#39;t implement any methods that can be called on native types. However, its static method, <code>import</code>, can be used to implement <code>autobox</code> extensions i.e. lexically scoped modules that provide <code>autobox</code> bindings for one or more native types without requiring calling code to <code>use autobox</code>.</p>

<p>This is done by subclassing <code>autobox</code> and overriding <code>import</code>. This allows extensions to effectively translate <code>use MyModule</code> into a bespoke <code>use autobox</code> call. e.g.:</p>

<pre class="sh_perl">    package String::Trim;

    use base qw(autobox);

    sub import {
        my $class = shift;
        $class-&#62;SUPER::import(STRING =&#62; &#39;String::Trim::Scalar&#39;);
    }

    package String::Trim::Scalar;

    sub trim {
        my $string = shift;
        $string =~ s/^\s+//;
        $string =~ s/\s+$//;
        $string;
    }

    1;</pre>

<p>Note that <code>trim</code> is defined in an auxiliary class rather than in <code>String::Trim</code> itself to prevent <code>String::Trim</code>&#39;s own methods (i.e. the methods it inherits from <code>autobox</code>) being exposed to SCALAR types.</p>

<p>This module can now be used without a <code>use autobox</code> statement to enable the <code>trim</code> method in the current lexical scope. e.g.:</p>

<pre class="sh_perl">    #!/usr/bin/env perl

    use String::Trim;

    print &#34;  Hello, world!  &#34;-&#62;trim();</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORTS"
>EXPORTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="autobox_class"
>autobox_class</a></h2>

<p><code>autobox</code> makes a single method available to autoboxed types: <code>autobox_class</code>. This can be used to call <code>isa</code>, <code>can</code>, <code>VERSION</code>, <code>import</code> and <code>unimport</code>. e.g.</p>

<pre class="sh_perl">    if (42-&#62;autobox_class-&#62;isa(&#39;SCALAR&#39;)) ...
    if (sub { ... }-&#62;autobox_class-&#62;can(&#39;curry&#39;)) ...</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="type"
>type</a></h2>

<p><code>autobox</code> includes an additional module, <code>autobox::universal</code>, which exports a single subroutine, <code>type</code>.</p>

<p>This sub returns the type of its argument within <code>autobox</code> (which is essentially longhand for the type names used within perl). This value is used by <code>autobox</code> to associate a method invocant with its designated classes. e.g.</p>

<pre class="sh_perl">    use autobox::universal qw(type);

    type(&#34;Hello, world!&#34;) # STRING
    type(42)              # INTEGER
    type([])              # ARRAY
    type(sub { })         # CODE</pre>

<p><code>autobox::universal</code> is loaded automatically by <code>autobox</code>, and, as its name suggests, can be used to install a universal method (i.e. a method for all <code>autobox</code> types) e.g.</p>

<pre class="sh_perl">    use autobox UNIVERSAL =&#62; &#39;autobox::universal&#39;;

    42-&#62;type        # INTEGER
    3.1415927-&#62;type # FLOAT
    %ENV-&#62;type      # HASH</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CAVEATS"
>CAVEATS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Performance"
>Performance</a></h2>

<p>Autoboxing comes at a price. Calling</p>

<pre class="sh_perl">    &#34;Hello, world!&#34;-&#62;length()</pre>

<p>is slightly slower than the equivalent method call on a string-like object, and significantly slower than</p>

<pre class="sh_perl">    length(&#34;Hello, world!&#34;)</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Gotchas"
>Gotchas</a></h2>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Precedence"
>Precedence</a></h3>

<p>Due to Perl&#39;s precedence rules, some autoboxed literals may need to be parenthesized:</p>

<p>For instance, while this works:</p>

<pre class="sh_perl">    my $curried = sub { ... }-&#62;curry();</pre>

<p>this doesn&#39;t:</p>

<pre class="sh_perl">    my $curried = \&#38;foo-&#62;curry();</pre>

<p>The solution is to wrap the reference in parentheses:</p>

<pre class="sh_perl">    my $curried = (\&#38;foo)-&#62;curry();</pre>

<p>The same applies for signed integer and float literals:</p>

<pre class="sh_perl">    # this works
    my $range = 10-&#62;to(1);

    # this doesn&#39;t work
    my $range = -10-&#62;to(10);

    # this works
    my $range = (-10)-&#62;to(10);</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="print_BLOCK"
>print BLOCK</a></h3>

<p>Perl&#39;s special-casing for the <code>print BLOCK ...</code> syntax (see <a href="/perldoc?perlsub" class="podlinkpod"
>perlsub</a>) means that <code>print { expression() } ...</code> (where the curly brackets denote an anonymous HASH ref) may require some further disambiguation:</p>

<pre class="sh_perl">    # this works (
    print { foo =&#62; &#39;bar&#39; }-&#62;foo();

    # and this
    print { &#39;foo&#39;, &#39;bar&#39; }-&#62;foo();

    # and even this
    print { &#39;foo&#39;, &#39;bar&#39;, @_ }-&#62;foo();

    # but this doesn&#39;t
    print { @_ }-&#62;foo() ? 1 : 0</pre>

<p>In the latter case, the solution is to supply something other than a HASH ref literal as the first argument to <code>print()</code>:</p>

<pre class="sh_perl">    # e.g.
    print STDOUT { @_ }-&#62;foo() ? 1 : 0;

    # or
    my $hashref = { @_ };
    print $hashref-&#62;foo() ? 1 : 0;

    # or
    print &#39;&#39;, { @_ }-&#62;foo() ? 1 : 0;

    # or
    print &#39;&#39; . { @_ }-&#62;foo() ? 1 : 0;

    # or even
    { @_ }-&#62;print_if_foo(1, 0);</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="eval_EXPR"
>eval EXPR</a></h3>

<p>Like most pragmas, autobox performs operations at compile time, and, as a result, runtime string <code>eval</code>s are not executed within its scope i.e. this doesn&#39;t work:</p>

<pre class="sh_perl">    use autobox;

    eval &#34;42-&#62;foo&#34;;</pre>

<p>The workaround is to use autobox within the <code>eval</code> e.g.</p>

<pre class="sh_perl">    eval &#60;&#60;&#39;EOS&#39;;
        use autobox;
        42-&#62;foo();
    EOS</pre>

<p>Note that the <code>eval BLOCK</code> form works as expected:</p>

<pre class="sh_perl">    use autobox;

    eval { 42-&#62;foo() }; # OK</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>2.75</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li><a href="/perldoc?autobox%3A%3ACore" class="podlinkpod"
>autobox::Core</a></li>

<li><a href="/perldoc?Moose%3A%3AAutobox" class="podlinkpod"
>Moose::Autobox</a></li>

<li><a href="/perldoc?perl5i" class="podlinkpod"
>perl5i</a></li>

<li><a href="/perldoc?Scalar%3A%3AProperties" class="podlinkpod"
>Scalar::Properties</a></li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>chocolateboy &#60;chocolate@cpan.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2003-2011, chocolateboy.</p>

<p>This module is free software. It may be used, redistributed and/or modified under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78234 Uploads, 24724 Distributions
106030 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Thu Apr 26 22:54:57 2012 GMT (0.170747995376587) @cpansearch1 -->
 </body>
</html>
