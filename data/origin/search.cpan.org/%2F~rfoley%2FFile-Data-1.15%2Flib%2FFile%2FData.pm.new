<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>File::Data - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","File-Data",3]);
    _gaq.push(["_setCustomVar",5,"Release","File-Data-1.15",3]);
    _gaq.push(["_setCustomVar",3,"Module","File::Data",3]);
    _gaq.push(["_setCustomVar",1,"Author","RFOLEY",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?File::Data">permalink</a></div>
  <a href="/~rfoley/">Richard Foley</a> &gt;
  <a href="/~rfoley/File-Data-1.15/">File-Data-1.15</a> &gt;
  File::Data
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/b91c91e15fdd777ca3f0b5ee77b03c58?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/R/RF/RFOLEY/File-Data-1.15.tar.gz">File-Data-1.15.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=File%3A%3AData;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~RFOLEY/File-Data-1.15/lib/File/Data.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?DBD%3A%3ACSV">DBD::CSV</a><br>
<a href="/perldoc?DBD%3A%3AAnyData">DBD::AnyData</a><br>
<a href="/perldoc?HTTP%3A%3ADaemon">HTTP::Daemon</a><br>
<a href="/perldoc?Tie%3A%3AFile">Tie::File</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=File%3A%3AData">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 2</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=File-Data">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.15 &nbsp;
<span class="noprint">
  <a href="/src/RFOLEY/File-Data-1.15/lib/File/Data.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#IMPORTANT'>IMPORTANT</a>
  <li class='indexItem indexItem1'><a href='#EXPLANATION'>EXPLANATION</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <li class='indexItem indexItem1'><a href='#VARIABLES'>VARIABLES</a>
  <li class='indexItem indexItem1'><a href='#SPECIAL'>SPECIAL</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>File::Data - interface to file data</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Wraps all the accessing of a file into a convenient set of calls for reading and writing data,
including a simple regex interface.</p>

<p>Note that the file needs to exist prior to using this module!</p>

<p>See <a href="/perldoc?new()" class="podlinkpod"
>new()</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<blockquote>
<pre class="sh_perl">        use strict;

        use File::Data;

        my $o_dat = File::Data-&#62;new(&#39;./t/example&#39;);

        $o_dat-&#62;write(&#34;complete file contents\n&#34;);

        $o_dat-&#62;prepend(&#34;first line\n&#34;); # line 0

        $o_dat-&#62;append(&#34;original second (last) line\n&#34;);

        $o_dat-&#62;insert(2, &#34;new second line\n&#34;); # inc. zero!

        $o_dat-&#62;replace(&#39;line&#39;, &#39;LINE&#39;);

        print $o_dat-&#62;READ;</pre>

<p>Or, perhaps more seriously :-}</p>

<pre class="sh_perl">        my $o_sgm = File::Data-&#62;new(&#39;./sgmlfile&#39;);

        print &#34;new SGML data: &#34;.$o_sgm-&#62;REPLACE(
                &#39;\&#60;\s*((?i)tag)\s*\&#62;\s*((?s).*)\s*\&#60;\s*((?i)\s*\/\s*tag)\s*\&#62;&#39;, 
                qq|&#60;tag&#62;key=&#34;val&#34;&#60;/tag&#62;|,               
        ) if $o_sgm;</pre>

<p>See <a href="/perldoc?METHODS" class="podlinkpod"
>METHODS</a> and <a href="/perldoc?EXAMPLES" class="podlinkpod"
>EXAMPLES</a>.</p>
</blockquote>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="IMPORTANT"
>IMPORTANT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>lowercase method calls return the object itself, so you can chain calls.</p>

<pre class="sh_perl">        my $o_obj = $o_dat-&#62;read; # ! &#60;= object !</pre>

<p>UPPERCASE method calls return the data relevant to the operation.</p>

<pre class="sh_perl">        my @data  = $o_dat-&#62;READ; # ! &#60;= data   !</pre>

<p>While this may occasionally be frustrating, using the <b>principle of least surprise</b>, it is at least consistent.</p>

<p>See <a href="/perldoc?do" class="podlinkpod"
>do</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPLANATION"
>EXPLANATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<blockquote>
<p>The idea is to standardise accessing of files for repetitive and straight forward tasks, and remove the repeated and therefore error prone file access I have seen in many sites, where varying, (with equivalently varying success), methods are used to achieve essentially the same result - a simple search and replace and/or a regex match.</p>

<p>Approaches to opening and working with files vary so much, where one person may wish to know if a file exists, another wishes to know whether the target is a file, or if it is readable, or writable and so on. Sometimes, in production code even (horror), file&#39;s are opened without any checks of whether the open was succesful. Then there&#39;s a loop through each line to find the first or many patterns to read and/or replace. With a failure, normally the only message is &#39;permission denied&#39;, is that read or write access, does the file even exist? etc.</p>

<p>This module attempts to provide a plain/generic interface to accessing a file&#39;s data. This will not suit every situation, but I have included some examples which will hopefully demonstrate that it may be used in situations where people would normally go through varying and inconsistent, (and therefore error-prone), procedures - to get at the same data.</p>

<p>Theoretically you can mix and match your read and writes so long as you don&#39;t open read-only.</p>

<pre class="sh_perl">        my $o_dat  = File::Data-&#62;new($file);

        my $i_snrd = $o_dat-&#62;append($append)-&#62;REPLACE($search, $replace);

        print $o_dat-&#62;READ;</pre>

<p>One last thing - I&#39;m sure this could be made more efficient, and I&#39;d be receptive to any suggestions to that effect. Note though that the intention has been to create a simple and consistent interface, rather than a complicated one.</p>
</blockquote>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name="new"
>new</a></dt>

<dd>
<p>Create a new File::Data object (default read-write).</p>

<pre class="sh_perl">        my $o_rw = File::Data-&#62;new($filename); # read-write

        my $o_ro = File::Data-&#62;new($filename, &#39;ro&#39;); # read-only</pre>

<p>Each file should have it&#39;s own discrete object.</p>

<p>Note that if you open a file read-only and then attempt to write to it, that will be regarded as an error, even if you change the permissions in the meantime.</p>

<p>Further: The file <b>must</b> exist before succesful use of this method is possible. This is <b>not</b> a replacement for modules which create and delete files, this is purely designed as an interface to the <b>data</b> of existing files. A <b>create</b> function is a future possibility.</p>

<p>Look in <a href="/perldoc?EXAMPLES" class="podlinkpod"
>EXAMPLES</a> for a more complete explanation of possible arguments to the <b>new()</b> method</p>

<dt><a name="read"
>read</a></dt>

<dd>
<p>Read all data from file</p>

<pre class="sh_perl">        $o_dat = $o_dat-&#62;read; # !

        my @data = $o_dat-&#62;READ;</pre>

<dt><a name="_internal"
>_internal</a></dt>

<dd>
<p>read</p>

<pre class="sh_perl">        does this...</pre>

<dt><a name="write"
>write</a></dt>

<dd>
<p>Write data to file</p>

<pre class="sh_perl">        my $o_dat = $o_dat-&#62;WRITE; # !

        my @written = $o_dat-&#62;write;</pre>

<dt><a name="prepend"
>prepend</a></dt>

<dd>
<p>Prepend to file</p>

<pre class="sh_perl">        my $o_dat = $o_dat-&#62;prepen(\@lines); # !

        my @prepended = $o_dat-&#62;prepend(\@lines);</pre>

<dt><a name="insert"
>insert</a></dt>

<dd>
<p>Insert data at line number, starting from &#39;0&#39;</p>

<pre class="sh_perl">        my $o_dat = $o_dat-&#62;insert($i_lineno, \@lines); # !

        my @inserted = $o_dat-&#62;INSERT($i_lineno, \@lines);</pre>

<dt><a name="append"
>append</a></dt>

<dd>
<p>Append to file</p>

<pre class="sh_perl">        my $o_dat = $o_dat-&#62;append(\@lines); # !

        my @appended = $o_dat-&#62;APPEND(\@lines);</pre>

<dt><a name="search"
>search</a></dt>

<dd>
<p>Retrieve data out of a file, simple list of all matches found are returned.</p>

<p>Note - you must use capturing parentheses for this to work!</p>

<pre class="sh_perl">        my $o_dat = $o_dat-&#62;search(&#39;/^(.*\@.*)$/&#39;); # !

        my @addrs = $o_dat-&#62;SEARCH(&#39;/^(.*\@.*)$/&#39;);

        my @names = $o_dat-&#62;SEARCH(&#39;/^(?:[^:]:){4}([^:]+):/&#39;);</pre>

<dt><a name="replace"
>replace</a></dt>

<dd>
<p>Replace data in a &#39;search and replace&#39; manner, returns the final data.</p>

<pre class="sh_perl">        my $o_dat = $o_dat-&#62;replace($search, $replace); # !

        my @data = $o_dat-&#62;REPLACE($search, $replace);

        my @data = $o_dat-&#62;REPLACE(
                q|\&#60;a href=([&#39;&#34;])([^$1]+)?$1| =&#62; q|&#39;my.sales.com&#39;|,
        );</pre>

<p>This is <b>simple</b>, in that you can do almost anything in the <b>search</b> side, but the <b>replace</b> side is a bit more restricted, as we can&#39;t effect the replacement modifiers on the fly.</p>

<p>If you really need this, perhaps <b>(?{})</b> can help?</p>

<dt><a name="xreturn"
>xreturn</a></dt>

<dd>
<p>Returns the product of the given (or last) <b>do()</b>, undef on failure.</p>

<pre class="sh_perl">    my $o_dat = $o_dat-&#62;prepend($A)-&#62;append($b)-&#62;return(&#39;prepend&#39;); # !

    my @prepended = $o_dat-&#62;prepend($A)-&#62;append($b)-&#62;RETURN(&#39;prepend&#39;);

    my @appended  = $o_dat-&#62;prepend($A)-&#62;append($b)-&#62;RETURN; # like read()</pre>

<dt><a name="create"
>create</a></dt>

<dd>
<p>placeholder - unsupported</p>

<dt><a name="delete"
>delete</a></dt>

<dd>
<p>placeholder - unsupported</p>

<dt><a name="close"
>close</a></dt>

<dd>
<p>Close the file</p>

<pre class="sh_perl">        my $i_closed = $o_dat-&#62;close; # 1|0</pre>

<dt><a name="info"
>info</a></dt>

<dd>
<p>placeholder - unsupported</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VARIABLES"
>VARIABLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Various variables may be set affecting the behaviour of the module.</p>

<dl>
<dt><a name='File'></a><a name="$File::Data::DEBUG"
>$File::Data::DEBUG</a></dt>

<dd>
<p>Set to 0 (default) or 1 for debugging information to be printed on STDOUT.</p>

<pre class="sh_perl">        $File::Data::DEBUG = 1;</pre>

<p>Alternatively set to a regex of any of the prime methods to debug them individually.</p>

<pre class="sh_perl">        $File::Data::DEBUG = &#39;(ap|pre)pend&#39;;</pre>

<dt><a name='File'></a><a name="$File::Data::FATAL"
>$File::Data::FATAL</a></dt>

<dd>
<p>Will die if there is any failure in accessing the file, or reading the data.</p>

<p>Default = 0 (don&#39;t die - just warn);</p>

<pre class="sh_perl">        $File::Data::FATAL = 1; # die</pre>

<dt><a name='File'></a><a name="$File::Data::REFERENCE"
>$File::Data::REFERENCE</a></dt>

<dd>
<p>Will return a reference, not a list, useful with large files.</p>

<p>Default is 0, ie; methods normally returns a list.</p>

<p>Hopefully future versions of perl may return a reference if you request one, but as this is not supported generically yet, nor do we, so we require the variable to be set. There may be an argument to make this a reference by default, feedback will decide.</p>

<pre class="sh_perl">        $File::Data::REFERENCE = 1;

        my $a_ref = $o_dat-&#62;search(&#39;.*&#39;);

        print &#34;The log: \n&#34;.@{ $a_ref };</pre>

<dt><a name='File'></a><a name="$File::Data::SILENT"
>$File::Data::SILENT</a></dt>

<dd>
<p>Set to something other than zero if you don&#39;t want error messages ?-\</p>

<pre class="sh_perl">        $File::Data::SILENT = 0; # per line</pre>

<dt><a name='File'></a><a name="$File::Data::STRING"
>$File::Data::STRING</a></dt>

<dd>
<p>Where regex&#39;s are used, default behaviour is to treate the entire file as a single scalar string, so that, for example, <b>(?ms:...)</b> matches are effective.</p>

<p>Unset if you don&#39;t want this behaviour.</p>

<pre class="sh_perl">        $File::Data::STRING = 0; # per line</pre>

<dt><a name='File'></a><a name="$File::Data::PERMISSIONS"
>$File::Data::PERMISSIONS</a></dt>

<dd>
<p>File will be opened read-write (<b>insert()</b> compatible) unless this variable is set explicitly or given via <b>new()</b>. In either case, unless it is one of our valid permission <b>keys</b> declared below, it will be passed on to <b>FileHandle</b> and otherwise not modified. We don&#39;t support fancy permission sets, just read or write.</p>

<p>Read-only permissions may be explicitly set using one of these <b>keys</b>:</p>

<pre class="sh_perl">        $File::Data::PERMISSIONS = &#39;ro&#39;; # or readonly or &#60;</pre>

<p>Or, equivalently, for read-write (default):</p>

<pre class="sh_perl">        $File::Data::PERMISSIONS = &#39;rw&#39;; # or readwrite or +&#60;</pre>

<p>Note that it makes no sense to have an &#39;append only&#39; command (&#62;&#62;), we&#39;d have to disable all of write, search and replace, and insert, etc. in that case - just use the <b>append()</b> method only.</p>

<p>This is a KISS-compatible module remember?</p>
</dd>
</dl>

<p># ================================================================</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SPECIAL"
>SPECIAL <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>...</p>

<dl>
<dt><a name="AUTOLOAD"
>AUTOLOAD</a></dt>

<dd>
<p>Any unrecognised function will be passed to the FileHandle object for final consideration, behaviour is then effectively &#39;o_dat ISA FileHandle&#39;.</p>

<pre class="sh_perl">        $o_dat-&#62;truncate;</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Typical construction examples:</p>

<pre class="sh_perl">        my $o_rw = File::Data-&#62;new($filename, &#39;rw&#39;);

        my $o_ro = File::Data-&#62;new($filename, &#39;ro&#39;);</pre>

<dl>
<dt><a name="complete"
>complete</a></dt>

<dd>
<pre class="sh_perl">        my $o_dat = File::Data-&#62;new(&#39;./jabber&#39;);

        $o_dat-&#62;write(&#34;  Bewxre the Jabberwock my son,\n&#34;);

        $o_dat-&#62;prepend(&#34;The Jxbberwock by Lewis Cxrroll:\n&#34;);

        $o_dat-&#62;append(&#34;  the claws thxt snxtch,\n  ...\n&#34;);

        $o_dat-&#62;insert(2, &#34;  the jaws which bite.\n&#34;);

        $o_dat-&#62;replace(&#39;x&#39;, &#39;a&#39;);

        print $o_dat-&#62;SEARCH(&#39;The.+\n&#39;)-&#62;REPLACE(&#34;The.+\n&#34;, &#39;&#39;)-&#62;return(&#39;search&#39;);

        print $o_dat-&#62;READ;</pre>

<dt><a name="error"
>error</a></dt>

<dd>
<p>Failure is indicated by an error routine being called, this will print out any error to STDERR, unless warnings are declared fatal, in which case we croak. You can register your own error handlers for any method mentioned in the <a href="/perldoc?METHOD" class="podlinkpod"
>METHOD</a> section of this document, in addition is a special <b>init</b> call for initial file opening and general setting up.</p>

<p>Create a read-write object with a callback for all errors:</p>

<pre class="sh_perl">        my $o_rw = File::Data-&#62;new($filename, &#39;ro&#39;, {
                &#39;error&#39;         =&#62; \&#38;myerror,
        });</pre>

<p>Create a read-only object with a separate object handler for each error type:</p>

<pre class="sh_perl">        my $o_rw = File::Data-&#62;new($filename, &#39;rw&#39;, {
                &#39;error&#39;         =&#62; $o_generic-&#62;error_handler,
                &#39;insert&#39;        =&#62; $o_handler-&#62;insert_error,
                &#39;open&#39;          =&#62; $o_open_handler,
                &#39;read&#39;          =&#62; \&#38;carp,
                &#39;write&#39;         =&#62; \&#38;write_error,
        });</pre>

<dt><a name="commandline"
>commandline</a></dt>

<dd>
<p>From the command line:</p>

<pre class="sh_perl">        C&#60;perl -MFile::Data -e &#34;File::Data-&#62;new(&#39;./test.txt&#39;)-&#62;write(&#39;some stuff&#39;)&#34;&#62;</pre>

<p>And (very non-obfuscated)</p>

<pre class="sh_perl">  C&#60;
  perl -MFile::Data -e &#34;@x=sort qw(perl another hacker just);
    print map {split(\&#34;\n\&#34;, ucfirst(\$_).\&#34; \&#34;)}\
    File::Data-&#62;new(\&#34;./t/japh\&#34;)-&#62;\
      write(shift(@x).\&#34;\n\&#34;)-&#62;    \
      append(shift(@x).\&#34;\n\&#34;)-&#62;   \
      prepend(shift(@x).\&#34;\n\&#34;)-&#62;  \
      insert(2, shift(@x).\&#34;\n\&#34;)-&#62;\
    READ;&#34; 
  &#62;</pre>

<p>If you still have problems, mail me the output of</p>

<pre class="sh_perl">        make test TEST_VERBOSE=1</pre>

<dt><a name="do"
>do</a></dt>

<dd>
<p>Simple wrapper for method calls, returning the content.</p>

<pre class="sh_perl">    my @inserted = $o_dat-&#62;do(&#39;insert&#39;, @this);

    my @appended = $o_dat-&#62;do(&#39;append&#39;, @this);</pre>

<p>An addendum to this method, and to make life generally easier, is that you can also call any of the above methods in uppercase, to call via <b>do()</b> eg;</p>

<pre class="sh_perl">    my @data = $o_dat-&#62;WRITE($this)-&#62;APPEND-&#62;($that)-&#62;read;</pre>

<p>First argument is the method to call, followed by the arguments that method expects.</p>

<pre class="sh_perl">    perl -MFile::Data -e &#34;print File::Data-&#62;new($file)-&#62;INSERT(3,
    \&#34;third line\n\&#34;)-&#62;READ&#34;;</pre>

<p>If you want to get at the output of a particular called method see <a href="/perldoc?return()" class="podlinkpod"
>return()</a></p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>&#34;Richard Foley&#34; &#60;File.Data@rfi.net&#62;</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78254 Uploads, 24722 Distributions
105996 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 10:15:05 2012 GMT (0.185971021652222) @cpansearch1 -->
 </body>
</html>
