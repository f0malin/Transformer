<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Net::SNMP - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Net-SNMP",3]);
    _gaq.push(["_setCustomVar",5,"Release","Net-SNMP-v6.0.1",3]);
    _gaq.push(["_setCustomVar",3,"Module","Net::SNMP",3]);
    _gaq.push(["_setCustomVar",1,"Author","DTOWN",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Net::SNMP">permalink</a></div>
  <a href="/~dtown/">David M. Town</a> &gt;
  <a href="/~dtown/Net-SNMP-v6.0.1/">Net-SNMP-v6.0.1</a> &gt;
  Net::SNMP
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/f18a0ef959e1d3edc25ab62fca5bfa54?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DT/DTOWN/Net-SNMP-v6.0.1.tar.gz">Net-SNMP-v6.0.1.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Net%3A%3ASNMP;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DTOWN/Net-SNMP-v6.0.1/lib/Net/SNMP.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?XML%3A%3ASimple">XML::Simple</a><br>
<a href="/perldoc?Net%3A%3APing">Net::Ping</a><br>
<a href="/perldoc?Getopt%3A%3ALong">Getopt::Long</a><br>
<a href="/perldoc?Net%3A%3ATelnet">Net::Telnet</a><br>
<a href="/perldoc?IO%3A%3ASocket">IO::Socket</a><br>
<a href="/perldoc?Thread%3A%3AQueue">Thread::Queue</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?XML%3A%3ATwig">XML::Twig</a><br>
<a href="/perldoc?XML%3A%3AParser">XML::Parser</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Net%3A%3ASNMP">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 7</td></tr>
</table>
<a href="http://rt.cpan.org/Public/Dist/Display.html?Name=Net-SNMP">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  v6.0.1 &nbsp;
<span class="noprint">
  <a href="/src/DTOWN/Net-SNMP-v6.0.1/lib/Net/SNMP.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Blocking_Objects'>Blocking Objects</a>
    <li class='indexItem indexItem2'><a href='#Non-blocking_Objects'>Non-blocking Objects</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#session()_-_create_a_new_Net::SNMP_object'>session() - create a new Net::SNMP object</a>
    <li class='indexItem indexItem2'><a href='#close()_-_clear_the_Transport_Domain_associated_with_the_object'>close() - clear the Transport Domain associated with the object</a>
    <li class='indexItem indexItem2'><a href='#snmp_dispatcher()_-_enter_the_non-blocking_object_event_loop'>snmp_dispatcher() - enter the non-blocking object event loop</a>
    <li class='indexItem indexItem2'><a href='#get_request()_-_send_a_SNMP_get-request_to_the_remote_agent'>get_request() - send a SNMP get-request to the remote agent</a>
    <li class='indexItem indexItem2'><a href='#get_next_request()_-_send_a_SNMP_get-next-request_to_the_remote_agent'>get_next_request() - send a SNMP get-next-request to the remote agent</a>
    <li class='indexItem indexItem2'><a href='#set_request()_-_send_a_SNMP_set-request_to_the_remote_agent'>set_request() - send a SNMP set-request to the remote agent</a>
    <li class='indexItem indexItem2'><a href='#trap()_-_send_a_SNMP_trap_to_the_remote_manager'>trap() - send a SNMP trap to the remote manager</a>
    <li class='indexItem indexItem2'><a href='#get_bulk_request()_-_send_a_SNMP_get-bulk-request_to_the_remote_agent'>get_bulk_request() - send a SNMP get-bulk-request to the remote agent</a>
    <li class='indexItem indexItem2'><a href='#inform_request()_-_send_a_SNMP_inform-request_to_the_remote_manager'>inform_request() - send a SNMP inform-request to the remote manager</a>
    <li class='indexItem indexItem2'><a href='#snmpv2_trap()_-_send_a_SNMP_snmpV2-trap_to_the_remote_manager'>snmpv2_trap() - send a SNMP snmpV2-trap to the remote manager</a>
    <li class='indexItem indexItem2'><a href='#get_table()_-_retrieve_a_table_from_the_remote_agent'>get_table() - retrieve a table from the remote agent</a>
    <li class='indexItem indexItem2'><a href='#get_entries()_-_retrieve_table_entries_from_the_remote_agent'>get_entries() - retrieve table entries from the remote agent</a>
    <li class='indexItem indexItem2'><a href='#version()_-_get_the_SNMP_version_from_the_object'>version() - get the SNMP version from the object</a>
    <li class='indexItem indexItem2'><a href='#error()_-_get_the_current_error_message_from_the_object'>error() - get the current error message from the object</a>
    <li class='indexItem indexItem2'><a href='#hostname()_-_get_the_hostname_associated_with_the_object'>hostname() - get the hostname associated with the object</a>
    <li class='indexItem indexItem2'><a href='#error_status()_-_get_the_current_SNMP_error-status_from_the_object'>error_status() - get the current SNMP error-status from the object</a>
    <li class='indexItem indexItem2'><a href='#error_index()_-_get_the_current_SNMP_error-index_from_the_object'>error_index() - get the current SNMP error-index from the object</a>
    <li class='indexItem indexItem2'><a href='#var_bind_list()_-_get_the_hash_reference_for_the_VarBindList_values'>var_bind_list() - get the hash reference for the VarBindList values</a>
    <li class='indexItem indexItem2'><a href='#var_bind_names()_-_get_the_array_of_the_ObjectNames_in_the_VarBindList'>var_bind_names() - get the array of the ObjectNames in the VarBindList</a>
    <li class='indexItem indexItem2'><a href='#var_bind_types()_-_get_the_hash_reference_for_the_VarBindList_ASN.1_types'>var_bind_types() - get the hash reference for the VarBindList ASN.1 types</a>
    <li class='indexItem indexItem2'><a href='#timeout()_-_set_or_get_the_current_timeout_period_for_the_object'>timeout() - set or get the current timeout period for the object</a>
    <li class='indexItem indexItem2'><a href='#retries()_-_set_or_get_the_current_retry_count_for_the_object'>retries() - set or get the current retry count for the object</a>
    <li class='indexItem indexItem2'><a href='#max_msg_size()_-_set_or_get_the_current_maxMsgSize_for_the_object'>max_msg_size() - set or get the current maxMsgSize for the object</a>
    <li class='indexItem indexItem2'><a href='#translate()_-_enable_or_disable_the_translation_mode_for_the_object'>translate() - enable or disable the translation mode for the object</a>
    <li class='indexItem indexItem2'><a href='#debug()_-_set_or_get_the_debug_mode_for_the_module'>debug() - set or get the debug mode for the module</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SUBROUTINES'>SUBROUTINES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#oid_base_match()_-_determine_if_an_OID_has_a_specified_OID_base'>oid_base_match() - determine if an OID has a specified OID base</a>
    <li class='indexItem indexItem2'><a href='#oid_lex_cmp()_-_compare_two_OBJECT_IDENTIFIERs_lexicographically'>oid_lex_cmp() - compare two OBJECT IDENTIFIERs lexicographically</a>
    <li class='indexItem indexItem2'><a href='#oid_lex_sort()_-_sort_a_list_of_OBJECT_IDENTIFIERs_lexicographically'>oid_lex_sort() - sort a list of OBJECT IDENTIFIERs lexicographically</a>
    <li class='indexItem indexItem2'><a href='#snmp_type_ntop()_-_convert_an_ASN.1_type_to_presentation_format'>snmp_type_ntop() - convert an ASN.1 type to presentation format</a>
    <li class='indexItem indexItem2'><a href='#ticks_to_time()_-_convert_TimeTicks_to_formatted_time'>ticks_to_time() - convert TimeTicks to formatted time</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXPORTS'>EXPORTS</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#1._Blocking_SNMPv1_get-request_for_sysUpTime'>1. Blocking SNMPv1 get-request for sysUpTime</a>
    <li class='indexItem indexItem2'><a href='#2._Blocking_SNMPv3_set-request_of_sysContact'>2. Blocking SNMPv3 set-request of sysContact</a>
    <li class='indexItem indexItem2'><a href='#3._Non-blocking_SNMPv2c_get-bulk-request_for_ifTable'>3. Non-blocking SNMPv2c get-bulk-request for ifTable</a>
    <li class='indexItem indexItem2'><a href='#4._Non-blocking_SNMPv1_get-request_and_set-request_on_multiple_hosts'>4. Non-blocking SNMPv1 get-request and set-request on multiple hosts</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#REQUIREMENTS'>REQUIREMENTS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#ACKNOWLEDGMENTS'>ACKNOWLEDGMENTS</a>
  <li class='indexItem indexItem1'><a href='#LICENSE_AND_COPYRIGHT'>LICENSE AND COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Net::SNMP - Object oriented interface to SNMP</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Net::SNMP module implements an object oriented interface to the Simple Network Management Protocol.
Perl applications can use the module to retrieve or update information on a remote host using the SNMP protocol.
The module supports SNMP version-1,
SNMP version-2c (Community-Based SNMPv2),
and SNMP version-3.
The Net::SNMP module assumes that the user has a basic understanding of the Simple Network Management Protocol and related network management concepts.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Net::SNMP module abstracts the intricate details of the Simple Network Management Protocol by providing a high level programming interface to the protocol.
Each Net::SNMP object provides a one-to-one mapping between a Perl object and a remote SNMP agent or manager.
Once an object is created,
it can be used to perform the basic protocol exchange actions defined by SNMP.</p>

<p>A Net::SNMP object can be created such that it has either &#34;blocking&#34; or &#34;non-blocking&#34; properties.
By default,
the methods used to send SNMP messages do not return until the protocol exchange has completed successfully or a timeout period has expired.
This behavior gives the object a &#34;blocking&#34; property because the flow of the code is stopped until the method returns.</p>

<p>The optional named argument <b>-nonblocking</b> can be passed to the object constructor with a true value to give the object &#34;non-blocking&#34; behavior.
A method invoked by a non-blocking object queues the SNMP message and returns immediately,
allowing the flow of the code to continue.
The queued SNMP messages are not sent until an event loop is entered by calling the <code>snmp_dispatcher()</code> method.
When the SNMP messages are sent,
any response to the messages invokes the subroutine defined by the user when the message was originally queued.
The event loop exits when all messages have been removed from the queue by either receiving a response,
or by exceeding the number of retries at the Transport Layer.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Blocking_Objects"
>Blocking Objects</a></h2>

<p>The default behavior of the methods associated with a Net::SNMP object is to block the code flow until the method completes.
For methods that initiate a SNMP protocol exchange requiring a response,
a hash reference containing the results of the query is returned.
The undefined value is returned by all methods when a failure has occurred.
The <code>error()</code> method can be used to determine the cause of the failure.</p>

<p>The hash reference returned by a SNMP protocol exchange points to a hash constructed from the VarBindList contained in the SNMP response message.
The hash is created using the ObjectName and the ObjectSyntax pairs in the VarBindList.
The keys of the hash consist of the OBJECT IDENTIFIERs in dotted notation corresponding to each ObjectName in the VarBindList.
The value of each hash entry is set equal to the value of the corresponding ObjectSyntax.
This hash reference can also be retrieved using the <code>var_bind_list()</code> method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Non-blocking_Objects"
>Non-blocking Objects</a></h2>

<p>When a Net::SNMP object is created having non-blocking behavior,
the invocation of a method associated with the object returns immediately,
allowing the flow of the code to continue.
When a method is invoked that would initiate a SNMP protocol exchange requiring a response,
either a true value (i.e.
0x1) is returned immediately or the undefined value is returned if there was a failure.
The <code>error()</code> method can be used to determine the cause of the failure.</p>

<p>The contents of the VarBindList contained in the SNMP response message can be retrieved by calling the <code>var_bind_list()</code> method using the object reference passed as the first argument to the callback.
The value returned by the <code>var_bind_list()</code> method is a hash reference created using the ObjectName and the ObjectSyntax pairs in the VarBindList.
The keys of the hash consist of the OBJECT IDENTIFIERs in dotted notation corresponding to each ObjectName in the VarBindList.
The value of each hash entry is set equal to the value of the corresponding ObjectSyntax.
The undefined value is returned if there has been a failure and the <code>error()</code> method may be used to determine the reason.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>When named arguments are expected by the methods,
two different styles are supported.
All examples in this documentation use the dashed-option style:</p>

<pre class="sh_perl">       $object-&#62;method(-argument =&#62; $value);</pre>

<p>However, the IO:: style is also allowed:</p>

<pre class="sh_perl">       $object-&#62;method(Argument =&#62; $value);</pre>

<dl>
<dt><a name='Non'></a><a name="Non-blocking_Objects_Arguments"
>Non-blocking Objects Arguments</a></dt>

<dd>
<p>When a Net::SNMP object has been created with a &#34;non-blocking&#34; property, most methods that generate a SNMP message take additional arguments to support this property.</p>

<dl>
<dt><a name="Callback"
>Callback</a></dt>

<dd>
<p>Most methods associated with a non-blocking object have an optional named argument called <b>-callback</b>. The <b>-callback</b> argument expects a reference to a subroutine or to an array whose first element must be a reference to a subroutine. The subroutine defined by the <b>-callback</b> option is executed when a response to a SNMP message is received, an error condition has occurred, or the number of retries for the message has been exceeded.</p>

<p>When the <b>-callback</b> argument only contains a subroutine reference, the subroutine is evaluated passing a reference to the original Net::SNMP object as the only parameter. If the <b>-callback</b> argument was defined as an array reference, all elements in the array are passed to subroutine after the reference to the Net::SNMP object. The first element, which is required to be a reference to a subroutine, is removed before the remaining arguments are passed to that subroutine.</p>

<p>Once one method is invoked with the <b>-callback</b> argument, this argument stays with the object and is used by any further calls to methods using the <b>-callback</b> option if the argument is absent. The undefined value may be passed to the <b>-callback</b> argument to delete the callback.</p>

<p><b>NOTE:</b> The subroutine being passed with the <b>-callback</b> named argument should not cause blocking itself. This will cause all the actions in the event loop to be stopped, defeating the non-blocking property of the Net::SNMP module.</p>

<dt><a name="Delay"
>Delay</a></dt>

<dd>
<p>An optional argument <b>-delay</b> can also be passed to non-blocking objects. The <b>-delay</b> argument instructs the object to wait the number of seconds passed to the argument before executing the SNMP protocol exchange. The delay period starts when the event loop is entered. The <b>-delay</b> parameter is applied to all methods associated with the object once it is specified. The delay value must be set back to 0 seconds to disable the delay parameter.</p>
</dd>
</dl>

<dt><a name='SNMPv3'></a><a name="SNMPv3_Arguments"
>SNMPv3 Arguments</a></dt>

<dd>
<p>A SNMP context is a collection of management information accessible by a SNMP entity. An item of management information may exist in more than one context and a SNMP entity potentially has access to many contexts. The combination of a contextEngineID and a contextName unambiguously identifies a context within an administrative domain. In a SNMPv3 message, the contextEngineID and contextName are included as part of the scopedPDU. All methods that generate a SNMP message optionally take a <b>-contextengineid</b> and <b>-contextname</b> argument to configure these fields.</p>

<dl>
<dt><a name='Context'></a><a name="Context_Engine_ID"
>Context Engine ID</a></dt>

<dd>
<p>The <b>-contextengineid</b> argument expects a hexadecimal string representing the desired contextEngineID. The string must be 10 to 64 characters (5 to 32 octets) long and can be prefixed with an optional &#34;0x&#34;. Once the <b>-contextengineid</b> is specified it stays with the object until it is changed again or reset to default by passing in the undefined value. By default, the contextEngineID is set to match the authoritativeEngineID of the authoritative SNMP engine.</p>

<dt><a name='Context'></a><a name="Context_Name"
>Context Name</a></dt>

<dd>
<p>The contextName is passed as a string which must be 0 to 32 octets in length using the <b>-contextname</b> argument. The contextName stays with the object until it is changed. The contextName defaults to an empty string which represents the &#34;default&#34; context.</p>
</dd>
</dl>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="session()_-_create_a_new_Net::SNMP_object"
>session() - create a new Net::SNMP object</a></h2>

<pre class="sh_perl">   ($session, $error) = Net::SNMP-&#62;session(
                           [-hostname      =&#62; $hostname,]
                           [-port          =&#62; $port,]
                           [-localaddr     =&#62; $localaddr,]
                           [-localport     =&#62; $localport,]
                           [-nonblocking   =&#62; $boolean,]
                           [-version       =&#62; $version,]
                           [-domain        =&#62; $domain,]
                           [-timeout       =&#62; $seconds,]
                           [-retries       =&#62; $count,]
                           [-maxmsgsize    =&#62; $octets,]
                           [-translate     =&#62; $translate,]
                           [-debug         =&#62; $bitmask,]
                           [-community     =&#62; $community,]   # v1/v2c
                           [-username      =&#62; $username,]    # v3
                           [-authkey       =&#62; $authkey,]     # v3
                           [-authpassword  =&#62; $authpasswd,]  # v3
                           [-authprotocol  =&#62; $authproto,]   # v3
                           [-privkey       =&#62; $privkey,]     # v3
                           [-privpassword  =&#62; $privpasswd,]  # v3
                           [-privprotocol  =&#62; $privproto,]   # v3
                        );</pre>

<p>This is the constructor for Net::SNMP objects. In scalar context, a reference to a new Net::SNMP object is returned if the creation of the object is successful. In list context, a reference to a new Net::SNMP object and an empty error message string is returned. If a failure occurs, the object reference is returned as the undefined value. The error string may be used to determine the cause of the error.</p>

<p>Most of the named arguments passed to the constructor define basic attributes for the object and are not modifiable after the object has been created. The <b>-timeout</b>, <b>-retries</b>, <b>-maxmsgsize</b>, <b>-translate</b>, and <b>-debug</b> arguments are modifiable using an accessor method. See their corresponding method definitions for a complete description of their usage, default values, and valid ranges.</p>

<dl>
<dt><a name='Transport'></a><a name="Transport_Domain_Arguments"
>Transport Domain Arguments</a></dt>

<dd>
<p>The Net::SNMP module uses UDP/IPv4 as the default Transport Domain to exchange SNMP messages between the local and remote devices. The module also supports UDP/IPv6, TCP/IPv4, and TCP/IPv6 as alternative Transport Domains. The <b>-domain</b> argument can be used to change the Transport Domain by setting the value to one of the following strings: &#39;udp6&#39;, &#39;udp/ipv6&#39;; &#39;tcp&#39;, &#39;tcp4&#39;, &#39;tcp/ipv4&#39;; &#39;tcp6&#39;, or &#39;tcp/ipv6&#39;. The <b>-domain</b> argument also accepts the strings &#39;udp&#39;, &#39;udp4&#39;, or &#39;udp/ipv4&#39; which correspond to the default Transport Domain of UDP/IPv4.</p>

<p>The transport address of the destination SNMP device can be specified using the <b>-hostname</b> argument. This argument is optional and defaults to &#34;localhost&#34;. The destination port number can be specified as part of the transport address or by using the <b>-port</b> argument. Either a numeric port number or a textual service name can be specified. A numeric port number in parentheses can optionally follow the service name. This port number will be used if the service name cannot be resolved. If the destination port number is not specified, the well-known SNMP port number 161 is used.</p>

<p>By default the source transport address and port number are assigned dynamically by the local device on which the Net::SNMP module is being used. This dynamic assignment can be overridden by using the <b>-localaddr</b> and <b>-localport</b> arguments. These arguments accept the same values as the <b>-hostname</b> and <b>-port</b> arguments respectively. The resolved address must correspond to a valid address of an interface on the local device.</p>

<p>When using an IPv4 Transport Domain, the transport address can be specified as either an IP network hostname or an IPv4 address in standard dotted notation. The port information can be optionally appended to the hostname or address delimited by a colon. The accepted IPv4 transport address formats are <code>address</code>, <code>address:port</code>, <code>hostname</code>, and <code>hostname:port</code>.</p>

<p>When using an IPv6 Transport Domain, the transport address can be specified as an IP hostname (which will be looked up as a DNS quad-A record) or an IPv6 address in presentation format. The port information can optionally be included following a colon after the hostname or address. When including this information after an IPv6 address, the address must be enclosed in square brackets. The scope zone index (described in RFC 4007) can be specified after the address as a decimal value delimited by a percent sign. The accepted transport address formats for IPv6 are <code>address</code>, <code>address%zone</code>, <code>[address]:port</code>, <code>[address%zone]:port</code>, <code>hostname</code>, and <code>hostname:port</code>.</p>

<dt><a name='Security'></a><a name="Security_Model_Arguments"
>Security Model Arguments</a></dt>

<dd>
<p>The <b>-version</b> argument controls which other arguments are expected or required by the <code>session()</code> constructor. The Net::SNMP module supports SNMPv1, SNMPv2c, and SNMPv3. The module defaults to SNMPv1 if no <b>-version</b> argument is specified. The <b>-version</b> argument expects either a digit (i.e. &#39;1&#39;, &#39;2&#39;, or &#39;3&#39;) or a string specifying the version (i.e. &#39;snmpv1&#39;, &#39;snmpv2c&#39;, or &#39;snmpv3&#39;) to define the SNMP version.</p>

<p>The Security Model used by the Net::SNMP object is based on the SNMP version associated with the object. If the SNMP version is SNMPv1 or SNMPv2c a Community-based Security Model will be used, while the User-based Security Model (USM) will be used if the version is SNMPv3.</p>

<dl>
<dt><a name='Community'></a><a name="Community-based_Security_Model_Argument"
>Community-based Security Model Argument</a></dt>

<dd>
<p>If the Security Model is Community-based, the only argument available is the <b>-community</b> argument. This argument expects a string that is to be used as the SNMP community name. By default the community name is set to &#39;public&#39; if the argument is not present.</p>

<dt><a name='User'></a><a name="User-based_Security_Model_Arguments"
>User-based Security Model Arguments</a></dt>

<dd>
<p>The User-based Security Model (USM) used by SNMPv3 requires that a securityName be specified using the <b>-username</b> argument. The creation of a Net::SNMP object with the version set to SNMPv3 will fail if the <b>-username</b> argument is not present. The <b>-username</b> argument expects a string 1 to 32 octets in length.</p>

<p>Different levels of security are allowed by the User-based Security Model which address authentication and privacy concerns. A SNMPv3 Net::SNMP object will derive the security level (securityLevel) based on which of the following arguments are specified.</p>

<p>By default a securityLevel of &#39;noAuthNoPriv&#39; is assumed. If the <b>-authkey</b> or <b>-authpassword</b> arguments are specified, the securityLevel becomes &#39;authNoPriv&#39;. The <b>-authpassword</b> argument expects a string which is at least 1 octet in length. Optionally, the <b>-authkey</b> argument can be used so that a plain text password does not have to be specified in a script. The <b>-authkey</b> argument expects a hexadecimal string produced by localizing the password with the authoritativeEngineID for the specific destination device. The <code>snmpkey</code> utility included with the distribution can be used to create the hexadecimal string (see <a href="/~dtown/Net-SNMP-v6.0.1/snmpkey.PL" class="podlinkpod"
>snmpkey</a>).</p>

<p>Two different hash algorithms are defined by SNMPv3 which can be used by the Security Model for authentication. These algorithms are HMAC-MD5-96 &#34;MD5&#34; (RFC 1321) and HMAC-SHA-96 &#34;SHA-1&#34; (NIST FIPS PUB 180-1). The default algorithm used by the module is HMAC-MD5-96. This behavior can be changed by using the <b>-authprotocol</b> argument. This argument expects either the string &#39;md5&#39; or &#39;sha&#39; to be passed to modify the hash algorithm.</p>

<p>By specifying the arguments <b>-privkey</b> or <b>-privpassword</b> the securityLevel associated with the object becomes &#39;authPriv&#39;. According to SNMPv3, privacy requires the use of authentication. Therefore, if either of these two arguments are present and the <b>-authkey</b> or <b>-authpassword</b> arguments are missing, the creation of the object fails. The <b>-privkey</b> and <b>-privpassword</b> arguments expect the same input as the <b>-authkey</b> and <b>-authpassword</b> arguments respectively.</p>

<p>The User-based Security Model described in RFC 3414 defines a single encryption protocol to be used for privacy. This protocol, CBC-DES &#34;DES&#34; (NIST FIPS PUB 46-1), is used by default or if the string &#39;des&#39; is passed to the <b>-privprotocol</b> argument. The module also supports RFC 3826 which describes the use of CFB128-AES-128 &#34;AES&#34; (NIST FIPS PUB 197) in the USM. The AES encryption protocol can be selected by passing &#39;aes&#39; or &#39;aes128&#39; to the <b>-privprotocol</b> argument. By working with the Extended Security Options Consortium <a href="http://www.snmp.com/protocol/eso.shtml" class="podlinkurl"
>http://www.snmp.com/protocol/eso.shtml</a>, the module also supports CBC-3DES-EDE &#34;Triple-DES&#34; (NIST FIPS 46-3) in the User-based Security Model. This is defined in the draft <a href="http://www.snmp.com/eso/draft-reeder-snmpv3-usm-3desede-00.txt" class="podlinkurl"
>http://www.snmp.com/eso/draft-reeder-snmpv3-usm-3desede-00.txt</a>. The Triple-DES encryption protocol can be selected using the <b>-privprotocol</b> argument with the string &#39;3des&#39; or &#39;3desede&#39;.</p>
</dd>
</dl>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="close()_-_clear_the_Transport_Domain_associated_with_the_object"
>close() - clear the Transport Domain associated with the object</a></h2>

<pre class="sh_perl">   $session-&#62;close(); </pre>

<p>This method clears the Transport Domain and any errors associated with the object. Once closed, the Net::SNMP object can no longer be used to send or receive SNMP messages.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="snmp_dispatcher()_-_enter_the_non-blocking_object_event_loop"
>snmp_dispatcher() - enter the non-blocking object event loop</a></h2>

<pre class="sh_perl">   $session-&#62;snmp_dispatcher();</pre>

<p>This method enters the event loop associated with non-blocking Net::SNMP objects. The method exits when all queued SNMP messages have received a response or have timed out at the Transport Layer. This method is also exported as the stand alone function <code>snmp_dispatcher()</code> by default (see <a href="#EXPORTS" class="podlinkpod"
>&#34;EXPORTS&#34;</a>).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="get_request()_-_send_a_SNMP_get-request_to_the_remote_agent"
>get_request() - send a SNMP get-request to the remote agent</a></h2>

<pre class="sh_perl">   $result = $session-&#62;get_request(
                          [-callback        =&#62; sub {},]     # non-blocking
                          [-delay           =&#62; $seconds,]   # non-blocking 
                          [-contextengineid =&#62; $engine_id,] # v3 
                          [-contextname     =&#62; $name,]      # v3
                          -varbindlist      =&#62; \@oids,
                       );</pre>

<p>This method performs a SNMP get-request query to gather data from the remote agent on the host associated with the Net::SNMP object. The message is built using the list of OBJECT IDENTIFIERs in dotted notation passed to the method as an array reference using the <b>-varbindlist</b> argument. Each OBJECT IDENTIFIER is placed into a single SNMP GetRequest-PDU in the same order that it held in the original list.</p>

<p>A reference to a hash is returned in blocking mode which contains the contents of the VarBindList. In non-blocking mode, a true value is returned when no error has occurred. In either mode, the undefined value is returned when an error has occurred. The <code>error()</code> method may be used to determine the cause of the failure.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="get_next_request()_-_send_a_SNMP_get-next-request_to_the_remote_agent"
>get_next_request() - send a SNMP get-next-request to the remote agent</a></h2>

<pre class="sh_perl">   $result = $session-&#62;get_next_request(
                          [-callback        =&#62; sub {},]     # non-blocking
                          [-delay           =&#62; $seconds,]   # non-blocking 
                          [-contextengineid =&#62; $engine_id,] # v3 
                          [-contextname     =&#62; $name,]      # v3
                          -varbindlist      =&#62; \@oids,
                       );</pre>

<p>This method performs a SNMP get-next-request query to gather data from the remote agent on the host associated with the Net::SNMP object. The message is built using the list of OBJECT IDENTIFIERs in dotted notation passed to the method as an array reference using the <b>-varbindlist</b> argument. Each OBJECT IDENTIFER is placed into a single SNMP GetNextRequest-PDU in the same order that it held in the original list.</p>

<p>A reference to a hash is returned in blocking mode which contains the contents of the VarBindList. In non-blocking mode, a true value is returned when no error has occurred. In either mode, the undefined value is returned when an error has occurred. The <code>error()</code> method may be used to determine the cause of the failure.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="set_request()_-_send_a_SNMP_set-request_to_the_remote_agent"
>set_request() - send a SNMP set-request to the remote agent</a></h2>

<pre class="sh_perl">   $result = $session-&#62;set_request(
                          [-callback        =&#62; sub {},]     # non-blocking
                          [-delay           =&#62; $seconds,]   # non-blocking 
                          [-contextengineid =&#62; $engine_id,] # v3 
                          [-contextname     =&#62; $name,]      # v3
                          -varbindlist      =&#62; \@oid_value,
                       );</pre>

<p>This method is used to modify data on the remote agent that is associated with the Net::SNMP object using a SNMP set-request. The message is built using a list of values consisting of groups of an OBJECT IDENTIFIER, an object type, and the actual value to be set. This list is passed to the method as an array reference using the <b>-varbindlist</b> argument. The OBJECT IDENTIFIERs in each trio are to be in dotted notation. The object type is an octet corresponding to the ASN.1 type of value that is to be set. Each of the supported ASN.1 types have been defined and are exported by the package by default (see <a href="#EXPORTS" class="podlinkpod"
>&#34;EXPORTS&#34;</a>).</p>

<p>A reference to a hash is returned in blocking mode which contains the contents of the VarBindList. In non-blocking mode, a true value is returned when no error has occurred. In either mode, the undefined value is returned when an error has occurred. The <code>error()</code> method may be used to determine the cause of the failure.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="trap()_-_send_a_SNMP_trap_to_the_remote_manager"
>trap() - send a SNMP trap to the remote manager</a></h2>

<pre class="sh_perl">   $result = $session-&#62;trap(
                          [-delay           =&#62; $seconds,]   # non-blocking 
                          [-enterprise      =&#62; $oid,]
                          [-agentaddr       =&#62; $ipaddress,]
                          [-generictrap     =&#62; $generic,]
                          [-specifictrap    =&#62; $specific,]
                          [-timestamp       =&#62; $timeticks,]
                          -varbindlist      =&#62; \@oid_value,
                       );</pre>

<p>This method sends a SNMP trap to the remote manager associated with the Net::SNMP object. All arguments are optional and will be given the following defaults in the absence of a corresponding named argument:</p>

<ul>
<li>The default value for the trap <b>-enterprise</b> is &#34;1.3.6.1.4.1&#34;, which corresponds to &#34;iso.org.dod.internet.private.enterprises&#34;. The enterprise value is expected to be an OBJECT IDENTIFER in dotted notation.</li>

<li>When the Transport Domain is UDP/IPv4 or TCP/IPv4, the default value for the trap <b>-agentaddr</b> is the IP address associated with the interface on which the trap will be transmitted. For other Transport Domains the <b>-agentaddr</b> is defaulted to &#34;0.0.0.0&#34;. When specified, the agent-addr is expected to be an IpAddress in dotted notation.</li>

<li>The default value for the <b>-generictrap</b> type is 6 which corresponds to &#34;enterpriseSpecific&#34;. The generic-trap types are defined and can be exported upon request (see <a href="#EXPORTS" class="podlinkpod"
>&#34;EXPORTS&#34;</a>).</li>

<li>The default value for the <b>-specifictrap</b> type is 0. No pre-defined values are available for specific-trap types.</li>

<li>The default value for the trap <b>-timestamp</b> is the &#34;uptime&#34; of the script. The &#34;uptime&#34; of the script is the number of hundredths of seconds that have elapsed since the script began running. The time-stamp is expected to be a TimeTicks number in hundredths of seconds.</li>

<li>The default value for the trap <b>-varbindlist</b> is an empty array reference. The variable-bindings are expected to be in an array format consisting of groups of an OBJECT IDENTIFIER, an object type, and the actual value of the object. This is identical to the list expected by the <code>set_request()</code> method. The OBJECT IDENTIFIERs in each trio are to be in dotted notation. The object type is an octet corresponding to the ASN.1 type for the value. Each of the supported types have been defined and are exported by default (see <a href="#EXPORTS" class="podlinkpod"
>&#34;EXPORTS&#34;</a>).</li>
</ul>

<p>A true value is returned when the method is successful. The undefined value is returned when a failure has occurred. The <code>error()</code> method can be used to determine the cause of the failure. Since there are no acknowledgements for Trap-PDUs, there is no way to determine if the remote host actually received the trap.</p>

<p><b>NOTE:</b> When the object is in non-blocking mode, the trap is not sent until the event loop is entered and no callback is ever executed.</p>

<p><b>NOTE:</b> This method can only be used when the version of the object is set to SNMPv1.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="get_bulk_request()_-_send_a_SNMP_get-bulk-request_to_the_remote_agent"
>get_bulk_request() - send a SNMP get-bulk-request to the remote agent</a></h2>

<pre class="sh_perl">   $result = $session-&#62;get_bulk_request(
                          [-callback        =&#62; sub {},]     # non-blocking
                          [-delay           =&#62; $seconds,]   # non-blocking 
                          [-contextengineid =&#62; $engine_id,] # v3 
                          [-contextname     =&#62; $name,]      # v3
                          [-nonrepeaters    =&#62; $non_reps,]
                          [-maxrepetitions  =&#62; $max_reps,]
                          -varbindlist      =&#62; \@oids,
                       );</pre>

<p>This method performs a SNMP get-bulk-request query to gather data from the remote agent on the host associated with the Net::SNMP object. All arguments are optional except <b>-varbindlist</b> and will be given the following defaults in the absence of a corresponding named argument:</p>

<ul>
<li>The default value for the get-bulk-request <b>-nonrepeaters</b> is 0. The non-repeaters value specifies the number of variables in the variable-bindings list for which a single successor is to be returned.</li>

<li>The default value for the get-bulk-request <b>-maxrepetitions</b> is 0. The max-repetitions value specifies the number of successors to be returned for the remaining variables in the variable-bindings list.</li>

<li>The <b>-varbindlist</b> argument expects an array reference consisting of a list of OBJECT IDENTIFIERs in dotted notation. Each OBJECT IDENTIFER is placed into a single SNMP GetBulkRequest-PDU in the same order that it held in the original list.</li>
</ul>

<p>A reference to a hash is returned in blocking mode which contains the contents of the VarBindList. In non-blocking mode, a true value is returned when no error has occurred. In either mode, the undefined value is returned when an error has occurred. The <code>error()</code> method may be used to determine the cause of the failure.</p>

<p><b>NOTE:</b> This method can only be used when the version of the object is set to SNMPv2c or SNMPv3.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="inform_request()_-_send_a_SNMP_inform-request_to_the_remote_manager"
>inform_request() - send a SNMP inform-request to the remote manager</a></h2>

<pre class="sh_perl">   $result = $session-&#62;inform_request(
                          [-callback        =&#62; sub {},]     # non-blocking
                          [-delay           =&#62; $seconds,]   # non-blocking 
                          [-contextengineid =&#62; $engine_id,] # v3 
                          [-contextname     =&#62; $name,]      # v3
                          -varbindlist      =&#62; \@oid_value,
                       );</pre>

<p>This method is used to provide management information to the remote manager associated with the Net::SNMP object using an inform-request. The message is built using a list of values consisting of groups of an OBJECT IDENTIFIER, an object type, and the actual value to be identified. This list is passed to the method as an array reference using the <b>-varbindlist</b> argument. The OBJECT IDENTIFIERs in each trio are to be in dotted notation. The object type is an octet corresponding to the ASN.1 type of value that is to be identified. Each of the supported ASN.1 types have been defined and are exported by the package by default (see <a href="#EXPORTS" class="podlinkpod"
>&#34;EXPORTS&#34;</a>).</p>

<p>The first two variable-bindings fields in the inform-request are specified by SNMPv2 and should be:</p>

<ul>
<li>sysUpTime.0 - (&#39;1.3.6.1.2.1.1.3.0&#39;, TIMETICKS, $timeticks)</li>

<li>snmpTrapOID.0 - (&#39;1.3.6.1.6.3.1.1.4.1.0&#39;, OBJECT_IDENTIFIER, $oid)</li>
</ul>

<p>A reference to a hash is returned in blocking mode which contains the contents of the VarBindList. In non-blocking mode, a true value is returned when no error has occurred. In either mode, the undefined value is returned when an error has occurred. The <code>error()</code> method may be used to determine the cause of the failure.</p>

<p><b>NOTE:</b> This method can only be used when the version of the object is set to SNMPv2c or SNMPv3.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="snmpv2_trap()_-_send_a_SNMP_snmpV2-trap_to_the_remote_manager"
>snmpv2_trap() - send a SNMP snmpV2-trap to the remote manager</a></h2>

<pre class="sh_perl">   $result = $session-&#62;snmpv2_trap(
                          [-delay           =&#62; $seconds,]   # non-blocking 
                          -varbindlist      =&#62; \@oid_value,
                       );</pre>

<p>This method sends a snmpV2-trap to the remote manager associated with the Net::SNMP object. The message is built using a list of values consisting of groups of an OBJECT IDENTIFIER, an object type, and the actual value to be identified. This list is passed to the method as an array reference using the <b>-varbindlist</b> argument. The OBJECT IDENTIFIERs in each trio are to be in dotted notation. The object type is an octet corresponding to the ASN.1 type of value that is to be identified. Each of the supported ASN.1 types have been defined and are exported by the package by default (see <a href="#EXPORTS" class="podlinkpod"
>&#34;EXPORTS&#34;</a>).</p>

<p>The first two variable-bindings fields in the snmpV2-trap are specified by SNMPv2 and should be:</p>

<ul>
<li>sysUpTime.0 - (&#39;1.3.6.1.2.1.1.3.0&#39;, TIMETICKS, $timeticks)</li>

<li>snmpTrapOID.0 - (&#39;1.3.6.1.6.3.1.1.4.1.0&#39;, OBJECT_IDENTIFIER, $oid)</li>
</ul>

<p>A true value is returned when the method is successful. The undefined value is returned when a failure has occurred. The <code>error()</code> method can be used to determine the cause of the failure. Since there are no acknowledgements for SNMPv2-Trap-PDUs, there is no way to determine if the remote host actually received the snmpV2-trap.</p>

<p><b>NOTE:</b> When the object is in non-blocking mode, the snmpV2-trap is not sent until the event loop is entered and no callback is ever executed.</p>

<p><b>NOTE:</b> This method can only be used when the version of the object is set to SNMPv2c. SNMPv2-Trap-PDUs are supported by SNMPv3, but require the sender of the message to be an authoritative SNMP engine which is not currently supported by the Net::SNMP module.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="get_table()_-_retrieve_a_table_from_the_remote_agent"
>get_table() - retrieve a table from the remote agent</a></h2>

<pre class="sh_perl">   $result = $session-&#62;get_table(
                          [-callback        =&#62; sub {},]     # non-blocking
                          [-delay           =&#62; $seconds,]   # non-blocking 
                          [-contextengineid =&#62; $engine_id,] # v3 
                          [-contextname     =&#62; $name,]      # v3
                          -baseoid          =&#62; $oid,
                          [-maxrepetitions  =&#62; $max_reps,]  # v2c/v3
                       );</pre>

<p>This method performs repeated SNMP get-next-request or get-bulk-request (when using SNMPv2c or SNMPv3) queries to gather data from the remote agent on the host associated with the Net::SNMP object. The first message sent is built using the OBJECT IDENTIFIER in dotted notation passed to the method by the <b>-baseoid</b> argument. Repeated SNMP requests are issued until the OBJECT IDENTIFIER in the response is no longer a child of the base OBJECT IDENTIFIER.</p>

<p>The <b>-maxrepetitions</b> argument can be used to specify the max-repetitions value that is passed to the get-bulk-requests when using SNMPv2c or SNMPv3. If this argument is not present, a value is calculated based on the maximum message size for the Net::SNMP object. If the value is set to 1 or less, get-next-requests will be used for the queries instead of get-bulk-requests.</p>

<p>A reference to a hash is returned in blocking mode which contains the contents of the VarBindList. In non-blocking mode, a true value is returned when no error has occurred. In either mode, the undefined value is returned when an error has occurred. The <code>error()</code> method may be used to determine the cause of the failure.</p>

<p><b>WARNING:</b> Results from this method can become very large if the base OBJECT IDENTIFIER is close to the root of the SNMP MIB tree.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="get_entries()_-_retrieve_table_entries_from_the_remote_agent"
>get_entries() - retrieve table entries from the remote agent</a></h2>

<pre class="sh_perl">   $result = $session-&#62;get_entries(
                          [-callback        =&#62; sub {},]     # non-blocking
                          [-delay           =&#62; $seconds,]   # non-blocking
                          [-contextengineid =&#62; $engine_id,] # v3
                          [-contextname     =&#62; $name,]      # v3
                          -columns          =&#62; \@columns,
                          [-startindex      =&#62; $start,]
                          [-endindex        =&#62; $end,]
                          [-maxrepetitions  =&#62; $max_reps,]  # v2c/v3
                       );</pre>

<p>This method performs repeated SNMP get-next-request or get-bulk-request (when using SNMPv2c or SNMPv3) queries to gather data from the remote agent on the host associated with the Net::SNMP object. Each message specifically requests data for each OBJECT IDENTIFIER specified in the <b>-columns</b> array. The OBJECT IDENTIFIERs must correspond to column entries for a conceptual row in a table. They may however be columns in different tables as long as each table is indexed the same way. The optional <b>-startindex</b> and <b>-endindex</b> arguments may be specified to limit the query to specific rows in the table(s).</p>

<p>The <b>-startindex</b> can be specified as a single decimal value or in dotted notation if the index associated with the entry so requires. If the <b>-startindex</b> is specified, it will be include as part of the query results. If no <b>-startindex</b> is specified, the first request message will be sent without an index. To insure that the <b>-startindex</b> is included, the last sub-identifier in the index is decremented by one. If the last sub-identifier has a value of zero, the sub-identifier is removed from the index.</p>

<p>The optional <b>-endindex</b> argument can be specified as a single decimal value or in dotted notation. If the <b>-endindex</b> is specified, it will be included as part of the query results. If no <b>-endindex</b> is specified, repeated SNMP requests are issued until the response no longer returns entries matching any of the columns specified in the <b>-columns</b> array.</p>

<p>The <b>-maxrepetitions</b> argument can be used to specify the max-repetitions value that is passed to the get-bulk-requests when using SNMPv2c or SNMPv3. If this argument is not present, a value is calculated based on the maximum message size of the object and the number of columns specified in the <b>-columns</b> array. If the value is set to 1 or less, get-next-requests will be used for the queries instead of get-bulk-requests.</p>

<p>A reference to a hash is returned in blocking mode which contains the contents of the VarBindList. In non-blocking mode, a true value is returned when no error has occurred. In either mode, the undefined value is returned when an error has occurred. The <code>error()</code> method may be used to determine the cause of the failure.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="version()_-_get_the_SNMP_version_from_the_object"
>version() - get the SNMP version from the object</a></h2>

<pre class="sh_perl">   $rfc_version = $session-&#62;version();</pre>

<p>This method returns the current value for the SNMP version associated with the object. The returned value is the corresponding version number defined by the RFCs for the protocol version field (i.e. SNMPv1 == 0, SNMPv2c == 1, and SNMPv3 == 3). The RFC versions are defined as constant by the module and can be exported by request (see <a href="#EXPORTS" class="podlinkpod"
>&#34;EXPORTS&#34;</a>).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="error()_-_get_the_current_error_message_from_the_object"
>error() - get the current error message from the object</a></h2>

<pre class="sh_perl">   $error_message = $session-&#62;error();</pre>

<p>This method returns a text string explaining the reason for the last error. An empty string is returned if no error has occurred.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="hostname()_-_get_the_hostname_associated_with_the_object"
>hostname() - get the hostname associated with the object</a></h2>

<pre class="sh_perl">   $hostname = $session-&#62;hostname();</pre>

<p>This method returns the parsed hostname string that is associated with the object. Any port information and formatting that can be included with the corresponding <code>session()</code> constructor argument will be stripped and not included as part of the returned string.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="error_status()_-_get_the_current_SNMP_error-status_from_the_object"
>error_status() - get the current SNMP error-status from the object</a></h2>

<pre class="sh_perl">   $error_status = $session-&#62;error_status();</pre>

<p>This method returns the numeric value of the error-status contained in the last SNMP message received by the object.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="error_index()_-_get_the_current_SNMP_error-index_from_the_object"
>error_index() - get the current SNMP error-index from the object</a></h2>

<pre class="sh_perl">   $error_index = $session-&#62;error_index();</pre>

<p>This method returns the numeric value of the error-index contained in the last SNMP message received by the object.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="var_bind_list()_-_get_the_hash_reference_for_the_VarBindList_values"
>var_bind_list() - get the hash reference for the VarBindList values</a></h2>

<pre class="sh_perl">   $values = $session-&#62;var_bind_list();</pre>

<p>This method returns a hash reference created using the ObjectName and the ObjectSyntax pairs in the VarBindList of the last SNMP message received by the object. The keys of the hash consist of the OBJECT IDENTIFIERs in dotted notation corresponding to each ObjectName in the VarBindList. If any of the OBJECT IDENTIFIERs passed to the request method began with a leading dot, all of the OBJECT IDENTIFIER hash keys will be prefixed with a leading dot. If duplicate OBJECT IDENTIFIERs are present in the VarBindList they will be padded with spaces to make them an unique hash key. The value of each hash entry is set equal to the value of the corresponding ObjectSyntax. The undefined value is returned if there has been a failure.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="var_bind_names()_-_get_the_array_of_the_ObjectNames_in_the_VarBindList"
>var_bind_names() - get the array of the ObjectNames in the VarBindList</a></h2>

<pre class="sh_perl">   @names = $session-&#62;var_bind_names();</pre>

<p>This method returns an array containing the OBJECT IDENTIFIERs corresponding to the ObjectNames in the VarBindList in the order that they were received in the last SNMP message. The entries in the array will map directly to the keys in the hash reference returned by the methods that perform SNMP message exchanges and by the <code>var_bind_list()</code> and <code>var_bind_types()</code> methods. The array returned for the convenience methods <code>get_table()</code> and <code>get_entries()</code> will be in lexicographical order. An empty array is returned if there has been a failure.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="var_bind_types()_-_get_the_hash_reference_for_the_VarBindList_ASN.1_types"
>var_bind_types() - get the hash reference for the VarBindList ASN.1 types</a></h2>

<pre class="sh_perl">   $types = $session-&#62;var_bind_types();</pre>

<p>This method returns a hash reference created using the ObjectName and the ASN.1 type of the ObjectSyntax in the VarBindList of the last SNMP message received by the object. The keys of the hash consist of the OBJECT IDENTIFIERs in dotted notation corresponding to each ObjectName in the VarBindList. The value of each hash entry is set equal to the ASN.1 type of the corresponding ObjectSyntax. Constants for the supported ASN.1 types have been defined and are exported by the package by default (see <a href="#EXPORTS" class="podlinkpod"
>&#34;EXPORTS&#34;</a>). The undefined value is returned if there has been a failure.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="timeout()_-_set_or_get_the_current_timeout_period_for_the_object"
>timeout() - set or get the current timeout period for the object</a></h2>

<pre class="sh_perl">   $seconds = $session-&#62;timeout([$seconds]);</pre>

<p>This method returns the current value for the Transport Layer timeout for the Net::SNMP object. This value is the number of seconds that the object will wait for a response from the agent on the remote host. The default timeout is 5.0 seconds.</p>

<p>If a parameter is specified, the timeout for the object is set to the provided value if it falls within the range 1.0 to 60.0 seconds. The undefined value is returned upon an error and the <code>error()</code> method may be used to determine the cause.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="retries()_-_set_or_get_the_current_retry_count_for_the_object"
>retries() - set or get the current retry count for the object</a></h2>

<pre class="sh_perl">   $count = $session-&#62;retries([$count]);</pre>

<p>This method returns the current value for the number of times to retry sending a SNMP message to the remote host. The default number of retries is 1.</p>

<p>If a parameter is specified, the number of retries for the object is set to the provided value if it falls within the range 0 to 20. The undefined value is returned upon an error and the <code>error()</code> method may be used to determine the cause.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="max_msg_size()_-_set_or_get_the_current_maxMsgSize_for_the_object"
>max_msg_size() - set or get the current maxMsgSize for the object</a></h2>

<pre class="sh_perl">   $octets = $session-&#62;max_msg_size([$octets]);</pre>

<p>This method returns the current value for the maximum message size (maxMsgSize) for the Net::SNMP object. This value is the largest message size in octets that can be prepared or processed by the object. The default maxMsgSize is 1472 octets for UDP/IPv4, 1452 octets for UDP/IPv6, 1460 octets for TCP/IPv4, and 1440 octets for TCP/IPv6.</p>

<p>If a parameter is specified, the maxMsgSize is set to the provided value if it falls within the range 484 to 65535 octets. The undefined value is returned upon an error and the <code>error()</code> method may be used to determine the cause.</p>

<p><b>NOTE:</b> When using SNMPv3, the maxMsgSize is actually contained in the SNMP message (as msgMaxSize). If the value received from a remote device is less than the current maxMsgSize, the size is automatically adjusted to be the lower value.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="translate()_-_enable_or_disable_the_translation_mode_for_the_object"
>translate() - enable or disable the translation mode for the object</a></h2>

<pre class="sh_perl">   $mask = $session-&#62;translate([ 
                        $mode |
                        [ # Perl anonymous ARRAY reference 
                           [&#39;-all&#39;            =&#62; $mode0,]
                           [&#39;-octetstring&#39;    =&#62; $mode1,]
                           [&#39;-null&#39;           =&#62; $mode2,]
                           [&#39;-timeticks&#39;      =&#62; $mode3,]
                           [&#39;-opaque&#39;         =&#62; $mode4,]
                           [&#39;-nosuchobject&#39;   =&#62; $mode5,] 
                           [&#39;-nosuchinstance&#39; =&#62; $mode6,]
                           [&#39;-endofmibview&#39;   =&#62; $mode7,]
                           [&#39;-unsigned&#39;       =&#62; $mode8]  
                        ]
                     ]);</pre>

<p>When the object decodes the GetResponse-PDU that is returned in response to a SNMP message, certain values are translated into a more &#34;human readable&#34; form. By default the following translations occur:</p>

<ul>
<li>OCTET STRINGs and Opaques containing any octet which is not part of the character set defined as a DisplayString in RFC 2679 are converted into a hexadecimal representation prefixed with &#34;0x&#34;. The control codes NUL(0x00), BEL(0x07), BS(0x08), HT(0x09), LF(0x0A), VT(0x0b), FF(0x0C), and CR(0x0D) are part of the character set and will not trigger translation. The sequence &#39;CR x&#39; for any x other than LF or NUL is illegal and will trigger translation.</li>

<li>TimeTicks integer values are converted to a time format.</li>

<li>NULL values return the string &#34;NULL&#34; instead of an empty string.</li>

<li>noSuchObject exception values return the string &#34;noSuchObject&#34; instead of an empty string.</li>

<li>noSuchInstance exception values return the string &#34;noSuchInstance&#34; instead of an empty string.</li>

<li>endOfMibView exception values return the string &#34;endOfMibView&#34; instead of an empty string.</li>

<li>Counter64, Counter, Gauge, and TimeTick values that have been incorrectly encoded as signed negative values are returned as unsigned values.</li>
</ul>

<p>The <code>translate()</code> method can be invoked with two different types of arguments.</p>

<p>If the argument passed is any Perl variable type except an array reference, the translation mode for all ASN.1 types is set to either enabled or disabled, depending on the value of the passed parameter. Any value that Perl would treat as a true value will set the mode to be enabled for all types, while a false value will disable translation for all types.</p>

<p>A reference to an array can be passed to the <code>translate()</code> method in order to define the translation mode on a per ASN.1 type basis. The array is expected to contain a list of named argument pairs for each ASN.1 type that is to be modified. The arguments in the list are applied in the order that they are passed in via the array. Arguments at the end of the list supercede those passed earlier in the list. The argument &#34;-all&#34; can be used to specify that the mode is to apply to all ASN.1 types. Only the arguments for the ASN.1 types that are to be modified need to be included in the list.</p>

<p>The <code>translate()</code> method returns a bit mask indicating which ASN.1 types are to be translated. Definitions of the bit to ASN.1 type mappings can be exported using the <i>:translate</i> tag (see <a href="#EXPORTS" class="podlinkpod"
>&#34;EXPORTS&#34;</a>). The undefined value is returned upon an error and the <code>error()</code> method may be used to determine the cause.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="debug()_-_set_or_get_the_debug_mode_for_the_module"
>debug() - set or get the debug mode for the module</a></h2>

<pre class="sh_perl">   $mask = $session-&#62;debug([$mask]);</pre>

<p>This method is used to enable or disable debugging for the Net::SNMP module. Debugging can be enabled on a per component level as defined by a bit mask passed to the <code>debug()</code> method. The bit mask is broken up as follows:</p>

<ul>
<li>0x02 - Message or PDU encoding and decoding</li>

<li>0x04 - Transport Layer</li>

<li>0x08 - Dispatcher</li>

<li>0x10 - Message Processing</li>

<li>0x20 - Security</li>
</ul>

<p>Symbols representing these bit mask values are defined by the module and can be exported using the <i>:debug</i> tag (see <a href="#EXPORTS" class="podlinkpod"
>&#34;EXPORTS&#34;</a>). If a non-numeric value is passed to the <code>debug()</code> method, it is evaluated in boolean context. Debugging for all of the components is then enabled or disabled based on the resulting truth value.</p>

<p>The current debugging mask is returned by the method. Debugging can also be enabled using the stand alone function <code>snmp_debug()</code>. This function can be exported by request (see <a href="#EXPORTS" class="podlinkpod"
>&#34;EXPORTS&#34;</a>).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUBROUTINES"
>SUBROUTINES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="oid_base_match()_-_determine_if_an_OID_has_a_specified_OID_base"
>oid_base_match() - determine if an OID has a specified OID base</a></h2>

<pre class="sh_perl">   $value = oid_base_match($base_oid, $oid);</pre>

<p>This function takes two OBJECT IDENTIFIERs in dotted notation and returns a true value (i.e. 0x1) if the second OBJECT IDENTIFIER is equal to or is a child of the first OBJECT IDENTIFIER in the SNMP Management Information Base (MIB). This function can be used in conjunction with the <code>get-next-request()</code> or <code>get-bulk-request()</code> methods to determine when a OBJECT IDENTIFIER in the GetResponse-PDU is no longer in the desired MIB tree branch.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="oid_lex_cmp()_-_compare_two_OBJECT_IDENTIFIERs_lexicographically"
>oid_lex_cmp() - compare two OBJECT IDENTIFIERs lexicographically</a></h2>

<pre class="sh_perl">   $cmp = oid_lex_cmp($oid1, $oid2);</pre>

<p>This function takes two OBJECT IDENTIFIERs in dotted notation and returns one of the values 1, 0, -1 if $oid1 is respectively lexicographically greater, equal, or less than $oid2.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="oid_lex_sort()_-_sort_a_list_of_OBJECT_IDENTIFIERs_lexicographically"
>oid_lex_sort() - sort a list of OBJECT IDENTIFIERs lexicographically</a></h2>

<pre class="sh_perl">   @sorted_oids = oid_lex_sort(@oids);</pre>

<p>This function takes a list of OBJECT IDENTIFIERs in dotted notation and returns the listed sorted in lexicographical order.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="snmp_type_ntop()_-_convert_an_ASN.1_type_to_presentation_format"
>snmp_type_ntop() - convert an ASN.1 type to presentation format</a></h2>

<pre class="sh_perl">   $text = snmp_type_ntop($type);</pre>

<p>This function takes an ASN.1 type octet and returns a text string suitable for presentation. Some ASN.1 type definitions map to the same octet value when encoded. This method cannot distinguish between these multiple mappings and the most basic type name will be returned.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ticks_to_time()_-_convert_TimeTicks_to_formatted_time"
>ticks_to_time() - convert TimeTicks to formatted time</a></h2>

<pre class="sh_perl">   $time = ticks_to_time($timeticks);</pre>

<p>This function takes an ASN.1 TimeTicks value and returns a string representing the time defined by the value. The TimeTicks value is expected to be a non-negative integer value representing the time in hundredths of a second since some epoch. The returned string will display the time in days, hours, and seconds format according to the value of the TimeTicks argument.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORTS"
>EXPORTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Net::SNMP module uses the <em>Exporter</em> module to export useful constants and subroutines. These exportable symbols are defined below and follow the rules and conventions of the <em>Exporter</em> module (see <a href="/perldoc?Exporter" class="podlinkpod"
>Exporter</a>).</p>

<dl>
<dt><a name="Default"
>Default</a></dt>

<dd>
<p>&#38;snmp_dispatcher, INTEGER, INTEGER32, OCTET_STRING, OBJECT_IDENTIFIER, IPADDRESS, COUNTER, COUNTER32, GAUGE, GAUGE32, UNSIGNED32, TIMETICKS, OPAQUE, COUNTER64, NOSUCHOBJECT, NOSUCHINSTANCE, ENDOFMIBVIEW</p>

<dt><a name="Exportable"
>Exportable</a></dt>

<dd>
<p>&#38;snmp_debug, &#38;snmp_dispatcher, &#38;snmp_type_ntop, &#38;oid_base_match, &#38;oid_lex_cmp, &#38;oid_lex_sort,&#38;ticks_to_time, INTEGER, INTEGER32, OCTET_STRING, NULL, OBJECT_IDENTIFIER, SEQUENCE, IPADDRESS, COUNTER, COUNTER32, GAUGE, GAUGE32, UNSIGNED32, TIMETICKS, OPAQUE, COUNTER64, NOSUCHOBJECT, NOSUCHINSTANCE, ENDOFMIBVIEW, GET_REQUEST, GET_NEXT_REQUEST, GET_RESPONSE, SET_REQUEST, TRAP, GET_BULK_REQUEST, INFORM_REQUEST, SNMPV2_TRAP, REPORT, DEBUG_ALL, DEBUG_NONE, DEBUG_MESSAGE, DEBUG_TRANSPORT, DEBUG_DISPATCHER,DEBUG_PROCESSING, DEBUG_SECURITY, COLD_START, WARM_START, LINK_DOWN, LINK_UP, AUTHENTICATION_FAILURE, EGP_NEIGHBOR_LOSS, ENTERPRISE_SPECIFIC, SNMP_VERSION_1, SNMP_VERSION_2C, SNMP_VERSION_3, SNMP_PORT, SNMP_TRAP_PORT, TRANSLATE_NONE,TRANSLATE_OCTET_STRING, TRANSLATE_NULL, TRANSLATE_TIMETICKS, TRANSLATE_OPAQUE,TRANSLATE_NOSUCHOBJECT, TRANSLATE_NOSUCHINSTANCE, TRANSLATE_ENDOFMIBVIEW, TRANSLATE_UNSIGNED, TRANSLATE_ALL</p>

<dt><a name="Tags"
>Tags</a></dt>

<dd>
<dl>
<dt><a name='asn1'></a><a name=":asn1"
>:asn1</a></dt>

<dd>
<p>INTEGER, INTEGER32, OCTET_STRING, NULL, OBJECT_IDENTIFIER, SEQUENCE, IPADDRESS, COUNTER, COUNTER32, GAUGE, GAUGE32, UNSIGNED32, TIMETICKS, OPAQUE, COUNTER64, NOSUCHOBJECT, NOSUCHINSTANCE, ENDOFMIBVIEW, GET_REQUEST, GET_NEXT_REQUEST, GET_RESPONSE, SET_REQUEST, TRAP, GET_BULK_REQUEST, INFORM_REQUEST, SNMPV2_TRAP, REPORT</p>

<dt><a name='debug'></a><a name=":debug"
>:debug</a></dt>

<dd>
<p>&#38;snmp_debug, DEBUG_ALL, DEBUG_NONE, DEBUG_MESSAGE, DEBUG_TRANSPORT, DEBUG_DISPATCHER, DEBUG_PROCESSING, DEBUG_SECURITY</p>

<dt><a name='generictrap'></a><a name=":generictrap"
>:generictrap</a></dt>

<dd>
<p>COLD_START, WARM_START, LINK_DOWN, LINK_UP, AUTHENTICATION_FAILURE, EGP_NEIGHBOR_LOSS, ENTERPRISE_SPECIFIC</p>

<dt><a name='snmp'></a><a name=":snmp"
>:snmp</a></dt>

<dd>
<p>&#38;snmp_debug, &#38;snmp_dispatcher, &#38;snmp_type_ntop, &#38;oid_base_match, &#38;oid_lex_cmp, &#38;oid_lex_sort, &#38;ticks_to_time, SNMP_VERSION_1, SNMP_VERSION_2C, SNMP_VERSION_3, SNMP_PORT, SNMP_TRAP_PORT</p>

<dt><a name='translate'></a><a name=":translate"
>:translate</a></dt>

<dd>
<p>TRANSLATE_NONE, TRANSLATE_OCTET_STRING, TRANSLATE_NULL, TRANSLATE_TIMETICKS, TRANSLATE_OPAQUE, TRANSLATE_NOSUCHOBJECT, TRANSLATE_NOSUCHINSTANCE, TRANSLATE_ENDOFMIBVIEW, TRANSLATE_UNSIGNED, TRANSLATE_ALL</p>

<dt><a name='ALL'></a><a name=":ALL"
>:ALL</a></dt>

<dd>
<p>All of the above exportable items.</p>
</dd>
</dl>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="1._Blocking_SNMPv1_get-request_for_sysUpTime"
>1. Blocking SNMPv1 get-request for sysUpTime</a></h2>

<p>This example gets the sysUpTime from a remote host.</p>

<pre class="sh_perl">   #! /usr/local/bin/perl

   use strict;
   use warnings;

   use Net::SNMP;

   my $OID_sysUpTime = &#39;1.3.6.1.2.1.1.3.0&#39;;

   my ($session, $error) = Net::SNMP-&#62;session(
      -hostname  =&#62; shift || &#39;localhost&#39;,
      -community =&#62; shift || &#39;public&#39;,
   );

   if (!defined $session) {
      printf &#34;ERROR: %s.\n&#34;, $error;
      exit 1;
   }

   my $result = $session-&#62;get_request(-varbindlist =&#62; [ $OID_sysUpTime ],);

   if (!defined $result) {
      printf &#34;ERROR: %s.\n&#34;, $session-&#62;error();
      $session-&#62;close();
      exit 1;
   }

   printf &#34;The sysUpTime for host &#39;%s&#39; is %s.\n&#34;,
          $session-&#62;hostname(), $result-&#62;{$OID_sysUpTime};

   $session-&#62;close();

   exit 0;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="2._Blocking_SNMPv3_set-request_of_sysContact"
>2. Blocking SNMPv3 set-request of sysContact</a></h2>

<p>This example sets the sysContact information on the remote host to &#34;Help Desk x911&#34;. The named arguments passed to the <code>session()</code> constructor are for the demonstration of syntax only. These parameters will need to be set according to the SNMPv3 parameters of the remote host. The <code>snmpkey</code> utility included with the distribution can be used to create the key values.</p>

<pre class="sh_perl">   #! /usr/local/bin/perl

   use strict;
   use warnings;

   use Net::SNMP;

   my $OID_sysContact = &#39;1.3.6.1.2.1.1.4.0&#39;;

   my ($session, $error) = Net::SNMP-&#62;session(
      -hostname     =&#62; &#39;myv3host.example.com&#39;,
      -version      =&#62; &#39;snmpv3&#39;,
      -username     =&#62; &#39;myv3Username&#39;,
      -authprotocol =&#62; &#39;sha1&#39;,
      -authkey      =&#62; &#39;0x6695febc9288e36282235fc7151f128497b38f3f&#39;,
      -privprotocol =&#62; &#39;des&#39;,
      -privkey      =&#62; &#39;0x6695febc9288e36282235fc7151f1284&#39;,
   );

   if (!defined $session) {
      printf &#34;ERROR: %s.\n&#34;, $error;
      exit 1;
   }

   my $result = $session-&#62;set_request(
      -varbindlist =&#62; [ $OID_sysContact, OCTET_STRING, &#39;Help Desk x911&#39; ],
   );

   if (!defined $result) {
      printf &#34;ERROR: %s.\n&#34;, $session-&#62;error();
      $session-&#62;close();
      exit 1;
   }

   printf &#34;The sysContact for host &#39;%s&#39; was set to &#39;%s&#39;.\n&#34;,
          $session-&#62;hostname(), $result-&#62;{$OID_sysContact};

   $session-&#62;close();

   exit 0;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="3._Non-blocking_SNMPv2c_get-bulk-request_for_ifTable"
>3. Non-blocking SNMPv2c get-bulk-request for ifTable</a></h2>

<p>This example gets the contents of the ifTable by sending get-bulk-requests until the responses are no longer part of the ifTable. The ifTable can also be retrieved using the <code>get_table()</code> method. The ifPhysAddress object in the table has a syntax of an OCTET STRING. By default, translation is enabled and non-printable OCTET STRINGs are translated into a hexadecimal format. Sometimes the OCTET STRING contains all printable characters and this produces unexpected output when it is not translated. The example turns off translation for OCTET STRINGs and specifically formats the output for the ifPhysAddress objects.</p>

<pre class="sh_perl">   #! /usr/local/bin/perl

   use strict;
   use warnings;

   use Net::SNMP qw(:snmp);

   my $OID_ifTable = &#39;1.3.6.1.2.1.2.2&#39;;
   my $OID_ifPhysAddress = &#39;1.3.6.1.2.1.2.2.1.6&#39;;

   my ($session, $error) = Net::SNMP-&#62;session(
      -hostname    =&#62; shift || &#39;localhost&#39;,
      -community   =&#62; shift || &#39;public&#39;,
      -nonblocking =&#62; 1,
      -translate   =&#62; [-octetstring =&#62; 0],
      -version     =&#62; &#39;snmpv2c&#39;,
   );

   if (!defined $session) {
      printf &#34;ERROR: %s.\n&#34;, $error;
      exit 1;
   }

   my %table; # Hash to store the results

   my $result = $session-&#62;get_bulk_request(
      -varbindlist    =&#62; [ $OID_ifTable ],
      -callback       =&#62; [ \&#38;table_callback, \%table ],
      -maxrepetitions =&#62; 10,
   );

   if (!defined $result) {
      printf &#34;ERROR: %s\n&#34;, $session-&#62;error();
      $session-&#62;close();
      exit 1;
   }

   # Now initiate the SNMP message exchange.

   snmp_dispatcher();

   $session-&#62;close();

   # Print the results, specifically formatting ifPhysAddress.

   for my $oid (oid_lex_sort(keys %table)) {
      if (!oid_base_match($OID_ifPhysAddress, $oid)) {
         printf &#34;%s = %s\n&#34;, $oid, $table{$oid};
      } else {
         printf &#34;%s = %s\n&#34;, $oid, unpack &#39;H*&#39;, $table{$oid};
      }
   }

   exit 0;

   sub table_callback
   {
      my ($session, $table) = @_;

      my $list = $session-&#62;var_bind_list();

      if (!defined $list) {
         printf &#34;ERROR: %s\n&#34;, $session-&#62;error();
         return;
      }

      # Loop through each of the OIDs in the response and assign
      # the key/value pairs to the reference that was passed with
      # the callback.  Make sure that we are still in the table
      # before assigning the key/values.

      my @names = $session-&#62;var_bind_names();
      my $next  = undef;

      while (@names) {
         $next = shift @names;
         if (!oid_base_match($OID_ifTable, $next)) {
            return; # Table is done.
         }
         $table-&#62;{$next} = $list-&#62;{$next};
      }

      # Table is not done, send another request, starting at the last
      # OBJECT IDENTIFIER in the response.  No need to include the
      # calback argument, the same callback that was specified for the
      # original request will be used.

      my $result = $session-&#62;get_bulk_request(
         -varbindlist    =&#62; [ $next ],
         -maxrepetitions =&#62; 10,
      );

      if (!defined $result) {
         printf &#34;ERROR: %s.\n&#34;, $session-&#62;error();
      }

      return;
   }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="4._Non-blocking_SNMPv1_get-request_and_set-request_on_multiple_hosts"
>4. Non-blocking SNMPv1 get-request and set-request on multiple hosts</a></h2>

<p>This example first polls several hosts for their sysUpTime. If the poll of the host is successful, the sysContact and sysLocation information is set on the host. The sysContact information is hardcoded to &#34;Help Desk x911&#34; while the sysLocation information is passed as an argument to the callback.</p>

<pre class="sh_perl">   #! /usr/local/bin/perl

   use strict;
   use warnings;

   use Net::SNMP;

   my $OID_sysUpTime = &#39;1.3.6.1.2.1.1.3.0&#39;;
   my $OID_sysContact = &#39;1.3.6.1.2.1.1.4.0&#39;;
   my $OID_sysLocation = &#39;1.3.6.1.2.1.1.6.0&#39;;

   # Hash of hosts and location data.

   my %host_data = (
      &#39;10.1.1.2&#39;  =&#62; &#39;Building 1, Second Floor&#39;,
      &#39;10.2.1.1&#39;  =&#62; &#39;Building 2, First Floor&#39;,
      &#39;localhost&#39; =&#62; &#39;Right here!&#39;,
   );

   # Create a session for each host and queue a get-request for sysUpTime.

   for my $host (keys %host_data) {

      my ($session, $error) = Net::SNMP-&#62;session(
         -hostname    =&#62; $host,
         -community   =&#62; &#39;private&#39;,
         -nonblocking =&#62; 1,
      );

      if (!defined $session) {
         printf &#34;ERROR: Failed to create session for host &#39;%s&#39;: %s.\n&#34;,
                $host, $error;
         next;
      }

      my $result = $session-&#62;get_request(
         -varbindlist =&#62; [ $OID_sysUpTime ],
         -callback    =&#62; [ \&#38;get_callback, $host_data{$host} ],
      );

      if (!defined $result) {
         printf &#34;ERROR: Failed to queue get request for host &#39;%s&#39;: %s.\n&#34;,
                $session-&#62;hostname(), $session-&#62;error();
      }

   }

   # Now initiate the SNMP message exchange.

   snmp_dispatcher();

   exit 0;

   sub get_callback
   {
      my ($session, $location) = @_;

      my $result = $session-&#62;var_bind_list();

      if (!defined $result) {
         printf &#34;ERROR: Get request failed for host &#39;%s&#39;: %s.\n&#34;,
                $session-&#62;hostname(), $session-&#62;error();
         return;
      }

      printf &#34;The sysUpTime for host &#39;%s&#39; is %s.\n&#34;,
              $session-&#62;hostname(), $result-&#62;{$OID_sysUpTime};

      # Now set the sysContact and sysLocation for the host.

      $result = $session-&#62;set_request(
         -varbindlist =&#62;
         [
            $OID_sysContact,  OCTET_STRING, &#39;Help Desk x911&#39;,
            $OID_sysLocation, OCTET_STRING, $location,
         ],
         -callback    =&#62; \&#38;set_callback,
      );

      if (!defined $result) {
         printf &#34;ERROR: Failed to queue set request for host &#39;%s&#39;: %s.\n&#34;,
                $session-&#62;hostname(), $session-&#62;error();
      }

      return;
   }

   sub set_callback
   {
      my ($session) = @_;

      my $result = $session-&#62;var_bind_list();

      if (defined $result) {
         printf &#34;The sysContact for host &#39;%s&#39; was set to &#39;%s&#39;.\n&#34;,
                $session-&#62;hostname(), $result-&#62;{$OID_sysContact};
         printf &#34;The sysLocation for host &#39;%s&#39; was set to &#39;%s&#39;.\n&#34;,
                $session-&#62;hostname(), $result-&#62;{$OID_sysLocation};
      } else {
         printf &#34;ERROR: Set request failed for host &#39;%s&#39;: %s.\n&#34;,
                $session-&#62;hostname(), $session-&#62;error();
      }

      return;
   }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="REQUIREMENTS"
>REQUIREMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li>The Net::SNMP module uses syntax that is not supported in versions of Perl earlier than v5.6.0.</li>

<li>The non-core modules <em>Crypt::DES</em>, <em>Digest::MD5</em>, <em>Digest::SHA1</em>, and <em>Digest::HMAC</em> are required to support SNMPv3.</li>

<li>In order to support the AES Cipher Algorithm as a SNMPv3 privacy protocol, the non-core module <em>Crypt::Rijndael</em> is needed.</li>

<li>To use UDP/IPv6 or TCP/IPv6 as a Transport Domain, the non-core module <em>Socket6</em> is needed.</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>David M. Town &#60;dtown@cpan.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACKNOWLEDGMENTS"
>ACKNOWLEDGMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The original concept for this module was based on <em>SNMP_Session.pm</em> written by Simon Leinen &#60;simon@switch.ch&#62;.</p>

<p>The Abstract Syntax Notation One (ASN.1) encode and decode methods were originally derived by example from the CMU SNMP package whose copyright follows: Copyright (c) 1988, 1989, 1991, 1992 by Carnegie Mellon University. All rights reserved.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE_AND_COPYRIGHT"
>LICENSE AND COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 1998-2010 David M. Town. All rights reserved.</p>

<p>This program is free software; you may redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78183 Uploads, 24710 Distributions
106004 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Wed Apr 25 08:43:09 2012 GMT (0.14659309387207) @cpansearch1 -->
 </body>
</html>
