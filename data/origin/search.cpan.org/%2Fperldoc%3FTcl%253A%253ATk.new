<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Tcl::Tk - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Tcl-Tk",3]);
    _gaq.push(["_setCustomVar",5,"Release","Tcl-Tk-1.04",3]);
    _gaq.push(["_setCustomVar",3,"Module","Tcl::Tk",3]);
    _gaq.push(["_setCustomVar",1,"Author","VKON",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Tcl::Tk">permalink</a></div>
  <a href="/~vkon/">Vadim Konovalov</a> &gt;
  <a href="/~vkon/Tcl-Tk-1.04/">Tcl-Tk-1.04</a> &gt;
  Tcl::Tk
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/3fc0f71a999b62748d23ab1c10f0b755?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/V/VK/VKON/Tcl-Tk-1.04.tar.gz">Tcl-Tk-1.04.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Tcl%3A%3ATk;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~VKON/Tcl-Tk-1.04/lib/Tcl/Tk.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Tk%3A%3AZinc">Tk::Zinc</a><br>
<a href="/perldoc?Win32%3A%3AGUI">Win32::GUI</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Tk%3A%3ATableMatrix">Tk::TableMatrix</a><br>
<a href="/perldoc?Tk%3A%3AMListbox">Tk::MListbox</a><br>
<a href="/perldoc?Tk%3A%3APNG">Tk::PNG</a><br>
<a href="/perldoc?GD%3A%3AGraph">GD::Graph</a><br>
<a href="/perldoc?MIME%3A%3ABase64">MIME::Base64</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?Tk%3A%3AGraph">Tk::Graph</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Tcl%3A%3ATk">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Tcl-Tk">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.04 &nbsp;
<span class="noprint">
  <a href="/src/VKON/Tcl-Tk-1.04/lib/Tcl/Tk.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Access_to_the_Tcl_and_Tcl::Tk_extensions'>Access to the Tcl and Tcl::Tk extensions</a>
    <li class='indexItem indexItem2'><a href='#Creating_a_Tcl_interpreter_for_Tk'>Creating a Tcl interpreter for Tk</a>
    <li class='indexItem indexItem2'><a href='#Entering_the_main_event_loop'>Entering the main event loop</a>
    <li class='indexItem indexItem2'><a href='#Creating_and_using_widgets'>Creating and using widgets</a>
    <ul   class='indexList indexList3'>
      <ul   class='indexList indexList4'>
        <li class='indexItem indexItem4'><a href='#Tcl/Tk_syntax'>Tcl/Tk syntax</a>
        <li class='indexItem indexItem4'><a href='#Perl/Tk_syntax'>Perl/Tk syntax</a>
      </ul>
      <li class='indexItem indexItem3'><a href='#OO_explanations_of_Widget-s_of_Tcl::Tk'>OO explanations of Widget-s of Tcl::Tk</a>
      <li class='indexItem indexItem3'><a href='#explanations_how_Widget-s_of_Tcl::Tk_methods_correspond_to_Tcl/Tk'>explanations how Widget-s of Tcl::Tk methods correspond to Tcl/Tk</a>
      <ul   class='indexList indexList4'>
        <li class='indexItem indexItem4'><a href='#faster_way_of_invoking_methods_on_widgets'>faster way of invoking methods on widgets</a>
      </ul>
    </ul>
    <li class='indexItem indexItem2'><a href='#using_any_Tcl/Tk_feature_with_Tcl::Tk_module'>using any Tcl/Tk feature with Tcl::Tk module</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#using_documentation_of_Tcl/Tk_widgets_for_applying_within_Tcl::Tk_module'>using documentation of Tcl/Tk widgets for applying within Tcl::Tk module</a>
      <li class='indexItem indexItem3'><a href='#$int-&#62;widget(_path,_widget-type_)_method'>$int-&#62;widget( path, widget-type ) method</a>
      <li class='indexItem indexItem3'><a href='#widget_data_method'>widget_data method</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Non-widget_Tk_commands'>Non-widget Tk commands</a>
    <li class='indexItem indexItem2'><a href='#Miscellaneous_methods'>Miscellaneous methods</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#$widget-&#62;tooltip(&#34;text&#34;)_method'>$widget-&#62;tooltip(&#34;text&#34;) method</a>
      <li class='indexItem indexItem3'><a href='#$int-&#62;create_rotext()_method'>$int-&#62;create_rotext() method</a>
      <li class='indexItem indexItem3'><a href='#$int-&#62;create_scrolled_widget(&#34;widgetname&#34;)_method'>$int-&#62;create_scrolled_widget(&#34;widgetname&#34;) method</a>
    </ul>
  </ul>
  <li class='indexItem indexItem1'><a href='#Points_of_special_care'>Points of special care</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Tcl::Tk - Extension module for Perl giving access to Tk via the Tcl extension</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use Tcl::Tk;
    my $int = new Tcl::Tk;
    my $mw = $int-&#62;mainwindow;
    my $lab = $mw-&#62;Label(-text =&#62; &#34;Hello world&#34;)-&#62;pack;
    my $btn = $mw-&#62;Button(-text =&#62; &#34;test&#34;, -command =&#62; sub {
        $lab-&#62;configure(-text=&#62;&#34;[&#34;. $lab-&#62;cget(&#39;-text&#39;).&#34;]&#34;);
    })-&#62;pack;
    $int-&#62;MainLoop;</pre>

<p>Or</p>

<pre class="sh_perl">    use Tcl::Tk;
    my $int = new Tcl::Tk;
    $int-&#62;Eval(&#60;&#60;&#39;EOS&#39;);
    # pure-tcl code to create widgets (e.g. generated by some GUI builder)
    entry .e
    button .inc -text {increment by Perl}
    pack .e .inc
    EOS
    my $btn = $int-&#62;widget(&#39;.inc&#39;); # get .inc button into play
    my $e = $int-&#62;widget(&#39;.e&#39;);     # get .e entry into play
    $e-&#62;configure(-textvariable=&#62;\(my $var=&#39;aaa&#39;));
    $btn-&#62;configure(-command=&#62;sub{$var++});
    $int-&#62;MainLoop;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <code>Tcl::Tk</code> module provides access to the Tk library within Tcl/Tk installation. By using this module an interpreter object created, which then gain access to entire variety of installed Tcl libraries (Tk, Tix, BWidgets, BLT, etc) and existing features (for example natively looking widgets using <code>tile</code>).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Access_to_the_Tcl_and_Tcl::Tk_extensions"
>Access to the Tcl and Tcl::Tk extensions</a></h2>

<p>To get access to the Tcl and Tcl::Tk extensions, put the command near the top of your program.</p>

<pre class="sh_perl">    use Tcl::Tk;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Creating_a_Tcl_interpreter_for_Tk"
>Creating a Tcl interpreter for Tk</a></h2>

<p>Before you start using widgets, an interpreter (at least one) should be created, which will manage all things in Tcl.</p>

<p>To create a Tcl interpreter initialised for Tk, use</p>

<pre class="sh_perl">    my $int = new Tcl::Tk;</pre>

<p>Optionally DISPLAY argument could be specified: <code>my $int = new Tcl::Tk(&#34;:5&#34;);</code>. This creates a Tcl interpreter object $int, and creates a main toplevel window. The window is created on display DISPLAY (defaulting to the display named in the DISPLAY environment variable)</p>

<p>The Tcl/Tk interpreter is created automatically by the call to <code>MainWindow</code> and <code>tkinit</code> methods, and main window object is returned in this case:</p>

<pre class="sh_perl">  use Tcl::Tk;
  my $mw = Tcl::Tk::MainWindow;
  my $int = $mw-&#62;interp;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Entering_the_main_event_loop"
>Entering the main event loop</a></h2>

<p>The Perl method call</p>

<pre class="sh_perl">    $int-&#62;MainLoop;</pre>

<p>on the Tcl::Tk interpreter object enters the Tk event loop. You can instead do <code>Tcl::Tk::MainLoop</code> or <code>Tcl::Tk-&#62;MainLoop</code> if you prefer. You can even do simply <code>MainLoop</code> if you import it from Tcl::Tk in the <code>use</code> statement.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Creating_and_using_widgets"
>Creating and using widgets</a></h2>

<p>Two different approaches are used to manipulate widgets (or, more commonly, to manipulate any Tcl objects behaving similarly)</p>

<ul>
<li>access with a special widget accessing syntax of kind <code>$widget-&#62;method;</code></li>

<li>random access with <code>Eval</code></li>
</ul>

<p>First way to manipulate widgets is identical to perl/Tk calling conventions, second one deploys Tcl syntax. Both ways are very interchangeable in that sence, a widget created with one way could be used by another way.</p>

<p>Usually Perl programs operate with Tcl/Tk via perl/Tk syntax, so user have no need to deal with Tcl language directly, only some basic understanding of widget is needed.</p>

<p>A possibility to use both approaches interchangeably gives an opportunity to use Tcl code created elsewhere (some WYSIWIG IDE or such).</p>

<p>In order to get better understanding on usage of Tcl/Tk widgets from within Perl, a bit of Tcl/Tk knowledge is needed, so we&#39;ll start from 2nd approach, with Tcl&#39;s Eval (<code>$int-&#62;Eval(&#39;...&#39;)</code>) and then smoothly move to 1st, approach with perl/Tk syntax.</p>

<h4><a class='u' href='#___top' title='click to go to top of document'
name="Tcl/Tk_syntax"
>Tcl/Tk syntax</a></h4>

<ul>
<li>interpreter
<p>Tcl interpreter is used to process Tcl/Tk widgets; within <code>Tcl::Tk</code> you create it with <code>new</code>, and, given any widget object, you can retreive it by <code>$widget-&#62;interp</code> method. Within pure Tcl/Tk it is already exist.</p>
</li>

<li>widget path
<p>Widget path is a string starting with a dot and consisting of several names separated by dots. These names are widget names that comprise widget&#39;s hierarchy. As an example, if there exists a frame with a path <code>.fram</code> and you want to create a button on it and name it <code>butt</code> then you should specify name <code>.fram.butt</code>. Widget paths are refered in miscellaneous widget operations, and geometry management is one of them.</p>

<p>At any time widget&#39;s path could be retreived with <code>$widget-&#62;path;</code> within <code>Tcl::Tk</code>.</p>
</li>

<li>widget as Tcl/Tk command
<p>when widget is created, a special command is created within Tk, the name of this command is widget&#39;s path. That said, <code>.fr.b</code> is Tk&#39;s command and this command has subcommands, those will help manipulating widget. That is why <code>$int-&#62;Eval(&#39;.fr.b configure -text {new text}&#39;);</code> makes sence. Note that <code>$button-&#62;configure(-text=&#62;&#39;new text&#39;);</code> does exactly that, provided a fact <code>$button</code> corresponds to <code>.fr.b</code> widget.</p>
</li>
</ul>

<p><code>use Tcl::Tk;</code> not only creates <code>Tcl::Tk</code> package, but also it creates <code>Tcl::Tk::Widget</code> package, responsible for widgets. Each widget (object blessed to <code>Tcl::Tk::Widget</code>, or other widgets in ISA-relationship) behaves in such a way that its method will result in calling it&#39;s path on interpreter.</p>

<h4><a class='u' href='#___top' title='click to go to top of document'
name="Perl/Tk_syntax"
>Perl/Tk syntax</a></h4>

<p><code>Tcl::Tk::Widget</code> package within <code>Tcl::Tk</code> module fully aware of perl/Tk widget syntax, which has long usage. This means that any <code>Tcl::Tk</code> widget has a number of methods like <code>Button</code>, <code>Frame</code>, <code>Text</code>, <code>Canvas</code> and so on, and invoking those methods will create appropriate child widget. <code>Tcl::Tk</code> module will generate an unique name of newly created widget.</p>

<p>To demonstrate this concept:</p>

<pre class="sh_perl">    my $label = $frame-&#62;Label(-text =&#62; &#34;Hello world&#34;);</pre>

<p>executes the command</p>

<pre class="sh_perl">    $int-&#62;call(&#34;label&#34;, &#34;.l&#34;, &#34;-text&#34;, &#34;Hello world&#34;);</pre>

<p>and this command similar to</p>

<pre class="sh_perl">    $int-&#62;Eval(&#34;label .l -text {Hello world}&#34;);</pre>

<p>This way Tcl::Tk widget commands are translated to Tcl syntax and directed to Tcl interpreter; understanding this helps in idea, why two approaches with dealing with widgets are interchangeable.</p>

<p>Newly created widget <code>$label</code> will be blessed to package <code>Tcl::Tk::Widget::Label</code> which is isa-<code>Tcl::Tk::Widget</code></p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="OO_explanations_of_Widget-s_of_Tcl::Tk"
>OO explanations of Widget-s of Tcl::Tk</a></h3>

<p><code>Tcl::Tk</code> widgets use object-oriented approach, which means a quite concrete object hierarchy presents. Interesting point about this object system - it is very dynamic. Initially no widgets objects and no widget classes present, but they immediately appear at the time when they needed.</p>

<p>So they virtually exist, but come into actual existance dynamically. This dynamic approach allows same usage of widget library without any mention from within <code>Tcl::Tk</code> module at all.</p>

<p>Let us look into following few lines of code:</p>

<pre class="sh_perl">  my $text = $mw-&#62;Text-&#62;pack;
  $text-&#62;insert(&#39;end&#39;, -text=&#62;&#39;text&#39;);
  $text-&#62;windowCreate(&#39;end&#39;, -window=&#62;$text-&#62;Label(-text=&#62;&#39;text of label&#39;));</pre>

<p>Internally, following mechanics comes into play. Text method creates Text widget (known as <code>text</code> in Tcl/Tk environment). When this creation method invoked first time, a package <code>Tcl::Tk::Widget::Text</code> is created, which will be OO presentation of all further Text-s widgets. All such widgets will be blessed to that package and will be in ISA-relationship with <code>Tcl::Tk::Widget</code>.</p>

<p>Second line calls method <code>insert</code> of <code>$text</code> object of type <code>Tcl::Tk::Widget::Text</code>. When invoked first time, a method <code>insert</code> is created in package <code>Tcl::Tk::Widget::Text</code>, with destiny to call <code>invoke</code> method of our widget in Tcl/Tk world.</p>

<p>At first time when <code>insert</code> is called, this method does not exist, so AUTOLOAD comes to play and creates such a method. Second time <code>insert</code> called already existing subroutine will be invoked, thus saving execution time.</p>

<p>As long as widgets of different type &#39;live&#39; in different packages, they do not intermix, so <code>insert</code> method of <code>Tcl::Tk::Widget::Listbox</code> will mean completely different behaviour.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="explanations_how_Widget-s_of_Tcl::Tk_methods_correspond_to_Tcl/Tk"
>explanations how Widget-s of Tcl::Tk methods correspond to Tcl/Tk</a></h3>

<p>Suppose <code>$widget</code> isa-<code>Tcl::Tk::Widget</code>, its path is <code>.path</code> and method <code>method</code> invoked on it with a list of parameters, <code>@parameters</code>:</p>

<pre class="sh_perl">  $widget-&#62;method(@parameters);</pre>

<p>In this case as a first step all <code>@parameters</code> will be preprocessed, during this preprocessing following actions are performed:</p>

<ol>
<li>for each variable reference its Tcl variable will be created and tied to it</li>

<li>for each code reference its Tcl command will be created and tied to it</li>

<li>each array reference considered as callback, and proper actions will be taken</li>
</ol>

<p>After adoptation of <code>@parameters</code> Tcl/Tk interpreter will be requested to perform following operation:</p>

<dl>
<dt><a name='if'></a><a name="if_$method_is_all_lowercase,_m/^[a-z]$/"
>if <code>$method</code> is all lowercase, <code>m/^[a-z]$/</code></a></dt>

<dd>
<p><code>.path method parameter1 parameter2</code> <i>....</i></p>

<dt><a name='if'></a><a name="if_$method_contains_exactly_one_capital_letter_inside_name,_m/^[a-z]+[A-Z][a-z]+$/"
>if <code>$method</code> contains exactly one capital letter inside name, <code>m/^[a-z]+[A-Z][a-z]+$/</code></a></dt>

<dd>
<p><code>.path method submethod parameter1 parameter2</code> <i>....</i></p>

<dt><a name='if'></a><a name="if_$method_contains_several_capital_letter_inside_name,_methodSubmethSubsubmeth"
>if <code>$method</code> contains several capital letter inside name, <code>methodSubmethSubsubmeth</code></a></dt>

<dd>
<p><code>.path method submeth subsubmeth parameter1 parameter2</code> <i>....</i></p>
</dd>
</dl>

<h4><a class='u' href='#___top' title='click to go to top of document'
name="faster_way_of_invoking_methods_on_widgets"
>faster way of invoking methods on widgets</a></h4>

<p>In case it is guaranteed that preprocessing of <code>@parameters</code> are not required (in case no parameters are Perl references to scalar, subroutine or array), then preprocessing step described above could be skipped.</p>

<p>To achieve that, prepend method name with underscore, <code>_</code>. Mnemonically it means you are using some internal method that executes faster, but normally you use &#34;public&#34; method, which includes all preprocessing.</p>

<p>Example:</p>

<pre class="sh_perl">   # at following line faster method is incorrect, as \$var must be
   # preprocessed for Tcl/Tk:
   $button-&#62;configure(-textvariable=&#62;\$var);

   # faster version of insert method of &#34;Text&#34; widget is perfectly possible
   $text-&#62;_insert(&#39;end&#39;,&#39;text to insert&#39;,&#39;tag&#39;);
   # following line does exactly same thing as previous line:
   $text-&#62;_insertEnd(&#39;text to insert&#39;,&#39;tag&#39;);</pre>

<p>When doing many inserts to text widget, faster version could fasten execution.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="using_any_Tcl/Tk_feature_with_Tcl::Tk_module"
>using any Tcl/Tk feature with Tcl::Tk module</a></h2>

<p>Tcl::Tk module allows using any widget from Tcl/Tk widget library with either Tcl syntax (via Eval), or with regular Perl syntax.</p>

<p>In order to provide perlTk syntax to any Tcl/Tk widget, only single call should be made, namely &#39;Declare&#39; method. This is a method of any widget in Tcl::Tk::Widget package, and also exactly the same method of Tcl::Tk interpreter object</p>

<p>Syntax is</p>

<pre class="sh_perl"> $widget-&#62;Declare(&#39;perlTk_widget_method_name&#39;,&#39;tcl/tk-widget_method_name&#39;,
    @options);</pre>

<p>or, exactly the same,</p>

<pre class="sh_perl"> $interp-&#62;Declare(&#39;perlTk_widget_method_name&#39;,&#39;tcl/tk-widget_method_name&#39;,
    @options);</pre>

<p>Options are:</p>

<pre class="sh_perl">  -require =&#62; &#39;tcl-package-name&#39;
  -prefix =&#62; &#39;some-prefix&#39;</pre>

<p>&#39;-require&#39; option specifies that said widget requires a Tcl package with a name of &#39;tcl-package-name&#39;; &#39;-prefix&#39; option used to specify a part of autogenerated widget name, usually used when Tcl widget name contain non-alphabet characters (e.g. &#39;:&#39;) so to keep autogenerated names syntaxically correct.</p>

<p>A typical example of such invocation is:</p>

<pre class="sh_perl">  $mw-&#62;Declare(&#39;BLTNoteBook&#39;,&#39;blt::tabnotebook&#39;,-require=&#62;&#39;BLT&#39;,-prefix=&#62;&#39;bltnbook&#39;);</pre>

<p>After such a call Tcl::Tk module will take a knowledge about tabnotebook widget from within BLT package and create proper widget creation method for it with a name BLTNoteBook. This means following statement:</p>

<pre class="sh_perl"> my $tab = $mw-&#62;BLTNoteBook;</pre>

<p>will create blt::tabnotebook widget. Effectively, this is similar to following Tcl/Tk code:</p>

<pre class="sh_perl">  package require BLT # but invoked only once
  blt::tabnotebook .bltnbook1</pre>

<p>Also, Perl variable $tab will contain ordinary Tcl/Tk widget that behaves in usual way, for example:</p>

<pre class="sh_perl">  $tab-&#62;insert(&#39;end&#39;, -text=&#62;&#39;text&#39;);
  $tab-&#62;tabConfigure(0, -window=&#62;$tab-&#62;Label(-text=&#62;&#39;text of label&#39;));</pre>

<p>These two lines are Tcl/Tk equivalent of:</p>

<pre class="sh_perl">  .bltnbook1 insert end -text {text}
  .bltnbook1 tab configure 0 -window [label .bltnbook1.lab1 -text {text of label}]</pre>

<p>Given all previously said, you can also write intermixing both approaches:</p>

<pre class="sh_perl">  $interp-&#62;Eval(&#39;package require BLT;blt::tabnotebook .bltnbook1&#39;);
  $tab = $interp-&#62;widget(&#39;.bltnbook1&#39;);
  $tab-&#62;tabConfigure(0, -window=&#62;$tab-&#62;Label(-text=&#62;&#39;text of label&#39;));</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="using_documentation_of_Tcl/Tk_widgets_for_applying_within_Tcl::Tk_module"
>using documentation of Tcl/Tk widgets for applying within Tcl::Tk module</a></h3>

<p>As a general rule, you need to consult TCL man pages to realize how to use a widget, and after that invoke perl command that creates it properly. When reading Tcl/Tk documentation about widgets, quite simple transformation is needed to apply to Tcl::Tk module.</p>

<p>Suppose it says:</p>

<pre class="sh_perl">  pathName method-name optional-parameters
     (some description)</pre>

<p>you should understand, that widget in question has method <code>method-name</code> and you could invoke it as</p>

<pre class="sh_perl">  $widget-&#62;method-name(optional-parameters);</pre>

<p>$widget is that widget with pathName, created with perl/Tk syntax, or fetched by <code>$int-&#62;widget</code> method.</p>

<p>Sometimes in Tcl/Tk method-name consist of two words (verb1 verb2), in this case there are two ways to invoke it, <code>$widget-&#62;verb1(&#39;verb2&#39;,...);</code> or it <code>$widget-&#62;verb1Verb2(...);</code> - those are identical.</p>

<p>Widget options are same within Tcl::Tk and Tcl/Tk.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="$int-&#62;widget(_path,_widget-type_)_method"
><code>$int-&#62;widget( path, widget-type )</code> method</a></h3>

<p>When widgets are created they are stored internally and could be retreived by <code>widget()</code>, which takes widget path as first parameter, and optionally widget type (such as Button, or Text etc.). Example:</p>

<pre class="sh_perl">    # this will retrieve widget, and then call configure on it
    widget(&#34;.fram.butt&#34;)-&#62;configure(-text=&#62;&#34;new text&#34;);

    # this will retrieve widget as Button (Tcl::Tk::Widget::Button object)
    my $button = widget(&#34;.fram.butt&#34;, &#39;Button&#39;);
    
    # same but retrieved widget considered as general widget, without
    # concrete specifying its type (Tcl::Tk::Widget object)
    my $button = widget(&#34;.fram.butt&#34;);</pre>

<p>Please note that this method will return to you a widget object even if it was not created within this module, and check will not be performed whether a widget with given path exists, despite of fact that checking for existence of a widget is an easy task (invoking <code>$interp-&#62;Eval(&#34;info commands $path&#34;);</code> will do this). Instead, you will receive perl object that will try to operate with widget that has given path even if such path do not exists. In case it do not actually exist, you will receive an error from Tcl/Tk.</p>

<p>To check if a widget with a given path exists use <code>Tcl::Tk::Exists($widget)</code> subroutine. It queries Tcl/Tk for existance of said widget.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="widget_data_method"
><code>widget_data</code> method</a></h3>

<p>If you need to associate any data with particular widget, you can do this with <code>widget_data</code> method of either interpreter or widget object itself. This method returns same anonymous hash and it should be used to hold any keys/values pairs.</p>

<p>Examples:</p>

<pre class="sh_perl">  $interp-&#62;widget_data(&#39;.fram1.label2&#39;)-&#62;{var} = &#39;value&#39;;
  $label-&#62;widget_data()-&#62;{var} = &#39;value&#39;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Non-widget_Tk_commands"
>Non-widget Tk commands</a></h2>

<p>Many non-widget Tk commands are also available within Tcl::Tk module, such as <code>focus</code>, <code>wm</code>, <code>winfo</code> and so on. If some of them not present directly, you can always use <code>$int-&#62;Eval(&#39;...&#39;)</code> approach.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Miscellaneous_methods"
>Miscellaneous methods</a></h2>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="$widget-&#62;tooltip(&#34;text&#34;)_method"
><code>$widget-&#62;tooltip(&#34;text&#34;)</code> method</a></h3>

<p>Any widget accepts <code>tooltip</code> method, accepting any text as parameter, which will be used as floating help text explaining the widget. The widget itself is returned, so to provide convenient way of chaining:</p>

<pre class="sh_perl">  $mw-&#62;Button(-text=&#62;&#34;button 1&#34;)-&#62;tooltip(&#34;This is a button, m-kay&#34;)-&#62;pack;
  $mw-&#62;Entry(-textvariable=&#62;\my $e)-&#62;tooltip(&#34;enter the text here, m-kay&#34;)-&#62;pack;</pre>

<p><code>tooltip</code> method uses <code>tooltip</code> package, which is a part of <code>tklib</code> within Tcl/Tk, so be sure you have it installed.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="$int-&#62;create_rotext()_method"
><code>$int-&#62;create_rotext()</code> method</a></h3>

<p>This method creates &#34;rotext&#34; type of widget within Tcl/Tk, which then could be used for example as</p>

<pre class="sh_perl">  $int-&#62;Eval(&#39;rotext .ro1&#39;);</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="$int-&#62;create_scrolled_widget(&#34;widgetname&#34;)_method"
><code>$int-&#62;create_scrolled_widget(&#34;widgetname&#34;)</code> method</a></h3>

<p>This method creates &#34;scrolled&#34; type of widget for a given widget type within Tcl/Tk. For example:</p>

<pre class="sh_perl">  $int-&#62;create_scrolled_widget(&#34;canvas&#34;);
  $int-&#62;Eval(&#39;scrolled_canvas .scanv&#39;);</pre>

<p>This way you can even create a perl/Tk-style widget to be initially scrollable:</p>

<pre class="sh_perl">  $int-&#62;create_scrolled_widget(&#34;text&#34;); # introduce scrolled_text in Tcl/Tk
  $int-&#62;Declare(&#39;SText&#39;,&#39;scrolled_text&#39;); # bind scrolled_text to Tcl::Tk as SText
  # now use SText instead of Scrolled(&#39;Text&#39;,...) everywhere in program
  $int-&#62;mainwindow-&#62;SText-&#62;pack(-fill=&#62;&#39;both&#39;);</pre>

<p>The scrolling is taken from snit (scrodgets), and the resulting widget have both scrolled options/methods and widget&#39;s options/methods.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Points_of_special_care"
>Points of special care <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='list'></a><a name="list_context_and_scalar_context"
>list context and scalar context</a></dt>

<dd>
<p>When widget method returns some result, this result becomes transformed according to the context, either list or scalar context. Sometimes this transformation is right, but sometimes its not. Unfortunately there are many cases, when Tcl/Tk returns a string, and this string become broken into words, because the function call is placed in list context.</p>

<p>In such cases concatenate such call with empty string to force right behaviour:</p>

<pre class="sh_perl">  use Tcl::Tk;
  my $mw = Tcl::Tk::tkinit;
  my $int = $mw-&#62;interp;
  my $but = $mw-&#62;Button(-text=&#62;&#39;1 2  3&#39;)-&#62;pack;
  print &#34;[&#34;, $but-&#62;cget(&#39;-text&#39;), &#34;] wrong - widget method returns 3 values!\n&#34;;
  print &#34;[&#34;, &#34;&#34;.$but-&#62;cget(&#39;-text&#39;), &#34;] CORRECT - 1 value in scalar context\n&#34;;
  $int-&#62;MainLoop;</pre>

<p>Actually, the example above will work correctly, because currently list of function names having list results are maintained. But please contact developers if you find misbehaving widget method!</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Currently work is in progress, and some features could change in future versions.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='Malcolm'></a><a name="Malcolm_Beattie."
>Malcolm Beattie.</a></dt>

<dd>
<dt><a name='Vadim'></a><a name="Vadim_Konovalov,_vadim_tcltk@vkonovalov.ru_19_May_2003."
>Vadim Konovalov, vadim_tcltk@vkonovalov.ru 19 May 2003.</a></dt>

<dd>
<dt><a name='Jeff'></a><a name="Jeff_Hobbs,_jeffh__a__activestate_com,_February_2004."
>Jeff Hobbs, jeffh _a_ activestate com, February 2004.</a></dt>

<dd>
<dt><a name='Gisle'></a><a name="Gisle_Aas,_gisle__a__activestate_._com,_14_Apr_2004."
>Gisle Aas, gisle _a_ activestate . com, 14 Apr 2004.</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>See <a href="http://www.perl.com/perl/misc/Artistic.html" class="podlinkurl"
>http://www.perl.com/perl/misc/Artistic.html</a></p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78131 Uploads, 24700 Distributions
105950 Modules, 9642 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Tue Apr 24 09:52:02 2012 GMT (0.163692951202393) @cpansearch1 -->
 </body>
</html>
