<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Module::Install - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Module-Install",3]);
    _gaq.push(["_setCustomVar",5,"Release","Module-Install-1.06",3]);
    _gaq.push(["_setCustomVar",3,"Module","Module::Install",3]);
    _gaq.push(["_setCustomVar",1,"Author","ADAMK",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Module::Install">permalink</a></div>
  <a href="/~adamk/">Adam Kennedy</a> &gt;
  <a href="/~adamk/Module-Install-1.06/">Module-Install-1.06</a> &gt;
  Module::Install
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/884124d0169f41668fb3f948b2ba8b0a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/A/AD/ADAMK/Module-Install-1.06.tar.gz">Module-Install-1.06.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Module%3A%3AInstall;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~ADAMK/Module-Install-1.06/lib/Module/Install.pod">Annotate this POD
(2)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Module%3A%3ABuild">Module::Build</a><br>
<a href="/perldoc?Object%3A%3AInsideOut">Object::InsideOut</a><br>
<a href="/perldoc?Test%3A%3AMore">Test::More</a><br>
<a href="/perldoc?Inline%3A%3AC">Inline::C</a><br>
<a href="/perldoc?Net%3A%3ASSLeay">Net::SSLeay</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?List%3A%3AUtil">List::Util</a><br>
<a href="/perldoc?Scalar%3A%3AUtil">Scalar::Util</a><br>
<a href="/perldoc?Test%3A%3AException">Test::Exception</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Module%3A%3AInstall">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 29</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 27</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Module-Install">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.06 &nbsp;
<span class="noprint">
  <a href="/src/ADAMK/Module-Install-1.06/lib/Module/Install.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Writing_Module::Install_Installers'>Writing Module::Install Installers</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#How_it_Works'>How it Works</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#History'>History</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#COMMON_COMMANDS'>COMMON COMMANDS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#name'>name</a>
    <li class='indexItem indexItem2'><a href='#all_from'>all_from</a>
    <li class='indexItem indexItem2'><a href='#abstract'>abstract</a>
    <li class='indexItem indexItem2'><a href='#abstract_from'>abstract_from</a>
    <li class='indexItem indexItem2'><a href='#author'>author</a>
    <li class='indexItem indexItem2'><a href='#author_from'>author_from</a>
    <li class='indexItem indexItem2'><a href='#version'>version</a>
    <li class='indexItem indexItem2'><a href='#version_from'>version_from</a>
    <li class='indexItem indexItem2'><a href='#license'>license</a>
    <li class='indexItem indexItem2'><a href='#license_from'>license_from</a>
    <li class='indexItem indexItem2'><a href='#perl_version'>perl_version</a>
    <li class='indexItem indexItem2'><a href='#perl_version_from'>perl_version_from</a>
    <li class='indexItem indexItem2'><a href='#recommends'>recommends</a>
    <li class='indexItem indexItem2'><a href='#requires'>requires</a>
    <li class='indexItem indexItem2'><a href='#test_requires'>test_requires</a>
    <li class='indexItem indexItem2'><a href='#configure_requires'>configure_requires</a>
    <li class='indexItem indexItem2'><a href='#requires_external_bin'>requires_external_bin</a>
    <li class='indexItem indexItem2'><a href='#install_script'>install_script</a>
    <li class='indexItem indexItem2'><a href='#no_index'>no_index</a>
    <li class='indexItem indexItem2'><a href='#installdirs,_install_as_*'>installdirs, install_as_*</a>
    <li class='indexItem indexItem2'><a href='#WriteAll'>WriteAll</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXTENSIONS'>EXTENSIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Standard_Extensions'>Standard Extensions</a>
    <li class='indexItem indexItem2'><a href='#Private_Extensions'>Private Extensions</a>
    <li class='indexItem indexItem2'><a href='#Administrative_Extensions'>Administrative Extensions</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXTENSIONS'>EXTENSIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Module::Install::AutoInstall'>Module::Install::AutoInstall</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::Base'>Module::Install::Base</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::Bundle'>Module::Install::Bundle</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::Fetch'>Module::Install::Fetch</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::Include'>Module::Install::Include</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::Inline'>Module::Install::Inline</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::Makefile'>Module::Install::Makefile</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::Metadata'>Module::Install::Metadata</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::PAR'>Module::Install::PAR</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::Run'>Module::Install::Run</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::Scripts'>Module::Install::Scripts</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::Win32'>Module::Install::Win32</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::WriteAll'>Module::Install::WriteAll</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::Admin::Find'>Module::Install::Admin::Find</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::Admin::Manifest'>Module::Install::Admin::Manifest</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::Admin::Metadata'>Module::Install::Admin::Metadata</a>
    <li class='indexItem indexItem2'><a href='#Module::Install::Admin::ScanDeps'>Module::Install::Admin::ScanDeps</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#FAQ'>FAQ</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#What_are_the_benefits_of_using_Module::Install?'>What are the benefits of using Module::Install?</a>
    <li class='indexItem indexItem2'><a href='#Module::Install_isn&#39;t_at_1.00_yet,_is_it_safe_to_use_yet?'>Module::Install isn&#39;t at 1.00 yet, is it safe to use yet?</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#COOKBOOK_/_EXAMPLES'>COOKBOOK / EXAMPLES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Method::Alias'>Method::Alias</a>
    <li class='indexItem indexItem2'><a href='#File::HomeDir'>File::HomeDir</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#TO_DO'>TO DO</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#SUPPORT'>SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Module::Install - Standalone,
extensible Perl module installer</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>In your <em>Makefile.PL</em>: (Recommended Usage)</p>

<pre class="sh_perl">  use inc::Module::Install;
  
  # Define metadata
  name           &#39;Your-Module&#39;;
  all_from       &#39;lib/Your/Module.pm&#39;;
  
  # Specific dependencies
  requires       &#39;File::Spec&#39;  =&#62; &#39;0.80&#39;;
  test_requires  &#39;Test::More&#39;  =&#62; &#39;0.42&#39;;
  recommends     &#39;Text::CSV_XS&#39;=&#62; &#39;0.50&#39;;
  no_index       &#39;directory&#39;   =&#62; &#39;demos&#39;;
  install_script &#39;myscript&#39;;
  
  WriteAll;</pre>

<p>Quickly upgrade a legacy <a href="/perldoc?ExtUtil%3A%3AMakeMaker" class="podlinkpod"
>ExtUtil::MakeMaker</a> installer:</p>

<pre class="sh_perl">  use inc::Module::Install;
  WriteMakefile( ... );</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>Module::Install</b> is a package for writing installers for CPAN (or CPAN-like) distributions that are clean, simple, minimalist, act in a strictly correct manner with <a href="/perldoc?ExtUtils%3A%3AMakeMaker" class="podlinkpod"
>ExtUtils::MakeMaker</a>, and will run on any Perl installation version 5.005 or newer.</p>

<p>The intent is to make it as easy as possible for CPAN authors (and especially for first-time CPAN authors) to have installers that follow all the best practices for distribution installation, but involve as much DWIM (Do What I Mean) as possible when writing them.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Writing_Module::Install_Installers"
>Writing Module::Install Installers</a></h2>

<p>The quickest way to get started with Module::Install is to copy the <a href="#SYNOPSIS" class="podlinkpod"
>&#34;SYNOPSIS&#34;</a> from above and save it as your own <em>Makefile.PL</em>. Then modify the file to suit your own particular case, using the list of commands documented in <a href="#COMMON_COMMANDS" class="podlinkpod"
>&#34;COMMON COMMANDS&#34;</a> below.</p>

<p>If all you want to do is write an installer, go and do that now. You don&#39;t really need the rest of this description unless you are interested in the details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="How_it_Works"
>How it Works <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The motivation behind <b>Module::Install</b> is that distributions need to interact with a large number of different versions of <a href="/perldoc?perl" class="podlinkpod"
>perl</a> and module installers infrastructure, primarily <a href="/perldoc?CPAN.pm" class="podlinkpod"
>CPAN.pm</a>, <a href="/perldoc?CPANPLUS.pm" class="podlinkpod"
>CPANPLUS.pm</a>, <a href="/perldoc?ExtUtils%3A%3AMakeMaker" class="podlinkpod"
>ExtUtils::MakeMaker</a> and <a href="/perldoc?Module%3A%3ABuild" class="podlinkpod"
>Module::Build</a>.</p>

<p>These have accumulated <b>greatly</b> varying feature and bug profiles over the years, and it is now very difficult to write an installer that will work properly using only the installed versions of these modules,</p>

<p>For example, the <a href="/perldoc?CPAN.pm" class="podlinkpod"
>CPAN.pm</a> version shipped with Perl 5.005 is now 5+ years old and considered highly buggy, yet it still exists on quite a number of legacy machines.</p>

<p>Rather than try to target one specific installer and/or make you add twisty workaround expressions to every piece of install code you write, <b>Module::Install</b> will copy part of itself into each module distribution it creates.</p>

<p>This allows new improvements to be used in your installers regardless of the age of the system a distribution is being installed on, at the cost of a small increase in the size of your distribution.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="History"
>History</a></h2>

<p>This module was originally written by Brian Ingerson as a smart drop-in replacement for <a href="/perldoc?ExtUtils%3A%3AMakeMaker" class="podlinkpod"
>ExtUtils::MakeMaker</a>.</p>

<p>For more information, see Brian&#39;s <i>Creating Module Distributions with Module::Install</i> in June 2003 issue of The Perl Journal (<a href="http://www.tpj.com/issues/" class="podlinkurl"
>http://www.tpj.com/issues/</a>).</p>

<p>For a <b>lot</b> more information, and some personal opinions on the module and its creation, see <a href="/~adamk/Module-Install-1.06/lib/Module/Install/Philosophy.pod" class="podlinkpod"
>Module::Install::Philosophy</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COMMON_COMMANDS"
>COMMON COMMANDS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following are the most common commands generally used in installers.</p>

<p>It is far from an exhaustive list, as many of the plugins provide commands to work in more details that you would normally need.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="name"
>name</a></h2>

<pre class="sh_perl">  name &#39;My-Module&#39;;</pre>

<p>The <b>name</b> command is compulsory command, generally the first.</p>

<p>It provides the name of your distribution, which for a module like <b>Your::Module</b> would normally be <code>Your-Module</code>.</p>

<p>This naming scheme is not hard and fast and you should note that distributions are actually a separate naming scheme from modules.</p>

<p>For example the <a href="/perldoc?LWP" class="podlinkpod"
>LWP</a> modules come in a distribution called <code>libwww-perl</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="all_from"
>all_from</a></h2>

<pre class="sh_perl">  all_from &#39;lib/My/Module.pm&#39;;</pre>

<p>For most simple Perl distributions that feature one dominant module or class as the base, you can get the most Do What I Mean functionality by using the <b>all_from</b> command, which will try to extract as much metadata as possible from the Perl code and POD in that primary module.</p>

<p>Functionally, <code>all_from</code> is equivalent to <code>abstract_from</code> + <code>author_from</code> + <code>version_from</code> + <code>license_from</code> + <code>perl_version_from</code>. See below for details.</p>

<p>If any of these values are set already <b>before</b> <code>all_from</code> is used, they will kept and <b>not</b> be overwritten.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="abstract"
>abstract</a></h2>

<pre class="sh_perl">  abstract &#39;This distribution does something&#39;;</pre>

<p>All distributions have an abstract, a short description of the distribution as a whole. It is usually around 30-70 characters long.</p>

<p>The <code>abstract</code> command is used to explicitly set the abstract for the distribution, at least as far as the metadata file for the distribution is concerned.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="abstract_from"
>abstract_from</a></h2>

<pre class="sh_perl">  abstract_from &#39;lib/My/Module.pm&#39;;</pre>

<p>The <code>abstract_from</code> command retrieves the abstract from a particular file contained in the distribution package. Most often this is done from the main module, where <code>Module::Install</code> will read the POD and use whatever is in the <code>=head1 NAME</code> section (with module name stripped if needed)</p>

<p><code>abstract_from</code> is set as part of <code>all_from</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="author"
>author</a></h2>

<pre class="sh_perl">  author &#39;Adam Kennedy &#60;adamk@cpan.org&#62;&#39;;</pre>

<p>The distribution metadata contains information on the primary author or the distribution, or the primary maintainer if the original author is no longer involved. It should generally be specified in the form of an email address.</p>

<p>It you don&#39;t want to give away a real email address, you should use the <code>CPANID@cpan.org</code> address you receive automatically when you got your PAUSE account.</p>

<p>The <code>author</code> command is used to explicitly set this value.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="author_from"
>author_from</a></h2>

<pre class="sh_perl">  author_from &#39;lib/My/Module.pm&#39;;</pre>

<p>The <code>author_from</code> command retrieves the author from a particular file contained in the distribution package. Most often this is done using the main module, where <a href="/~adamk/Module-Install-1.06/lib/Module/Install.pod" class="podlinkpod"
>Module::Install</a> will read the POD and use whatever it can find in the <code>=head1 AUTHOR</code> section.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="version"
>version</a></h2>

<pre class="sh_perl">  version &#39;0.01&#39;;</pre>

<p>The <code>version</code> command is used to specify the version of the distribution, as distinct from the version of any single module within the distribution.</p>

<p>Of course, in almost all cases you want it to match the version of the primary module within the distribution, which you can do using <code>version_from</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="version_from"
>version_from</a></h2>

<pre class="sh_perl">  version_from &#39;lib/My/Module.pm&#39;;</pre>

<p>The <code>version_from</code> command retrieves the distribution version from a particular file contained in the distribution package. Most often this is done from the main module.</p>

<p><code>version_from</code> will look for the first time you set <code>$VERSION</code> and use the same value, using a technique consistent with various other module version scanning tools.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="license"
>license</a></h2>

<pre class="sh_perl">  license &#39;perl&#39;;</pre>

<p>The <code>license</code> command specifies the license for the distribution.</p>

<p>Most often this value will be <code>&#39;perl&#39;</code>, meaning <i>&#34;the same as for Perl itself&#34;</i>. Other allowed values include <code>&#39;gpl&#39;</code>, <code>&#39;lgpl&#39;</code>, <code>&#39;bsd&#39;</code>, <code>&#39;MIT&#39;</code>, and <code>&#39;artistic&#39;</code>.</p>

<p>This value is always considered a summary, and it is normal for authors to include a <em>LICENSE</em> file in the distribution, containing the full license for the distribution.</p>

<p>You are also reminded that if the distribution is intended to be uploaded to the CPAN, it <b>must</b> be an OSI-approved open source license. Commercial software is not permitted on the CPAN.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="license_from"
>license_from</a></h2>

<pre class="sh_perl">  license_from &#39;lib/My/Module.pm&#39;;</pre>

<p>The <code>license_from</code> command retrieves the distribution license from a particular file contained in the distribution package. Most often this is done from the main module.</p>

<p><code>license_from</code> will look inside the POD within the indicated file for a licensing or copyright-related section and scan for a variety of strings that identify the general class of license.</p>

<p>At this time it supports only the 6 values mentioned above in the <code>license</code> command summary.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="perl_version"
>perl_version</a></h2>

<pre class="sh_perl">  perl_version &#39;5.006&#39;;</pre>

<p>The <code>perl_version</code> command is used to specify the minimum version of the perl interpreter your distribution requires.</p>

<p>When specifying the version, you should try to use the normalized version string. Perl version segments are 3 digits long, so a dependency on Perl 5.6 will become <code>&#39;5.006&#39;</code> and Perl 5.10.2 will become <code>&#39;5.010002&#39;</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="perl_version_from"
>perl_version_from</a></h2>

<pre class="sh_perl">  perl_version_from &#39;lib/My/Module.pm&#39;</pre>

<p>The <code>perl_version_from</code> command retrieves the minimum <em>perl</em> interpreter version from a particular file contained in the distribution package. Most often this is done from the main module.</p>

<p>The minimum version is detected by scanning the file for <code>use 5.xxx</code> pragma calls in the module file.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="recommends"
>recommends</a></h2>

<pre class="sh_perl">  recommends &#39;Text::CSV_XS&#39; =&#62; &#39;0.50&#39;</pre>

<p>The <code>recommends</code> command indicates an optional run-time module that provides extra functionality. Recommended dependencies are not needed to build or test your distribution, but are considered &#34;nice to have&#34;.</p>

<p>As with <a href="#requires" class="podlinkpod"
>&#34;requires&#34;</a>, the dependency is on a <b>module</b> and not a distribution. A version of zero indicates that any version of the module is recommended.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="requires"
>requires</a></h2>

<pre class="sh_perl">  requires &#39;List::Util&#39; =&#62; 0;
  requires &#39;LWP&#39;        =&#62; &#39;5.69&#39;;</pre>

<p>The <code>requires</code> command indicates a normal run-time dependency of your distribution on another module. Most distributions will have one or more of these commands, indicating which CPAN (or otherwise) modules your distribution needs.</p>

<p>A <code>requires</code> dependency can be verbalised as <i>&#34;If you wish to install and use this distribution, you must first install these modules first&#34;</i>.</p>

<p>Note that the dependency is on a <b>module</b> and not a distribution. This is to ensure that your dependency stays correct, even if the module is moved or merged into a different distribtion, as is occasionally the case.</p>

<p>A dependency on version zero indicates <b>any</b> version of module is sufficient. Versions should generally be quoted for clarity.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="test_requires"
>test_requires</a></h2>

<pre class="sh_perl">  test_requires &#39;Test::More&#39; =&#62; &#39;0.47&#39;;</pre>

<p>The <code>test_requires</code> command indicates a test script dependency for the distribution. The specification format is identical to that of the <code>requires</code> command.</p>

<p>The <code>test_requires</code> command is distinct from the <code>requires</code> command in that it indicates a module that is needed <b>only</b> during the testing of the distribution (often a period of only a few seconds) but will <b>not</b> be needed after the distribution is installed.</p>

<p>The <code>testrequires</code> command is used to allow the installer some flexibility in how it provides the module, and to allow downstream packagers (Debian, FreeBSD, ActivePerl etc) to retain only the dependencies needed for run-time operation.</p>

<p>The <code>include</code> command is sometimes used by some authors along with <code>test_requires</code> to bundle a small well-tested module into the distribution package itself rather than inflict yet another module installation on users installing from CPAN directly.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="configure_requires"
>configure_requires</a></h2>

<pre class="sh_perl">  configure_requires &#39;File::Spec&#39; =&#62; &#39;0.80&#39;;</pre>

<p>The <code>configure_requires</code> command indicates a configure-time dependency for the distribution. The specification format is identical to that of the <code>requires</code> command.</p>

<p>The <code>configure_requires</code> command is used to get around the conundrum of how to use a CPAN module in your Makefile.PL, when you have to load Makefile.PL (and thus the CPAN module) in order to know that you need it.</p>

<p>Traditionally, this circular logic could not be broken and so Makefile.PL scripts needed to rely on lowest-common-denominator approaches, or to bundle those dependencies using something like the <code>include</code> command.</p>

<p>The <code>configure_requires</code> command creates an entry in the special configure_requires: key in the distribution&#39;s <em>META.yml</em> file.</p>

<p>Although most of <em>META.yml</em> is considered advisory only, a <a href="/perldoc?CPAN" class="podlinkpod"
>CPAN</a> client will treat the contents of configure_requires: as authorative, and install the listed modules <b>before</b> it executes the <em>Makefile.PL</em> (from which it then determines the other dependencies).</p>

<p>Please note that support for configure_requires: in CPAN clients is not 100% complete at time of writing, and still cannot be relied upon.</p>

<p>Because <b>Module::Install</b> itself only supports 5.005, it will silently add the equivalent of a <code>configure_requires( perl =&#62; &#39;5.005&#39; );</code> command to your distribution.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="requires_external_bin"
>requires_external_bin</a></h2>

<pre class="sh_perl">  requires_external_bin &#39;cvs&#39;;</pre>

<p>As part of its role as the dominant &#34;glue&#34; language, a lot of Perl modules run commands or programs on the host system.</p>

<p>The <code>requires_external_bin</code> command is used to verify that a particular command is available on the host system.</p>

<p>Unlike a missing Perl module, a missing external binary is unresolvable at make-time, and so the <em>Makefile.PL</em> run will abort with a &#34;NA&#34; (Not Applicable) result.</p>

<p>In future, this command will also add additional information to the metadata for the dist, so that auto-packagers for particular operating system are more-easily able to auto-discover the appropriate non-Perl packages needed as a dependency.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="install_script"
>install_script</a></h2>

<pre class="sh_perl">  # The following are equivalent
  install_script &#39;script/scriptname&#39;</pre>

<p>The <code>install_script</code> command provides support for the installation of scripts that will become available at the console on both Unix and Windows (in the later case by wrapping it up as a .bat file).</p>

<p>Note that is it normal practice to <b>not</b> put a .pl on the end of such scripts, so that they feel more natural when being used.</p>

<p>In the example above, the <em>script/scriptname</em> program could be run after the installation just by doing the following.</p>

<pre class="sh_perl">  &#62; scriptname
  Running scriptname 0.01...
  
  &#62; </pre>

<p>By convention, scripts should be placed in a /script directory within your distribution. To support less typing, if a script is located in the script directory, you need refer to it by name only.</p>

<pre class="sh_perl">  # The following are equivalent
  install_script &#39;foo&#39;;
  install_script &#39;script/foo&#39;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="no_index"
>no_index</a></h2>

<pre class="sh_perl">  no_index directory =&#62; &#39;examples&#39;;
  no_index package   =&#62; &#39;DB&#39;;</pre>

<p>Quite often a distrubition will provide example scripts or testing modules (.pm files) as well as the actual library modules.</p>

<p>In almost all situations, you do <b>not</b> want these indexed in the CPAN index, the master Perl packages list, or displayed on the <a href="http://search.cpan.org/" class="podlinkurl"
>http://search.cpan.org/</a> website, you just want them along for the ride.</p>

<p>The <code>no_index</code> command is used to indicate directories or files where there might be non-library .pm files or other files that the CPAN indexer and websites such as <a href="http://search.cpan.org/" class="podlinkurl"
>http://search.cpan.org/</a> should explicitly ignore.</p>

<p>The most common situation is to ignore example or demo directories, but a variety of different situations may require a <code>no_index</code> entry.</p>

<p>Another common use for <code>no_index</code> is to prevent the PAUSE indexer complaining when your module makes changes inside a &#34;package DB&#34; block. This is used to interact with the debugger in some specific ways.</p>

<p>See the <em>META.yml</em> documentation for more details on what <code>no_index</code> values are allowed.</p>

<p>The <em>inc</em>, <em>t</em> and <em>share</em> (if <code>install_share</code> is used) directories are automatically <code>no_index</code>&#39;ed for you if found and do not require an explicit command.</p>

<p>To summarize, if you can see it on <a href="http://search.cpan.org/" class="podlinkurl"
>http://search.cpan.org/</a> and you shouldn&#39;t be able to, you need a <code>no_index</code> entry to remove it.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="installdirs,_install_as_*"
>installdirs, install_as_*</a></h2>

<pre class="sh_perl">  installdirs &#39;site&#39;; # the default

  install_as_core;    # alias for installdirs &#39;perl&#39;
  install_as_cpan;    # alias for installdirs &#39;site&#39;
  install_as_site;    # alias for installdirs &#39;site&#39;
  install_as_vendor;  # alias for installdirs &#39;vendor&#39;</pre>

<p>The <code>installdirs</code> and <code>install_as</code> commands specify the location where the module should be installed; this is the equivalent to <a href="/perldoc?ExtUtils%3A%3AMakeMaker" class="podlinkpod"
>ExtUtils::MakeMaker</a>&#39;s <code>INSTALLDIRS</code> option. For almost all regular modules, the default is recommended, and need not be changed. Dual-life (core and CPAN) modules, as well as vendor-specific modules, may need to use the other options.</p>

<p>If unsure, do not use this option.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="WriteAll"
>WriteAll</a></h2>

<p>The <code>WriteAll</code> command is generally the last command in the file; it writes out <em>META.yml</em> and <em>Makefile</em> so the user can run the <code>make</code>, <code>make test</code>, <code>make install</code> install sequence.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXTENSIONS"
>EXTENSIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>All extensions belong to the <b>Module::Install::*</b> namespace, and inherit from <b>Module::Install::Base</b>. There are three categories of extensions:</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Standard_Extensions"
>Standard Extensions</a></h2>

<p>Methods defined by a standard extension may be called as plain functions inside <em>Makefile.PL</em>; a corresponding singleton object will be spawned automatically. Other extensions may also invoke its methods just like their own methods:</p>

<pre class="sh_perl">    # delegates to $other_extension_obj-&#62;method_name(@args)
    $self-&#62;method_name(@args);</pre>

<p>At the first time an extension&#39;s method is invoked, a POD-stripped version of it will be included under the <em>inc/Module/Install/</em> directory, and becomes <i>fixed</i> -- i.e., even if the user had installed a different version of the same extension, the included one will still be used instead.</p>

<p>If the author wish to upgrade extensions in <em>inc/</em> with installed ones, simply run <code>perl Makefile.PL</code> again; <b>Module::Install</b> determines whether you are an author by the existence of the <em>inc/.author/</em> directory. End-users can reinitialize everything and become the author by typing <code>make realclean</code> and <code>perl Makefile.PL</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Private_Extensions"
>Private Extensions</a></h2>

<p>Those extensions take the form of <b>Module::Install::PRIVATE</b> and <b>Module::Install::PRIVATE::*</b>.</p>

<p>Authors are encouraged to put all existing <em>Makefile.PL</em> magics into such extensions (e.g. <em>Module::Install::PRIVATE</em> for common bits; <em>Module::Install::PRIVATE::DISTNAME</em> for functions specific to a distribution).</p>

<p>Private extensions should not to be released on CPAN; simply put them somewhere in your <code>@INC</code>, under the <code>Module/Install/</code> directory, and start using their functions in <em>Makefile.PL</em>. Like standard extensions, they will never be installed on the end-user&#39;s machine, and therefore never conflict with other people&#39;s private extensions.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Administrative_Extensions"
>Administrative Extensions</a></h2>

<p>Extensions under the <b>Module::Install::Admin::*</b> namespace are never included with the distribution. Their methods are not directly accessible from <em>Makefile.PL</em> or other extensions; they are invoked like this:</p>

<pre class="sh_perl">    # delegates to $other_admin_extension_obj-&#62;method_name(@args)
    $self-&#62;admin-&#62;method_name(@args);</pre>

<p>These methods only take effect during the <i>initialization</i> run, when <em>inc/</em> is being populated; they are ignored for end-users. Again, to re-initialize everything, just run <code>perl Makefile.PL</code> as the author.</p>

<p>Scripts (usually one-liners in <em>Makefile</em>) that wish to dispatch <b>AUTOLOAD</b> functions into administrative extensions (instead of standard extensions) should use the <b>Module::Install::Admin</b> module directly. See <a href="/~adamk/Module-Install-1.06/lib/Module/Install/Admin.pm" class="podlinkpod"
>Module::Install::Admin</a> for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXTENSIONS"
>EXTENSIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Detailed information is provided for all (some) of the relevant modules via their own POD documentation.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::AutoInstall"
>Module::Install::AutoInstall</a></h2>

<p>Provides <code>auto_install()</code> to automatically fetch and install prerequisites.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::Base"
>Module::Install::Base</a></h2>

<p>The base class for all extensions</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::Bundle"
>Module::Install::Bundle</a></h2>

<p>Provides the <code>bundle</code> family of commands, allowing you to bundle another CPAN distribution within your distribution.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::Fetch"
>Module::Install::Fetch</a></h2>

<p>Handles install-time fetching of files from remote servers via FTP and HTTP.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::Include"
>Module::Install::Include</a></h2>

<p>Provides the <code>include</code> family of commands for embedding modules that are only need at build-time in your distribution and won&#39;t be installed.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::Inline"
>Module::Install::Inline</a></h2>

<p>Provides <code>&#38;Inline-&#62;write</code> to replace <b>Inline::MakeMaker</b>&#39;s functionality for making <b>Inline</b>-based modules (and cleaning up).</p>

<p>However, you should invoke this with <code>WriteAll( inline =&#62; 1 )</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::Makefile"
>Module::Install::Makefile</a></h2>

<p>Provides <code>&#38;Makefile-&#62;write</code> to generate a <em>Makefile</em> for you distribution.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::Metadata"
>Module::Install::Metadata</a></h2>

<p>Provides <code>&#38;Meta-&#62;write</code> to generate a <em>META.yml</em> file for your distribution.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::PAR"
>Module::Install::PAR</a></h2>

<p>Makes pre-compiled module binary packages from the built <em>blib</em> directory, and download existing ones to save recompiling.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::Run"
>Module::Install::Run</a></h2>

<p>Determines if commands are available on the user&#39;s machine, and runs them via <b>IPC::Run3</b>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::Scripts"
>Module::Install::Scripts</a></h2>

<p>Handles packaging and installation of scripts to various bin dirs.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::Win32"
>Module::Install::Win32</a></h2>

<p>Functions for installing modules on Win32 and finding/installing <em>nmake.exe</em> for users that need it.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::WriteAll"
>Module::Install::WriteAll</a></h2>

<p>Provides the <code>WriteAll</code>, which writes all the requires files, such as <em>META.yml</em> and <em>Makefile</em>.</p>

<p><code>WriteAll</code> takes four optional named parameters:</p>

<dl>
<dt><a name='check_nmake'></a><a name="check_nmake_(defaults_to_true)"
><code>check_nmake</code> (defaults to true)</a></dt>

<dd>
<p>If true, invokes functions with the same name.</p>

<p><i>The use of this param is no longer recommended.</i></p>

<dt><a name='inline'></a><a name="inline_(defaults_to_false)"
><code>inline</code> (defaults to false)</a></dt>

<dd>
<p>If true, invokes <code>&#38;Inline-&#62;write</code> <a href="/perldoc?Inline" class="podlinkpod"
>Inline</a> modules.</p>

<dt><a name='meta'></a><a name="meta_(defaults_to_true)"
><code>meta</code> (defaults to true)</a></dt>

<dd>
<p>If true, writes a <code>META.yml</code> file.</p>

<dt><a name='sign'></a><a name="sign_(defaults_to_false)"
><code>sign</code> (defaults to false)</a></dt>

<dd>
<p>If true, invokes <code>sign</code> command to digitally sign erm... something.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::Admin::Find"
>Module::Install::Admin::Find</a></h2>

<p>Package-time functions for finding extensions, installed packages and files in subdirectories.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::Admin::Manifest"
>Module::Install::Admin::Manifest</a></h2>

<p>Package-time functions for manipulating and updating the <em>MANIFEST</em> file.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::Admin::Metadata"
>Module::Install::Admin::Metadata</a></h2>

<p>Package-time functions for manipulating and updating the <em>META.yml</em> file.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install::Admin::ScanDeps"
>Module::Install::Admin::ScanDeps</a></h2>

<p>Package-time scanning for non-core dependencies via <b>Module::ScanDeps</b> and <b>Module::CoreList</b>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FAQ"
>FAQ <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="What_are_the_benefits_of_using_Module::Install?"
>What are the benefits of using <b>Module::Install</b>?</a></h2>

<p>Here is a brief overview of the reasons:</p>

<ul>
<li>Extremely easy for beginners to learn</li>

<li>Does everything ExtUtils::MakeMaker does.</li>

<li>Does it with a dramatically simpler syntax.</li>

<li>Automatically scans for metadata for you.</li>

<li>Requires no installation for end-users.</li>

<li>Guaranteed forward-compatibility.</li>

<li>Automatically updates your MANIFEST.</li>

<li>Distributing scripts is easy.</li>

<li>Include prerequisite modules (less dependencies to install)</li>

<li>Auto-installation of prerequisites.</li>

<li>Support for <a href="/perldoc?Inline" class="podlinkpod"
>Inline</a>-based modules.</li>

<li>Support for <a href="/perldoc?File%3A%3AShareDir" class="podlinkpod"
>File::ShareDir</a> shared data files</li>

<li>Support for precompiled <a href="/perldoc?PAR" class="podlinkpod"
>PAR</a> binaries.</li>

<li>Deals with Win32 install issues for you.</li>
</ul>

<p>By greatly shrinking and simplifying the syntax, <b>Module::Install</b> keeps the amount of work required to maintain your <em>Makefile.PL</em> files to an absolute minimum.</p>

<p>And if you maintain more than one module than needs to do unusual installation tricks, you can create a specific module to abstract away this complexity.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Module::Install_isn&#39;t_at_1.00_yet,_is_it_safe_to_use_yet?"
>Module::Install isn&#39;t at 1.00 yet, is it safe to use yet?</a></h2>

<p>As long as you are going to periodically do incremental releases to get any bug fixes and new functionality, yes.</p>

<p>If you don&#39;t plan to do incremental releases, it might be a good idea to continue to wait for a while.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COOKBOOK_/_EXAMPLES"
>COOKBOOK / EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following are some real-life examples of <em>Makefile.PL</em> files using <b>Module::Install</b>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Method::Alias"
>Method::Alias</a></h2>

<p><a href="/perldoc?Method%3A%3AAlias" class="podlinkpod"
>Method::Alias</a> is a trivially-small utility module, with almost the smallest possible <em>Makefile.PL</em>.</p>

<pre class="sh_perl">  use inc::Module::Install;
  
  name          &#39;Method-Alias&#39;;
  all_from      &#39;lib/Method/Alias.pm&#39;;
  test_requires &#39;Test::More&#39; =&#62; &#39;0.42&#39;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="File::HomeDir"
>File::HomeDir</a></h2>

<p><a href="/perldoc?File%3A%3AHomeDir" class="podlinkpod"
>File::HomeDir</a> locates your home directory on any platform. It needs an installer that can handle different dependencies on different platforms.</p>

<pre class="sh_perl">  use inc::Module::Install;
  
  name          &#39;File-HomeDir&#39;;
  all_from      &#39;lib/File/HomeDir.pm&#39;;
  requires      &#39;File::Spec&#39; =&#62; &#39;0.80&#39;;
  test_requires &#39;Test::More&#39; =&#62; &#39;0.47&#39;;
  
  if ( $MacPerl::Version ) {
      # Needed on legacy Mac OS 9
      requires &#39;Mac::Files&#39; =&#62; 0;
  }
  
  if ( $^O eq &#39;MXWin32&#39; ) {
      # Needed on Windows platforms
      requires &#39;Win32::TieRegistry&#39; =&#62; 0;
  }
  
  WriteAll;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TO_DO"
>TO DO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Implement <a href="/perldoc?Module%3A%3AInstall%3A%3ACompiled" class="podlinkpod"
>Module::Install::Compiled</a> and Module::Install::Admin::Compiled to integrate the <a href="/perldoc?Module%3A%3ACompiled" class="podlinkpod"
>Module::Compiled</a> &#34;perl 6 to perl 5&#34; functionality with Module::Install. Because this would add SIGNIFICANT dependencies (i.e. pugs!) this should almost certainly be distributed as a separate distribution.</p>

<p>Go over POD docs in detail.</p>

<p>Test recursive Makefile directories</p>

<p>The test suite needs a great deal more test scripts.</p>

<p>Dependencies on shared libraries (libxml/libxml.dll etc) and binary files so that debian/Win32/etc autopackaging applications can create the appropriate package-level dependencies there.</p>

<p>EU::MM 6.06_03+ supports META.yml natively. Maybe probe for that?</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~adamk/Module-Install-1.06/lib/Module/Install/Philosophy.pod" class="podlinkpod"
>Module::Install::Philosophy</a></p>

<p><a href="/perldoc?inc%3A%3AModule%3A%3AInstall" class="podlinkpod"
>inc::Module::Install</a></p>

<p><a href="/perldoc?Module%3A%3AInstall%3A%3AAutoInstall" class="podlinkpod"
>Module::Install::AutoInstall</a></p>

<p><a href="/~adamk/Module-Install-1.06/lib/Module/Install/Base.pm" class="podlinkpod"
>Module::Install::Base</a></p>

<p><a href="/~adamk/Module-Install-1.06/lib/Module/Install/Bundle.pm" class="podlinkpod"
>Module::Install::Bundle</a></p>

<p><a href="/~adamk/Module-Install-1.06/lib/Module/Install/Makefile.pm" class="podlinkpod"
>Module::Install::MakeMaker</a></p>

<p><a href="/~adamk/Module-Install-1.06/lib/Module/Install/Share.pm" class="podlinkpod"
>Module::Install::Share</a></p>

<p><a href="/~adamk/Module-Install-1.06/lib/Module/Install/Admin.pm" class="podlinkpod"
>Module::Install::Admin</a></p>

<p><a href="/~adamk/Module-Install-1.06/lib/Module/Install/Admin/Include.pm" class="podlinkpod"
>Module::Install::Admin::Include</a></p>

<p><a href="/~adamk/Module-Install-1.06/lib/Module/Install/Admin/Manifest.pm" class="podlinkpod"
>Module::Install::Admin::Manifest</a></p>

<p><a href="/perldoc?CPAN%3A%3AMakeMaker" class="podlinkpod"
>CPAN::MakeMaker</a>, <a href="/perldoc?Inline%3A%3AMakeMaker" class="podlinkpod"
>Inline::MakeMaker</a></p>

<p><a href="/perldoc?ExtUtils%3A%3AMakeMaker" class="podlinkpod"
>ExtUtils::MakeMaker</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT"
>SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Bugs should be reported via the CPAN bug tracker at</p>

<p><a href="http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Module-Install" class="podlinkurl"
>http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Module-Install</a></p>

<p>For other issues, contact the (topmost) author.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Adam Kennedy &#60;adamk@cpan.org&#62;</p>

<p>Audrey Tang &#60;autrijus@autrijus.org&#62;</p>

<p>Brian Ingerson &#60;ingy@cpan.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2002 - 2012 Brian Ingerson, Audrey Tang and Adam Kennedy.</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78276 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 04:19:01 2012 GMT (0.234817981719971) @cpansearch1 -->
 </body>
</html>
