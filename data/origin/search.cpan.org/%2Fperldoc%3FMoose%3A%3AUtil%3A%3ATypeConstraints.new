<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Moose::Util::TypeConstraints - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Moose",3]);
    _gaq.push(["_setCustomVar",5,"Release","Moose-2.0403",3]);
    _gaq.push(["_setCustomVar",3,"Module","Moose::Util::TypeConstraints",3]);
    _gaq.push(["_setCustomVar",1,"Author","DOY",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Moose::Util::TypeConstraints">permalink</a></div>
  <a href="/~doy/">Jesse Luehrs</a> &gt;
  <a href="/~doy/Moose-2.0403/">Moose-2.0403</a> &gt;
  Moose::Util::TypeConstraints
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/88766de7a058697d3d0335b8d384fd2a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DO/DOY/Moose-2.0403.tar.gz">Moose-2.0403.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Moose%3A%3AUtil%3A%3ATypeConstraints;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DOY/Moose-2.0403/lib/Moose/Util/TypeConstraints.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 13</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 27</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=Moose">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.0403 &nbsp;
<span class="noprint">
  <a href="/src/DOY/Moose-2.0403/lib/Moose/Util/TypeConstraints.pm">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~doy/Moose/lib/Moose/Util/TypeConstraints.pm">Moose-2.0502-TRIAL</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Important_Caveat'>Important Caveat</a>
    <li class='indexItem indexItem2'><a href='#Slightly_Less_Important_Caveat'>Slightly Less Important Caveat</a>
    <li class='indexItem indexItem2'><a href='#Default_Type_Constraints'>Default Type Constraints</a>
    <li class='indexItem indexItem2'><a href='#Type_Constraint_Naming'>Type Constraint Naming</a>
    <li class='indexItem indexItem2'><a href='#Use_with_Other_Constraint_Modules'>Use with Other Constraint Modules</a>
    <li class='indexItem indexItem2'><a href='#Error_messages'>Error messages</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Type_Constraint_Constructors'>Type Constraint Constructors</a>
    <li class='indexItem indexItem2'><a href='#Type_Constraint_Utilities'>Type Constraint Utilities</a>
    <li class='indexItem indexItem2'><a href='#Type_Coercion_Constructors'>Type Coercion Constructors</a>
    <li class='indexItem indexItem2'><a href='#Creating_and_Finding_Type_Constraints'>Creating and Finding Type Constraints</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose::Util::TypeConstraints - Type constraint system for Moose</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>version 2.0403</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Moose::Util::TypeConstraints;

  subtype &#39;Natural&#39;,
      as &#39;Int&#39;,
      where { $_ &#62; 0 };

  subtype &#39;NaturalLessThanTen&#39;,
      as &#39;Natural&#39;,
      where { $_ &#60; 10 },
      message { &#34;This number ($_) is not less than ten!&#34; };

  coerce &#39;Num&#39;,
      from &#39;Str&#39;,
      via { 0+$_ };

  class_type &#39;DateTimeClass&#39;, { class =&#62; &#39;DateTime&#39; };

  role_type &#39;Barks&#39;, { role =&#62; &#39;Some::Library::Role::Barks&#39; };

  enum &#39;RGBColors&#39;, [qw(red green blue)];

  union &#39;StringOrArray&#39;, [qw( String Array )];

  no Moose::Util::TypeConstraints;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module provides Moose with the ability to create custom type constraints to be used in attribute definition.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Important_Caveat"
>Important Caveat</a></h2>

<p>This is <b>NOT</b> a type system for Perl 5. These are type constraints, and they are not used by Moose unless you tell it to. No type inference is performed, expressions are not typed, etc. etc. etc.</p>

<p>A type constraint is at heart a small &#34;check if a value is valid&#34; function. A constraint can be associated with an attribute. This simplifies parameter validation, and makes your code clearer to read, because you can refer to constraints by name.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Slightly_Less_Important_Caveat"
>Slightly Less Important Caveat</a></h2>

<p>It is <b>always</b> a good idea to quote your type names.</p>

<p>This prevents Perl from trying to execute the call as an indirect object call. This can be an issue when you have a subtype with the same name as a valid class.</p>

<p>For instance:</p>

<pre class="sh_perl">  subtype DateTime =&#62; as Object =&#62; where { $_-&#62;isa(&#39;DateTime&#39;) };</pre>

<p>will <i>just work</i>, while this:</p>

<pre class="sh_perl">  use DateTime;
  subtype DateTime =&#62; as Object =&#62; where { $_-&#62;isa(&#39;DateTime&#39;) };</pre>

<p>will fail silently and cause many headaches. The simple way to solve this, as well as future proof your subtypes from classes which have yet to have been created, is to quote the type name:</p>

<pre class="sh_perl">  use DateTime;
  subtype &#39;DateTime&#39;, as &#39;Object&#39;, where { $_-&#62;isa(&#39;DateTime&#39;) };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Default_Type_Constraints"
>Default Type Constraints</a></h2>

<p>This module also provides a simple hierarchy for Perl 5 types, here is that hierarchy represented visually.</p>

<pre class="sh_perl">  Any
  Item
      Bool
      Maybe[`a]
      Undef
      Defined
          Value
              Str
                  Num
                      Int
                  ClassName
                  RoleName
          Ref
              ScalarRef[`a]
              ArrayRef[`a]
              HashRef[`a]
              CodeRef
              RegexpRef
              GlobRef
              FileHandle
              Object</pre>

<p><b>NOTE:</b> Any type followed by a type parameter <code>[`a]</code> can be parameterized, this means you can say:</p>

<pre class="sh_perl">  ArrayRef[Int]    # an array of integers
  HashRef[CodeRef] # a hash of str to CODE ref mappings
  ScalarRef[Int]   # a reference to an integer
  Maybe[Str]       # value may be a string, may be undefined</pre>

<p>If Moose finds a name in brackets that it does not recognize as an existing type, it assumes that this is a class name, for example <code>ArrayRef[DateTime]</code>.</p>

<p><b>NOTE:</b> Unless you parameterize a type, then it is invalid to include the square brackets. I.e. <code>ArrayRef[]</code> will be treated as a new type name, <i>not</i> as a parameterization of <code>ArrayRef</code>.</p>

<p><b>NOTE:</b> The <code>Undef</code> type constraint for the most part works correctly now, but edge cases may still exist, please use it sparingly.</p>

<p><b>NOTE:</b> The <code>ClassName</code> type constraint does a complex package existence check. This means that your class <b>must</b> be loaded for this type constraint to pass.</p>

<p><b>NOTE:</b> The <code>RoleName</code> constraint checks a string is a <i>package name</i> which is a role, like <code>&#39;MyApp::Role::Comparable&#39;</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Type_Constraint_Naming"
>Type Constraint Naming</a></h2>

<p>Type name declared via this module can only contain alphanumeric characters, colons (:), and periods (.).</p>

<p>Since the types created by this module are global, it is suggested that you namespace your types just as you would namespace your modules. So instead of creating a <i>Color</i> type for your <b>My::Graphics</b> module, you would call the type <i>My::Graphics::Types::Color</i> instead.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Use_with_Other_Constraint_Modules"
>Use with Other Constraint Modules</a></h2>

<p>This module can play nicely with other constraint modules with some slight tweaking. The <code>where</code> clause in types is expected to be a <code>CODE</code> reference which checks its first argument and returns a boolean. Since most constraint modules work in a similar way, it should be simple to adapt them to work with Moose.</p>

<p>For instance, this is how you could use it with <a href="/perldoc?Declare%3A%3AConstraints%3A%3ASimple" class="podlinkpod"
>Declare::Constraints::Simple</a> to declare a completely new type.</p>

<pre class="sh_perl">  type &#39;HashOfArrayOfObjects&#39;,
      where {
          IsHashRef(
              -keys   =&#62; HasLength,
              -values =&#62; IsArrayRef(IsObject)
          )-&#62;(@_);
      };</pre>

<p>For more examples see the <em>t/examples/example_w_DCS.t</em> test file.</p>

<p>Here is an example of using <a href="/perldoc?Test%3A%3ADeep" class="podlinkpod"
>Test::Deep</a> and its non-test related <code>eq_deeply</code> function.</p>

<pre class="sh_perl">  type &#39;ArrayOfHashOfBarsAndRandomNumbers&#39;,
      where {
          eq_deeply($_,
              array_each(subhashof({
                  bar           =&#62; isa(&#39;Bar&#39;),
                  random_number =&#62; ignore()
              })))
        };</pre>

<p>For a complete example see the <em>t/examples/example_w_TestDeep.t</em> test file.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Error_messages"
>Error messages</a></h2>

<p>Type constraints can also specify custom error messages, for when they fail to validate. This is provided as just another coderef, which receives the invalid value in <code>$_</code>, as in:</p>

<pre class="sh_perl">  subtype &#39;PositiveInt&#39;,
       as &#39;Int&#39;,
       where { $_ &#62; 0 },
       message { &#34;$_ is not a positive integer!&#34; };</pre>

<p>If no message is specified, a default message will be used, which indicates which type constraint was being used and what value failed. If <a href="/perldoc?Devel%3A%3APartialDump" class="podlinkpod"
>Devel::PartialDump</a> (version 0.14 or higher) is installed, it will be used to display the invalid value, otherwise it will just be printed as is.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Type_Constraint_Constructors"
>Type Constraint Constructors</a></h2>

<p>The following functions are used to create type constraints. They will also register the type constraints your create in a global registry that is used to look types up by name.</p>

<p>See the <a href="#SYNOPSIS" class="podlinkpod"
>&#34;SYNOPSIS&#34;</a> for an example of how to use these.</p>

<dl>
<dt><a name='subtype'></a><a name="subtype_&#39;Name&#39;,_as_&#39;Parent&#39;,_where_{_}_..."
><b>subtype &#39;Name&#39;, as &#39;Parent&#39;, where { } ...</b></a></dt>

<dd>
<p>This creates a named subtype.</p>

<p>If you provide a parent that Moose does not recognize, it will automatically create a new class type constraint for this name.</p>

<p>When creating a named type, the <code>subtype</code> function should either be called with the sugar helpers (<code>where</code>, <code>message</code>, etc), or with a name and a hashref of parameters:</p>

<pre class="sh_perl"> subtype( &#39;Foo&#39;, { where =&#62; ..., message =&#62; ... } );</pre>

<p>The valid hashref keys are <code>as</code> (the parent), <code>where</code>, <code>message</code>, and <code>optimize_as</code>.</p>

<dt><a name='subtype'></a><a name="subtype_as_&#39;Parent&#39;,_where_{_}_..."
><b>subtype as &#39;Parent&#39;, where { } ...</b></a></dt>

<dd>
<p>This creates an unnamed subtype and will return the type constraint meta-object, which will be an instance of <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint</a>.</p>

<p>When creating an anonymous type, the <code>subtype</code> function should either be called with the sugar helpers (<code>where</code>, <code>message</code>, etc), or with just a hashref of parameters:</p>

<pre class="sh_perl"> subtype( { where =&#62; ..., message =&#62; ... } );</pre>

<dt><a name='class_type'></a><a name="class_type_($class,_?$options)"
><b>class_type ($class, ?$options)</b></a></dt>

<dd>
<p>Creates a new subtype of <code>Object</code> with the name <code>$class</code> and the metaclass <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint/Class.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint::Class</a>.</p>

<pre class="sh_perl">  # Create a type called &#39;Box&#39; which tests for objects which -&#62;isa(&#39;Box&#39;)
  class_type &#39;Box&#39;;</pre>

<p>By default, the name of the type and the name of the class are the same, but you can specify both separately.</p>

<pre class="sh_perl">  # Create a type called &#39;Box&#39; which tests for objects which -&#62;isa(&#39;ObjectLibrary::Box&#39;);
  class_type &#39;Box&#39;, { class =&#62; &#39;ObjectLibrary::Box&#39; };</pre>

<dt><a name='role_type'></a><a name="role_type_($role,_?$options)"
><b>role_type ($role, ?$options)</b></a></dt>

<dd>
<p>Creates a <code>Role</code> type constraint with the name <code>$role</code> and the metaclass <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint/Role.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint::Role</a>.</p>

<pre class="sh_perl">  # Create a type called &#39;Walks&#39; which tests for objects which -&#62;does(&#39;Walks&#39;)
  role_type &#39;Walks&#39;;</pre>

<p>By default, the name of the type and the name of the role are the same, but you can specify both separately.</p>

<pre class="sh_perl">  # Create a type called &#39;Walks&#39; which tests for objects which -&#62;does(&#39;MooseX::Role::Walks&#39;);
  role_type &#39;Walks&#39;, { role =&#62; &#39;MooseX::Role::Walks&#39; };</pre>

<dt><a name='maybe_type'></a><a name="maybe_type_($type)"
><b>maybe_type ($type)</b></a></dt>

<dd>
<p>Creates a type constraint for either <code>undef</code> or something of the given type.</p>

<dt><a name='duck_type'></a><a name="duck_type_($name,_\@methods)"
><b>duck_type ($name, \@methods)</b></a></dt>

<dd>
<p>This will create a subtype of Object and test to make sure the value <code>can()</code> do the methods in <code>\@methods</code>.</p>

<p>This is intended as an easy way to accept non-Moose objects that provide a certain interface. If you&#39;re using Moose classes, we recommend that you use a <code>requires</code>-only Role instead.</p>

<dt><a name='duck_type'></a><a name="duck_type_(\@methods)"
><b>duck_type (\@methods)</b></a></dt>

<dd>
<p>If passed an ARRAY reference as the only parameter instead of the <code>$name</code>, <code>\@methods</code> pair, this will create an unnamed duck type. This can be used in an attribute definition like so:</p>

<pre class="sh_perl">  has &#39;cache&#39; =&#62; (
      is  =&#62; &#39;ro&#39;,
      isa =&#62; duck_type( [qw( get_set )] ),
  );</pre>

<dt><a name='enum'></a><a name="enum_($name,_\@values)"
><b>enum ($name, \@values)</b></a></dt>

<dd>
<p>This will create a basic subtype for a given set of strings. The resulting constraint will be a subtype of <code>Str</code> and will match any of the items in <code>\@values</code>. It is case sensitive. See the <a href="#SYNOPSIS" class="podlinkpod"
>&#34;SYNOPSIS&#34;</a> for a simple example.</p>

<p><b>NOTE:</b> This is not a true proper enum type, it is simply a convenient constraint builder.</p>

<dt><a name='enum'></a><a name="enum_(\@values)"
><b>enum (\@values)</b></a></dt>

<dd>
<p>If passed an ARRAY reference as the only parameter instead of the <code>$name</code>, <code>\@values</code> pair, this will create an unnamed enum. This can then be used in an attribute definition like so:</p>

<pre class="sh_perl">  has &#39;sort_order&#39; =&#62; (
      is  =&#62; &#39;ro&#39;,
      isa =&#62; enum([qw[ ascending descending ]]),
  );</pre>

<dt><a name='union'></a><a name="union_($name,_\@constraints)"
><b>union ($name, \@constraints)</b></a></dt>

<dd>
<p>This will create a basic subtype where any of the provided constraints may match in order to satisfy this constraint.</p>

<dt><a name='union'></a><a name="union_(\@constraints)"
><b>union (\@constraints)</b></a></dt>

<dd>
<p>If passed an ARRAY reference as the only parameter instead of the <code>$name</code>, <code>\@constraints</code> pair, this will create an unnamed union. This can then be used in an attribute definition like so:</p>

<pre class="sh_perl">  has &#39;items&#39; =&#62; (
      is =&#62; &#39;ro&#39;,
      isa =&#62; union([qw[ Str ArrayRef ]]),
  );</pre>

<p>This is similar to the existing string union:</p>

<pre class="sh_perl">  isa =&#62; &#39;Str|ArrayRef&#39;</pre>

<p>except that it supports anonymous elements as child constraints:</p>

<pre class="sh_perl">  has &#39;color&#39; =&#62; (
    isa =&#62; &#39;ro&#39;,
    isa =&#62; union([ &#39;Int&#39;,  enum([qw[ red green blue ]]) ]),
  );</pre>

<dt><a name='as'></a><a name="as_&#39;Parent&#39;"
><b>as &#39;Parent&#39;</b></a></dt>

<dd>
<p>This is just sugar for the type constraint construction syntax.</p>

<p>It takes a single argument, which is the name of a parent type.</p>

<dt><a name='where'></a><a name="where_{_..._}"
><b>where { ... }</b></a></dt>

<dd>
<p>This is just sugar for the type constraint construction syntax.</p>

<p>It takes a subroutine reference as an argument. When the type constraint is tested, the reference is run with the value to be tested in <code>$_</code>. This reference should return true or false to indicate whether or not the constraint check passed.</p>

<dt><a name='message'></a><a name="message_{_..._}"
><b>message { ... }</b></a></dt>

<dd>
<p>This is just sugar for the type constraint construction syntax.</p>

<p>It takes a subroutine reference as an argument. When the type constraint fails, then the code block is run with the value provided in <code>$_</code>. This reference should return a string, which will be used in the text of the exception thrown.</p>

<dt><a name='inline_as'></a><a name="inline_as_{_..._}"
><b>inline_as { ... }</b></a></dt>

<dd>
<p>This can be used to define a &#34;hand optimized&#34; inlinable version of your type constraint.</p>

<p>You provide a subroutine which will be called <i>as a method</i> on a <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint</a> object. It will receive a single parameter, the name of the variable to check, typically something like <code>&#34;$_&#34;</code> or <code>&#34;$_[0]&#34;</code>.</p>

<p>The subroutine should return a code string suitable for inlining. You can assume that the check will be wrapped in parentheses when it is inlined.</p>

<p>The inlined code should include any checks that your type&#39;s parent types do. If your parent type constraint defines its own inlining, you can simply use that to avoid repeating code. For example, here is the inlining code for the <code>Value</code> type, which is a subtype of <code>Defined</code>:</p>

<pre class="sh_perl">    sub {
        $_[0]-&#62;parent()-&#62;_inline_check($_[1])
        . &#39; &#38;&#38; !ref(&#39; . $_[1] . &#39;)&#39;
    }</pre>

<dt><a name='optimize_as'></a><a name="optimize_as_{_..._}"
><b>optimize_as { ... }</b></a></dt>

<dd>
<p><b>This feature is deprecated, use <code>inline_as</code> instead.</b></p>

<p>This can be used to define a &#34;hand optimized&#34; version of your type constraint which can be used to avoid traversing a subtype constraint hierarchy.</p>

<p><b>NOTE:</b> You should only use this if you know what you are doing. All the built in types use this, so your subtypes (assuming they are shallow) will not likely need to use this.</p>

<dt><a name='type'></a><a name="type_&#39;Name&#39;,_where_{_}_..."
><b>type &#39;Name&#39;, where { } ...</b></a></dt>

<dd>
<p>This creates a base type, which has no parent.</p>

<p>The <code>type</code> function should either be called with the sugar helpers (<code>where</code>, <code>message</code>, etc), or with a name and a hashref of parameters:</p>

<pre class="sh_perl">  type( &#39;Foo&#39;, { where =&#62; ..., message =&#62; ... } );</pre>

<p>The valid hashref keys are <code>where</code>, <code>message</code>, and <code>inlined_as</code>.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Type_Constraint_Utilities"
>Type Constraint Utilities</a></h2>

<dl>
<dt><a name='match_on_type'></a><a name="match_on_type_$value_=&#62;_(_$type_=&#62;_\&#38;action,_..._?\&#38;default_)"
><b>match_on_type $value =&#62; ( $type =&#62; \&#38;action, ... ?\&#38;default )</b></a></dt>

<dd>
<p>This is a utility function for doing simple type based dispatching similar to match/case in OCaml and case/of in Haskell. It is not as featureful as those languages, nor does not it support any kind of automatic destructuring bind. Here is a simple Perl pretty printer dispatching over the core Moose types.</p>

<pre class="sh_perl">  sub ppprint {
      my $x = shift;
      match_on_type $x =&#62; (
          HashRef =&#62; sub {
              my $hash = shift;
              &#39;{ &#39;
                  . (
                  join &#34;, &#34; =&#62; map { $_ . &#39; =&#62; &#39; . ppprint( $hash-&#62;{$_} ) }
                      sort keys %$hash
                  ) . &#39; }&#39;;
          },
          ArrayRef =&#62; sub {
              my $array = shift;
              &#39;[ &#39; . ( join &#34;, &#34; =&#62; map { ppprint($_) } @$array ) . &#39; ]&#39;;
          },
          CodeRef   =&#62; sub {&#39;sub { ... }&#39;},
          RegexpRef =&#62; sub { &#39;qr/&#39; . $_ . &#39;/&#39; },
          GlobRef   =&#62; sub { &#39;*&#39; . B::svref_2object($_)-&#62;NAME },
          Object    =&#62; sub { $_-&#62;can(&#39;to_string&#39;) ? $_-&#62;to_string : $_ },
          ScalarRef =&#62; sub { &#39;\\&#39; . ppprint( ${$_} ) },
          Num       =&#62; sub {$_},
          Str       =&#62; sub { &#39;&#34;&#39; . $_ . &#39;&#34;&#39; },
          Undef     =&#62; sub {&#39;undef&#39;},
          =&#62; sub { die &#34;I don&#39;t know what $_ is&#34; }
      );
  }</pre>

<p>Or a simple JSON serializer:</p>

<pre class="sh_perl">  sub to_json {
      my $x = shift;
      match_on_type $x =&#62; (
          HashRef =&#62; sub {
              my $hash = shift;
              &#39;{ &#39;
                  . (
                  join &#34;, &#34; =&#62;
                      map { &#39;&#34;&#39; . $_ . &#39;&#34; : &#39; . to_json( $hash-&#62;{$_} ) }
                      sort keys %$hash
                  ) . &#39; }&#39;;
          },
          ArrayRef =&#62; sub {
              my $array = shift;
              &#39;[ &#39; . ( join &#34;, &#34; =&#62; map { to_json($_) } @$array ) . &#39; ]&#39;;
          },
          Num   =&#62; sub {$_},
          Str   =&#62; sub { &#39;&#34;&#39; . $_ . &#39;&#34;&#39; },
          Undef =&#62; sub {&#39;null&#39;},
          =&#62; sub { die &#34;$_ is not acceptable json type&#34; }
      );
  }</pre>

<p>The matcher is done by mapping a <code>$type</code> to an <code>\&#38;action</code>. The <code>$type</code> can be either a string type or a <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint</a> object, and <code>\&#38;action</code> is a subroutine reference. This function will dispatch on the first match for <code>$value</code>. It is possible to have a catch-all by providing an additional subroutine reference as the final argument to <code>match_on_type</code>.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Type_Coercion_Constructors"
>Type Coercion Constructors</a></h2>

<p>You can define coercions for type constraints, which allow you to automatically transform values to something valid for the type constraint. If you ask your accessor to coerce, then Moose will run the type-coercion code first, followed by the type constraint check. This feature should be used carefully as it is very powerful and could easily take off a limb if you are not careful.</p>

<p>See the <a href="#SYNOPSIS" class="podlinkpod"
>&#34;SYNOPSIS&#34;</a> for an example of how to use these.</p>

<dl>
<dt><a name='coerce'></a><a name="coerce_&#39;Name&#39;,_from_&#39;OtherName&#39;,_via_{_..._}"
><b>coerce &#39;Name&#39;, from &#39;OtherName&#39;, via { ... }</b></a></dt>

<dd>
<p>This defines a coercion from one type to another. The <code>Name</code> argument is the type you are coercing <i>to</i>.</p>

<p>To define multiple coercions, supply more sets of from/via pairs:</p>

<pre class="sh_perl">  coerce &#39;Name&#39;,
    from &#39;OtherName&#39;, via { ... },
    from &#39;ThirdName&#39;, via { ... };</pre>

<dt><a name='from'></a><a name="from_&#39;OtherName&#39;"
><b>from &#39;OtherName&#39;</b></a></dt>

<dd>
<p>This is just sugar for the type coercion construction syntax.</p>

<p>It takes a single type name (or type object), which is the type being coerced <i>from</i>.</p>

<dt><a name='via'></a><a name="via_{_..._}"
><b>via { ... }</b></a></dt>

<dd>
<p>This is just sugar for the type coercion construction syntax.</p>

<p>It takes a subroutine reference. This reference will be called with the value to be coerced in <code>$_</code>. It is expected to return a new value of the proper type for the coercion.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Creating_and_Finding_Type_Constraints"
>Creating and Finding Type Constraints</a></h2>

<p>These are additional functions for creating and finding type constraints. Most of these functions are not available for importing. The ones that are importable as specified.</p>

<dl>
<dt><a name='find_type_constraint'></a><a name="find_type_constraint($type_name)"
><b>find_type_constraint($type_name)</b></a></dt>

<dd>
<p>This function can be used to locate the <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint</a> object for a named type.</p>

<p>This function is importable.</p>

<dt><a name='register_type_constraint'></a><a name="register_type_constraint($type_object)"
><b>register_type_constraint($type_object)</b></a></dt>

<dd>
<p>This function will register a <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint</a> with the global type registry.</p>

<p>This function is importable.</p>

<dt><a name='normalize_type_constraint_name'></a><a name="normalize_type_constraint_name($type_constraint_name)"
><b>normalize_type_constraint_name($type_constraint_name)</b></a></dt>

<dd>
<p>This method takes a type constraint name and returns the normalized form. This removes any whitespace in the string.</p>

<dt><a name='create_type_constraint_union'></a><a name="create_type_constraint_union($pipe_separated_types_|_@type_constraint_names)"
><b>create_type_constraint_union($pipe_separated_types | @type_constraint_names)</b></a></dt>

<dd>
<dt><a name='create_named_type_constraint_union'></a><a name="create_named_type_constraint_union($name,_$pipe_separated_types_|_@type_constraint_names)"
><b>create_named_type_constraint_union($name, $pipe_separated_types | @type_constraint_names)</b></a></dt>

<dd>
<p>This can take a union type specification like <code>&#39;Int|ArrayRef[Int]&#39;</code>, or a list of names. It returns a new <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint/Union.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint::Union</a> object.</p>

<dt><a name='create_parameterized_type_constraint'></a><a name="create_parameterized_type_constraint($type_name)"
><b>create_parameterized_type_constraint($type_name)</b></a></dt>

<dd>
<p>Given a <code>$type_name</code> in the form of <code>&#39;BaseType[ContainerType]&#39;</code>, this will create a new <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint/Parameterized.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint::Parameterized</a> object. The <code>BaseType</code> must exist already exist as a parameterizable type.</p>

<dt><a name='create_class_type_constraint'></a><a name="create_class_type_constraint($class,_$options)"
><b>create_class_type_constraint($class, $options)</b></a></dt>

<dd>
<p>Given a class name this function will create a new <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint/Class.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint::Class</a> object for that class name.</p>

<p>The <code>$options</code> is a hash reference that will be passed to the <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint/Class.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint::Class</a> constructor (as a hash).</p>

<dt><a name='create_role_type_constraint'></a><a name="create_role_type_constraint($role,_$options)"
><b>create_role_type_constraint($role, $options)</b></a></dt>

<dd>
<p>Given a role name this function will create a new <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint/Role.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint::Role</a> object for that role name.</p>

<p>The <code>$options</code> is a hash reference that will be passed to the <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint/Role.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint::Role</a> constructor (as a hash).</p>

<dt><a name='create_enum_type_constraint'></a><a name="create_enum_type_constraint($name,_$values)"
><b>create_enum_type_constraint($name, $values)</b></a></dt>

<dd>
<p>Given a enum name this function will create a new <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint/Enum.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint::Enum</a> object for that enum name.</p>

<dt><a name='create_duck_type_constraint'></a><a name="create_duck_type_constraint($name,_$methods)"
><b>create_duck_type_constraint($name, $methods)</b></a></dt>

<dd>
<p>Given a duck type name this function will create a new <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint/DuckType.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint::DuckType</a> object for that enum name.</p>

<dt><a name='find_or_parse_type_constraint'></a><a name="find_or_parse_type_constraint($type_name)"
><b>find_or_parse_type_constraint($type_name)</b></a></dt>

<dd>
<p>Given a type name, this first attempts to find a matching constraint in the global registry.</p>

<p>If the type name is a union or parameterized type, it will create a new object of the appropriate, but if given a &#34;regular&#34; type that does not yet exist, it simply returns false.</p>

<p>When given a union or parameterized type, the member or base type must already exist.</p>

<p>If it creates a new union or parameterized type, it will add it to the global registry.</p>

<dt><a name='find_or_create_isa_type_constraint'></a><a name="find_or_create_isa_type_constraint($type_name)"
><b>find_or_create_isa_type_constraint($type_name)</b></a></dt>

<dd>
<dt><a name='find_or_create_does_type_constraint'></a><a name="find_or_create_does_type_constraint($type_name)"
><b>find_or_create_does_type_constraint($type_name)</b></a></dt>

<dd>
<p>These functions will first call <code>find_or_parse_type_constraint</code>. If that function does not return a type, a new type object will be created.</p>

<p>The <code>isa</code> variant will use <code>create_class_type_constraint</code> and the <code>does</code> variant will use <code>create_role_type_constraint</code>.</p>

<dt><a name="get_type_constraint_registry"
><b>get_type_constraint_registry</b></a></dt>

<dd>
<p>Returns the <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint/Registry.pm" class="podlinkpod"
>Moose::Meta::TypeConstraint::Registry</a> object which keeps track of all type constraints.</p>

<dt><a name="list_all_type_constraints"
><b>list_all_type_constraints</b></a></dt>

<dd>
<p>This will return a list of type constraint names in the global registry. You can then fetch the actual type object using <code>find_type_constraint($type_name)</code>.</p>

<dt><a name="list_all_builtin_type_constraints"
><b>list_all_builtin_type_constraints</b></a></dt>

<dd>
<p>This will return a list of builtin type constraints, meaning those which are defined in this module. See the <a href="#Default_Type_Constraints" class="podlinkpod"
>&#34;Default Type Constraints&#34;</a> section for a complete list.</p>

<dt><a name="export_type_constraints_as_functions"
><b>export_type_constraints_as_functions</b></a></dt>

<dd>
<p>This will export all the current type constraints as functions into the caller&#39;s namespace (<code>Int()</code>, <code>Str()</code>, etc). Right now, this is mostly used for testing, but it might prove useful to others.</p>

<dt><a name="get_all_parameterizable_types"
><b>get_all_parameterizable_types</b></a></dt>

<dd>
<p>This returns all the parameterizable types that have been registered, as a list of type objects.</p>

<dt><a name='add_parameterizable_type'></a><a name="add_parameterizable_type($type)"
><b>add_parameterizable_type($type)</b></a></dt>

<dd>
<p>Adds <code>$type</code> to the list of parameterizable types</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>See <a href="/~doy/Moose-2.0403/lib/Moose.pm#BUGS" class="podlinkpod"
>&#34;BUGS&#34; in Moose</a> for details on reporting bugs.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose is maintained by the Moose Cabal, along with the help of many contributors. See <a href="/~doy/Moose-2.0403/lib/Moose.pm#CABAL" class="podlinkpod"
>&#34;CABAL&#34; in Moose</a> and <a href="/~doy/Moose-2.0403/lib/Moose.pm#CONTRIBUTORS" class="podlinkpod"
>&#34;CONTRIBUTORS&#34; in Moose</a> for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This software is copyright (c) 2012 by Infinity Interactive, Inc..</p>

<p>This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78183 Uploads, 24710 Distributions
106004 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Wed Apr 25 08:20:32 2012 GMT (0.169955968856812) @cpansearch1 -->
 </body>
</html>
