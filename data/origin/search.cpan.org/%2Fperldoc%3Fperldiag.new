<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>perldiag - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","perl",3]);
    _gaq.push(["_setCustomVar",5,"Release","perl-5.14.2",3]);
    _gaq.push(["_setCustomVar",4,"Document","perldiag",3]);
    _gaq.push(["_setCustomVar",1,"Author","FLORA",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?perldiag">permalink</a></div>
  <a href="/~flora/">Florian Ragwitz</a> &gt;
  <a href="/~flora/perl-5.14.2/">perl-5.14.2</a> &gt;
  perldiag
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/fd2bdaaefe41908133793d1ddf38f75d?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/F/FL/FLORA/perl-5.14.2.tar.gz">perl-5.14.2.tar.gz</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~FLORA/perl-5.14.2/pod/perldiag.pod">Annotate this POD
</a></p>
     <p style="text-align:right"><a href="http://www.perl.org/">Website</a></p>

<div style="float:right">

</div>
</div>
<span class="noprint">
  <a href="/src/FLORA/perl-5.14.2/pod/perldiag.pod">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~abigail/perl/pod/perldiag.pod">perl-5.15.9</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perldiag - various Perl diagnostics</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>These messages are classified as follows (listed in increasing order of desperation):</p>

<pre class="sh_perl">    (W) A warning (optional).
    (D) A deprecation (enabled by default).
    (S) A severe warning (enabled by default).
    (F) A fatal error (trappable).
    (P) An internal error you should never see (trappable).
    (X) A very fatal error (nontrappable).
    (A) An alien error message (not generated by Perl).</pre>

<p>The majority of messages from the first three classifications above (W, D &#38; S) can be controlled using the <code>warnings</code> pragma.</p>

<p>If a message can be controlled by the <code>warnings</code> pragma, its warning category is included with the classification letter in the description below.</p>

<p>Optional warnings are enabled by using the <code>warnings</code> pragma or the <b>-w</b> and <b>-W</b> switches. Warnings may be captured by setting <code>$SIG{__WARN__}</code> to a reference to a routine that will be called on each warning instead of printing it. See <a href="/~flora/perl-5.14.2/pod/perlvar.pod" class="podlinkpod"
>perlvar</a>.</p>

<p>Severe warnings are always enabled, unless they are explicitly disabled with the <code>warnings</code> pragma or the <b>-X</b> switch.</p>

<p>Trappable errors may be trapped using the eval operator. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#eval" class="podlinkpod"
>&#34;eval&#34; in perlfunc</a>. In almost all cases, warnings may be selectively disabled or promoted to fatal errors using the <code>warnings</code> pragma. See <a href="/~flora/perl-5.14.2/lib/warnings.pm" class="podlinkpod"
>warnings</a>.</p>

<p>The messages are in alphabetical order, without regard to upper or lower-case. Some of these messages are generic. Spots that vary are denoted with a %s or other printf-style escape. These escapes are ignored by the alphabetical order, as are all characters other than letters. To look up your message, just ignore anything that is not a letter.</p>

<dl>
<dt><a name='accept'></a><a name="accept()_on_closed_socket_%s"
>accept() on closed socket %s</a></dt>

<dd>
<p>(W closed) You tried to do an accept on a closed socket. Did you forget to check the return value of your socket() call? See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#accept" class="podlinkpod"
>&#34;accept&#34; in perlfunc</a>.</p>

<dt><a name='Allocation'></a><a name="Allocation_too_large:_%x"
>Allocation too large: %x</a></dt>

<dd>
<p>(X) You can&#39;t allocate more than 64K on an MS-DOS machine.</p>

<dt><a name='c'></a><a name="&#39;%c&#39;_allowed_only_after_types_%s"
>&#39;%c&#39; allowed only after types %s</a></dt>

<dd>
<p>(F) The modifiers &#39;!&#39;, &#39;&#60;&#39; and &#39;&#62;&#39; are allowed in pack() or unpack() only after certain types. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Ambiguous'></a><a name="Ambiguous_call_resolved_as_CORE::%s(),_qualify_as_such_or_use_&#38;"
>Ambiguous call resolved as CORE::%s(), qualify as such or use &#38;</a></dt>

<dd>
<p>(W ambiguous) A subroutine you have declared has the same name as a Perl keyword, and you have used the name without qualification for calling one or the other. Perl decided to call the builtin because the subroutine is not imported.</p>

<p>To force interpretation as a subroutine call, either put an ampersand before the subroutine name, or qualify the name with its package. Alternatively, you can import the subroutine (or pretend that it&#39;s imported with the <code>use subs</code> pragma).</p>

<p>To silently interpret it as the Perl operator, use the <code>CORE::</code> prefix on the operator (e.g. <code>CORE::log($x)</code>) or declare the subroutine to be an object method (see <a href="/~flora/perl-5.14.2/pod/perlsub.pod#Subroutine_Attributes" class="podlinkpod"
>&#34;Subroutine Attributes&#34; in perlsub</a> or <a href="/~flora/perl-5.14.2/ext/attributes/attributes.pm" class="podlinkpod"
>attributes</a>).</p>

<dt><a name='Ambiguous'></a><a name="Ambiguous_range_in_transliteration_operator"
>Ambiguous range in transliteration operator</a></dt>

<dd>
<p>(F) You wrote something like <code>tr/a-z-0//</code> which doesn&#39;t mean anything at all. To include a <code>-</code> character in a transliteration, put it either first or last. (In the past, <code>tr/a-z-0//</code> was synonymous with <code>tr/a-y//</code>, which was probably not what you would have expected.)</p>

<dt><a name='Ambiguous'></a><a name="Ambiguous_use_of_%s_resolved_as_%s"
>Ambiguous use of %s resolved as %s</a></dt>

<dd>
<p>(W ambiguous)(S) You said something that may not be interpreted the way you thought. Normally it&#39;s pretty easy to disambiguate it by supplying a missing quote, operator, parenthesis pair or declaration.</p>

<dt><a name='Ambiguous'></a><a name="Ambiguous_use_of_%c_resolved_as_operator_%c"
>Ambiguous use of %c resolved as operator %c</a></dt>

<dd>
<p>(W ambiguous) <code>%</code>, <code>&#38;</code>, and <code>*</code> are both infix operators (modulus, bitwise and, and multiplication) <i>and</i> initial special characters (denoting hashes, subroutines and typeglobs), and you said something like <code>*foo * foo</code> that might be interpreted as either of them. We assumed you meant the infix operator, but please try to make it more clear -- in the example given, you might write <code>*foo * foo()</code> if you really meant to multiply a glob by the result of calling a function.</p>

<dt><a name='Ambiguous'></a><a name="Ambiguous_use_of_%c{%s}_resolved_to_%c%s"
>Ambiguous use of %c{%s} resolved to %c%s</a></dt>

<dd>
<p>(W ambiguous) You wrote something like <code>@{foo}</code>, which might be asking for the variable <code>@foo</code>, or it might be calling a function named foo, and dereferencing it as an array reference. If you wanted the varable, you can just write <code>@foo</code>. If you wanted to call the function, write <code>@{foo()}</code> ... or you could just not have a variable and a function with the same name, and save yourself a lot of trouble.</p>

<dt><a name='Ambiguous'></a><a name="Ambiguous_use_of_%c{%s[...]}_resolved_to_%c%s[...]"
>Ambiguous use of %c{%s[...]} resolved to %c%s[...]</a></dt>

<dd>
<dt><a name='Ambiguous'></a><a name="Ambiguous_use_of_%c{%s{...}}_resolved_to_%c%s{...}"
>Ambiguous use of %c{%s{...}} resolved to %c%s{...}</a></dt>

<dd>
<p>(W ambiguous) You wrote something like <code>${foo[2]}</code> (where foo represents the name of a Perl keyword), which might be looking for element number 2 of the array named <code>@foo</code>, in which case please write <code>$foo[2]</code>, or you might have meant to pass an anonymous arrayref to the function named foo, and then do a scalar deref on the value it returns. If you meant that, write <code>${foo([2])}</code>.</p>

<p>In regular expressions, the <code>${foo[2]}</code> syntax is sometimes necessary to disambiguate between array subscripts and character classes. <code>/$length[2345]/</code>, for instance, will be interpreted as <code>$length</code> followed by the character class <code>[2345]</code>. If an array subscript is what you want, you can avoid the warning by changing <code>/${length[2345]}/</code> to the unsightly <code>/${\$length[2345]}/</code>, by renaming your array to something that does not coincide with a built-in keyword, or by simply turning off warnings with <code>no warnings &#39;ambiguous&#39;;</code>.</p>

<dt><a name='Ambiguous'></a><a name="Ambiguous_use_of_-%s_resolved_as_-&#38;%s()"
>Ambiguous use of -%s resolved as -&#38;%s()</a></dt>

<dd>
<p>(W ambiguous) You wrote something like <code>-foo</code>, which might be the string <code>&#34;-foo&#34;</code>, or a call to the function <code>foo</code>, negated. If you meant the string, just write <code>&#34;-foo&#34;</code>. If you meant the function call, write <code>-foo()</code>.</p>

<dt><a 
>Ambiguous use of &#39;s//le...&#39; resolved as &#39;s// le...&#39;; Rewrite as &#39;s//el&#39; if you meant &#39;use locale rules and evaluate rhs as an expression&#39;. In Perl 5.16, it will be resolved the other way</a></dt>

<dd>
<p>(W deprecated, ambiguous) You wrote a pattern match with substitution immediately followed by &#34;le&#34;. In Perl 5.14 and earlier, this is resolved as meaning to take the result of the substitution, and see if it is stringwise less-than-or-equal-to what follows in the expression. Having the &#34;le&#34; immediately following a pattern is deprecated behavior, so in Perl 5.16, this expression will be resolved as meaning to do the pattern match using the rules of the current locale, and evaluate the rhs as an expression when doing the substitution. In 5.14, if you want the latter interpretation, you can simply write &#34;el&#34; instead.</p>

<dt><a name='and'></a><a name="&#39;|&#39;_and_&#39;&#60;&#39;_may_not_both_be_specified_on_command_line"
>&#39;|&#39; and &#39;&#60;&#39; may not both be specified on command line</a></dt>

<dd>
<p>(F) An error peculiar to VMS. Perl does its own command line redirection, and found that STDIN was a pipe, and that you also tried to redirect STDIN using &#39;&#60;&#39;. Only one STDIN stream to a customer, please.</p>

<dt><a name='and'></a><a name="&#39;|&#39;_and_&#39;&#62;&#39;_may_not_both_be_specified_on_command_line"
>&#39;|&#39; and &#39;&#62;&#39; may not both be specified on command line</a></dt>

<dd>
<p>(F) An error peculiar to VMS. Perl does its own command line redirection, and thinks you tried to redirect stdout both to a file and into a pipe to another command. You need to choose one or the other, though nothing&#39;s stopping you from piping into a program or Perl script which &#39;splits&#39; output into two streams, such as</p>

<pre class="sh_perl">    open(OUT,&#34;&#62;$ARGV[0]&#34;) or die &#34;Can&#39;t write to $ARGV[0]: $!&#34;;
    while (&#60;STDIN&#62;) {
        print;
        print OUT;
    }
    close OUT;</pre>

<dt><a name='Applying'></a><a name="Applying_%s_to_%s_will_act_on_scalar(%s)"
>Applying %s to %s will act on scalar(%s)</a></dt>

<dd>
<p>(W misc) The pattern match (<code>//</code>), substitution (<code>s///</code>), and transliteration (<code>tr///</code>) operators work on scalar values. If you apply one of them to an array or a hash, it will convert the array or hash to a scalar value (the length of an array, or the population info of a hash) and then work on that scalar value. This is probably not what you meant to do. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#grep" class="podlinkpod"
>&#34;grep&#34; in perlfunc</a> and <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#map" class="podlinkpod"
>&#34;map&#34; in perlfunc</a> for alternatives.</p>

<dt><a name='Arg'></a><a name="Arg_too_short_for_msgsnd"
>Arg too short for msgsnd</a></dt>

<dd>
<p>(F) msgsnd() requires a string at least as long as sizeof(long).</p>

<dt><a name='s'></a><a name="%s_argument_is_not_a_HASH_or_ARRAY_element_or_a_subroutine"
>%s argument is not a HASH or ARRAY element or a subroutine</a></dt>

<dd>
<p>(F) The argument to exists() must be a hash or array element or a subroutine with an ampersand, such as:</p>

<pre class="sh_perl">    $foo{$bar}
    $ref-&#62;{&#34;susie&#34;}[12]
    &#38;do_something</pre>

<dt><a name='s'></a><a name="%s_argument_is_not_a_HASH_or_ARRAY_element_or_slice"
>%s argument is not a HASH or ARRAY element or slice</a></dt>

<dd>
<p>(F) The argument to delete() must be either a hash or array element, such as:</p>

<pre class="sh_perl">    $foo{$bar}
    $ref-&#62;{&#34;susie&#34;}[12]</pre>

<p>or a hash or array slice, such as:</p>

<pre class="sh_perl">    @foo[$bar, $baz, $xyzzy]
    @{$ref-&#62;[12]}{&#34;susie&#34;, &#34;queue&#34;}</pre>

<dt><a name='s'></a><a name="%s_argument_is_not_a_subroutine_name"
>%s argument is not a subroutine name</a></dt>

<dd>
<p>(F) The argument to exists() for <code>exists &#38;sub</code> must be a subroutine name, and not a subroutine call. <code>exists &#38;sub()</code> will generate this error.</p>

<dt><a name='Argument'></a><a name="Argument_&#34;%s&#34;_isn&#39;t_numeric%s"
>Argument &#34;%s&#34; isn&#39;t numeric%s</a></dt>

<dd>
<p>(W numeric) The indicated string was fed as an argument to an operator that expected a numeric value instead. If you&#39;re fortunate the message will identify which operator was so unfortunate.</p>

<dt><a name='Argument'></a><a name="Argument_list_not_closed_for_PerlIO_layer_&#34;%s&#34;"
>Argument list not closed for PerlIO layer &#34;%s&#34;</a></dt>

<dd>
<p>(W layer) When pushing a layer with arguments onto the Perl I/O system you forgot the ) that closes the argument list. (Layers take care of transforming data between external and internal representations.) Perl stopped parsing the layer list at this point and did not attempt to push this layer. If your program didn&#39;t explicitly request the failing operation, it may be the result of the value of the environment variable PERLIO.</p>

<dt><a name='Array'></a><a name="Array_@%s_missing_the_@_in_argument_%d_of_%s()"
>Array @%s missing the @ in argument %d of %s()</a></dt>

<dd>
<p>(D deprecated) Really old Perl let you omit the @ on array names in some spots. This is now heavily deprecated.</p>

<dt><a name='assertion'></a><a name="assertion_botched:_%s"
>assertion botched: %s</a></dt>

<dd>
<p>(P) The malloc package that comes with Perl had an internal failure.</p>

<dt><a name='Assertion'></a><a name="Assertion_failed:_file_&#34;%s&#34;"
>Assertion failed: file &#34;%s&#34;</a></dt>

<dd>
<p>(P) A general assertion failed. The file in question must be examined.</p>

<dt><a name='Assignment'></a><a name="Assignment_to_both_a_list_and_a_scalar"
>Assignment to both a list and a scalar</a></dt>

<dd>
<p>(F) If you assign to a conditional operator, the 2nd and 3rd arguments must either both be scalars or both be lists. Otherwise Perl won&#39;t know which context to supply to the right side.</p>

<dt><a name='A'></a><a name="A_thread_exited_while_%d_threads_were_running"
>A thread exited while %d threads were running</a></dt>

<dd>
<p>(W threads)(S) When using threaded Perl, a thread (not necessarily the main thread) exited while there were still other threads running. Usually it&#39;s a good idea first to collect the return values of the created threads by joining them, and only then to exit from the main thread. See <a href="/perldoc?threads" class="podlinkpod"
>threads</a>.</p>

<dt><a name='Attempt'></a><a name="Attempt_to_access_disallowed_key_&#39;%s&#39;_in_a_restricted_hash"
>Attempt to access disallowed key &#39;%s&#39; in a restricted hash</a></dt>

<dd>
<p>(F) The failing code has attempted to get or set a key which is not in the current set of allowed keys of a restricted hash.</p>

<dt><a name='Attempt'></a><a name="Attempt_to_bless_into_a_reference"
>Attempt to bless into a reference</a></dt>

<dd>
<p>(F) The CLASSNAME argument to the bless() operator is expected to be the name of the package to bless the resulting object into. You&#39;ve supplied instead a reference to something: perhaps you wrote</p>

<pre class="sh_perl">    bless $self, $proto;</pre>

<p>when you intended</p>

<pre class="sh_perl">    bless $self, ref($proto) || $proto;</pre>

<p>If you actually want to bless into the stringified version of the reference supplied, you need to stringify it yourself, for example by:</p>

<pre class="sh_perl">    bless $self, &#34;$proto&#34;;</pre>

<dt><a name='Attempt'></a><a name="Attempt_to_delete_disallowed_key_&#39;%s&#39;_from_a_restricted_hash"
>Attempt to delete disallowed key &#39;%s&#39; from a restricted hash</a></dt>

<dd>
<p>(F) The failing code attempted to delete from a restricted hash a key which is not in its key set.</p>

<dt><a name='Attempt'></a><a name="Attempt_to_delete_readonly_key_&#39;%s&#39;_from_a_restricted_hash"
>Attempt to delete readonly key &#39;%s&#39; from a restricted hash</a></dt>

<dd>
<p>(F) The failing code attempted to delete a key whose value has been declared readonly from a restricted hash.</p>

<dt><a name='Attempt'></a><a name="Attempt_to_free_non-arena_SV:_0x%x"
>Attempt to free non-arena SV: 0x%x</a></dt>

<dd>
<p>(P internal) All SV objects are supposed to be allocated from arenas that will be garbage collected on exit. An SV was discovered to be outside any of those arenas.</p>

<dt><a name='Attempt'></a><a name="Attempt_to_free_nonexistent_shared_string"
>Attempt to free nonexistent shared string</a></dt>

<dd>
<p>(P internal) Perl maintains a reference-counted internal table of strings to optimize the storage and access of hash keys and other strings. This indicates someone tried to decrement the reference count of a string that can no longer be found in the table.</p>

<dt><a name='Attempt'></a><a name="Attempt_to_free_temp_prematurely"
>Attempt to free temp prematurely</a></dt>

<dd>
<p>(W debugging) Mortalized values are supposed to be freed by the free_tmps() routine. This indicates that something else is freeing the SV before the free_tmps() routine gets a chance, which means that the free_tmps() routine will be freeing an unreferenced scalar when it does try to free it.</p>

<dt><a name='Attempt'></a><a name="Attempt_to_free_unreferenced_glob_pointers"
>Attempt to free unreferenced glob pointers</a></dt>

<dd>
<p>(P internal) The reference counts got screwed up on symbol aliases.</p>

<dt><a name='Attempt'></a><a name="Attempt_to_free_unreferenced_scalar"
>Attempt to free unreferenced scalar</a></dt>

<dd>
<p>(W internal) Perl went to decrement the reference count of a scalar to see if it would go to 0, and discovered that it had already gone to 0 earlier, and should have been freed, and in fact, probably was freed. This could indicate that SvREFCNT_dec() was called too many times, or that SvREFCNT_inc() was called too few times, or that the SV was mortalized when it shouldn&#39;t have been, or that memory has been corrupted.</p>

<dt><a name='Attempt'></a><a name="Attempt_to_join_self"
>Attempt to join self</a></dt>

<dd>
<p>(F) You tried to join a thread from within itself, which is an impossible task. You may be joining the wrong thread, or you may need to move the join() to some other thread.</p>

<dt><a name='Attempt'></a><a name="Attempt_to_pack_pointer_to_temporary_value"
>Attempt to pack pointer to temporary value</a></dt>

<dd>
<p>(W pack) You tried to pass a temporary value (like the result of a function, or a computed expression) to the &#34;p&#34; pack() template. This means the result contains a pointer to a location that could become invalid anytime, even before the end of the current statement. Use literals or global values as arguments to the &#34;p&#34; pack() template to avoid this warning.</p>

<dt><a name='Attempt'></a><a name="Attempt_to_reload_%s_aborted."
>Attempt to reload %s aborted.</a></dt>

<dd>
<p>(F) You tried to load a file with <code>use</code> or <code>require</code> that failed to compile once already. Perl will not try to compile this file again unless you delete its entry from %INC. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#require" class="podlinkpod"
>&#34;require&#34; in perlfunc</a> and <a href="/~flora/perl-5.14.2/pod/perlvar.pod#%INC" class="podlinkpod"
>&#34;%INC&#34; in perlvar</a>.</p>

<dt><a name='Attempt'></a><a name="Attempt_to_set_length_of_freed_array"
>Attempt to set length of freed array</a></dt>

<dd>
<p>(W) You tried to set the length of an array which has been freed. You can do this by storing a reference to the scalar representing the last index of an array and later assigning through that reference. For example</p>

<pre class="sh_perl">    $r = do {my @a; \$#a};
    $$r = 503</pre>

<dt><a name='Attempt'></a><a name="Attempt_to_use_reference_as_lvalue_in_substr"
>Attempt to use reference as lvalue in substr</a></dt>

<dd>
<p>(W substr) You supplied a reference as the first argument to substr() used as an lvalue, which is pretty strange. Perhaps you forgot to dereference it first. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#substr" class="podlinkpod"
>&#34;substr&#34; in perlfunc</a>.</p>

<dt><a name='Attribute'></a><a name="Attribute_&#34;locked&#34;_is_deprecated"
>Attribute &#34;locked&#34; is deprecated</a></dt>

<dd>
<p>(D deprecated) You have used the attributes pragma to modify the &#34;locked&#34; attribute on a code reference. The :locked attribute is obsolete, has had no effect since 5005 threads were removed, and will be removed in a future release of Perl 5.</p>

<dt><a name='Attribute'></a><a name="Attribute_&#34;unique&#34;_is_deprecated"
>Attribute &#34;unique&#34; is deprecated</a></dt>

<dd>
<p>(D deprecated) You have used the attributes pragma to modify the &#34;unique&#34; attribute on an array, hash or scalar reference. The :unique attribute has had no effect since Perl 5.8.8, and will be removed in a future release of Perl 5.</p>

<dt><a name='Bad'></a><a name="Bad_arg_length_for_%s,_is_%u,_should_be_%d"
>Bad arg length for %s, is %u, should be %d</a></dt>

<dd>
<p>(F) You passed a buffer of the wrong size to one of msgctl(), semctl() or shmctl(). In C parlance, the correct sizes are, respectively, sizeof(struct&#160;msqid_ds&#160;*), sizeof(struct&#160;semid_ds&#160;*), and sizeof(struct&#160;shmid_ds&#160;*).</p>

<dt><a name='Bad'></a><a name="Bad_evalled_substitution_pattern"
>Bad evalled substitution pattern</a></dt>

<dd>
<p>(F) You&#39;ve used the <code>/e</code> switch to evaluate the replacement for a substitution, but perl found a syntax error in the code to evaluate, most likely an unexpected right brace &#39;}&#39;.</p>

<dt><a name='Bad'></a><a name="Bad_filehandle:_%s"
>Bad filehandle: %s</a></dt>

<dd>
<p>(F) A symbol was passed to something wanting a filehandle, but the symbol has no filehandle associated with it. Perhaps you didn&#39;t do an open(), or did it in another package.</p>

<dt><a name='Bad'></a><a name="Bad_free()_ignored"
>Bad free() ignored</a></dt>

<dd>
<p>(S malloc) An internal routine called free() on something that had never been malloc()ed in the first place. Mandatory, but can be disabled by setting environment variable <code>PERL_BADFREE</code> to 0.</p>

<p>This message can be seen quite often with DB_File on systems with &#34;hard&#34; dynamic linking, like <code>AIX</code> and <code>OS/2</code>. It is a bug of <code>Berkeley DB</code> which is left unnoticed if <code>DB</code> uses <i>forgiving</i> system malloc().</p>

<dt><a name='Bad'></a><a name="Bad_hash"
>Bad hash</a></dt>

<dd>
<p>(P) One of the internal hash routines was passed a null HV pointer.</p>

<dt><a name='Badly'></a><a name="Badly_placed_()&#39;s"
>Badly placed ()&#39;s</a></dt>

<dd>
<p>(A) You&#39;ve accidentally run your script through <b>csh</b> instead of Perl. Check the #! line, or manually feed your script into Perl yourself.</p>

<dt><a name='Bad'></a><a name="Bad_name_after_%s::"
>Bad name after %s::</a></dt>

<dd>
<p>(F) You started to name a symbol by using a package prefix, and then didn&#39;t finish the symbol. In particular, you can&#39;t interpolate outside of quotes, so</p>

<pre class="sh_perl">    $var = &#39;myvar&#39;;
    $sym = mypack::$var;</pre>

<p>is not the same as</p>

<pre class="sh_perl">    $var = &#39;myvar&#39;;
    $sym = &#34;mypack::$var&#34;;</pre>

<dt><a name='Bad'></a><a name="Bad_plugin_affecting_keyword_&#39;%s&#39;"
>Bad plugin affecting keyword &#39;%s&#39;</a></dt>

<dd>
<p>(F) An extension using the keyword plugin mechanism violated the plugin API.</p>

<dt><a name='Bad'></a><a name="Bad_realloc()_ignored"
>Bad realloc() ignored</a></dt>

<dd>
<p>(S malloc) An internal routine called realloc() on something that had never been malloc()ed in the first place. Mandatory, but can be disabled by setting the environment variable <code>PERL_BADFREE</code> to 1.</p>

<dt><a name='Bad'></a><a name="Bad_symbol_for_array"
>Bad symbol for array</a></dt>

<dd>
<p>(P) An internal request asked to add an array entry to something that wasn&#39;t a symbol table entry.</p>

<dt><a name='Bad'></a><a name="Bad_symbol_for_dirhandle"
>Bad symbol for dirhandle</a></dt>

<dd>
<p>(P) An internal request asked to add a dirhandle entry to something that wasn&#39;t a symbol table entry.</p>

<dt><a name='Bad'></a><a name="Bad_symbol_for_filehandle"
>Bad symbol for filehandle</a></dt>

<dd>
<p>(P) An internal request asked to add a filehandle entry to something that wasn&#39;t a symbol table entry.</p>

<dt><a name='Bad'></a><a name="Bad_symbol_for_hash"
>Bad symbol for hash</a></dt>

<dd>
<p>(P) An internal request asked to add a hash entry to something that wasn&#39;t a symbol table entry.</p>

<dt><a name='Bareword'></a><a name="Bareword_found_in_conditional"
>Bareword found in conditional</a></dt>

<dd>
<p>(W bareword) The compiler found a bareword where it expected a conditional, which often indicates that an || or &#38;&#38; was parsed as part of the last argument of the previous construct, for example:</p>

<pre class="sh_perl">    open FOO || die;</pre>

<p>It may also indicate a misspelled constant that has been interpreted as a bareword:</p>

<pre class="sh_perl">    use constant TYPO =&#62; 1;
    if (TYOP) { print &#34;foo&#34; }</pre>

<p>The <code>strict</code> pragma is useful in avoiding such errors.</p>

<dt><a name='Bareword'></a><a name="Bareword_&#34;%s&#34;_not_allowed_while_&#34;strict_subs&#34;_in_use"
>Bareword &#34;%s&#34; not allowed while &#34;strict subs&#34; in use</a></dt>

<dd>
<p>(F) With &#34;strict subs&#34; in use, a bareword is only allowed as a subroutine identifier, in curly brackets or to the left of the &#34;=&#62;&#34; symbol. Perhaps you need to predeclare a subroutine?</p>

<dt><a name='Bareword'></a><a name="Bareword_&#34;%s&#34;_refers_to_nonexistent_package"
>Bareword &#34;%s&#34; refers to nonexistent package</a></dt>

<dd>
<p>(W bareword) You used a qualified bareword of the form <code>Foo::</code>, but the compiler saw no other uses of that namespace before that point. Perhaps you need to predeclare a package?</p>

<dt><a name='BEGIN'></a><a name="BEGIN_failed--compilation_aborted"
>BEGIN failed--compilation aborted</a></dt>

<dd>
<p>(F) An untrapped exception was raised while executing a BEGIN subroutine. Compilation stops immediately and the interpreter is exited.</p>

<dt><a name='BEGIN'></a><a name="BEGIN_not_safe_after_errors--compilation_aborted"
>BEGIN not safe after errors--compilation aborted</a></dt>

<dd>
<p>(F) Perl found a <code>BEGIN {}</code> subroutine (or a <code>use</code> directive, which implies a <code>BEGIN {}</code>) after one or more compilation errors had already occurred. Since the intended environment for the <code>BEGIN {}</code> could not be guaranteed (due to the errors), and since subsequent code likely depends on its correct operation, Perl just gave up.</p>

<dt><a name='1'></a><a name="\1_better_written_as_$1"
>\1 better written as $1</a></dt>

<dd>
<p>(W syntax) Outside of patterns, backreferences live on as variables. The use of backslashes is grandfathered on the right-hand side of a substitution, but stylistically it&#39;s better to use the variable form because other Perl programmers will expect it, and it works better if there are more than 9 backreferences.</p>

<dt><a name='Binary'></a><a name="Binary_number_&#62;_0b11111111111111111111111111111111_non-portable"
>Binary number &#62; 0b11111111111111111111111111111111 non-portable</a></dt>

<dd>
<p>(W portable) The binary number you specified is larger than 2**32-1 (4294967295) and therefore non-portable between systems. See <a href="/~flora/perl-5.14.2/pod/perlport.pod" class="podlinkpod"
>perlport</a> for more on portability concerns.</p>

<dt><a name='bind'></a><a name="bind()_on_closed_socket_%s"
>bind() on closed socket %s</a></dt>

<dd>
<p>(W closed) You tried to do a bind on a closed socket. Did you forget to check the return value of your socket() call? See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#bind" class="podlinkpod"
>&#34;bind&#34; in perlfunc</a>.</p>

<dt><a name='binmode'></a><a name="binmode()_on_closed_filehandle_%s"
>binmode() on closed filehandle %s</a></dt>

<dd>
<p>(W unopened) You tried binmode() on a filehandle that was never opened. Check your control flow and number of arguments.</p>

<dt><a name='b'></a><a name="&#34;\b{&#34;_is_deprecated;_use_&#34;\b\{&#34;_instead"
>&#34;\b{&#34; is deprecated; use &#34;\b\{&#34; instead</a></dt>

<dd>
<dt><a name='B'></a><a name="&#34;\B{&#34;_is_deprecated;_use_&#34;\B\{&#34;_instead"
>&#34;\B{&#34; is deprecated; use &#34;\B\{&#34; instead</a></dt>

<dd>
<p>(W deprecated, regexp) Use of an unescaped &#34;{&#34; immediately following a <code>\b</code> or <code>\B</code> is now deprecated so as to reserve its use for Perl itself in a future release.</p>

<dt><a name='Bit'></a><a name="Bit_vector_size_&#62;_32_non-portable"
>Bit vector size &#62; 32 non-portable</a></dt>

<dd>
<p>(W portable) Using bit vector sizes larger than 32 is non-portable.</p>

<dt><a name='Bizarre'></a><a name="Bizarre_copy_of_%s_in_%s"
>Bizarre copy of %s in %s</a></dt>

<dd>
<p>(P) Perl detected an attempt to copy an internal value that is not copiable.</p>

<dt><a name='Buffer'></a><a name="Buffer_overflow_in_prime_env_iter:_%s"
>Buffer overflow in prime_env_iter: %s</a></dt>

<dd>
<p>(W internal) A warning peculiar to VMS. While Perl was preparing to iterate over %ENV, it encountered a logical name or symbol definition which was too long, so it was truncated to the string shown.</p>

<dt><a name='Callback'></a><a name="Callback_called_exit"
>Callback called exit</a></dt>

<dd>
<p>(F) A subroutine invoked from an external package via call_sv() exited by calling exit.</p>

<dt><a name='s'></a><a name="%s()_called_too_early_to_check_prototype"
>%s() called too early to check prototype</a></dt>

<dd>
<p>(W prototype) You&#39;ve called a function that has a prototype before the parser saw a definition or declaration for it, and Perl could not check that the call conforms to the prototype. You need to either add an early prototype declaration for the subroutine in question, or move the subroutine definition ahead of the call to get proper prototype checking. Alternatively, if you are certain that you&#39;re calling the function correctly, you may put an ampersand before the name to avoid the warning. See <a href="/~flora/perl-5.14.2/pod/perlsub.pod" class="podlinkpod"
>perlsub</a>.</p>

<dt><a name='Cannot'></a><a name="Cannot_compress_integer_in_pack"
>Cannot compress integer in pack</a></dt>

<dd>
<p>(F) An argument to pack(&#34;w&#34;,...) was too large to compress. The BER compressed integer format can only be used with positive integers, and you attempted to compress Infinity or a very large number (&#62; 1e308). See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Cannot'></a><a name="Cannot_compress_negative_numbers_in_pack"
>Cannot compress negative numbers in pack</a></dt>

<dd>
<p>(F) An argument to pack(&#34;w&#34;,...) was negative. The BER compressed integer format can only be used with positive integers. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Cannot'></a><a name="Cannot_convert_a_reference_to_%s_to_typeglob"
>Cannot convert a reference to %s to typeglob</a></dt>

<dd>
<p>(F) You manipulated Perl&#39;s symbol table directly, stored a reference in it, then tried to access that symbol via conventional Perl syntax. The access triggers Perl to autovivify that typeglob, but it there is no legal conversion from that type of reference to a typeglob.</p>

<dt><a name='Cannot'></a><a name="Cannot_copy_to_%s_in_%s"
>Cannot copy to %s in %s</a></dt>

<dd>
<p>(P) Perl detected an attempt to copy a value to an internal type that cannot be directly assigned to.</p>

<dt><a name='Cannot'></a><a name="Cannot_find_encoding_&#34;%s&#34;"
>Cannot find encoding &#34;%s&#34;</a></dt>

<dd>
<p>(S io) You tried to apply an encoding that did not exist to a filehandle, either with open() or binmode().</p>

<dt><a name='Can'></a><a name="Can_only_compress_unsigned_integers_in_pack"
>Can only compress unsigned integers in pack</a></dt>

<dd>
<p>(F) An argument to pack(&#34;w&#34;,...) was not an integer. The BER compressed integer format can only be used with positive integers, and you attempted to compress something else. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_bless_non-reference_value"
>Can&#39;t bless non-reference value</a></dt>

<dd>
<p>(F) Only hard references may be blessed. This is how Perl &#34;enforces&#34; encapsulation of objects. See <a href="/~flora/perl-5.14.2/pod/perlobj.pod" class="podlinkpod"
>perlobj</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_&#34;break&#34;_in_a_loop_topicalizer"
>Can&#39;t &#34;break&#34; in a loop topicalizer</a></dt>

<dd>
<p>(F) You called <code>break</code>, but you&#39;re in a <code>foreach</code> block rather than a <code>given</code> block. You probably meant to use <code>next</code> or <code>last</code>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_&#34;break&#34;_outside_a_given_block"
>Can&#39;t &#34;break&#34; outside a given block</a></dt>

<dd>
<p>(F) You called <code>break</code>, but you&#39;re not inside a <code>given</code> block.</p>

<dt><a name='Can'></a><a name="Can&#39;t_call_method_&#34;%s&#34;_on_an_undefined_value"
>Can&#39;t call method &#34;%s&#34; on an undefined value</a></dt>

<dd>
<p>(F) You used the syntax of a method call, but the slot filled by the object reference or package name contains an undefined value. Something like this will reproduce the error:</p>

<pre class="sh_perl">    $BADREF = undef;
    process $BADREF 1,2,3;
    $BADREF-&#62;process(1,2,3);</pre>

<dt><a name='Can'></a><a name="Can&#39;t_call_method_&#34;%s&#34;_on_unblessed_reference"
>Can&#39;t call method &#34;%s&#34; on unblessed reference</a></dt>

<dd>
<p>(F) A method call must know in what package it&#39;s supposed to run. It ordinarily finds this out from the object reference you supply, but you didn&#39;t supply an object reference in this case. A reference isn&#39;t an object reference until it has been blessed. See <a href="/~flora/perl-5.14.2/pod/perlobj.pod" class="podlinkpod"
>perlobj</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_call_method_&#34;%s&#34;_without_a_package_or_object_reference"
>Can&#39;t call method &#34;%s&#34; without a package or object reference</a></dt>

<dd>
<p>(F) You used the syntax of a method call, but the slot filled by the object reference or package name contains an expression that returns a defined value which is neither an object reference nor a package name. Something like this will reproduce the error:</p>

<pre class="sh_perl">    $BADREF = 42;
    process $BADREF 1,2,3;
    $BADREF-&#62;process(1,2,3);</pre>

<dt><a name='Can'></a><a name="Can&#39;t_chdir_to_%s"
>Can&#39;t chdir to %s</a></dt>

<dd>
<p>(F) You called <code>perl -x/foo/bar</code>, but <code>/foo/bar</code> is not a directory that you can chdir to, possibly because it doesn&#39;t exist.</p>

<dt><a name='Can'></a><a name="Can&#39;t_check_filesystem_of_script_&#34;%s&#34;_for_nosuid"
>Can&#39;t check filesystem of script &#34;%s&#34; for nosuid</a></dt>

<dd>
<p>(P) For some reason you can&#39;t check the filesystem of the script for nosuid.</p>

<dt><a name='Can'></a><a name="Can&#39;t_coerce_%s_to_%s_in_%s"
>Can&#39;t coerce %s to %s in %s</a></dt>

<dd>
<p>(F) Certain types of SVs, in particular real symbol table entries (typeglobs), can&#39;t be forced to stop being what they are. So you can&#39;t say things like:</p>

<pre class="sh_perl">    *foo += 1;</pre>

<p>You CAN say</p>

<pre class="sh_perl">    $foo = *foo;
    $foo += 1;</pre>

<p>but then $foo no longer contains a glob.</p>

<dt><a name='Can'></a><a name="Can&#39;t_&#34;continue&#34;_outside_a_when_block"
>Can&#39;t &#34;continue&#34; outside a when block</a></dt>

<dd>
<p>(F) You called <code>continue</code>, but you&#39;re not inside a <code>when</code> or <code>default</code> block.</p>

<dt><a name='Can'></a><a name="Can&#39;t_create_pipe_mailbox"
>Can&#39;t create pipe mailbox</a></dt>

<dd>
<p>(P) An error peculiar to VMS. The process is suffering from exhausted quotas or other plumbing problems.</p>

<dt><a name='Can'></a><a name="Can&#39;t_declare_%s_in_&#34;%s&#34;"
>Can&#39;t declare %s in &#34;%s&#34;</a></dt>

<dd>
<p>(F) Only scalar, array, and hash variables may be declared as &#34;my&#34;, &#34;our&#34; or &#34;state&#34; variables. They must have ordinary identifiers as names.</p>

<dt><a name='Can'></a><a name="Can&#39;t_do_inplace_edit:_%s_is_not_a_regular_file"
>Can&#39;t do inplace edit: %s is not a regular file</a></dt>

<dd>
<p>(S inplace) You tried to use the <b>-i</b> switch on a special file, such as a file in /dev, or a FIFO. The file was ignored.</p>

<dt><a name='Can'></a><a name="Can&#39;t_do_inplace_edit_on_%s:_%s"
>Can&#39;t do inplace edit on %s: %s</a></dt>

<dd>
<p>(S inplace) The creation of the new file failed for the indicated reason.</p>

<dt><a name='Can'></a><a name="Can&#39;t_do_inplace_edit_without_backup"
>Can&#39;t do inplace edit without backup</a></dt>

<dd>
<p>(F) You&#39;re on a system such as MS-DOS that gets confused if you try reading from a deleted (but still opened) file. You have to say <code>-i.bak</code>, or some such.</p>

<dt><a name='Can'></a><a name="Can&#39;t_do_inplace_edit:_%s_would_not_be_unique"
>Can&#39;t do inplace edit: %s would not be unique</a></dt>

<dd>
<p>(S inplace) Your filesystem does not support filenames longer than 14 characters and Perl was unable to create a unique filename during inplace editing with the <b>-i</b> switch. The file was ignored.</p>

<dt><a name='Can'></a><a name="Can&#39;t_do_{n,m}_with_n_&#62;_m_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Can&#39;t do {n,m} with n &#62; m in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) Minima must be less than or equal to maxima. If you really want your regexp to match something 0 times, just put {0}. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_do_waitpid_with_flags"
>Can&#39;t do waitpid with flags</a></dt>

<dd>
<p>(F) This machine doesn&#39;t have either waitpid() or wait4(), so only waitpid() without flags is emulated.</p>

<dt><a name='Can'></a><a name="Can&#39;t_emulate_-%s_on_#!_line"
>Can&#39;t emulate -%s on #! line</a></dt>

<dd>
<p>(F) The #! line specifies a switch that doesn&#39;t make sense at this point. For example, it&#39;d be kind of silly to put a <b>-x</b> on the #! line.</p>

<dt><a name='Can'></a><a name="Can&#39;t_%s_%s-endian_%ss_on_this_platform"
>Can&#39;t %s %s-endian %ss on this platform</a></dt>

<dd>
<p>(F) Your platform&#39;s byte-order is neither big-endian nor little-endian, or it has a very strange pointer size. Packing and unpacking big- or little-endian floating point values and pointers may not be possible. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_exec_&#34;%s&#34;:_%s"
>Can&#39;t exec &#34;%s&#34;: %s</a></dt>

<dd>
<p>(W exec) A system(), exec(), or piped open call could not execute the named program for the indicated reason. Typical reasons include: the permissions were wrong on the file, the file wasn&#39;t found in <code>$ENV{PATH}</code>, the executable in question was compiled for another architecture, or the #! line in a script points to an interpreter that can&#39;t be run for similar reasons. (Or maybe your system doesn&#39;t support #! at all.)</p>

<dt><a name='Can'></a><a name="Can&#39;t_exec_%s"
>Can&#39;t exec %s</a></dt>

<dd>
<p>(F) Perl was trying to execute the indicated program for you because that&#39;s what the #! line said. If that&#39;s not what you wanted, you may need to mention &#34;perl&#34; on the #! line somewhere.</p>

<dt><a name='Can'></a><a name="Can&#39;t_execute_%s"
>Can&#39;t execute %s</a></dt>

<dd>
<p>(F) You used the <b>-S</b> switch, but the copies of the script to execute found in the PATH did not have correct permissions.</p>

<dt><a name='Can'></a><a name="Can&#39;t_find_an_opnumber_for_&#34;%s&#34;"
>Can&#39;t find an opnumber for &#34;%s&#34;</a></dt>

<dd>
<p>(F) A string of a form <code>CORE::word</code> was given to prototype(), but there is no builtin with the name <code>word</code>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_find_%s_character_property_&#34;%s&#34;"
>Can&#39;t find %s character property &#34;%s&#34;</a></dt>

<dd>
<p>(F) You used <code>\p{}</code> or <code>\P{}</code> but the character property by that name could not be found. Maybe you misspelled the name of the property? See <a href="/perldoc?perluniprops#Properties_accessible_through_\p{}_and_\P{}" class="podlinkpod"
>&#34;Properties accessible through \p{} and \P{}&#34; in perluniprops</a> for a complete list of available properties.</p>

<dt><a name='Can'></a><a name="Can&#39;t_find_label_%s"
>Can&#39;t find label %s</a></dt>

<dd>
<p>(F) You said to goto a label that isn&#39;t mentioned anywhere that it&#39;s possible for us to go to. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#goto" class="podlinkpod"
>&#34;goto&#34; in perlfunc</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_find_%s_on_PATH"
>Can&#39;t find %s on PATH</a></dt>

<dd>
<p>(F) You used the <b>-S</b> switch, but the script to execute could not be found in the PATH.</p>

<dt><a name='Can'></a><a name="Can&#39;t_find_%s_on_PATH,_&#39;.&#39;_not_in_PATH"
>Can&#39;t find %s on PATH, &#39;.&#39; not in PATH</a></dt>

<dd>
<p>(F) You used the <b>-S</b> switch, but the script to execute could not be found in the PATH, or at least not with the correct permissions. The script exists in the current directory, but PATH prohibits running it.</p>

<dt><a name='Can'></a><a name="Can&#39;t_find_string_terminator_%s_anywhere_before_EOF"
>Can&#39;t find string terminator %s anywhere before EOF</a></dt>

<dd>
<p>(F) Perl strings can stretch over multiple lines. This message means that the closing delimiter was omitted. Because bracketed quotes count nesting levels, the following is missing its final parenthesis:</p>

<pre class="sh_perl">    print q(The character &#39;(&#39; starts a side comment.);</pre>

<p>If you&#39;re getting this error from a here-document, you may have included unseen whitespace before or after your closing tag or there may not be a linebreak after it. A good programmer&#39;s editor will have a way to help you find these characters (or lack of characters). See <a href="/~flora/perl-5.14.2/pod/perlop.pod" class="podlinkpod"
>perlop</a> for the full details on here-documents.</p>

<dt><a name='Can'></a><a name="Can&#39;t_find_Unicode_property_definition_&#34;%s&#34;"
>Can&#39;t find Unicode property definition &#34;%s&#34;</a></dt>

<dd>
<p>(F) You may have tried to use <code>\p</code> which means a Unicode property (for example <code>\p{Lu}</code> matches all uppercase letters). If you did mean to use a Unicode property, see <a href="/perldoc?perluniprops#Properties_accessible_through_\p{}_and_\P{}" class="podlinkpod"
>&#34;Properties accessible through \p{} and \P{}&#34; in perluniprops</a> for a complete list of available properties. If you didn&#39;t mean to use a Unicode property, escape the <code>\p</code>, either by <code>\\p</code> (just the <code>\p</code>) or by <code>\Q\p</code> (the rest of the string, or until <code>\E</code>).</p>

<dt><a name='Can'></a><a name="Can&#39;t_fork:_%s"
>Can&#39;t fork: %s</a></dt>

<dd>
<p>(F) A fatal error occurred while trying to fork while opening a pipeline.</p>

<dt><a name='Can'></a><a name="Can&#39;t_fork,_trying_again_in_5_seconds"
>Can&#39;t fork, trying again in 5 seconds</a></dt>

<dd>
<p>(W pipe) A fork in a piped open failed with EAGAIN and will be retried after five seconds.</p>

<dt><a name='Can'></a><a name="Can&#39;t_get_filespec_-_stale_stat_buffer?"
>Can&#39;t get filespec - stale stat buffer?</a></dt>

<dd>
<p>(S) A warning peculiar to VMS. This arises because of the difference between access checks under VMS and under the Unix model Perl assumes. Under VMS, access checks are done by filename, rather than by bits in the stat buffer, so that ACLs and other protections can be taken into account. Unfortunately, Perl assumes that the stat buffer contains all the necessary information, and passes it, instead of the filespec, to the access-checking routine. It will try to retrieve the filespec using the device name and FID present in the stat buffer, but this works only if you haven&#39;t made a subsequent call to the CRTL stat() routine, because the device name is overwritten with each call. If this warning appears, the name lookup failed, and the access-checking routine gave up and returned FALSE, just to be conservative. (Note: The access-checking routine knows about the Perl <code>stat</code> operator and file tests, so you shouldn&#39;t ever see this warning in response to a Perl command; it arises only if some internal code takes stat buffers lightly.)</p>

<dt><a name='Can'></a><a name="Can&#39;t_get_pipe_mailbox_device_name"
>Can&#39;t get pipe mailbox device name</a></dt>

<dd>
<p>(P) An error peculiar to VMS. After creating a mailbox to act as a pipe, Perl can&#39;t retrieve its name for later use.</p>

<dt><a name='Can'></a><a name="Can&#39;t_get_SYSGEN_parameter_value_for_MAXBUF"
>Can&#39;t get SYSGEN parameter value for MAXBUF</a></dt>

<dd>
<p>(P) An error peculiar to VMS. Perl asked $GETSYI how big you want your mailbox buffers to be, and didn&#39;t get an answer.</p>

<dt><a name='Can'></a><a name="Can&#39;t_&#34;goto&#34;_into_the_middle_of_a_foreach_loop"
>Can&#39;t &#34;goto&#34; into the middle of a foreach loop</a></dt>

<dd>
<p>(F) A &#34;goto&#34; statement was executed to jump into the middle of a foreach loop. You can&#39;t get there from here. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#goto" class="podlinkpod"
>&#34;goto&#34; in perlfunc</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_&#34;goto&#34;_out_of_a_pseudo_block"
>Can&#39;t &#34;goto&#34; out of a pseudo block</a></dt>

<dd>
<p>(F) A &#34;goto&#34; statement was executed to jump out of what might look like a block, except that it isn&#39;t a proper block. This usually occurs if you tried to jump out of a sort() block or subroutine, which is a no-no. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#goto" class="podlinkpod"
>&#34;goto&#34; in perlfunc</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_goto_subroutine_from_a_sort_sub_(or_similar_callback)"
>Can&#39;t goto subroutine from a sort sub (or similar callback)</a></dt>

<dd>
<p>(F) The &#34;goto subroutine&#34; call can&#39;t be used to jump out of the comparison sub for a sort(), or from a similar callback (such as the reduce() function in List::Util).</p>

<dt><a name='Can'></a><a name="Can&#39;t_goto_subroutine_from_an_eval-%s"
>Can&#39;t goto subroutine from an eval-%s</a></dt>

<dd>
<p>(F) The &#34;goto subroutine&#34; call can&#39;t be used to jump out of an eval &#34;string&#34; or block.</p>

<dt><a name='Can'></a><a name="Can&#39;t_goto_subroutine_outside_a_subroutine"
>Can&#39;t goto subroutine outside a subroutine</a></dt>

<dd>
<p>(F) The deeply magical &#34;goto subroutine&#34; call can only replace one subroutine call for another. It can&#39;t manufacture one out of whole cloth. In general you should be calling it out of only an AUTOLOAD routine anyway. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#goto" class="podlinkpod"
>&#34;goto&#34; in perlfunc</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_ignore_signal_CHLD,_forcing_to_default"
>Can&#39;t ignore signal CHLD, forcing to default</a></dt>

<dd>
<p>(W signal) Perl has detected that it is being run with the SIGCHLD signal (sometimes known as SIGCLD) disabled. Since disabling this signal will interfere with proper determination of exit status of child processes, Perl has reset the signal to its default value. This situation typically indicates that the parent program under which Perl may be running (e.g. cron) is being very careless.</p>

<dt><a name='Can'></a><a name="Can&#39;t_kill_a_non-numeric_process_ID"
>Can&#39;t kill a non-numeric process ID</a></dt>

<dd>
<p>(F) Process identifiers must be (signed) integers. It is a fatal error to attempt to kill() an undefined, empty-string or otherwise non-numeric process identifier.</p>

<dt><a name='Can'></a><a name="Can&#39;t_&#34;last&#34;_outside_a_loop_block"
>Can&#39;t &#34;last&#34; outside a loop block</a></dt>

<dd>
<p>(F) A &#34;last&#34; statement was executed to break out of the current block, except that there&#39;s this itty bitty problem called there isn&#39;t a current block. Note that an &#34;if&#34; or &#34;else&#34; block doesn&#39;t count as a &#34;loopish&#34; block, as doesn&#39;t a block given to sort(), map() or grep(). You can usually double the curlies to get the same effect though, because the inner curlies will be considered a block that loops once. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#last" class="podlinkpod"
>&#34;last&#34; in perlfunc</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_linearize_anonymous_symbol_table"
>Can&#39;t linearize anonymous symbol table</a></dt>

<dd>
<p>(F) Perl tried to calculate the method resolution order (MRO) of a package, but failed because the package stash has no name.</p>

<dt><a name='Can'></a><a name="Can&#39;t_load_&#39;%s&#39;_for_module_%s"
>Can&#39;t load &#39;%s&#39; for module %s</a></dt>

<dd>
<p>(F) The module you tried to load failed to load a dynamic extension. This may either mean that you upgraded your version of perl to one that is incompatible with your old dynamic extensions (which is known to happen between major versions of perl), or (more likely) that your dynamic extension was built against an older version of the library that is installed on your system. You may need to rebuild your old dynamic extensions.</p>

<dt><a name='Can'></a><a name="Can&#39;t_localize_lexical_variable_%s"
>Can&#39;t localize lexical variable %s</a></dt>

<dd>
<p>(F) You used local on a variable name that was previously declared as a lexical variable using &#34;my&#34; or &#34;state&#34;. This is not allowed. If you want to localize a package variable of the same name, qualify it with the package name.</p>

<dt><a name='Can'></a><a name="Can&#39;t_localize_through_a_reference"
>Can&#39;t localize through a reference</a></dt>

<dd>
<p>(F) You said something like <code>local $$ref</code>, which Perl can&#39;t currently handle, because when it goes to restore the old value of whatever $ref pointed to after the scope of the local() is finished, it can&#39;t be sure that $ref will still be a reference.</p>

<dt><a name='Can'></a><a name="Can&#39;t_locate_%s"
>Can&#39;t locate %s</a></dt>

<dd>
<p>(F) You said to <code>do</code> (or <code>require</code>, or <code>use</code>) a file that couldn&#39;t be found. Perl looks for the file in all the locations mentioned in @INC, unless the file name included the full path to the file. Perhaps you need to set the PERL5LIB or PERL5OPT environment variable to say where the extra library is, or maybe the script needs to add the library name to @INC. Or maybe you just misspelled the name of the file. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#require" class="podlinkpod"
>&#34;require&#34; in perlfunc</a> and <a href="/perldoc?lib" class="podlinkpod"
>lib</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_locate_auto/%s.al_in_@INC"
>Can&#39;t locate auto/%s.al in @INC</a></dt>

<dd>
<p>(F) A function (or method) was called in a package which allows autoload, but there is no function to autoload. Most probable causes are a misprint in a function/method name or a failure to <code>AutoSplit</code> the file, say, by doing <code>make install</code>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_locate_loadable_object_for_module_%s_in_@INC"
>Can&#39;t locate loadable object for module %s in @INC</a></dt>

<dd>
<p>(F) The module you loaded is trying to load an external library, like for example, <code>foo.so</code> or <code>bar.dll</code>, but the <a href="/~flora/perl-5.14.2/ext/DynaLoader/DynaLoader_pm.PL" class="podlinkpod"
>DynaLoader</a> module was unable to locate this library. See <a href="/~flora/perl-5.14.2/ext/DynaLoader/DynaLoader_pm.PL" class="podlinkpod"
>DynaLoader</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_locate_object_method_&#34;%s&#34;_via_package_&#34;%s&#34;"
>Can&#39;t locate object method &#34;%s&#34; via package &#34;%s&#34;</a></dt>

<dd>
<p>(F) You called a method correctly, and it correctly indicated a package functioning as a class, but that package doesn&#39;t define that particular method, nor does any of its base classes. See <a href="/~flora/perl-5.14.2/pod/perlobj.pod" class="podlinkpod"
>perlobj</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_locate_package_%s_for_@%s::ISA"
>Can&#39;t locate package %s for @%s::ISA</a></dt>

<dd>
<p>(W syntax) The @ISA array contained the name of another package that doesn&#39;t seem to exist.</p>

<dt><a name='Can'></a><a name="Can&#39;t_locate_PerlIO%s"
>Can&#39;t locate PerlIO%s</a></dt>

<dd>
<p>(F) You tried to use in open() a PerlIO layer that does not exist, e.g. open(FH, &#34;&#62;:nosuchlayer&#34;, &#34;somefile&#34;).</p>

<dt><a name='Can'></a><a name="Can&#39;t_make_list_assignment_to_\%ENV_on_this_system"
>Can&#39;t make list assignment to \%ENV on this system</a></dt>

<dd>
<p>(F) List assignment to %ENV is not supported on some systems, notably VMS.</p>

<dt><a name='Can'></a><a name="Can&#39;t_modify_%s_in_%s"
>Can&#39;t modify %s in %s</a></dt>

<dd>
<p>(F) You aren&#39;t allowed to assign to the item indicated, or otherwise try to change it, such as with an auto-increment.</p>

<dt><a name='Can'></a><a name="Can&#39;t_modify_nonexistent_substring"
>Can&#39;t modify nonexistent substring</a></dt>

<dd>
<p>(P) The internal routine that does assignment to a substr() was handed a NULL.</p>

<dt><a name='Can'></a><a name="Can&#39;t_modify_non-lvalue_subroutine_call"
>Can&#39;t modify non-lvalue subroutine call</a></dt>

<dd>
<p>(F) Subroutines meant to be used in lvalue context should be declared as such. See <a href="/~flora/perl-5.14.2/pod/perlsub.pod#Lvalue_subroutines" class="podlinkpod"
>&#34;Lvalue subroutines&#34; in perlsub</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_msgrcv_to_read-only_var"
>Can&#39;t msgrcv to read-only var</a></dt>

<dd>
<p>(F) The target of a msgrcv must be modifiable to be used as a receive buffer.</p>

<dt><a name='Can'></a><a name="Can&#39;t_&#34;next&#34;_outside_a_loop_block"
>Can&#39;t &#34;next&#34; outside a loop block</a></dt>

<dd>
<p>(F) A &#34;next&#34; statement was executed to reiterate the current block, but there isn&#39;t a current block. Note that an &#34;if&#34; or &#34;else&#34; block doesn&#39;t count as a &#34;loopish&#34; block, as doesn&#39;t a block given to sort(), map() or grep(). You can usually double the curlies to get the same effect though, because the inner curlies will be considered a block that loops once. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#next" class="podlinkpod"
>&#34;next&#34; in perlfunc</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_open_%s:_%s"
>Can&#39;t open %s: %s</a></dt>

<dd>
<p>(S inplace) The implicit opening of a file through use of the <code>&#60;&#62;</code> filehandle, either implicitly under the <code>-n</code> or <code>-p</code> command-line switches, or explicitly, failed for the indicated reason. Usually this is because you don&#39;t have read permission for a file which you named on the command line.</p>

<dt><a name='Can'></a><a name="Can&#39;t_open_a_reference"
>Can&#39;t open a reference</a></dt>

<dd>
<p>(W io) You tried to open a scalar reference for reading or writing, using the 3-arg open() syntax:</p>

<pre class="sh_perl">    open FH, &#39;&#62;&#39;, $ref;</pre>

<p>but your version of perl is compiled without perlio, and this form of open is not supported.</p>

<dt><a name='Can'></a><a name="Can&#39;t_open_bidirectional_pipe"
>Can&#39;t open bidirectional pipe</a></dt>

<dd>
<p>(W pipe) You tried to say <code>open(CMD, &#34;|cmd|&#34;)</code>, which is not supported. You can try any of several modules in the Perl library to do this, such as IPC::Open2. Alternately, direct the pipe&#39;s output to a file using &#34;&#62;&#34;, and then read it in under a different file handle.</p>

<dt><a name='Can'></a><a name="Can&#39;t_open_error_file_%s_as_stderr"
>Can&#39;t open error file %s as stderr</a></dt>

<dd>
<p>(F) An error peculiar to VMS. Perl does its own command line redirection, and couldn&#39;t open the file specified after &#39;2&#62;&#39; or &#39;2&#62;&#62;&#39; on the command line for writing.</p>

<dt><a name='Can'></a><a name="Can&#39;t_open_input_file_%s_as_stdin"
>Can&#39;t open input file %s as stdin</a></dt>

<dd>
<p>(F) An error peculiar to VMS. Perl does its own command line redirection, and couldn&#39;t open the file specified after &#39;&#60;&#39; on the command line for reading.</p>

<dt><a name='Can'></a><a name="Can&#39;t_open_output_file_%s_as_stdout"
>Can&#39;t open output file %s as stdout</a></dt>

<dd>
<p>(F) An error peculiar to VMS. Perl does its own command line redirection, and couldn&#39;t open the file specified after &#39;&#62;&#39; or &#39;&#62;&#62;&#39; on the command line for writing.</p>

<dt><a name='Can'></a><a name="Can&#39;t_open_output_pipe_(name:_%s)"
>Can&#39;t open output pipe (name: %s)</a></dt>

<dd>
<p>(P) An error peculiar to VMS. Perl does its own command line redirection, and couldn&#39;t open the pipe into which to send data destined for stdout.</p>

<dt><a name='Can'></a><a name="Can&#39;t_open_perl_script%s"
>Can&#39;t open perl script%s</a></dt>

<dd>
<p>(F) The script you specified can&#39;t be opened for the indicated reason.</p>

<p>If you&#39;re debugging a script that uses #!, and normally relies on the shell&#39;s $PATH search, the -S option causes perl to do that search, so you don&#39;t have to type the path or <code>`which $scriptname`</code>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_read_CRTL_environ"
>Can&#39;t read CRTL environ</a></dt>

<dd>
<p>(S) A warning peculiar to VMS. Perl tried to read an element of %ENV from the CRTL&#39;s internal environment array and discovered the array was missing. You need to figure out where your CRTL misplaced its environ or define <em>PERL_ENV_TABLES</em> (see <a href="/~flora/perl-5.14.2/pod/perlvms.pod" class="podlinkpod"
>perlvms</a>) so that environ is not searched.</p>

<dt><a name='Can'></a><a name="Can&#39;t_&#34;redo&#34;_outside_a_loop_block"
>Can&#39;t &#34;redo&#34; outside a loop block</a></dt>

<dd>
<p>(F) A &#34;redo&#34; statement was executed to restart the current block, but there isn&#39;t a current block. Note that an &#34;if&#34; or &#34;else&#34; block doesn&#39;t count as a &#34;loopish&#34; block, as doesn&#39;t a block given to sort(), map() or grep(). You can usually double the curlies to get the same effect though, because the inner curlies will be considered a block that loops once. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#redo" class="podlinkpod"
>&#34;redo&#34; in perlfunc</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_remove_%s:_%s,_skipping_file"
>Can&#39;t remove %s: %s, skipping file</a></dt>

<dd>
<p>(S inplace) You requested an inplace edit without creating a backup file. Perl was unable to remove the original file to replace it with the modified file. The file was left unmodified.</p>

<dt><a name='Can'></a><a name="Can&#39;t_rename_%s_to_%s:_%s,_skipping_file"
>Can&#39;t rename %s to %s: %s, skipping file</a></dt>

<dd>
<p>(S inplace) The rename done by the <b>-i</b> switch failed for some reason, probably because you don&#39;t have write permission to the directory.</p>

<dt><a name='Can'></a><a name="Can&#39;t_reopen_input_pipe_(name:_%s)_in_binary_mode"
>Can&#39;t reopen input pipe (name: %s) in binary mode</a></dt>

<dd>
<p>(P) An error peculiar to VMS. Perl thought stdin was a pipe, and tried to reopen it to accept binary data. Alas, it failed.</p>

<dt><a name='Can'></a><a name="Can&#39;t_resolve_method_&#34;%s&#34;_overloading_&#34;%s&#34;_in_package_&#34;%s&#34;"
>Can&#39;t resolve method &#34;%s&#34; overloading &#34;%s&#34; in package &#34;%s&#34;</a></dt>

<dd>
<p>(F|P) Error resolving overloading specified by a method name (as opposed to a subroutine reference): no such method callable via the package. If the method name is <code>???</code>, this is an internal error.</p>

<dt><a name='Can'></a><a name="Can&#39;t_return_%s_from_lvalue_subroutine"
>Can&#39;t return %s from lvalue subroutine</a></dt>

<dd>
<p>(F) Perl detected an attempt to return illegal lvalues (such as temporary or readonly values) from a subroutine used as an lvalue. This is not allowed.</p>

<dt><a name='Can'></a><a name="Can&#39;t_return_outside_a_subroutine"
>Can&#39;t return outside a subroutine</a></dt>

<dd>
<p>(F) The return statement was executed in mainline code, that is, where there was no subroutine call to return out of. See <a href="/~flora/perl-5.14.2/pod/perlsub.pod" class="podlinkpod"
>perlsub</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_return_%s_to_lvalue_scalar_context"
>Can&#39;t return %s to lvalue scalar context</a></dt>

<dd>
<p>(F) You tried to return a complete array or hash from an lvalue subroutine, but you called the subroutine in a way that made Perl think you meant to return only one value. You probably meant to write parentheses around the call to the subroutine, which tell Perl that the call should be in list context.</p>

<dt><a name='Can'></a><a name="Can&#39;t_stat_script_&#34;%s&#34;"
>Can&#39;t stat script &#34;%s&#34;</a></dt>

<dd>
<p>(P) For some reason you can&#39;t fstat() the script even though you have it open already. Bizarre.</p>

<dt><a name='Can'></a><a name="Can&#39;t_take_log_of_%g"
>Can&#39;t take log of %g</a></dt>

<dd>
<p>(F) For ordinary real numbers, you can&#39;t take the logarithm of a negative number or zero. There&#39;s a Math::Complex package that comes standard with Perl, though, if you really want to do that for the negative numbers.</p>

<dt><a name='Can'></a><a name="Can&#39;t_take_sqrt_of_%g"
>Can&#39;t take sqrt of %g</a></dt>

<dd>
<p>(F) For ordinary real numbers, you can&#39;t take the square root of a negative number. There&#39;s a Math::Complex package that comes standard with Perl, though, if you really want to do that.</p>

<dt><a name='Can'></a><a name="Can&#39;t_undef_active_subroutine"
>Can&#39;t undef active subroutine</a></dt>

<dd>
<p>(F) You can&#39;t undefine a routine that&#39;s currently running. You can, however, redefine it while it&#39;s running, and you can even undef the redefined subroutine while the old routine is running. Go figure.</p>

<dt><a name='Can'></a><a name="Can&#39;t_upgrade_%s_(%d)_to_%d"
>Can&#39;t upgrade %s (%d) to %d</a></dt>

<dd>
<p>(P) The internal sv_upgrade routine adds &#34;members&#34; to an SV, making it into a more specialized kind of SV. The top several SV types are so specialized, however, that they cannot be interconverted. This message indicates that such a conversion was attempted.</p>

<dt><a name='Can'></a><a name="Can&#39;t_use_anonymous_symbol_table_for_method_lookup"
>Can&#39;t use anonymous symbol table for method lookup</a></dt>

<dd>
<p>(F) The internal routine that does method lookup was handed a symbol table that doesn&#39;t have a name. Symbol tables can become anonymous for example by undefining stashes: <code>undef %Some::Package::</code>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_use_an_undefined_value_as_%s_reference"
>Can&#39;t use an undefined value as %s reference</a></dt>

<dd>
<p>(F) A value used as either a hard reference or a symbolic reference must be a defined value. This helps to delurk some insidious errors.</p>

<dt><a name='Can'></a><a name="Can&#39;t_use_bareword_(&#34;%s&#34;)_as_%s_ref_while_&#34;strict_refs&#34;_in_use"
>Can&#39;t use bareword (&#34;%s&#34;) as %s ref while &#34;strict refs&#34; in use</a></dt>

<dd>
<p>(F) Only hard references are allowed by &#34;strict refs&#34;. Symbolic references are disallowed. See <a href="/~flora/perl-5.14.2/pod/perlref.pod" class="podlinkpod"
>perlref</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_use_%!_because_Errno.pm_is_not_available"
>Can&#39;t use %! because Errno.pm is not available</a></dt>

<dd>
<p>(F) The first time the %! hash is used, perl automatically loads the Errno.pm module. The Errno module is expected to tie the %! hash to provide symbolic names for <code>$!</code> errno values.</p>

<dt><a name='Can'></a><a name="Can&#39;t_use_both_&#39;&#60;&#39;_and_&#39;&#62;&#39;_after_type_&#39;%c&#39;_in_%s"
>Can&#39;t use both &#39;&#60;&#39; and &#39;&#62;&#39; after type &#39;%c&#39; in %s</a></dt>

<dd>
<p>(F) A type cannot be forced to have both big-endian and little-endian byte-order at the same time, so this combination of modifiers is not allowed. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_use_%s_for_loop_variable"
>Can&#39;t use %s for loop variable</a></dt>

<dd>
<p>(F) Only a simple scalar variable may be used as a loop variable on a foreach.</p>

<dt><a name='Can'></a><a name="Can&#39;t_use_global_%s_in_&#34;%s&#34;"
>Can&#39;t use global %s in &#34;%s&#34;</a></dt>

<dd>
<p>(F) You tried to declare a magical variable as a lexical variable. This is not allowed, because the magic can be tied to only one location (namely the global variable) and it would be incredibly confusing to have variables in your program that looked like magical variables but weren&#39;t.</p>

<dt><a name='Can'></a><a name="Can&#39;t_use_&#39;%c&#39;_in_a_group_with_different_byte-order_in_%s"
>Can&#39;t use &#39;%c&#39; in a group with different byte-order in %s</a></dt>

<dd>
<p>(F) You attempted to force a different byte-order on a type that is already inside a group with a byte-order modifier. For example you cannot force little-endianness on a type that is inside a big-endian group.</p>

<dt><a name='Can'></a><a name="Can&#39;t_use_&#34;my_%s&#34;_in_sort_comparison"
>Can&#39;t use &#34;my %s&#34; in sort comparison</a></dt>

<dd>
<p>(F) The global variables $a and $b are reserved for sort comparisons. You mentioned $a or $b in the same line as the &#60;=&#62; or cmp operator, and the variable had earlier been declared as a lexical variable. Either qualify the sort variable with the package name, or rename the lexical variable.</p>

<dt><a name='Can'></a><a name="Can&#39;t_use_%s_ref_as_%s_ref"
>Can&#39;t use %s ref as %s ref</a></dt>

<dd>
<p>(F) You&#39;ve mixed up your reference types. You have to dereference a reference of the type needed. You can use the ref() function to test the type of the reference, if need be.</p>

<dt><a name='Can'></a><a name="Can&#39;t_use_string_(&#34;%s&#34;)_as_%s_ref_while_&#34;strict_refs&#34;_in_use"
>Can&#39;t use string (&#34;%s&#34;) as %s ref while &#34;strict refs&#34; in use</a></dt>

<dd>
<p>(F) Only hard references are allowed by &#34;strict refs&#34;. Symbolic references are disallowed. See <a href="/~flora/perl-5.14.2/pod/perlref.pod" class="podlinkpod"
>perlref</a>.</p>

<dt><a name='Can'></a><a name="Can&#39;t_use_subscript_on_%s"
>Can&#39;t use subscript on %s</a></dt>

<dd>
<p>(F) The compiler tried to interpret a bracketed expression as a subscript. But to the left of the brackets was an expression that didn&#39;t look like a hash or array reference, or anything else subscriptable.</p>

<dt><a name='Can'></a><a name="Can&#39;t_use_\%c_to_mean_$%c_in_expression"
>Can&#39;t use \%c to mean $%c in expression</a></dt>

<dd>
<p>(W syntax) In an ordinary expression, backslash is a unary operator that creates a reference to its argument. The use of backslash to indicate a backreference to a matched substring is valid only as part of a regular expression pattern. Trying to do this in ordinary Perl code produces a value that prints out looking like SCALAR(0xdecaf). Use the $1 form instead.</p>

<dt><a name='Can'></a><a name="Can&#39;t_use_&#34;when&#34;_outside_a_topicalizer"
>Can&#39;t use &#34;when&#34; outside a topicalizer</a></dt>

<dd>
<p>(F) You have used a when() block that is neither inside a <code>foreach</code> loop nor a <code>given</code> block. (Note that this error is issued on exit from the <code>when</code> block, so you won&#39;t get the error if the match fails, or if you use an explicit <code>continue</code>.)</p>

<dt><a name='Can'></a><a name="Can&#39;t_weaken_a_nonreference"
>Can&#39;t weaken a nonreference</a></dt>

<dd>
<p>(F) You attempted to weaken something that was not a reference. Only references can be weakened.</p>

<dt><a name='Can'></a><a name="Can&#39;t_x=_to_read-only_value"
>Can&#39;t x= to read-only value</a></dt>

<dd>
<p>(F) You tried to repeat a constant value (often the undefined value) with an assignment operator, which implies modifying the value itself. Perhaps you need to copy the value to a temporary, and repeat that.</p>

<dt><a name='Character'></a><a name="Character_following_&#34;\c&#34;_must_be_ASCII"
>Character following &#34;\c&#34; must be ASCII</a></dt>

<dd>
<p>(F|W deprecated, syntax) In <code>\c<i>X</i></code>, <i>X</i> must be an ASCII character. It is planned to make this fatal in all instances in Perl 5.16. In the cases where it isn&#39;t fatal, the character this evaluates to is derived by exclusive or&#39;ing the code point of this character with 0x40.</p>

<p>Note that non-alphabetic ASCII characters are discouraged here as well.</p>

<dt><a name='Character'></a><a name="Character_in_&#39;C&#39;_format_wrapped_in_pack"
>Character in &#39;C&#39; format wrapped in pack</a></dt>

<dd>
<p>(W pack) You said</p>

<pre class="sh_perl">    pack(&#34;C&#34;, $x)</pre>

<p>where $x is either less than 0 or more than 255; the <code>&#34;C&#34;</code> format is only for encoding native operating system characters (ASCII, EBCDIC, and so on) and not for Unicode characters, so Perl behaved as if you meant</p>

<pre class="sh_perl">    pack(&#34;C&#34;, $x &#38; 255)</pre>

<p>If you actually want to pack Unicode codepoints, use the <code>&#34;U&#34;</code> format instead.</p>

<dt><a name='Character'></a><a name="Character_in_&#39;W&#39;_format_wrapped_in_pack"
>Character in &#39;W&#39; format wrapped in pack</a></dt>

<dd>
<p>(W pack) You said</p>

<pre class="sh_perl">    pack(&#34;U0W&#34;, $x)</pre>

<p>where $x is either less than 0 or more than 255. However, <code>U0</code>-mode expects all values to fall in the interval [0, 255], so Perl behaved as if you meant:</p>

<pre class="sh_perl">    pack(&#34;U0W&#34;, $x &#38; 255)</pre>

<dt><a name='Character'></a><a name="Character_in_&#39;c&#39;_format_wrapped_in_pack"
>Character in &#39;c&#39; format wrapped in pack</a></dt>

<dd>
<p>(W pack) You said</p>

<pre class="sh_perl">    pack(&#34;c&#34;, $x)</pre>

<p>where $x is either less than -128 or more than 127; the <code>&#34;c&#34;</code> format is only for encoding native operating system characters (ASCII, EBCDIC, and so on) and not for Unicode characters, so Perl behaved as if you meant</p>

<pre class="sh_perl">    pack(&#34;c&#34;, $x &#38; 255);</pre>

<p>If you actually want to pack Unicode codepoints, use the <code>&#34;U&#34;</code> format instead.</p>

<dt><a name='Character'></a><a name="Character_in_&#39;%c&#39;_format_wrapped_in_unpack"
>Character in &#39;%c&#39; format wrapped in unpack</a></dt>

<dd>
<p>(W unpack) You tried something like</p>

<pre class="sh_perl">   unpack(&#34;H&#34;, &#34;\x{2a1}&#34;)</pre>

<p>where the format expects to process a byte (a character with a value below 256), but a higher value was provided instead. Perl uses the value modulus 256 instead, as if you had provided:</p>

<pre class="sh_perl">   unpack(&#34;H&#34;, &#34;\x{a1}&#34;)</pre>

<dt><a name='Character'></a><a name="Character(s)_in_&#39;%c&#39;_format_wrapped_in_pack"
>Character(s) in &#39;%c&#39; format wrapped in pack</a></dt>

<dd>
<p>(W pack) You tried something like</p>

<pre class="sh_perl">   pack(&#34;u&#34;, &#34;\x{1f3}b&#34;)</pre>

<p>where the format expects to process a sequence of bytes (character with a value below 256), but some of the characters had a higher value. Perl uses the character values modulus 256 instead, as if you had provided:</p>

<pre class="sh_perl">   pack(&#34;u&#34;, &#34;\x{f3}b&#34;)</pre>

<dt><a name='Character'></a><a name="Character(s)_in_&#39;%c&#39;_format_wrapped_in_unpack"
>Character(s) in &#39;%c&#39; format wrapped in unpack</a></dt>

<dd>
<p>(W unpack) You tried something like</p>

<pre class="sh_perl">   unpack(&#34;s&#34;, &#34;\x{1f3}b&#34;)</pre>

<p>where the format expects to process a sequence of bytes (character with a value below 256), but some of the characters had a higher value. Perl uses the character values modulus 256 instead, as if you had provided:</p>

<pre class="sh_perl">   unpack(&#34;s&#34;, &#34;\x{f3}b&#34;)</pre>

<dt><a name='c'></a><a name="&#34;\c{&#34;_is_deprecated_and_is_more_clearly_written_as_&#34;;&#34;"
>&#34;\c{&#34; is deprecated and is more clearly written as &#34;;&#34;</a></dt>

<dd>
<p>(D deprecated, syntax) The <code>\c<i>X</i></code> construct is intended to be a way to specify non-printable characters. You used it with a &#34;{&#34; which evaluates to &#34;;&#34;, which is printable. It is planned to remove the ability to specify a semi-colon this way in Perl 5.16. Just use a semi-colon or a backslash-semi-colon without the &#34;\c&#34;.</p>

<dt><a name='c'></a><a name="&#34;\c%c&#34;_is_more_clearly_written_simply_as_&#34;%s&#34;"
>&#34;\c%c&#34; is more clearly written simply as &#34;%s&#34;</a></dt>

<dd>
<p>(W syntax) The <code>\c<i>X</i></code> construct is intended to be a way to specify non-printable characters. You used it for a printable one, which is better written as simply itself, perhaps preceded by a backslash for non-word characters.</p>

<dt><a name='close'></a><a name="close()_on_unopened_filehandle_%s"
>close() on unopened filehandle %s</a></dt>

<dd>
<p>(W unopened) You tried to close a filehandle that was never opened.</p>

<dt><a name='closedir'></a><a name="closedir()_attempted_on_invalid_dirhandle_%s"
>closedir() attempted on invalid dirhandle %s</a></dt>

<dd>
<p>(W io) The dirhandle you tried to close is either closed or not really a dirhandle. Check your control flow.</p>

<dt><a name='Closure'></a><a name="Closure_prototype_called"
>Closure prototype called</a></dt>

<dd>
<p>(F) If a closure has attributes, the subroutine passed to an attribute handler is the prototype that is cloned when a new closure is created. This subroutine cannot be called.</p>

<dt><a name='Code'></a><a name="Code_missing_after_&#39;/&#39;"
>Code missing after &#39;/&#39;</a></dt>

<dd>
<p>(F) You had a (sub-)template that ends with a &#39;/&#39;. There must be another template code following the slash. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Code'></a><a name="Code_point_0x%X_is_not_Unicode,_may_not_be_portable"
>Code point 0x%X is not Unicode, may not be portable</a></dt>

<dd>
<dt><a name='Code'></a><a name="Code_point_0x%X_is_not_Unicode,_no_properties_match_it;_all_inverse_properties_do"
>Code point 0x%X is not Unicode, no properties match it; all inverse properties do</a></dt>

<dd>
<p>(W utf8, non_unicode) You had a code point above the Unicode maximum of U+10FFFF.</p>

<p>Perl allows strings to contain a superset of Unicode code points, up to the limit of what is storable in an unsigned integer on your system, but these may not be accepted by other languages/systems. At one time, it was legal in some standards to have code points up to 0x7FFF_FFFF, but not higher. Code points above 0xFFFF_FFFF require larger than a 32 bit word.</p>

<p>None of the Unicode or Perl-defined properties will match a non-Unicode code point. For example,</p>

<pre class="sh_perl">    chr(0x7FF_FFFF) =~ /\p{Any}/</pre>

<p>will not match, because the code point is not in Unicode. But</p>

<pre class="sh_perl">    chr(0x7FF_FFFF) =~ /\P{Any}/</pre>

<p>will match.</p>

<dt><a name='s'></a><a name="%s:_Command_not_found"
>%s: Command not found</a></dt>

<dd>
<p>(A) You&#39;ve accidentally run your script through <b>csh</b> instead of Perl. Check the #! line, or manually feed your script into Perl yourself.</p>

<dt><a name='Compilation'></a><a name="Compilation_failed_in_require"
>Compilation failed in require</a></dt>

<dd>
<p>(F) Perl could not compile a file specified in a <code>require</code> statement. Perl uses this generic message when none of the errors that it encountered were severe enough to halt compilation immediately.</p>

<dt><a name='Complex'></a><a name="Complex_regular_subexpression_recursion_limit_(%d)_exceeded"
>Complex regular subexpression recursion limit (%d) exceeded</a></dt>

<dd>
<p>(W regexp) The regular expression engine uses recursion in complex situations where back-tracking is required. Recursion depth is limited to 32766, or perhaps less in architectures where the stack cannot grow arbitrarily. (&#34;Simple&#34; and &#34;medium&#34; situations are handled without recursion and are not subject to a limit.) Try shortening the string under examination; looping in Perl code (e.g. with <code>while</code>) rather than in the regular expression engine; or rewriting the regular expression so that it is simpler or backtracks less. (See <a href="/~flora/perl-5.14.2/pod/perlfaq2.pod" class="podlinkpod"
>perlfaq2</a> for information on <i>Mastering Regular Expressions</i>.)</p>

<dt><a name='cond_broadcast'></a><a name="cond_broadcast()_called_on_unlocked_variable"
>cond_broadcast() called on unlocked variable</a></dt>

<dd>
<p>(W threads) Within a thread-enabled program, you tried to call cond_broadcast() on a variable which wasn&#39;t locked. The cond_broadcast() function is used to wake up another thread that is waiting in a cond_wait(). To ensure that the signal isn&#39;t sent before the other thread has a chance to enter the wait, it is usual for the signaling thread first to wait for a lock on variable. This lock attempt will only succeed after the other thread has entered cond_wait() and thus relinquished the lock.</p>

<dt><a name='cond_signal'></a><a name="cond_signal()_called_on_unlocked_variable"
>cond_signal() called on unlocked variable</a></dt>

<dd>
<p>(W threads) Within a thread-enabled program, you tried to call cond_signal() on a variable which wasn&#39;t locked. The cond_signal() function is used to wake up another thread that is waiting in a cond_wait(). To ensure that the signal isn&#39;t sent before the other thread has a chance to enter the wait, it is usual for the signaling thread first to wait for a lock on variable. This lock attempt will only succeed after the other thread has entered cond_wait() and thus relinquished the lock.</p>

<dt><a name='connect'></a><a name="connect()_on_closed_socket_%s"
>connect() on closed socket %s</a></dt>

<dd>
<p>(W closed) You tried to do a connect on a closed socket. Did you forget to check the return value of your socket() call? See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#connect" class="podlinkpod"
>&#34;connect&#34; in perlfunc</a>.</p>

<dt><a name='Constant'></a><a name="Constant(%s)%s:_%s"
>Constant(%s)%s: %s</a></dt>

<dd>
<p>(F) The parser found inconsistencies either while attempting to define an overloaded constant, or when trying to find the character name specified in the <code>\N{...}</code> escape. Perhaps you forgot to load the corresponding <code>overload</code> or <code>charnames</code> pragma? See <a href="/~flora/perl-5.14.2/lib/charnames.pm" class="podlinkpod"
>charnames</a> and <a href="/~flora/perl-5.14.2/lib/overload.pm" class="podlinkpod"
>overload</a>.</p>

<dt><a name='Constant'></a><a name="Constant(%s)%s:_%s_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Constant(%s)%s: %s in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) The parser found inconsistencies while attempting to find the character name specified in the <code>\N{...}</code> escape. Perhaps you forgot to load the corresponding <code>charnames</code> pragma? See <a href="/~flora/perl-5.14.2/lib/charnames.pm" class="podlinkpod"
>charnames</a>.</p>

<dt><a name='Constant'></a><a name="Constant_is_not_%s_reference"
>Constant is not %s reference</a></dt>

<dd>
<p>(F) A constant value (perhaps declared using the <code>use constant</code> pragma) is being dereferenced, but it amounts to the wrong type of reference. The message indicates the type of reference that was expected. This usually indicates a syntax error in dereferencing the constant value. See <a href="/~flora/perl-5.14.2/pod/perlsub.pod#Constant_Functions" class="podlinkpod"
>&#34;Constant Functions&#34; in perlsub</a> and <a href="/perldoc?constant" class="podlinkpod"
>constant</a>.</p>

<dt><a name='Constant'></a><a name="Constant_subroutine_%s_redefined"
>Constant subroutine %s redefined</a></dt>

<dd>
<p>(S) You redefined a subroutine which had previously been eligible for inlining. See <a href="/~flora/perl-5.14.2/pod/perlsub.pod#Constant_Functions" class="podlinkpod"
>&#34;Constant Functions&#34; in perlsub</a> for commentary and workarounds.</p>

<dt><a name='Constant'></a><a name="Constant_subroutine_%s_undefined"
>Constant subroutine %s undefined</a></dt>

<dd>
<p>(W misc) You undefined a subroutine which had previously been eligible for inlining. See <a href="/~flora/perl-5.14.2/pod/perlsub.pod#Constant_Functions" class="podlinkpod"
>&#34;Constant Functions&#34; in perlsub</a> for commentary and workarounds.</p>

<dt><a name='Copy'></a><a name="Copy_method_did_not_return_a_reference"
>Copy method did not return a reference</a></dt>

<dd>
<p>(F) The method which overloads &#34;=&#34; is buggy. See <a href="/~flora/perl-5.14.2/lib/overload.pm#Copy_Constructor" class="podlinkpod"
>&#34;Copy Constructor&#34; in overload</a>.</p>

<dt><a name='CORE'></a><a name="CORE::%s_is_not_a_keyword"
>CORE::%s is not a keyword</a></dt>

<dd>
<p>(F) The CORE:: namespace is reserved for Perl keywords.</p>

<dt><a name='corrupted'></a><a name="corrupted_regexp_pointers"
>corrupted regexp pointers</a></dt>

<dd>
<p>(P) The regular expression engine got confused by what the regular expression compiler gave it.</p>

<dt><a name='corrupted'></a><a name="corrupted_regexp_program"
>corrupted regexp program</a></dt>

<dd>
<p>(P) The regular expression engine got passed a regexp program without a valid magic number.</p>

<dt><a name='Corrupt'></a><a name="Corrupt_malloc_ptr_0x%x_at_0x%x"
>Corrupt malloc ptr 0x%x at 0x%x</a></dt>

<dd>
<p>(P) The malloc package that comes with Perl had an internal failure.</p>

<dt><a name='Count'></a><a name="Count_after_length/code_in_unpack"
>Count after length/code in unpack</a></dt>

<dd>
<p>(F) You had an unpack template indicating a counted-length string, but you have also specified an explicit size for the string. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Deep'></a><a name="Deep_recursion_on_subroutine_&#34;%s&#34;"
>Deep recursion on subroutine &#34;%s&#34;</a></dt>

<dd>
<p>(W recursion) This subroutine has called itself (directly or indirectly) 100 times more than it has returned. This probably indicates an infinite recursion, unless you&#39;re writing strange benchmark programs, in which case it indicates something else.</p>

<p>This threshold can be changed from 100, by recompiling the <em>perl</em> binary, setting the C pre-processor macro <code>PERL_SUB_DEPTH_WARN</code> to the desired value.</p>

<dt><a name='defined'></a><a name="defined(@array)_is_deprecated"
>defined(@array) is deprecated</a></dt>

<dd>
<p>(D deprecated) defined() is not usually useful on arrays because it checks for an undefined <i>scalar</i> value. If you want to see if the array is empty, just use <code>if (@array) { # not empty }</code> for example.</p>

<dt><a name='defined'></a><a name="defined(%hash)_is_deprecated"
>defined(%hash) is deprecated</a></dt>

<dd>
<p>(D deprecated) defined() is not usually useful on hashes because it checks for an undefined <i>scalar</i> value. If you want to see if the hash is empty, just use <code>if (%hash) { # not empty }</code> for example.</p>

<dt><a name='DEFINE'></a><a name="(?(DEFINE)....)_does_not_allow_branches_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>(?(DEFINE)....) does not allow branches in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You used something like <code>(?(DEFINE)...|..)</code> which is illegal. The most likely cause of this error is that you left out a parenthesis inside of the <code>....</code> part.</p>

<p>The &#60;-- HERE shows in the regular expression about where the problem was discovered.</p>

<dt><a name='s'></a><a name="%s_defines_neither_package_nor_VERSION--version_check_failed"
>%s defines neither package nor VERSION--version check failed</a></dt>

<dd>
<p>(F) You said something like &#34;use Module 42&#34; but in the Module file there are neither package declarations nor a <code>$VERSION</code>.</p>

<dt><a name='Delimiter'></a><a name="Delimiter_for_here_document_is_too_long"
>Delimiter for here document is too long</a></dt>

<dd>
<p>(F) In a here document construct like <code>&#60;&#60;FOO</code>, the label <code>FOO</code> is too long for Perl to handle. You have to be seriously twisted to write code that triggers this error.</p>

<dt><a name='Deprecated'></a><a name="Deprecated_character_in_\N{...};_marked_by_&#60;--_HERE_in_\N{%s&#60;--_HERE_%s"
>Deprecated character in \N{...}; marked by &#60;-- HERE in \N{%s&#60;-- HERE %s</a></dt>

<dd>
<p>(D deprecated) Just about anything is legal for the <code>...</code> in <code>\N{...}</code>. But starting in 5.12, non-reasonable ones that don&#39;t look like names are deprecated. A reasonable name begins with an alphabetic character and continues with any combination of alphanumerics, dashes, spaces, parentheses or colons.</p>

<dt><a name='Deprecated'></a><a name="Deprecated_use_of_my()_in_false_conditional"
>Deprecated use of my() in false conditional</a></dt>

<dd>
<p>(D deprecated) You used a declaration similar to <code>my $x if 0</code>. There has been a long-standing bug in Perl that causes a lexical variable not to be cleared at scope exit when its declaration includes a false conditional. Some people have exploited this bug to achieve a kind of static variable. Since we intend to fix this bug, we don&#39;t want people relying on this behavior. You can achieve a similar static effect by declaring the variable in a separate block outside the function, eg</p>

<pre class="sh_perl">    sub f { my $x if 0; return $x++ }</pre>

<p>becomes</p>

<pre class="sh_perl">    { my $x; sub f { return $x++ } }</pre>

<p>Beginning with perl 5.9.4, you can also use <code>state</code> variables to have lexicals that are initialized only once (see <a href="/~flora/perl-5.14.2/lib/feature.pm" class="podlinkpod"
>feature</a>):</p>

<pre class="sh_perl">    sub f { state $x; return $x++ }</pre>

<dt><a name='DESTROY'></a><a name="DESTROY_created_new_reference_to_dead_object_&#39;%s&#39;"
>DESTROY created new reference to dead object &#39;%s&#39;</a></dt>

<dd>
<p>(F) A DESTROY() method created a new reference to the object which is just being DESTROYed. Perl is confused, and prefers to abort rather than to create a dangling reference.</p>

<dt><a name='Did'></a><a name="Did_not_produce_a_valid_header"
>Did not produce a valid header</a></dt>

<dd>
<p>See Server error.</p>

<dt><a name='s'></a><a name="%s_did_not_return_a_true_value"
>%s did not return a true value</a></dt>

<dd>
<p>(F) A required (or used) file must return a true value to indicate that it compiled correctly and ran its initialization code correctly. It&#39;s traditional to end such a file with a &#34;1;&#34;, though any true value would do. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#require" class="podlinkpod"
>&#34;require&#34; in perlfunc</a>.</p>

<dt><a name='Did'></a><a name="(Did_you_mean_&#38;%s_instead?)"
>(Did you mean &#38;%s instead?)</a></dt>

<dd>
<p>(W misc) You probably referred to an imported subroutine &#38;FOO as $FOO or some such.</p>

<dt><a name='Did'></a><a name="(Did_you_mean_&#34;local&#34;_instead_of_&#34;our&#34;?)"
>(Did you mean &#34;local&#34; instead of &#34;our&#34;?)</a></dt>

<dd>
<p>(W misc) Remember that &#34;our&#34; does not localize the declared global variable. You have declared it again in the same lexical scope, which seems superfluous.</p>

<dt><a name='Did'></a><a name="(Did_you_mean_$_or_@_instead_of_%?)"
>(Did you mean $ or @ instead of %?)</a></dt>

<dd>
<p>(W) You probably said %hash{$key} when you meant $hash{$key} or @hash{@keys}. On the other hand, maybe you just meant %hash and got carried away.</p>

<dt><a name="Died"
>Died</a></dt>

<dd>
<p>(F) You passed die() an empty string (the equivalent of <code>die &#34;&#34;</code>) or you called it with no args and <code>$@</code> was empty.</p>

<dt><a name='Document'></a><a name="Document_contains_no_data"
>Document contains no data</a></dt>

<dd>
<p>See Server error.</p>

<dt><a name='s'></a><a name="%s_does_not_define_%s::VERSION--version_check_failed"
>%s does not define %s::VERSION--version check failed</a></dt>

<dd>
<p>(F) You said something like &#34;use Module 42&#34; but the Module did not define a <code>$VERSION.</code></p>

<dt><a name='does'></a><a name="&#39;/&#39;_does_not_take_a_repeat_count"
>&#39;/&#39; does not take a repeat count</a></dt>

<dd>
<p>(F) You cannot put a repeat count of any kind right after the &#39;/&#39; code. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Don'></a><a name="Don&#39;t_know_how_to_handle_magic_of_type_&#39;%s&#39;"
>Don&#39;t know how to handle magic of type &#39;%s&#39;</a></dt>

<dd>
<p>(P) The internal handling of magical variables has been cursed.</p>

<dt><a name='do_study'></a><a name="do_study:_out_of_memory"
>do_study: out of memory</a></dt>

<dd>
<p>(P) This should have been caught by safemalloc() instead.</p>

<dt><a name='Do'></a><a name="(Do_you_need_to_predeclare_%s?)"
>(Do you need to predeclare %s?)</a></dt>

<dd>
<p>(S syntax) This is an educated guess made in conjunction with the message &#34;%s found where operator expected&#34;. It often means a subroutine or module name is being referenced that hasn&#39;t been declared yet. This may be because of ordering problems in your file, or because of a missing &#34;sub&#34;, &#34;package&#34;, &#34;require&#34;, or &#34;use&#34; statement. If you&#39;re referencing something that isn&#39;t defined yet, you don&#39;t actually have to define the subroutine or package before the current location. You can use an empty &#34;sub foo;&#34; or &#34;package FOO;&#34; to enter a &#34;forward&#34; declaration.</p>

<dt><a name='dump'></a><a name="dump()_better_written_as_CORE::dump()"
>dump() better written as CORE::dump()</a></dt>

<dd>
<p>(W misc) You used the obsolescent <code>dump()</code> built-in function, without fully qualifying it as <code>CORE::dump()</code>. Maybe it&#39;s a typo. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#dump" class="podlinkpod"
>&#34;dump&#34; in perlfunc</a>.</p>

<dt><a name='dump'></a><a name="dump_is_not_supported"
>dump is not supported</a></dt>

<dd>
<p>(F) Your machine doesn&#39;t support dump/undump.</p>

<dt><a name='Duplicate'></a><a name="Duplicate_free()_ignored"
>Duplicate free() ignored</a></dt>

<dd>
<p>(S malloc) An internal routine called free() on something that had already been freed.</p>

<dt><a name='Duplicate'></a><a name="Duplicate_modifier_&#39;%c&#39;_after_&#39;%c&#39;_in_%s"
>Duplicate modifier &#39;%c&#39; after &#39;%c&#39; in %s</a></dt>

<dd>
<p>(W) You have applied the same modifier more than once after a type in a pack template. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='elseif'></a><a name="elseif_should_be_elsif"
>elseif should be elsif</a></dt>

<dd>
<p>(S syntax) There is no keyword &#34;elseif&#34; in Perl because Larry thinks it&#39;s ugly. Your code will be interpreted as an attempt to call a method named &#34;elseif&#34; for the class returned by the following block. This is unlikely to be what you want.</p>

<dt><a name='Empty'></a><a name="Empty_%s"
>Empty %s</a></dt>

<dd>
<p>(F) <code>\p</code> and <code>\P</code> are used to introduce a named Unicode property, as described in <a href="/~flora/perl-5.14.2/pod/perlunicode.pod" class="podlinkpod"
>perlunicode</a> and <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>. You used <code>\p</code> or <code>\P</code> in a regular expression without specifying the property name.</p>

<dt><a name='entering'></a><a name="entering_effective_%s_failed"
>entering effective %s failed</a></dt>

<dd>
<p>(F) While under the <code>use filetest</code> pragma, switching the real and effective uids or gids failed.</p>

<dt><a name='ENV'></a><a name="%ENV_is_aliased_to_%s"
>%ENV is aliased to %s</a></dt>

<dd>
<p>(F) You&#39;re running under taint mode, and the <code>%ENV</code> variable has been aliased to another hash, so it doesn&#39;t reflect anymore the state of the program&#39;s environment. This is potentially insecure.</p>

<dt><a name='Error'></a><a name="Error_converting_file_specification_%s"
>Error converting file specification %s</a></dt>

<dd>
<p>(F) An error peculiar to VMS. Because Perl may have to deal with file specifications in either VMS or Unix syntax, it converts them to a single form when it must operate on them directly. Either you&#39;ve passed an invalid file specification to Perl, or you&#39;ve found a case the conversion routines don&#39;t handle. Drat.</p>

<dt><a name='s'></a><a name="%s:_Eval-group_in_insecure_regular_expression"
>%s: Eval-group in insecure regular expression</a></dt>

<dd>
<p>(F) Perl detected tainted data when trying to compile a regular expression that contains the <code>(?{ ... })</code> zero-width assertion, which is unsafe. See <a href="/~flora/perl-5.14.2/pod/perlre.pod#(?{_code_})" class="podlinkpod"
>&#34;(?{ code })&#34; in perlre</a>, and <a href="/~flora/perl-5.14.2/pod/perlsec.pod" class="podlinkpod"
>perlsec</a>.</p>

<dt><a name='s'></a><a name="%s:_Eval-group_not_allowed_at_runtime,_use_re_&#39;eval&#39;"
>%s: Eval-group not allowed at runtime, use re &#39;eval&#39;</a></dt>

<dd>
<p>(F) Perl tried to compile a regular expression containing the <code>(?{ ... })</code> zero-width assertion at run time, as it would when the pattern contains interpolated values. Since that is a security risk, it is not allowed. If you insist, you may still do this by using the <code>re &#39;eval&#39;</code> pragma or by explicitly building the pattern from an interpolated string at run time and using that in an eval(). See <a href="/~flora/perl-5.14.2/pod/perlre.pod#(?{_code_})" class="podlinkpod"
>&#34;(?{ code })&#34; in perlre</a>.</p>

<dt><a name='s'></a><a name="%s:_Eval-group_not_allowed,_use_re_&#39;eval&#39;"
>%s: Eval-group not allowed, use re &#39;eval&#39;</a></dt>

<dd>
<p>(F) A regular expression contained the <code>(?{ ... })</code> zero-width assertion, but that construct is only allowed when the <code>use re &#39;eval&#39;</code> pragma is in effect. See <a href="/~flora/perl-5.14.2/pod/perlre.pod#(?{_code_})" class="podlinkpod"
>&#34;(?{ code })&#34; in perlre</a>.</p>

<dt><a name='EVAL'></a><a name="EVAL_without_pos_change_exceeded_limit_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>EVAL without pos change exceeded limit in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You used a pattern that nested too many EVAL calls without consuming any text. Restructure the pattern so that text is consumed.</p>

<p>The &#60;-- HERE shows in the regular expression about where the problem was discovered.</p>

<dt><a name='Excessively'></a><a name="Excessively_long_&#60;&#62;_operator"
>Excessively long &#60;&#62; operator</a></dt>

<dd>
<p>(F) The contents of a &#60;&#62; operator may not exceed the maximum size of a Perl identifier. If you&#39;re just trying to glob a long list of filenames, try using the glob() operator, or put the filenames into a variable and glob that.</p>

<dt><a name='exec'></a><a name="exec?_I&#39;m_not_*that*_kind_of_operating_system"
>exec? I&#39;m not *that* kind of operating system</a></dt>

<dd>
<p>(F) The <code>exec</code> function is not implemented on some systems, e.g., Symbian OS. See <a href="/~flora/perl-5.14.2/pod/perlport.pod" class="podlinkpod"
>perlport</a>.</p>

<dt><a name='Execution'></a><a name="Execution_of_%s_aborted_due_to_compilation_errors."
>Execution of %s aborted due to compilation errors.</a></dt>

<dd>
<p>(F) The final summary message when a Perl compilation fails.</p>

<dt><a name='Exiting'></a><a name="Exiting_eval_via_%s"
>Exiting eval via %s</a></dt>

<dd>
<p>(W exiting) You are exiting an eval by unconventional means, such as a goto, or a loop control statement.</p>

<dt><a name='Exiting'></a><a name="Exiting_format_via_%s"
>Exiting format via %s</a></dt>

<dd>
<p>(W exiting) You are exiting a format by unconventional means, such as a goto, or a loop control statement.</p>

<dt><a name='Exiting'></a><a name="Exiting_pseudo-block_via_%s"
>Exiting pseudo-block via %s</a></dt>

<dd>
<p>(W exiting) You are exiting a rather special block construct (like a sort block or subroutine) by unconventional means, such as a goto, or a loop control statement. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#sort" class="podlinkpod"
>&#34;sort&#34; in perlfunc</a>.</p>

<dt><a name='Exiting'></a><a name="Exiting_subroutine_via_%s"
>Exiting subroutine via %s</a></dt>

<dd>
<p>(W exiting) You are exiting a subroutine by unconventional means, such as a goto, or a loop control statement.</p>

<dt><a name='Exiting'></a><a name="Exiting_substitution_via_%s"
>Exiting substitution via %s</a></dt>

<dd>
<p>(W exiting) You are exiting a substitution by unconventional means, such as a return, a goto, or a loop control statement.</p>

<dt><a name='Explicit'></a><a name="Explicit_blessing_to_&#39;&#39;_(assuming_package_main)"
>Explicit blessing to &#39;&#39; (assuming package main)</a></dt>

<dd>
<p>(W misc) You are blessing a reference to a zero length string. This has the effect of blessing the reference into the package main. This is usually not what you want. Consider providing a default target package, e.g. bless($ref, $p || &#39;MyPackage&#39;);</p>

<dt><a name='s'></a><a name="%s:_Expression_syntax"
>%s: Expression syntax</a></dt>

<dd>
<p>(A) You&#39;ve accidentally run your script through <b>csh</b> instead of Perl. Check the #! line, or manually feed your script into Perl yourself.</p>

<dt><a name='s'></a><a name="%s_failed--call_queue_aborted"
>%s failed--call queue aborted</a></dt>

<dd>
<p>(F) An untrapped exception was raised while executing a UNITCHECK, CHECK, INIT, or END subroutine. Processing of the remainder of the queue of such routines has been prematurely ended.</p>

<dt><a name='False'></a><a name="False_[]_range_&#34;%s&#34;_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>False [] range &#34;%s&#34; in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(W regexp) A character class range must start and end at a literal character, not another character class like <code>\d</code> or <code>[:alpha:]</code>. The &#34;-&#34; in your false range is interpreted as a literal &#34;-&#34;. Consider quoting the &#34;-&#34;, &#34;\-&#34;. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Fatal'></a><a name="Fatal_VMS_error_(status=%d)_at_%s,_line_%d"
>Fatal VMS error (status=%d) at %s, line %d</a></dt>

<dd>
<p>(P) An error peculiar to VMS. Something untoward happened in a VMS system service or RTL routine; Perl&#39;s exit status should provide more details. The filename in &#34;at %s&#34; and the line number in &#34;line %d&#34; tell you which section of the Perl source code is distressed.</p>

<dt><a name='fcntl'></a><a name="fcntl_is_not_implemented"
>fcntl is not implemented</a></dt>

<dd>
<p>(F) Your machine apparently doesn&#39;t implement fcntl(). What is this, a PDP-11 or something?</p>

<dt><a name='FETCHSIZE'></a><a name="FETCHSIZE_returned_a_negative_value"
>FETCHSIZE returned a negative value</a></dt>

<dd>
<p>(F) A tied array claimed to have a negative number of elements, which is not possible.</p>

<dt><a name='Field'></a><a name="Field_too_wide_in_&#39;u&#39;_format_in_pack"
>Field too wide in &#39;u&#39; format in pack</a></dt>

<dd>
<p>(W pack) Each line in an uuencoded string start with a length indicator which can&#39;t encode values above 63. So there is no point in asking for a line length bigger than that. Perl will behave as if you specified <code>u63</code> as the format.</p>

<dt><a name='Filehandle'></a><a name="Filehandle_%s_opened_only_for_input"
>Filehandle %s opened only for input</a></dt>

<dd>
<p>(W io) You tried to write on a read-only filehandle. If you intended it to be a read-write filehandle, you needed to open it with &#34;+&#60;&#34; or &#34;+&#62;&#34; or &#34;+&#62;&#62;&#34; instead of with &#34;&#60;&#34; or nothing. If you intended only to write the file, use &#34;&#62;&#34; or &#34;&#62;&#62;&#34;. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#open" class="podlinkpod"
>&#34;open&#34; in perlfunc</a>.</p>

<dt><a name='Filehandle'></a><a name="Filehandle_%s_opened_only_for_output"
>Filehandle %s opened only for output</a></dt>

<dd>
<p>(W io) You tried to read from a filehandle opened only for writing, If you intended it to be a read/write filehandle, you needed to open it with &#34;+&#60;&#34; or &#34;+&#62;&#34; or &#34;+&#62;&#62;&#34; instead of with &#34;&#62;&#34;. If you intended only to read from the file, use &#34;&#60;&#34;. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#open" class="podlinkpod"
>&#34;open&#34; in perlfunc</a>. Another possibility is that you attempted to open filedescriptor 0 (also known as STDIN) for output (maybe you closed STDIN earlier?).</p>

<dt><a name='Filehandle'></a><a name="Filehandle_%s_reopened_as_%s_only_for_input"
>Filehandle %s reopened as %s only for input</a></dt>

<dd>
<p>(W io) You opened for reading a filehandle that got the same filehandle id as STDOUT or STDERR. This occurred because you closed STDOUT or STDERR previously.</p>

<dt><a name='Filehandle'></a><a name="Filehandle_STDIN_reopened_as_%s_only_for_output"
>Filehandle STDIN reopened as %s only for output</a></dt>

<dd>
<p>(W io) You opened for writing a filehandle that got the same filehandle id as STDIN. This occurred because you closed STDIN previously.</p>

<dt><a name='Final'></a><a name="Final_$_should_be_\$_or_$name"
>Final $ should be \$ or $name</a></dt>

<dd>
<p>(F) You must now decide whether the final $ in a string was meant to be a literal dollar sign, or was meant to introduce a variable name that happens to be missing. So you have to put either the backslash or the name.</p>

<dt><a name='flock'></a><a name="flock()_on_closed_filehandle_%s"
>flock() on closed filehandle %s</a></dt>

<dd>
<p>(W closed) The filehandle you&#39;re attempting to flock() got itself closed some time before now. Check your control flow. flock() operates on filehandles. Are you attempting to call flock() on a dirhandle by the same name?</p>

<dt><a name='Format'></a><a name="Format_not_terminated"
>Format not terminated</a></dt>

<dd>
<p>(F) A format must be terminated by a line with a solitary dot. Perl got to the end of your file without finding such a line.</p>

<dt><a name='Format'></a><a name="Format_%s_redefined"
>Format %s redefined</a></dt>

<dd>
<p>(W redefine) You redefined a format. To suppress this warning, say</p>

<pre class="sh_perl">    {
        no warnings &#39;redefine&#39;;
        eval &#34;format NAME =...&#34;;
    }</pre>

<dt><a name='Found'></a><a name="Found_=_in_conditional,_should_be_=="
>Found = in conditional, should be ==</a></dt>

<dd>
<p>(W syntax) You said</p>

<pre class="sh_perl">    if ($foo = 123)</pre>

<p>when you meant</p>

<pre class="sh_perl">    if ($foo == 123)</pre>

<p>(or something like that).</p>

<dt><a name='s'></a><a name="%s_found_where_operator_expected"
>%s found where operator expected</a></dt>

<dd>
<p>(S syntax) The Perl lexer knows whether to expect a term or an operator. If it sees what it knows to be a term when it was expecting to see an operator, it gives you this warning. Usually it indicates that an operator or delimiter was omitted, such as a semicolon.</p>

<dt><a name='gdbm'></a><a name="gdbm_store_returned_%d,_errno_%d,_key_&#34;%s&#34;"
>gdbm store returned %d, errno %d, key &#34;%s&#34;</a></dt>

<dd>
<p>(S) A warning from the GDBM_File extension that a store failed.</p>

<dt><a name='gethostent'></a><a name="gethostent_not_implemented"
>gethostent not implemented</a></dt>

<dd>
<p>(F) Your C library apparently doesn&#39;t implement gethostent(), probably because if it did, it&#39;d feel morally obligated to return every hostname on the Internet.</p>

<dt><a name='get'></a><a name="get%sname()_on_closed_socket_%s"
>get%sname() on closed socket %s</a></dt>

<dd>
<p>(W closed) You tried to get a socket or peer socket name on a closed socket. Did you forget to check the return value of your socket() call?</p>

<dt><a name='getpwnam'></a><a name="getpwnam_returned_invalid_UIC_%#o_for_user_&#34;%s&#34;"
>getpwnam returned invalid UIC %#o for user &#34;%s&#34;</a></dt>

<dd>
<p>(S) A warning peculiar to VMS. The call to <code>sys$getuai</code> underlying the <code>getpwnam</code> operator returned an invalid UIC.</p>

<dt><a name='getsockopt'></a><a name="getsockopt()_on_closed_socket_%s"
>getsockopt() on closed socket %s</a></dt>

<dd>
<p>(W closed) You tried to get a socket option on a closed socket. Did you forget to check the return value of your socket() call? See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#getsockopt" class="podlinkpod"
>&#34;getsockopt&#34; in perlfunc</a>.</p>

<dt><a name='Global'></a><a name="Global_symbol_&#34;%s&#34;_requires_explicit_package_name"
>Global symbol &#34;%s&#34; requires explicit package name</a></dt>

<dd>
<p>(F) You&#39;ve said &#34;use strict&#34; or &#34;use strict vars&#34;, which indicates that all variables must either be lexically scoped (using &#34;my&#34; or &#34;state&#34;), declared beforehand using &#34;our&#34;, or explicitly qualified to say which package the global variable is in (using &#34;::&#34;).</p>

<dt><a name='glob'></a><a name="glob_failed_(%s)"
>glob failed (%s)</a></dt>

<dd>
<p>(W glob) Something went wrong with the external program(s) used for <code>glob</code> and <code>&#60;*.c&#62;</code>. Usually, this means that you supplied a <code>glob</code> pattern that caused the external program to fail and exit with a nonzero status. If the message indicates that the abnormal exit resulted in a coredump, this may also mean that your csh (C shell) is broken. If so, you should change all of the csh-related variables in config.sh: If you have tcsh, make the variables refer to it as if it were csh (e.g. <code>full_csh=&#39;/usr/bin/tcsh&#39;</code>); otherwise, make them all empty (except that <code>d_csh</code> should be <code>&#39;undef&#39;</code>) so that Perl will think csh is missing. In either case, after editing config.sh, run <code>./Configure -S</code> and rebuild Perl.</p>

<dt><a name='Glob'></a><a name="Glob_not_terminated"
>Glob not terminated</a></dt>

<dd>
<p>(F) The lexer saw a left angle bracket in a place where it was expecting a term, so it&#39;s looking for the corresponding right angle bracket, and not finding it. Chances are you left some needed parentheses out earlier in the line, and you really meant a &#34;less than&#34;.</p>

<dt><a name='gmtime'></a><a name="gmtime(%f)_too_large"
>gmtime(%f) too large</a></dt>

<dd>
<p>(W overflow) You called <code>gmtime</code> with a number that was larger than it can reliably handle and <code>gmtime</code> probably returned the wrong date. This warning is also triggered with nan (the special not-a-number value).</p>

<dt><a name='gmtime'></a><a name="gmtime(%f)_too_small"
>gmtime(%f) too small</a></dt>

<dd>
<p>(W overflow) You called <code>gmtime</code> with a number that was smaller than it can reliably handle and <code>gmtime</code> probably returned the wrong date. This warning is also triggered with nan (the special not-a-number value).</p>

<dt><a name='Got'></a><a name="Got_an_error_from_DosAllocMem"
>Got an error from DosAllocMem</a></dt>

<dd>
<p>(P) An error peculiar to OS/2. Most probably you&#39;re using an obsolete version of Perl, and this should not happen anyway.</p>

<dt><a name='goto'></a><a name="goto_must_have_label"
>goto must have label</a></dt>

<dd>
<p>(F) Unlike with &#34;next&#34; or &#34;last&#34;, you&#39;re not allowed to goto an unspecified destination. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#goto" class="podlinkpod"
>&#34;goto&#34; in perlfunc</a>.</p>

<dt><a name='group'></a><a name="()-group_starts_with_a_count"
>()-group starts with a count</a></dt>

<dd>
<p>(F) A ()-group started with a count. A count is supposed to follow something: a template character or a ()-group. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='s'></a><a name="%s_had_compilation_errors."
>%s had compilation errors.</a></dt>

<dd>
<p>(F) The final summary message when a <code>perl -c</code> fails.</p>

<dt><a name='Had'></a><a name="Had_to_create_%s_unexpectedly"
>Had to create %s unexpectedly</a></dt>

<dd>
<p>(S internal) A routine asked for a symbol from a symbol table that ought to have existed already, but for some reason it didn&#39;t, and had to be created on an emergency basis to prevent a core dump.</p>

<dt><a name='Hash'></a><a name="Hash_%%s_missing_the_%_in_argument_%d_of_%s()"
>Hash %%s missing the % in argument %d of %s()</a></dt>

<dd>
<p>(D deprecated) Really old Perl let you omit the % on hash names in some spots. This is now heavily deprecated.</p>

<dt><a name='s'></a><a name="%s_has_too_many_errors"
>%s has too many errors</a></dt>

<dd>
<p>(F) The parser has given up trying to parse the program after 10 errors. Further error messages would likely be uninformative.</p>

<dt><a name='Having'></a><a name="Having_no_space_between_pattern_and_following_word_is_deprecated"
>Having no space between pattern and following word is deprecated</a></dt>

<dd>
<p>(D syntax)</p>

<p>You had a word that isn&#39;t a regex modifier immediately following a pattern without an intervening space. If you are trying to use the <code>/le</code> flags on a substitution, use <code>/el</code> instead. Otherwise, add white space between the pattern and following word to eliminate the warning. As an example of the latter, the two constructs:</p>

<pre class="sh_perl"> $a =~ m/$foo/sand $bar
 $a =~ m/$foo/s and $bar</pre>

<p>both currently mean the same thing, but it is planned to disallow the first form in Perl 5.16. And,</p>

<pre class="sh_perl"> $a =~ m/$foo/and $bar</pre>

<p>will be disallowed too.</p>

<dt><a name='Hexadecimal'></a><a name="Hexadecimal_number_&#62;_0xffffffff_non-portable"
>Hexadecimal number &#62; 0xffffffff non-portable</a></dt>

<dd>
<p>(W portable) The hexadecimal number you specified is larger than 2**32-1 (4294967295) and therefore non-portable between systems. See <a href="/~flora/perl-5.14.2/pod/perlport.pod" class="podlinkpod"
>perlport</a> for more on portability concerns.</p>

<dt><a name='Identifier'></a><a name="Identifier_too_long"
>Identifier too long</a></dt>

<dd>
<p>(F) Perl limits identifiers (names for variables, functions, etc.) to about 250 characters for simple names, and somewhat more for compound names (like <code>$A::B</code>). You&#39;ve exceeded Perl&#39;s limits. Future versions of Perl are likely to eliminate these arbitrary limitations.</p>

<dt><a name='Ignoring'></a><a name="Ignoring_zero_length_\N{}_in_character_class"
>Ignoring zero length \N{} in character class</a></dt>

<dd>
<p>(W) Named Unicode character escapes (\N{...}) may return a zero length sequence. When such an escape is used in a character class its behaviour is not well defined. Check that the correct escape has been used, and the correct charname handler is in scope.</p>

<dt><a name='Illegal'></a><a name="Illegal_binary_digit_%s"
>Illegal binary digit %s</a></dt>

<dd>
<p>(F) You used a digit other than 0 or 1 in a binary number.</p>

<dt><a name='Illegal'></a><a name="Illegal_binary_digit_%s_ignored"
>Illegal binary digit %s ignored</a></dt>

<dd>
<p>(W digit) You may have tried to use a digit other than 0 or 1 in a binary number. Interpretation of the binary number stopped before the offending digit.</p>

<dt><a name='Illegal'></a><a name="Illegal_character_\%o_(carriage_return)"
>Illegal character \%o (carriage return)</a></dt>

<dd>
<p>(F) Perl normally treats carriage returns in the program text as it would any other whitespace, which means you should never see this error when Perl was built using standard options. For some reason, your version of Perl appears to have been built without this support. Talk to your Perl administrator.</p>

<dt><a name='Illegal'></a><a name="Illegal_character_in_prototype_for_%s_:_%s"
>Illegal character in prototype for %s : %s</a></dt>

<dd>
<p>(W illegalproto) An illegal character was found in a prototype declaration. Legal characters in prototypes are $, @, %, *, ;, [, ], &#38;, \, and +.</p>

<dt><a name='Illegal'></a><a name="Illegal_declaration_of_anonymous_subroutine"
>Illegal declaration of anonymous subroutine</a></dt>

<dd>
<p>(F) When using the <code>sub</code> keyword to construct an anonymous subroutine, you must always specify a block of code. See <a href="/~flora/perl-5.14.2/pod/perlsub.pod" class="podlinkpod"
>perlsub</a>.</p>

<dt><a name='Illegal'></a><a name="Illegal_declaration_of_subroutine_%s"
>Illegal declaration of subroutine %s</a></dt>

<dd>
<p>(F) A subroutine was not declared correctly. See <a href="/~flora/perl-5.14.2/pod/perlsub.pod" class="podlinkpod"
>perlsub</a>.</p>

<dt><a name='Illegal'></a><a name="Illegal_division_by_zero"
>Illegal division by zero</a></dt>

<dd>
<p>(F) You tried to divide a number by 0. Either something was wrong in your logic, or you need to put a conditional in to guard against meaningless input.</p>

<dt><a name='Illegal'></a><a name="Illegal_hexadecimal_digit_%s_ignored"
>Illegal hexadecimal digit %s ignored</a></dt>

<dd>
<p>(W digit) You may have tried to use a character other than 0 - 9 or A - F, a - f in a hexadecimal number. Interpretation of the hexadecimal number stopped before the illegal character.</p>

<dt><a name='Illegal'></a><a name="Illegal_modulus_zero"
>Illegal modulus zero</a></dt>

<dd>
<p>(F) You tried to divide a number by 0 to get the remainder. Most numbers don&#39;t take to this kindly.</p>

<dt><a name='Illegal'></a><a name="Illegal_number_of_bits_in_vec"
>Illegal number of bits in vec</a></dt>

<dd>
<p>(F) The number of bits in vec() (the third argument) must be a power of two from 1 to 32 (or 64, if your platform supports that).</p>

<dt><a name='Illegal'></a><a name="Illegal_octal_digit_%s"
>Illegal octal digit %s</a></dt>

<dd>
<p>(F) You used an 8 or 9 in an octal number.</p>

<dt><a name='Illegal'></a><a name="Illegal_octal_digit_%s_ignored"
>Illegal octal digit %s ignored</a></dt>

<dd>
<p>(W digit) You may have tried to use an 8 or 9 in an octal number. Interpretation of the octal number stopped before the 8 or 9.</p>

<dt><a name='Illegal'></a><a name="Illegal_switch_in_PERL5OPT:_-%c"
>Illegal switch in PERL5OPT: -%c</a></dt>

<dd>
<p>(X) The PERL5OPT environment variable may only be used to set the following switches: <b>-[CDIMUdmtw]</b>.</p>

<dt><a name='Ill'></a><a name="Ill-formed_CRTL_environ_value_&#34;%s&#34;"
>Ill-formed CRTL environ value &#34;%s&#34;</a></dt>

<dd>
<p>(W internal) A warning peculiar to VMS. Perl tried to read the CRTL&#39;s internal environ array, and encountered an element without the <code>=</code> delimiter used to separate keys from values. The element is ignored.</p>

<dt><a name='Ill'></a><a name="Ill-formed_message_in_prime_env_iter:_|%s|"
>Ill-formed message in prime_env_iter: |%s|</a></dt>

<dd>
<p>(W internal) A warning peculiar to VMS. Perl tried to read a logical name or CLI symbol definition when preparing to iterate over %ENV, and didn&#39;t see the expected delimiter between key and value, so the line was ignored.</p>

<dt><a name='in'></a><a name="(in_cleanup)_%s"
>(in cleanup) %s</a></dt>

<dd>
<p>(W misc) This prefix usually indicates that a DESTROY() method raised the indicated exception. Since destructors are usually called by the system at arbitrary points during execution, and often a vast number of times, the warning is issued only once for any number of failures that would otherwise result in the same message being repeated.</p>

<p>Failure of user callbacks dispatched using the <code>G_KEEPERR</code> flag could also result in this warning. See <a href="/~flora/perl-5.14.2/pod/perlcall.pod#G_KEEPERR" class="podlinkpod"
>&#34;G_KEEPERR&#34; in perlcall</a>.</p>

<dt><a name='Inconsistent'></a><a name="Inconsistent_hierarchy_during_C3_merge_of_class_&#39;%s&#39;:_merging_failed_on_parent_&#39;%s&#39;"
>Inconsistent hierarchy during C3 merge of class &#39;%s&#39;: merging failed on parent &#39;%s&#39;</a></dt>

<dd>
<p>(F) The method resolution order (MRO) of the given class is not C3-consistent, and you have enabled the C3 MRO for this class. See the C3 documentation in <a href="/~flora/perl-5.14.2/ext/mro/mro.pm" class="podlinkpod"
>mro</a> for more information.</p>

<dt><a name='In'></a><a name="In_EBCDIC_the_v-string_components_cannot_exceed_2147483647"
>In EBCDIC the v-string components cannot exceed 2147483647</a></dt>

<dd>
<p>(F) An error peculiar to EBCDIC. Internally, v-strings are stored as Unicode code points, and encoded in EBCDIC as UTF-EBCDIC. The UTF-EBCDIC encoding is limited to code points no larger than 2147483647 (0x7FFFFFFF).</p>

<dt><a name='Infinite'></a><a name="Infinite_recursion_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Infinite recursion in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You used a pattern that references itself without consuming any input text. You should check the pattern to ensure that recursive patterns either consume text or fail.</p>

<p>The &#60;-- HERE shows in the regular expression about where the problem was discovered.</p>

<dt><a name='Initialization'></a><a name="Initialization_of_state_variables_in_list_context_currently_forbidden"
>Initialization of state variables in list context currently forbidden</a></dt>

<dd>
<p>(F) Currently the implementation of &#34;state&#34; only permits the initialization of scalar variables in scalar context. Re-write <code>state ($a) = 42</code> as <code>state $a = 42</code> to change from list to scalar context. Constructions such as <code>state (@a) = foo()</code> will be supported in a future perl release.</p>

<dt><a name='Insecure'></a><a name="Insecure_dependency_in_%s"
>Insecure dependency in %s</a></dt>

<dd>
<p>(F) You tried to do something that the tainting mechanism didn&#39;t like. The tainting mechanism is turned on when you&#39;re running setuid or setgid, or when you specify <b>-T</b> to turn it on explicitly. The tainting mechanism labels all data that&#39;s derived directly or indirectly from the user, who is considered to be unworthy of your trust. If any such data is used in a &#34;dangerous&#34; operation, you get this error. See <a href="/~flora/perl-5.14.2/pod/perlsec.pod" class="podlinkpod"
>perlsec</a> for more information.</p>

<dt><a name='Insecure'></a><a name="Insecure_directory_in_%s"
>Insecure directory in %s</a></dt>

<dd>
<p>(F) You can&#39;t use system(), exec(), or a piped open in a setuid or setgid script if <code>$ENV{PATH}</code> contains a directory that is writable by the world. Also, the PATH must not contain any relative directory. See <a href="/~flora/perl-5.14.2/pod/perlsec.pod" class="podlinkpod"
>perlsec</a>.</p>

<dt><a name='Insecure'></a><a name="Insecure_$ENV{%s}_while_running_%s"
>Insecure $ENV{%s} while running %s</a></dt>

<dd>
<p>(F) You can&#39;t use system(), exec(), or a piped open in a setuid or setgid script if any of <code>$ENV{PATH}</code>, <code>$ENV{IFS}</code>, <code>$ENV{CDPATH}</code>, <code>$ENV{ENV}</code>, <code>$ENV{BASH_ENV}</code> or <code>$ENV{TERM}</code> are derived from data supplied (or potentially supplied) by the user. The script must set the path to a known value, using trustworthy data. See <a href="/~flora/perl-5.14.2/pod/perlsec.pod" class="podlinkpod"
>perlsec</a>.</p>

<dt><a name='Insecure'></a><a name="Insecure_user-defined_property_%s"
>Insecure user-defined property %s</a></dt>

<dd>
<p>(F) Perl detected tainted data when trying to compile a regular expression that contains a call to a user-defined character property function, i.e. <code>\p{IsFoo}</code> or <code>\p{InFoo}</code>. See <a href="/~flora/perl-5.14.2/pod/perlunicode.pod#User-Defined_Character_Properties" class="podlinkpod"
>&#34;User-Defined Character Properties&#34; in perlunicode</a> and <a href="/~flora/perl-5.14.2/pod/perlsec.pod" class="podlinkpod"
>perlsec</a>.</p>

<dt><a name='Integer'></a><a name="Integer_overflow_in_format_string_for_%s"
>Integer overflow in format string for %s</a></dt>

<dd>
<p>(F) The indexes and widths specified in the format string of <code>printf()</code> or <code>sprintf()</code> are too large. The numbers must not overflow the size of integers for your architecture.</p>

<dt><a name='Integer'></a><a name="Integer_overflow_in_%s_number"
>Integer overflow in %s number</a></dt>

<dd>
<p>(W overflow) The hexadecimal, octal or binary number you have specified either as a literal or as an argument to hex() or oct() is too big for your architecture, and has been converted to a floating point number. On a 32-bit architecture the largest hexadecimal, octal or binary number representable without overflow is 0xFFFFFFFF, 037777777777, or 0b11111111111111111111111111111111 respectively. Note that Perl transparently promotes all numbers to a floating point representation internally--subject to loss of precision errors in subsequent operations.</p>

<dt><a name='Integer'></a><a name="Integer_overflow_in_version"
>Integer overflow in version</a></dt>

<dd>
<p>(F) Some portion of a version initialization is too large for the size of integers for your architecture. This is not a warning because there is no rational reason for a version to try and use a element larger than typically 2**32. This is usually caused by trying to use some odd mathematical operation as a version, like 100/9.</p>

<dt><a name='Internal'></a><a name="Internal_disaster_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Internal disaster in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(P) Something went badly wrong in the regular expression parser. The &#60;-- HERE shows in the regular expression about where the problem was discovered.</p>

<dt><a name='Internal'></a><a name="Internal_inconsistency_in_tracking_vforks"
>Internal inconsistency in tracking vforks</a></dt>

<dd>
<p>(S) A warning peculiar to VMS. Perl keeps track of the number of times you&#39;ve called <code>fork</code> and <code>exec</code>, to determine whether the current call to <code>exec</code> should affect the current script or a subprocess (see <a href="/~flora/perl-5.14.2/pod/perlvms.pod#exec_LIST" class="podlinkpod"
>&#34;exec LIST&#34; in perlvms</a>). Somehow, this count has become scrambled, so Perl is making a guess and treating this <code>exec</code> as a request to terminate the Perl script and execute the specified command.</p>

<dt><a name='Internal'></a><a name="Internal_urp_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Internal urp in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(P) Something went badly awry in the regular expression parser. The &#60;-- HERE shows in the regular expression about where the problem was discovered.</p>

<dt><a name='s'></a><a name="%s_(...)_interpreted_as_function"
>%s (...) interpreted as function</a></dt>

<dd>
<p>(W syntax) You&#39;ve run afoul of the rule that says that any list operator followed by parentheses turns into a function, with all the list operators arguments found inside the parentheses. See <a href="/~flora/perl-5.14.2/pod/perlop.pod#Terms_and_List_Operators_(Leftward)" class="podlinkpod"
>&#34;Terms and List Operators (Leftward)&#34; in perlop</a>.</p>

<dt><a name='Invalid'></a><a name="Invalid_%s_attribute:_%s"
>Invalid %s attribute: %s</a></dt>

<dd>
<p>(F) The indicated attribute for a subroutine or variable was not recognized by Perl or by a user-supplied handler. See <a href="/~flora/perl-5.14.2/ext/attributes/attributes.pm" class="podlinkpod"
>attributes</a>.</p>

<dt><a name='Invalid'></a><a name="Invalid_%s_attributes:_%s"
>Invalid %s attributes: %s</a></dt>

<dd>
<p>(F) The indicated attributes for a subroutine or variable were not recognized by Perl or by a user-supplied handler. See <a href="/~flora/perl-5.14.2/ext/attributes/attributes.pm" class="podlinkpod"
>attributes</a>.</p>

<dt><a name='Invalid'></a><a name="Invalid_conversion_in_%s:_&#34;%s&#34;"
>Invalid conversion in %s: &#34;%s&#34;</a></dt>

<dd>
<p>(W printf) Perl does not understand the given format conversion. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#sprintf" class="podlinkpod"
>&#34;sprintf&#34; in perlfunc</a>.</p>

<dt><a name='Invalid'></a><a name="Invalid_escape_in_the_specified_encoding_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Invalid escape in the specified encoding in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(W regexp) The numeric escape (for example <code>\xHH</code>) of value &#60; 256 didn&#39;t correspond to a single character through the conversion from the encoding specified by the encoding pragma. The escape was replaced with REPLACEMENT CHARACTER (U+FFFD) instead. The &#60;-- HERE shows in the regular expression about where the escape was discovered.</p>

<dt><a name='Invalid'></a><a name="Invalid_hexadecimal_number_in_\N{U+...}"
>Invalid hexadecimal number in \N{U+...}</a></dt>

<dd>
<p>(F) The character constant represented by <code>...</code> is not a valid hexadecimal number. Either it is empty, or you tried to use a character other than 0 - 9 or A - F, a - f in a hexadecimal number.</p>

<dt><a name='Invalid'></a><a name="Invalid_mro_name:_&#39;%s&#39;"
>Invalid mro name: &#39;%s&#39;</a></dt>

<dd>
<p>(F) You tried to <code>mro::set_mro(&#34;classname&#34;, &#34;foo&#34;)</code> or <code>use mro &#39;foo&#39;</code>, where <code>foo</code> is not a valid method resolution order (MRO). Currently, the only valid ones supported are <code>dfs</code> and <code>c3</code>, unless you have loaded a module that is a MRO plugin. See <a href="/~flora/perl-5.14.2/ext/mro/mro.pm" class="podlinkpod"
>mro</a> and <a href="/~flora/perl-5.14.2/pod/perlmroapi.pod" class="podlinkpod"
>perlmroapi</a>.</p>

<dt><a name='Invalid'></a><a name="Invalid_[]_range_&#34;%s&#34;_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Invalid [] range &#34;%s&#34; in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) The range specified in a character class had a minimum character greater than the maximum character. One possibility is that you forgot the <code>{}</code> from your ending <code>\x{}</code> - <code>\x</code> without the curly braces can go only up to <code>ff</code>. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Invalid'></a><a name="Invalid_range_&#34;%s&#34;_in_transliteration_operator"
>Invalid range &#34;%s&#34; in transliteration operator</a></dt>

<dd>
<p>(F) The range specified in the tr/// or y/// operator had a minimum character greater than the maximum character. See <a href="/~flora/perl-5.14.2/pod/perlop.pod" class="podlinkpod"
>perlop</a>.</p>

<dt><a name='Invalid'></a><a name="Invalid_separator_character_%s_in_attribute_list"
>Invalid separator character %s in attribute list</a></dt>

<dd>
<p>(F) Something other than a colon or whitespace was seen between the elements of an attribute list. If the previous attribute had a parenthesised parameter list, perhaps that list was terminated too soon. See <a href="/~flora/perl-5.14.2/ext/attributes/attributes.pm" class="podlinkpod"
>attributes</a>.</p>

<dt><a name='Invalid'></a><a name="Invalid_separator_character_%s_in_PerlIO_layer_specification_%s"
>Invalid separator character %s in PerlIO layer specification %s</a></dt>

<dd>
<p>(W layer) When pushing layers onto the Perl I/O system, something other than a colon or whitespace was seen between the elements of a layer list. If the previous attribute had a parenthesised parameter list, perhaps that list was terminated too soon.</p>

<dt><a name='Invalid'></a><a name="Invalid_strict_version_format_(%s)"
>Invalid strict version format (%s)</a></dt>

<dd>
<p>(F) A version number did not meet the &#34;strict&#34; criteria for versions. A &#34;strict&#34; version number is a positive decimal number (integer or decimal-fraction) without exponentiation or else a dotted-decimal v-string with a leading &#39;v&#39; character and at least three components. The parenthesized text indicates which criteria were not met. See the <a href="/perldoc?version" class="podlinkpod"
>version</a> module for more details on allowed version formats.</p>

<dt><a name='Invalid'></a><a name="Invalid_type_&#39;%s&#39;_in_%s"
>Invalid type &#39;%s&#39; in %s</a></dt>

<dd>
<p>(F) The given character is not a valid pack or unpack type. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>. (W) The given character is not a valid pack or unpack type but used to be silently ignored.</p>

<dt><a name='Invalid'></a><a name="Invalid_version_format_(%s)"
>Invalid version format (%s)</a></dt>

<dd>
<p>(F) A version number did not meet the &#34;lax&#34; criteria for versions. A &#34;lax&#34; version number is a positive decimal number (integer or decimal-fraction) without exponentiation or else a dotted-decimal v-string. If the v-string has fewer than three components, it must have a leading &#39;v&#39; character. Otherwise, the leading &#39;v&#39; is optional. Both decimal and dotted-decimal versions may have a trailing &#34;alpha&#34; component separated by an underscore character after a fractional or dotted-decimal component. The parenthesized text indicates which criteria were not met. See the <a href="/perldoc?version" class="podlinkpod"
>version</a> module for more details on allowed version formats.</p>

<dt><a name='Invalid'></a><a name="Invalid_version_object"
>Invalid version object</a></dt>

<dd>
<p>(F) The internal structure of the version object was invalid. Perhaps the internals were modified directly in some way or an arbitrary reference was blessed into the &#34;version&#34; class.</p>

<dt><a name='ioctl'></a><a name="ioctl_is_not_implemented"
>ioctl is not implemented</a></dt>

<dd>
<p>(F) Your machine apparently doesn&#39;t implement ioctl(), which is pretty strange for a machine that supports C.</p>

<dt><a name='ioctl'></a><a name="ioctl()_on_unopened_%s"
>ioctl() on unopened %s</a></dt>

<dd>
<p>(W unopened) You tried ioctl() on a filehandle that was never opened. Check your control flow and number of arguments.</p>

<dt><a name='IO'></a><a name="IO_layers_(like_&#39;%s&#39;)_unavailable"
>IO layers (like &#39;%s&#39;) unavailable</a></dt>

<dd>
<p>(F) Your Perl has not been configured to have PerlIO, and therefore you cannot use IO layers. To have PerlIO, Perl must be configured with &#39;useperlio&#39;.</p>

<dt><a name='IO'></a><a name="IO::Socket::atmark_not_implemented_on_this_architecture"
>IO::Socket::atmark not implemented on this architecture</a></dt>

<dd>
<p>(F) Your machine doesn&#39;t implement the sockatmark() functionality, neither as a system call nor an ioctl call (SIOCATMARK).</p>

<dt><a name='is'></a><a name="$*_is_no_longer_supported"
>$* is no longer supported</a></dt>

<dd>
<p>(D deprecated, syntax) The special variable <code>$*</code>, deprecated in older perls, has been removed as of 5.9.0 and is no longer supported. In previous versions of perl the use of <code>$*</code> enabled or disabled multi-line matching within a string.</p>

<p>Instead of using <code>$*</code> you should use the <code>/m</code> (and maybe <code>/s</code>) regexp modifiers. You can enable <code>/m</code> for a lexical scope (even a whole file) with <code>use re &#39;/m&#39;</code>. (In older versions: when <code>$*</code> was set to a true value then all regular expressions behaved as if they were written using <code>/m</code>.)</p>

<dt><a name='is'></a><a name="$#_is_no_longer_supported"
>$# is no longer supported</a></dt>

<dd>
<p>(D deprecated, syntax) The special variable <code>$#</code>, deprecated in older perls, has been removed as of 5.9.3 and is no longer supported. You should use the printf/sprintf functions instead.</p>

<dt><a name='s'></a><a name="`%s&#39;_is_not_a_code_reference"
>`%s&#39; is not a code reference</a></dt>

<dd>
<p>(W overload) The second (fourth, sixth, ...) argument of overload::constant needs to be a code reference. Either an anonymous subroutine, or a reference to a subroutine.</p>

<dt><a name='s'></a><a name="`%s&#39;_is_not_an_overloadable_type"
>`%s&#39; is not an overloadable type</a></dt>

<dd>
<p>(W overload) You tried to overload a constant type the overload package is unaware of.</p>

<dt><a name='junk'></a><a name="junk_on_end_of_regexp"
>junk on end of regexp</a></dt>

<dd>
<p>(P) The regular expression parser is confused.</p>

<dt><a name='Label'></a><a name="Label_not_found_for_&#34;last_%s&#34;"
>Label not found for &#34;last %s&#34;</a></dt>

<dd>
<p>(F) You named a loop to break out of, but you&#39;re not currently in a loop of that name, not even if you count where you were called from. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#last" class="podlinkpod"
>&#34;last&#34; in perlfunc</a>.</p>

<dt><a name='Label'></a><a name="Label_not_found_for_&#34;next_%s&#34;"
>Label not found for &#34;next %s&#34;</a></dt>

<dd>
<p>(F) You named a loop to continue, but you&#39;re not currently in a loop of that name, not even if you count where you were called from. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#last" class="podlinkpod"
>&#34;last&#34; in perlfunc</a>.</p>

<dt><a name='Label'></a><a name="Label_not_found_for_&#34;redo_%s&#34;"
>Label not found for &#34;redo %s&#34;</a></dt>

<dd>
<p>(F) You named a loop to restart, but you&#39;re not currently in a loop of that name, not even if you count where you were called from. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#last" class="podlinkpod"
>&#34;last&#34; in perlfunc</a>.</p>

<dt><a name='leaving'></a><a name="leaving_effective_%s_failed"
>leaving effective %s failed</a></dt>

<dd>
<p>(F) While under the <code>use filetest</code> pragma, switching the real and effective uids or gids failed.</p>

<dt><a name='length'></a><a name="length/code_after_end_of_string_in_unpack"
>length/code after end of string in unpack</a></dt>

<dd>
<p>(F) While unpacking, the string buffer was already used up when an unpack length/code combination tried to obtain more data. This results in an undefined value for the length. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Lexing'></a><a name="Lexing_code_attempted_to_stuff_non-Latin-1_character_into_Latin-1_input"
>Lexing code attempted to stuff non-Latin-1 character into Latin-1 input</a></dt>

<dd>
<p>(F) An extension is attempting to insert text into the current parse (using <a href="/~flora/perl-5.14.2/autodoc.pl#lex_stuff_pvn" class="podlinkpod"
>lex_stuff_pvn</a> or similar), but tried to insert a character that couldn&#39;t be part of the current input. This is an inherent pitfall of the stuffing mechanism, and one of the reasons to avoid it. Where it is necessary to stuff, stuffing only plain ASCII is recommended.</p>

<dt><a name='Lexing'></a><a name="Lexing_code_internal_error_(%s)"
>Lexing code internal error (%s)</a></dt>

<dd>
<p>(F) Lexing code supplied by an extension violated the lexer&#39;s API in a detectable way.</p>

<dt><a name='listen'></a><a name="listen()_on_closed_socket_%s"
>listen() on closed socket %s</a></dt>

<dd>
<p>(W closed) You tried to do a listen on a closed socket. Did you forget to check the return value of your socket() call? See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#listen" class="podlinkpod"
>&#34;listen&#34; in perlfunc</a>.</p>

<dt><a name='localtime'></a><a name="localtime(%f)_too_large"
>localtime(%f) too large</a></dt>

<dd>
<p>(W overflow) You called <code>localtime</code> with a number that was larger than it can reliably handle and <code>localtime</code> probably returned the wrong date. This warning is also triggered with nan (the special not-a-number value).</p>

<dt><a name='localtime'></a><a name="localtime(%f)_too_small"
>localtime(%f) too small</a></dt>

<dd>
<p>(W overflow) You called <code>localtime</code> with a number that was smaller than it can reliably handle and <code>localtime</code> probably returned the wrong date. This warning is also triggered with nan (the special not-a-number value).</p>

<dt><a name='Lookbehind'></a><a name="Lookbehind_longer_than_%d_not_implemented_in_regex_m/%s/"
>Lookbehind longer than %d not implemented in regex m/%s/</a></dt>

<dd>
<p>(F) There is currently a limit on the length of string which lookbehind can handle. This restriction may be eased in a future release.</p>

<dt><a name='Lost'></a><a name="Lost_precision_when_%s_%f_by_1"
>Lost precision when %s %f by 1</a></dt>

<dd>
<p>(W) The value you attempted to increment or decrement by one is too large for the underlying floating point representation to store accurately, hence the target of <code>++</code> or <code>--</code> is unchanged. Perl issues this warning because it has already switched from integers to floating point when values are too large for integers, and now even floating point is insufficient. You may wish to switch to using <a href="/perldoc?Math%3A%3ABigInt" class="podlinkpod"
>Math::BigInt</a> explicitly.</p>

<dt><a name='lstat'></a><a name="lstat()_on_filehandle_%s"
>lstat() on filehandle %s</a></dt>

<dd>
<p>(W io) You tried to do an lstat on a filehandle. What did you mean by that? lstat() makes sense only on filenames. (Perl did a fstat() instead on the filehandle.)</p>

<dt><a name='lvalue'></a><a name="lvalue_attribute_ignored_after_the_subroutine_has_been_defined"
>lvalue attribute ignored after the subroutine has been defined</a></dt>

<dd>
<p>(W misc) Making a subroutine an lvalue subroutine after it has been defined by declaring the subroutine with an lvalue attribute is not possible. To make the subroutine an lvalue subroutine add the lvalue attribute to the definition, or put the declaration before the definition.</p>

<dt><a name='Lvalue'></a><a name="Lvalue_subs_returning_%s_not_implemented_yet"
>Lvalue subs returning %s not implemented yet</a></dt>

<dd>
<p>(F) Due to limitations in the current implementation, array and hash values cannot be returned in subroutines used in lvalue context. See <a href="/~flora/perl-5.14.2/pod/perlsub.pod#Lvalue_subroutines" class="podlinkpod"
>&#34;Lvalue subroutines&#34; in perlsub</a>.</p>

<dt><a name='Malformed'></a><a name="Malformed_integer_in_[]_in_pack"
>Malformed integer in [] in pack</a></dt>

<dd>
<p>(F) Between the brackets enclosing a numeric repeat count only digits are permitted. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Malformed'></a><a name="Malformed_integer_in_[]_in_unpack"
>Malformed integer in [] in unpack</a></dt>

<dd>
<p>(F) Between the brackets enclosing a numeric repeat count only digits are permitted. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Malformed'></a><a name="Malformed_PERLLIB_PREFIX"
>Malformed PERLLIB_PREFIX</a></dt>

<dd>
<p>(F) An error peculiar to OS/2. PERLLIB_PREFIX should be of the form</p>

<pre class="sh_perl">    prefix1;prefix2</pre>

<p>or prefix1 prefix2</p>

<p>with nonempty prefix1 and prefix2. If <code>prefix1</code> is indeed a prefix of a builtin library search path, prefix2 is substituted. The error may appear if components are not found, or are too long. See &#34;PERLLIB_PREFIX&#34; in <a href="/~flora/perl-5.14.2/README.os2" class="podlinkpod"
>perlos2</a>.</p>

<dt><a name='Malformed'></a><a name="Malformed_prototype_for_%s:_%s"
>Malformed prototype for %s: %s</a></dt>

<dd>
<p>(F) You tried to use a function with a malformed prototype. The syntax of function prototypes is given a brief compile-time check for obvious errors like invalid characters. A more rigorous check is run when the function is called.</p>

<dt><a name='Malformed'></a><a name="Malformed_UTF-8_character_(%s)"
>Malformed UTF-8 character (%s)</a></dt>

<dd>
<p>(S utf8) (F) Perl detected a string that didn&#39;t comply with UTF-8 encoding rules, even though it had the UTF8 flag on.</p>

<p>One possible cause is that you set the UTF8 flag yourself for data that you thought to be in UTF-8 but it wasn&#39;t (it was for example legacy 8-bit data). To guard against this, you can use Encode::decode_utf8.</p>

<p>If you use the <code>:encoding(UTF-8)</code> PerlIO layer for input, invalid byte sequences are handled gracefully, but if you use <code>:utf8</code>, the flag is set without validating the data, possibly resulting in this error message.</p>

<p>See also <a href="/perldoc?Encode#Handling_Malformed_Data" class="podlinkpod"
>&#34;Handling Malformed Data&#34; in Encode</a>.</p>

<dt><a name='Malformed'></a><a name="Malformed_UTF-8_returned_by_\N"
>Malformed UTF-8 returned by \N</a></dt>

<dd>
<p>(F) The charnames handler returned malformed UTF-8.</p>

<dt><a name='Malformed'></a><a name="Malformed_UTF-8_string_in_&#39;%c&#39;_format_in_unpack"
>Malformed UTF-8 string in &#39;%c&#39; format in unpack</a></dt>

<dd>
<p>(F) You tried to unpack something that didn&#39;t comply with UTF-8 encoding rules and perl was unable to guess how to make more progress.</p>

<dt><a name='Malformed'></a><a name="Malformed_UTF-8_string_in_pack"
>Malformed UTF-8 string in pack</a></dt>

<dd>
<p>(F) You tried to pack something that didn&#39;t comply with UTF-8 encoding rules and perl was unable to guess how to make more progress.</p>

<dt><a name='Malformed'></a><a name="Malformed_UTF-8_string_in_unpack"
>Malformed UTF-8 string in unpack</a></dt>

<dd>
<p>(F) You tried to unpack something that didn&#39;t comply with UTF-8 encoding rules and perl was unable to guess how to make more progress.</p>

<dt><a name='Malformed'></a><a name="Malformed_UTF-16_surrogate"
>Malformed UTF-16 surrogate</a></dt>

<dd>
<p>(F) Perl thought it was reading UTF-16 encoded character data but while doing it Perl met a malformed Unicode surrogate.</p>

<dt><a name='s'></a><a name="%s_matches_null_string_many_times_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>%s matches null string many times in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(W regexp) The pattern you&#39;ve specified would be an infinite loop if the regular expression engine didn&#39;t specifically check for that. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Maximal'></a><a name="Maximal_count_of_pending_signals_(%u)_exceeded"
>Maximal count of pending signals (%u) exceeded</a></dt>

<dd>
<p>(F) Perl aborted due to too high a number of signals pending. This usually indicates that your operating system tried to deliver signals too fast (with a very high priority), starving the perl process from resources it would need to reach a point where it can process signals safely. (See <a href="/~flora/perl-5.14.2/pod/perlipc.pod#Deferred_Signals_(Safe_Signals)" class="podlinkpod"
>&#34;Deferred Signals (Safe Signals)&#34; in perlipc</a>.)</p>

<dt><a name='s'></a><a name="&#34;%s&#34;_may_clash_with_future_reserved_word"
>&#34;%s&#34; may clash with future reserved word</a></dt>

<dd>
<p>(W) This warning may be due to running a perl5 script through a perl4 interpreter, especially if the word that is being warned about is &#34;use&#34; or &#34;my&#34;.</p>

<dt><a name='may'></a><a name="%_may_not_be_used_in_pack"
>% may not be used in pack</a></dt>

<dd>
<p>(F) You can&#39;t pack a string by supplying a checksum, because the checksumming process loses information, and you can&#39;t go the other way. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#unpack" class="podlinkpod"
>&#34;unpack&#34; in perlfunc</a>.</p>

<dt><a name='Method'></a><a name="Method_for_operation_%s_not_found_in_package_%s_during_blessing"
>Method for operation %s not found in package %s during blessing</a></dt>

<dd>
<p>(F) An attempt was made to specify an entry in an overloading table that doesn&#39;t resolve to a valid subroutine. See <a href="/~flora/perl-5.14.2/lib/overload.pm" class="podlinkpod"
>overload</a>.</p>

<dt><a name='Method'></a><a name="Method_%s_not_permitted"
>Method %s not permitted</a></dt>

<dd>
<p>See Server error.</p>

<dt><a name='Might'></a><a name="Might_be_a_runaway_multi-line_%s_string_starting_on_line_%d"
>Might be a runaway multi-line %s string starting on line %d</a></dt>

<dd>
<p>(S) An advisory indicating that the previous error may have been caused by a missing delimiter on a string or pattern, because it eventually ended earlier on the current line.</p>

<dt><a name='Misplaced'></a><a name="Misplaced___in_number"
>Misplaced _ in number</a></dt>

<dd>
<p>(W syntax) An underscore (underbar) in a numeric constant did not separate two digits.</p>

<dt><a name='Missing'></a><a name="Missing_argument_in_%s"
>Missing argument in %s</a></dt>

<dd>
<p>(W uninitialized) A printf-type format required more arguments than were supplied.</p>

<dt><a name='Missing'></a><a name="Missing_argument_to_-%c"
>Missing argument to -%c</a></dt>

<dd>
<p>(F) The argument to the indicated command line switch must follow immediately after the switch, without intervening spaces.</p>

<dt><a name='Missing'></a><a name="Missing_braces_on_\N{}"
>Missing braces on \N{}</a></dt>

<dd>
<p>(F) Wrong syntax of character name literal <code>\N{charname}</code> within double-quotish context. This can also happen when there is a space (or comment) between the <code>\N</code> and the <code>{</code> in a regex with the <code>/x</code> modifier. This modifier does not change the requirement that the brace immediately follow the <code>\N</code>.</p>

<dt><a name='Missing'></a><a name="Missing_braces_on_\o{}"
>Missing braces on \o{}</a></dt>

<dd>
<p>(F) A <code>\o</code> must be followed immediately by a <code>{</code> in double-quotish context.</p>

<dt><a name='Missing'></a><a name="Missing_comma_after_first_argument_to_%s_function"
>Missing comma after first argument to %s function</a></dt>

<dd>
<p>(F) While certain functions allow you to specify a filehandle or an &#34;indirect object&#34; before the argument list, this ain&#39;t one of them.</p>

<dt><a name='Missing'></a><a name="Missing_command_in_piped_open"
>Missing command in piped open</a></dt>

<dd>
<p>(W pipe) You used the <code>open(FH, &#34;| command&#34;)</code> or <code>open(FH, &#34;command |&#34;)</code> construction, but the command was missing or blank.</p>

<dt><a name='Missing'></a><a name="Missing_control_char_name_in_\c"
>Missing control char name in \c</a></dt>

<dd>
<p>(F) A double-quoted string ended with &#34;\c&#34;, without the required control character name.</p>

<dt><a name='Missing'></a><a name="Missing_name_in_&#34;my_sub&#34;"
>Missing name in &#34;my sub&#34;</a></dt>

<dd>
<p>(F) The reserved syntax for lexically scoped subroutines requires that they have a name with which they can be found.</p>

<dt><a name='Missing'></a><a name="Missing_$_on_loop_variable"
>Missing $ on loop variable</a></dt>

<dd>
<p>(F) Apparently you&#39;ve been programming in <b>csh</b> too much. Variables are always mentioned with the $ in Perl, unlike in the shells, where it can vary from one line to the next.</p>

<dt><a name='Missing'></a><a name="(Missing_operator_before_%s?)"
>(Missing operator before %s?)</a></dt>

<dd>
<p>(S syntax) This is an educated guess made in conjunction with the message &#34;%s found where operator expected&#34;. Often the missing operator is a comma.</p>

<dt><a name='Missing'></a><a name="Missing_right_brace_on_%s"
>Missing right brace on %s</a></dt>

<dd>
<p>(F) Missing right brace in <code>\x{...}</code>, <code>\p{...}</code>, <code>\P{...}</code>, or <code>\N{...}</code>.</p>

<dt><a name='Missing'></a><a name="Missing_right_brace_on_\N{}_or_unescaped_left_brace_after_\N"
>Missing right brace on \N{} or unescaped left brace after \N</a></dt>

<dd>
<p>(F) <code>\N</code> has two meanings.</p>

<p>The traditional one has it followed by a name enclosed in braces, meaning the character (or sequence of characters) given by that name. Thus <code>\N{ASTERISK}</code> is another way of writing <code>*</code>, valid in both double-quoted strings and regular expression patterns. In patterns, it doesn&#39;t have the meaning an unescaped <code>*</code> does.</p>

<p>Starting in Perl 5.12.0, <code>\N</code> also can have an additional meaning (only) in patterns, namely to match a non-newline character. (This is short for <code>[^\n]</code>, and like <code>.</code> but is not affected by the <code>/s</code> regex modifier.)</p>

<p>This can lead to some ambiguities. When <code>\N</code> is not followed immediately by a left brace, Perl assumes the <code>[^\n]</code> meaning. Also, if the braces form a valid quantifier such as <code>\N{3}</code> or <code>\N{5,}</code>, Perl assumes that this means to match the given quantity of non-newlines (in these examples, 3; and 5 or more, respectively). In all other case, where there is a <code>\N{</code> and a matching <code>}</code>, Perl assumes that a character name is desired.</p>

<p>However, if there is no matching <code>}</code>, Perl doesn&#39;t know if it was mistakenly omitted, or if <code>[^\n]{</code> was desired, and raises this error. If you meant the former, add the right brace; if you meant the latter, escape the brace with a backslash, like so: <code>\N\{</code></p>

<dt><a name='Missing'></a><a name="Missing_right_curly_or_square_bracket"
>Missing right curly or square bracket</a></dt>

<dd>
<p>(F) The lexer counted more opening curly or square brackets than closing ones. As a general rule, you&#39;ll find it&#39;s missing near the place you were last editing.</p>

<dt><a name='Missing'></a><a name="(Missing_semicolon_on_previous_line?)"
>(Missing semicolon on previous line?)</a></dt>

<dd>
<p>(S syntax) This is an educated guess made in conjunction with the message &#34;%s found where operator expected&#34;. Don&#39;t automatically put a semicolon on the previous line just because you saw this message.</p>

<dt><a name='Modification'></a><a name="Modification_of_a_read-only_value_attempted"
>Modification of a read-only value attempted</a></dt>

<dd>
<p>(F) You tried, directly or indirectly, to change the value of a constant. You didn&#39;t, of course, try &#34;2 = 1&#34;, because the compiler catches that. But an easy way to do the same thing is:</p>

<pre class="sh_perl">    sub mod { $_[0] = 1 }
    mod(2);</pre>

<p>Another way is to assign to a substr() that&#39;s off the end of the string.</p>

<p>Yet another way is to assign to a <code>foreach</code> loop <i>VAR</i> when <i>VAR</i> is aliased to a constant in the look <i>LIST</i>:</p>

<pre class="sh_perl">        $x = 1;
        foreach my $n ($x, 2) {
            $n *= 2; # modifies the $x, but fails on attempt to modify the 2
        }</pre>

<dt><a name='Modification'></a><a name="Modification_of_non-creatable_array_value_attempted,_%s"
>Modification of non-creatable array value attempted, %s</a></dt>

<dd>
<p>(F) You tried to make an array value spring into existence, and the subscript was probably negative, even counting from end of the array backwards.</p>

<dt><a name='Modification'></a><a name="Modification_of_non-creatable_hash_value_attempted,_%s"
>Modification of non-creatable hash value attempted, %s</a></dt>

<dd>
<p>(P) You tried to make a hash value spring into existence, and it couldn&#39;t be created for some peculiar reason.</p>

<dt><a name='Module'></a><a name="Module_name_must_be_constant"
>Module name must be constant</a></dt>

<dd>
<p>(F) Only a bare module name is allowed as the first argument to a &#34;use&#34;.</p>

<dt><a name='Module'></a><a name="Module_name_required_with_-%c_option"
>Module name required with -%c option</a></dt>

<dd>
<p>(F) The <code>-M</code> or <code>-m</code> options say that Perl should load some module, but you omitted the name of the module. Consult <a href="/~flora/perl-5.14.2/pod/perlrun.pod" class="podlinkpod"
>perlrun</a> for full details about <code>-M</code> and <code>-m</code>.</p>

<dt><a name='More'></a><a name="More_than_one_argument_to_&#39;%s&#39;_open"
>More than one argument to &#39;%s&#39; open</a></dt>

<dd>
<p>(F) The <code>open</code> function has been asked to open multiple files. This can happen if you are trying to open a pipe to a command that takes a list of arguments, but have forgotten to specify a piped open mode. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#open" class="podlinkpod"
>&#34;open&#34; in perlfunc</a> for details.</p>

<dt><a name='msg'></a><a name="msg%s_not_implemented"
>msg%s not implemented</a></dt>

<dd>
<p>(F) You don&#39;t have System V message IPC on your system.</p>

<dt><a name='Multidimensional'></a><a name="Multidimensional_syntax_%s_not_supported"
>Multidimensional syntax %s not supported</a></dt>

<dd>
<p>(W syntax) Multidimensional arrays aren&#39;t written like <code>$foo[1,2,3]</code>. They&#39;re written like <code>$foo[1][2][3]</code>, as in C.</p>

<dt><a name='must'></a><a name="&#39;/&#39;_must_follow_a_numeric_type_in_unpack"
>&#39;/&#39; must follow a numeric type in unpack</a></dt>

<dd>
<p>(F) You had an unpack template that contained a &#39;/&#39;, but this did not follow some unpack specification producing a numeric value. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='my'></a><a name="&#34;my_sub&#34;_not_yet_implemented"
>&#34;my sub&#34; not yet implemented</a></dt>

<dd>
<p>(F) Lexically scoped subroutines are not yet implemented. Don&#39;t try that yet.</p>

<dt><a name='my'></a><a name="&#34;my&#34;_variable_%s_can&#39;t_be_in_a_package"
>&#34;my&#34; variable %s can&#39;t be in a package</a></dt>

<dd>
<p>(F) Lexically scoped variables aren&#39;t in a package, so it doesn&#39;t make sense to try to declare one with a package qualifier on the front. Use local() if you want to localize a package variable.</p>

<dt><a name='Name'></a><a name="Name_&#34;%s::%s&#34;_used_only_once:_possible_typo"
>Name &#34;%s::%s&#34; used only once: possible typo</a></dt>

<dd>
<p>(W once) Typographical errors often show up as unique variable names. If you had a good reason for having a unique name, then just mention it again somehow to suppress the message. The <code>our</code> declaration is provided for this purpose.</p>

<p>NOTE: This warning detects symbols that have been used only once so $c, @c, %c, *c, &#38;c, sub c{}, c(), and c (the filehandle or format) are considered the same; if a program uses $c only once but also uses any of the others it will not trigger this warning.</p>

<dt><a name='N'></a><a name="\N_in_a_character_class_must_be_a_named_character:_\N{...}"
>\N in a character class must be a named character: \N{...}</a></dt>

<dd>
<p>(F) The new (5.12) meaning of <code>\N</code> as <code>[^\n]</code> is not valid in a bracketed character class, for the same reason that <code>.</code> in a character class loses its specialness: it matches almost everything, which is probably not what you want.</p>

<dt><a name='N'></a><a name="\N{NAME}_must_be_resolved_by_the_lexer"
>\N{NAME} must be resolved by the lexer</a></dt>

<dd>
<p>(F) When compiling a regex pattern, an unresolved named character or sequence was encountered. This can happen in any of several ways that bypass the lexer, such as using single-quotish context, or an extra backslash in double-quotish:</p>

<pre class="sh_perl">    $re = &#39;\N{SPACE}&#39;;  # Wrong!
    $re = &#34;\\N{SPACE}&#34;; # Wrong!
    /$re/;</pre>

<p>Instead, use double-quotes with a single backslash:</p>

<pre class="sh_perl">    $re = &#34;\N{SPACE}&#34;;  # ok
    /$re/;</pre>

<p>The lexer can be bypassed as well by creating the pattern from smaller components:</p>

<pre class="sh_perl">    $re = &#39;\N&#39;;
    /${re}{SPACE}/;     # Wrong!</pre>

<p>It&#39;s not a good idea to split a construct in the middle like this, and it doesn&#39;t work here. Instead use the solution above.</p>

<p>Finally, the message also can happen under the <code>/x</code> regex modifier when the <code>\N</code> is separated by spaces from the <code>{</code>, in which case, remove the spaces.</p>

<pre class="sh_perl">    /\N {SPACE}/x;      # Wrong!
    /\N{SPACE}/x;       # ok</pre>

<dt><a name='Negative'></a><a name="Negative_&#39;/&#39;_count_in_unpack"
>Negative &#39;/&#39; count in unpack</a></dt>

<dd>
<p>(F) The length count obtained from a length/code unpack operation was negative. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Negative'></a><a name="Negative_length"
>Negative length</a></dt>

<dd>
<p>(F) You tried to do a read/write/send/recv operation with a buffer length that is less than 0. This is difficult to imagine.</p>

<dt><a name='Negative'></a><a name="Negative_offset_to_vec_in_lvalue_context"
>Negative offset to vec in lvalue context</a></dt>

<dd>
<p>(F) When <code>vec</code> is called in an lvalue context, the second argument must be greater than or equal to zero.</p>

<dt><a name='Nested'></a><a name="Nested_quantifiers_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Nested quantifiers in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You can&#39;t quantify a quantifier without intervening parentheses. So things like ** or +* or ?* are illegal. The &#60;-- HERE shows in the regular expression about where the problem was discovered.</p>

<p>Note that the minimal matching quantifiers, <code>*?</code>, <code>+?</code>, and <code>??</code> appear to be nested quantifiers, but aren&#39;t. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='s'></a><a name="%s_never_introduced"
>%s never introduced</a></dt>

<dd>
<p>(S internal) The symbol in question was declared but somehow went out of scope before it could possibly have been used.</p>

<dt><a name='next'></a><a name="next::method/next::can/maybe::next::method_cannot_find_enclosing_method"
>next::method/next::can/maybe::next::method cannot find enclosing method</a></dt>

<dd>
<p>(F) <code>next::method</code> needs to be called within the context of a real method in a real package, and it could not find such a context. See <a href="/~flora/perl-5.14.2/ext/mro/mro.pm" class="podlinkpod"
>mro</a>.</p>

<dt><a name='No'></a><a name="No_%s_allowed_while_running_setuid"
>No %s allowed while running setuid</a></dt>

<dd>
<p>(F) Certain operations are deemed to be too insecure for a setuid or setgid script to even be allowed to attempt. Generally speaking there will be another way to do what you want that is, if not secure, at least securable. See <a href="/~flora/perl-5.14.2/pod/perlsec.pod" class="podlinkpod"
>perlsec</a>.</p>

<dt><a name='No'></a><a name="No_comma_allowed_after_%s"
>No comma allowed after %s</a></dt>

<dd>
<p>(F) A list operator that has a filehandle or &#34;indirect object&#34; is not allowed to have a comma between that and the following arguments. Otherwise it&#39;d be just another one of the arguments.</p>

<p>One possible cause for this is that you expected to have imported a constant to your name space with <b>use</b> or <b>import</b> while no such importing took place, it may for example be that your operating system does not support that particular constant. Hopefully you did use an explicit import list for the constants you expect to see; please see <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#use" class="podlinkpod"
>&#34;use&#34; in perlfunc</a> and <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#import" class="podlinkpod"
>&#34;import&#34; in perlfunc</a>. While an explicit import list would probably have caught this error earlier it naturally does not remedy the fact that your operating system still does not support that constant. Maybe you have a typo in the constants of the symbol import list of <b>use</b> or <b>import</b> or in the constant name at the line where this error was triggered?</p>

<dt><a name='No'></a><a name="No_command_into_which_to_pipe_on_command_line"
>No command into which to pipe on command line</a></dt>

<dd>
<p>(F) An error peculiar to VMS. Perl handles its own command line redirection, and found a &#39;|&#39; at the end of the command line, so it doesn&#39;t know where you want to pipe the output from this command.</p>

<dt><a name='No'></a><a name="No_DB::DB_routine_defined"
>No DB::DB routine defined</a></dt>

<dd>
<p>(F) The currently executing code was compiled with the <b>-d</b> switch, but for some reason the current debugger (e.g. <em>perl5db.pl</em> or a <code>Devel::</code> module) didn&#39;t define a routine to be called at the beginning of each statement.</p>

<dt><a name='No'></a><a name="No_dbm_on_this_machine"
>No dbm on this machine</a></dt>

<dd>
<p>(P) This is counted as an internal error, because every machine should supply dbm nowadays, because Perl comes with SDBM. See <a href="/~flora/perl-5.14.2/ext/SDBM_File/SDBM_File.pm" class="podlinkpod"
>SDBM_File</a>.</p>

<dt><a name='No'></a><a name="No_DB::sub_routine_defined"
>No DB::sub routine defined</a></dt>

<dd>
<p>(F) The currently executing code was compiled with the <b>-d</b> switch, but for some reason the current debugger (e.g. <em>perl5db.pl</em> or a <code>Devel::</code> module) didn&#39;t define a <code>DB::sub</code> routine to be called at the beginning of each ordinary subroutine call.</p>

<dt><a name='No'></a><a name="No_error_file_after_2&#62;_or_2&#62;&#62;_on_command_line"
>No error file after 2&#62; or 2&#62;&#62; on command line</a></dt>

<dd>
<p>(F) An error peculiar to VMS. Perl handles its own command line redirection, and found a &#39;2&#62;&#39; or a &#39;2&#62;&#62;&#39; on the command line, but can&#39;t find the name of the file to which to write data destined for stderr.</p>

<dt><a name='No'></a><a name="No_group_ending_character_&#39;%c&#39;_found_in_template"
>No group ending character &#39;%c&#39; found in template</a></dt>

<dd>
<p>(F) A pack or unpack template has an opening &#39;(&#39; or &#39;[&#39; without its matching counterpart. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='No'></a><a name="No_input_file_after_&#60;_on_command_line"
>No input file after &#60; on command line</a></dt>

<dd>
<p>(F) An error peculiar to VMS. Perl handles its own command line redirection, and found a &#39;&#60;&#39; on the command line, but can&#39;t find the name of the file from which to read data for stdin.</p>

<dt><a name='No'></a><a name="No_next::method_&#39;%s&#39;_found_for_%s"
>No next::method &#39;%s&#39; found for %s</a></dt>

<dd>
<p>(F) <code>next::method</code> found no further instances of this method name in the remaining packages of the MRO of this class. If you don&#39;t want it throwing an exception, use <code>maybe::next::method</code> or <code>next::can</code>. See <a href="/~flora/perl-5.14.2/ext/mro/mro.pm" class="podlinkpod"
>mro</a>.</p>

<dt><a name='no'></a><a name="&#34;no&#34;_not_allowed_in_expression"
>&#34;no&#34; not allowed in expression</a></dt>

<dd>
<p>(F) The &#34;no&#34; keyword is recognized and executed at compile time, and returns no useful value. See <a href="/~flora/perl-5.14.2/pod/perlmod.pod" class="podlinkpod"
>perlmod</a>.</p>

<dt><a name='No'></a><a name="No_output_file_after_&#62;_on_command_line"
>No output file after &#62; on command line</a></dt>

<dd>
<p>(F) An error peculiar to VMS. Perl handles its own command line redirection, and found a lone &#39;&#62;&#39; at the end of the command line, so it doesn&#39;t know where you wanted to redirect stdout.</p>

<dt><a name='No'></a><a name="No_output_file_after_&#62;_or_&#62;&#62;_on_command_line"
>No output file after &#62; or &#62;&#62; on command line</a></dt>

<dd>
<p>(F) An error peculiar to VMS. Perl handles its own command line redirection, and found a &#39;&#62;&#39; or a &#39;&#62;&#62;&#39; on the command line, but can&#39;t find the name of the file to which to write data destined for stdout.</p>

<dt><a name='No'></a><a name="No_package_name_allowed_for_variable_%s_in_&#34;our&#34;"
>No package name allowed for variable %s in &#34;our&#34;</a></dt>

<dd>
<p>(F) Fully qualified variable names are not allowed in &#34;our&#34; declarations, because that doesn&#39;t make much sense under existing semantics. Such syntax is reserved for future extensions.</p>

<dt><a name='No'></a><a name="No_Perl_script_found_in_input"
>No Perl script found in input</a></dt>

<dd>
<p>(F) You called <code>perl -x</code>, but no line was found in the file beginning with #! and containing the word &#34;perl&#34;.</p>

<dt><a name='No'></a><a name="No_setregid_available"
>No setregid available</a></dt>

<dd>
<p>(F) Configure didn&#39;t find anything resembling the setregid() call for your system.</p>

<dt><a name='No'></a><a name="No_setreuid_available"
>No setreuid available</a></dt>

<dd>
<p>(F) Configure didn&#39;t find anything resembling the setreuid() call for your system.</p>

<dt><a name='No'></a><a name="No_%s_specified_for_-%c"
>No %s specified for -%c</a></dt>

<dd>
<p>(F) The indicated command line switch needs a mandatory argument, but you haven&#39;t specified one.</p>

<dt><a name='No'></a><a name="No_such_class_field_&#34;%s&#34;_in_variable_%s_of_type_%s"
>No such class field &#34;%s&#34; in variable %s of type %s</a></dt>

<dd>
<p>(F) You tried to access a key from a hash through the indicated typed variable but that key is not allowed by the package of the same type. The indicated package has restricted the set of allowed keys using the <a href="/perldoc?fields" class="podlinkpod"
>fields</a> pragma.</p>

<dt><a name='No'></a><a name="No_such_class_%s"
>No such class %s</a></dt>

<dd>
<p>(F) You provided a class qualifier in a &#34;my&#34;, &#34;our&#34; or &#34;state&#34; declaration, but this class doesn&#39;t exist at this point in your program.</p>

<dt><a name='No'></a><a name="No_such_hook:_%s"
>No such hook: %s</a></dt>

<dd>
<p>(F) You specified a signal hook that was not recognized by Perl. Currently, Perl accepts <code>__DIE__</code> and <code>__WARN__</code> as valid signal hooks.</p>

<dt><a name='No'></a><a name="No_such_pipe_open"
>No such pipe open</a></dt>

<dd>
<p>(P) An error peculiar to VMS. The internal routine my_pclose() tried to close a pipe which hadn&#39;t been opened. This should have been caught earlier as an attempt to close an unopened filehandle.</p>

<dt><a name='No'></a><a name="No_such_signal:_SIG%s"
>No such signal: SIG%s</a></dt>

<dd>
<p>(W signal) You specified a signal name as a subscript to %SIG that was not recognized. Say <code>kill -l</code> in your shell to see the valid signal names on your system.</p>

<dt><a name='Not'></a><a name="Not_a_CODE_reference"
>Not a CODE reference</a></dt>

<dd>
<p>(F) Perl was trying to evaluate a reference to a code value (that is, a subroutine), but found a reference to something else instead. You can use the ref() function to find out what kind of ref it really was. See also <a href="/~flora/perl-5.14.2/pod/perlref.pod" class="podlinkpod"
>perlref</a>.</p>

<dt><a name='Not'></a><a name="Not_a_format_reference"
>Not a format reference</a></dt>

<dd>
<p>(F) I&#39;m not sure how you managed to generate a reference to an anonymous format, but this indicates you did, and that it didn&#39;t exist.</p>

<dt><a name='Not'></a><a name="Not_a_GLOB_reference"
>Not a GLOB reference</a></dt>

<dd>
<p>(F) Perl was trying to evaluate a reference to a &#34;typeglob&#34; (that is, a symbol table entry that looks like <code>*foo</code>), but found a reference to something else instead. You can use the ref() function to find out what kind of ref it really was. See <a href="/~flora/perl-5.14.2/pod/perlref.pod" class="podlinkpod"
>perlref</a>.</p>

<dt><a name='Not'></a><a name="Not_a_HASH_reference"
>Not a HASH reference</a></dt>

<dd>
<p>(F) Perl was trying to evaluate a reference to a hash value, but found a reference to something else instead. You can use the ref() function to find out what kind of ref it really was. See <a href="/~flora/perl-5.14.2/pod/perlref.pod" class="podlinkpod"
>perlref</a>.</p>

<dt><a name='Not'></a><a name="Not_an_ARRAY_reference"
>Not an ARRAY reference</a></dt>

<dd>
<p>(F) Perl was trying to evaluate a reference to an array value, but found a reference to something else instead. You can use the ref() function to find out what kind of ref it really was. See <a href="/~flora/perl-5.14.2/pod/perlref.pod" class="podlinkpod"
>perlref</a>.</p>

<dt><a name='Not'></a><a name="Not_an_unblessed_ARRAY_reference"
>Not an unblessed ARRAY reference</a></dt>

<dd>
<p>(F) You passed a reference to a blessed array to <code>push</code>, <code>shift</code> or another array function. These only accept unblessed array references or arrays beginning explicitly with <code>@</code>.</p>

<dt><a name='Not'></a><a name="Not_a_SCALAR_reference"
>Not a SCALAR reference</a></dt>

<dd>
<p>(F) Perl was trying to evaluate a reference to a scalar value, but found a reference to something else instead. You can use the ref() function to find out what kind of ref it really was. See <a href="/~flora/perl-5.14.2/pod/perlref.pod" class="podlinkpod"
>perlref</a>.</p>

<dt><a name='Not'></a><a name="Not_a_subroutine_reference"
>Not a subroutine reference</a></dt>

<dd>
<p>(F) Perl was trying to evaluate a reference to a code value (that is, a subroutine), but found a reference to something else instead. You can use the ref() function to find out what kind of ref it really was. See also <a href="/~flora/perl-5.14.2/pod/perlref.pod" class="podlinkpod"
>perlref</a>.</p>

<dt><a name='Not'></a><a name="Not_a_subroutine_reference_in_overload_table"
>Not a subroutine reference in overload table</a></dt>

<dd>
<p>(F) An attempt was made to specify an entry in an overloading table that doesn&#39;t somehow point to a valid subroutine. See <a href="/~flora/perl-5.14.2/lib/overload.pm" class="podlinkpod"
>overload</a>.</p>

<dt><a name='Not'></a><a name="Not_enough_arguments_for_%s"
>Not enough arguments for %s</a></dt>

<dd>
<p>(F) The function requires more arguments than you specified.</p>

<dt><a name='Not'></a><a name="Not_enough_format_arguments"
>Not enough format arguments</a></dt>

<dd>
<p>(W syntax) A format specified more picture fields than the next line supplied. See <a href="/~flora/perl-5.14.2/pod/perlform.pod" class="podlinkpod"
>perlform</a>.</p>

<dt><a name='s'></a><a name="%s:_not_found"
>%s: not found</a></dt>

<dd>
<p>(A) You&#39;ve accidentally run your script through the Bourne shell instead of Perl. Check the #! line, or manually feed your script into Perl yourself.</p>

<dt><a name='no'></a><a name="no_UTC_offset_information;_assuming_local_time_is_UTC"
>no UTC offset information; assuming local time is UTC</a></dt>

<dd>
<p>(S) A warning peculiar to VMS. Perl was unable to find the local timezone offset, so it&#39;s assuming that local system time is equivalent to UTC. If it&#39;s not, define the logical name <em>SYS$TIMEZONE_DIFFERENTIAL</em> to translate to the number of seconds which need to be added to UTC to get local time.</p>

<dt><a name='Non'></a><a name="Non-octal_character_&#39;%c&#39;._Resolved_as_&#34;%s&#34;"
>Non-octal character &#39;%c&#39;. Resolved as &#34;%s&#34;</a></dt>

<dd>
<p>(W digit) In parsing an octal numeric constant, a character was unexpectedly encountered that isn&#39;t octal. The resulting value is as indicated.</p>

<dt><a name='Non'></a><a name="Non-string_passed_as_bitmask"
>Non-string passed as bitmask</a></dt>

<dd>
<p>(W misc) A number has been passed as a bitmask argument to select(). Use the vec() function to construct the file descriptor bitmasks for select. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#select" class="podlinkpod"
>&#34;select&#34; in perlfunc</a>.</p>

<dt><a name='Null'></a><a name="Null_filename_used"
>Null filename used</a></dt>

<dd>
<p>(F) You can&#39;t require the null filename, especially because on many machines that means the current directory! See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#require" class="podlinkpod"
>&#34;require&#34; in perlfunc</a>.</p>

<dt><a name='NULL'></a><a name="NULL_OP_IN_RUN"
>NULL OP IN RUN</a></dt>

<dd>
<p>(P debugging) Some internal routine called run() with a null opcode pointer.</p>

<dt><a name='Null'></a><a name="Null_picture_in_formline"
>Null picture in formline</a></dt>

<dd>
<p>(F) The first argument to formline must be a valid format picture specification. It was found to be empty, which probably means you supplied it an uninitialized value. See <a href="/~flora/perl-5.14.2/pod/perlform.pod" class="podlinkpod"
>perlform</a>.</p>

<dt><a name='Null'></a><a name="Null_realloc"
>Null realloc</a></dt>

<dd>
<p>(P) An attempt was made to realloc NULL.</p>

<dt><a name='NULL'></a><a name="NULL_regexp_argument"
>NULL regexp argument</a></dt>

<dd>
<p>(P) The internal pattern matching routines blew it big time.</p>

<dt><a name='NULL'></a><a name="NULL_regexp_parameter"
>NULL regexp parameter</a></dt>

<dd>
<p>(P) The internal pattern matching routines are out of their gourd.</p>

<dt><a name='Number'></a><a name="Number_too_long"
>Number too long</a></dt>

<dd>
<p>(F) Perl limits the representation of decimal numbers in programs to about 250 characters. You&#39;ve exceeded that length. Future versions of Perl are likely to eliminate this arbitrary limitation. In the meantime, try using scientific notation (e.g. &#34;1e6&#34; instead of &#34;1_000_000&#34;).</p>

<dt><a name='Number'></a><a name="Number_with_no_digits"
>Number with no digits</a></dt>

<dd>
<p>(F) Perl was looking for a number but found nothing that looked like a number. This happens, for example with <code>\o{}</code>, with no number between the braces.</p>

<dt><a name='Octal'></a><a name="Octal_number_in_vector_unsupported"
>Octal number in vector unsupported</a></dt>

<dd>
<p>(F) Numbers with a leading <code>0</code> are not currently allowed in vectors. The octal number interpretation of such numbers may be supported in a future version.</p>

<dt><a name='Octal'></a><a name="Octal_number_&#62;_037777777777_non-portable"
>Octal number &#62; 037777777777 non-portable</a></dt>

<dd>
<p>(W portable) The octal number you specified is larger than 2**32-1 (4294967295) and therefore non-portable between systems. See <a href="/~flora/perl-5.14.2/pod/perlport.pod" class="podlinkpod"
>perlport</a> for more on portability concerns.</p>

<dt><a name='Odd'></a><a name="Odd_number_of_arguments_for_overload::constant"
>Odd number of arguments for overload::constant</a></dt>

<dd>
<p>(W overload) The call to overload::constant contained an odd number of arguments. The arguments should come in pairs.</p>

<dt><a name='Odd'></a><a name="Odd_number_of_elements_in_anonymous_hash"
>Odd number of elements in anonymous hash</a></dt>

<dd>
<p>(W misc) You specified an odd number of elements to initialize a hash, which is odd, because hashes come in key/value pairs.</p>

<dt><a name='Odd'></a><a name="Odd_number_of_elements_in_hash_assignment"
>Odd number of elements in hash assignment</a></dt>

<dd>
<p>(W misc) You specified an odd number of elements to initialize a hash, which is odd, because hashes come in key/value pairs.</p>

<dt><a name='Offset'></a><a name="Offset_outside_string"
>Offset outside string</a></dt>

<dd>
<p>(F|W layer) You tried to do a read/write/send/recv/seek operation with an offset pointing outside the buffer. This is difficult to imagine. The sole exceptions to this are that zero padding will take place when going past the end of the string when either <code>sysread()</code>ing a file, or when seeking past the end of a scalar opened for I/O (in anticipation of future reads and to imitate the behaviour with real files).</p>

<dt><a name='s'></a><a name="%s()_on_unopened_%s"
>%s() on unopened %s</a></dt>

<dd>
<p>(W unopened) An I/O operation was attempted on a filehandle that was never initialized. You need to do an open(), a sysopen(), or a socket() call, or call a constructor from the FileHandle package.</p>

<dt><a name='s'></a><a name="-%s_on_unopened_filehandle_%s"
>-%s on unopened filehandle %s</a></dt>

<dd>
<p>(W unopened) You tried to invoke a file test operator on a filehandle that isn&#39;t open. Check your control flow. See also <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#-X" class="podlinkpod"
>&#34;-X&#34; in perlfunc</a>.</p>

<dt><a name='oops'></a><a name="oops:_oopsAV"
>oops: oopsAV</a></dt>

<dd>
<p>(S internal) An internal warning that the grammar is screwed up.</p>

<dt><a name='oops'></a><a name="oops:_oopsHV"
>oops: oopsHV</a></dt>

<dd>
<p>(S internal) An internal warning that the grammar is screwed up.</p>

<dt><a name='Opening'></a><a name="Opening_dirhandle_%s_also_as_a_file"
>Opening dirhandle %s also as a file</a></dt>

<dd>
<p>(W io, deprecated) You used open() to associate a filehandle to a symbol (glob or scalar) that already holds a dirhandle. Although legal, this idiom might render your code confusing and is deprecated.</p>

<dt><a name='Opening'></a><a name="Opening_filehandle_%s_also_as_a_directory"
>Opening filehandle %s also as a directory</a></dt>

<dd>
<p>(W io, deprecated) You used opendir() to associate a dirhandle to a symbol (glob or scalar) that already holds a filehandle. Although legal, this idiom might render your code confusing and is deprecated.</p>

<dt><a name='Operation'></a><a name="Operation_&#34;%s&#34;:_no_method_found,_%s"
>Operation &#34;%s&#34;: no method found, %s</a></dt>

<dd>
<p>(F) An attempt was made to perform an overloaded operation for which no handler was defined. While some handlers can be autogenerated in terms of other handlers, there is no default handler for any operation, unless the <code>fallback</code> overloading key is specified to be true. See <a href="/~flora/perl-5.14.2/lib/overload.pm" class="podlinkpod"
>overload</a>.</p>

<dt><a name='Operation'></a><a name="Operation_&#34;%s&#34;_returns_its_argument_for_non-Unicode_code_point_0x%X"
>Operation &#34;%s&#34; returns its argument for non-Unicode code point 0x%X</a></dt>

<dd>
<p>(W utf8, non_unicode) You performed an operation requiring Unicode semantics on a code point that is not in Unicode, so what it should do is not defined. Perl has chosen to have it do nothing, and warn you.</p>

<p>If the operation shown is &#34;ToFold&#34;, it means that case-insensitive matching in a regular expression was done on the code point.</p>

<p>If you know what you are doing you can turn off this warning by <code>no warnings &#39;non_unicode&#39;;</code>.</p>

<dt><a name='Operation'></a><a name="Operation_&#34;%s&#34;_returns_its_argument_for_UTF-16_surrogate_U+%X"
>Operation &#34;%s&#34; returns its argument for UTF-16 surrogate U+%X</a></dt>

<dd>
<p>(W utf8, surrogate) You performed an operation requiring Unicode semantics on a Unicode surrogate. Unicode frowns upon the use of surrogates for anything but storing strings in UTF-16, but semantics are (reluctantly) defined for the surrogates, and they are to do nothing for this operation. Because the use of surrogates can be dangerous, Perl warns.</p>

<p>If the operation shown is &#34;ToFold&#34;, it means that case-insensitive matching in a regular expression was done on the code point.</p>

<p>If you know what you are doing you can turn off this warning by <code>no warnings &#39;surrogate&#39;;</code>.</p>

<dt><a name='Operator'></a><a name="Operator_or_semicolon_missing_before_%s"
>Operator or semicolon missing before %s</a></dt>

<dd>
<p>(S ambiguous) You used a variable or subroutine call where the parser was expecting an operator. The parser has assumed you really meant to use an operator, but this is highly likely to be incorrect. For example, if you say &#34;*foo *foo&#34; it will be interpreted as if you said &#34;*foo * &#39;foo&#39;&#34;.</p>

<dt><a name='our'></a><a name="&#34;our&#34;_variable_%s_redeclared"
>&#34;our&#34; variable %s redeclared</a></dt>

<dd>
<p>(W misc) You seem to have already declared the same global once before in the current lexical scope.</p>

<dt><a name='Out'></a><a name="Out_of_memory!"
>Out of memory!</a></dt>

<dd>
<p>(X) The malloc() function returned 0, indicating there was insufficient remaining memory (or virtual memory) to satisfy the request. Perl has no option but to exit immediately.</p>

<p>At least in Unix you may be able to get past this by increasing your process datasize limits: in csh/tcsh use <code>limit</code> and <code>limit datasize n</code> (where <code>n</code> is the number of kilobytes) to check the current limits and change them, and in ksh/bash/zsh use <code>ulimit -a</code> and <code>ulimit -d n</code>, respectively.</p>

<dt><a name='Out'></a><a name="Out_of_memory_during_%s_extend"
>Out of memory during %s extend</a></dt>

<dd>
<p>(X) An attempt was made to extend an array, a list, or a string beyond the largest possible memory allocation.</p>

<dt><a name='Out'></a><a name="Out_of_memory_during_&#34;large&#34;_request_for_%s"
>Out of memory during &#34;large&#34; request for %s</a></dt>

<dd>
<p>(F) The malloc() function returned 0, indicating there was insufficient remaining memory (or virtual memory) to satisfy the request. However, the request was judged large enough (compile-time default is 64K), so a possibility to shut down by trapping this error is granted.</p>

<dt><a name='Out'></a><a name="Out_of_memory_during_request_for_%s"
>Out of memory during request for %s</a></dt>

<dd>
<p>(X|F) The malloc() function returned 0, indicating there was insufficient remaining memory (or virtual memory) to satisfy the request.</p>

<p>The request was judged to be small, so the possibility to trap it depends on the way perl was compiled. By default it is not trappable. However, if compiled for this, Perl may use the contents of <code>$^M</code> as an emergency pool after die()ing with this message. In this case the error is trappable <i>once</i>, and the error message will include the line and file where the failed request happened.</p>

<dt><a name='Out'></a><a name="Out_of_memory_during_ridiculously_large_request"
>Out of memory during ridiculously large request</a></dt>

<dd>
<p>(F) You can&#39;t allocate more than 2^31+&#34;small amount&#34; bytes. This error is most likely to be caused by a typo in the Perl program. e.g., <code>$arr[time]</code> instead of <code>$arr[$time]</code>.</p>

<dt><a name='Out'></a><a name="Out_of_memory_for_yacc_stack"
>Out of memory for yacc stack</a></dt>

<dd>
<p>(F) The yacc parser wanted to grow its stack so it could continue parsing, but realloc() wouldn&#39;t give it more memory, virtual or otherwise.</p>

<dt><a name='outside'></a><a name="&#39;.&#39;_outside_of_string_in_pack"
>&#39;.&#39; outside of string in pack</a></dt>

<dd>
<p>(F) The argument to a &#39;.&#39; in your template tried to move the working position to before the start of the packed string being built.</p>

<dt><a name='outside'></a><a name="&#39;@&#39;_outside_of_string_in_unpack"
>&#39;@&#39; outside of string in unpack</a></dt>

<dd>
<p>(F) You had a template that specified an absolute position outside the string being unpacked. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='outside'></a><a name="&#39;@&#39;_outside_of_string_with_malformed_UTF-8_in_unpack"
>&#39;@&#39; outside of string with malformed UTF-8 in unpack</a></dt>

<dd>
<p>(F) You had a template that specified an absolute position outside the string being unpacked. The string being unpacked was also invalid UTF-8. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Overloaded'></a><a name="Overloaded_dereference_did_not_return_a_reference"
>Overloaded dereference did not return a reference</a></dt>

<dd>
<p>(F) An object with an overloaded dereference operator was dereferenced, but the overloaded operation did not return a reference. See <a href="/~flora/perl-5.14.2/lib/overload.pm" class="podlinkpod"
>overload</a>.</p>

<dt><a name='Overloaded'></a><a name="Overloaded_qr_did_not_return_a_REGEXP"
>Overloaded qr did not return a REGEXP</a></dt>

<dd>
<p>(F) An object with a <code>qr</code> overload was used as part of a match, but the overloaded operation didn&#39;t return a compiled regexp. See <a href="/~flora/perl-5.14.2/lib/overload.pm" class="podlinkpod"
>overload</a>.</p>

<dt><a name='s'></a><a name="%s_package_attribute_may_clash_with_future_reserved_word:_%s"
>%s package attribute may clash with future reserved word: %s</a></dt>

<dd>
<p>(W reserved) A lowercase attribute name was used that had a package-specific handler. That name might have a meaning to Perl itself some day, even though it doesn&#39;t yet. Perhaps you should use a mixed-case attribute name, instead. See <a href="/~flora/perl-5.14.2/ext/attributes/attributes.pm" class="podlinkpod"
>attributes</a>.</p>

<dt><a name='pack'></a><a name="pack/unpack_repeat_count_overflow"
>pack/unpack repeat count overflow</a></dt>

<dd>
<p>(F) You can&#39;t specify a repeat count so large that it overflows your signed integers. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='page'></a><a name="page_overflow"
>page overflow</a></dt>

<dd>
<p>(W io) A single call to write() produced more lines than can fit on a page. See <a href="/~flora/perl-5.14.2/pod/perlform.pod" class="podlinkpod"
>perlform</a>.</p>

<dt><a name='panic'></a><a name="panic:_%s"
>panic: %s</a></dt>

<dd>
<p>(P) An internal error.</p>

<dt><a name='panic'></a><a name="panic:_attempt_to_call_%s_in_%s"
>panic: attempt to call %s in %s</a></dt>

<dd>
<p>(P) One of the file test operators entered a code branch that calls an ACL related-function, but that function is not available on this platform. Earlier checks mean that it should not be possible to enter this branch on this platform.</p>

<dt><a name='panic'></a><a name="panic:_ck_grep"
>panic: ck_grep</a></dt>

<dd>
<p>(P) Failed an internal consistency check trying to compile a grep.</p>

<dt><a name='panic'></a><a name="panic:_ck_split"
>panic: ck_split</a></dt>

<dd>
<p>(P) Failed an internal consistency check trying to compile a split.</p>

<dt><a name='panic'></a><a name="panic:_corrupt_saved_stack_index"
>panic: corrupt saved stack index</a></dt>

<dd>
<p>(P) The savestack was requested to restore more localized values than there are in the savestack.</p>

<dt><a name='panic'></a><a name="panic:_del_backref"
>panic: del_backref</a></dt>

<dd>
<p>(P) Failed an internal consistency check while trying to reset a weak reference.</p>

<dt><a name='panic'></a><a name="panic:_Devel::DProf_inconsistent_subroutine_return"
>panic: Devel::DProf inconsistent subroutine return</a></dt>

<dd>
<p>(P) Devel::DProf called a subroutine that exited using goto(LABEL), last(LABEL) or next(LABEL). Leaving that way a subroutine called from an XSUB will lead very probably to a crash of the interpreter. This is a bug that will hopefully one day get fixed.</p>

<dt><a name='panic'></a><a name="panic:_die_%s"
>panic: die %s</a></dt>

<dd>
<p>(P) We popped the context stack to an eval context, and then discovered it wasn&#39;t an eval context.</p>

<dt><a name='panic'></a><a name="panic:_do_subst"
>panic: do_subst</a></dt>

<dd>
<p>(P) The internal pp_subst() routine was called with invalid operational data.</p>

<dt><a name='panic'></a><a name="panic:_do_trans_%s"
>panic: do_trans_%s</a></dt>

<dd>
<p>(P) The internal do_trans routines were called with invalid operational data.</p>

<dt><a name='panic'></a><a name="panic:_fold_constants_JMPENV_PUSH_returned_%d"
>panic: fold_constants JMPENV_PUSH returned %d</a></dt>

<dd>
<p>(P) While attempting folding constants an exception other than an <code>eval</code> failure was caught.</p>

<dt><a name='panic'></a><a name="panic:_frexp"
>panic: frexp</a></dt>

<dd>
<p>(P) The library function frexp() failed, making printf(&#34;%f&#34;) impossible.</p>

<dt><a name='panic'></a><a name="panic:_goto"
>panic: goto</a></dt>

<dd>
<p>(P) We popped the context stack to a context with the specified label, and then discovered it wasn&#39;t a context we know how to do a goto in.</p>

<dt><a name='panic'></a><a name="panic:_gp_free_failed_to_free_glob_pointer"
>panic: gp_free failed to free glob pointer</a></dt>

<dd>
<p>(P) The internal routine used to clear a typeglob&#39;s entries tried repeatedly, but each time something re-created entries in the glob. Most likely the glob contains an object with a reference back to the glob and a destructor that adds a new object to the glob.</p>

<dt><a name='panic'></a><a name="panic:_hfreeentries_failed_to_free_hash"
>panic: hfreeentries failed to free hash</a></dt>

<dd>
<p>(P) The internal routine used to clear a hash&#39;s entries tried repeatedly, but each time something added more entries to the hash. Most likely the hash contains an object with a reference back to the hash and a destructor that adds a new object to the hash.</p>

<dt><a name='panic'></a><a name="panic:_INTERPCASEMOD"
>panic: INTERPCASEMOD</a></dt>

<dd>
<p>(P) The lexer got into a bad state at a case modifier.</p>

<dt><a name='panic'></a><a name="panic:_INTERPCONCAT"
>panic: INTERPCONCAT</a></dt>

<dd>
<p>(P) The lexer got into a bad state parsing a string with brackets.</p>

<dt><a name='panic'></a><a name="panic:_kid_popen_errno_read"
>panic: kid popen errno read</a></dt>

<dd>
<p>(F) forked child returned an incomprehensible message about its errno.</p>

<dt><a name='panic'></a><a name="panic:_last"
>panic: last</a></dt>

<dd>
<p>(P) We popped the context stack to a block context, and then discovered it wasn&#39;t a block context.</p>

<dt><a name='panic'></a><a name="panic:_leave_scope_clearsv"
>panic: leave_scope clearsv</a></dt>

<dd>
<p>(P) A writable lexical variable became read-only somehow within the scope.</p>

<dt><a name='panic'></a><a name="panic:_leave_scope_inconsistency"
>panic: leave_scope inconsistency</a></dt>

<dd>
<p>(P) The savestack probably got out of sync. At least, there was an invalid enum on the top of it.</p>

<dt><a name='panic'></a><a name="panic:_magic_killbackrefs"
>panic: magic_killbackrefs</a></dt>

<dd>
<p>(P) Failed an internal consistency check while trying to reset all weak references to an object.</p>

<dt><a name='panic'></a><a name="panic:_malloc"
>panic: malloc</a></dt>

<dd>
<p>(P) Something requested a negative number of bytes of malloc.</p>

<dt><a name='panic'></a><a name="panic:_memory_wrap"
>panic: memory wrap</a></dt>

<dd>
<p>(P) Something tried to allocate more memory than possible.</p>

<dt><a name='panic'></a><a name="panic:_pad_alloc"
>panic: pad_alloc</a></dt>

<dd>
<p>(P) The compiler got confused about which scratch pad it was allocating and freeing temporaries and lexicals from.</p>

<dt><a name='panic'></a><a name="panic:_pad_free_curpad"
>panic: pad_free curpad</a></dt>

<dd>
<p>(P) The compiler got confused about which scratch pad it was allocating and freeing temporaries and lexicals from.</p>

<dt><a name='panic'></a><a name="panic:_pad_free_po"
>panic: pad_free po</a></dt>

<dd>
<p>(P) An invalid scratch pad offset was detected internally.</p>

<dt><a name='panic'></a><a name="panic:_pad_reset_curpad"
>panic: pad_reset curpad</a></dt>

<dd>
<p>(P) The compiler got confused about which scratch pad it was allocating and freeing temporaries and lexicals from.</p>

<dt><a name='panic'></a><a name="panic:_pad_sv_po"
>panic: pad_sv po</a></dt>

<dd>
<p>(P) An invalid scratch pad offset was detected internally.</p>

<dt><a name='panic'></a><a name="panic:_pad_swipe_curpad"
>panic: pad_swipe curpad</a></dt>

<dd>
<p>(P) The compiler got confused about which scratch pad it was allocating and freeing temporaries and lexicals from.</p>

<dt><a name='panic'></a><a name="panic:_pad_swipe_po"
>panic: pad_swipe po</a></dt>

<dd>
<p>(P) An invalid scratch pad offset was detected internally.</p>

<dt><a name='panic'></a><a name="panic:_pp_iter"
>panic: pp_iter</a></dt>

<dd>
<p>(P) The foreach iterator got called in a non-loop context frame.</p>

<dt><a name='panic'></a><a name="panic:_pp_match%s"
>panic: pp_match%s</a></dt>

<dd>
<p>(P) The internal pp_match() routine was called with invalid operational data.</p>

<dt><a name='panic'></a><a name="panic:_pp_split"
>panic: pp_split</a></dt>

<dd>
<p>(P) Something terrible went wrong in setting up for the split.</p>

<dt><a name='panic'></a><a name="panic:_realloc"
>panic: realloc</a></dt>

<dd>
<p>(P) Something requested a negative number of bytes of realloc.</p>

<dt><a name='panic'></a><a name="panic:_restartop"
>panic: restartop</a></dt>

<dd>
<p>(P) Some internal routine requested a goto (or something like it), and didn&#39;t supply the destination.</p>

<dt><a name='panic'></a><a name="panic:_return"
>panic: return</a></dt>

<dd>
<p>(P) We popped the context stack to a subroutine or eval context, and then discovered it wasn&#39;t a subroutine or eval context.</p>

<dt><a name='panic'></a><a name="panic:_scan_num"
>panic: scan_num</a></dt>

<dd>
<p>(P) scan_num() got called on something that wasn&#39;t a number.</p>

<dt><a name='panic'></a><a name="panic:_sv_chop_%s"
>panic: sv_chop %s</a></dt>

<dd>
<p>(P) The sv_chop() routine was passed a position that is not within the scalar&#39;s string buffer.</p>

<dt><a name='panic'></a><a name="panic:_sv_insert"
>panic: sv_insert</a></dt>

<dd>
<p>(P) The sv_insert() routine was told to remove more string than there was string.</p>

<dt><a name='panic'></a><a name="panic:_top_env"
>panic: top_env</a></dt>

<dd>
<p>(P) The compiler attempted to do a goto, or something weird like that.</p>

<dt><a name='panic'></a><a name="panic:_unimplemented_op_%s_(#%d)_called"
>panic: unimplemented op %s (#%d) called</a></dt>

<dd>
<p>(P) The compiler is screwed up and attempted to use an op that isn&#39;t permitted at run time.</p>

<dt><a name='panic'></a><a name="panic:_utf16_to_utf8:_odd_bytelen"
>panic: utf16_to_utf8: odd bytelen</a></dt>

<dd>
<p>(P) Something tried to call utf16_to_utf8 with an odd (as opposed to even) byte length.</p>

<dt><a name='panic'></a><a name="panic:_utf16_to_utf8_reversed:_odd_bytelen"
>panic: utf16_to_utf8_reversed: odd bytelen</a></dt>

<dd>
<p>(P) Something tried to call utf16_to_utf8_reversed with an odd (as opposed to even) byte length.</p>

<dt><a name='panic'></a><a name="panic:_yylex"
>panic: yylex</a></dt>

<dd>
<p>(P) The lexer got into a bad state while processing a case modifier.</p>

<dt><a name='Parsing'></a><a name="Parsing_code_internal_error_(%s)"
>Parsing code internal error (%s)</a></dt>

<dd>
<p>(F) Parsing code supplied by an extension violated the parser&#39;s API in a detectable way.</p>

<dt><a name='Pattern'></a><a name="Pattern_subroutine_nesting_without_pos_change_exceeded_limit_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Pattern subroutine nesting without pos change exceeded limit in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You used a pattern that uses too many nested subpattern calls without consuming any text. Restructure the pattern so text is consumed before the nesting limit is exceeded.</p>

<p>The &#60;-- HERE shows in the regular expression about where the problem was discovered.</p>

<dt><a name='Parentheses'></a><a name="Parentheses_missing_around_&#34;%s&#34;_list"
>Parentheses missing around &#34;%s&#34; list</a></dt>

<dd>
<p>(W parenthesis) You said something like</p>

<pre class="sh_perl">    my $foo, $bar = @_;</pre>

<p>when you meant</p>

<pre class="sh_perl">    my ($foo, $bar) = @_;</pre>

<p>Remember that &#34;my&#34;, &#34;our&#34;, &#34;local&#34; and &#34;state&#34; bind tighter than comma.</p>

<dt><a name='p'></a><a name="-p_destination:_%s"
><code>-p</code> destination: %s</a></dt>

<dd>
<p>(F) An error occurred during the implicit output invoked by the <code>-p</code> command-line switch. (This output goes to STDOUT unless you&#39;ve redirected it with select().)</p>

<dt><a name='perhaps'></a><a name="(perhaps_you_forgot_to_load_&#34;%s&#34;?)"
>(perhaps you forgot to load &#34;%s&#34;?)</a></dt>

<dd>
<p>(F) This is an educated guess made in conjunction with the message &#34;Can&#39;t locate object method \&#34;%s\&#34; via package \&#34;%s\&#34;&#34;. It often means that a method requires a package that has not been loaded.</p>

<dt><a name='Perl'></a><a name="Perl_folding_rules_are_not_up-to-date_for_0x%x;_please_use_the_perlbug_utility_to_report"
>Perl folding rules are not up-to-date for 0x%x; please use the perlbug utility to report</a></dt>

<dd>
<p>(W regex, deprecated) You used a regular expression with case-insensitive matching, and there is a bug in Perl in which the built-in regular expression folding rules are not accurate. This may lead to incorrect results. Please report this as a bug using the &#34;perlbug&#34; utility. (This message is marked deprecated, so that it by default will be turned-on.)</p>

<dt><a name='Perl_my_'></a><a name="Perl_my_%s()_not_available"
>Perl_my_%s() not available</a></dt>

<dd>
<p>(F) Your platform has very uncommon byte-order and integer size, so it was not possible to set up some or all fixed-width byte-order conversion functions. This is only a problem when you&#39;re using the &#39;&#60;&#39; or &#39;&#62;&#39; modifiers in (un)pack templates. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Perl'></a><a name="Perl_%s_required--this_is_only_version_%s,_stopped"
>Perl %s required--this is only version %s, stopped</a></dt>

<dd>
<p>(F) The module in question uses features of a version of Perl more recent than the currently running version. How long has it been since you upgraded, anyway? See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#require" class="podlinkpod"
>&#34;require&#34; in perlfunc</a>.</p>

<dt><a name='PERL_SH_DIR'></a><a name="PERL_SH_DIR_too_long"
>PERL_SH_DIR too long</a></dt>

<dd>
<p>(F) An error peculiar to OS/2. PERL_SH_DIR is the directory to find the <code>sh</code>-shell in. See &#34;PERL_SH_DIR&#34; in <a href="/~flora/perl-5.14.2/README.os2" class="podlinkpod"
>perlos2</a>.</p>

<dt><a name='PERL_SIGNALS'></a><a name="PERL_SIGNALS_illegal:_&#34;%s&#34;"
>PERL_SIGNALS illegal: &#34;%s&#34;</a></dt>

<dd>
<p>See <a href="/~flora/perl-5.14.2/pod/perlrun.pod#PERL_SIGNALS" class="podlinkpod"
>&#34;PERL_SIGNALS&#34; in perlrun</a> for legal values.</p>

<dt><a name='perl'></a><a name="perl:_warning:_Setting_locale_failed."
>perl: warning: Setting locale failed.</a></dt>

<dd>
<p>(S) The whole warning message will look something like:</p>

<pre class="sh_perl">        perl: warning: Setting locale failed.
        perl: warning: Please check that your locale settings:
                LC_ALL = &#34;En_US&#34;,
                LANG = (unset)
            are supported and installed on your system.
        perl: warning: Falling back to the standard locale (&#34;C&#34;).</pre>

<p>Exactly what were the failed locale settings varies. In the above the settings were that the LC_ALL was &#34;En_US&#34; and the LANG had no value. This error means that Perl detected that you and/or your operating system supplier and/or system administrator have set up the so-called locale system but Perl could not use those settings. This was not dead serious, fortunately: there is a &#34;default locale&#34; called &#34;C&#34; that Perl can and will use, and the script will be run. Before you really fix the problem, however, you will get the same error message each time you run Perl. How to really fix the problem can be found in <a href="/~flora/perl-5.14.2/pod/perllocale.pod" class="podlinkpod"
>perllocale</a> section <b>LOCALE PROBLEMS</b>.</p>

<dt><a name='pid'></a><a name="pid_%x_not_a_child"
>pid %x not a child</a></dt>

<dd>
<p>(W exec) A warning peculiar to VMS. Waitpid() was asked to wait for a process which isn&#39;t a subprocess of the current process. While this is fine from VMS&#39; perspective, it&#39;s probably not what you intended.</p>

<dt><a name='P'></a><a name="&#39;P&#39;_must_have_an_explicit_size_in_unpack"
>&#39;P&#39; must have an explicit size in unpack</a></dt>

<dd>
<p>(F) The unpack format P must have an explicit size, not &#34;*&#34;.</p>

<dt><a name='POSIX'></a><a name="POSIX_class_[:%s:]_unknown_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>POSIX class [:%s:] unknown in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) The class in the character class [: :] syntax is unknown. The &#60;-- HERE shows in the regular expression about where the problem was discovered. Note that the POSIX character classes do <b>not</b> have the <code>is</code> prefix the corresponding C interfaces have: in other words, it&#39;s <code>[[:print:]]</code>, not <code>isprint</code>. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='POSIX'></a><a name="POSIX_getpgrp_can&#39;t_take_an_argument"
>POSIX getpgrp can&#39;t take an argument</a></dt>

<dd>
<p>(F) Your system has POSIX getpgrp(), which takes no argument, unlike the BSD version, which takes a pid.</p>

<dt><a name='POSIX'></a><a name="POSIX_syntax_[%s]_belongs_inside_character_classes_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>POSIX syntax [%s] belongs inside character classes in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(W regexp) The character class constructs [: :], [= =], and [. .] go <i>inside</i> character classes, the [] are part of the construct, for example: /[012[:alpha:]345]/. Note that [= =] and [. .] are not currently implemented; they are simply placeholders for future extensions and will cause fatal errors. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='POSIX'></a><a name="POSIX_syntax_[._.]_is_reserved_for_future_extensions_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>POSIX syntax [. .] is reserved for future extensions in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F regexp) Within regular expression character classes ([]) the syntax beginning with &#34;[.&#34; and ending with &#34;.]&#34; is reserved for future extensions. If you need to represent those character sequences inside a regular expression character class, just quote the square brackets with the backslash: &#34;\[.&#34; and &#34;.\]&#34;. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='POSIX'></a><a name="POSIX_syntax_[=_=]_is_reserved_for_future_extensions_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>POSIX syntax [= =] is reserved for future extensions in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) Within regular expression character classes ([]) the syntax beginning with &#34;[=&#34; and ending with &#34;=]&#34; is reserved for future extensions. If you need to represent those character sequences inside a regular expression character class, just quote the square brackets with the backslash: &#34;\[=&#34; and &#34;=\]&#34;. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Possible'></a><a name="Possible_attempt_to_put_comments_in_qw()_list"
>Possible attempt to put comments in qw() list</a></dt>

<dd>
<p>(W qw) qw() lists contain items separated by whitespace; as with literal strings, comment characters are not ignored, but are instead treated as literal data. (You may have used different delimiters than the parentheses shown here; braces are also frequently used.)</p>

<p>You probably wrote something like this:</p>

<pre class="sh_perl">    @list = qw(
        a # a comment
        b # another comment
    );</pre>

<p>when you should have written this:</p>

<pre class="sh_perl">    @list = qw(
        a
        b
    );</pre>

<p>If you really want comments, build your list the old-fashioned way, with quotes and commas:</p>

<pre class="sh_perl">    @list = (
        &#39;a&#39;,    # a comment
        &#39;b&#39;,    # another comment
    );</pre>

<dt><a name='Possible'></a><a name="Possible_attempt_to_separate_words_with_commas"
>Possible attempt to separate words with commas</a></dt>

<dd>
<p>(W qw) qw() lists contain items separated by whitespace; therefore commas aren&#39;t needed to separate the items. (You may have used different delimiters than the parentheses shown here; braces are also frequently used.)</p>

<p>You probably wrote something like this:</p>

<pre class="sh_perl">    qw! a, b, c !;</pre>

<p>which puts literal commas into some of the list items. Write it without commas if you don&#39;t want them to appear in your data:</p>

<pre class="sh_perl">    qw! a b c !;</pre>

<dt><a name='Possible'></a><a name="Possible_memory_corruption:_%s_overflowed_3rd_argument"
>Possible memory corruption: %s overflowed 3rd argument</a></dt>

<dd>
<p>(F) An ioctl() or fcntl() returned more than Perl was bargaining for. Perl guesses a reasonable buffer size, but puts a sentinel byte at the end of the buffer just in case. This sentinel byte got clobbered, and Perl assumes that memory is now corrupted. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#ioctl" class="podlinkpod"
>&#34;ioctl&#34; in perlfunc</a>.</p>

<dt><a name='Possible'></a><a name="Possible_precedence_problem_on_bitwise_%c_operator"
>Possible precedence problem on bitwise %c operator</a></dt>

<dd>
<p>(W precedence) Your program uses a bitwise logical operator in conjunction with a numeric comparison operator, like this :</p>

<pre class="sh_perl">    if ($x &#38; $y == 0) { ... }</pre>

<p>This expression is actually equivalent to <code>$x &#38; ($y == 0)</code>, due to the higher precedence of <code>==</code>. This is probably not what you want. (If you really meant to write this, disable the warning, or, better, put the parentheses explicitly and write <code>$x &#38; ($y == 0)</code>).</p>

<dt><a name='Possible'></a><a name="Possible_unintended_interpolation_of_$\_in_regex"
>Possible unintended interpolation of $\ in regex</a></dt>

<dd>
<p>(W ambiguous) You said something like <code>m/$\/</code> in a regex. The regex <code>m/foo$\s+bar/m</code> translates to: match the word &#39;foo&#39;, the output record separator (see <a href="/~flora/perl-5.14.2/pod/perlvar.pod#$\" class="podlinkpod"
>&#34;$\&#34; in perlvar</a>) and the letter &#39;s&#39; (one time or more) followed by the word &#39;bar&#39;.</p>

<p>If this is what you intended then you can silence the warning by using <code>m/${\}/</code> (for example: <code>m/foo${\}s+bar/</code>).</p>

<p>If instead you intended to match the word &#39;foo&#39; at the end of the line followed by whitespace and the word &#39;bar&#39; on the next line then you can use <code>m/$(?)\/</code> (for example: <code>m/foo$(?)\s+bar/</code>).</p>

<dt><a name='Possible'></a><a name="Possible_unintended_interpolation_of_%s_in_string"
>Possible unintended interpolation of %s in string</a></dt>

<dd>
<p>(W ambiguous) You said something like `@foo&#39; in a double-quoted string but there was no array <code>@foo</code> in scope at the time. If you wanted a literal @foo, then write it as \@foo; otherwise find out what happened to the array you apparently lost track of.</p>

<dt><a name='Precedence'></a><a name="Precedence_problem:_open_%s_should_be_open(%s)"
>Precedence problem: open %s should be open(%s)</a></dt>

<dd>
<p>(S precedence) The old irregular construct</p>

<pre class="sh_perl">    open FOO || die;</pre>

<p>is now misinterpreted as</p>

<pre class="sh_perl">    open(FOO || die);</pre>

<p>because of the strict regularization of Perl 5&#39;s grammar into unary and list operators. (The old open was a little of both.) You must put parentheses around the filehandle, or use the new &#34;or&#34; operator instead of &#34;||&#34;.</p>

<dt><a name='Premature'></a><a name="Premature_end_of_script_headers"
>Premature end of script headers</a></dt>

<dd>
<p>See Server error.</p>

<dt><a name='printf'></a><a name="printf()_on_closed_filehandle_%s"
>printf() on closed filehandle %s</a></dt>

<dd>
<p>(W closed) The filehandle you&#39;re writing to got itself closed sometime before now. Check your control flow.</p>

<dt><a name='print'></a><a name="print()_on_closed_filehandle_%s"
>print() on closed filehandle %s</a></dt>

<dd>
<p>(W closed) The filehandle you&#39;re printing on got itself closed sometime before now. Check your control flow.</p>

<dt><a name='Process'></a><a name="Process_terminated_by_SIG%s"
>Process terminated by SIG%s</a></dt>

<dd>
<p>(W) This is a standard message issued by OS/2 applications, while *nix applications die in silence. It is considered a feature of the OS/2 port. One can easily disable this by appropriate sighandlers, see <a href="/~flora/perl-5.14.2/pod/perlipc.pod#Signals" class="podlinkpod"
>&#34;Signals&#34; in perlipc</a>. See also &#34;Process terminated by SIGTERM/SIGINT&#34; in <a href="/~flora/perl-5.14.2/README.os2" class="podlinkpod"
>perlos2</a>.</p>

<dt><a name='Prototype'></a><a name="Prototype_after_&#39;%c&#39;_for_%s_:_%s"
>Prototype after &#39;%c&#39; for %s : %s</a></dt>

<dd>
<p>(W illegalproto) A character follows % or @ in a prototype. This is useless, since % and @ gobble the rest of the subroutine arguments.</p>

<dt><a name='Prototype'></a><a name="Prototype_mismatch:_%s_vs_%s"
>Prototype mismatch: %s vs %s</a></dt>

<dd>
<p>(S prototype) The subroutine being declared or defined had previously been declared or defined with a different function prototype.</p>

<dt><a name='Prototype'></a><a name="Prototype_not_terminated"
>Prototype not terminated</a></dt>

<dd>
<p>(F) You&#39;ve omitted the closing parenthesis in a function prototype definition.</p>

<dt><a name='p'></a><a name="\p{}_uses_Unicode_rules,_not_locale_rules"
>\p{} uses Unicode rules, not locale rules</a></dt>

<dd>
<p>(W) You compiled a regular expression that contained a Unicode property match (<code>\p</code> or <code>\P</code>), but the regular expression is also being told to use the run-time locale, not Unicode. Instead, use a POSIX character class, which should know about the locale&#39;s rules. (See <a href="/~flora/perl-5.14.2/pod/perlrecharclass.pod#POSIX_Character_Classes" class="podlinkpod"
>&#34;POSIX Character Classes&#34; in perlrecharclass</a>.)</p>

<p>Even if the run-time locale is ISO 8859-1 (Latin1), which is a subset of Unicode, some properties will give results that are not valid for that subset.</p>

<p>Here are a couple of examples to help you see what&#39;s going on. If the locale is ISO 8859-7, the character at code point 0xD7 is the &#34;GREEK CAPITAL LETTER CHI&#34;. But in Unicode that code point means the &#34;MULTIPLICATION SIGN&#34; instead, and <code>\p</code> always uses the Unicode meaning. That means that <code>\p{Alpha}</code> won&#39;t match, but <code>[[:alpha:]]</code> should. Only in the Latin1 locale are all the characters in the same positions as they are in Unicode. But, even here, some properties give incorrect results. An example is <code>\p{Changes_When_Uppercased}</code> which is true for &#34;LATIN SMALL LETTER Y WITH DIAERESIS&#34;, but since the upper case of that character is not in Latin1, in that locale it doesn&#39;t change when upper cased.</p>

<dt><a name='Quantifier'></a><a name="Quantifier_follows_nothing_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Quantifier follows nothing in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You started a regular expression with a quantifier. Backslash it if you meant it literally. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Quantifier'></a><a name="Quantifier_in_{,}_bigger_than_%d_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Quantifier in {,} bigger than %d in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) There is currently a limit to the size of the min and max values of the {min,max} construct. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Quantifier'></a><a name="Quantifier_unexpected_on_zero-length_expression;_marked_by_&#60;--_HERE_in_m/%s/"
>Quantifier unexpected on zero-length expression; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(W regexp) You applied a regular expression quantifier in a place where it makes no sense, such as on a zero-width assertion. Try putting the quantifier inside the assertion instead. For example, the way to match &#34;abc&#34; provided that it is followed by three repetitions of &#34;xyz&#34; is <code>/abc(?=(?:xyz){3})/</code>, not <code>/abc(?=xyz){3}/</code>.</p>

<p>The &#60;-- HERE shows in the regular expression about where the problem was discovered.</p>

<dt><a name='Range'></a><a name="Range_iterator_outside_integer_range"
>Range iterator outside integer range</a></dt>

<dd>
<p>(F) One (or both) of the numeric arguments to the range operator &#34;..&#34; are outside the range which can be represented by integers internally. One possible workaround is to force Perl to use magical string increment by prepending &#34;0&#34; to your numbers.</p>

<dt><a name='readdir'></a><a name="readdir()_attempted_on_invalid_dirhandle_%s"
>readdir() attempted on invalid dirhandle %s</a></dt>

<dd>
<p>(W io) The dirhandle you&#39;re reading from is either closed or not really a dirhandle. Check your control flow.</p>

<dt><a name='readline'></a><a name="readline()_on_closed_filehandle_%s"
>readline() on closed filehandle %s</a></dt>

<dd>
<p>(W closed) The filehandle you&#39;re reading from got itself closed sometime before now. Check your control flow.</p>

<dt><a name='read'></a><a name="read()_on_closed_filehandle_%s"
>read() on closed filehandle %s</a></dt>

<dd>
<p>(W closed) You tried to read from a closed filehandle.</p>

<dt><a name='read'></a><a name="read()_on_unopened_filehandle_%s"
>read() on unopened filehandle %s</a></dt>

<dd>
<p>(W unopened) You tried to read from a filehandle that was never opened.</p>

<dt><a name='Reallocation'></a><a name="Reallocation_too_large:_%x"
>Reallocation too large: %x</a></dt>

<dd>
<p>(F) You can&#39;t allocate more than 64K on an MS-DOS machine.</p>

<dt><a name='realloc'></a><a name="realloc()_of_freed_memory_ignored"
>realloc() of freed memory ignored</a></dt>

<dd>
<p>(S malloc) An internal routine called realloc() on something that had already been freed.</p>

<dt><a name='Recompile'></a><a name="Recompile_perl_with_-DDEBUGGING_to_use_-D_switch"
>Recompile perl with <b>-D</b>DEBUGGING to use <b>-D</b> switch</a></dt>

<dd>
<p>(F debugging) You can&#39;t use the <b>-D</b> option unless the code to produce the desired output is compiled into Perl, which entails some overhead, which is why it&#39;s currently left out of your copy.</p>

<dt><a name='Recursive'></a><a name="Recursive_inheritance_detected_in_package_&#39;%s&#39;"
>Recursive inheritance detected in package &#39;%s&#39;</a></dt>

<dd>
<p>(F) While calculating the method resolution order (MRO) of a package, Perl believes it found an infinite loop in the <code>@ISA</code> hierarchy. This is a crude check that bails out after 100 levels of <code>@ISA</code> depth.</p>

<dt><a name='refcnt_dec'></a><a name="refcnt_dec:_fd_%d%s"
>refcnt_dec: fd %d%s</a></dt>

<dd>
<dt><a name='refcnt'></a><a name="refcnt:_fd_%d%s"
>refcnt: fd %d%s</a></dt>

<dd>
<dt><a name='refcnt_inc'></a><a name="refcnt_inc:_fd_%d%s"
>refcnt_inc: fd %d%s</a></dt>

<dd>
<p>(P) Perl&#39;s I/O implementation failed an internal consistency check. If you see this message, something is very wrong.</p>

<dt><a name='Reference'></a><a name="Reference_found_where_even-sized_list_expected"
>Reference found where even-sized list expected</a></dt>

<dd>
<p>(W misc) You gave a single reference where Perl was expecting a list with an even number of elements (for assignment to a hash). This usually means that you used the anon hash constructor when you meant to use parens. In any case, a hash requires key/value <b>pairs</b>.</p>

<pre class="sh_perl">    %hash = { one =&#62; 1, two =&#62; 2, };    # WRONG
    %hash = [ qw/ an anon array / ];    # WRONG
    %hash = ( one =&#62; 1, two =&#62; 2, );    # right
    %hash = qw( one 1 two 2 );                  # also fine</pre>

<dt><a name='Reference'></a><a name="Reference_is_already_weak"
>Reference is already weak</a></dt>

<dd>
<p>(W misc) You have attempted to weaken a reference that is already weak. Doing so has no effect.</p>

<dt><a name='Reference'></a><a name="Reference_miscount_in_sv_replace()"
>Reference miscount in sv_replace()</a></dt>

<dd>
<p>(W internal) The internal sv_replace() function was handed a new SV with a reference count other than 1.</p>

<dt><a name='Reference'></a><a name="Reference_to_invalid_group_0"
>Reference to invalid group 0</a></dt>

<dd>
<p>(F) You used <code>\g0</code> or similar in a regular expression. You may refer to capturing parentheses only with strictly positive integers (normal backreferences) or with strictly negative integers (relative backreferences). Using 0 does not make sense.</p>

<dt><a name='Reference'></a><a name="Reference_to_nonexistent_group_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Reference to nonexistent group in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You used something like <code>\7</code> in your regular expression, but there are not at least seven sets of capturing parentheses in the expression. If you wanted to have the character with ordinal 7 inserted into the regular expression, prepend zeroes to make it three digits long: <code>\007</code></p>

<p>The &#60;-- HERE shows in the regular expression about where the problem was discovered.</p>

<dt><a name='Reference'></a><a name="Reference_to_nonexistent_named_group_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Reference to nonexistent named group in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You used something like <code>\k&#39;NAME&#39;</code> or <code>\k&#60;NAME&#62;</code> in your regular expression, but there is no corresponding named capturing parentheses such as <code>(?&#39;NAME&#39;...)</code> or <code>(?&#60;NAME&#62;...)</code>. Check if the name has been spelled correctly both in the backreference and the declaration.</p>

<p>The &#60;-- HERE shows in the regular expression about where the problem was discovered.</p>

<dt><a name='Reference'></a><a name="Reference_to_nonexistent_or_unclosed_group_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Reference to nonexistent or unclosed group in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You used something like <code>\g{-7}</code> in your regular expression, but there are not at least seven sets of closed capturing parentheses in the expression before where the <code>\g{-7}</code> was located.</p>

<p>The &#60;-- HERE shows in the regular expression about where the problem was discovered.</p>

<dt><a name='regexp'></a><a name="regexp_memory_corruption"
>regexp memory corruption</a></dt>

<dd>
<p>(P) The regular expression engine got confused by what the regular expression compiler gave it.</p>

<dt><a name='Regexp'></a><a name="Regexp_modifier_&#34;/%c&#34;_may_appear_a_maximum_of_twice"
>Regexp modifier &#34;/%c&#34; may appear a maximum of twice</a></dt>

<dd>
<dt><a name='Regexp'></a><a name="Regexp_modifier_&#34;/%c&#34;_may_not_appear_twice"
>Regexp modifier &#34;/%c&#34; may not appear twice</a></dt>

<dd>
<p>(F syntax, regexp) The regular expression pattern had too many occurrences of the specified modifier. Remove the extraneous ones.</p>

<dt><a name='Regexp'></a><a name="Regexp_modifier_&#34;%c&#34;_may_not_appear_after_the_&#34;-&#34;"
>Regexp modifier &#34;%c&#34; may not appear after the &#34;-&#34;</a></dt>

<dd>
<p>(F regexp) Turning off the given modifier has the side effect of turning on another one. Perl currently doesn&#39;t allow this. Reword the regular expression to use the modifier you want to turn on (and place it before the minus), instead of the one you want to turn off.</p>

<dt><a name='Regexp'></a><a name="Regexp_modifiers_&#34;/%c&#34;_and_&#34;/%c&#34;_are_mutually_exclusive"
>Regexp modifiers &#34;/%c&#34; and &#34;/%c&#34; are mutually exclusive</a></dt>

<dd>
<p>(F syntax, regexp) The regular expression pattern had more than one of these mutually exclusive modifiers. Retain only the modifier that is supposed to be there.</p>

<dt><a name='Regexp'></a><a name="Regexp_out_of_space"
>Regexp out of space</a></dt>

<dd>
<p>(P) A &#34;can&#39;t happen&#34; error, because safemalloc() should have caught it earlier.</p>

<dt><a name='Repeated'></a><a name="Repeated_format_line_will_never_terminate_(~~_and_@#_incompatible)"
>Repeated format line will never terminate (~~ and @# incompatible)</a></dt>

<dd>
<p>(F) Your format contains the ~~ repeat-until-blank sequence and a numeric field that will never go blank so that the repetition never terminates. You might use ^# instead. See <a href="/~flora/perl-5.14.2/pod/perlform.pod" class="podlinkpod"
>perlform</a>.</p>

<dt><a name='Replacement'></a><a name="Replacement_list_is_longer_than_search_list"
>Replacement list is longer than search list</a></dt>

<dd>
<p>(W misc) You have used a replacement list that is longer than the search list. So the additional elements in the replacement list are meaningless.</p>

<dt><a name='Reversed'></a><a name="Reversed_%s=_operator"
>Reversed %s= operator</a></dt>

<dd>
<p>(W syntax) You wrote your assignment operator backwards. The = must always come last, to avoid ambiguity with subsequent unary operators.</p>

<dt><a name='rewinddir'></a><a name="rewinddir()_attempted_on_invalid_dirhandle_%s"
>rewinddir() attempted on invalid dirhandle %s</a></dt>

<dd>
<p>(W io) The dirhandle you tried to do a rewinddir() on is either closed or not really a dirhandle. Check your control flow.</p>

<dt><a name='Scalars'></a><a name="Scalars_leaked:_%d"
>Scalars leaked: %d</a></dt>

<dd>
<p>(P) Something went wrong in Perl&#39;s internal bookkeeping of scalars: not all scalar variables were deallocated by the time Perl exited. What this usually indicates is a memory leak, which is of course bad, especially if the Perl program is intended to be long-running.</p>

<dt><a name='Scalar'></a><a name="Scalar_value_@%s[%s]_better_written_as_$%s[%s]"
>Scalar value @%s[%s] better written as $%s[%s]</a></dt>

<dd>
<p>(W syntax) You&#39;ve used an array slice (indicated by @) to select a single element of an array. Generally it&#39;s better to ask for a scalar value (indicated by $). The difference is that <code>$foo[&#38;bar]</code> always behaves like a scalar, both when assigning to it and when evaluating its argument, while <code>@foo[&#38;bar]</code> behaves like a list when you assign to it, and provides a list context to its subscript, which can do weird things if you&#39;re expecting only one subscript.</p>

<p>On the other hand, if you were actually hoping to treat the array element as a list, you need to look into how references work, because Perl will not magically convert between scalars and lists for you. See <a href="/~flora/perl-5.14.2/pod/perlref.pod" class="podlinkpod"
>perlref</a>.</p>

<dt><a name='Scalar'></a><a name="Scalar_value_@%s{%s}_better_written_as_$%s{%s}"
>Scalar value @%s{%s} better written as $%s{%s}</a></dt>

<dd>
<p>(W syntax) You&#39;ve used a hash slice (indicated by @) to select a single element of a hash. Generally it&#39;s better to ask for a scalar value (indicated by $). The difference is that <code>$foo{&#38;bar}</code> always behaves like a scalar, both when assigning to it and when evaluating its argument, while <code>@foo{&#38;bar}</code> behaves like a list when you assign to it, and provides a list context to its subscript, which can do weird things if you&#39;re expecting only one subscript.</p>

<p>On the other hand, if you were actually hoping to treat the hash element as a list, you need to look into how references work, because Perl will not magically convert between scalars and lists for you. See <a href="/~flora/perl-5.14.2/pod/perlref.pod" class="podlinkpod"
>perlref</a>.</p>

<dt><a name='Search'></a><a name="Search_pattern_not_terminated"
>Search pattern not terminated</a></dt>

<dd>
<p>(F) The lexer couldn&#39;t find the final delimiter of a // or m{} construct. Remember that bracketing delimiters count nesting level. Missing the leading <code>$</code> from a variable <code>$m</code> may cause this error.</p>

<p>Note that since Perl 5.9.0 a // can also be the <i>defined-or</i> construct, not just the empty search pattern. Therefore code written in Perl 5.9.0 or later that uses the // as the <i>defined-or</i> can be misparsed by pre-5.9.0 Perls as a non-terminated search pattern.</p>

<dt><a name='Search'></a><a name="Search_pattern_not_terminated_or_ternary_operator_parsed_as_search_pattern"
>Search pattern not terminated or ternary operator parsed as search pattern</a></dt>

<dd>
<p>(F) The lexer couldn&#39;t find the final delimiter of a <code>?PATTERN?</code> construct.</p>

<p>The question mark is also used as part of the ternary operator (as in <code>foo ? 0 : 1</code>) leading to some ambiguous constructions being wrongly parsed. One way to disambiguate the parsing is to put parentheses around the conditional expression, i.e. <code>(foo) ? 0 : 1</code>.</p>

<dt><a name='seekdir'></a><a name="seekdir()_attempted_on_invalid_dirhandle_%s"
>seekdir() attempted on invalid dirhandle %s</a></dt>

<dd>
<p>(W io) The dirhandle you are doing a seekdir() on is either closed or not really a dirhandle. Check your control flow.</p>

<dt><a name='sseek'></a><a name="%sseek()_on_unopened_filehandle"
>%sseek() on unopened filehandle</a></dt>

<dd>
<p>(W unopened) You tried to use the seek() or sysseek() function on a filehandle that was either never opened or has since been closed.</p>

<dt><a name='select'></a><a name="select_not_implemented"
>select not implemented</a></dt>

<dd>
<p>(F) This machine doesn&#39;t implement the select() system call.</p>

<dt><a name='Self'></a><a name="Self-ties_of_arrays_and_hashes_are_not_supported"
>Self-ties of arrays and hashes are not supported</a></dt>

<dd>
<p>(F) Self-ties are of arrays and hashes are not supported in the current implementation.</p>

<dt><a name='Semicolon'></a><a name="Semicolon_seems_to_be_missing"
>Semicolon seems to be missing</a></dt>

<dd>
<p>(W semicolon) A nearby syntax error was probably caused by a missing semicolon, or possibly some other missing operator, such as a comma.</p>

<dt><a name='semi'></a><a name="semi-panic:_attempt_to_dup_freed_string"
>semi-panic: attempt to dup freed string</a></dt>

<dd>
<p>(S internal) The internal newSVsv() routine was called to duplicate a scalar that had previously been marked as free.</p>

<dt><a name='sem'></a><a name="sem%s_not_implemented"
>sem%s not implemented</a></dt>

<dd>
<p>(F) You don&#39;t have System V semaphore IPC on your system.</p>

<dt><a name='send'></a><a name="send()_on_closed_socket_%s"
>send() on closed socket %s</a></dt>

<dd>
<p>(W closed) The socket you&#39;re sending to got itself closed sometime before now. Check your control flow.</p>

<dt><a name='Sequence'></a><a name="Sequence_(?_incomplete_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Sequence (? incomplete in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) A regular expression ended with an incomplete extension (?. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Sequence'></a><a name="Sequence_(?%s...)_not_implemented_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Sequence (?%s...) not implemented in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) A proposed regular expression extension has the character reserved but has not yet been written. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Sequence'></a><a name="Sequence_(?%s...)_not_recognized_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Sequence (?%s...) not recognized in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You used a regular expression extension that doesn&#39;t make sense. The &#60;-- HERE shows in the regular expression about where the problem was discovered. This happens when using the <code>(?^...)</code> construct to tell Perl to use the default regular expression modifiers, and you redundantly specify a default modifier. For other causes, see <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Sequence'></a><a name="Sequence_\%s..._not_terminated_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Sequence \%s... not terminated in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) The regular expression expects a mandatory argument following the escape sequence and this has been omitted or incorrectly written.</p>

<dt><a name='Sequence'></a><a name="Sequence_(?#..._not_terminated_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Sequence (?#... not terminated in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) A regular expression comment must be terminated by a closing parenthesis. Embedded parentheses aren&#39;t allowed. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Sequence'></a><a name="Sequence_(?{...})_not_terminated_or_not_{}-balanced_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Sequence (?{...}) not terminated or not {}-balanced in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) If the contents of a (?{...}) clause contain braces, they must balance for Perl to detect the end of the clause properly. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='500'></a><a name="500_Server_error"
>500 Server error</a></dt>

<dd>
<p>See Server error.</p>

<dt><a name='Server'></a><a name="Server_error"
>Server error</a></dt>

<dd>
<p>(A) This is the error message generally seen in a browser window when trying to run a CGI program (including SSI) over the web. The actual error text varies widely from server to server. The most frequently-seen variants are &#34;500 Server error&#34;, &#34;Method (something) not permitted&#34;, &#34;Document contains no data&#34;, &#34;Premature end of script headers&#34;, and &#34;Did not produce a valid header&#34;.</p>

<p><b>This is a CGI error, not a Perl error</b>.</p>

<p>You need to make sure your script is executable, is accessible by the user CGI is running the script under (which is probably not the user account you tested it under), does not rely on any environment variables (like PATH) from the user it isn&#39;t running under, and isn&#39;t in a location where the CGI server can&#39;t find it, basically, more or less. Please see the following for more information:</p>

<pre class="sh_perl">        <a href="http://www.perl.org/CGI_MetaFAQ.html" class="podlinkurl"
>http://www.perl.org/CGI_MetaFAQ.html</a>
        <a href="http://www.htmlhelp.org/faq/cgifaq.html" class="podlinkurl"
>http://www.htmlhelp.org/faq/cgifaq.html</a>
        <a href="http://www.w3.org/Security/Faq/" class="podlinkurl"
>http://www.w3.org/Security/Faq/</a></pre>

<p>You should also look at <a href="/~flora/perl-5.14.2/pod/perlfaq9.pod" class="podlinkpod"
>perlfaq9</a>.</p>

<dt><a name='setegid'></a><a name="setegid()_not_implemented"
>setegid() not implemented</a></dt>

<dd>
<p>(F) You tried to assign to <code>$)</code>, and your operating system doesn&#39;t support the setegid() system call (or equivalent), or at least Configure didn&#39;t think so.</p>

<dt><a name='seteuid'></a><a name="seteuid()_not_implemented"
>seteuid() not implemented</a></dt>

<dd>
<p>(F) You tried to assign to <code>$&#62;</code>, and your operating system doesn&#39;t support the seteuid() system call (or equivalent), or at least Configure didn&#39;t think so.</p>

<dt><a name='setpgrp'></a><a name="setpgrp_can&#39;t_take_arguments"
>setpgrp can&#39;t take arguments</a></dt>

<dd>
<p>(F) Your system has the setpgrp() from BSD 4.2, which takes no arguments, unlike POSIX setpgid(), which takes a process ID and process group ID.</p>

<dt><a name='setrgid'></a><a name="setrgid()_not_implemented"
>setrgid() not implemented</a></dt>

<dd>
<p>(F) You tried to assign to <code>$(</code>, and your operating system doesn&#39;t support the setrgid() system call (or equivalent), or at least Configure didn&#39;t think so.</p>

<dt><a name='setruid'></a><a name="setruid()_not_implemented"
>setruid() not implemented</a></dt>

<dd>
<p>(F) You tried to assign to <code>$&#60;</code>, and your operating system doesn&#39;t support the setruid() system call (or equivalent), or at least Configure didn&#39;t think so.</p>

<dt><a name='setsockopt'></a><a name="setsockopt()_on_closed_socket_%s"
>setsockopt() on closed socket %s</a></dt>

<dd>
<p>(W closed) You tried to set a socket option on a closed socket. Did you forget to check the return value of your socket() call? See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#setsockopt" class="podlinkpod"
>&#34;setsockopt&#34; in perlfunc</a>.</p>

<dt><a name='shm'></a><a name="shm%s_not_implemented"
>shm%s not implemented</a></dt>

<dd>
<p>(F) You don&#39;t have System V shared memory IPC on your system.</p>

<dt><a name='should'></a><a name="!=~_should_be_!~"
>!=~ should be !~</a></dt>

<dd>
<p>(W syntax) The non-matching operator is !~, not !=~. !=~ will be interpreted as the != (numeric not equal) and ~ (1&#39;s complement) operators: probably not what you intended.</p>

<dt><a name='should'></a><a name="&#60;&#62;_should_be_quotes"
>&#60;&#62; should be quotes</a></dt>

<dd>
<p>(F) You wrote <code>require &#60;file&#62;</code> when you should have written <code>require &#39;file&#39;</code>.</p>

<dt><a name='s'></a><a name="/%s/_should_probably_be_written_as_&#34;%s&#34;"
>/%s/ should probably be written as &#34;%s&#34;</a></dt>

<dd>
<p>(W syntax) You have used a pattern where Perl expected to find a string, as in the first argument to <code>join</code>. Perl will treat the true or false result of matching the pattern against $_ as the string, which is probably not what you had in mind.</p>

<dt><a name='shutdown'></a><a name="shutdown()_on_closed_socket_%s"
>shutdown() on closed socket %s</a></dt>

<dd>
<p>(W closed) You tried to do a shutdown on a closed socket. Seems a bit superfluous.</p>

<dt><a name='SIG'></a><a name="SIG%s_handler_&#34;%s&#34;_not_defined"
>SIG%s handler &#34;%s&#34; not defined</a></dt>

<dd>
<p>(W signal) The signal handler named in %SIG doesn&#39;t, in fact, exist. Perhaps you put it into the wrong package?</p>

<dt><a name='Smart'></a><a name="Smart_matching_a_non-overloaded_object_breaks_encapsulation"
>Smart matching a non-overloaded object breaks encapsulation</a></dt>

<dd>
<p>(F) You should not use the <code>~~</code> operator on an object that does not overload it: Perl refuses to use the object&#39;s underlying structure for the smart match.</p>

<dt><a name='sort'></a><a name="sort_is_now_a_reserved_word"
>sort is now a reserved word</a></dt>

<dd>
<p>(F) An ancient error message that almost nobody ever runs into anymore. But before sort was a keyword, people sometimes used it as a filehandle.</p>

<dt><a name='Sort'></a><a name="Sort_subroutine_didn&#39;t_return_single_value"
>Sort subroutine didn&#39;t return single value</a></dt>

<dd>
<p>(F) A sort comparison subroutine may not return a list value with more or less than one element. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#sort" class="podlinkpod"
>&#34;sort&#34; in perlfunc</a>.</p>

<dt><a name='splice'></a><a name="splice()_offset_past_end_of_array"
>splice() offset past end of array</a></dt>

<dd>
<p>(W misc) You attempted to specify an offset that was past the end of the array passed to splice(). Splicing will instead commence at the end of the array, rather than past it. If this isn&#39;t what you want, try explicitly pre-extending the array by assigning $#array = $offset. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#splice" class="podlinkpod"
>&#34;splice&#34; in perlfunc</a>.</p>

<dt><a name='Split'></a><a name="Split_loop"
>Split loop</a></dt>

<dd>
<p>(P) The split was looping infinitely. (Obviously, a split shouldn&#39;t iterate more times than there are characters of input, which is what happened.) See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#split" class="podlinkpod"
>&#34;split&#34; in perlfunc</a>.</p>

<dt><a name='Statement'></a><a name="Statement_unlikely_to_be_reached"
>Statement unlikely to be reached</a></dt>

<dd>
<p>(W exec) You did an exec() with some statement after it other than a die(). This is almost always an error, because exec() never returns unless there was a failure. You probably wanted to use system() instead, which does return. To suppress this warning, put the exec() in a block by itself.</p>

<dt><a name='state'></a><a name="&#34;state&#34;_variable_%s_can&#39;t_be_in_a_package"
>&#34;state&#34; variable %s can&#39;t be in a package</a></dt>

<dd>
<p>(F) Lexically scoped variables aren&#39;t in a package, so it doesn&#39;t make sense to try to declare one with a package qualifier on the front. Use local() if you want to localize a package variable.</p>

<dt><a name='stat'></a><a name="stat()_on_unopened_filehandle_%s"
>stat() on unopened filehandle %s</a></dt>

<dd>
<p>(W unopened) You tried to use the stat() function on a filehandle that was either never opened or has since been closed.</p>

<dt><a name='Stub'></a><a name="Stub_found_while_resolving_method_&#34;%s&#34;_overloading_&#34;%s&#34;_in_package_&#34;%s&#34;"
>Stub found while resolving method &#34;%s&#34; overloading &#34;%s&#34; in package &#34;%s&#34;</a></dt>

<dd>
<p>(P) Overloading resolution over @ISA tree may be broken by importation stubs. Stubs should never be implicitly created, but explicit calls to <code>can</code> may break this.</p>

<dt><a name='Subroutine'></a><a name="Subroutine_%s_redefined"
>Subroutine %s redefined</a></dt>

<dd>
<p>(W redefine) You redefined a subroutine. To suppress this warning, say</p>

<pre class="sh_perl">    {
        no warnings &#39;redefine&#39;;
        eval &#34;sub name { ... }&#34;;
    }</pre>

<dt><a name='Substitution'></a><a name="Substitution_loop"
>Substitution loop</a></dt>

<dd>
<p>(P) The substitution was looping infinitely. (Obviously, a substitution shouldn&#39;t iterate more times than there are characters of input, which is what happened.) See the discussion of substitution in <a href="/~flora/perl-5.14.2/pod/perlop.pod#Regexp_Quote-Like_Operators" class="podlinkpod"
>&#34;Regexp Quote-Like Operators&#34; in perlop</a>.</p>

<dt><a name='Substitution'></a><a name="Substitution_pattern_not_terminated"
>Substitution pattern not terminated</a></dt>

<dd>
<p>(F) The lexer couldn&#39;t find the interior delimiter of an s/// or s{}{} construct. Remember that bracketing delimiters count nesting level. Missing the leading <code>$</code> from variable <code>$s</code> may cause this error.</p>

<dt><a name='Substitution'></a><a name="Substitution_replacement_not_terminated"
>Substitution replacement not terminated</a></dt>

<dd>
<p>(F) The lexer couldn&#39;t find the final delimiter of an s/// or s{}{} construct. Remember that bracketing delimiters count nesting level. Missing the leading <code>$</code> from variable <code>$s</code> may cause this error.</p>

<dt><a name='substr'></a><a name="substr_outside_of_string"
>substr outside of string</a></dt>

<dd>
<p>(W substr),(F) You tried to reference a substr() that pointed outside of a string. That is, the absolute value of the offset was larger than the length of the string. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#substr" class="podlinkpod"
>&#34;substr&#34; in perlfunc</a>. This warning is fatal if substr is used in an lvalue context (as the left hand side of an assignment or as a subroutine argument for example).</p>

<dt><a name='sv_upgrade'></a><a name="sv_upgrade_from_type_%d_down_to_type_%d"
>sv_upgrade from type %d down to type %d</a></dt>

<dd>
<p>(P) Perl tried to force the upgrade of an SV to a type which was actually inferior to its current type.</p>

<dt><a name='Switch'></a><a name="Switch_(?(condition)..._contains_too_many_branches_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Switch (?(condition)... contains too many branches in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) A (?(condition)if-clause|else-clause) construct can have at most two branches (the if-clause and the else-clause). If you want one or both to contain alternation, such as using <code>this|that|other</code>, enclose it in clustering parentheses:</p>

<pre class="sh_perl">    (?(condition)(?:this|that|other)|else-clause)</pre>

<p>The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Switch'></a><a name="Switch_condition_not_recognized_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Switch condition not recognized in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) If the argument to the (?(...)if-clause|else-clause) construct is a number, it can be only a number. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='switching'></a><a name="switching_effective_%s_is_not_implemented"
>switching effective %s is not implemented</a></dt>

<dd>
<p>(F) While under the <code>use filetest</code> pragma, we cannot switch the real and effective uids or gids.</p>

<dt><a name='s'></a><a name="%s_syntax_OK"
>%s syntax OK</a></dt>

<dd>
<p>(F) The final summary message when a <code>perl -c</code> succeeds.</p>

<dt><a name='syntax'></a><a name="syntax_error"
>syntax error</a></dt>

<dd>
<p>(F) Probably means you had a syntax error. Common reasons include:</p>

<pre class="sh_perl">    A keyword is misspelled.
    A semicolon is missing.
    A comma is missing.
    An opening or closing parenthesis is missing.
    An opening or closing brace is missing.
    A closing quote is missing.</pre>

<p>Often there will be another error message associated with the syntax error giving more information. (Sometimes it helps to turn on <b>-w</b>.) The error message itself often tells you where it was in the line when it decided to give up. Sometimes the actual error is several tokens before this, because Perl is good at understanding random input. Occasionally the line number may be misleading, and once in a blue moon the only way to figure out what&#39;s triggering the error is to call <code>perl -c</code> repeatedly, chopping away half the program each time to see if the error went away. Sort of the cybernetic version of 20&#160;questions.</p>

<dt><a name='syntax'></a><a name="syntax_error_at_line_%d:_`%s&#39;_unexpected"
>syntax error at line %d: `%s&#39; unexpected</a></dt>

<dd>
<p>(A) You&#39;ve accidentally run your script through the Bourne shell instead of Perl. Check the #! line, or manually feed your script into Perl yourself.</p>

<dt><a name='syntax'></a><a name="syntax_error_in_file_%s_at_line_%d,_next_2_tokens_&#34;%s&#34;"
>syntax error in file %s at line %d, next 2 tokens &#34;%s&#34;</a></dt>

<dd>
<p>(F) This error is likely to occur if you run a perl5 script through a perl4 interpreter, especially if the next 2 tokens are &#34;use strict&#34; or &#34;my $var&#34; or &#34;our $var&#34;.</p>

<dt><a name='sysread'></a><a name="sysread()_on_closed_filehandle_%s"
>sysread() on closed filehandle %s</a></dt>

<dd>
<p>(W closed) You tried to read from a closed filehandle.</p>

<dt><a name='sysread'></a><a name="sysread()_on_unopened_filehandle_%s"
>sysread() on unopened filehandle %s</a></dt>

<dd>
<p>(W unopened) You tried to read from a filehandle that was never opened.</p>

<dt><a name='System'></a><a name="System_V_%s_is_not_implemented_on_this_machine"
>System V %s is not implemented on this machine</a></dt>

<dd>
<p>(F) You tried to do something with a function beginning with &#34;sem&#34;, &#34;shm&#34;, or &#34;msg&#34; but that System V IPC is not implemented in your machine. In some machines the functionality can exist but be unconfigured. Consult your system support.</p>

<dt><a name='syswrite'></a><a name="syswrite()_on_closed_filehandle_%s"
>syswrite() on closed filehandle %s</a></dt>

<dd>
<p>(W closed) The filehandle you&#39;re writing to got itself closed sometime before now. Check your control flow.</p>

<dt><a name='T'></a><a name="-T_and_-B_not_implemented_on_filehandles"
><code>-T</code> and <code>-B</code> not implemented on filehandles</a></dt>

<dd>
<p>(F) Perl can&#39;t peek at the stdio buffer of filehandles when it doesn&#39;t know about your kind of stdio. You&#39;ll have to use a filename instead.</p>

<dt><a name='Target'></a><a name="Target_of_goto_is_too_deeply_nested"
>Target of goto is too deeply nested</a></dt>

<dd>
<p>(F) You tried to use <code>goto</code> to reach a label that was too deeply nested for Perl to reach. Perl is doing you a favor by refusing.</p>

<dt><a name='telldir'></a><a name="telldir()_attempted_on_invalid_dirhandle_%s"
>telldir() attempted on invalid dirhandle %s</a></dt>

<dd>
<p>(W io) The dirhandle you tried to telldir() is either closed or not really a dirhandle. Check your control flow.</p>

<dt><a name='tell'></a><a name="tell()_on_unopened_filehandle"
>tell() on unopened filehandle</a></dt>

<dd>
<p>(W unopened) You tried to use the tell() function on a filehandle that was either never opened or has since been closed.</p>

<dt><a name='That'></a><a name="That_use_of_$[_is_unsupported"
>That use of $[ is unsupported</a></dt>

<dd>
<p>(F) Assignment to <code>$[</code> is now strictly circumscribed, and interpreted as a compiler directive. You may say only one of</p>

<pre class="sh_perl">    $[ = 0;
    $[ = 1;
    ...
    local $[ = 0;
    local $[ = 1;
    ...</pre>

<p>This is to prevent the problem of one module changing the array base out from under another module inadvertently. See <a href="/~flora/perl-5.14.2/pod/perlvar.pod#$[" class="podlinkpod"
>&#34;$[&#34; in perlvar</a>.</p>

<dt><a name='The'></a><a name="The_crypt()_function_is_unimplemented_due_to_excessive_paranoia"
>The crypt() function is unimplemented due to excessive paranoia</a></dt>

<dd>
<p>(F) Configure couldn&#39;t find the crypt() function on your machine, probably because your vendor didn&#39;t supply it, probably because they think the U.S. Government thinks it&#39;s a secret, or at least that they will continue to pretend that it is. And if you quote me on that, I will deny it.</p>

<dt><a name='The'></a><a name="The_%s_function_is_unimplemented"
>The %s function is unimplemented</a></dt>

<dd>
<p>(F) The function indicated isn&#39;t implemented on this architecture, according to the probings of Configure.</p>

<dt><a name='The'></a><a name="The_stat_preceding_%s_wasn&#39;t_an_lstat"
>The stat preceding %s wasn&#39;t an lstat</a></dt>

<dd>
<p>(F) It makes no sense to test the current stat buffer for symbolic linkhood if the last stat that wrote to the stat buffer already went past the symlink to get to the real file. Use an actual filename instead.</p>

<dt><a name='The'></a><a name="The_&#39;unique&#39;_attribute_may_only_be_applied_to_&#39;our&#39;_variables"
>The &#39;unique&#39; attribute may only be applied to &#39;our&#39; variables</a></dt>

<dd>
<p>(F) This attribute was never supported on <code>my</code> or <code>sub</code> declarations.</p>

<dt><a name='This'></a><a name="This_Perl_can&#39;t_reset_CRTL_environ_elements_(%s)"
>This Perl can&#39;t reset CRTL environ elements (%s)</a></dt>

<dd>
<dt><a name='This'></a><a name="This_Perl_can&#39;t_set_CRTL_environ_elements_(%s=%s)"
>This Perl can&#39;t set CRTL environ elements (%s=%s)</a></dt>

<dd>
<p>(W internal) Warnings peculiar to VMS. You tried to change or delete an element of the CRTL&#39;s internal environ array, but your copy of Perl wasn&#39;t built with a CRTL that contained the setenv() function. You&#39;ll need to rebuild Perl with a CRTL that does, or redefine <em>PERL_ENV_TABLES</em> (see <a href="/~flora/perl-5.14.2/pod/perlvms.pod" class="podlinkpod"
>perlvms</a>) so that the environ array isn&#39;t the target of the change to %ENV which produced the warning.</p>

<dt><a name='thread'></a><a name="thread_failed_to_start:_%s"
>thread failed to start: %s</a></dt>

<dd>
<p>(W threads)(S) The entry point function of threads-&#62;create() failed for some reason.</p>

<dt><a name='times'></a><a name="times_not_implemented"
>times not implemented</a></dt>

<dd>
<p>(F) Your version of the C library apparently doesn&#39;t do times(). I suspect you&#39;re not running on Unix.</p>

<dt><a name='T'></a><a name="&#34;-T&#34;_is_on_the_#!_line,_it_must_also_be_used_on_the_command_line"
>&#34;-T&#34; is on the #! line, it must also be used on the command line</a></dt>

<dd>
<p>(X) The #! line (or local equivalent) in a Perl script contains the <b>-T</b> option (or the <b>-t</b> option), but Perl was not invoked with <b>-T</b> in its command line. This is an error because, by the time Perl discovers a <b>-T</b> in a script, it&#39;s too late to properly taint everything from the environment. So Perl gives up.</p>

<p>If the Perl script is being executed as a command using the #! mechanism (or its local equivalent), this error can usually be fixed by editing the #! line so that the <b>-%c</b> option is a part of Perl&#39;s first argument: e.g. change <code>perl -n -%c</code> to <code>perl -%c -n</code>.</p>

<p>If the Perl script is being executed as <code>perl scriptname</code>, then the <b>-%c</b> option must appear on the command line: <code>perl -%c scriptname</code>.</p>

<dt><a name='To'></a><a name="To%s:_illegal_mapping_&#39;%s&#39;"
>To%s: illegal mapping &#39;%s&#39;</a></dt>

<dd>
<p>(F) You tried to define a customized To-mapping for lc(), lcfirst, uc(), or ucfirst() (or their string-inlined versions), but you specified an illegal mapping. See <a href="/~flora/perl-5.14.2/pod/perlunicode.pod#User-Defined_Character_Properties" class="podlinkpod"
>&#34;User-Defined Character Properties&#34; in perlunicode</a>.</p>

<dt><a name='Too'></a><a name="Too_deeply_nested_()-groups"
>Too deeply nested ()-groups</a></dt>

<dd>
<p>(F) Your template contains ()-groups with a ridiculously deep nesting level.</p>

<dt><a name='Too'></a><a name="Too_few_args_to_syscall"
>Too few args to syscall</a></dt>

<dd>
<p>(F) There has to be at least one argument to syscall() to specify the system call to call, silly dilly.</p>

<dt><a name='Too'></a><a name="Too_late_for_&#34;-%s&#34;_option"
>Too late for &#34;-%s&#34; option</a></dt>

<dd>
<p>(X) The #! line (or local equivalent) in a Perl script contains the <b>-M</b>, <b>-m</b> or <b>-C</b> option.</p>

<p>In the case of <b>-M</b> and <b>-m</b>, this is an error because those options are not intended for use inside scripts. Use the <code>use</code> pragma instead.</p>

<p>The <b>-C</b> option only works if it is specified on the command line as well (with the same sequence of letters or numbers following). Either specify this option on the command line, or, if your system supports it, make your script executable and run it directly instead of passing it to perl.</p>

<dt><a name='Too'></a><a name="Too_late_to_run_%s_block"
>Too late to run %s block</a></dt>

<dd>
<p>(W void) A CHECK or INIT block is being defined during run time proper, when the opportunity to run them has already passed. Perhaps you are loading a file with <code>require</code> or <code>do</code> when you should be using <code>use</code> instead. Or perhaps you should put the <code>require</code> or <code>do</code> inside a BEGIN block.</p>

<dt><a name='Too'></a><a name="Too_many_args_to_syscall"
>Too many args to syscall</a></dt>

<dd>
<p>(F) Perl supports a maximum of only 14 args to syscall().</p>

<dt><a name='Too'></a><a name="Too_many_arguments_for_%s"
>Too many arguments for %s</a></dt>

<dd>
<p>(F) The function requires fewer arguments than you specified.</p>

<dt><a name='Too'></a><a name="Too_many_)&#39;s"
>Too many )&#39;s</a></dt>

<dd>
<p>(A) You&#39;ve accidentally run your script through <b>csh</b> instead of Perl. Check the #! line, or manually feed your script into Perl yourself.</p>

<dt><a name='Too'></a><a name="Too_many_(&#39;s"
>Too many (&#39;s</a></dt>

<dd>
<p>(A) You&#39;ve accidentally run your script through <b>csh</b> instead of Perl. Check the #! line, or manually feed your script into Perl yourself.</p>

<dt><a name='Trailing'></a><a name="Trailing_\_in_regex_m/%s/"
>Trailing \ in regex m/%s/</a></dt>

<dd>
<p>(F) The regular expression ends with an unbackslashed backslash. Backslash it. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Transliteration'></a><a name="Transliteration_pattern_not_terminated"
>Transliteration pattern not terminated</a></dt>

<dd>
<p>(F) The lexer couldn&#39;t find the interior delimiter of a tr/// or tr[][] or y/// or y[][] construct. Missing the leading <code>$</code> from variables <code>$tr</code> or <code>$y</code> may cause this error.</p>

<dt><a name='Transliteration'></a><a name="Transliteration_replacement_not_terminated"
>Transliteration replacement not terminated</a></dt>

<dd>
<p>(F) The lexer couldn&#39;t find the final delimiter of a tr///, tr[][], y/// or y[][] construct.</p>

<dt><a name='s'></a><a name="&#39;%s&#39;_trapped_by_operation_mask"
>&#39;%s&#39; trapped by operation mask</a></dt>

<dd>
<p>(F) You tried to use an operator from a Safe compartment in which it&#39;s disallowed. See <a href="/perldoc?Safe" class="podlinkpod"
>Safe</a>.</p>

<dt><a name='truncate'></a><a name="truncate_not_implemented"
>truncate not implemented</a></dt>

<dd>
<p>(F) Your machine doesn&#39;t implement a file truncation mechanism that Configure knows about.</p>

<dt><a name='Type'></a><a name="Type_of_arg_%d_to_%s_must_be_%s_(not_%s)"
>Type of arg %d to %s must be %s (not %s)</a></dt>

<dd>
<p>(F) This function requires the argument in that position to be of a certain type. Arrays must be @NAME or <code>@{EXPR}</code>. Hashes must be %NAME or <code>%{EXPR}</code>. No implicit dereferencing is allowed--use the {EXPR} forms as an explicit dereference. See <a href="/~flora/perl-5.14.2/pod/perlref.pod" class="podlinkpod"
>perlref</a>.</p>

<dt><a name='Type'></a><a name="Type_of_argument_to_%s_must_be_unblessed_hashref_or_arrayref"
>Type of argument to %s must be unblessed hashref or arrayref</a></dt>

<dd>
<p>(F) You called <code>keys</code>, <code>values</code> or <code>each</code> with a scalar argument that was not a reference to an unblessed hash or array.</p>

<dt><a name='umask'></a><a name="umask_not_implemented"
>umask not implemented</a></dt>

<dd>
<p>(F) Your machine doesn&#39;t implement the umask function and you tried to use it to restrict permissions for yourself (EXPR &#38; 0700).</p>

<dt><a name='Unable'></a><a name="Unable_to_create_sub_named_&#34;%s&#34;"
>Unable to create sub named &#34;%s&#34;</a></dt>

<dd>
<p>(F) You attempted to create or access a subroutine with an illegal name.</p>

<dt><a name='Unbalanced'></a><a name="Unbalanced_context:_%d_more_PUSHes_than_POPs"
>Unbalanced context: %d more PUSHes than POPs</a></dt>

<dd>
<p>(W internal) The exit code detected an internal inconsistency in how many execution contexts were entered and left.</p>

<dt><a name='Unbalanced'></a><a name="Unbalanced_saves:_%d_more_saves_than_restores"
>Unbalanced saves: %d more saves than restores</a></dt>

<dd>
<p>(W internal) The exit code detected an internal inconsistency in how many values were temporarily localized.</p>

<dt><a name='Unbalanced'></a><a name="Unbalanced_scopes:_%d_more_ENTERs_than_LEAVEs"
>Unbalanced scopes: %d more ENTERs than LEAVEs</a></dt>

<dd>
<p>(W internal) The exit code detected an internal inconsistency in how many blocks were entered and left.</p>

<dt><a name='Unbalanced'></a><a name="Unbalanced_tmps:_%d_more_allocs_than_frees"
>Unbalanced tmps: %d more allocs than frees</a></dt>

<dd>
<p>(W internal) The exit code detected an internal inconsistency in how many mortal scalars were allocated and freed.</p>

<dt><a name='Undefined'></a><a name="Undefined_format_&#34;%s&#34;_called"
>Undefined format &#34;%s&#34; called</a></dt>

<dd>
<p>(F) The format indicated doesn&#39;t seem to exist. Perhaps it&#39;s really in another package? See <a href="/~flora/perl-5.14.2/pod/perlform.pod" class="podlinkpod"
>perlform</a>.</p>

<dt><a name='Undefined'></a><a name="Undefined_sort_subroutine_&#34;%s&#34;_called"
>Undefined sort subroutine &#34;%s&#34; called</a></dt>

<dd>
<p>(F) The sort comparison routine specified doesn&#39;t seem to exist. Perhaps it&#39;s in a different package? See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#sort" class="podlinkpod"
>&#34;sort&#34; in perlfunc</a>.</p>

<dt><a name='Undefined'></a><a name="Undefined_subroutine_&#38;%s_called"
>Undefined subroutine &#38;%s called</a></dt>

<dd>
<p>(F) The subroutine indicated hasn&#39;t been defined, or if it was, it has since been undefined.</p>

<dt><a name='Undefined'></a><a name="Undefined_subroutine_called"
>Undefined subroutine called</a></dt>

<dd>
<p>(F) The anonymous subroutine you&#39;re trying to call hasn&#39;t been defined, or if it was, it has since been undefined.</p>

<dt><a name='Undefined'></a><a name="Undefined_subroutine_in_sort"
>Undefined subroutine in sort</a></dt>

<dd>
<p>(F) The sort comparison routine specified is declared but doesn&#39;t seem to have been defined yet. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#sort" class="podlinkpod"
>&#34;sort&#34; in perlfunc</a>.</p>

<dt><a name='Undefined'></a><a name="Undefined_top_format_&#34;%s&#34;_called"
>Undefined top format &#34;%s&#34; called</a></dt>

<dd>
<p>(F) The format indicated doesn&#39;t seem to exist. Perhaps it&#39;s really in another package? See <a href="/~flora/perl-5.14.2/pod/perlform.pod" class="podlinkpod"
>perlform</a>.</p>

<dt><a name='Undefined'></a><a name="Undefined_value_assigned_to_typeglob"
>Undefined value assigned to typeglob</a></dt>

<dd>
<p>(W misc) An undefined value was assigned to a typeglob, a la <code>*foo = undef</code>. This does nothing. It&#39;s possible that you really mean <code>undef *foo</code>.</p>

<dt><a name='s'></a><a name="%s:_Undefined_variable"
>%s: Undefined variable</a></dt>

<dd>
<p>(A) You&#39;ve accidentally run your script through <b>csh</b> instead of Perl. Check the #! line, or manually feed your script into Perl yourself.</p>

<dt><a name='unexec'></a><a name="unexec_of_%s_into_%s_failed!"
>unexec of %s into %s failed!</a></dt>

<dd>
<p>(F) The unexec() routine failed for some reason. See your local FSF representative, who probably put it there in the first place.</p>

<dt><a name='Unicode'></a><a name="Unicode_non-character_U+%X_is_illegal_for_open_interchange"
>Unicode non-character U+%X is illegal for open interchange</a></dt>

<dd>
<p>(W utf8, nonchar) Certain codepoints, such as U+FFFE and U+FFFF, are defined by the Unicode standard to be non-characters. Those are legal codepoints, but are reserved for internal use; so, applications shouldn&#39;t attempt to exchange them. If you know what you are doing you can turn off this warning by <code>no warnings &#39;nonchar&#39;;</code>.</p>

<dt><a name='Unicode'></a><a name="Unicode_surrogate_U+%X_is_illegal_in_UTF-8"
>Unicode surrogate U+%X is illegal in UTF-8</a></dt>

<dd>
<p>(W utf8, surrogate) You had a UTF-16 surrogate in a context where they are not considered acceptable. These code points, between U+D800 and U+DFFF (inclusive), are used by Unicode only for UTF-16. However, Perl internally allows all unsigned integer code points (up to the size limit available on your platform), including surrogates. But these can cause problems when being input or output, which is likely where this message came from. If you really really know what you are doing you can turn off this warning by <code>no warnings &#39;surrogate&#39;;</code>.</p>

<dt><a name='Unknown'></a><a name="Unknown_BYTEORDER"
>Unknown BYTEORDER</a></dt>

<dd>
<p>(F) There are no byte-swapping functions for a machine with this byte order.</p>

<dt><a name='Unknown'></a><a name="Unknown_open()_mode_&#39;%s&#39;"
>Unknown open() mode &#39;%s&#39;</a></dt>

<dd>
<p>(F) The second argument of 3-argument open() is not among the list of valid modes: <code>&#60;</code>, <code>&#62;</code>, <code>&#62;&#62;</code>, <code>+&#60;</code>, <code>+&#62;</code>, <code>+&#62;&#62;</code>, <code>-|</code>, <code>|-</code>, <code>&#60;&#38;</code>, <code>&#62;&#38;</code>.</p>

<dt><a name='Unknown'></a><a name="Unknown_PerlIO_layer_&#34;%s&#34;"
>Unknown PerlIO layer &#34;%s&#34;</a></dt>

<dd>
<p>(W layer) An attempt was made to push an unknown layer onto the Perl I/O system. (Layers take care of transforming data between external and internal representations.) Note that some layers, such as <code>mmap</code>, are not supported in all environments. If your program didn&#39;t explicitly request the failing operation, it may be the result of the value of the environment variable PERLIO.</p>

<dt><a name='Unknown'></a><a name="Unknown_process_%x_sent_message_to_prime_env_iter:_%s"
>Unknown process %x sent message to prime_env_iter: %s</a></dt>

<dd>
<p>(P) An error peculiar to VMS. Perl was reading values for %ENV before iterating over it, and someone else stuck a message in the stream of data Perl expected. Someone&#39;s very confused, or perhaps trying to subvert Perl&#39;s population of %ENV for nefarious purposes.</p>

<dt><a name='Unknown'></a><a name="Unknown_&#34;re&#34;_subpragma_&#39;%s&#39;_(known_ones_are:_%s)"
>Unknown &#34;re&#34; subpragma &#39;%s&#39; (known ones are: %s)</a></dt>

<dd>
<p>(W) You tried to use an unknown subpragma of the &#34;re&#34; pragma.</p>

<dt><a name='Unknown'></a><a name="Unknown_switch_condition_(?(%s_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Unknown switch condition (?(%s in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) The condition part of a (?(condition)if-clause|else-clause) construct is not known. The condition must be one of the following:</p>

<pre class="sh_perl">  (1) (2) ...        true if 1st, 2nd, etc., capture matched
  (&#60;NAME&#62;) (&#39;NAME&#39;)  true if named capture matched
  (?=...) (?&#60;=...)   true if subpattern matches
  (?!...) (?&#60;!...)   true if subpattern fails to match
  (?{ CODE })        true if code returns a true value
  (R)                true if evaluating inside recursion
  (R1) (R2) ...      true if directly inside capture group 1, 2, etc.
  (R&#38;NAME)           true if directly inside named capture
  (DEFINE)           always false; for defining named subpatterns</pre>

<p>The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Unknown'></a><a name="Unknown_Unicode_option_letter_&#39;%c&#39;"
>Unknown Unicode option letter &#39;%c&#39;</a></dt>

<dd>
<p>(F) You specified an unknown Unicode option. See <a href="/~flora/perl-5.14.2/pod/perlrun.pod" class="podlinkpod"
>perlrun</a> documentation of the <code>-C</code> switch for the list of known options.</p>

<dt><a name='Unknown'></a><a name="Unknown_Unicode_option_value_%x"
>Unknown Unicode option value %x</a></dt>

<dd>
<p>(F) You specified an unknown Unicode option. See <a href="/~flora/perl-5.14.2/pod/perlrun.pod" class="podlinkpod"
>perlrun</a> documentation of the <code>-C</code> switch for the list of known options.</p>

<dt><a name='Unknown'></a><a name="Unknown_verb_pattern_&#39;%s&#39;_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Unknown verb pattern &#39;%s&#39; in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You either made a typo or have incorrectly put a <code>*</code> quantifier after an open brace in your pattern. Check the pattern and review <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a> for details on legal verb patterns.</p>

<dt><a name='Unknown'></a><a name="Unknown_warnings_category_&#39;%s&#39;"
>Unknown warnings category &#39;%s&#39;</a></dt>

<dd>
<p>(F) An error issued by the <code>warnings</code> pragma. You specified a warnings category that is unknown to perl at this point.</p>

<p>Note that if you want to enable a warnings category registered by a module (e.g. <code>use warnings &#39;File::Find&#39;</code>), you must have loaded this module first.</p>

<dt><a name='unmatched'></a><a name="unmatched_[_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>unmatched [ in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) The brackets around a character class must match. If you wish to include a closing bracket in a character class, backslash it or put it first. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='unmatched'></a><a name="unmatched_(_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>unmatched ( in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) Unbackslashed parentheses must always be balanced in regular expressions. If you&#39;re a vi user, the % key is valuable for finding the matching parenthesis. The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Unmatched'></a><a name="Unmatched_right_%s_bracket"
>Unmatched right %s bracket</a></dt>

<dd>
<p>(F) The lexer counted more closing curly or square brackets than opening ones, so you&#39;re probably missing a matching opening bracket. As a general rule, you&#39;ll find the missing one (so to speak) near the place you were last editing.</p>

<dt><a name='Unquoted'></a><a name="Unquoted_string_&#34;%s&#34;_may_clash_with_future_reserved_word"
>Unquoted string &#34;%s&#34; may clash with future reserved word</a></dt>

<dd>
<p>(W reserved) You used a bareword that might someday be claimed as a reserved word. It&#39;s best to put such a word in quotes, or capitalize it somehow, or insert an underbar into it. You might also declare it as a subroutine.</p>

<dt><a name='Unrecognized'></a><a name="Unrecognized_character_%s;_marked_by_&#60;--_HERE_after_%s_near_column_%d"
>Unrecognized character %s; marked by &#60;-- HERE after %s near column %d</a></dt>

<dd>
<p>(F) The Perl parser has no idea what to do with the specified character in your Perl script (or eval) near the specified column. Perhaps you tried to run a compressed script, a binary program, or a directory as a Perl program.</p>

<dt><a name='Unrecognized'></a><a name="Unrecognized_escape_\%c_in_character_class_passed_through_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Unrecognized escape \%c in character class passed through in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(W regexp) You used a backslash-character combination which is not recognized by Perl inside character classes. The character was understood literally, but this may change in a future version of Perl. The &#60;-- HERE shows in the regular expression about where the escape was discovered.</p>

<dt><a name='Unrecognized'></a><a name="Unrecognized_escape_\%c_passed_through"
>Unrecognized escape \%c passed through</a></dt>

<dd>
<p>(W misc) You used a backslash-character combination which is not recognized by Perl. The character was understood literally, but this may change in a future version of Perl.</p>

<dt><a name='Unrecognized'></a><a name="Unrecognized_escape_\%s_passed_through_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Unrecognized escape \%s passed through in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(W regexp) You used a backslash-character combination which is not recognized by Perl. The character(s) were understood literally, but this may change in a future version of Perl. The &#60;-- HERE shows in the regular expression about where the escape was discovered.</p>

<dt><a name='Unrecognized'></a><a name="Unrecognized_signal_name_&#34;%s&#34;"
>Unrecognized signal name &#34;%s&#34;</a></dt>

<dd>
<p>(F) You specified a signal name to the kill() function that was not recognized. Say <code>kill -l</code> in your shell to see the valid signal names on your system.</p>

<dt><a name='Unrecognized'></a><a name="Unrecognized_switch:_-%s_(-h_will_show_valid_options)"
>Unrecognized switch: -%s (-h will show valid options)</a></dt>

<dd>
<p>(F) You specified an illegal option to Perl. Don&#39;t do that. (If you think you didn&#39;t do that, check the #! line to see if it&#39;s supplying the bad switch on your behalf.)</p>

<dt><a name='Unsuccessful'></a><a name="Unsuccessful_%s_on_filename_containing_newline"
>Unsuccessful %s on filename containing newline</a></dt>

<dd>
<p>(W newline) A file operation was attempted on a filename, and that operation failed, PROBABLY because the filename contained a newline, PROBABLY because you forgot to chomp() it off. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#chomp" class="podlinkpod"
>&#34;chomp&#34; in perlfunc</a>.</p>

<dt><a name='Unsupported'></a><a name="Unsupported_directory_function_&#34;%s&#34;_called"
>Unsupported directory function &#34;%s&#34; called</a></dt>

<dd>
<p>(F) Your machine doesn&#39;t support opendir() and readdir().</p>

<dt><a name='Unsupported'></a><a name="Unsupported_function_%s"
>Unsupported function %s</a></dt>

<dd>
<p>(F) This machine doesn&#39;t implement the indicated function, apparently. At least, Configure doesn&#39;t think so.</p>

<dt><a name='Unsupported'></a><a name="Unsupported_function_fork"
>Unsupported function fork</a></dt>

<dd>
<p>(F) Your version of executable does not support forking.</p>

<p>Note that under some systems, like OS/2, there may be different flavors of Perl executables, some of which may support fork, some not. Try changing the name you call Perl by to <code>perl_</code>, <code>perl__</code>, and so on.</p>

<dt><a name='Unsupported'></a><a name="Unsupported_script_encoding_%s"
>Unsupported script encoding %s</a></dt>

<dd>
<p>(F) Your program file begins with a Unicode Byte Order Mark (BOM) which declares it to be in a Unicode encoding that Perl cannot read.</p>

<dt><a name='Unsupported'></a><a name="Unsupported_socket_function_&#34;%s&#34;_called"
>Unsupported socket function &#34;%s&#34; called</a></dt>

<dd>
<p>(F) Your machine doesn&#39;t support the Berkeley socket mechanism, or at least that&#39;s what Configure thought.</p>

<dt><a name='Unterminated'></a><a name="Unterminated_attribute_list"
>Unterminated attribute list</a></dt>

<dd>
<p>(F) The lexer found something other than a simple identifier at the start of an attribute, and it wasn&#39;t a semicolon or the start of a block. Perhaps you terminated the parameter list of the previous attribute too soon. See <a href="/~flora/perl-5.14.2/ext/attributes/attributes.pm" class="podlinkpod"
>attributes</a>.</p>

<dt><a name='Unterminated'></a><a name="Unterminated_attribute_parameter_in_attribute_list"
>Unterminated attribute parameter in attribute list</a></dt>

<dd>
<p>(F) The lexer saw an opening (left) parenthesis character while parsing an attribute list, but the matching closing (right) parenthesis character was not found. You may need to add (or remove) a backslash character to get your parentheses to balance. See <a href="/~flora/perl-5.14.2/ext/attributes/attributes.pm" class="podlinkpod"
>attributes</a>.</p>

<dt><a name='Unterminated'></a><a name="Unterminated_compressed_integer"
>Unterminated compressed integer</a></dt>

<dd>
<p>(F) An argument to unpack(&#34;w&#34;,...) was incompatible with the BER compressed integer format and could not be converted to an integer. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='Unterminated'></a><a name="Unterminated_\g{...}_pattern_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Unterminated \g{...} pattern in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You missed a close brace on a \g{..} pattern (group reference) in a regular expression. Fix the pattern and retry.</p>

<dt><a name='Unterminated'></a><a name="Unterminated_&#60;&#62;_operator"
>Unterminated &#60;&#62; operator</a></dt>

<dd>
<p>(F) The lexer saw a left angle bracket in a place where it was expecting a term, so it&#39;s looking for the corresponding right angle bracket, and not finding it. Chances are you left some needed parentheses out earlier in the line, and you really meant a &#34;less than&#34;.</p>

<dt><a name='Unterminated'></a><a name="Unterminated_verb_pattern_argument_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Unterminated verb pattern argument in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You used a pattern of the form <code>(*VERB:ARG)</code> but did not terminate the pattern with a <code>)</code>. Fix the pattern and retry.</p>

<dt><a name='Unterminated'></a><a name="Unterminated_verb_pattern_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Unterminated verb pattern in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You used a pattern of the form <code>(*VERB)</code> but did not terminate the pattern with a <code>)</code>. Fix the pattern and retry.</p>

<dt><a name='untie'></a><a name="untie_attempted_while_%d_inner_references_still_exist"
>untie attempted while %d inner references still exist</a></dt>

<dd>
<p>(W untie) A copy of the object returned from <code>tie</code> (or <code>tied</code>) was still valid when <code>untie</code> was called.</p>

<dt><a name='Usage'></a><a name="Usage:_POSIX::%s(%s)"
>Usage: POSIX::%s(%s)</a></dt>

<dd>
<p>(F) You called a POSIX function with incorrect arguments. See <a href="/~flora/perl-5.14.2/ext/POSIX/lib/POSIX.pod#FUNCTIONS" class="podlinkpod"
>&#34;FUNCTIONS&#34; in POSIX</a> for more information.</p>

<dt><a name='Usage'></a><a name="Usage:_Win32::%s(%s)"
>Usage: Win32::%s(%s)</a></dt>

<dd>
<p>(F) You called a Win32 function with incorrect arguments. See <a href="/perldoc?Win32" class="podlinkpod"
>Win32</a> for more information.</p>

<dt><a name='Useless'></a><a name="Useless_(?-%s)_-_don&#39;t_use_/%s_modifier_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Useless (?-%s) - don&#39;t use /%s modifier in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(W regexp) You have used an internal modifier such as (?-o) that has no meaning unless removed from the entire regexp:</p>

<pre class="sh_perl">    if ($string =~ /(?-o)$pattern/o) { ... }</pre>

<p>must be written as</p>

<pre class="sh_perl">    if ($string =~ /$pattern/) { ... }</pre>

<p>The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Useless'></a><a name="Useless_localization_of_%s"
>Useless localization of %s</a></dt>

<dd>
<p>(W syntax) The localization of lvalues such as <code>local($x=10)</code> is legal, but in fact the local() currently has no effect. This may change at some point in the future, but in the meantime such code is discouraged.</p>

<dt><a name='Useless'></a><a name="Useless_(?%s)_-_use_/%s_modifier_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Useless (?%s) - use /%s modifier in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(W regexp) You have used an internal modifier such as (?o) that has no meaning unless applied to the entire regexp:</p>

<pre class="sh_perl">    if ($string =~ /(?o)$pattern/) { ... }</pre>

<p>must be written as</p>

<pre class="sh_perl">    if ($string =~ /$pattern/o) { ... }</pre>

<p>The &#60;-- HERE shows in the regular expression about where the problem was discovered. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='Useless'></a><a name="Useless_use_of_/d_modifier_in_transliteration_operator"
>Useless use of /d modifier in transliteration operator</a></dt>

<dd>
<p>(W misc) You have used the /d modifier where the searchlist has the same length as the replacelist. See <a href="/~flora/perl-5.14.2/pod/perlop.pod" class="podlinkpod"
>perlop</a> for more information about the /d modifier.</p>

<dt><a name='Useless'></a><a name="Useless_use_of_%s_in_void_context"
>Useless use of %s in void context</a></dt>

<dd>
<p>(W void) You did something without a side effect in a context that does nothing with the return value, such as a statement that doesn&#39;t return a value from a block, or the left side of a scalar comma operator. Very often this points not to stupidity on your part, but a failure of Perl to parse your program the way you thought it would. For example, you&#39;d get this if you mixed up your C precedence with Python precedence and said</p>

<pre class="sh_perl">    $one, $two = 1, 2;</pre>

<p>when you meant to say</p>

<pre class="sh_perl">    ($one, $two) = (1, 2);</pre>

<p>Another common error is to use ordinary parentheses to construct a list reference when you should be using square or curly brackets, for example, if you say</p>

<pre class="sh_perl">    $array = (1,2);</pre>

<p>when you should have said</p>

<pre class="sh_perl">    $array = [1,2];</pre>

<p>The square brackets explicitly turn a list value into a scalar value, while parentheses do not. So when a parenthesized list is evaluated in a scalar context, the comma is treated like C&#39;s comma operator, which throws away the left argument, which is not what you want. See <a href="/~flora/perl-5.14.2/pod/perlref.pod" class="podlinkpod"
>perlref</a> for more on this.</p>

<p>This warning will not be issued for numerical constants equal to 0 or 1 since they are often used in statements like</p>

<pre class="sh_perl">    1 while sub_with_side_effects();</pre>

<p>String constants that would normally evaluate to 0 or 1 are warned about.</p>

<dt><a name='Useless'></a><a name="Useless_use_of_&#34;re&#34;_pragma"
>Useless use of &#34;re&#34; pragma</a></dt>

<dd>
<p>(W) You did <code>use re;</code> without any arguments. That isn&#39;t very useful.</p>

<dt><a name='Useless'></a><a name="Useless_use_of_sort_in_scalar_context"
>Useless use of sort in scalar context</a></dt>

<dd>
<p>(W void) You used sort in scalar context, as in :</p>

<pre class="sh_perl">    my $x = sort @y;</pre>

<p>This is not very useful, and perl currently optimizes this away.</p>

<dt><a name='Useless'></a><a name="Useless_use_of_%s_with_no_values"
>Useless use of %s with no values</a></dt>

<dd>
<p>(W syntax) You used the push() or unshift() function with no arguments apart from the array, like <code>push(@x)</code> or <code>unshift(@foo)</code>. That won&#39;t usually have any effect on the array, so is completely useless. It&#39;s possible in principle that push(@tied_array) could have some effect if the array is tied to a class which implements a PUSH method. If so, you can write it as <code>push(@tied_array,())</code> to avoid this warning.</p>

<dt><a name='use'></a><a name="&#34;use&#34;_not_allowed_in_expression"
>&#34;use&#34; not allowed in expression</a></dt>

<dd>
<p>(F) The &#34;use&#34; keyword is recognized and executed at compile time, and returns no useful value. See <a href="/~flora/perl-5.14.2/pod/perlmod.pod" class="podlinkpod"
>perlmod</a>.</p>

<dt><a name='Use'></a><a name="Use_of_assignment_to_$[_is_deprecated"
>Use of assignment to $[ is deprecated</a></dt>

<dd>
<p>(D deprecated) The <code>$[</code> variable (index of the first element in an array) is deprecated. See <a href="/~flora/perl-5.14.2/pod/perlvar.pod#$[" class="podlinkpod"
>&#34;$[&#34; in perlvar</a>.</p>

<dt><a name='Use'></a><a name="Use_of_bare_&#60;&#60;_to_mean_&#60;&#60;&#34;&#34;_is_deprecated"
>Use of bare &#60;&#60; to mean &#60;&#60;&#34;&#34; is deprecated</a></dt>

<dd>
<p>(D deprecated) You are now encouraged to use the explicitly quoted form if you wish to use an empty line as the terminator of the here-document.</p>

<dt><a name='Use'></a><a name="Use_of_comma-less_variable_list_is_deprecated"
>Use of comma-less variable list is deprecated</a></dt>

<dd>
<p>(D deprecated) The values you give to a format should be separated by commas, not just aligned on a line.</p>

<dt><a name='Use'></a><a name="Use_of_chdir(&#39;&#39;)_or_chdir(undef)_as_chdir()_deprecated"
>Use of chdir(&#39;&#39;) or chdir(undef) as chdir() deprecated</a></dt>

<dd>
<p>(D deprecated) chdir() with no arguments is documented to change to $ENV{HOME} or $ENV{LOGDIR}. chdir(undef) and chdir(&#39;&#39;) share this behavior, but that has been deprecated. In future versions they will simply fail.</p>

<p>Be careful to check that what you pass to chdir() is defined and not blank, else you might find yourself in your home directory.</p>

<dt><a name='Use'></a><a name="Use_of_/c_modifier_is_meaningless_in_s///"
>Use of /c modifier is meaningless in s///</a></dt>

<dd>
<p>(W regexp) You used the /c modifier in a substitution. The /c modifier is not presently meaningful in substitutions.</p>

<dt><a name='Use'></a><a name="Use_of_/c_modifier_is_meaningless_without_/g"
>Use of /c modifier is meaningless without /g</a></dt>

<dd>
<p>(W regexp) You used the /c modifier with a regex operand, but didn&#39;t use the /g modifier. Currently, /c is meaningful only when /g is used. (This may change in the future.)</p>

<dt><a name='Use'></a><a name="Use_of_:=_for_an_empty_attribute_list_is_not_allowed"
>Use of := for an empty attribute list is not allowed</a></dt>

<dd>
<p>(F) The construction <code>my $x := 42</code> used to parse as equivalent to <code>my $x : = 42</code> (applying an empty attribute list to <code>$x</code>). This construct was deprecated in 5.12.0, and has now been made a syntax error, so <code>:=</code> can be reclaimed as a new operator in the future.</p>

<p>If you need an empty attribute list, for example in a code generator, add a space before the <code>=</code>.</p>

<dt><a name='Use'></a><a name="Use_of_freed_value_in_iteration"
>Use of freed value in iteration</a></dt>

<dd>
<p>(F) Perhaps you modified the iterated array within the loop? This error is typically caused by code like the following:</p>

<pre class="sh_perl">    @a = (3,4);
    @a = () for (1,2,@a);</pre>

<p>You are not supposed to modify arrays while they are being iterated over. For speed and efficiency reasons, Perl internally does not do full reference-counting of iterated items, hence deleting such an item in the middle of an iteration causes Perl to see a freed value.</p>

<dt><a name='Use'></a><a name="Use_of_*glob{FILEHANDLE}_is_deprecated"
>Use of *glob{FILEHANDLE} is deprecated</a></dt>

<dd>
<p>(D deprecated) You are now encouraged to use the shorter *glob{IO} form to access the filehandle slot within a typeglob.</p>

<dt><a name='Use'></a><a name="Use_of_/g_modifier_is_meaningless_in_split"
>Use of /g modifier is meaningless in split</a></dt>

<dd>
<p>(W regexp) You used the /g modifier on the pattern for a <code>split</code> operator. Since <code>split</code> always tries to match the pattern repeatedly, the <code>/g</code> has no effect.</p>

<dt><a name='Use'></a><a name="Use_of_&#34;goto&#34;_to_jump_into_a_construct_is_deprecated"
>Use of &#34;goto&#34; to jump into a construct is deprecated</a></dt>

<dd>
<p>(D deprecated) Using <code>goto</code> to jump from an outer scope into an inner scope is deprecated and should be avoided.</p>

<dt><a name='Use'></a><a name="Use_of_inherited_AUTOLOAD_for_non-method_%s()_is_deprecated"
>Use of inherited AUTOLOAD for non-method %s() is deprecated</a></dt>

<dd>
<p>(D deprecated) As an (ahem) accidental feature, <code>AUTOLOAD</code> subroutines are looked up as methods (using the <code>@ISA</code> hierarchy) even when the subroutines to be autoloaded were called as plain functions (e.g. <code>Foo::bar()</code>), not as methods (e.g. <code>Foo-&#62;bar()</code> or <code>$obj-&#62;bar()</code>).</p>

<p>This bug will be rectified in future by using method lookup only for methods&#39; <code>AUTOLOAD</code>s. However, there is a significant base of existing code that may be using the old behavior. So, as an interim step, Perl currently issues an optional warning when non-methods use inherited <code>AUTOLOAD</code>s.</p>

<p>The simple rule is: Inheritance will not work when autoloading non-methods. The simple fix for old code is: In any module that used to depend on inheriting <code>AUTOLOAD</code> for non-methods from a base class named <code>BaseClass</code>, execute <code>*AUTOLOAD = \&#38;BaseClass::AUTOLOAD</code> during startup.</p>

<p>In code that currently says <code>use AutoLoader; @ISA = qw(AutoLoader);</code> you should remove AutoLoader from @ISA and change <code>use AutoLoader;</code> to <code>use AutoLoader &#39;AUTOLOAD&#39;;</code>.</p>

<dt><a name='Use'></a><a name="Use_of_%s_in_printf_format_not_supported"
>Use of %s in printf format not supported</a></dt>

<dd>
<p>(F) You attempted to use a feature of printf that is accessible from only C. This usually means there&#39;s a better way to do it in Perl.</p>

<dt><a name='Use'></a><a name="Use_of_%s_is_deprecated"
>Use of %s is deprecated</a></dt>

<dd>
<p>(D deprecated) The construct indicated is no longer recommended for use, generally because there&#39;s a better way to do it, and also because the old way has bad side effects.</p>

<dt><a name='Use'></a><a name="Use_of_-l_on_filehandle_%s"
>Use of -l on filehandle %s</a></dt>

<dd>
<p>(W io) A filehandle represents an opened file, and when you opened the file it already went past any symlink you are presumably trying to look for. The operation returned <code>undef</code>. Use a filename instead.</p>

<dt><a name='Use'></a><a name="Use_of_%s_on_a_handle_without_*_is_deprecated"
>Use of %s on a handle without * is deprecated</a></dt>

<dd>
<p>(D deprecated) You used <code>tie</code>, <code>tied</code> or <code>untie</code> on a scalar but that scalar happens to hold a typeglob, which means its filehandle will be tied. If you mean to tie a handle, use an explicit * as in <code>tie *$handle</code>.</p>

<p>This is a long-standing bug that will be removed in Perl 5.16, as there is currently no way to tie the scalar itself when it holds a typeglob, and no way to untie a scalar that has had a typeglob assigned to it.</p>

<dt><a name='Use'></a><a name="Use_of_?PATTERN?_without_explicit_operator_is_deprecated"
>Use of ?PATTERN? without explicit operator is deprecated</a></dt>

<dd>
<p>(D deprecated) You have written something like <code>?\w?</code>, for a regular expression that matches only once. Starting this term directly with the question mark delimiter is now deprecated, so that the question mark will be available for use in new operators in the future. Write <code>m?\w?</code> instead, explicitly using the <code>m</code> operator: the question mark delimiter still invokes match-once behaviour.</p>

<dt><a name='Use'></a><a name="Use_of_qw(...)_as_parentheses_is_deprecated"
>Use of qw(...) as parentheses is deprecated</a></dt>

<dd>
<p>(D deprecated) You have something like <code>foreach $x qw(a b c) {...}</code>, using a <code>qw(...)</code> list literal where a parenthesised expression is expected. Historically the parser fooled itself into thinking that <code>qw(...)</code> literals were always enclosed in parentheses, and as a result you could sometimes omit parentheses around them. (You could never do the <code>foreach qw(a b c) {...}</code> that you might have expected, though.) The parser no longer lies to itself in this way. Wrap the list literal in parentheses, like <code>foreach $x (qw(a b c)) {...}</code>.</p>

<dt><a name='Use'></a><a name="Use_of_reference_&#34;%s&#34;_as_array_index"
>Use of reference &#34;%s&#34; as array index</a></dt>

<dd>
<p>(W misc) You tried to use a reference as an array index; this probably isn&#39;t what you mean, because references in numerical context tend to be huge numbers, and so usually indicates programmer error.</p>

<p>If you really do mean it, explicitly numify your reference, like so: <code>$array[0+$ref]</code>. This warning is not given for overloaded objects, however, because you can overload the numification and stringification operators and then you presumably know what you are doing.</p>

<dt><a name='Use'></a><a name="Use_of_reserved_word_&#34;%s&#34;_is_deprecated"
>Use of reserved word &#34;%s&#34; is deprecated</a></dt>

<dd>
<p>(D deprecated) The indicated bareword is a reserved word. Future versions of perl may use it as a keyword, so you&#39;re better off either explicitly quoting the word in a manner appropriate for its context of use, or using a different name altogether. The warning can be suppressed for subroutine names by either adding a <code>&#38;</code> prefix, or using a package qualifier, e.g. <code>&#38;our()</code>, or <code>Foo::our()</code>.</p>

<dt><a name='Use'></a><a name="Use_of_tainted_arguments_in_%s_is_deprecated"
>Use of tainted arguments in %s is deprecated</a></dt>

<dd>
<p>(W taint, deprecated) You have supplied <code>system()</code> or <code>exec()</code> with multiple arguments and at least one of them is tainted. This used to be allowed but will become a fatal error in a future version of perl. Untaint your arguments. See <a href="/~flora/perl-5.14.2/pod/perlsec.pod" class="podlinkpod"
>perlsec</a>.</p>

<dt><a name='Use'></a><a name="Use_of_uninitialized_value%s"
>Use of uninitialized value%s</a></dt>

<dd>
<p>(W uninitialized) An undefined value was used as if it were already defined. It was interpreted as a &#34;&#34; or a 0, but maybe it was a mistake. To suppress this warning assign a defined value to your variables.</p>

<p>To help you figure out what was undefined, perl will try to tell you the name of the variable (if any) that was undefined. In some cases it cannot do this, so it also tells you what operation you used the undefined value in. Note, however, that perl optimizes your program and the operation displayed in the warning may not necessarily appear literally in your program. For example, <code>&#34;that $foo&#34;</code> is usually optimized into <code>&#34;that &#34; . $foo</code>, and the warning will refer to the <code>concatenation (.)</code> operator, even though there is no <code>.</code> in your program.</p>

<dt><a name='Using'></a><a name="Using_a_hash_as_a_reference_is_deprecated"
>Using a hash as a reference is deprecated</a></dt>

<dd>
<p>(D deprecated) You tried to use a hash as a reference, as in <code>%foo-&#62;{&#34;bar&#34;}</code> or <code>%$ref-&#62;{&#34;hello&#34;}</code>. Versions of perl &#60;= 5.6.1 used to allow this syntax, but shouldn&#39;t have. It is now deprecated, and will be removed in a future version.</p>

<dt><a name='Using'></a><a name="Using_an_array_as_a_reference_is_deprecated"
>Using an array as a reference is deprecated</a></dt>

<dd>
<p>(D deprecated) You tried to use an array as a reference, as in <code>@foo-&#62;[23]</code> or <code>@$ref-&#62;[99]</code>. Versions of perl &#60;= 5.6.1 used to allow this syntax, but shouldn&#39;t have. It is now deprecated, and will be removed in a future version.</p>

<dt><a name='Using'></a><a name="Using_just_the_first_character_returned_by_\N{}_in_character_class"
>Using just the first character returned by \N{} in character class</a></dt>

<dd>
<p>(W) A charnames handler may return a sequence of more than one character. Currently all but the first one are discarded when used in a regular expression pattern bracketed character class.</p>

<dt><a name='Using'></a><a name="Using_!~_with_%s_doesn&#39;t_make_sense"
>Using !~ with %s doesn&#39;t make sense</a></dt>

<dd>
<p>(F) Using the <code>!~</code> operator with <code>s///r</code>, <code>tr///r</code> or <code>y///r</code> is currently reserved for future use, as the exact behaviour has not been decided. (Simply returning the boolean opposite of the modified string is usually not particularly useful.)</p>

<dt><a name='User'></a><a name="User-defined_case-mapping_&#39;%s&#39;_is_deprecated"
>User-defined case-mapping &#39;%s&#39; is deprecated</a></dt>

<dd>
<p>(W deprecated) You defined a function, such as <code>ToLower</code> that overrides the standard case mapping, such as <code>lc()</code> gives. This feature is being deprecated due to its many issues, as documented in <a href="/~flora/perl-5.14.2/pod/perlunicode.pod#User-Defined_Case_Mappings_(for_serious_hackers_only)" class="podlinkpod"
>&#34;User-Defined Case Mappings (for serious hackers only)&#34; in perlunicode</a>. It is planned to remove this feature in Perl 5.16. A CPAN module providing improved functionality is being prepared.</p>

<dt><a name='UTF'></a><a name="UTF-16_surrogate_U+%X"
>UTF-16 surrogate U+%X</a></dt>

<dd>
<p>(W utf8, surrogate) You had a UTF-16 surrogate in a context where they are not considered acceptable. These code points, between U+D800 and U+DFFF (inclusive), are used by Unicode only for UTF-16. However, Perl internally allows all unsigned integer code points (up to the size limit available on your platform), including surrogates. But these can cause problems when being input or output, which is likely where this message came from. If you really really know what you are doing you can turn off this warning by <code>no warnings &#39;surrogate&#39;;</code>.</p>

<dt><a name='Value'></a><a name="Value_of_%s_can_be_&#34;0&#34;;_test_with_defined()"
>Value of %s can be &#34;0&#34;; test with defined()</a></dt>

<dd>
<p>(W misc) In a conditional expression, you used &#60;HANDLE&#62;, &#60;*&#62; (glob), <code>each()</code>, or <code>readdir()</code> as a boolean value. Each of these constructs can return a value of &#34;0&#34;; that would make the conditional expression false, which is probably not what you intended. When using these constructs in conditional expressions, test their values with the <code>defined</code> operator.</p>

<dt><a name='Value'></a><a name="Value_of_CLI_symbol_&#34;%s&#34;_too_long"
>Value of CLI symbol &#34;%s&#34; too long</a></dt>

<dd>
<p>(W misc) A warning peculiar to VMS. Perl tried to read the value of an %ENV element from a CLI symbol table, and found a resultant string longer than 1024 characters. The return value has been truncated to 1024 characters.</p>

<dt><a name='Variable'></a><a name="Variable_&#34;%s&#34;_is_not_available"
>Variable &#34;%s&#34; is not available</a></dt>

<dd>
<p>(W closure) During compilation, an inner named subroutine or eval is attempting to capture an outer lexical that is not currently available. This can happen for one of two reasons. First, the outer lexical may be declared in an outer anonymous subroutine that has not yet been created. (Remember that named subs are created at compile time, while anonymous subs are created at run-time.) For example,</p>

<pre class="sh_perl">    sub { my $a; sub f { $a } }</pre>

<p>At the time that f is created, it can&#39;t capture the current value of $a, since the anonymous subroutine hasn&#39;t been created yet. Conversely, the following won&#39;t give a warning since the anonymous subroutine has by now been created and is live:</p>

<pre class="sh_perl">    sub { my $a; eval &#39;sub f { $a }&#39; }-&#62;();</pre>

<p>The second situation is caused by an eval accessing a variable that has gone out of scope, for example,</p>

<pre class="sh_perl">    sub f {
        my $a;
        sub { eval &#39;$a&#39; }
    }
    f()-&#62;();</pre>

<p>Here, when the &#39;$a&#39; in the eval is being compiled, f() is not currently being executed, so its $a is not available for capture.</p>

<dt><a name='Variable'></a><a name="Variable_&#34;%s&#34;_is_not_imported%s"
>Variable &#34;%s&#34; is not imported%s</a></dt>

<dd>
<p>(W misc) With &#34;use strict&#34; in effect, you referred to a global variable that you apparently thought was imported from another module, because something else of the same name (usually a subroutine) is exported by that module. It usually means you put the wrong funny character on the front of your variable.</p>

<dt><a name='Variable'></a><a name="Variable_length_lookbehind_not_implemented_in_m/%s/"
>Variable length lookbehind not implemented in m/%s/</a></dt>

<dd>
<p>(F) Lookbehind is allowed only for subexpressions whose length is fixed and known at compile time. See <a href="/~flora/perl-5.14.2/pod/perlre.pod" class="podlinkpod"
>perlre</a>.</p>

<dt><a name='s'></a><a name="&#34;%s&#34;_variable_%s_masks_earlier_declaration_in_same_%s"
>&#34;%s&#34; variable %s masks earlier declaration in same %s</a></dt>

<dd>
<p>(W misc) A &#34;my&#34;, &#34;our&#34; or &#34;state&#34; variable has been redeclared in the current scope or statement, effectively eliminating all access to the previous instance. This is almost always a typographical error. Note that the earlier variable will still exist until the end of the scope or until all closure referents to it are destroyed.</p>

<dt><a name='Variable'></a><a name="Variable_syntax"
>Variable syntax</a></dt>

<dd>
<p>(A) You&#39;ve accidentally run your script through <b>csh</b> instead of Perl. Check the #! line, or manually feed your script into Perl yourself.</p>

<dt><a name='Variable'></a><a name="Variable_&#34;%s&#34;_will_not_stay_shared"
>Variable &#34;%s&#34; will not stay shared</a></dt>

<dd>
<p>(W closure) An inner (nested) <i>named</i> subroutine is referencing a lexical variable defined in an outer named subroutine.</p>

<p>When the inner subroutine is called, it will see the value of the outer subroutine&#39;s variable as it was before and during the *first* call to the outer subroutine; in this case, after the first call to the outer subroutine is complete, the inner and outer subroutines will no longer share a common value for the variable. In other words, the variable will no longer be shared.</p>

<p>This problem can usually be solved by making the inner subroutine anonymous, using the <code>sub {}</code> syntax. When inner anonymous subs that reference variables in outer subroutines are created, they are automatically rebound to the current values of such variables.</p>

<dt><a name='Verb'></a><a name="Verb_pattern_&#39;%s&#39;_has_a_mandatory_argument_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Verb pattern &#39;%s&#39; has a mandatory argument in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You used a verb pattern that requires an argument. Supply an argument or check that you are using the right verb.</p>

<dt><a name='Verb'></a><a name="Verb_pattern_&#39;%s&#39;_may_not_have_an_argument_in_regex;_marked_by_&#60;--_HERE_in_m/%s/"
>Verb pattern &#39;%s&#39; may not have an argument in regex; marked by &#60;-- HERE in m/%s/</a></dt>

<dd>
<p>(F) You used a verb pattern that is not allowed an argument. Remove the argument or check that you are using the right verb.</p>

<dt><a name='Version'></a><a name="Version_number_must_be_a_constant_number"
>Version number must be a constant number</a></dt>

<dd>
<p>(P) The attempt to translate a <code>use Module n.n LIST</code> statement into its equivalent <code>BEGIN</code> block found an internal inconsistency with the version number.</p>

<dt><a name='Version'></a><a name="Version_string_&#39;%s&#39;_contains_invalid_data;_ignoring:_&#39;%s&#39;"
>Version string &#39;%s&#39; contains invalid data; ignoring: &#39;%s&#39;</a></dt>

<dd>
<p>(W misc) The version string contains invalid characters at the end, which are being ignored.</p>

<dt><a name='Warning'></a><a name="Warning:_something&#39;s_wrong"
>Warning: something&#39;s wrong</a></dt>

<dd>
<p>(W) You passed warn() an empty string (the equivalent of <code>warn &#34;&#34;</code>) or you called it with no args and <code>$@</code> was empty.</p>

<dt><a name='Warning'></a><a name="Warning:_unable_to_close_filehandle_%s_properly"
>Warning: unable to close filehandle %s properly</a></dt>

<dd>
<p>(S) The implicit close() done by an open() got an error indication on the close(). This usually indicates your file system ran out of disk space.</p>

<dt><a name='Warning'></a><a name="Warning:_Use_of_&#34;%s&#34;_without_parentheses_is_ambiguous"
>Warning: Use of &#34;%s&#34; without parentheses is ambiguous</a></dt>

<dd>
<p>(S ambiguous) You wrote a unary operator followed by something that looks like a binary operator that could also have been interpreted as a term or unary operator. For instance, if you know that the rand function has a default argument of 1.0, and you write</p>

<pre class="sh_perl">    rand + 5;</pre>

<p>you may THINK you wrote the same thing as</p>

<pre class="sh_perl">    rand() + 5;</pre>

<p>but in actual fact, you got</p>

<pre class="sh_perl">    rand(+5);</pre>

<p>So put in parentheses to say what you really mean.</p>

<dt><a name='Wide'></a><a name="Wide_character_in_%s"
>Wide character in %s</a></dt>

<dd>
<p>(S utf8) Perl met a wide character (&#62;255) when it wasn&#39;t expecting one. This warning is by default on for I/O (like print). The easiest way to quiet this warning is simply to add the <code>:utf8</code> layer to the output, e.g. <code>binmode STDOUT, &#39;:utf8&#39;</code>. Another way to turn off the warning is to add <code>no warnings &#39;utf8&#39;;</code> but that is often closer to cheating. In general, you are supposed to explicitly mark the filehandle with an encoding, see <a href="/~flora/perl-5.14.2/lib/open.pm" class="podlinkpod"
>open</a> and <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#binmode" class="podlinkpod"
>&#34;binmode&#34; in perlfunc</a>.</p>

<dt><a name='Within'></a><a name="Within_[]-length_&#39;%c&#39;_not_allowed"
>Within []-length &#39;%c&#39; not allowed</a></dt>

<dd>
<p>(F) The count in the (un)pack template may be replaced by <code>[TEMPLATE]</code> only if <code>TEMPLATE</code> always matches the same amount of packed bytes that can be determined from the template alone. This is not possible if it contains any of the codes @, /, U, u, w or a *-length. Redesign the template.</p>

<dt><a name='write'></a><a name="write()_on_closed_filehandle_%s"
>write() on closed filehandle %s</a></dt>

<dd>
<p>(W closed) The filehandle you&#39;re writing to got itself closed sometime before now. Check your control flow.</p>

<dt><a name='s'></a><a name="%s_&#34;\x%X&#34;_does_not_map_to_Unicode"
>%s &#34;\x%X&#34; does not map to Unicode</a></dt>

<dd>
<p>(F) When reading in different encodings Perl tries to map everything into Unicode characters. The bytes you read in are not legal in this encoding, for example</p>

<pre class="sh_perl">    utf8 &#34;\xE4&#34; does not map to Unicode</pre>

<p>if you try to read in the a-diaereses Latin-1 as UTF-8.</p>

<dt><a name='X'></a><a name="&#39;X&#39;_outside_of_string"
>&#39;X&#39; outside of string</a></dt>

<dd>
<p>(F) You had a (un)pack template that specified a relative position before the beginning of the string being (un)packed. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='x'></a><a name="&#39;x&#39;_outside_of_string_in_unpack"
>&#39;x&#39; outside of string in unpack</a></dt>

<dd>
<p>(F) You had a pack template that specified a relative position after the end of the string being unpacked. See <a href="/~flora/perl-5.14.2/pod/perlfunc.pod#pack" class="podlinkpod"
>&#34;pack&#34; in perlfunc</a>.</p>

<dt><a name='YOU'></a><a name="YOU_HAVEN&#39;T_DISABLED_SET-ID_SCRIPTS_IN_THE_KERNEL_YET!"
>YOU HAVEN&#39;T DISABLED SET-ID SCRIPTS IN THE KERNEL YET!</a></dt>

<dd>
<p>(F) And you probably never will, because you probably don&#39;t have the sources to your kernel, and your vendor probably doesn&#39;t give a rip about what you want. Your best bet is to put a setuid C wrapper around your script.</p>

<dt><a name='You'></a><a name="You_need_to_quote_&#34;%s&#34;"
>You need to quote &#34;%s&#34;</a></dt>

<dd>
<p>(W syntax) You assigned a bareword as a signal handler name. Unfortunately, you already have a subroutine of that name declared, which means that Perl 5 will try to call the subroutine when the assignment is executed, which is probably not what you want. (If it IS what you want, put an &#38; in front.)</p>

<dt><a name='Your'></a><a name="Your_random_numbers_are_not_that_random"
>Your random numbers are not that random</a></dt>

<dd>
<p>(F) When trying to initialise the random seed for hashes, Perl could not get any randomness out of your system. This usually indicates Something Very Wrong.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~flora/perl-5.14.2/lib/warnings.pm" class="podlinkpod"
>warnings</a>, <a href="/~flora/perl-5.14.2/pod/perllexwarn.pod" class="podlinkpod"
>perllexwarn</a>.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78059 Uploads, 24684 Distributions
105888 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Document']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Document']);
    });
  });
</script>
<!-- Sat Apr 21 07:29:11 2012 GMT (0.619677066802979) @cpansearch1 -->
 </body>
</html>
