<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>DateTime::Event::Recurrence - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","DateTime-Event-Recurrence",3]);
    _gaq.push(["_setCustomVar",5,"Release","DateTime-Event-Recurrence-0.16",3]);
    _gaq.push(["_setCustomVar",3,"Module","DateTime::Event::Recurrence",3]);
    _gaq.push(["_setCustomVar",1,"Author","FGLOCK",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?DateTime::Event::Recurrence">permalink</a></div>
  <a href="/~fglock/">Fl&aacute;vio Soibelmann Glock</a> &gt;
  <a href="/~fglock/DateTime-Event-Recurrence-0.16/">DateTime-Event-Recurrence-0.16</a> &gt;
  DateTime::Event::Recurrence
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/2c622ad013f36460f87c54eee7a50e0c?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/F/FG/FGLOCK/DateTime-Event-Recurrence-0.16.tar.gz">DateTime-Event-Recurrence-0.16.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=DateTime%3A%3AEvent%3A%3ARecurrence;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~FGLOCK/DateTime-Event-Recurrence-0.16/lib/DateTime/Event/Recurrence.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=DateTime-Event-Recurrence">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.16 &nbsp;
<span class="noprint">
  <a href="/src/FGLOCK/DateTime-Event-Recurrence-0.16/lib/DateTime/Event/Recurrence.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#USAGE'>USAGE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Invalid_DateTimes'>Invalid DateTimes</a>
    <li class='indexItem indexItem2'><a href='#The_&#34;days&#34;_Parameter'>The &#34;days&#34; Parameter</a>
    <li class='indexItem indexItem2'><a href='#The_&#34;interval&#34;_and_&#34;start&#34;_Parameters'>The &#34;interval&#34; and &#34;start&#34; Parameters</a>
    <li class='indexItem indexItem2'><a href='#The_&#34;week_start_day&#34;_Parameter'>The &#34;week_start_day&#34; Parameter</a>
    <li class='indexItem indexItem2'><a href='#Time_Zones'>Time Zones</a>
    <li class='indexItem indexItem2'><a href='#Leap_Seconds'>Leap Seconds</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#CREDITS'>CREDITS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>DateTime::Event::Recurrence - DateTime::Set extension for create basic recurrence sets</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> use DateTime;
 use DateTime::Event::Recurrence;
 
 my $dt = DateTime-&#62;new( year   =&#62; 2000,
                         month  =&#62; 6,
                         day    =&#62; 20,
                       );

 my $daily_set = DateTime::Event::Recurrence-&#62;daily;

 my $dt_next = $daily_set-&#62;next( $dt );

 my $dt_previous = $daily_set-&#62;previous( $dt );

 my $bool = $daily_set-&#62;contains( $dt );

 my @days = $daily_set-&#62;as_list( start =&#62; $dt1, end =&#62; $dt2 );

 my $iter = $daily_set-&#62;iterator;

 while ( my $dt = $iter-&#62;next ) {
     print &#39; &#39;, $dt-&#62;datetime;
 }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module provides convenience methods that let you easily create <code>DateTime::Set</code> objects for various recurrences, such as &#34;once a month&#34; or &#34;every day&#34;. You can also create more complicated recurrences, such as &#34;every Monday, Wednesday and Thursday at 10:00 AM and 2:00 PM&#34;.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="USAGE"
>USAGE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li>yearly monthly weekly daily hourly minutely secondly
<p>These methods all return a new <code>DateTime::Set</code> object representing the given recurrence.</p>

<pre class="sh_perl">  my $daily_set = DateTime::Event::Recurrence-&#62;daily;</pre>

<p>If no parameters are given, then the set members each occur at the <i>beginning</i> of the specified recurrence.</p>

<p>For example, by default, the <code>monthly()</code> method returns a set containing the first day of each month.</p>

<p>Without parameters, the <code>weekly()</code> method returns a set containing <i>Mondays</i>.</p>

<p>However, you can pass in parameters to alter where these datetimes fall. The parameters are the same as those given to the <code>DateTime::Duration</code> constructor for specifying the length of a duration. For example, to create a set representing a daily recurrence at 10:30 each day, we write this:</p>

<pre class="sh_perl">  my $daily_at_10_30_set =
      DateTime::Event::Recurrence-&#62;daily( hours =&#62; 10, minutes =&#62; 30 );</pre>

<p>To represent every <i>Tuesday</i> (second day of the week):</p>

<pre class="sh_perl">  my $weekly_on_tuesday_set =
      DateTime::Event::Recurrence-&#62;weekly( days =&#62; 2 );</pre>

<p>A negative duration counts backwards from the end of the period. This is done in the same manner as is specified in RFC 2445 (iCal).</p>

<p>Negative durations are useful for creating recurrences such as the <i>last day of each month</i>:</p>

<pre class="sh_perl">  my $last_day_of_month_set =
      DateTime::Event::Recurrence-&#62;monthly( days =&#62; -1 );</pre>

<p>You can also provide multiple sets of duration arguments, such as this:</p>

<pre class="sh_perl">    my $set = DateTime::Event::Recurrence-&#62;daily
                  ( hours =&#62;   [ 10, 14,  -1 ],
                    minutes =&#62; [ 15, 30, -15 ],
                  );</pre>

<p>This specifies a recurrence occurring every day at these 9 different times:</p>

<pre class="sh_perl">  10:15,  10:30,  10:45,   # +10h         ( +15min / +30min / last 15min (-15) )
  14:15,  14:30,  14:45,   # +14h         ( +15min / +30min / last 15min (-15) )
  23:15,  23:30,  23:45,   # last 1h (-1) ( +15min / +30min / last 15min (-15) )</pre>

<p>To create a set of recurrences occurring every thirty seconds, we could do this:</p>

<pre class="sh_perl">    my $every_30_seconds_set =
        DateTime::Event::Recurrence-&#62;minutely( seconds =&#62; [ 0, 30 ] );</pre>

<p>The following is also valid. See the section on the &#34;interval&#34; parameter:</p>

<pre class="sh_perl">    my $every_30_seconds_set =
        DateTime::Event::Recurrence-&#62;secondly( interval =&#62; 30 );</pre>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Invalid_DateTimes"
>Invalid DateTimes</a></h2>

<p>Invalid values are skipped at run time.</p>

<p>For example, when days are added to a month, the result is checked for a nonexisting day (such as 31 or 30), and the invalid datetimes are skipped.</p>

<p>Another example of this would be creating a set via the <code>daily()</code> method and specifying <code>hours =&#62; 25</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_&#34;days&#34;_Parameter"
>The &#34;days&#34; Parameter</a></h2>

<p>The &#34;days&#34; parameter can be combined with yearly, monthly, and weekly recurrences, resulting in six possible meanings:</p>

<pre class="sh_perl">    # tuesday of every week
    my $set = DateTime::Event::Recurrence-&#62;weekly( days =&#62; 2 );

    # 10th day of every month
    my $set = DateTime::Event::Recurrence-&#62;monthly( days =&#62; 10 );

    # second tuesday of every month
    my $set = DateTime::Event::Recurrence-&#62;monthly( weeks =&#62; 2, days =&#62; 2 );

    # 10th day of every year
    my $set = DateTime::Event::Recurrence-&#62;yearly( days =&#62; 10 );

    # 10th day of every december
    my $set = DateTime::Event::Recurrence-&#62;yearly( months =&#62; 12, days =&#62; 10 );

    # second tuesday of every year
    my $set = DateTime::Event::Recurrence-&#62;yearly( weeks =&#62; 2, days =&#62; 2 );</pre>

<p>Week days can also be called by name, as is specified in RFC 2445 (iCal):</p>

<pre class="sh_perl">  my $weekly_on_tuesday_set =
      DateTime::Event::Recurrence-&#62;weekly( days =&#62; &#39;tu&#39; );</pre>

<p>The &#34;days&#34; parameter defaults to &#34;the first day&#34;. See also the section on the &#34;week start day&#34; parameter.</p>

<pre class="sh_perl">    # second monday of every month
    my $set = DateTime::Event::Recurrence-&#62;monthly( weeks =&#62; 2 );</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_&#34;interval&#34;_and_&#34;start&#34;_Parameters"
>The &#34;interval&#34; and &#34;start&#34; Parameters</a></h2>

<p>The &#34;interval&#34; parameter represents how often the recurrence rule repeats.</p>

<p>The optional &#34;start&#34; parameter specifies where to start counting:</p>

<pre class="sh_perl">    my $dt_start = DateTime-&#62;new( year =&#62; 2003, month =&#62; 6, day =&#62; 15 );

    my $set = DateTime::Event::Recurrence-&#62;daily
                  ( interval =&#62; 11,
                    hours    =&#62; 10,
                    minutes  =&#62; 30,
                    start    =&#62; $dt_start,
                  );</pre>

<p>This specifies a recurrence that happens at 10:30 on the day specified by <code>start =&#62; $dt</code>, and then every 11 days <i>before and after</i> <code>$dt</code>. So we get a set like this:</p>

<pre class="sh_perl">    ...
    2003-06-04T10:30:00,
    2003-06-15T10:30:00,
    2003-06-26T10:30:00,
    ...</pre>

<p>In this case, the method is used to specify the unit, so <code>daily()</code> means that our unit is a day, and <code>interval =&#62; 11</code> specifies the quantity of our unit.</p>

<p>The &#34;start&#34; parameter should have no time zone.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_&#34;week_start_day&#34;_Parameter"
>The &#34;week_start_day&#34; Parameter</a></h2>

<p>The <code>week_start_day</code> parameter is intended for internal use by the <code>DateTime::Event::ICal</code> module, for generating RFC2445 recurrences.</p>

<p>The <code>week_start_day</code> represents how the &#39;first week&#39; of a period is calculated:</p>

<p>&#34;mo&#34; - this is the default. The first week is one that starts in monday, and has <i>the most days</i> in this period.</p>

<p>&#34;tu&#34;, &#34;we&#34;, &#34;th&#34;, &#34;fr&#34;, &#34;sa&#34;, &#34;su&#34; - The first week is one that starts in this week-day, and has <i>the most days</i> in this period. Works for <code>weekly</code> and <code>yearly</code> recurrences.</p>

<p>&#34;1tu&#34;, &#34;1we&#34;, &#34;1th&#34;, &#34;1fr&#34;, &#34;1sa&#34;, &#34;1su&#34; - The first week is one that starts in this week-day, and has <i>all days</i> in this period. This works for <code>weekly()</code>, <code>monthly()</code> and <code>yearly()</code> recurrences.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Time_Zones"
>Time Zones</a></h2>

<p>Recurrences are created in the &#39;floating&#39; time zone, as specified in the <code>DateTime</code> module.</p>

<p>If you want to specify a time zone for a recurrence, you can do this by calling <code>set_time_zone()</code> on the returned set:</p>

<pre class="sh_perl">  my $daily = DateTime::Event::Recurrence-&#62;daily;
  $daily-&#62;set_time_zone( &#39;Europe/Berlin&#39; );</pre>

<p>You can also pass a <code>DateTime.pm</code> object with a time zone to the set&#39;s <code>next()</code> and <code>previous()</code> methods:</p>

<pre class="sh_perl">  my $dt = DateTime-&#62;today( time_zone =&#62; &#39;Europe/Berlin&#39; );
  my $next = $daily-&#62;next($dt);</pre>

<p>A recurrence can be affected DST changes, so it would be possible to specify a recurrence that creates nonexistent datetimes. Because <code>DateTime.pm</code> throws an exception if asked to create a non-existent datetime, please be careful when setting a time zone for your recurrence.</p>

<p>It might be preferable to always use &#34;UTC&#34; for your sets, and then convert the returned object to the desired time zone.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Leap_Seconds"
>Leap Seconds</a></h2>

<p>There are no leap seconds, because the recurrences are created in the &#39;floating&#39; time zone.</p>

<p>The value <code>60</code> for seconds (the leap second) is ignored. If you <i>really</i> want the leap second, then specify the second as <code>-1</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Flavio Soibelmann Glock fglock@pucrs.br</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CREDITS"
>CREDITS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The API was developed with help from the people in the datetime@perl.org list.</p>

<p>Special thanks to Dave Rolsky, Ron Hill and Matt Sisk for being around with ideas.</p>

<p>If you can understand what this module does by reading the docs, you should thank Dave Rolsky. If you can&#39;t understand it, yell at him. He also helped removing weird idioms from the code.</p>

<p>Jerrad Pierce came with the idea to move &#34;interval&#34; from DateTime::Event::ICal to here.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2003 Flavio Soibelmann Glock. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>The full text of the license can be found in the LICENSE file included with this module.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>datetime@perl.org mailing list</p>

<p>DateTime Web page at <a href="http://datetime.perl.org/" class="podlinkurl"
>http://datetime.perl.org/</a></p>

<p>DateTime - date and time :)</p>

<p><a href="/perldoc?DateTime%3A%3ASet" class="podlinkpod"
>DateTime::Set</a> - for recurrence-set accessors docs. You can use <a href="/perldoc?DateTime%3A%3ASet" class="podlinkpod"
>DateTime::Set</a> to specify recurrences using callback subroutines.</p>

<p><a href="/perldoc?DateTime%3A%3AEvent%3A%3AICal" class="podlinkpod"
>DateTime::Event::ICal</a> - if you need more complex recurrences.</p>

<p><a href="/perldoc?DateTime%3A%3ASpanSet" class="podlinkpod"
>DateTime::SpanSet</a> - sets of intervals, including recurring sets of intervals.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78087 Uploads, 24688 Distributions
105907 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sun Apr 22 20:14:12 2012 GMT (0.0986270904541016) @cpansearch1 -->
 </body>
</html>
