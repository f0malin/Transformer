<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Proc::Short - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Proc-Short",3]);
    _gaq.push(["_setCustomVar",5,"Release","Proc-Short-0.01",3]);
    _gaq.push(["_setCustomVar",3,"Module","Proc::Short",3]);
    _gaq.push(["_setCustomVar",1,"Author","JHKIM",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Proc::Short">permalink</a></div>
  <a href="/~jhkim/">John Hanju Kim</a> &gt;
  <a href="/~jhkim/Proc-Short-0.01/">Proc-Short-0.01</a> &gt;
  Proc::Short
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/1cb3bfaecf886eab4140c10d15a5c6ce?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/J/JH/JHKIM/Proc-Short-0.01.tar.gz">Proc-Short-0.01.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Proc%3A%3AShort;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~JHKIM/Proc-Short-0.01/Short.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?IPC%3A%3AOpen3">IPC::Open3</a><br>
<a href="/perldoc?Proc%3A%3AReliable">Proc::Reliable</a><br>
<a href="/perldoc?IPC%3A%3ARun">IPC::Run</a><br>
<a href="/perldoc?File%3A%3AFind">File::Find</a><br>
<a href="/perldoc?IPC%3A%3AOpen2">IPC::Open2</a><br>
<a href="/perldoc?Proc%3A%3ASimple">Proc::Simple</a><br>
<a href="/perldoc?Proc%3A%3ASafePipe">Proc::SafePipe</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Proc%3A%3AShort">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Proc-Short">View/Report Bugs</a><br/>

</div>
</div>
  Module Version:  0.01 &nbsp;
<span class="noprint">
  <a href="/src/JHKIM/Proc-Short-0.01/Short.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <li class='indexItem indexItem1'><a href='#NOTE'>NOTE</a>
  <li class='indexItem indexItem1'><a href='#Requirements'>Requirements</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Proc::Short -- return short system calls with options</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">   use Proc::Short;

   $myproc = Proc::Short-&#62;new();  # create a new process object

   # settings below represent defaults
   $myproc-&#62;maxtime(300);         # set final timeout after 5 minutes
   $myproc-&#62;num_tries(5);         # try 5 times at most
   $myproc-&#62;time_per_try(30);     # time per try 30 sec
   $myproc-&#62;time_btw_tries(5);    # time between tries 5 sec

   # additional options
   $myproc-&#62;accept_no_error();    # Re-try if any STDERR output
   $myproc-&#62;pattern_stdout($pat); # require STDOUT to match regex $pat
   $myproc-&#62;pattern_stderr($pat); # require STDERR to match regex $pat
   $myproc-&#62;allow_shell(0);       # never use shell for operation
   $myproc-&#62;allow_shell(1);       # allowed to use shell for op

   $myproc-&#62;run(&#34;shell-command-line&#34;); # Launch a shell process
   $myproc-&#62;run(sub { ... });          # Launch a perl subroutine
   $myproc-&#62;run(\&#38;subroutine);         # Launch a perl subroutine

   Proc::Short::debug($level);         # Turn debug on</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Proc::Short is intended to be an extension of the backticks operator in PERL which incorporates a number of options, including collecting STDOUT and STDERR separately -- plus timeout and automatic retries. A new process object is created by</p>

<pre class="sh_perl">   $myproc = Proc::Short-&#62;new();</pre>

<p>The default will timeout after 30 seconds (<i>timeout</i>) for each attempt, will try a process up to 10 times, with 5 seconds between each try. Either shell-like command lines or references to perl subroutines can be specified for launching a process in background. A simple list process, for example, can be started via the shell as</p>

<pre class="sh_perl">   ($out, $in) = $myproc-&#62;run(&#34;ls&#34;);</pre>

<p>or, as a perl subroutine, with</p>

<pre class="sh_perl">   $myproc-&#62;run(sub { return &#60;*&#62;; });</pre>

<p>The <i>run</i> Method will try to run the named process. If the process times out (after <i>time_per_try</i> seconds) or has a error defined as unacceptable, it will wait (for <i>time_btw_tries</i> seconds) and try again. This can repeat until <i>maxtime</i> seconds or <i>num_tries</i> tries of the process to be run.</p>

<p>The user can specify what constitutes an unacceptable error of STDOUT or STDERR output -- i.e. demanding a retry. One common shorthand is to have the <i>run</i> method retry if there is any return from STDERR.</p>

<pre class="sh_perl">   $myproc-&#62;accept_no_error();    # Re-try if any STDERR
   $myproc-&#62;pattern_stdout($pat); # require STDOUT to match regex $pat
   $myproc-&#62;pattern_stderr($pat); # require STDERR to match regex $pat</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following methods are available:</p>

<dl>
<dt><a name='new'></a><a name="new_(Constructor)"
>new (Constructor)</a></dt>

<dd>
<p>Create a new instance of this class by writing either</p>

<pre class="sh_perl">  $proc = new Proc::Short;   or   $proc = Proc::Short-&#62;new();</pre>

<p>The <i>new</i> method takes no arguments.</p>

<dt><a name="findexec"
>findexec</a></dt>

<dd>
<p>Find where the named executables are in the path, or die if any are not found.</p>

<pre class="sh_perl"> ($fullpath) = $proc-&#62;needexec(&#34;ssh&#34;);</pre>

<p>The <i>needexec</i> method ...</p>

<dt><a name="unixhelp"
>unixhelp</a></dt>

<dd>
<p>Try various ways to get help on a given executable.</p>

<pre class="sh_perl"> ($helpmsg) = $proc-&#62;unixhelp(&#34;ssh&#34;);</pre>

<dt><a name="unixversion"
>unixversion</a></dt>

<dd>
<p>Try various ways to get version number on a given executable.</p>

<pre class="sh_perl"> ($helpmsg) = $proc-&#62;unixhelp(&#34;ssh&#34;);</pre>

<dt><a name="run"
>run</a></dt>

<dd>
<p>Run a new process and collect the standard output and standard error via separate pipes. By default, it forks off another process and collects the output when it is done. There is a time limit of</p>

<pre class="sh_perl"> ($out, $err, $status) = $proc-&#62;run(&#34;program-name&#34;);</pre>

<p>There are a number of options. You can start execution of an independent Perl function (like &#34;eval&#34; except with timeout, retries, etc.). Simply provide the function reference like</p>

<pre class="sh_perl"> ($out, $err, $status) = $proc-&#62;run(\&#38;perl_function);</pre>

<p>or supply an unnamed subroutine:</p>

<pre class="sh_perl"> ($out, $err, $status) = $proc-&#62;run( sub { sleep(1) } );</pre>

<p>The <i>run</i> Method returns after the the function finishes, one way or another.</p>

<dt><a name="debug"
>debug</a></dt>

<dd>
<p>Switches debug messages on and off -- Proc::Short::debug(1) switches them on, Proc::Short::debug(0) keeps Proc::Short quiet.</p>

<dt><a name="accept_no_error"
>accept_no_error</a></dt>

<dd>
<p>Switches debug messages on and off -- Proc::Short::debug(1) switches them on, Proc::Short::debug(0) keeps Proc::Short quiet.</p>

<dt><a name='maxtime'></a><a name="maxtime_Return_or_set_the_maximum_time_in_seconds_per_run_method_call._Default_is_300_seconds_(i.e._5_minutes)."
>maxtime Return or set the maximum time in seconds per <i>run</i> method call. Default is 300 seconds (i.e. 5 minutes).</a></dt>

<dd>
<dt><a 
>num_tries Return or set the maximum number of tries the <i>run</i> method will attempt an operation if there are unallowed errors. Default is 5.</a></dt>

<dd>
<dt><a 
>time_per_try Return or set the maximum time in seconds for each attempt which <i>run</i> makes of an operation. Multiple tries in case of error can go longer than this. Default is 30 seconds.</a></dt>

<dd>
<dt><a 
>time_btw_tries Return or set the time in seconds between attempted operations in case of unacceptable error. Default is 5 seconds.</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTE"
>NOTE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This is an attempt to duplicate the ease of use of backticks (``) while allowing additional options like timeout or re-tries in case of error.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Requirements"
>Requirements <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>I&#39;d recommend using at least perl 5.003 -- if you don&#39;t have it, this is the time to upgrade! Get 5.005_02 or better.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>John Hanju Kim &#60;jhkim@fnal.gov&#62;</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78275 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 01:53:51 2012 GMT (0.127715110778809) @cpansearch1 -->
 </body>
</html>
