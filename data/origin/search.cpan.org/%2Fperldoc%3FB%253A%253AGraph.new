<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>B::Graph - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","B-Graph",3]);
    _gaq.push(["_setCustomVar",5,"Release","B-Graph-0.51",3]);
    _gaq.push(["_setCustomVar",3,"Module","B::Graph",3]);
    _gaq.push(["_setCustomVar",1,"Author","SMCCAM",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?B::Graph">permalink</a></div>
  <a href="/~smccam/">Stephen McCamant</a> &gt;
  <a href="/~smccam/B-Graph-0.51/">B-Graph-0.51</a> &gt;
  B::Graph
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/72f16f0cc3b4fc35d834bfbf17f8184f?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/S/SM/SMCCAM/B-Graph-0.51.tar.gz">B-Graph-0.51.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=B%3A%3AGraph;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~SMCCAM/B-Graph-0.51/Graph.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Devel%3A%3ADProf">Devel::DProf</a><br>
<a href="/perldoc?Devel%3A%3ATraceFuncs">Devel::TraceFuncs</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=B%3A%3AGraph">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=B-Graph">View/Report Bugs</a><br/>

</div>
</div>
  Module Version:  0.51 &nbsp;
<span class="noprint">
  <a href="/src/SMCCAM/B-Graph-0.51/Graph.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#OPTIONS'>OPTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#-text,_-vcg,_-dot'>-text, -vcg, -dot</a>
    <li class='indexItem indexItem2'><a href='#-addrs,_-no_addrs'>-addrs, -no_addrs</a>
    <li class='indexItem indexItem2'><a href='#-compile_order,_-run_order'>-compile_order, -run_order</a>
    <li class='indexItem indexItem2'><a href='#-SVs,_-no_SVs'>-SVs, -no_SVs</a>
    <li class='indexItem indexItem2'><a href='#-ellipses,_-rhombs'>-ellipses, -rhombs</a>
    <li class='indexItem indexItem2'><a href='#-stashes,_-no_stashes'>-stashes, -no_stashes</a>
    <li class='indexItem indexItem2'><a href='#-fileGVs,_-no_fileGVs'>-fileGVs, -no_fileGVs</a>
    <li class='indexItem indexItem2'><a href='#-SEQs,_-no_SEQs'>-SEQs, -no_SEQs</a>
    <li class='indexItem indexItem2'><a href='#-types,_-no_types'>-types, -no_types</a>
    <li class='indexItem indexItem2'><a href='#-float,_-no_float'>-float, -no_float</a>
    <li class='indexItem indexItem2'><a href='#-targlinks,_-no_targlinks'>-targlinks, -no_targlinks</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#WHAT_DOES_THIS_ALL_MEAN?'>WHAT DOES THIS ALL MEAN?</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#SvFLAGS_abbreviations'>SvFLAGS abbreviations</a>
    <li class='indexItem indexItem2'><a href='#op_flags_abbreviations'>op_flags abbreviations</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>B::Graph - Perl compiler backend to produce graphs of OP trees</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  perl -MO=Graph,-text prog.pl &#62;graph.txt

  perl -MO=Graph,-vcg prog.pl &#62;graph.vcg
  xvcg graph.vcg

  perl -MO=Graph,-dot prog.pl | dot -Tps &#62;graph.ps</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is a backend to the perl compiler (B::*) which, instead of outputting bytecode or C based on perl&#39;s compiled version of a program, writes descriptions in graph-description languages specifying graphs that show the program&#39;s structure. It currently generates descriptions for the VCG tool (<code><a href="http://www.cs.uni-sb.de/RW/users/sander/html/gsvcg1.html" class="podlinkurl"
>http://www.cs.uni-sb.de/RW/users/sander/html/gsvcg1.html</a></code>) and Dot (part of the graph visualization toolkit from AT&#38;T: <code><a href="http://www.research.att.com/sw/tools/graphviz/" class="podlinkurl"
>http://www.research.att.com/sw/tools/graphviz/</a></code>). It also can produce plain text output (which is more useful for debugging the module itself than anything else, though you might be able to make cut the nodes out and make a mobile or something similar).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OPTIONS"
>OPTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Like any other compiler backend, this module needs to be invoked using the <code>O</code> module to run correctly:</p>

<pre class="sh_perl">  perl -MO=Graph,-opt,-opt,-opt program.pl
  OR
  perl -MO=Graph,-opt,obj -e &#39;BEGIN {$obj = [&#34;hi&#34;]}; print $obj&#39;
  OR EVEN
  perl -e &#39;use O qw(Graph -opt obj obj); print &#34;hi!\n&#34;;&#39;</pre>

<p><code>Obj</code> is the name of a perl variable whose contents will be examined. It can&#39;t be a my() variable, and it shouldn&#39;t have a prefix symbol (&#39;$@^*&#39;), though you can specify a package -- the name will be used to look up a GV, whose various fields will lead to the scalar, array, and other values that correspond to the named variable. If no object is specified, the whole main program, including the CV that points to its pad, will be displayed.</p>

<p>Each of the the <code>opt</code>s can come from one of the following (each set is mutually exclusive; case and underscores are insignificant):</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="-text,_-vcg,_-dot"
>-text, -vcg, -dot</a></h2>

<p>Produce output of the appropriate type. The default is &#39;-text&#39;, which isn&#39;t useful for much of anything (it does draw some nice ASCII boxes, though).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="-addrs,_-no_addrs"
>-addrs, -no_addrs</a></h2>

<p>Each of the nodes on the graph produced corresponds to a C structure that has an address and includes pointers to other structures. The module uses these addresses to decide how to draw edges, but it makes the graph more compact if they aren&#39;t printed. The default is &#39;-no_addrs&#39;.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="-compile_order,_-run_order"
>-compile_order, -run_order</a></h2>

<p>The collection of OPs that perl compiles a script into has two different layers of structure. It has a tree structure which corresponds roughly to the synactic nesting of constructs in the source text, and a roughly linked-list representation, essentially a postorder traversal of this tree, which is used at runtime to decide what to do next. The graph can be drawn to emphasize one structure or the other. The former, &#39;compile_order&#39;, is the default, as it tends to lead to graphs with aspect ratios close to those of standard paper.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="-SVs,_-no_SVs"
>-SVs, -no_SVs</a></h2>

<p>If OPs represent a program&#39;s compiled code, SVs represent its data. This includes literal numbers and strings (IVs, NVs, PVs, PVIVs, and PVNVs), regular arrays, hashes, and references (AVs, HVs, and RVs), but also the structures that correspond to individual variables (special HVs for symbol tables and GVs to represent values within them, and special AVs that hold my() variables (as well as compiler temporaries)), structures that keep track of code (CVs), and a variety of others. The default is to display all these too, to give a complete picture, but if you aren&#39;t in a holistic mood, you can make them disappear.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="-ellipses,_-rhombs"
>-ellipses, -rhombs</a></h2>

<p>The module tries to give the nodes representing SVs a different shape from those of OPs. OPs are usually rectangular, so two obvious shapes for SVs are ellipses and rhombuses (stretched diamonds). This option currently only makes a difference for VCG (ellipse is the default).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="-stashes,_-no_stashes"
>-stashes, -no_stashes</a></h2>

<p>The hashes that perl uses to represent symbol tables are called &#39;stashes&#39;. Since every GV has a pointer back to its stash, it&#39;s virtually inevitable for the links in a graph to lead to the main stash. Unfortunately stashes, especially the main one, can be quite big, and lead to forests of other structures -- there&#39;s one GV and another SV for each magic variable, plus all of @INC and %ENV, and so on. To prevent information overload, then, the display of stashes is disabled by default.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="-fileGVs,_-no_fileGVs"
>-fileGVs, -no_fileGVs</a></h2>

<p>Another kind graph element that can be annoying are the pointers from every GV and COP (a kind of OP that occurs for every statement) to the GV that represents the file from which that code came (used for error messages). By default, these links aren&#39;t shown, to keep them from cluttering the graph. Also, perl&#39;s internal interfaces changed in a recent version, so in perl 5.005_63 or later you can&#39;t see the fileGVs at all.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="-SEQs,_-no_SEQs"
>-SEQs, -no_SEQs</a></h2>

<p>As it is visited in the peephole optimization phase, each OP gets a sequence number, which is currently used by anything (except the peephole optimizer, to avoid visiting OPs twice). If you want to see these, ask for them. (COPs have their own sequence numbers too, but they&#39;re more interesting to look at -- for instance, they&#39;re used to bound the lifetimes of lexicals).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="-types,_-no_types"
>-types, -no_types</a></h2>

<p>B::Graph always gives the type of each OP symbolically (&#39;entersub&#39;), but it can also print the numeric value of the type field, if you want. The default is no_types.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="-float,_-no_float"
>-float, -no_float</a></h2>

<p>Almost every OP has an op_next and an op_sibling pointer, and B::Graph colors them distinctively (pink and light blue, respectively). Because of this, it isn&#39;t strictly necessary to &#39;anchor&#39; the arrow on a line in the OP&#39;s box saying &#39;op_next&#39;. The float option lets the graph layout engine start these arrows wherever it wants, which can sometimes lead to a more pleasing layout, at the expense of being less obvious. The default is not to float.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="-targlinks,_-no_targlinks"
>-targlinks, -no_targlinks</a></h2>

<p>Lexical (my()) variables and temporary values used by individual OPs are stored in &#39;pads&#39;, per-code arrays linked to the CV. OPs store indexes into these arrays in the &#39;op_targ&#39; field, but B::Graph can often also draw links directly from the OP to the SV that stores the name of the variable. These links don&#39;t correspond to any real pointers, however, and they can make the graph more complicated, so they are disabled by default.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WHAT_DOES_THIS_ALL_MEAN?"
>WHAT DOES THIS ALL MEAN? <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="SvFLAGS_abbreviations"
>SvFLAGS abbreviations</a></h2>

<pre class="sh_perl">    Pb     SVs_PADBUSY   reserved for tmp or my already
    Pt     SVs_PADTMP    in use as tmp
    Pm     SVs_PADMY     in use a &#34;my&#34; variable
    T      SVs_TEMP      string is stealable?
    O      SVs_OBJECT    is &#34;blessed&#34;
    Mg     SVs_GMG       has magical get method
    Ms     SVs_SMG       has magical set method
    Mr     SVs_RMG       has random magical methods
    I      SVf_IOK       has valid public integer value
    N      SVf_NOK       has valid public numeric (float) value
    P      SVf_POK       has valid public pointer (string) value
    R      SVf_ROK       has a valid reference pointer
    F      SVf_FAKE      glob or lexical is just a copy
    L      SVf_OOK       has valid offset value (mnemonic: lvalue)
    B      SVf_BREAK     refcnt is artificially low
    Ro     SVf_READONLY  may not be modified
    i      SVp_IOK       has valid non-public integer value
    n      SVp_NOK       has valid non-public numeric value
    p      SVp_POK       has valid non-public pointer value
    S      SVp_SCREAM    has been studied?
    V      SVf_AMAGIC    has magical overloaded methods</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="op_flags_abbreviations"
>op_flags abbreviations</a></h2>

<pre class="sh_perl">    V      OPf_WANT_VOID    Want nothing (void context)
    S      OPf_WANT_SCALAR  Want single value (scalar context)
    L      OPf_WANT_LIST    Want list of any length (list context)
    K      OPf_KIDS         There is a firstborn child.
    P      OPf_PARENS       This operator was parenthesized.
                             (Or block needs explicit scope entry.)
    R      OPf_REF          Certified reference.
                             (Return container, not containee).
    M      OPf_MOD          Will modify (lvalue).
    T      OPf_STACKED      Some arg is arriving on the stack.
    *      OPf_SPECIAL      Do something weird for this op (see op.h)        </pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>VCG has a problem with boxes that have more than about 55 arrows coming out of them, so with large arrays and hashes B::Graph will stop outputting edges and some boxes may be disconnected.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Stephen McCamant &#60;smcc@CSUA.Berkeley.EDU&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="http://man.he.net/man1/dot" class="podlinkman"
>dot(1)</a>, <a href="http://man.he.net/man1/xvcg" class="podlinkman"
>xvcg(1)</a>, <a href="http://man.he.net/man1/perl" class="podlinkman"
>perl(1)</a>, <a href="http://man.he.net/man1/perlguts" class="podlinkman"
>perlguts(1)</a>.</p>

<p>If you like <a href="/~smccam/B-Graph-0.51/Graph.pm" class="podlinkpod"
>B::Graph</a>, you might also be interested in Gisle Aas&#39;s PerlGuts Illustrated, at <code><a href="http://gisle.aas.no/perl/illguts/" class="podlinkurl"
>http://gisle.aas.no/perl/illguts/</a></code>.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78260 Uploads, 24722 Distributions
105996 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 13:16:46 2012 GMT (0.29659104347229) @cpansearch1 -->
 </body>
</html>
