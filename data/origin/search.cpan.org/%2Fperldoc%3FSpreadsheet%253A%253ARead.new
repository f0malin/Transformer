<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Spreadsheet::Read - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Spreadsheet-Read",3]);
    _gaq.push(["_setCustomVar",5,"Release","Spreadsheet-Read-0.46",3]);
    _gaq.push(["_setCustomVar",3,"Module","Spreadsheet::Read",3]);
    _gaq.push(["_setCustomVar",1,"Author","HMBRAND",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Spreadsheet::Read">permalink</a></div>
  <a href="/~hmbrand/">H.Merijn Brand</a> &gt;
  <a href="/~hmbrand/Spreadsheet-Read-0.46/">Spreadsheet-Read-0.46</a> &gt;
  Spreadsheet::Read
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/a5e0d99fa9567ce0042126931972770a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/H/HM/HMBRAND/Spreadsheet-Read-0.46.tgz">Spreadsheet-Read-0.46.tgz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Spreadsheet%3A%3ARead;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~HMBRAND/Spreadsheet-Read-0.46/Read.pm">Annotate this POD
(2)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Win32%3A%3AOLE">Win32::OLE</a><br>
<a href="/perldoc?Text%3A%3ACSV_XS">Text::CSV_XS</a><br>
<a href="/perldoc?XML%3A%3AParser">XML::Parser</a><br>
<a href="/perldoc?DBD%3A%3AExcel">DBD::Excel</a><br>
<a href="/perldoc?DBD%3A%3AODBC">DBD::ODBC</a><br>
<a href="/perldoc?SQL%3A%3AStatement">SQL::Statement</a><br>
<a href="/perldoc?Net%3A%3ASSLeay">Net::SSLeay</a><br>
<a href="/perldoc?Authen%3A%3ASASL">Authen::SASL</a><br>
<a href="/perldoc?File%3A%3AFind%3A%3ARule">File::Find::Rule</a><br>
<a href="/perldoc?BSD%3A%3AResource">BSD::Resource</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Spreadsheet%3A%3ARead">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Spreadsheet-Read">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.46 &nbsp;
<span class="noprint">
  <a href="/src/HMBRAND/Spreadsheet-Read-0.46/Read.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Data_structure'>Data structure</a>
    <li class='indexItem indexItem2'><a href='#Functions'>Functions</a>
    <li class='indexItem indexItem2'><a href='#Using_CSV'>Using CSV</a>
    <li class='indexItem indexItem2'><a href='#Functions'>Functions</a>
    <li class='indexItem indexItem2'><a href='#Cell_Attributes'>Cell Attributes</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#TODO'>TODO</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> Spreadsheet::Read - Read the data from a spreadsheet</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> use Spreadsheet::Read;
 my $ref = ReadData (&#34;test.csv&#34;, sep =&#62; &#34;;&#34;);
 my $ref = ReadData (&#34;test.sxc&#34;);
 my $ref = ReadData (&#34;test.ods&#34;);
 my $ref = ReadData (&#34;test.xls&#34;);
 my $ref = ReadData (&#34;test.xlsx&#34;);
 my $ref = ReadData ($fh, parser =&#62; &#34;xls&#34;);

 my $a3 = $ref-&#62;[1]{A3}, &#34;\n&#34;; # content of field A3 of sheet 1</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Spreadsheet::Read tries to transparently read *any* spreadsheet and return its content in a universal manner independent of the parsing module that does the actual spreadsheet scanning.</p>

<p>For OpenOffice this module uses Spreadsheet::ReadSXC</p>

<p>For Microsoft Excel this module uses Spreadsheet::ParseExcel or Spreadsheet::XLSX</p>

<p>For CSV this module uses Text::CSV_XS (0.29 or up required, 0.73 or up preferred) or Text::CSV_PP (1.05 or up required).</p>

<p>For SquirrelCalc there is a very simplistic built-in parser</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Data_structure"
>Data structure</a></h2>

<p>The data is returned as an array reference:</p>

<pre class="sh_perl">  $ref = [
        # Entry 0 is the overall control hash
        { sheets  =&#62; 2,
          sheet   =&#62; {
            &#34;Sheet 1&#34;   =&#62; 1,
            &#34;Sheet 2&#34;   =&#62; 2,
            },
          type    =&#62; &#34;xls&#34;,
          parser  =&#62; &#34;Spreadsheet::ParseExcel&#34;,
          version =&#62; 0.26,
          },
        # Entry 1 is the first sheet
        { label  =&#62; &#34;Sheet 1&#34;,
          maxrow =&#62; 2,
          maxcol =&#62; 4,
          cell   =&#62; [ undef,
            [ undef, 1 ],
            [ undef, undef, undef, undef, undef, &#34;Nugget&#34; ],
            ],
          A1     =&#62; 1,
          B5     =&#62; &#34;Nugget&#34;,
          },
        # Entry 2 is the second sheet
        { label =&#62; &#34;Sheet 2&#34;,
          :
        :</pre>

<p>To keep as close contact to spreadsheet users, row and column 1 have index 1 too in the <code>cell</code> element of the sheet hash, so cell &#34;A1&#34; is the same as <code>cell</code> [1, 1] (column first). To switch between the two, there are two helper functions available: <code>cell2cr ()</code> and <code>cr2cell ()</code>.</p>

<p>The <code>cell</code> hash entry contains unformatted data, while the hash entries with the traditional labels contain the formatted values (if applicable).</p>

<p>The control hash (the first entry in the returned array ref), contains some spreadsheet meta-data. The entry <code>sheet</code> is there to be able to find the sheets when accessing them by name:</p>

<pre class="sh_perl">  my %sheet2 = %{$ref-&#62;[$ref-&#62;[0]{sheet}{&#34;Sheet 2&#34;}]};</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Functions"
>Functions</a></h2>

<dl>
<dt><a name='my'></a><a name="my_$ref_=_ReadData_($source_[,_option_=&#62;_value_[,_..._]]);"
>my $ref = ReadData ($source [, option =&#62; value [, ... ]]);</a></dt>

<dd>
<dt><a name='my'></a><a name="my_$ref_=_ReadData_(&#34;file.csv&#34;,_sep_=&#62;_&#39;,&#39;,_quote_=&#62;_&#39;&#34;&#39;);"
>my $ref = ReadData (&#34;file.csv&#34;, sep =&#62; &#39;,&#39;, quote =&#62; &#39;&#34;&#39;);</a></dt>

<dd>
<dt><a name='my'></a><a name="my_$ref_=_ReadData_(&#34;file.xls&#34;,_dtfmt_=&#62;_&#34;yyyy-mm-dd&#34;);"
>my $ref = ReadData (&#34;file.xls&#34;, dtfmt =&#62; &#34;yyyy-mm-dd&#34;);</a></dt>

<dd>
<dt><a name='my'></a><a name="my_$ref_=_ReadData_(&#34;file.ods&#34;);"
>my $ref = ReadData (&#34;file.ods&#34;);</a></dt>

<dd>
<dt><a name='my'></a><a name="my_$ref_=_ReadData_(&#34;file.sxc&#34;);"
>my $ref = ReadData (&#34;file.sxc&#34;);</a></dt>

<dd>
<dt><a name='my'></a><a name="my_$ref_=_ReadData_(&#34;content.xml&#34;);"
>my $ref = ReadData (&#34;content.xml&#34;);</a></dt>

<dd>
<dt><a name='my'></a><a name="my_$ref_=_ReadData_($content);"
>my $ref = ReadData ($content);</a></dt>

<dd>
<dt><a name='my'></a><a name="my_$ref_=_ReadData_($fh,_parser_=&#62;_&#34;xls&#34;);"
>my $ref = ReadData ($fh, parser =&#62; &#34;xls&#34;);</a></dt>

<dd>
<p>Tries to convert the given file, string, or stream to the data structure described above.</p>

<p>Processing Excel data from a stream or content is supported through a File::Temp temporary file or IO::Scalar when available.</p>

<p>ReadSXC does preserve sheet order as of version 0.20.</p>

<p>Currently supported options are:</p>

<dl>
<dt><a name="parser"
>parser</a></dt>

<dd>
<p>Force the data to be parsed by a specific format. Possible values are <code>csv</code>, <code>prl</code> (or <code>perl</code>), <code>sc</code> (or <code>squirelcalc</code>), <code>sxc</code> (or <code>oo</code>, <code>ods</code>, <code>openoffice</code>) <code>xls</code> (or <code>excel</code>), and <code>xlsx</code> (or <code>excel2007</code>).</p>

<p>When parsing streams, instead of files, it is highly recommended to pass this option.</p>

<dt><a name="cells"
>cells</a></dt>

<dd>
<p>Control the generation of named cells (&#34;A1&#34; etc). Default is true.</p>

<dt><a name="rc"
>rc</a></dt>

<dd>
<p>Control the generation of the {cell}[c][r] entries. Default is true.</p>

<dt><a name="attr"
>attr</a></dt>

<dd>
<p>Control the generation of the {attr}[c][r] entries. Default is false. See <a href="#Cell_Attributes" class="podlinkpod"
>&#34;Cell Attributes&#34;</a> below.</p>

<dt><a name="clip"
>clip</a></dt>

<dd>
<p>If set, <code>ReadData ()</code> will remove all trailing lines and columns per sheet that have no visual data. This option is only valid if <code>cells</code> is true. The default value is true if <code>cells</code> is true, and false otherwise.</p>

<dt><a name="strip"
>strip</a></dt>

<dd>
<p>If set, <code>ReadData ()</code> will remove trailing- and/or leading-whitespace from every field.</p>

<pre class="sh_perl">  strip  leading  strailing
  -----  -------  ---------
    0      n/a      n/a
    1     strip     n/a
    2      n/a     strip
    3     strip    strip</pre>

<dt><a name="sep"
>sep</a></dt>

<dd>
<p>Set separator for CSV. Default is comma <code>,</code>.</p>

<dt><a name="quote"
>quote</a></dt>

<dd>
<p>Set quote character for CSV. Default is <code>&#34;</code>.</p>

<dt><a name="dtfmt"
>dtfmt</a></dt>

<dd>
<p>Set the format for M$Excel date fields that are set to use the default date format. The default format in Excel is &#39;m-d-yy&#39;, which is both not year 2000 safe, nor very useful. The default is now &#39;yyyy-mm-dd&#39;, which is more ISO-like.</p>

<p>Note that date formatting in M$Excel is not reliable at all, as it will store/replace/change the date field separator in already stored formats if you change your locale settings. So the above mentioned default can be either &#34;m-d-yy&#34; OR &#34;m/d/yy&#34; depending on what that specific character happened to be at the time the user saved the file.</p>

<dt><a name="debug"
>debug</a></dt>

<dd>
<p>Enable some diagnostic messages to STDERR.</p>

<p>The value determines how much diagnostics are dumped (using Data::Dumper). A value of 9 and higher will dump the entire structure from the back-end parser.</p>
</dd>
</dl>

<p>All other attributes/options will be passed to the underlying parser if that parser supports attributes.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Using_CSV"
>Using CSV</a></h2>

<p>In case of CSV parsing, <code>ReadData ()</code> will use the first line of the file to auto-detect the separation character if the first argument is a file and both <code>sep</code> and <code>quote</code> are not passed as attributes. Text::CSV_XS (or Text::CSV_PP) is able to automatically detect and use <code>\r</code> line endings).</p>

<p>CSV can parse streams too, but be sure to pass <code>sep</code> and/or <code>quote</code> if these do not match the default <code>,</code> and <code>&#34;</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Functions"
>Functions</a></h2>

<dl>
<dt><a name='my'></a><a name="my_$cell_=_cr2cell_(col,_row)"
>my $cell = cr2cell (col, row)</a></dt>

<dd>
<p><code>cr2cell ()</code> converts a <code>(column, row)</code> pair (1 based) to the traditional cell notation:</p>

<pre class="sh_perl">  my $cell = cr2cell ( 4, 14); # $cell now &#34;D14&#34;
  my $cell = cr2cell (28,  4); # $cell now &#34;AB4&#34;</pre>

<dt><a name='my'></a><a name="my_($col,_$row)_=_cell2cr_($cell)"
>my ($col, $row) = cell2cr ($cell)</a></dt>

<dd>
<p><code>cell2cr ()</code> converts traditional cell notation to a <code>(column, row)</code> pair (1 based):</p>

<pre class="sh_perl">  my ($col, $row) = cell2cr (&#34;D14&#34;); # returns ( 4, 14)
  my ($col, $row) = cell2cr (&#34;AB4&#34;); # returns (28,  4)</pre>

<dt><a name='my'></a><a name="my_@row_=_row_($ref,_$row)"
>my @row = row ($ref, $row)</a></dt>

<dd>
<dt><a name='my'></a><a name="my_@row_=_Spreadsheet::Read::row_($ss-&#62;[1],_3)"
>my @row = Spreadsheet::Read::row ($ss-&#62;[1], 3)</a></dt>

<dd>
<p>Get full row of formatted values (like <code>$ss-&#62;{A3} .. $ss-&#62;{G3}</code>)</p>

<p>Note that the indexes in the returned list are 0-based.</p>

<p><code>row ()</code> is not imported by default, so either specify it in the use argument list, or call it fully qualified.</p>

<dt><a name='my'></a><a name="my_@row_=_cellrow_($ref,_$row)"
>my @row = cellrow ($ref, $row)</a></dt>

<dd>
<dt><a name='my'></a><a name="my_@row_=_Spreadsheet::Read::cellrow_($ss-&#62;[1],_3)"
>my @row = Spreadsheet::Read::cellrow ($ss-&#62;[1], 3)</a></dt>

<dd>
<p>Get full row of unformatted values (like <code>$ss-&#62;{cell}[1][3] .. $ss-&#62;{cell}[7][3]</code>)</p>

<p>Note that the indexes in the returned list are 0-based.</p>

<p><code>cellrow ()</code> is not imported by default, so either specify it in the use argument list, or call it fully qualified.</p>

<dt><a name='my'></a><a name="my_@rows_=_rows_($ref)"
>my @rows = rows ($ref)</a></dt>

<dd>
<dt><a name='my'></a><a name="my_@rows_=_Spreadsheet::Read::rows_($ss-&#62;[1])"
>my @rows = Spreadsheet::Read::rows ($ss-&#62;[1])</a></dt>

<dd>
<p>Convert <code>{cell}</code>&#39;s <code>[column][row]</code> to a <code>[row][column]</code> list.</p>

<p>Note that the indexes in the returned list are 0-based, where the index in the <code>{cell}</code> entry is 1-based.</p>

<p><code>rows ()</code> is not imported by default, so either specify it in the use argument list, or call it fully qualified.</p>

<dt><a name='parses'></a><a name="parses_($format)"
>parses ($format)</a></dt>

<dd>
<dt><a name='Spreadsheet'></a><a name="Spreadsheet::Read::parses_(&#34;CSV&#34;)"
>Spreadsheet::Read::parses (&#34;CSV&#34;)</a></dt>

<dd>
<p><code>parses ()</code> returns Spreadsheet::Read&#39;s capability to parse the required format.</p>

<p><code>parses ()</code> is not imported by default, so either specify it in the use argument list, or call it fully qualified.</p>

<dt><a name='my'></a><a name="my_$rs_version_=_Version_()"
>my $rs_version = Version ()</a></dt>

<dd>
<dt><a name='my'></a><a name="my_$v_=_Spreadsheet::Read::Version_()"
>my $v = Spreadsheet::Read::Version ()</a></dt>

<dd>
<p>Returns the current version of Spreadsheet::Read.</p>

<p><code>Version ()</code> is not imported by default, so either specify it in the use argument list, or call it fully qualified.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Cell_Attributes"
>Cell Attributes</a></h2>

<p>If the constructor was called with <code>attr</code> having a true value, effort is made to analyze and store field attributes like this:</p>

<pre class="sh_perl">    { label  =&#62; &#34;Sheet 1&#34;,
      maxrow =&#62; 5,
      maxcol =&#62; 2,
      cell   =&#62; [ undef,
        [ undef, 1 ],
        [ undef, undef, undef, undef, undef, &#34;Nugget&#34; ],
        ],
      attr   =&#62; [ undef,
        [ undef, {
          type    =&#62; &#34;numeric&#34;,
          fgcolor =&#62; &#34;#ff0000&#34;,
          bgcolor =&#62; undef,
          font    =&#62; &#34;Arial&#34;,
          size    =&#62; undef,
          format  =&#62; &#34;## ##0.00&#34;,
          halign  =&#62; &#34;right&#34;,
          valign  =&#62; &#34;top&#34;,
          uline   =&#62; 0,
          bold    =&#62; 0,
          italic  =&#62; 0,
          wrap    =&#62; 0,
          merged  =&#62; 0,
          hidden  =&#62; 0,
          locked  =&#62; 0,
          enc     =&#62; &#34;utf-8&#34;,
          }, ]
        [ undef, undef, undef, undef, undef, {
          type    =&#62; &#34;text&#34;,
          fgcolor =&#62; &#34;#e2e2e2&#34;,
          bgcolor =&#62; undef,
          font    =&#62; &#34;Letter Gothic&#34;,
          size    =&#62; 15,
          format  =&#62; undef,
          halign  =&#62; &#34;left&#34;,
          valign  =&#62; &#34;top&#34;,
          uline   =&#62; 0,
          bold    =&#62; 0,
          italic  =&#62; 0,
          wrap    =&#62; 0,
          merged  =&#62; 0,
          hidden  =&#62; 0,
          locked  =&#62; 0,
          enc     =&#62; &#34;iso8859-1&#34;,
          }, ]
      A1     =&#62; 1,
      B5     =&#62; &#34;Nugget&#34;,
      },</pre>

<p>This has now been partially implemented, mainly for Excel, as the other parsers do not (yet) support all of that. YMMV.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TODO"
>TODO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name="Options"
>Options</a></dt>

<dd>
<dl>
<dt><a name='Module'></a><a name="Module_Options"
>Module Options</a></dt>

<dd>
<p>New Spreadsheet::Read options are bound to happen. I&#39;m thinking of an option that disables the reading of the data entirely to speed up an index request (how many sheets/fields/columns). See <code>xlscat -i</code>.</p>

<dt><a name='Parser'></a><a name="Parser_options"
>Parser options</a></dt>

<dd>
<p>Try to transparently support as many options as the encapsulated modules support regarding (un)formatted values, (date) formats, hidden columns rows or fields etc. These could be implemented like <code>attr</code> above but names <code>meta</code>, or just be new values in the <code>attr</code> hashes.</p>
</dd>
</dl>

<dt><a name='Other'></a><a name="Other_spreadsheet_formats"
>Other spreadsheet formats</a></dt>

<dd>
<p>I consider adding any spreadsheet interface that offers a usable API.</p>

<dt><a name='Add'></a><a name="Add_an_OO_interface"
>Add an OO interface</a></dt>

<dd>
<p>Consider making the ref an object, though I currently don&#39;t see the big advantage (yet). Maybe I&#39;ll make it so that it is a hybrid functional / OO interface.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='Text'></a><a name="Text::CSV_XS,_Text::CSV_PP"
><a href="/perldoc?Text%3A%3ACSV_XS" class="podlinkpod"
>Text::CSV_XS</a>, <a href="/perldoc?Text%3A%3ACSV_PP" class="podlinkpod"
>Text::CSV_PP</a></a></dt>

<dd>
<p><a href="http://search.cpan.org/dist/Text-CSV_XS" class="podlinkurl"
>http://search.cpan.org/dist/Text-CSV_XS</a> , <a href="http://search.cpan.org/dist/Text-CSV_PP" class="podlinkurl"
>http://search.cpan.org/dist/Text-CSV_PP</a> , and <a href="http://search.cpan.org/dist/Text-CSV" class="podlinkurl"
>http://search.cpan.org/dist/Text-CSV</a> .</p>

<p><a href="/perldoc?Text%3A%3ACSV" class="podlinkpod"
>Text::CSV</a> is a wrapper over <a href="/perldoc?Text%3A%3ACSV_XS" class="podlinkpod"
>Text::CSV_XS</a> (the fast XS version) and/or <a href="/perldoc?Text%3A%3ACSV_PP" class="podlinkpod"
>Text::CSV_PP</a> (the pure perl version)</p>

<dt><a name='Spreadsheet'></a><a name="Spreadsheet::ParseExcel"
><a href="/perldoc?Spreadsheet%3A%3AParseExcel" class="podlinkpod"
>Spreadsheet::ParseExcel</a></a></dt>

<dd>
<p><a href="http://search.cpan.org/dist/Spreadsheet-ParseExcel" class="podlinkurl"
>http://search.cpan.org/dist/Spreadsheet-ParseExcel</a></p>

<dt><a name='Spreadsheet'></a><a name="Spreadsheet::XLSX"
><a href="/perldoc?Spreadsheet%3A%3AXLSX" class="podlinkpod"
>Spreadsheet::XLSX</a></a></dt>

<dd>
<p><a href="http://search.cpan.org/dist/Spreadsheet-XLSX" class="podlinkurl"
>http://search.cpan.org/dist/Spreadsheet-XLSX</a></p>

<dt><a name='Spreadsheet'></a><a name="Spreadsheet::ReadSXC"
><a href="/perldoc?Spreadsheet%3A%3AReadSXC" class="podlinkpod"
>Spreadsheet::ReadSXC</a></a></dt>

<dd>
<p><a href="http://search.cpan.org/dist/Spreadsheet-ReadSXC" class="podlinkurl"
>http://search.cpan.org/dist/Spreadsheet-ReadSXC</a></p>

<dt><a name='Spreadsheet'></a><a name="Spreadsheet::BasicRead"
><a href="/perldoc?Spreadsheet%3A%3ABasicRead" class="podlinkpod"
>Spreadsheet::BasicRead</a></a></dt>

<dd>
<p><a href="http://search.cpan.org/dist/Spreadsheet-BasicRead" class="podlinkurl"
>http://search.cpan.org/dist/Spreadsheet-BasicRead</a> for xlscat likewise functionality (Excel only)</p>

<dt><a name='Spreadsheet'></a><a name="Spreadsheet::ConvertAA"
><a href="/perldoc?Spreadsheet%3A%3AConvertAA" class="podlinkpod"
>Spreadsheet::ConvertAA</a></a></dt>

<dd>
<p><a href="http://search.cpan.org/dist/Spreadsheet-ConvertAA" class="podlinkurl"
>http://search.cpan.org/dist/Spreadsheet-ConvertAA</a> for an alternative set of cell2cr () / cr2cell () pair</p>

<dt><a name='Spreadsheet'></a><a name="Spreadsheet::Perl"
><a href="/perldoc?Spreadsheet%3A%3APerl" class="podlinkpod"
>Spreadsheet::Perl</a></a></dt>

<dd>
<p><a href="http://search.cpan.org/dist/Spreadsheet-Perl" class="podlinkurl"
>http://search.cpan.org/dist/Spreadsheet-Perl</a> offers a Pure Perl implementation of a spreadsheet engine. Users that want this format to be supported in <a href="/~hmbrand/Spreadsheet-Read-0.46/Read.pm" class="podlinkpod"
>Spreadsheet::Read</a> are hereby motivated to offer patches. It&#39;s not high on my TODO-list.</p>

<dt><a name="xls2csv"
>xls2csv</a></dt>

<dd>
<p><a href="http://search.cpan.org/dist/xls2csv" class="podlinkurl"
>http://search.cpan.org/dist/xls2csv</a> offers an alternative for my <code>xlscat -c</code>, in the xls2csv tool, but this tool focuses on character encoding transparency, and requires some other modules.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>H.Merijn Brand, &#60;h.m.brand@xs4all.nl&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (C) 2005-2012 H.Merijn Brand</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78167 Uploads, 24706 Distributions
105970 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Tue Apr 24 22:14:52 2012 GMT (0.0820789337158203) @cpansearch1 -->
 </body>
</html>
