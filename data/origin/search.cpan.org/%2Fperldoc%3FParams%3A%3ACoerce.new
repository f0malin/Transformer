<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Params::Coerce - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Params-Coerce",3]);
    _gaq.push(["_setCustomVar",5,"Release","Params-Coerce-0.14",3]);
    _gaq.push(["_setCustomVar",3,"Module","Params::Coerce",3]);
    _gaq.push(["_setCustomVar",1,"Author","ADAMK",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Params::Coerce">permalink</a></div>
  <a href="/~adamk/">Adam Kennedy</a> &gt;
  <a href="/~adamk/Params-Coerce-0.14/">Params-Coerce-0.14</a> &gt;
  Params::Coerce
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/884124d0169f41668fb3f948b2ba8b0a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/A/AD/ADAMK/Params-Coerce-0.14.tar.gz">Params-Coerce-0.14.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Params%3A%3ACoerce;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~ADAMK/Params-Coerce-0.14/lib/Params/Coerce.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 2</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Params-Coerce">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.14 &nbsp;
<span class="noprint">
  <a href="/src/ADAMK/Params-Coerce-0.14/lib/Params/Coerce.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#What_is_Coercion'>What is Coercion</a>
    <li class='indexItem indexItem2'><a href='#__as_Another_Class_Methods'>__as_Another_Class Methods</a>
    <li class='indexItem indexItem2'><a href='#__from_Another_Class_Methods'>__from_Another_Class Methods</a>
    <li class='indexItem indexItem2'><a href='#Loading_Classes'>Loading Classes</a>
    <li class='indexItem indexItem2'><a href='#Coercing_a_Parameter'>Coercing a Parameter</a>
    <li class='indexItem indexItem2'><a href='#Importing_Parameter_Coercion_Methods'>Importing Parameter Coercion Methods</a>
    <li class='indexItem indexItem2'><a href='#The_from_Constructor'>The from Constructor</a>
    <li class='indexItem indexItem2'><a href='#Chained_Coercion'>Chained Coercion</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#coerce_$class,_$param'>coerce $class, $param</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#TO_DO'>TO DO</a>
  <li class='indexItem indexItem1'><a href='#SUPPORT'>SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Params::Coerce - Allows your classes to do coercion of parameters</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  # Coerce a object of class Foo to a Bar
  my $bar = Params::Coerce::coerce(&#39;Bar&#39;, $Foo)
  
  # Create a coercion param function
  use Params::Coerce &#39;_Bar&#39; =&#62; &#39;Bar&#39;;
  my $bar = _Bar($Foo);
  
  # Usage when Bar has a &#39;from&#39; method
  my $bar = Bar-&#62;from($Foo);</pre>

<p>Real world example using <a href="/perldoc?HTML%3A%3ALocation" class="podlinkpod"
>HTML::Location</a>.</p>

<pre class="sh_perl">  # My class needs a URI
  package Web::Spider;
  
  use URI;
  use Params::Coerce &#39;coerce&#39;;
  
  sub new {
      my $class = shift;
      
      # Where do we start spidering
      my $start = coerce(&#39;URI&#39;, shift) or die &#34;Wasn&#39;t passed a URI&#34;;
      
      bless { root =&#62; $start }, $class;
  }
  
  #############################################
  # Now we can do the following
  
  # Pass a URI as normal
  my $URI     = URI-&#62;new(&#39;<a href="http://ali.as/" class="podlinkurl"
>http://ali.as/</a>&#39;);
  my $Spider1 = Web::Spider-&#62;new( $URI );
  
  # We can also pass anything that can be coerced into being a URI
  my $Website = HTML::Location-&#62;new( &#39;/home/adam/public_html&#39;, &#39;<a href="http://ali.as" class="podlinkurl"
>http://ali.as</a>&#39; );
  my $Spider2 = Web::Spider-&#62;new( $Website );</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A big part of good API design is that we should be able to be flexible in the ways that we take parameters.</p>

<p>Params::Coerce attempts to encourage this, by making it easier to take a variety of different arguments, while adding negligable additional complexity to your code.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="What_is_Coercion"
>What is Coercion</a></h2>

<p>&#34;Coercion&#34; in computing terms generally referse to &#34;implicit type conversion&#34;. This is where data and object are converted from one type to another behind the scenes, and you just just magically get what you need.</p>

<p>The <a href="/perldoc?overload" class="podlinkpod"
>overload</a> pragma, and its string overloading is the form of coercion you are most likely to have encountered in Perl programming. In this case, your object is automatically (within perl itself) coerced into a string.</p>

<p><code>Params::Coerce</code> is intended for higher-order coercion between various types of different objects, for use mainly in subroutine and (mostly) method parameters, particularly on external APIs.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="__as_Another_Class_Methods"
>__as_Another_Class Methods</a></h2>

<p>At the heart of <code>Params::Coerce</code> is the ability to transform objects from one thing to another. This can be done by a variety of different mechanisms.</p>

<p>The prefered mechanism for this is by creating a specially named method in a class that indicates it can be coerced into another type of object.</p>

<p>As an example, <a href="/perldoc?HTML%3A%3ALocation" class="podlinkpod"
>HTML::Location</a> provides an object method that returns an equivalent <a href="/perldoc?URI" class="podlinkpod"
>URI</a> object.</p>

<pre class="sh_perl">  # In the package HTML::Location
  
  # Coerce to a URI
  sub __as_URI {
        my $self = shift;
        return URI-&#62;new( $self-&#62;uri );
  }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="__from_Another_Class_Methods"
>__from_Another_Class Methods</a></h2>

<p>From version 0.04 of <code>Params::Coerce</code>, you may now also provide __from_Another_Class methods as well. In the above example, rather then having to define a method in <a href="/perldoc?HTML%3A%3ALocation" class="podlinkpod"
>HTML::Location</a>, you may instead define one in <a href="/perldoc?URI" class="podlinkpod"
>URI</a>. The following code has an identical effect.</p>

<pre class="sh_perl">  # In the package URI
  
  # Coerce from a HTML::Location
  sub __from_HTML_Location {
        my $Location = shift;
        return URI-&#62;new( $Location-&#62;uri );
  }</pre>

<p><code>Params::Coerce</code> will only look for the __from method, if it does not find a __as method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Loading_Classes"
>Loading Classes</a></h2>

<p>One thing to note with the <code>__as_Another_Class</code> methods is that you are <b>not</b> required to load the class you are converting to in the class you are converting from.</p>

<p>In the above example, <a href="/perldoc?HTML%3A%3ALocation" class="podlinkpod"
>HTML::Location</a> does <b>not</b> have to load the URI class. The need to load the classes for every object we might some day need to be coerced to would result in highly excessive resource usage.</p>

<p>Instead, <code>Params::Coerce</code> guarentees that the class you are converting to <code>will</code> be loaded before it calls the __as_Another_Class method. Of course, in most situations you will have already loaded it for another purpose in either the From or To classes and this won&#39;t be an issue.</p>

<p>If you make use of some class <b>other than</b> the class you are being coerced to in the __as_Another_Class method, you will need to make sure that is loaded in your code, but it is suggested that you do it at run-time with a <code>require</code> if you are not using it already elsewhere.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Coercing_a_Parameter"
>Coercing a Parameter</a></h2>

<p>The most explicit way of accessing the coercion functionality is with the Params::Coerce::coerce function. It takes as its first argument the name of the class you wish to coerce <b>to</b>, followed by the parameter to which you wish to apply the coercion.</p>

<pre class="sh_perl">  package My::Class;
  
  use URI ();
  use Params::Coerce &#39;_URI&#39; =&#62; &#39;URI&#39;;
  
  sub new {
        my $class = shift;
        
        # Take a URI argument
        my $URI = Params::Coerce::coerce(&#39;URI&#39;, shift) or return;
        
        ...
  }</pre>

<p>For people doing procedural programming, you may also import this function.</p>

<pre class="sh_perl">  # Import the coerce function
  use Params::Coerce &#39;coerce&#39;;</pre>

<p>Please note thatThe <code>coerce|Params::Coerce</code> function is the <b>only</b> function that can be imported, and that the two argument pragma (or the passing of two or more arguments to -&#62;import) means something different entirely.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Importing_Parameter_Coercion_Methods"
>Importing Parameter Coercion Methods</a></h2>

<p>The second way of using Params::Coerce, and the more common one for Object-Oriented programming, is to create method specifically for taking parameters in a coercing manner.</p>

<pre class="sh_perl">  package My::Class;
  
  use URI ();
  use Params::Coerce &#39;_URI&#39; =&#62; &#39;URI&#39;;
  
  sub new {
        my $class = shift;

        # Take a URI as parameter
        my $URI1 = $class-&#62;_URI(shift) or return;
        my $URI2 = _URI(shift) or return;
        ...
  }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_from_Constructor"
>The <code>from</code> Constructor</a></h2>

<p>From version <code>0.11</code> of <code>Params::Coerce</code>, an additional mechanism is available with the importable <code>from</code> constructor.</p>

<pre class="sh_perl">  package My::Class;
  
  use Params::Coerce &#39;from&#39;;
  
  package Other::Class;
  
  sub method {
        my $self = shift;
        my $My   = My::Class-&#62;from(shift) or die &#34;Bad param&#34;;
        ...
  }</pre>

<p>This is mainly a convenience. The above is equivalent to</p>

<pre class="sh_perl">  package My::Class;
  
  use Params::Coerce &#39;from&#39; =&#62; &#39;Params::Coerce&#39;;</pre>

<p>In future versions, this <code>-&#62;from</code> syntax may also tweak the resolution order of the coercion.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Chained_Coercion"
>Chained Coercion</a></h2>

<p>While it is intended that Params::Coerce will eventually support coercion using multiple steps, like <code>&#60;Foo::Bar-</code>__as_HTML_Location-&#62;__as_URI&#62;&#62;, it is not currently capable of this. At this time only a single coercion step is supported.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="coerce_$class,_$param"
>coerce $class, $param</a></h2>

<p>The <code>coerce</code> function takes a class name and a single parameter and attempts to coerce the parameter into the intended class, or one of its subclasses.</p>

<p>Please note that it is the responsibility of the consuming class to ensure that the class you wish to coerce to is loaded. <code>coerce</code> will check this and die is it is not loaded.</p>

<p>Returns an instance of the class you specify, or one of its subclasses. Returns <code>undef</code> if the parameter cannot be coerced into the class you wish.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TO_DO"
>TO DO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>- Write more unit tests</p>

<p>- Implement chained coercion</p>

<p>- Provide a way to coerce to string, int, etc that is compatible with <a href="/perldoc?overload" class="podlinkpod"
>overload</a> and other types of things.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT"
>SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Bugs should always be submitted via the CPAN bug tracker</p>

<p><a href="http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Param-Coerce" class="podlinkurl"
>http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Param-Coerce</a></p>

<p>For other issues, contact the maintainer</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Adam Kennedy &#60;adamk@cpan.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2004 - 2006 Adam Kennedy.</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>The full text of the license can be found in the LICENSE file included with this module.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78272 Uploads, 24723 Distributions
106001 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 19:24:44 2012 GMT (0.754822015762329) @cpansearch1 -->
 </body>
</html>
