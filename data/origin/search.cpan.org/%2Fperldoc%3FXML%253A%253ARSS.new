<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>XML::RSS - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","XML-RSS",3]);
    _gaq.push(["_setCustomVar",5,"Release","XML-RSS-1.49",3]);
    _gaq.push(["_setCustomVar",3,"Module","XML::RSS",3]);
    _gaq.push(["_setCustomVar",1,"Author","SHLOMIF",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?XML::RSS">permalink</a></div>
  <a href="/~shlomif/">Shlomi Fish</a> &gt;
  <a href="/~shlomif/XML-RSS-1.49/">XML-RSS-1.49</a> &gt;
  XML::RSS
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/072331b92b0e6e9d9bc31c3af8f8ccea?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/S/SH/SHLOMIF/XML-RSS-1.49.tar.gz">XML-RSS-1.49.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=XML%3A%3ARSS;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~SHLOMIF/XML-RSS-1.49/lib/XML/RSS.pm">Annotate this POD
</a></p>
     <p style="text-align:right"><a href="http://perl-rss.sourceforge.net/">Website</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?XML%3A%3AParser">XML::Parser</a><br>
<a href="/perldoc?LWP%3A%3ASimple">LWP::Simple</a><br>
<a href="/perldoc?XML%3A%3ASimple">XML::Simple</a><br>
<a href="/perldoc?LWP%3A%3AUserAgent">LWP::UserAgent</a><br>
<a href="/perldoc?XML%3A%3ALibXML">XML::LibXML</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?HTML%3A%3AEntities">HTML::Entities</a><br>
<a href="/perldoc?XML%3A%3ATwig">XML::Twig</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?XML%3A%3ADOM">XML::DOM</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=XML%3A%3ARSS">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 2</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 3</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=XML-RSS">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.49 &nbsp;
<span class="noprint">
  <a href="/src/SHLOMIF/XML-RSS-1.49/lib/XML/RSS.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#RSS_1.0_MODULES'>RSS 1.0 MODULES</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Non-API_Methods'>Non-API Methods</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#$rss-&#62;as_rss_0_9()'>$rss-&#62;as_rss_0_9()</a>
    <li class='indexItem indexItem2'><a href='#$rss-&#62;as_rss_0_9_1()'>$rss-&#62;as_rss_0_9_1()</a>
    <li class='indexItem indexItem2'><a href='#$rss-&#62;as_rss_1_0()'>$rss-&#62;as_rss_1_0()</a>
    <li class='indexItem indexItem2'><a href='#$rss-&#62;as_rss_2_0()'>$rss-&#62;as_rss_2_0()</a>
    <li class='indexItem indexItem2'><a href='#$rss-&#62;handle_char()'>$rss-&#62;handle_char()</a>
    <li class='indexItem indexItem2'><a href='#$rss-&#62;handle_dec()'>$rss-&#62;handle_dec()</a>
    <li class='indexItem indexItem2'><a href='#$rss-&#62;handle_start()'>$rss-&#62;handle_start()</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#SOURCE_AVAILABILITY'>SOURCE AVAILABILITY</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#LICENSE'>LICENSE</a>
  <li class='indexItem indexItem1'><a href='#CREDITS'>CREDITS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>XML::RSS - creates and updates RSS files</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> # create an RSS 1.0 file (<a href="http://purl.org/rss/1.0/" class="podlinkurl"
>http://purl.org/rss/1.0/</a>)
 use XML::RSS;
 my $rss = XML::RSS-&#62;new(version =&#62; &#39;1.0&#39;);
 $rss-&#62;channel(
   title        =&#62; &#34;freshmeat.net&#34;,
   link         =&#62; &#34;<a href="http://freshmeat.net" class="podlinkurl"
>http://freshmeat.net</a>&#34;,
   description  =&#62; &#34;the one-stop-shop for all your Linux software needs&#34;,
   dc =&#62; {
     date       =&#62; &#39;2000-08-23T07:00+00:00&#39;,
     subject    =&#62; &#34;Linux Software&#34;,
     creator    =&#62; &#39;scoop@freshmeat.net&#39;,
     publisher  =&#62; &#39;scoop@freshmeat.net&#39;,
     rights     =&#62; &#39;Copyright 1999, Freshmeat.net&#39;,
     language   =&#62; &#39;en-us&#39;,
   },
   syn =&#62; {
     updatePeriod     =&#62; &#34;hourly&#34;,
     updateFrequency  =&#62; &#34;1&#34;,
     updateBase       =&#62; &#34;1901-01-01T00:00+00:00&#34;,
   },
   taxo =&#62; [
     &#39;<a href="http://dmoz.org/Computers/Internet" class="podlinkurl"
>http://dmoz.org/Computers/Internet</a>&#39;,
     &#39;<a href="http://dmoz.org/Computers/PC" class="podlinkurl"
>http://dmoz.org/Computers/PC</a>&#39;
   ]
 );

 $rss-&#62;image(
   title  =&#62; &#34;freshmeat.net&#34;,
   url    =&#62; &#34;<a href="http://freshmeat.net/images/fm.mini.jpg" class="podlinkurl"
>http://freshmeat.net/images/fm.mini.jpg</a>&#34;,
   link   =&#62; &#34;<a href="http://freshmeat.net" class="podlinkurl"
>http://freshmeat.net</a>&#34;,
   dc =&#62; {
     creator  =&#62; &#34;G. Raphics (graphics at freshmeat.net)&#34;,
   },
 );

 $rss-&#62;add_item(
   title       =&#62; &#34;GTKeyboard 0.85&#34;,
   link        =&#62; &#34;<a href="http://freshmeat.net/news/1999/06/21/930003829.html" class="podlinkurl"
>http://freshmeat.net/news/1999/06/21/930003829.html</a>&#34;,
   description =&#62; &#34;GTKeyboard is a graphical keyboard that ...&#34;,
   dc =&#62; {
     subject  =&#62; &#34;X11/Utilities&#34;,
     creator  =&#62; &#34;David Allen (s2mdalle at titan.vcu.edu)&#34;,
   },
   taxo =&#62; [
     &#39;<a href="http://dmoz.org/Computers/Internet" class="podlinkurl"
>http://dmoz.org/Computers/Internet</a>&#39;,
     &#39;<a href="http://dmoz.org/Computers/PC" class="podlinkurl"
>http://dmoz.org/Computers/PC</a>&#39;
   ]
 );

 $rss-&#62;textinput(
   title        =&#62; &#34;quick finder&#34;,
   description  =&#62; &#34;Use the text input below to search freshmeat&#34;,
   name         =&#62; &#34;query&#34;,
   link         =&#62; &#34;<a href="http://core.freshmeat.net/search.php3" class="podlinkurl"
>http://core.freshmeat.net/search.php3</a>&#34;,
 );

 # Optionally mixing in elements of a non-standard module/namespace

 $rss-&#62;add_module(prefix=&#62;&#39;my&#39;, uri=&#62;&#39;<a href="http://purl.org/my/rss/module/" class="podlinkurl"
>http://purl.org/my/rss/module/</a>&#39;);

 $rss-&#62;add_item(
   title       =&#62; &#34;xIrc 2.4pre2&#34;,
   link        =&#62; &#34;<a href="http://freshmeat.net/projects/xirc/" class="podlinkurl"
>http://freshmeat.net/projects/xirc/</a>&#34;,
   description =&#62; &#34;xIrc is an X11-based IRC client which ...&#34;,
   my =&#62; {
     rating    =&#62; &#34;A+&#34;,
     category  =&#62; &#34;X11/IRC&#34;,
   },
 );

  $rss-&#62;add_item (title=&#62;$title, link=&#62;$link, slash=&#62;{ topic=&#62;$topic });

 # create an RSS 2.0 file
 use XML::RSS;
 my $rss = XML::RSS-&#62;new (version =&#62; &#39;2.0&#39;);
 $rss-&#62;channel(title          =&#62; &#39;freshmeat.net&#39;,
               link           =&#62; &#39;<a href="http://freshmeat.net" class="podlinkurl"
>http://freshmeat.net</a>&#39;,
               language       =&#62; &#39;en&#39;,
               description    =&#62; &#39;the one-stop-shop for all your Linux software needs&#39;,
               rating         =&#62; &#39;(PICS-1.1 &#34;<a href="http://www.classify.org/safesurf/" class="podlinkurl"
>http://www.classify.org/safesurf/</a>&#34; 1 r (SS~~000 1))&#39;,
               copyright      =&#62; &#39;Copyright 1999, Freshmeat.net&#39;,
               pubDate        =&#62; &#39;Thu, 23 Aug 1999 07:00:00 GMT&#39;,
               lastBuildDate  =&#62; &#39;Thu, 23 Aug 1999 16:20:26 GMT&#39;,
               docs           =&#62; &#39;<a href="http://www.blahblah.org/fm.cdf" class="podlinkurl"
>http://www.blahblah.org/fm.cdf</a>&#39;,
               managingEditor =&#62; &#39;scoop@freshmeat.net&#39;,
               webMaster      =&#62; &#39;scoop@freshmeat.net&#39;
               );

 $rss-&#62;image(title       =&#62; &#39;freshmeat.net&#39;,
             url         =&#62; &#39;<a href="http://freshmeat.net/images/fm.mini.jpg" class="podlinkurl"
>http://freshmeat.net/images/fm.mini.jpg</a>&#39;,
             link        =&#62; &#39;<a href="http://freshmeat.net" class="podlinkurl"
>http://freshmeat.net</a>&#39;,
             width       =&#62; 88,
             height      =&#62; 31,
             description =&#62; &#39;This is the Freshmeat image stupid&#39;
             );

 $rss-&#62;add_item(title =&#62; &#34;GTKeyboard 0.85&#34;,
        # creates a guid field with permaLink=true
        permaLink  =&#62; &#34;<a href="http://freshmeat.net/news/1999/06/21/930003829.html" class="podlinkurl"
>http://freshmeat.net/news/1999/06/21/930003829.html</a>&#34;,
        # alternately creates a guid field with permaLink=false
        # guid     =&#62; &#34;gtkeyboard-0.85&#34;
        enclosure   =&#62; { url=&#62;$url, type=&#62;&#34;application/x-bittorrent&#34; },
        description =&#62; &#39;blah blah&#39;
);
 
 $rss-&#62;textinput(title =&#62; &#34;quick finder&#34;,
                 description =&#62; &#34;Use the text input below to search freshmeat&#34;,
                 name  =&#62; &#34;query&#34;,
                 link  =&#62; &#34;<a href="http://core.freshmeat.net/search.php3" class="podlinkurl"
>http://core.freshmeat.net/search.php3</a>&#34;
                 );

 # create an RSS 0.9 file
 use XML::RSS;
 my $rss = XML::RSS-&#62;new( version =&#62; &#39;0.9&#39; );
 $rss-&#62;channel(title =&#62; &#34;freshmeat.net&#34;,
               link  =&#62; &#34;<a href="http://freshmeat.net" class="podlinkurl"
>http://freshmeat.net</a>&#34;,
               description =&#62; &#34;the one-stop-shop for all your Linux software needs&#34;,
               );

 $rss-&#62;image(title =&#62; &#34;freshmeat.net&#34;,
             url   =&#62; &#34;<a href="http://freshmeat.net/images/fm.mini.jpg" class="podlinkurl"
>http://freshmeat.net/images/fm.mini.jpg</a>&#34;,
             link  =&#62; &#34;<a href="http://freshmeat.net" class="podlinkurl"
>http://freshmeat.net</a>&#34;
             );

 $rss-&#62;add_item(title =&#62; &#34;GTKeyboard 0.85&#34;,
                link  =&#62; &#34;<a href="http://freshmeat.net/news/1999/06/21/930003829.html" class="podlinkurl"
>http://freshmeat.net/news/1999/06/21/930003829.html</a>&#34;
                );

 $rss-&#62;textinput(title =&#62; &#34;quick finder&#34;,
                 description =&#62; &#34;Use the text input below to search freshmeat&#34;,
                 name  =&#62; &#34;query&#34;,
                 link  =&#62; &#34;<a href="http://core.freshmeat.net/search.php3" class="podlinkurl"
>http://core.freshmeat.net/search.php3</a>&#34;
                 );

 # print the RSS as a string
 print $rss-&#62;as_string;

 # or save it to a file
 $rss-&#62;save(&#34;fm.rdf&#34;);

 # insert an item into an RSS file and removes the oldest ones if
 # there are already 15 items or more
 my $rss = XML::RSS-&#62;new;
 $rss-&#62;parsefile(&#34;fm.rdf&#34;);

 while (@{$rss-&#62;{&#39;items&#39;}} &#62;= 15)
 {
     pop(@{$rss-&#62;{&#39;items&#39;});
 }

 $rss-&#62;add_item(title =&#62; &#34;MpegTV Player (mtv) 1.0.9.7&#34;,
                link  =&#62; &#34;<a href="http://freshmeat.net/news/1999/06/21/930003958.html" class="podlinkurl"
>http://freshmeat.net/news/1999/06/21/930003958.html</a>&#34;,
                mode  =&#62; &#39;insert&#39;
                );

 # parse a string instead of a file
 $rss-&#62;parse($string);

 # print the title and link of each RSS item
 foreach my $item (@{$rss-&#62;{&#39;items&#39;}}) {
     print &#34;title: $item-&#62;{&#39;title&#39;}\n&#34;;
     print &#34;link: $item-&#62;{&#39;link&#39;}\n\n&#34;;
 }

 # output the RSS 0.9 or 0.91 file as RSS 1.0
 $rss-&#62;{output} = &#39;1.0&#39;;
 print $rss-&#62;as_string;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module provides a basic framework for creating and maintaining RDF Site Summary (RSS) files. This distribution also contains many examples that allow you to generate HTML from an RSS, convert between 0.9, 0.91, and 1.0 version, and other nifty things. This might be helpful if you want to include news feeds on your Web site from sources like Slashdot and Freshmeat or if you want to syndicate your own content.</p>

<p>XML::RSS currently supports 0.9, 0.91, and 1.0 versions of RSS. See <a href="http://backend.userland.com/rss091" class="podlinkurl"
>http://backend.userland.com/rss091</a> for information on RSS 0.91. See <a href="http://www.purplepages.ie/RSS/netscape/rss0.90.html" class="podlinkurl"
>http://www.purplepages.ie/RSS/netscape/rss0.90.html</a> for RSS 0.9. See <a href="http://web.resource.org/rss/1.0/" class="podlinkurl"
>http://web.resource.org/rss/1.0/</a> for RSS 1.0.</p>

<p>RSS was originally developed by Netscape as the format for Netscape Netcenter channels, however, many Web sites have since adopted it as a simple syndication format. With the advent of RSS 1.0, users are now able to syndication many different kinds of content including news headlines, threaded measages, products catalogs, etc.</p>

<p><b>Note:</b> In order to parse and generate dates (such as <code>pubDate</code> and <code>dc:date</code>) it is recommended to use <a href="/perldoc?DateTime%3A%3AFormat%3A%3AMail" class="podlinkpod"
>DateTime::Format::Mail</a> and <a href="/perldoc?DateTime%3A%3AFormat%3A%3AW3CDTF" class="podlinkpod"
>DateTime::Format::W3CDTF</a> , which is what <a href="/~shlomif/XML-RSS-1.49/lib/XML/RSS.pm" class="podlinkpod"
>XML::RSS</a> uses internally and requires.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='XML'></a><a name="XML::RSS-&#62;new(version=&#62;$version,_encoding=&#62;$encoding,_output=&#62;$output,_stylesheet=&#62;$stylesheet_url,_&#39;xml:base&#39;=&#62;$base)"
>XML::RSS-&#62;new(version=&#62;$version, encoding=&#62;$encoding, output=&#62;$output, stylesheet=&#62;$stylesheet_url, &#39;xml:base&#39;=&#62;$base)</a></dt>

<dd>
<p>Constructor for XML::RSS. It returns a reference to an XML::RSS object. You may also pass the RSS version and the XML encoding to use. The default <b>version</b> is 1.0. The default <b>encoding</b> is UTF-8. You may also specify the <b>output</b> format regardless of the input version. This comes in handy when you want to convert RSS between versions. The XML::RSS modules will convert between any of the formats. If you set &#60;encode_output&#62; XML::RSS will make sure to encode any entities in generated RSS. This is now on by default.</p>

<p>You can also pass an optional URL to an XSL stylesheet that can be used to output an <code>&#60;?xsl-stylesheet ... ?&#62;</code> meta-tag in the header that will allow some browsers to render the RSS file as HTML.</p>

<p>You can also set <code>encode_cb</code> to a reference to a subroutine that will encode the output in a custom way. This subroutine accepts two parameters: a reference to the <code>XML::RSS::Private::Output::Base</code>-derived object (which should normally not concern you) and the text to encode. It should return the text to encode. If not set, then the module will encode using its custom encoding routine.</p>

<p>xml:base will set an <code>xml:base</code> property as per</p>

<pre class="sh_perl">    <a href="http://www.w3.org/TR/xmlbase/" class="podlinkurl"
>http://www.w3.org/TR/xmlbase/</a></pre>

<p>Note that in order to encode properly, you need to handle &#34;CDATA&#34; sections properly. Look at <a href="/perldoc?XML%3A%3ARSS%3A%3APrivate%3A%3AOutput%3A%3ABase" class="podlinkpod"
>XML::RSS::Private::Output::Base</a>&#39;s <code>_default_encode()</code> method for how to do it properly.</p>

<dt><a name='add_item'></a><a name="add_item_(title=&#62;$title,_link=&#62;$link,_description=&#62;$desc,_mode=&#62;$mode)"
>add_item (title=&#62;$title, link=&#62;$link, description=&#62;$desc, mode=&#62;$mode)</a></dt>

<dd>
<p>Adds an item to the XML::RSS object. <b>mode</b> and <b>description</b> are optional. The default <b>mode</b> is append, which adds the item to the end of the list. To insert an item, set the mode to <b>insert</b>.</p>

<p>The items are stored in the array <code>@{$obj-&#62;{&#39;items&#39;}}</code> where <b>$obj</b> is a reference to an XML::RSS object.</p>

<p>One can specify a category by using the <b>&#39;category&#39;</b> key. <b>&#39;category&#39;</b> can point to an array reference of categories:</p>

<pre class="sh_perl">    $rss-&#62;add_item(
        title =&#62; &#34;Foo&#38;Bar&#34;,
        link =&#62; &#34;<a href="http://www.my.tld/" class="podlinkurl"
>http://www.my.tld/</a>&#34;,
        category =&#62; [&#34;OneCat&#34;, &#34;TooCat&#34;, &#34;3Kitties&#34;],
    );</pre>

<dt><a name='as_string'></a><a name="as_string;"
>as_string;</a></dt>

<dd>
<p>Returns a string containing the RSS for the XML::RSS object. This method will also encode special characters along the way.</p>

<dt><a 
>channel (title=&#62;$title, link=&#62;$link, description=&#62;$desc, language=&#62;$language, rating=&#62;$rating, copyright=&#62;$copyright, pubDate=&#62;$pubDate, lastBuildDate=&#62;$lastBuild, docs=&#62;$docs, managingEditor=&#62;$editor, webMaster=&#62;$webMaster)</a></dt>

<dd>
<p>Channel information is required in RSS. The <b>title</b> cannot be more the 40 characters, the <b>link</b> 500, and the <b>description</b> 500 when outputting RSS 0.9. <b>title</b>, <b>link</b>, and <b>description</b>, are required for RSS 1.0. <b>language</b> is required for RSS 0.91. The other parameters are optional for RSS 0.91 and 1.0.</p>

<p>To retreive the values of the channel, pass the name of the value (title, link, or description) as the first and only argument like so:</p>

<p>$title = channel(&#39;title&#39;);</p>

<dt><a name='image'></a><a name="image_(title=&#62;$title,_url=&#62;$url,_link=&#62;$link,_width=&#62;$width,_height=&#62;$height,_description=&#62;$desc)"
>image (title=&#62;$title, url=&#62;$url, link=&#62;$link, width=&#62;$width, height=&#62;$height, description=&#62;$desc)</a></dt>

<dd>
<p>Adding an image is not required. <b>url</b> is the URL of the image, <b>link</b> is the URL the image is linked to. <b>title</b>, <b>url</b>, and <b>link</b> parameters are required if you are going to use an image in your RSS file. The remaining image elements are used in RSS 0.91 or optionally imported into RSS 1.0 via the rss091 namespace.</p>

<p>The method for retrieving the values for the image is the same as it is for <b>channel()</b>.</p>

<dt><a name='parse'></a><a name="parse_($string,_\%options)"
>parse ($string, \%options)</a></dt>

<dd>
<p>Parses an RDF Site Summary which is passed into <b>parse()</b> as the first parameter. Returns the instance of the object so one can say <code>$rss-&#62;parse($string)-&#62;other_method()</code>.</p>

<p>See the add_module() method for instructions on automatically adding modules as a string is parsed.</p>

<p>%options is a list of options that specify how parsing is to be done. The available options are:</p>

<ul>
<li>allow_multiple
<p>Takes an array ref of names which indicates which elements should be allowed to have multiple occurrences. So, for example, to parse feeds with multiple enclosures</p>

<pre class="sh_perl">   $rss-&#62;parse($xml, { allow_multiple =&#62; [&#39;enclosure&#39;] });</pre>
</li>

<li>hashrefs_instead_of_strings
<p>If true, then some items (so far &#34;<code>description</code>&#34;) will become hash-references instead of strings (with a <b>content</b> key containing their content , <b>if</b> they have XML attributes. Without this key, the attributes will be ignored and there will only be a string. Thus, specifying this option may break compatibility.</p>
</li>

<li>modules_as_arrays
<p>This option when true, will parse the modules key-value-pairs as an arrayref of <code>{ el =&#62; $key_name, value =&#62; $value, }</code> hash-refs to gracefully handle duplicate items (see below). It will not affect the known modules such as dc (&#34;Dublin Core&#34;).</p>
</li>
</ul>

<dt><a name='parsefile'></a><a name="parsefile_($file,_\%options)"
>parsefile ($file, \%options)</a></dt>

<dd>
<p>Same as <b>parse()</b> except it parses a file rather than a string.</p>

<p>See the add_module() method for instructions on automatically adding modules as a string is parsed.</p>

<dt><a name='save'></a><a name="save_($file)"
>save ($file)</a></dt>

<dd>
<p>Saves the RSS to a specified file.</p>

<dt><a name='skipDays'></a><a name="skipDays_(day_=&#62;_$day)"
>skipDays (day =&#62; $day)</a></dt>

<dd>
<p>Populates the skipDays element with the day $day.</p>

<dt><a name='skipHours'></a><a name="skipHours_(hour_=&#62;_$hour)"
>skipHours (hour =&#62; $hour)</a></dt>

<dd>
<p>Populates the skipHours element, with the hour $hour.</p>

<dt><a name='strict'></a><a name="strict_($boolean)"
>strict ($boolean)</a></dt>

<dd>
<p>If it&#39;s set to 1, it will adhere to the lengths as specified by Netscape Netcenter requirements. It&#39;s set to 0 by default. Use it if the RSS file you&#39;re generating is for Netcenter. strict will only work for RSS 0.9 and 0.91. Do not use it for RSS 1.0.</p>

<dt><a name='textinput'></a><a name="textinput_(title=&#62;$title,_description=&#62;$desc,_name=&#62;$name,_link=&#62;$link);"
>textinput (title=&#62;$title, description=&#62;$desc, name=&#62;$name, link=&#62;$link);</a></dt>

<dd>
<p>This RSS element is also optional. Using it allows users to submit a Query to a program on a Web server via an HTML form. <b>name</b> is the HTML form name and <b>link</b> is the URL to the program. Content is submitted using the GET method.</p>

<p>Access to the <b>textinput</b> values is the the same as <b>channel()</b> and <b>image()</b>.</p>

<dt><a name='add_module'></a><a name="add_module(prefix=&#62;$prefix,_uri=&#62;$uri)"
>add_module(prefix=&#62;$prefix, uri=&#62;$uri)</a></dt>

<dd>
<p>Adds a module namespace declaration to the XML::RSS object, allowing you to add modularity outside of the the standard RSS 1.0 modules. At present, the standard modules Dublin Core (dc) and Syndication (syn) are predefined for your convenience. The Taxonomy (taxo) module is also internally supported.</p>

<p>The modules are stored in the hash %{$obj-&#62;{&#39;modules&#39;}} where <b>$obj</b> is a reference to an XML::RSS object.</p>

<p>If you want to automatically add modules that the parser finds in namespaces, set the $XML::RSS::AUTO_ADD variable to a true value. By default the value is false. (N.B. AUTO_ADD only updates the %{$obj-&#62;{&#39;modules&#39;}} hash. It does not provide the other benefits of using add_module.)</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="RSS_1.0_MODULES"
>RSS 1.0 MODULES</a></h2>

<p>XML-Namespace-based modularization affords RSS 1.0 compartmentalized extensibility. The only modules that ship &#34;in the box&#34; with RSS 1.0 are Dublin Core (<a href="http://purl.org/rss/1.0/modules/dc/" class="podlinkurl"
>http://purl.org/rss/1.0/modules/dc/</a>), Syndication (<a href="http://purl.org/rss/1.0/modules/syndication/" class="podlinkurl"
>http://purl.org/rss/1.0/modules/syndication/</a>), and Taxonomy (<a href="http://purl.org/rss/1.0/modules/taxonomy/" class="podlinkurl"
>http://purl.org/rss/1.0/modules/taxonomy/</a>). Consult the appropriate module&#39;s documentation for further information.</p>

<p>Adding items from these modules in XML::RSS is as simple as adding other attributes such as title, link, and description. The only difference is the compartmentalization of their key/value paris in a second-level hash.</p>

<pre class="sh_perl">  $rss-&#62;add_item (title=&#62;$title, link=&#62;$link, dc=&#62;{ subject=&#62;$subject, creator=&#62;$creator, date=&#62;$date });</pre>

<p>For elements of the Dublin Core module, use the key &#39;dc&#39;. For elements of the Syndication module, &#39;syn&#39;. For elements of the Taxonomy module, &#39;taxo&#39;. These are the prefixes used in the RSS XML document itself. They are associated with appropriate URI-based namespaces:</p>

<pre class="sh_perl">  syn:  <a href="http://purl.org/rss/1.0/modules/syndication/" class="podlinkurl"
>http://purl.org/rss/1.0/modules/syndication/</a>
  dc:   <a href="http://purl.org/dc/elements/1.1/" class="podlinkurl"
>http://purl.org/dc/elements/1.1/</a>
  taxo: <a href="http://purl.org/rss/1.0/modules/taxonomy/" class="podlinkurl"
>http://purl.org/rss/1.0/modules/taxonomy/</a></pre>

<p>The Dublin Core (&#39;dc&#39;) hash keys may be point to an array reference, which in turn will specify multiple such keys, and render them one after the other. For example:</p>

<pre class="sh_perl">    $rss-&#62;add_item (
        title =&#62; $title,
        link =&#62; $link,
        dc =&#62; { 
            subject=&#62; [&#34;Jungle&#34;, &#34;Desert&#34;, &#34;Swamp&#34;],
            creator=&#62;$creator,
            date=&#62;$date
        },
    );</pre>

<p>Dublin Core elements may occur in channel, image, item(s), and textinput -- albeit uncomming to find them under image and textinput. Syndication elements are limited to the channel element. Taxonomy elements can occur in the channel or item elements.</p>

<p>Access to module elements after parsing an RSS 1.0 document using XML::RSS is via either the prefix or namespace URI for your convenience.</p>

<pre class="sh_perl">  print $rss-&#62;{items}-&#62;[0]-&#62;{dc}-&#62;{subject};

  or

  print $rss-&#62;{items}-&#62;[0]-&#62;{&#39;<a href="http://purl.org/dc/elements/1.1/&#39;}-&#62;{subject" class="podlinkurl"
>http://purl.org/dc/elements/1.1/&#39;}-&#62;{subject</a>};</pre>

<p>XML::RSS also has support for &#34;non-standard&#34; RSS 1.0 modularization at the channel, image, item, and textinput levels. Parsing an RSS document grabs any elements of other namespaces which might appear. XML::RSS also allows the inclusion of arbitrary namespaces and associated elements when building RSS documents.</p>

<p>For example, to add elements of a made-up &#34;My&#34; module, first declare the namespace by associating a prefix with a URI:</p>

<pre class="sh_perl">  $rss-&#62;add_module(prefix=&#62;&#39;my&#39;, uri=&#62;&#39;<a href="http://purl.org/my/rss/module/" class="podlinkurl"
>http://purl.org/my/rss/module/</a>&#39;);</pre>

<p>Then proceed as usual:</p>

<pre class="sh_perl">  $rss-&#62;add_item (title=&#62;$title, link=&#62;$link, my=&#62;{ rating=&#62;$rating });</pre>

<p>You can also set the value of the module&#39;s prefix to an array reference of <code>{ el =&#62; , val =&#62; }</code> hash-references, in which case duplicate elements are possible:</p>

<pre class="sh_perl">  $rss-&#62;add_item(title=&#62;$title, link=&#62;$link, my=&#62; [
    {el =&#62; &#34;rating&#34;, value =&#62; $rating1, }
    {el =&#62; &#34;rating&#34;, value =&#62; $rating2, },
  ]</pre>

<p>Non-standard namespaces are not, however, currently accessible via a simple prefix; access them via their namespace URL like so:</p>

<pre class="sh_perl">  print $rss-&#62;{items}-&#62;[0]-&#62;{&#39;<a href="http://purl.org/my/rss/module/&#39;}-&#62;{rating" class="podlinkurl"
>http://purl.org/my/rss/module/&#39;}-&#62;{rating</a>};</pre>

<p>XML::RSS will continue to provide built-in support for standard RSS 1.0 modules as they appear.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Non-API_Methods"
>Non-API Methods <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$rss-&#62;as_rss_0_9()"
>$rss-&#62;as_rss_0_9()</a></h2>

<p><b>WARNING</b>: this function is not an API function and should not be called directly. It is kept as is for backwards compatibility with legacy code. Use the following code instead:</p>

<pre class="sh_perl">    $rss-&#62;{output} = &#34;0.9&#34;;
    my $text = $rss-&#62;as_string();</pre>

<p>This function renders the data in the object as an RSS version 0.9 feed, and returns the resultant XML as text.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$rss-&#62;as_rss_0_9_1()"
>$rss-&#62;as_rss_0_9_1()</a></h2>

<p><b>WARNING</b>: this function is not an API function and should not be called directly. It is kept as is for backwards compatibility with legacy code. Use the following code instead:</p>

<pre class="sh_perl">    $rss-&#62;{output} = &#34;0.91&#34;;
    my $text = $rss-&#62;as_string();</pre>

<p>This function renders the data in the object as an RSS version 0.91 feed, and returns the resultant XML as text.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$rss-&#62;as_rss_1_0()"
>$rss-&#62;as_rss_1_0()</a></h2>

<p><b>WARNING</b>: this function is not an API function and should not be called directly. It is kept as is for backwards compatibility with legacy code. Use the following code instead:</p>

<pre class="sh_perl">    $rss-&#62;{output} = &#34;1.0&#34;;
    my $text = $rss-&#62;as_string();</pre>

<p>This function renders the data in the object as an RSS version 1.0 feed, and returns the resultant XML as text.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$rss-&#62;as_rss_2_0()"
>$rss-&#62;as_rss_2_0()</a></h2>

<p><b>WARNING</b>: this function is not an API function and should not be called directly. It is kept as is for backwards compatibility with legacy code. Use the following code instead:</p>

<pre class="sh_perl">    $rss-&#62;{output} = &#34;2.0&#34;;
    my $text = $rss-&#62;as_string();</pre>

<p>This function renders the data in the object as an RSS version 2.0 feed, and returns the resultant XML as text.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$rss-&#62;handle_char()"
>$rss-&#62;handle_char()</a></h2>

<p>Needed for XML::Parser. Don&#39;t use this directly.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$rss-&#62;handle_dec()"
>$rss-&#62;handle_dec()</a></h2>

<p>Needed for XML::Parser. Don&#39;t use this directly.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$rss-&#62;handle_start()"
>$rss-&#62;handle_start()</a></h2>

<p>Needed for XML::Parser. Don&#39;t use this directly.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Please use rt.cpan.org for tracking bugs. The list of current open bugs is at <a href="http://rt.cpan.org/Dist/Display.html?Queue=XML-RSS" class="podlinkurl"
>http://rt.cpan.org/Dist/Display.html?Queue=XML-RSS</a>.</p>

<p>To report a new bug, go to <a href="http://rt.cpan.org/Ticket/Create.html?Queue=XML-RSS" class="podlinkurl"
>http://rt.cpan.org/Ticket/Create.html?Queue=XML-RSS</a></p>

<p>Please include a failing test in your bug report. I&#39;d much rather have a well written test with the bug report than a patch.</p>

<p>When you create diffs (for tests or patches), please use the <code>-u</code> parameter to diff.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SOURCE_AVAILABILITY"
>SOURCE AVAILABILITY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The source is available from the perl.org Subversion server:</p>

<p><a href="http://svn.perl.org/modules/XML-RSS/" class="podlinkurl"
>http://svn.perl.org/modules/XML-RSS/</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Original code: Jonathan Eisenzopf &#60;eisen@pobox.com&#62;</p>

<p>Further changes: Rael Dornfest &#60;rael@oreilly.com&#62;, Ask Bjoern Hansen &#60;ask@develooper.com&#62;</p>

<p>Currently: Shlomi Fish &#60;shlomif@cpan.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2001 Jonathan Eisenzopf &#60;eisen@pobox.com&#62; and Rael Dornfest &#60;rael@oreilly.com&#62;, Copyright (C) 2006-2007 Ask Bjoern Hansen &#60;ask@develooper.com&#62;.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE"
>LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>XML::RSS is free software. You can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CREDITS"
>CREDITS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> Wojciech Zwiefka &#60;wojtekz@cnt.pl&#62;
 Chris Nandor &#60;pudge@pobox.com&#62;
 Jim Hebert &#60;jim@cosource.com&#62;
 Randal Schwartz &#60;merlyn@stonehenge.com&#62;
 rjp@browser.org
 Kellan Elliott-McCrea &#60;kellan@protest.net&#62;
 Rafe Colburn &#60;rafe@rafe.us&#62;
 Adam Trickett &#60;atrickett@cpan.org&#62;
 Aaron Straup Cope &#60;asc@vineyard.net&#62;
 Ian Davis &#60;iand@internetalchemy.org&#62;
 rayg@varchars.com
 Shlomi Fish &#60;shlomif@iglu.org.il&#62;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perl(1), <a href="/perldoc?XML%3A%3AParser" class="podlinkpod"
>XML::Parser</a>(3).</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78146 Uploads, 24702 Distributions
105959 Modules, 9642 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Tue Apr 24 13:23:30 2012 GMT (0.293174028396606) @cpansearch1 -->
 </body>
</html>
