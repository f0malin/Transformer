<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>threads::shared - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","threads-shared",3]);
    _gaq.push(["_setCustomVar",5,"Release","threads-shared-1.40",3]);
    _gaq.push(["_setCustomVar",3,"Module","threads::shared",3]);
    _gaq.push(["_setCustomVar",1,"Author","JDHEDDEN",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?threads::shared">permalink</a></div>
  <a href="/~jdhedden/">Jerry D. Hedden</a> &gt;
  <a href="/~jdhedden/threads-shared-1.40/">threads-shared-1.40</a> &gt;
  threads::shared
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/519cfaec05219fb43b17e223a117b812?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/J/JD/JDHEDDEN/threads-shared-1.40.tar.gz">threads-shared-1.40.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=threads%3A%3Ashared;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~JDHEDDEN/threads-shared-1.40/lib/threads/shared.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 4</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=threads-shared">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.40 &nbsp;
<span class="noprint">
  <a href="/src/JDHEDDEN/threads-shared-1.40/lib/threads/shared.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#EXPORT'>EXPORT</a>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <li class='indexItem indexItem1'><a href='#OBJECTS'>OBJECTS</a>
  <li class='indexItem indexItem1'><a href='#NOTES'>NOTES</a>
  <li class='indexItem indexItem1'><a href='#BUGS_AND_LIMITATIONS'>BUGS AND LIMITATIONS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#LICENSE'>LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>threads::shared - Perl extension for sharing data structures between threads</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This document describes threads::shared version 1.40</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use threads;
  use threads::shared;

  my $var :shared;
  my %hsh :shared;
  my @ary :shared;

  my ($scalar, @array, %hash);
  share($scalar);
  share(@array);
  share(%hash);

  $var = $scalar_value;
  $var = $shared_ref_value;
  $var = shared_clone($non_shared_ref_value);
  $var = shared_clone({&#39;foo&#39; =&#62; [qw/foo bar baz/]});

  $hsh{&#39;foo&#39;} = $scalar_value;
  $hsh{&#39;bar&#39;} = $shared_ref_value;
  $hsh{&#39;baz&#39;} = shared_clone($non_shared_ref_value);
  $hsh{&#39;quz&#39;} = shared_clone([1..3]);

  $ary[0] = $scalar_value;
  $ary[1] = $shared_ref_value;
  $ary[2] = shared_clone($non_shared_ref_value);
  $ary[3] = shared_clone([ {}, [] ]);

  { lock(%hash); ...  }

  cond_wait($scalar);
  cond_timedwait($scalar, time() + 30);
  cond_broadcast(@array);
  cond_signal(%hash);

  my $lockvar :shared;
  # condition var != lock var
  cond_wait($var, $lockvar);
  cond_timedwait($var, time()+30, $lockvar);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>By default, variables are private to each thread, and each newly created thread gets a private copy of each existing variable. This module allows you to share variables across different threads (and pseudo-forks on Win32). It is used together with the <a href="/perldoc?threads" class="podlinkpod"
>threads</a> module.</p>

<p>This module supports the sharing of the following data types only: scalars and scalar refs, arrays and array refs, and hashes and hash refs.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORT"
>EXPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following functions are exported by this module: <code>share</code>, <code>shared_clone</code>, <code>is_shared</code>, <code>cond_wait</code>, <code>cond_timedwait</code>, <code>cond_signal</code> and <code>cond_broadcast</code></p>

<p>Note that if this module is imported when <a href="/perldoc?threads" class="podlinkpod"
>threads</a> has not yet been loaded, then these functions all become no-ops. This makes it possible to write modules that will work in both threaded and non-threaded environments.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='share'></a><a name="share_VARIABLE"
>share VARIABLE</a></dt>

<dd>
<p><code>share</code> takes a variable and marks it as shared:</p>

<pre class="sh_perl">  my ($scalar, @array, %hash);
  share($scalar);
  share(@array);
  share(%hash);</pre>

<p><code>share</code> will return the shared rvalue, but always as a reference.</p>

<p>Variables can also be marked as shared at compile time by using the <code>:shared</code> attribute:</p>

<pre class="sh_perl">  my ($var, %hash, @array) :shared;</pre>

<p>Shared variables can only store scalars, refs of shared variables, or refs of shared data (discussed in next section):</p>

<pre class="sh_perl">  my ($var, %hash, @array) :shared;
  my $bork;

  # Storing scalars
  $var = 1;
  $hash{&#39;foo&#39;} = &#39;bar&#39;;
  $array[0] = 1.5;

  # Storing shared refs
  $var = \%hash;
  $hash{&#39;ary&#39;} = \@array;
  $array[1] = \$var;

  # The following are errors:
  #   $var = \$bork;                    # ref of non-shared variable
  #   $hash{&#39;bork&#39;} = [];               # non-shared array ref
  #   push(@array, { &#39;x&#39; =&#62; 1 });       # non-shared hash ref</pre>

<dt><a name='shared_clone'></a><a name="shared_clone_REF"
>shared_clone REF</a></dt>

<dd>
<p><code>shared_clone</code> takes a reference, and returns a shared version of its argument, performing a deep copy on any non-shared elements. Any shared elements in the argument are used as is (i.e., they are not cloned).</p>

<pre class="sh_perl">  my $cpy = shared_clone({&#39;foo&#39; =&#62; [qw/foo bar baz/]});</pre>

<p>Object status (i.e., the class an object is blessed into) is also cloned.</p>

<pre class="sh_perl">  my $obj = {&#39;foo&#39; =&#62; [qw/foo bar baz/]};
  bless($obj, &#39;Foo&#39;);
  my $cpy = shared_clone($obj);
  print(ref($cpy), &#34;\n&#34;);         # Outputs &#39;Foo&#39;</pre>

<p>For cloning empty array or hash refs, the following may also be used:</p>

<pre class="sh_perl">  $var = &#38;share([]);   # Same as $var = shared_clone([]);
  $var = &#38;share({});   # Same as $var = shared_clone({});</pre>

<dt><a name='is_shared'></a><a name="is_shared_VARIABLE"
>is_shared VARIABLE</a></dt>

<dd>
<p><code>is_shared</code> checks if the specified variable is shared or not. If shared, returns the variable&#39;s internal ID (similar to <a href="/perldoc?Scalar%3A%3AUtil#refaddr_EXPR" class="podlinkpod"
>refaddr()</a>). Otherwise, returns <code>undef</code>.</p>

<pre class="sh_perl">  if (is_shared($var)) {
      print(&#34;\$var is shared\n&#34;);
  } else {
      print(&#34;\$var is not shared\n&#34;);
  }</pre>

<p>When used on an element of an array or hash, <code>is_shared</code> checks if the specified element belongs to a shared array or hash. (It does not check the contents of that element.)</p>

<pre class="sh_perl">  my %hash :shared;
  if (is_shared(%hash)) {
      print(&#34;\%hash is shared\n&#34;);
  }

  $hash{&#39;elem&#39;} = 1;
  if (is_shared($hash{&#39;elem&#39;})) {
      print(&#34;\$hash{&#39;elem&#39;} is in a shared hash\n&#34;);
  }</pre>

<dt><a name='lock'></a><a name="lock_VARIABLE"
>lock VARIABLE</a></dt>

<dd>
<p><code>lock</code> places a <b>advisory</b> lock on a variable until the lock goes out of scope. If the variable is locked by another thread, the <code>lock</code> call will block until it&#39;s available. Multiple calls to <code>lock</code> by the same thread from within dynamically nested scopes are safe -- the variable will remain locked until the outermost lock on the variable goes out of scope.</p>

<p><code>lock</code> follows references exactly <i>one</i> level:</p>

<pre class="sh_perl">  my %hash :shared;
  my $ref = \%hash;
  lock($ref);           # This is equivalent to lock(%hash)</pre>

<p>Note that you cannot explicitly unlock a variable; you can only wait for the lock to go out of scope. This is most easily accomplished by locking the variable inside a block.</p>

<pre class="sh_perl">  my $var :shared;
  {
      lock($var);
      # $var is locked from here to the end of the block
      ...
  }
  # $var is now unlocked</pre>

<p>As locks are advisory, they do not prevent data access or modification by another thread that does not itself attempt to obtain a lock on the variable.</p>

<p>You cannot lock the individual elements of a container variable:</p>

<pre class="sh_perl">  my %hash :shared;
  $hash{&#39;foo&#39;} = &#39;bar&#39;;
  #lock($hash{&#39;foo&#39;});          # Error
  lock(%hash);                  # Works</pre>

<p>If you need more fine-grained control over shared variable access, see <a href="/perldoc?Thread%3A%3ASemaphore" class="podlinkpod"
>Thread::Semaphore</a>.</p>

<dt><a name='cond_wait'></a><a name="cond_wait_VARIABLE"
>cond_wait VARIABLE</a></dt>

<dd>
<dt><a name='cond_wait'></a><a name="cond_wait_CONDVAR,_LOCKVAR"
>cond_wait CONDVAR, LOCKVAR</a></dt>

<dd>
<p>The <code>cond_wait</code> function takes a <b>locked</b> variable as a parameter, unlocks the variable, and blocks until another thread does a <code>cond_signal</code> or <code>cond_broadcast</code> for that same locked variable. The variable that <code>cond_wait</code> blocked on is relocked after the <code>cond_wait</code> is satisfied. If there are multiple threads <code>cond_wait</code>ing on the same variable, all but one will re-block waiting to reacquire the lock on the variable. (So if you&#39;re only using <code>cond_wait</code> for synchronisation, give up the lock as soon as possible). The two actions of unlocking the variable and entering the blocked wait state are atomic, the two actions of exiting from the blocked wait state and re-locking the variable are not.</p>

<p>In its second form, <code>cond_wait</code> takes a shared, <b>unlocked</b> variable followed by a shared, <b>locked</b> variable. The second variable is unlocked and thread execution suspended until another thread signals the first variable.</p>

<p>It is important to note that the variable can be notified even if no thread <code>cond_signal</code> or <code>cond_broadcast</code> on the variable. It is therefore important to check the value of the variable and go back to waiting if the requirement is not fulfilled. For example, to pause until a shared counter drops to zero:</p>

<pre class="sh_perl">  { lock($counter); cond_wait($counter) until $counter == 0; }</pre>

<dt><a name='cond_timedwait'></a><a name="cond_timedwait_VARIABLE,_ABS_TIMEOUT"
>cond_timedwait VARIABLE, ABS_TIMEOUT</a></dt>

<dd>
<dt><a name='cond_timedwait'></a><a name="cond_timedwait_CONDVAR,_ABS_TIMEOUT,_LOCKVAR"
>cond_timedwait CONDVAR, ABS_TIMEOUT, LOCKVAR</a></dt>

<dd>
<p>In its two-argument form, <code>cond_timedwait</code> takes a <b>locked</b> variable and an absolute timeout as parameters, unlocks the variable, and blocks until the timeout is reached or another thread signals the variable. A false value is returned if the timeout is reached, and a true value otherwise. In either case, the variable is re-locked upon return.</p>

<p>Like <code>cond_wait</code>, this function may take a shared, <b>locked</b> variable as an additional parameter; in this case the first parameter is an <b>unlocked</b> condition variable protected by a distinct lock variable.</p>

<p>Again like <code>cond_wait</code>, waking up and reacquiring the lock are not atomic, and you should always check your desired condition after this function returns. Since the timeout is an absolute value, however, it does not have to be recalculated with each pass:</p>

<pre class="sh_perl">  lock($var);
  my $abs = time() + 15;
  until ($ok = desired_condition($var)) {
      last if !cond_timedwait($var, $abs);
  }
  # we got it if $ok, otherwise we timed out!</pre>

<dt><a name='cond_signal'></a><a name="cond_signal_VARIABLE"
>cond_signal VARIABLE</a></dt>

<dd>
<p>The <code>cond_signal</code> function takes a <b>locked</b> variable as a parameter and unblocks one thread that&#39;s <code>cond_wait</code>ing on that variable. If more than one thread is blocked in a <code>cond_wait</code> on that variable, only one (and which one is indeterminate) will be unblocked.</p>

<p>If there are no threads blocked in a <code>cond_wait</code> on the variable, the signal is discarded. By always locking before signaling, you can (with care), avoid signaling before another thread has entered cond_wait().</p>

<p><code>cond_signal</code> will normally generate a warning if you attempt to use it on an unlocked variable. On the rare occasions where doing this may be sensible, you can suppress the warning with:</p>

<pre class="sh_perl">  { no warnings &#39;threads&#39;; cond_signal($foo); }</pre>

<dt><a name='cond_broadcast'></a><a name="cond_broadcast_VARIABLE"
>cond_broadcast VARIABLE</a></dt>

<dd>
<p>The <code>cond_broadcast</code> function works similarly to <code>cond_signal</code>. <code>cond_broadcast</code>, though, will unblock <b>all</b> the threads that are blocked in a <code>cond_wait</code> on the locked variable, rather than only one.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OBJECTS"
>OBJECTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~jdhedden/threads-shared-1.40/lib/threads/shared.pm" class="podlinkpod"
>threads::shared</a> exports a version of <a href="/perldoc?perlfunc#bless_REF" class="podlinkpod"
>bless()</a> that works on shared objects such that <i>blessings</i> propagate across threads.</p>

<pre class="sh_perl">  # Create a shared &#39;Foo&#39; object
  my $foo :shared = shared_clone({});
  bless($foo, &#39;Foo&#39;);

  # Create a shared &#39;Bar&#39; object
  my $bar :shared = shared_clone({});
  bless($bar, &#39;Bar&#39;);

  # Put &#39;bar&#39; inside &#39;foo&#39;
  $foo-&#62;{&#39;bar&#39;} = $bar;

  # Rebless the objects via a thread
  threads-&#62;create(sub {
      # Rebless the outer object
      bless($foo, &#39;Yin&#39;);

      # Cannot directly rebless the inner object
      #bless($foo-&#62;{&#39;bar&#39;}, &#39;Yang&#39;);

      # Retrieve and rebless the inner object
      my $obj = $foo-&#62;{&#39;bar&#39;};
      bless($obj, &#39;Yang&#39;);
      $foo-&#62;{&#39;bar&#39;} = $obj;

  })-&#62;join();

  print(ref($foo),          &#34;\n&#34;);    # Prints &#39;Yin&#39;
  print(ref($foo-&#62;{&#39;bar&#39;}), &#34;\n&#34;);    # Prints &#39;Yang&#39;
  print(ref($bar),          &#34;\n&#34;);    # Also prints &#39;Yang&#39;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTES"
>NOTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~jdhedden/threads-shared-1.40/lib/threads/shared.pm" class="podlinkpod"
>threads::shared</a> is designed to disable itself silently if threads are not available. This allows you to write modules and packages that can be used in both threaded and non-threaded applications.</p>

<p>If you want access to threads, you must <code>use threads</code> before you <code>use threads::shared</code>. <a href="/perldoc?threads" class="podlinkpod"
>threads</a> will emit a warning if you use it after <a href="/~jdhedden/threads-shared-1.40/lib/threads/shared.pm" class="podlinkpod"
>threads::shared</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS_AND_LIMITATIONS"
>BUGS AND LIMITATIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>When <code>share</code> is used on arrays, hashes, array refs or hash refs, any data they contain will be lost.</p>

<pre class="sh_perl">  my @arr = qw(foo bar baz);
  share(@arr);
  # @arr is now empty (i.e., == ());

  # Create a &#39;foo&#39; object
  my $foo = { &#39;data&#39; =&#62; 99 };
  bless($foo, &#39;foo&#39;);

  # Share the object
  share($foo);        # Contents are now wiped out
  print(&#34;ERROR: \$foo is empty\n&#34;)
      if (! exists($foo-&#62;{&#39;data&#39;}));</pre>

<p>Therefore, populate such variables <b>after</b> declaring them as shared. (Scalar and scalar refs are not affected by this problem.)</p>

<p>It is often not wise to share an object unless the class itself has been written to support sharing. For example, an object&#39;s destructor may get called multiple times, once for each thread&#39;s scope exit. Another danger is that the contents of hash-based objects will be lost due to the above mentioned limitation. See <em>examples/class.pl</em> (in the CPAN distribution of this module) for how to create a class that supports object sharing.</p>

<p>Destructors may not be called on objects if those objects still exist at global destruction time. If the destructors must be called, make sure there are no circular references and that nothing is referencing the objects, before the program ends.</p>

<p>Does not support <code>splice</code> on arrays. Does not support explicitly changing array lengths via $#array -- use <code>push</code> and <code>pop</code> instead.</p>

<p>Taking references to the elements of shared arrays and hashes does not autovivify the elements, and neither does slicing a shared array/hash over non-existent indices/keys autovivify the elements.</p>

<p><code>share()</code> allows you to <code>share($hashref-&#62;{key})</code> and <code>share($arrayref-&#62;[idx])</code> without giving any error message. But the <code>$hashref-&#62;{key}</code> or <code>$arrayref-&#62;[idx]</code> is <b>not</b> shared, causing the error &#34;lock can only be used on shared values&#34; to occur when you attempt to <code>lock($hasref-&#62;{key})</code> or <code>lock($arrayref-&#62;[idx])</code> in another thread.</p>

<p>Using <a href="/perldoc?Scalar%3A%3AUtil#refaddr_EXPR" class="podlinkpod"
>refaddr()</a>) is unreliable for testing whether or not two shared references are equivalent (e.g., when testing for circular references). Use <a href="#is_shared_VARIABLE" class="podlinkpod"
>is_shared()</a>, instead:</p>

<pre class="sh_perl">    use threads;
    use threads::shared;
    use Scalar::Util qw(refaddr);

    # If ref is shared, use threads::shared&#39;s internal ID.
    # Otherwise, use refaddr().
    my $addr1 = is_shared($ref1) || refaddr($ref1);
    my $addr2 = is_shared($ref2) || refaddr($ref2);

    if ($addr1 == $addr2) {
        # The refs are equivalent
    }</pre>

<p><a href="/perldoc?perlfunc#each_HASH" class="podlinkpod"
>each()</a> does not work properly on shared references embedded in shared structures. For example:</p>

<pre class="sh_perl">    my %foo :shared;
    $foo{&#39;bar&#39;} = shared_clone({&#39;a&#39;=&#62;&#39;x&#39;, &#39;b&#39;=&#62;&#39;y&#39;, &#39;c&#39;=&#62;&#39;z&#39;});

    while (my ($key, $val) = each(%{$foo{&#39;bar&#39;}})) {
        ...
    }</pre>

<p>Either of the following will work instead:</p>

<pre class="sh_perl">    my $ref = $foo{&#39;bar&#39;};
    while (my ($key, $val) = each(%{$ref})) {
        ...
    }

    foreach my $key (keys(%{$foo{&#39;bar&#39;}})) {
        my $val = $foo{&#39;bar&#39;}{$key};
        ...
    }</pre>

<p>View existing bug reports at, and submit any new bugs, problems, patches, etc. to: <a href="http://rt.cpan.org/Public/Dist/Display.html?Name=threads-shared" class="podlinkurl"
>http://rt.cpan.org/Public/Dist/Display.html?Name=threads-shared</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~jdhedden/threads-shared-1.40/lib/threads/shared.pm" class="podlinkpod"
>threads::shared</a> Discussion Forum on CPAN: <a href="http://www.cpanforum.com/dist/threads-shared" class="podlinkurl"
>http://www.cpanforum.com/dist/threads-shared</a></p>

<p><a href="/perldoc?threads" class="podlinkpod"
>threads</a>, <a href="/perldoc?perlthrtut" class="podlinkpod"
>perlthrtut</a></p>

<p><a href="http://www.perl.com/pub/a/2002/06/11/threads.html" class="podlinkurl"
>http://www.perl.com/pub/a/2002/06/11/threads.html</a> and <a href="http://www.perl.com/pub/a/2002/09/04/threads.html" class="podlinkurl"
>http://www.perl.com/pub/a/2002/09/04/threads.html</a></p>

<p>Perl threads mailing list: <a href="http://lists.perl.org/list/ithreads.html" class="podlinkurl"
>http://lists.perl.org/list/ithreads.html</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Artur Bergman &#60;sky AT crucially DOT net&#62;</p>

<p>Documentation borrowed from the old Thread.pm.</p>

<p>CPAN version produced by Jerry D. Hedden &#60;jdhedden AT cpan DOT org&#62;.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE"
>LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>threads::shared is released under the same license as Perl.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78066 Uploads, 24685 Distributions
105889 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 21 13:53:35 2012 GMT (0.0581388473510742) @cpansearch1 -->
 </body>
</html>
