<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>MIME-tools - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","MIME-tools",3]);
    _gaq.push(["_setCustomVar",5,"Release","MIME-tools-5.502",3]);
    _gaq.push(["_setCustomVar",4,"Document","MIME-tools",3]);
    _gaq.push(["_setCustomVar",1,"Author","DSKOLL",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?MIME-tools">permalink</a></div>
  <a href="/~dskoll/">David F. Skoll</a> &gt;
  <a href="/~dskoll/MIME-tools-5.502/">MIME-tools-5.502</a> &gt;
  MIME-tools
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/77ceb1d700a17c6454d82e26e73d9807?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DS/DSKOLL/MIME-tools-5.502.tar.gz">MIME-tools-5.502.tar.gz</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DSKOLL/MIME-tools-5.502/lib/MIME/Tools.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 6</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 8</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=MIME-tools">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
<span class="noprint">
  <a href="/src/DSKOLL/MIME-tools-5.502/lib/MIME/Tools.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#REQUIREMENTS'>REQUIREMENTS</a>
  <li class='indexItem indexItem1'><a href='#A_QUICK_TOUR'>A QUICK TOUR</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Overview_of_the_classes'>Overview of the classes</a>
    <li class='indexItem indexItem2'><a href='#Parsing_messages'>Parsing messages</a>
    <li class='indexItem indexItem2'><a href='#Composing_messages'>Composing messages</a>
    <li class='indexItem indexItem2'><a href='#Sending_email'>Sending email</a>
    <li class='indexItem indexItem2'><a href='#Encoding/decoding_support'>Encoding/decoding support</a>
    <li class='indexItem indexItem2'><a href='#Message-logging'>Message-logging</a>
    <li class='indexItem indexItem2'><a href='#Configuring_the_toolkit'>Configuring the toolkit</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#THINGS_YOU_SHOULD_DO'>THINGS YOU SHOULD DO</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Take_a_look_at_the_examples'>Take a look at the examples</a>
    <li class='indexItem indexItem2'><a href='#Run_with_warnings_enabled'>Run with warnings enabled</a>
    <li class='indexItem indexItem2'><a href='#Avoid_non-standard_encodings'>Avoid non-standard encodings</a>
    <li class='indexItem indexItem2'><a href='#Plan_for_thrown_exceptions'>Plan for thrown exceptions</a>
    <li class='indexItem indexItem2'><a href='#Check_the_parser_results_for_warnings/errors'>Check the parser results for warnings/errors</a>
    <li class='indexItem indexItem2'><a href='#Don&#39;t_plan_on_printing_exactly_what_you_parsed!'>Don&#39;t plan on printing exactly what you parsed!</a>
    <li class='indexItem indexItem2'><a href='#Understand_how_international_characters_are_represented'>Understand how international characters are represented</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#THINGS_I_DO_THAT_YOU_SHOULD_KNOW_ABOUT'>THINGS I DO THAT YOU SHOULD KNOW ABOUT</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Fuzzing_of_CRLF_and_newline_on_input'>Fuzzing of CRLF and newline on input</a>
    <li class='indexItem indexItem2'><a href='#Fuzzing_of_CRLF_and_newline_when_decoding'>Fuzzing of CRLF and newline when decoding</a>
    <li class='indexItem indexItem2'><a href='#Fuzzing_of_CRLF_and_newline_when_encoding/composing'>Fuzzing of CRLF and newline when encoding/composing</a>
    <li class='indexItem indexItem2'><a href='#Inability_to_handle_multipart_boundaries_with_embedded_newlines'>Inability to handle multipart boundaries with embedded newlines</a>
    <li class='indexItem indexItem2'><a href='#Ignoring_non-header_headers'>Ignoring non-header headers</a>
    <li class='indexItem indexItem2'><a href='#Fuzzing_of_empty_multipart_preambles'>Fuzzing of empty multipart preambles</a>
    <li class='indexItem indexItem2'><a href='#Use_of_a_temp_file_during_parsing'>Use of a temp file during parsing</a>
    <li class='indexItem indexItem2'><a href='#Why_do_I_assume_that_MIME_objects_are_email_objects?'>Why do I assume that MIME objects are email objects?</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#A_MIME_PRIMER'>A MIME PRIMER</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Glossary'>Glossary</a>
    <li class='indexItem indexItem2'><a href='#Content_types'>Content types</a>
    <li class='indexItem indexItem2'><a href='#Content_transfer_encodings'>Content transfer encodings</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#SUPPORT'>SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#CHANGE_LOG'>CHANGE LOG</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#ACKNOWLEDGMENTS'>ACKNOWLEDGMENTS</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>MIME-tools - modules for parsing (and creating!) MIME entities</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Here&#39;s some pretty basic code for <b>parsing a MIME message,</b> and outputting its decoded components to a given directory:</p>

<pre class="sh_perl">    use MIME::Parser;

    ### Create parser, and set some parsing options:
    my $parser = new MIME::Parser;
    $parser-&#62;output_under(&#34;$ENV{HOME}/mimemail&#34;);

    ### Parse input:
    $entity = $parser-&#62;parse(\*STDIN) or die &#34;parse failed\n&#34;;

    ### Take a look at the top-level entity (and any parts it has):
    $entity-&#62;dump_skeleton;</pre>

<p>Here&#39;s some code which <b>composes and sends a MIME message</b> containing three parts: a text file, an attached GIF, and some more text:</p>

<pre class="sh_perl">    use MIME::Entity;

    ### Create the top-level, and set up the mail headers:
    $top = MIME::Entity-&#62;build(Type    =&#62;&#34;multipart/mixed&#34;,
                               From    =&#62; &#34;me\@myhost.com&#34;,
                               To      =&#62; &#34;you\@yourhost.com&#34;,
                               Subject =&#62; &#34;Hello, nurse!&#34;);

    ### Part #1: a simple text document:
    $top-&#62;attach(Path=&#62;&#34;./testin/short.txt&#34;);

    ### Part #2: a GIF file:
    $top-&#62;attach(Path        =&#62; &#34;./docs/mime-sm.gif&#34;,
                 Type        =&#62; &#34;image/gif&#34;,
                 Encoding    =&#62; &#34;base64&#34;);

    ### Part #3: some literal text:
    $top-&#62;attach(Data=&#62;$message);

    ### Send it:
    open MAIL, &#34;| /usr/lib/sendmail -t -oi -oem&#34; or die &#34;open: $!&#34;;
    $top-&#62;print(\*MAIL);
    close MAIL;</pre>

<p>For more examples, look at the scripts in the <b>examples</b> directory of the MIME-tools distribution.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>MIME-tools is a collection of Perl5 MIME:: modules for parsing, decoding, <i>and generating</i> single- or multipart (even nested multipart) MIME messages. (Yes, kids, that means you can send messages with attached GIF files).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="REQUIREMENTS"
>REQUIREMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You will need the following installed on your system:</p>

<pre class="sh_perl">        File::Path
        File::Spec
        IPC::Open2              (optional)
        MIME::Base64
        MIME::QuotedPrint
        Net::SMTP
        Mail::Internet, ...     from the MailTools distribution.</pre>

<p>See the Makefile.PL in your distribution for the most-comprehensive list of prerequisite modules and their version numbers.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="A_QUICK_TOUR"
>A QUICK TOUR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Overview_of_the_classes"
>Overview of the classes</a></h2>

<p>Here are the classes you&#39;ll generally be dealing with directly:</p>

<pre class="sh_perl">    (START HERE)            results() .-----------------.
          \                 .--------&#62;| MIME::          |
           .-----------.   /          | Parser::Results |
           | MIME::    |--&#39;           `-----------------&#39;
           | Parser    |--.           .-----------------.
           `-----------&#39;   \ filer()  | MIME::          |
              | parse()     `--------&#62;| Parser::Filer   |
              | gives you             `-----------------&#39;
              | a...                                  | output_path()
              |                                       | determines
              |                                       | path() of...
              |    head()       .--------.            |
              |    returns...   | MIME:: | get()      |
              V       .--------&#62;| Head   | etc...     |
           .--------./          `--------&#39;            |
     .---&#62; | MIME:: |                                 |
     `-----| Entity |           .--------.            |
   parts() `--------&#39;\          | MIME:: |           /
   returns            `--------&#62;| Body   |&#60;---------&#39;
   sub-entities    bodyhandle() `--------&#39;
   (if any)        returns...       | open()
                                    | returns...
                                    |
                                    V
                                .--------. read()
                                | IO::   | getline()
                                | Handle | print()
                                `--------&#39; etc...</pre>

<p>To illustrate, parsing works this way:</p>

<ul>
<li><b>The &#34;parser&#34; parses the MIME stream.</b> A parser is an instance of <code>MIME::Parser</code>. You hand it an input stream (like a filehandle) to parse a message from: if the parse is successful, the result is an &#34;entity&#34;.</li>

<li><b>A parsed message is represented by an &#34;entity&#34;.</b> An entity is an instance of <code>MIME::Entity</code> (a subclass of <code>Mail::Internet</code>). If the message had &#34;parts&#34; (e.g., attachments), then those parts are &#34;entities&#34; as well, contained inside the top-level entity. Each entity has a &#34;head&#34; and a &#34;body&#34;.</li>

<li><b>The entity&#39;s &#34;head&#34; contains information about the message.</b> A &#34;head&#34; is an instance of <code>MIME::Head</code> (a subclass of <code>Mail::Header</code>). It contains information from the message header: content type, sender, subject line, etc.</li>

<li><b>The entity&#39;s &#34;body&#34; knows where the message data is.</b> You can ask to &#34;open&#34; this data source for <i>reading</i> or <i>writing</i>, and you will get back an &#34;I/O handle&#34;.</li>

<li><b>You can open() a &#34;body&#34; and get an &#34;I/O handle&#34; to read/write message data.</b> This handle is an object that is basically like an IO::Handle... it can be any class, so long as it supports a small, standard set of methods for reading from or writing to the underlying data source.</li>
</ul>

<p>A typical multipart message containing two parts -- a textual greeting and an &#34;attached&#34; GIF file -- would be a tree of MIME::Entity objects, each of which would have its own MIME::Head. Like this:</p>

<pre class="sh_perl">    .--------.
    | MIME:: | Content-type: multipart/mixed
    | Entity | Subject: Happy Samhaine!
    `--------&#39;
         |
         `----.
        parts |
              |   .--------.
              |---| MIME:: | Content-type: text/plain; charset=us-ascii
              |   | Entity | Content-transfer-encoding: 7bit
              |   `--------&#39;
              |   .--------.
              |---| MIME:: | Content-type: image/gif
                  | Entity | Content-transfer-encoding: base64
                  `--------&#39; Content-disposition: inline;
                               filename=&#34;hs.gif&#34;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Parsing_messages"
>Parsing messages</a></h2>

<p>You usually start by creating an instance of <b>MIME::Parser</b> and setting up certain parsing parameters: what directory to save extracted files to, how to name the files, etc.</p>

<p>You then give that instance a readable filehandle on which waits a MIME message. If all goes well, you will get back a <b>MIME::Entity</b> object (a subclass of <b>Mail::Internet</b>), which consists of...</p>

<ul>
<li>A <b>MIME::Head</b> (a subclass of <b>Mail::Header</b>) which holds the MIME header data.</li>

<li>A <b>MIME::Body</b>, which is a object that knows where the body data is. You ask this object to &#34;open&#34; itself for reading, and it will hand you back an &#34;I/O handle&#34; for reading the data: this could be of any class, so long as it conforms to a subset of the <b>IO::Handle</b> interface.</li>
</ul>

<p>If the original message was a multipart document, the MIME::Entity object will have a non-empty list of &#34;parts&#34;, each of which is in turn a MIME::Entity (which might also be a multipart entity, etc, etc...).</p>

<p>Internally, the parser (in MIME::Parser) asks for instances of <b>MIME::Decoder</b> whenever it needs to decode an encoded file. MIME::Decoder has a mapping from supported encodings (e.g., &#39;base64&#39;) to classes whose instances can decode them. You can add to this mapping to try out new/experiment encodings. You can also use MIME::Decoder by itself.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Composing_messages"
>Composing messages</a></h2>

<p>All message composition is done via the <b>MIME::Entity</b> class. For single-part messages, you can use the <b>MIME::Entity/build</b> constructor to create MIME entities very easily.</p>

<p>For multipart messages, you can start by creating a top-level <code>multipart</code> entity with <b>MIME::Entity::build()</b>, and then use the similar <b>MIME::Entity::attach()</b> method to attach parts to that message. <i>Please note:</i> what most people think of as &#34;a text message with an attached GIF file&#34; is <i>really</i> a multipart message with 2 parts: the first being the text message, and the second being the GIF file.</p>

<p>When building MIME a entity, you&#39;ll have to provide two very important pieces of information: the <i>content type</i> and the <i>content transfer encoding</i>. The type is usually easy, as it is directly determined by the file format; e.g., an HTML file is <code>text/html</code>. The encoding, however, is trickier... for example, some HTML files are <code>7bit</code>-compliant, but others might have very long lines and would need to be sent <code>quoted-printable</code> for reliability.</p>

<p>See the section on encoding/decoding for more details, as well as <a href="#A_MIME_PRIMER" class="podlinkpod"
>&#34;A MIME PRIMER&#34;</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Sending_email"
>Sending email</a></h2>

<p>Since MIME::Entity inherits directly from Mail::Internet, you can use the normal Mail::Internet mechanisms to send email. For example,</p>

<pre class="sh_perl">    $entity-&#62;smtpsend;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Encoding/decoding_support"
>Encoding/decoding support</a></h2>

<p>The <b>MIME::Decoder</b> class can be used to <i>encode</i> as well; this is done when printing MIME entities. All the standard encodings are supported (see <a href="#A_MIME_PRIMER" class="podlinkpod"
>&#34;A MIME PRIMER&#34;</a> for details):</p>

<pre class="sh_perl">    Encoding:        | Normally used when message contents are:
    -------------------------------------------------------------------
    7bit             | 7-bit data with under 1000 chars/line, or multipart.
    8bit             | 8-bit data with under 1000 chars/line.
    binary           | 8-bit data with some long lines (or no line breaks).
    quoted-printable | Text files with some 8-bit chars (e.g., Latin-1 text).
    base64           | Binary files.</pre>

<p>Which encoding you choose for a given document depends largely on (1) what you know about the document&#39;s contents (text vs binary), and (2) whether you need the resulting message to have a reliable encoding for 7-bit Internet email transport.</p>

<p>In general, only <code>quoted-printable</code> and <code>base64</code> guarantee reliable transport of all data; the other three &#34;no-encoding&#34; encodings simply pass the data through, and are only reliable if that data is 7bit ASCII with under 1000 characters per line, and has no conflicts with the multipart boundaries.</p>

<p>I&#39;ve considered making it so that the content-type and encoding can be automatically inferred from the file&#39;s path, but that seems to be asking for trouble... or at least, for Mail::Cap...</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Message-logging"
>Message-logging</a></h2>

<p>MIME-tools is a large and complex toolkit which tries to deal with a wide variety of external input. It&#39;s sometimes helpful to see what&#39;s really going on behind the scenes. There are several kinds of messages logged by the toolkit itself:</p>

<dl>
<dt><a name='Debug'></a><a name="Debug_messages"
>Debug messages</a></dt>

<dd>
<p>These are printed directly to the STDERR, with a prefix of <code>&#34;MIME-tools: debug&#34;</code>.</p>

<p>Debug message are only logged if you have turned <a href="#debugging" class="podlinkpod"
>&#34;debugging&#34;</a> on in the MIME::Tools configuration.</p>

<dt><a name='Warning'></a><a name="Warning_messages"
>Warning messages</a></dt>

<dd>
<p>These are logged by the standard Perl warn() mechanism to indicate an unusual situation. They all have a prefix of <code>&#34;MIME-tools: warning&#34;</code>.</p>

<p>Warning messages are only logged if <code>$^W</code> is set true and MIME::Tools is not configured to be <a href="#quiet" class="podlinkpod"
>&#34;quiet&#34;</a>.</p>

<dt><a name='Error'></a><a name="Error_messages"
>Error messages</a></dt>

<dd>
<p>These are logged by the standard Perl warn() mechanism to indicate that something actually failed. They all have a prefix of <code>&#34;MIME-tools: error&#34;</code>.</p>

<p>Error messages are only logged if <code>$^W</code> is set true and MIME::Tools is not configured to be <a href="#quiet" class="podlinkpod"
>&#34;quiet&#34;</a>.</p>

<dt><a name='Usage'></a><a name="Usage_messages"
>Usage messages</a></dt>

<dd>
<p>Unlike &#34;typical&#34; warnings above, which warn about problems processing data, usage-warnings are for alerting developers of deprecated methods and suspicious invocations.</p>

<p>Usage messages are currently only logged if <code>$^W</code> is set true and MIME::Tools is not configured to be <a href="#quiet" class="podlinkpod"
>&#34;quiet&#34;</a>.</p>
</dd>
</dl>

<p>When a MIME::Parser (or one of its internal helper classes) wants to report a message, it generally does so by recording the message to the <b>MIME::Parser::Results</b> object immediately before invoking the appropriate function above. That means each parsing run has its own trace-log which can be examined for problems.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Configuring_the_toolkit"
>Configuring the toolkit</a></h2>

<p>If you want to tweak the way this toolkit works (for example, to turn on debugging), use the routines in the <b>MIME::Tools</b> module.</p>

<dl>
<dt><a name="debugging"
>debugging</a></dt>

<dd>
<p>Turn debugging on or off. Default is false (off).</p>

<pre class="sh_perl">     MIME::Tools-&#62;debugging(1);</pre>

<dt><a name="quiet"
>quiet</a></dt>

<dd>
<p>Turn the reporting of warning/error messages on or off. Default is true, meaning that these message are silenced.</p>

<pre class="sh_perl">     MIME::Tools-&#62;quiet(1);</pre>

<dt><a name="version"
>version</a></dt>

<dd>
<p>Return the toolkit version.</p>

<pre class="sh_perl">     print MIME::Tools-&#62;version, &#34;\n&#34;;</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="THINGS_YOU_SHOULD_DO"
>THINGS YOU SHOULD DO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Take_a_look_at_the_examples"
>Take a look at the examples</a></h2>

<p>The MIME-Tools distribution comes with an &#34;examples&#34; directory. The scripts in there are basically just tossed-together, but they&#39;ll give you some ideas of how to use the parser.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Run_with_warnings_enabled"
>Run with warnings enabled</a></h2>

<p><i>Always</i> run your Perl script with <code>-w</code>. If you see a warning about a deprecated method, change your code ASAP. This will ease upgrades tremendously.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Avoid_non-standard_encodings"
>Avoid non-standard encodings</a></h2>

<p>Don&#39;t try to MIME-encode using the non-standard MIME encodings. It&#39;s just not a good practice if you want people to be able to read your messages.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Plan_for_thrown_exceptions"
>Plan for thrown exceptions</a></h2>

<p>For example, if your mail-handling code absolutely must not die, then perform mail parsing like this:</p>

<pre class="sh_perl">    $entity = eval { $parser-&#62;parse(\*INPUT) };</pre>

<p>Parsing is a complex process, and some components may throw exceptions if seriously-bad things happen. Since &#34;seriously-bad&#34; is in the eye of the beholder, you&#39;re better off <i>catching</i> possible exceptions instead of asking me to propagate <code>undef</code> up the stack. Use of exceptions in reusable modules is one of those religious issues we&#39;re never all going to agree upon; thankfully, that&#39;s what <code>eval{}</code> is good for.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Check_the_parser_results_for_warnings/errors"
>Check the parser results for warnings/errors</a></h2>

<p>As of 5.3xx, the parser tries extremely hard to give you a MIME::Entity. If there were any problems, it logs warnings/errors to the underlying &#34;results&#34; object (see <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Parser/Results.pm" class="podlinkpod"
>MIME::Parser::Results</a>). Look at that object after each parse. Print out the warnings and errors, <i>especially</i> if messages don&#39;t parse the way you thought they would.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Don&#39;t_plan_on_printing_exactly_what_you_parsed!"
>Don&#39;t plan on printing exactly what you parsed!</a></h2>

<p><i>Parsing is a (slightly) lossy operation.</i> Because of things like ambiguities in base64-encoding, the following is <i>not</i> going to spit out its input unchanged in all cases:</p>

<pre class="sh_perl">    $entity = $parser-&#62;parse(\*STDIN);
    $entity-&#62;print(\*STDOUT);</pre>

<p>If you&#39;re using MIME::Tools to process email, remember to save the data you parse if you want to send it on unchanged. This is vital for things like PGP-signed email.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Understand_how_international_characters_are_represented"
>Understand how international characters are represented</a></h2>

<p>The MIME standard allows for text strings in headers to contain characters from any character set, by using special sequences which look like this:</p>

<pre class="sh_perl">    =?ISO-8859-1?Q?Keld_J=F8rn_Simonsen?=</pre>

<p>To be consistent with the existing Mail::Field classes, MIME::Tools does <i>not</i> automatically unencode these strings, since doing so would lose the character-set information and interfere with the parsing of fields (see <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Parser.pm#decode_headers" class="podlinkpod"
>&#34;decode_headers&#34; in MIME::Parser</a> for a full explanation). That means you should be prepared to deal with these encoded strings.</p>

<p>The most common question then is, <b>how do I decode these encoded strings?</b> The answer depends on what you want to decode them <i>to</i>: ASCII, Latin1, UTF-8, etc. Be aware that your &#34;target&#34; representation may not support all possible character sets you might encounter; for example, Latin1 (ISO-8859-1) has no way of representing Big5 (Chinese) characters. A common practice is to represent &#34;untranslateable&#34; characters as &#34;?&#34;s, or to ignore them completely.</p>

<p>To unencode the strings into some of the more-popular Western byte representations (e.g., Latin1, Latin2, etc.), you can use the decoders in MIME::WordDecoder (see <a href="/~dskoll/MIME-tools-5.502/lib/MIME/WordDecoder.pm" class="podlinkpod"
>MIME::WordDecoder</a>). The simplest way is by using <code>unmime()</code>, a function wrapped around your &#34;default&#34; decoder, as follows:</p>

<pre class="sh_perl">    use MIME::WordDecoder;
    ...
    $subject = unmime $entity-&#62;head-&#62;get(&#39;subject&#39;);</pre>

<p>One place this <i>is</i> done automatically is in extracting the recommended filename for a part while parsing. That&#39;s why you should start by setting up the best &#34;default&#34; decoder if the default target of Latin1 isn&#39;t to your liking.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="THINGS_I_DO_THAT_YOU_SHOULD_KNOW_ABOUT"
>THINGS I DO THAT YOU SHOULD KNOW ABOUT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Fuzzing_of_CRLF_and_newline_on_input"
>Fuzzing of CRLF and newline on input</a></h2>

<p>RFC 2045 dictates that MIME streams have lines terminated by CRLF (<code>&#34;\r\n&#34;</code>). However, it is extremely likely that folks will want to parse MIME streams where each line ends in the local newline character <code>&#34;\n&#34;</code> instead.</p>

<p>An attempt has been made to allow the parser to handle both CRLF and newline-terminated input.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Fuzzing_of_CRLF_and_newline_when_decoding"
>Fuzzing of CRLF and newline when decoding</a></h2>

<p>The <code>&#34;7bit&#34;</code> and <code>&#34;8bit&#34;</code> decoders will decode both a <code>&#34;\n&#34;</code> and a <code>&#34;\r\n&#34;</code> end-of-line sequence into a <code>&#34;\n&#34;</code>.</p>

<p>The <code>&#34;binary&#34;</code> decoder (default if no encoding specified) still outputs stuff verbatim... so a MIME message with CRLFs and no explicit encoding will be output as a text file that, on many systems, will have an annoying ^M at the end of each line... <i>but this is as it should be</i>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Fuzzing_of_CRLF_and_newline_when_encoding/composing"
>Fuzzing of CRLF and newline when encoding/composing</a></h2>

<p>TODO FIXME All encoders currently output the end-of-line sequence as a <code>&#34;\n&#34;</code>, with the assumption that the local mail agent will perform the conversion from newline to CRLF when sending the mail. However, there probably should be an option to output CRLF as per RFC 2045</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Inability_to_handle_multipart_boundaries_with_embedded_newlines"
>Inability to handle multipart boundaries with embedded newlines</a></h2>

<p>Let&#39;s get something straight: this is an evil, EVIL practice. If your mailer creates multipart boundary strings that contain newlines, give it two weeks notice and find another one. If your mail robot receives MIME mail like this, regard it as syntactically incorrect, which it is.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Ignoring_non-header_headers"
>Ignoring non-header headers</a></h2>

<p>People like to hand the parser raw messages straight from POP3 or from a mailbox. There is often predictable non-header information in front of the real headers; e.g., the initial &#34;From&#34; line in the following message:</p>

<pre class="sh_perl">    From - Wed Mar 22 02:13:18 2000
    Return-Path: &#60;eryq@zeegee.com&#62;
    Subject: Hello</pre>

<p>The parser simply ignores such stuff quietly. Perhaps it shouldn&#39;t, but most people seem to want that behavior.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Fuzzing_of_empty_multipart_preambles"
>Fuzzing of empty multipart preambles</a></h2>

<p>Please note that there is currently an ambiguity in the way preambles are parsed in. The following message fragments <i>both</i> are regarded as having an empty preamble (where <code>\n</code> indicates a newline character):</p>

<pre class="sh_perl">     Content-type: multipart/mixed; boundary=&#34;xyz&#34;\n
     Subject: This message (#1) has an empty preamble\n
     \n
     --xyz\n
     ...

     Content-type: multipart/mixed; boundary=&#34;xyz&#34;\n
     Subject: This message (#2) also has an empty preamble\n
     \n
     \n
     --xyz\n
     ...</pre>

<p>In both cases, the <i>first</i> completely-empty line (after the &#34;Subject&#34;) marks the end of the header.</p>

<p>But we should clearly ignore the <i>second</i> empty line in message #2, since it fills the role of <i>&#34;the newline which is only there to make sure that the boundary is at the beginning of a line&#34;</i>. Such newlines are <i>never</i> part of the content preceding the boundary; thus, there is no preamble &#34;content&#34; in message #2.</p>

<p>However, it seems clear that message #1 <i>also</i> has no preamble &#34;content&#34;, and is in fact merely a compact representation of an empty preamble.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Use_of_a_temp_file_during_parsing"
>Use of a temp file during parsing</a></h2>

<p><i>Why not do everything in core?</i> Although the amount of core available on even a modest home system continues to grow, the size of attachments continues to grow with it. I wanted to make sure that even users with small systems could deal with decoding multi-megabyte sounds and movie files. That means not being core-bound.</p>

<p>As of the released 5.3xx, MIME::Parser gets by with only one temp file open per parser. This temp file provides a sort of infinite scratch space for dealing with the current message part. It&#39;s fast and lightweight, but you should know about it anyway.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Why_do_I_assume_that_MIME_objects_are_email_objects?"
>Why do I assume that MIME objects are email objects?</a></h2>

<p>Achim Bohnet once pointed out that MIME headers do nothing more than store a collection of attributes, and thus could be represented as objects which don&#39;t inherit from Mail::Header.</p>

<p>I agree in principle, but RFC 2045 says otherwise. RFC 2045 [MIME] headers are a syntactic subset of RFC-822 [email] headers. Perhaps a better name for these modules would have been RFC1521:: instead of MIME::, but we&#39;re a little beyond that stage now.</p>

<p>When I originally wrote these modules for the CPAN, I agonized for a long time about whether or not they really should subclass from <b>Mail::Internet</b> (then at version 1.17). Thanks to Graham Barr, who graciously evolved MailTools 1.06 to be more MIME-friendly, unification was achieved at MIME-tools release 2.0. The benefits in reuse alone have been substantial.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="A_MIME_PRIMER"
>A MIME PRIMER <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>So you need to parse (or create) MIME, but you&#39;re not quite up on the specifics? No problem...</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Glossary"
>Glossary</a></h2>

<p>Here are some definitions adapted from RFC 1521 (predecessor of the current RFC 204[56789] defining MIME) explaining the terminology we use; each is accompanied by the equivalent in MIME:: module terms...</p>

<dl>
<dt><a name="attachment"
>attachment</a></dt>

<dd>
<p>An &#34;attachment&#34; is common slang for any part of a multipart message -- except, perhaps, for the first part, which normally carries a user message describing the attachments that follow (e.g.: &#34;Hey dude, here&#39;s that GIF file I promised you.&#34;).</p>

<p>In our system, an attachment is just a <b>MIME::Entity</b> under the top-level entity, probably one of its <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Entity.pm#parts" class="podlinkpod"
>parts</a>.</p>

<dt><a name="body"
>body</a></dt>

<dd>
<p>The &#34;body&#34; of an <a href="#entity" class="podlinkpod"
>entity</a> is that portion of the entity which follows the <a href="#header" class="podlinkpod"
>header</a> and which contains the real message content. For example, if your MIME message has a GIF file attachment, then the body of that attachment is the base64-encoded GIF file itself.</p>

<p>A body is represented by an instance of <b>MIME::Body</b>. You get the body of an entity by sending it a <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Entity.pm#bodyhandle" class="podlinkpod"
>bodyhandle()</a> message.</p>

<dt><a name='body'></a><a name="body_part"
>body part</a></dt>

<dd>
<p>One of the parts of the body of a multipart <b>/entity</b>. A body part has a <b>/header</b> and a <b>/body</b>, so it makes sense to speak about the body of a body part.</p>

<p>Since a body part is just a kind of entity, it&#39;s represented by an instance of <b>MIME::Entity</b>.</p>

<dt><a name="entity"
>entity</a></dt>

<dd>
<p>An &#34;entity&#34; means either a <b>/message</b> or a <b>/body part</b>. All entities have a <b>/header</b> and a <b>/body</b>.</p>

<p>An entity is represented by an instance of <b>MIME::Entity</b>. There are instance methods for recovering the <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Entity.pm#head" class="podlinkpod"
>header</a> (a <b>MIME::Head</b>) and the <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Entity.pm#bodyhandle" class="podlinkpod"
>body</a> (a <b>MIME::Body</b>).</p>

<dt><a name="header"
>header</a></dt>

<dd>
<p>This is the top portion of the MIME message, which contains the &#34;Content-type&#34;, &#34;Content-transfer-encoding&#34;, etc. Every MIME entity has a header, represented by an instance of <b>MIME::Head</b>. You get the header of an entity by sending it a head() message.</p>

<dt><a name="message"
>message</a></dt>

<dd>
<p>A &#34;message&#34; generally means the complete (or &#34;top-level&#34;) message being transferred on a network.</p>

<p>There currently is no explicit package for &#34;messages&#34;; under MIME::, messages are streams of data which may be read in from files or filehandles. You can think of the <b>MIME::Entity</b> returned by the <b>MIME::Parser</b> as representing the full message.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Content_types"
>Content types</a></h2>

<p>This indicates what kind of data is in the MIME message, usually as <i>majortype/minortype</i>. The standard major types are shown below. A more-comprehensive listing may be found in RFC-2046.</p>

<dl>
<dt><a name="application"
>application</a></dt>

<dd>
<p>Data which does not fit in any of the other categories, particularly data to be processed by some type of application program. <code>application/octet-stream</code>, <code>application/gzip</code>, <code>application/postscript</code>...</p>

<dt><a name="audio"
>audio</a></dt>

<dd>
<p>Audio data. <code>audio/basic</code>...</p>

<dt><a name="image"
>image</a></dt>

<dd>
<p>Graphics data. <code>image/gif</code>, <code>image/jpeg</code>...</p>

<dt><a name="message"
>message</a></dt>

<dd>
<p>A message, usually another mail or MIME message. <code>message/rfc822</code>...</p>

<dt><a name="multipart"
>multipart</a></dt>

<dd>
<p>A message containing other messages. <code>multipart/mixed</code>, <code>multipart/alternative</code>...</p>

<dt><a name="text"
>text</a></dt>

<dd>
<p>Textual data, meant for humans to read. <code>text/plain</code>, <code>text/html</code>...</p>

<dt><a name="video"
>video</a></dt>

<dd>
<p>Video or video+audio data. <code>video/mpeg</code>...</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Content_transfer_encodings"
>Content transfer encodings</a></h2>

<p>This is how the message body is packaged up for safe transit. There are the 5 major MIME encodings. A more-comprehensive listing may be found in RFC-2045.</p>

<dl>
<dt><a name="7bit"
>7bit</a></dt>

<dd>
<p>No encoding is done at all. This label simply asserts that no 8-bit characters are present, and that lines do not exceed 1000 characters in length (including the CRLF).</p>

<dt><a name="8bit"
>8bit</a></dt>

<dd>
<p>No encoding is done at all. This label simply asserts that the message might contain 8-bit characters, and that lines do not exceed 1000 characters in length (including the CRLF).</p>

<dt><a name="binary"
>binary</a></dt>

<dd>
<p>No encoding is done at all. This label simply asserts that the message might contain 8-bit characters, and that lines may exceed 1000 characters in length. Such messages are the <i>least</i> likely to get through mail gateways.</p>

<dt><a name="base64"
>base64</a></dt>

<dd>
<p>A standard encoding, which maps arbitrary binary data to the 7bit domain. Like &#34;uuencode&#34;, but very well-defined. This is how you should send essentially binary information (tar files, GIFs, JPEGs, etc.).</p>

<dt><a name='quoted'></a><a name="quoted-printable"
>quoted-printable</a></dt>

<dd>
<p>A standard encoding, which maps arbitrary line-oriented data to the 7bit domain. Useful for encoding messages which are textual in nature, yet which contain non-ASCII characters (e.g., Latin-1, Latin-2, or any other 8-bit alphabet).</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~dskoll/MIME-tools-5.502/lib/MIME/Parser.pm" class="podlinkpod"
>MIME::Parser</a>, <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Head.pm" class="podlinkpod"
>MIME::Head</a>, <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Body.pm" class="podlinkpod"
>MIME::Body</a>, <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Entity.pm" class="podlinkpod"
>MIME::Entity</a>, <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Decoder.pm" class="podlinkpod"
>MIME::Decoder</a>, <a href="/perldoc?Mail%3A%3AHeader" class="podlinkpod"
>Mail::Header</a>, <a href="/perldoc?Mail%3A%3AInternet" class="podlinkpod"
>Mail::Internet</a></p>

<p>At the time of this writing, the MIME-tools homepage was <em><a href="http://www.mimedefang.org/static/mime-tools.php" class="podlinkurl"
>http://www.mimedefang.org/static/mime-tools.php</a></em>. Check there for updates and support.</p>

<p>The MIME format is documented in RFCs 1521-1522, and more recently in RFCs 2045-2049.</p>

<p>The MIME header format is an outgrowth of the mail header format documented in RFC 822.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT"
>SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Please file support requests via rt.cpan.org.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CHANGE_LOG"
>CHANGE LOG <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Released as MIME-parser (1.0): 28 April 1996. Released as MIME-tools (2.0): Halloween 1996. Released as MIME-tools (4.0): Christmas 1997. Released as MIME-tools (5.0): Mother&#39;s Day 2000.</p>

<p>See ChangeLog file for full details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Eryq (<em>eryq@zeegee.com</em>), ZeeGee Software Inc (<em><a href="http://www.zeegee.com" class="podlinkurl"
>http://www.zeegee.com</a></em>). David F. Skoll (<em>dfs@roaringpenguin.com</em>) <em><a href="http://www.roaringpenguin.com" class="podlinkurl"
>http://www.roaringpenguin.com</a></em>.</p>

<p>Copyright (c) 1998, 1999 by ZeeGee Software Inc (www.zeegee.com). Copyright (c) 2004 by Roaring Penguin Software Inc (www.roaringpenguin.com)</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>See the COPYING file in the distribution for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACKNOWLEDGMENTS"
>ACKNOWLEDGMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>This kit would not have been possible</b> but for the direct contributions of the following:</p>

<pre class="sh_perl">    Gisle Aas             The MIME encoding/decoding modules.
    Laurent Amon          Bug reports and suggestions.
    Graham Barr           The new MailTools.
    Achim Bohnet          Numerous good suggestions, including the I/O model.
    Kent Boortz           Initial code for RFC-1522-decoding of MIME headers.
    Andreas Koenig        Numerous good ideas, tons of beta testing,
                            and help with CPAN-friendly packaging.
    Igor Starovoitov      Bug reports and suggestions.
    Jason L Tibbitts III  Bug reports, suggestions, patches.</pre>

<p>Not to mention the Accidental Beta Test Team, whose bug reports (and comments) have been invaluable in improving the whole:</p>

<pre class="sh_perl">    Phil Abercrombie
    Mike Blazer
    Brandon Browning
    Kurt Freytag
    Steve Kilbane
    Jake Morrison
    Rolf Nelson
    Joel Noble
    Michael W. Normandin
    Tim Pierce
    Andrew Pimlott
    Dragomir R. Radev
    Nickolay Saukh
    Russell Sutherland
    Larry Virden
    Zyx</pre>

<p>Please forgive me if I&#39;ve accidentally left you out. Better yet, email me, and I&#39;ll put you in.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78156 Uploads, 24703 Distributions
105960 Modules, 9642 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Document']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Document']);
    });
  });
</script>
<!-- Tue Apr 24 17:57:47 2012 GMT (0.124236106872559) @cpansearch1 -->
 </body>
</html>
