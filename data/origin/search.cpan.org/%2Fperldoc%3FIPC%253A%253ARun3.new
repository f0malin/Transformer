<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>IPC::Run3 - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","IPC-Run3",3]);
    _gaq.push(["_setCustomVar",5,"Release","IPC-Run3-0.045",3]);
    _gaq.push(["_setCustomVar",3,"Module","IPC::Run3",3]);
    _gaq.push(["_setCustomVar",1,"Author","RJBS",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?IPC::Run3">permalink</a></div>
  <a href="/~rjbs/">Ricardo SIGNES</a> &gt;
  <a href="/~rjbs/IPC-Run3-0.045/">IPC-Run3-0.045</a> &gt;
  IPC::Run3
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/cec6b9b88295ead26c65f8747a76561b?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/R/RJ/RJBS/IPC-Run3-0.045.tar.gz">IPC-Run3-0.045.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=IPC%3A%3ARun3;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~RJBS/IPC-Run3-0.045/lib/IPC/Run3.pm">Annotate this POD
(2)
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 3</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 8</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=IPC-Run3">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.045 &nbsp;
<span class="noprint">
  <a href="/src/RJBS/IPC-Run3-0.045/lib/IPC/Run3.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#run3($cmd,_$stdin,_$stdout,_$stderr,_\%options)'>run3($cmd, $stdin, $stdout, $stderr, \%options)</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#$cmd'>$cmd</a>
      <li class='indexItem indexItem3'><a href='#$stdin,_$stdout,_$stderr'>$stdin, $stdout, $stderr</a>
      <li class='indexItem indexItem3'><a href='#\%options'>\%options</a>
    </ul>
  </ul>
  <li class='indexItem indexItem1'><a href='#HOW_IT_WORKS'>HOW IT WORKS</a>
  <li class='indexItem indexItem1'><a href='#LIMITATIONS'>LIMITATIONS</a>
  <li class='indexItem indexItem1'><a href='#DEBUGGING'>DEBUGGING</a>
  <li class='indexItem indexItem1'><a href='#PROFILING'>PROFILING</a>
  <li class='indexItem indexItem1'><a href='#COMPARISON'>COMPARISON</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#compared_to_system(),_qx&#39;&#39;,_open_&#34;...|&#34;,_open_&#34;|...&#34;'>compared to system(), qx&#39;&#39;, open &#34;...|&#34;, open &#34;|...&#34;</a>
    <li class='indexItem indexItem2'><a href='#compared_to_open2(),_open3()'>compared to open2(), open3()</a>
    <li class='indexItem indexItem2'><a href='#compared_to_IPC::Run::run()'>compared to IPC::Run::run()</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#LICENSE'>LICENSE</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>IPC::Run3 - run a subprocess with input/ouput redirection</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>version 0.045</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use IPC::Run3;    # Exports run3() by default

    run3 \@cmd, \$in, \$out, \$err;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module allows you to run a subprocess and redirect stdin, stdout, and/or stderr to files and perl data structures. It aims to satisfy 99% of the need for using <code>system</code>, <code>qx</code>, and <code>open3</code> with a simple, extremely Perlish API.</p>

<p>Speed, simplicity, and portability are paramount. (That&#39;s speed of Perl code; which is often much slower than the kind of buffered I/O that this module uses to spool input to and output from the child command.)</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="run3($cmd,_$stdin,_$stdout,_$stderr,_\%options)"
><code>run3($cmd, $stdin, $stdout, $stderr, \%options)</code></a></h2>

<p>All parameters after <code>$cmd</code> are optional.</p>

<p>The parameters <code>$stdin</code>, <code>$stdout</code> and <code>$stderr</code> indicate how the child&#39;s corresponding filehandle (<code>STDIN</code>, <code>STDOUT</code> and <code>STDERR</code>, resp.) will be redirected. Because the redirects come last, this allows <code>STDOUT</code> and <code>STDERR</code> to default to the parent&#39;s by just not specifying them -- a common use case.</p>

<p><code>run3</code> throws an exception if the wrapped <code>system</code> call returned -1 or anything went wrong with <code>run3</code>&#39;s processing of filehandles. Otherwise it returns true. It leaves <code>$?</code> intact for inspection of exit and wait status.</p>

<p>Note that a true return value from <code>run3</code> doesn&#39;t mean that the command had a successful exit code. Hence you should always check <code>$?</code>.</p>

<p>See <a href="#%options" class="podlinkpod"
>&#34;%options&#34;</a> for an option to handle the case of <code>system</code> returning -1 yourself.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="$cmd"
><code>$cmd</code></a></h3>

<p>Usually <code>$cmd</code> will be an ARRAY reference and the child is invoked via</p>

<pre class="sh_perl">  system @$cmd;</pre>

<p>But <code>$cmd</code> may also be a string in which case the child is invoked via</p>

<pre class="sh_perl">  system $cmd;</pre>

<p>(cf. <a href="/perldoc?perlfunc#system" class="podlinkpod"
>&#34;system&#34; in perlfunc</a> for the difference and the pitfalls of using the latter form).</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="$stdin,_$stdout,_$stderr"
><code>$stdin</code>, <code>$stdout</code>, <code>$stderr</code></a></h3>

<p>The parameters <code>$stdin</code>, <code>$stdout</code> and <code>$stderr</code> can take one of the following forms:</p>

<dl>
<dt><a name='undef'></a><a name="undef_(or_not_specified_at_all)"
><code>undef</code> (or not specified at all)</a></dt>

<dd>
<p>The child inherits the corresponding filehandle from the parent.</p>

<pre class="sh_perl">  run3 \@cmd, $stdin;                   # child writes to same STDOUT and STDERR as parent
  run3 \@cmd, undef, $stdout, $stderr;  # child reads from same STDIN as parent</pre>

<dt><a name='undef'></a><a name="\undef"
><code>\undef</code></a></dt>

<dd>
<p>The child&#39;s filehandle is redirected from or to the local equivalent of <code>/dev/null</code> (as returned by <code>File::Spec-&#62;devnull()</code>).</p>

<pre class="sh_perl">  run3 \@cmd, \undef, $stdout, $stderr; # child reads from /dev/null</pre>

<dt><a name='a'></a><a name="a_simple_scalar"
>a simple scalar</a></dt>

<dd>
<p>The parameter is taken to be the name of a file to read from or write to. In the latter case, the file will be opened via</p>

<pre class="sh_perl">  open FH, &#34;&#62;&#34;, ...</pre>

<p>i.e. it is created if it doesn&#39;t exist and truncated otherwise. Note that the file is opened by the parent which will <a href="/perldoc?Carp#croak" class="podlinkpod"
>croak</a> in case of failure.</p>

<pre class="sh_perl">  run3 \@cmd, \undef, &#34;out.txt&#34;;        # child writes to file &#34;out.txt&#34;</pre>

<dt><a name='a'></a><a name="a_filehandle_(either_a_reference_to_a_GLOB_or_an_IO::Handle)"
>a filehandle (either a reference to a GLOB or an <code>IO::Handle</code>)</a></dt>

<dd>
<p>The filehandle is inherited by the child.</p>

<pre class="sh_perl">  open my $fh, &#34;&#62;&#34;, &#34;out.txt&#34;;
  print $fh &#34;prologue\n&#34;;
  ...
  run3 \@cmd, \undef, $fh;              # child writes to $fh
  ...
  print $fh &#34;epilogue\n&#34;;
  close $fh;</pre>

<dt><a name='a'></a><a name="a_SCALAR_reference"
>a SCALAR reference</a></dt>

<dd>
<p>The referenced scalar is treated as a string to be read from or written to. In the latter case, the previous content of the string is overwritten.</p>

<pre class="sh_perl">  my $out;
  run3 \@cmd, \undef, \$out;           # child writes into string
  run3 \@cmd, \&#60;&#60;EOF;                  # child reads from string (can use &#34;here&#34; notation)
  Input
  to
  child
  EOF</pre>

<dt><a name='an'></a><a name="an_ARRAY_reference"
>an ARRAY reference</a></dt>

<dd>
<p>For <code>$stdin</code>, the elements of <code>@$stdin</code> are simply spooled to the child.</p>

<p>For <code>$stdout</code> or <code>$stderr</code>, the child&#39;s corresponding file descriptor is read line by line (as determined by the current setting of <code>$/</code>) into <code>@$stdout</code> or <code>@$stderr</code>, resp. The previous content of the array is overwritten.</p>

<pre class="sh_perl">  my @lines;
  run3 \@cmd, \undef, \@lines;         # child writes into array</pre>

<dt><a name='a'></a><a name="a_CODE_reference"
>a CODE reference</a></dt>

<dd>
<p>For <code>$stdin</code>, <code>&#38;$stdin</code> will be called repeatedly (with no arguments) and the return values are spooled to the child. <code>&#38;$stdin</code> must signal the end of input by returning <code>undef</code>.</p>

<p>For <code>$stdout</code> or <code>$stderr</code>, the child&#39;s corresponding file descriptor is read line by line (as determined by the current setting of <code>$/</code>) and <code>&#38;$stdout</code> or <code>&#38;$stderr</code>, resp., is called with the contents of the line. Note that there&#39;s no end-of-file indication.</p>

<pre class="sh_perl">  my $i = 0;
  sub producer {
    return $i &#60; 10 ? &#34;line&#34;.$i++.&#34;\n&#34; : undef;
  }

  run3 \@cmd, \&#38;producer;              # child reads 10 lines</pre>

<p>Note that this form of redirecting the child&#39;s I/O doesn&#39;t imply any form of concurrency between parent and child - run3()&#39;s method of operation is the same no matter which form of redirection you specify.</p>
</dd>
</dl>

<p>If the same value is passed for <code>$stdout</code> and <code>$stderr</code>, then the child will write both <code>STDOUT</code> and <code>STDERR</code> to the same filehandle. In general, this means that</p>

<pre class="sh_perl">    run3 \@cmd, \undef, &#34;foo.txt&#34;, &#34;foo.txt&#34;;
    run3 \@cmd, \undef, \$both, \$both;</pre>

<p>will DWIM and pass a single file handle to the child for both <code>STDOUT</code> and <code>STDERR</code>, collecting all into file &#34;foo.txt&#34; or <code>$both</code>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="\%options"
><code>\%options</code></a></h3>

<p>The last parameter, <code>\%options</code>, must be a hash reference if present.</p>

<p>Currently the following keys are supported:</p>

<dl>
<dt><a name='binmode_stdin'></a><a name="binmode_stdin,_binmode_stdout,_binmode_stderr"
><code>binmode_stdin</code>, <code>binmode_stdout</code>, <code>binmode_stderr</code></a></dt>

<dd>
<p>The value must a &#34;layer&#34; as described in <a href="/perldoc?perlfunc#binmode" class="podlinkpod"
>&#34;binmode&#34; in perlfunc</a>. If specified the corresponding parameter <code>$stdin</code>, <code>$stdout</code> or <code>$stderr</code>, resp., operates with the given layer.</p>

<p>For backward compatibility, a true value that doesn&#39;t start with &#34;:&#34; (e.g. a number) is interpreted as &#34;:raw&#34;. If the value is false or not specified, the default is &#34;:crlf&#34; on Windows and &#34;:raw&#34; otherwise.</p>

<p>Don&#39;t expect that values other than the built-in layers &#34;:raw&#34;, &#34;:crlf&#34;, and (on newer Perls) &#34;:bytes&#34;, &#34;:utf8&#34;, &#34;:encoding(...)&#34; will work.</p>

<dt><a name='append_stdout'></a><a name="append_stdout,_append_stderr"
><code>append_stdout</code>, <code>append_stderr</code></a></dt>

<dd>
<p>If their value is true then the corresponding parameter <code>$stdout</code> or <code>$stderr</code>, resp., will append the child&#39;s output to the existing &#34;contents&#34; of the redirector. This only makes sense if the redirector is a simple scalar (the corresponding file is opened in append mode), a SCALAR reference (the output is appended to the previous contents of the string) or an ARRAY reference (the output is <code>push</code>ed onto the previous contents of the array).</p>

<dt><a name="return_if_system_error"
><code>return_if_system_error</code></a></dt>

<dd>
<p>If this is true <code>run3</code> does <b>not</b> throw an exception if <code>system</code> returns -1 (cf. <a href="/perldoc?perlfunc#system" class="podlinkpod"
>&#34;system&#34; in perlfunc</a> for possible failure scenarios.), but returns true instead. In this case <code>$?</code> has the value -1 and <code>$!</code> contains the errno of the failing <code>system</code> call.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="HOW_IT_WORKS"
>HOW IT WORKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='1'></a><a name="(1)"
>(1)</a></dt>

<dd>
<p>For each redirector <code>$stdin</code>, <code>$stdout</code>, and <code>$stderr</code>, <code>run3()</code> furnishes a filehandle:</p>

<ul>
<li>if the redirector already specifies a filehandle it just uses that</li>

<li>if the redirector specifies a filename, <code>run3()</code> opens the file in the appropriate mode</li>

<li>in all other cases, <code>run3()</code> opens a temporary file (using <a href="/perldoc?Temp#tempfile" class="podlinkpod"
>tempfile</a>)</li>
</ul>

<dt><a name='2'></a><a name="(2)"
>(2)</a></dt>

<dd>
<p>If <code>run3()</code> opened a temporary file for <code>$stdin</code> in step (1), it writes the data using the specified method (either from a string, an array or returnd by a function) to the temporary file and rewinds it.</p>

<dt><a name='3'></a><a name="(3)"
>(3)</a></dt>

<dd>
<p><code>run3()</code> saves the parent&#39;s <code>STDIN</code>, <code>STDOUT</code> and <code>STDERR</code> by duplicating them to new filehandles. It duplicates the filehandles from step (1) to <code>STDIN</code>, <code>STDOUT</code> and <code>STDERR</code>, resp.</p>

<dt><a name='4'></a><a name="(4)"
>(4)</a></dt>

<dd>
<p><code>run3()</code> runs the child by invoking <a href="/perldoc?perlfunc#system" class="podlinkpod"
>system</a> with <code>$cmd</code> as specified above.</p>

<dt><a name='5'></a><a name="(5)"
>(5)</a></dt>

<dd>
<p><code>run3()</code> restores the parent&#39;s <code>STDIN</code>, <code>STDOUT</code> and <code>STDERR</code> saved in step (3).</p>

<dt><a name='6'></a><a name="(6)"
>(6)</a></dt>

<dd>
<p>If <code>run3()</code> opened a temporary file for <code>$stdout</code> or <code>$stderr</code> in step (1), it rewinds it and reads back its contents using the specified method (either to a string, an array or by calling a function).</p>

<dt><a name='7'></a><a name="(7)"
>(7)</a></dt>

<dd>
<p><code>run3()</code> closes all filehandles that it opened explicitly in step (1).</p>
</dd>
</dl>

<p>Note that when using temporary files, <code>run3()</code> tries to amortize the overhead by reusing them (i.e. it keeps them open and rewinds and truncates them before the next operation).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LIMITATIONS"
>LIMITATIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Often uses intermediate files (determined by File::Temp, and thus by the File::Spec defaults and the TMPDIR env. variable) for speed, portability and simplicity.</p>

<p>Use extrem caution when using <code>run3</code> in a threaded environment if concurrent calls of <code>run3</code> are possible. Most likely, I/O from different invocations will get mixed up. The reason is that in most thread implementations all threads in a process share the same STDIN/STDOUT/STDERR. Known failures are Perl ithreads on Linux and Win32. Note that <code>fork</code> on Win32 is emulated via Win32 threads and hence I/O mix up is possible between forked children here (<code>run3</code> is &#34;fork safe&#34; on Unix, though).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DEBUGGING"
>DEBUGGING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>To enable debugging use the IPCRUN3DEBUG environment variable to a non-zero integer value:</p>

<pre class="sh_perl">  $ IPCRUN3DEBUG=1 myapp</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PROFILING"
>PROFILING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>To enable profiling, set IPCRUN3PROFILE to a number to enable emitting profile information to STDERR (1 to get timestamps, 2 to get a summary report at the END of the program, 3 to get mini reports after each run) or to a filename to emit raw data to a file for later analysis.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COMPARISON"
>COMPARISON <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Here&#39;s how it stacks up to existing APIs:</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="compared_to_system(),_qx&#39;&#39;,_open_&#34;...|&#34;,_open_&#34;|...&#34;"
>compared to <code>system()</code>, <code>qx&#39;&#39;</code>, <code>open &#34;...|&#34;</code>, <code>open &#34;|...&#34;</code></a></h2>

<ul>
<li>better: redirects more than one file descriptor</li>

<li>better: returns TRUE on success, FALSE on failure</li>

<li>better: throws an error if problems occur in the parent process (or the pre-exec child)</li>

<li>better: allows a very perlish interface to Perl data structures and subroutines</li>

<li>better: allows 1 word invocations to avoid the shell easily:
<pre class="sh_perl"> run3 [&#34;foo&#34;];  # does not invoke shell</pre>
</li>

<li>worse: does not return the exit code, leaves it in $?</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="compared_to_open2(),_open3()"
>compared to <code>open2()</code>, <code>open3()</code></a></h2>

<ul>
<li>better: no lengthy, error prone polling/select loop needed</li>

<li>better: hides OS dependencies</li>

<li>better: allows SCALAR, ARRAY, and CODE references to source and sink I/O</li>

<li>better: I/O parameter order is like <code>open3()</code> (not like <code>open2()</code>).</li>

<li>worse: does not allow interaction with the subprocess</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="compared_to_IPC::Run::run()"
>compared to <a href="/perldoc?IPC%3A%3ARun#run" class="podlinkpod"
>IPC::Run::run()</a></a></h2>

<ul>
<li>better: smaller, lower overhead, simpler, more portable</li>

<li>better: no select() loop portability issues</li>

<li>better: does not fall prey to Perl closure leaks</li>

<li>worse: does not allow interaction with the subprocess (which IPC::Run::run() allows by redirecting subroutines)</li>

<li>worse: lacks many features of <code>IPC::Run::run()</code> (filters, pipes, redirects, pty support)</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2003, R. Barrie Slaymaker, Jr., All Rights Reserved</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE"
>LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You may use this module under the terms of the BSD, Artistic, or GPL licenses, any version.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Barrie Slaymaker &#60;<code>barries@slaysys.com</code>&#62;</p>

<p>Ricardo SIGNES &#60;<code>rjbs@cpan.org</code>&#62; performed routine maintenance since 2010, thanks to help from the following ticket and/or patch submitters: Jody Belka, Roderich Schupp, David Morel, Jeff Lavallee, and anonymous others.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78260 Uploads, 24722 Distributions
105996 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 14:36:03 2012 GMT (0.106171131134033) @cpansearch1 -->
 </body>
</html>
