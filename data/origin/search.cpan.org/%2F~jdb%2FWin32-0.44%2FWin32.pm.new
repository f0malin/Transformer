<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Win32 - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Win32",3]);
    _gaq.push(["_setCustomVar",5,"Release","Win32-0.44",3]);
    _gaq.push(["_setCustomVar",3,"Module","Win32",3]);
    _gaq.push(["_setCustomVar",1,"Author","JDB",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Win32">permalink</a></div>
  <a href="/~jdb/">Jan Dubois</a> &gt;
  <a href="/~jdb/Win32-0.44/">Win32-0.44</a> &gt;
  Win32
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/b9464f2c68f7d9e5337623051a0b1c39?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/J/JD/JDB/Win32-0.44.tar.gz">Win32-0.44.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Win32;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~JDB/Win32-0.44/Win32.pm">Annotate this POD
</a></p>
     <p style="text-align:right"><a href="http://code.google.com/p/libwin32/">Website</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 7</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Win32">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.44 &nbsp;
<span class="noprint">
  <a href="/src/JDB/Win32-0.44/Win32.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Alphabetical_Listing_of_Win32_Functions'>Alphabetical Listing of Win32 Functions</a>
  </ul>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Win32 - Interfaces to some Win32 API Functions</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Win32 module contains functions to access Win32 APIs.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Alphabetical_Listing_of_Win32_Functions"
>Alphabetical Listing of Win32 Functions</a></h2>

<p>It is recommended to <code>use Win32;</code> before any of these functions; however,
for backwards compatibility,
those marked as [CORE] will automatically do this for you.</p>

<p>In the function descriptions below the term <i>Unicode string</i> is used to indicate that the string may contain characters outside the system codepage.
The caveat <i>If supported by the core Perl version</i> generally means Perl 5.8.9 and later,
though some Unicode pathname functionality may work on earlier versions.</p>

<dl>
<dt><a name='Win32'></a><a name="Win32::AbortSystemShutdown(MACHINE)"
>Win32::AbortSystemShutdown(MACHINE)</a></dt>

<dd>
<p>Aborts a system shutdown (started by the InitiateSystemShutdown function) on the specified MACHINE.</p>

<dt><a name='Win32'></a><a name="Win32::BuildNumber()"
>Win32::BuildNumber()</a></dt>

<dd>
<p>[CORE] Returns the ActivePerl build number.
This function is only available in the ActivePerl binary distribution.</p>

<dt><a name='Win32'></a><a name="Win32::CopyFile(FROM,_TO,_OVERWRITE)"
>Win32::CopyFile(FROM,
TO,
OVERWRITE)</a></dt>

<dd>
<p>[CORE] The Win32::CopyFile() function copies an existing file to a new file.
All file information like creation time and file attributes will be copied to the new file.
However it will <b>not</b> copy the security information.
If the destination file already exists it will only be overwritten when the OVERWRITE parameter is true.
But even this will not overwrite a read-only file; you have to unlink() it first yourself.</p>

<dt><a name='Win32'></a><a name="Win32::CreateDirectory(DIRECTORY)"
>Win32::CreateDirectory(DIRECTORY)</a></dt>

<dd>
<p>Creates the DIRECTORY and returns a true value on success.
Check $^E on failure for extended error information.</p>

<p>DIRECTORY may contain Unicode characters outside the system codepage.
Once the directory has been created you can use Win32::GetANSIPathName() to get a name that can be passed to system calls and external programs.</p>

<dt><a name='Win32'></a><a name="Win32::CreateFile(FILE)"
>Win32::CreateFile(FILE)</a></dt>

<dd>
<p>Creates the FILE and returns a true value on success.
Check $^E on failure for extended error information.</p>

<p>FILE may contain Unicode characters outside the system codepage.
Once the file has been created you can use Win32::GetANSIPathName() to get a name that can be passed to system calls and external programs.</p>

<dt><a name='Win32'></a><a name="Win32::DomainName()"
>Win32::DomainName()</a></dt>

<dd>
<p>[CORE] Returns the name of the Microsoft Network domain or workgroup that the owner of the current perl process is logged into.
The &#34;Workstation&#34; service must be running to determine this information.
This function does <b>not</b> work on Windows 9x.</p>

<dt><a name='Win32'></a><a name="Win32::ExpandEnvironmentStrings(STRING)"
>Win32::ExpandEnvironmentStrings(STRING)</a></dt>

<dd>
<p>Takes STRING and replaces all referenced environment variable names with their defined values.
References to environment variables take the form <code>%VariableName%</code>.
Case is ignored when looking up the VariableName in the environment.
If the variable is not found then the original <code>%VariableName%</code> text is retained.
Has the same effect as the following:</p>

<pre class="sh_perl">        $string =~ s/%([^%]*)%/$ENV{$1} || &#34;%$1%&#34;/eg</pre>

<p>However, this function may return a Unicode string if the environment variable being expanded hasn&#39;t been assigned to via %ENV. Access to %ENV is currently always using byte semantics.</p>

<dt><a name='Win32'></a><a name="Win32::FormatMessage(ERRORCODE)"
>Win32::FormatMessage(ERRORCODE)</a></dt>

<dd>
<p>[CORE] Converts the supplied Win32 error number (e.g. returned by Win32::GetLastError()) to a descriptive string. Analogous to the perror() standard-C library function. Note that <code>$^E</code> used in a string context has much the same effect.</p>

<pre class="sh_perl">        C:\&#62; perl -e &#34;$^E = 26; print $^E;&#34;
        The specified disk or diskette cannot be accessed</pre>

<dt><a name='Win32'></a><a name="Win32::FsType()"
>Win32::FsType()</a></dt>

<dd>
<p>[CORE] Returns the name of the filesystem of the currently active drive (like &#39;FAT&#39; or &#39;NTFS&#39;). In list context it returns three values: (FSTYPE, FLAGS, MAXCOMPLEN). FSTYPE is the filesystem type as before. FLAGS is a combination of values of the following table:</p>

<pre class="sh_perl">        0x00000001  supports case-sensitive filenames
        0x00000002  preserves the case of filenames
        0x00000004  supports Unicode in filenames
        0x00000008  preserves and enforces ACLs
        0x00000010  supports file-based compression
        0x00000020  supports disk quotas
        0x00000040  supports sparse files
        0x00000080  supports reparse points
        0x00000100  supports remote storage
        0x00008000  is a compressed volume (e.g. DoubleSpace)
        0x00010000  supports object identifiers
        0x00020000  supports the Encrypted File System (EFS)</pre>

<p>MAXCOMPLEN is the maximum length of a filename component (the part between two backslashes) on this file system.</p>

<dt><a name='Win32'></a><a name="Win32::FreeLibrary(HANDLE)"
>Win32::FreeLibrary(HANDLE)</a></dt>

<dd>
<p>Unloads a previously loaded dynamic-link library. The HANDLE is no longer valid after this call. See <a href="/perldoc?Win32%3A%3ALoadLibrary(LIBNAME)" class="podlinkpod"
>LoadLibrary</a> for information on dynamically loading a library.</p>

<dt><a name='Win32'></a><a name="Win32::GetANSIPathName(FILENAME)"
>Win32::GetANSIPathName(FILENAME)</a></dt>

<dd>
<p>Returns an ANSI version of FILENAME. This may be the short name if the long name cannot be represented in the system codepage.</p>

<p>While not currently implemented, it is possible that in the future this function will convert only parts of the path to FILENAME to a short form.</p>

<p>If FILENAME doesn&#39;t exist on the filesystem, or if the filesystem doesn&#39;t support short ANSI filenames, then this function will translate the Unicode name into the system codepage using replacement characters.</p>

<dt><a name='Win32'></a><a name="Win32::GetArchName()"
>Win32::GetArchName()</a></dt>

<dd>
<p>Use of this function is deprecated. It is equivalent with $ENV{PROCESSOR_ARCHITECTURE}. This might not work on Win9X.</p>

<dt><a name='Win32'></a><a name="Win32::GetChipName()"
>Win32::GetChipName()</a></dt>

<dd>
<p>Returns the processor type: 386, 486 or 586 for x86 processors, 8664 for the x64 processor and 2200 for the Itanium. Since it returns the native processor type it will return a 64-bit processor type even when called from a 32-bit Perl running on 64-bit Windows.</p>

<dt><a name='Win32'></a><a name="Win32::GetCwd()"
>Win32::GetCwd()</a></dt>

<dd>
<p>[CORE] Returns the current active drive and directory. This function does not return a UNC path, since the functionality required for such a feature is not available under Windows 95.</p>

<p>If supported by the core Perl version, this function will return an ANSI path name for the current directory if the long pathname cannot be represented in the system codepage.</p>

<dt><a name='Win32'></a><a name="Win32::GetCurrentProcessId()"
>Win32::GetCurrentProcessId()</a></dt>

<dd>
<p>Returns the process identifier of the current process. Until the process terminates, the process identifier uniquely identifies the process throughout the system.</p>

<p>The current process identifier is normally also available via the predefined $$ variable. Under fork() emulation however $$ may contain a pseudo-process identifier that is only meaningful to the Perl kill(), wait() and waitpid() functions. The Win32::GetCurrentProcessId() function will always return the regular Windows process id, even when called from inside a pseudo-process.</p>

<dt><a name='Win32'></a><a name="Win32::GetCurrentThreadId()"
>Win32::GetCurrentThreadId()</a></dt>

<dd>
<p>Returns the thread identifier of the calling thread. Until the thread terminates, the thread identifier uniquely identifies the thread throughout the system.</p>

<dt><a name='Win32'></a><a name="Win32::GetFileVersion(FILENAME)"
>Win32::GetFileVersion(FILENAME)</a></dt>

<dd>
<p>Returns the file version number from the VERSIONINFO resource of the executable file or DLL. This is a tuple of four 16 bit numbers. In list context these four numbers will be returned. In scalar context they are concatenated into a string, separated by dots.</p>

<dt><a name='Win32'></a><a name="Win32::GetFolderPath(FOLDER_[,_CREATE])"
>Win32::GetFolderPath(FOLDER [, CREATE])</a></dt>

<dd>
<p>Returns the full pathname of one of the Windows special folders. The folder will be created if it doesn&#39;t exist and the optional CREATE argument is true. The following FOLDER constants are defined by the Win32 module, but only exported on demand:</p>

<pre class="sh_perl">        CSIDL_ADMINTOOLS
        CSIDL_APPDATA
        CSIDL_CDBURN_AREA
        CSIDL_COMMON_ADMINTOOLS
        CSIDL_COMMON_APPDATA
        CSIDL_COMMON_DESKTOPDIRECTORY
        CSIDL_COMMON_DOCUMENTS
        CSIDL_COMMON_FAVORITES
        CSIDL_COMMON_MUSIC
        CSIDL_COMMON_PICTURES
        CSIDL_COMMON_PROGRAMS
        CSIDL_COMMON_STARTMENU
        CSIDL_COMMON_STARTUP
        CSIDL_COMMON_TEMPLATES
        CSIDL_COMMON_VIDEO
        CSIDL_COOKIES
        CSIDL_DESKTOP
        CSIDL_DESKTOPDIRECTORY
        CSIDL_FAVORITES
        CSIDL_FONTS
        CSIDL_HISTORY
        CSIDL_INTERNET_CACHE
        CSIDL_LOCAL_APPDATA
        CSIDL_MYMUSIC
        CSIDL_MYPICTURES
        CSIDL_MYVIDEO
        CSIDL_NETHOOD
        CSIDL_PERSONAL
        CSIDL_PRINTHOOD
        CSIDL_PROFILE
        CSIDL_PROGRAMS
        CSIDL_PROGRAM_FILES
        CSIDL_PROGRAM_FILES_COMMON
        CSIDL_RECENT
        CSIDL_RESOURCES
        CSIDL_RESOURCES_LOCALIZED
        CSIDL_SENDTO
        CSIDL_STARTMENU
        CSIDL_STARTUP
        CSIDL_SYSTEM
        CSIDL_TEMPLATES
        CSIDL_WINDOWS</pre>

<p>Note that not all folders are defined on all versions of Windows.</p>

<p>Please refer to the MSDN documentation of the CSIDL constants, currently available at:</p>

<p><a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/shell/reference/enums/csidl.asp" class="podlinkurl"
>http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/shell/reference/enums/csidl.asp</a></p>

<p>This function will return an ANSI folder path if the long name cannot be represented in the system codepage. Use Win32::GetLongPathName() on the result of Win32::GetFolderPath() if you want the Unicode version of the folder name.</p>

<dt><a name='Win32'></a><a name="Win32::GetFullPathName(FILENAME)"
>Win32::GetFullPathName(FILENAME)</a></dt>

<dd>
<p>[CORE] GetFullPathName combines the FILENAME with the current drive and directory name and returns a fully qualified (aka, absolute) path name. In list context it returns two elements: (PATH, FILE) where PATH is the complete pathname component (including trailing backslash) and FILE is just the filename part. Note that no attempt is made to convert 8.3 components in the supplied FILENAME to longnames or vice-versa. Compare with Win32::GetShortPathName() and Win32::GetLongPathName().</p>

<p>If supported by the core Perl version, this function will return an ANSI path name if the full pathname cannot be represented in the system codepage.</p>

<dt><a name='Win32'></a><a name="Win32::GetLastError()"
>Win32::GetLastError()</a></dt>

<dd>
<p>[CORE] Returns the last error value generated by a call to a Win32 API function. Note that <code>$^E</code> used in a numeric context amounts to the same value.</p>

<dt><a name='Win32'></a><a name="Win32::GetLongPathName(PATHNAME)"
>Win32::GetLongPathName(PATHNAME)</a></dt>

<dd>
<p>[CORE] Returns a representation of PATHNAME composed of longname components (if any). The result may not necessarily be longer than PATHNAME. No attempt is made to convert PATHNAME to the absolute path. Compare with Win32::GetShortPathName() and Win32::GetFullPathName().</p>

<p>This function may return the pathname in Unicode if it cannot be represented in the system codepage. Use Win32::GetANSIPathName() before passing the path to a system call or another program.</p>

<dt><a name='Win32'></a><a name="Win32::GetNextAvailDrive()"
>Win32::GetNextAvailDrive()</a></dt>

<dd>
<p>[CORE] Returns a string in the form of &#34;&#60;d&#62;:&#34; where &#60;d&#62; is the first available drive letter.</p>

<dt><a name='Win32'></a><a name="Win32::GetOSDisplayName()"
>Win32::GetOSDisplayName()</a></dt>

<dd>
<p>Returns the &#34;marketing&#34; name of the Windows operating system version being used. It returns names like these (random samples):</p>

<pre class="sh_perl">   Windows 2000 Datacenter Server
   Windows XP Professional
   Windows XP Tablet PC Edition
   Windows Home Server
   Windows Server 2003 Enterprise Edition for Itanium-based Systems
   Windows Vista Ultimate (32-bit)
   Windows Small Business Server 2008 R2 (64-bit)</pre>

<p>The display name describes the native Windows version, so even on a 32-bit Perl this function may return a &#34;Windows ... (64-bit)&#34; name when running on a 64-bit Windows.</p>

<p>This function should only be used to display the actual OS name to the user; it should not be used to determine the class of operating systems this system belongs to. The Win32::GetOSName(), Win32::GetOSVersion, Win32::GetProductInfo() and Win32::GetSystemMetrics() functions provide the base information to check for certain capabilities, or for families of OS releases.</p>

<dt><a name='Win32'></a><a name="Win32::GetOSName()"
>Win32::GetOSName()</a></dt>

<dd>
<p>In scalar context returns the name of the Win32 operating system being used. In list context returns a two element list of the OS name and whatever edition information is known about the particular build (for Win9X boxes) and whatever service packs have been installed. The latter is roughly equivalent to the first item returned by GetOSVersion() in list context.</p>

<p>The description will also include tags for other special editions, like &#34;R2&#34;, &#34;Media Center&#34;, &#34;Tablet PC&#34;, or &#34;Starter Edition&#34;.</p>

<p>Currently the possible values for the OS name are</p>

<pre class="sh_perl">    WinWin32s
    Win95
    Win98
    WinMe
    WinNT3.51
    WinNT4
    Win2000
    WinXP/.Net
    Win2003
    WinHomeSvr
    WinVista
    Win2008
    Win7</pre>

<p>This routine is just a simple interface into GetOSVersion(). More specific or demanding situations should use that instead. Another option would be to use POSIX::uname(), however the latter appears to report only the OS family name and not the specific OS. In scalar context it returns just the ID.</p>

<p>The name &#34;WinXP/.Net&#34; is used for historical reasons only, to maintain backwards compatibility of the Win32 module. Windows .NET Server has been renamed as Windows 2003 Server before final release and uses a different major/minor version number than Windows XP.</p>

<p>Similarly the name &#34;WinWin32s&#34; should have been &#34;Win32s&#34; but has been kept as-is for backwards compatibility reasons too.</p>

<dt><a name='Win32'></a><a name="Win32::GetOSVersion()"
>Win32::GetOSVersion()</a></dt>

<dd>
<p>[CORE] Returns the list (STRING, MAJOR, MINOR, BUILD, ID), where the elements are, respectively: An arbitrary descriptive string, the major version number of the operating system, the minor version number, the build number, and a digit indicating the actual operating system. For the ID, the values are 0 for Win32s, 1 for Windows 9X/Me and 2 for Windows NT/2000/XP/2003/Vista/2008/7. In scalar context it returns just the ID.</p>

<p>Currently known values for ID MAJOR and MINOR are as follows:</p>

<pre class="sh_perl">    OS                      ID    MAJOR   MINOR
    Win32s                   0      -       -
    Windows 95               1      4       0
    Windows 98               1      4      10
    Windows Me               1      4      90

    Windows NT 3.51          2      3      51
    Windows NT 4             2      4       0

    Windows 2000             2      5       0
    Windows XP               2      5       1
    Windows Server 2003      2      5       2
    Windows Server 2003 R2   2      5       2
    Windows Home Server      2      5       2

    Windows Vista            2      6       0
    Windows Server 2008      2      6       0
    Windows 7                2      6       1
    Windows Server 2008 R2   2      6       1</pre>

<p>On Windows NT 4 SP6 and later this function returns the following additional values: SPMAJOR, SPMINOR, SUITEMASK, PRODUCTTYPE.</p>

<p>The version numbers for Windows 2003 and Windows Home Server are identical; the SUITEMASK field must be used to differentiate between\ them.</p>

<p>The version numbers for Windows Vista and Windows Server 2008 are identical; the PRODUCTTYPE field must be used to differentiate between them.</p>

<p>The version numbers for Windows 7 and Windows Server 2008 R2 are identical; the PRODUCTTYPE field must be used to differentiate between them.</p>

<p>SPMAJOR and SPMINOR are are the version numbers of the latest installed service pack.</p>

<p>SUITEMASK is a bitfield identifying the product suites available on the system. Known bits are:</p>

<pre class="sh_perl">    VER_SUITE_SMALLBUSINESS             0x00000001
    VER_SUITE_ENTERPRISE                0x00000002
    VER_SUITE_BACKOFFICE                0x00000004
    VER_SUITE_COMMUNICATIONS            0x00000008
    VER_SUITE_TERMINAL                  0x00000010
    VER_SUITE_SMALLBUSINESS_RESTRICTED  0x00000020
    VER_SUITE_EMBEDDEDNT                0x00000040
    VER_SUITE_DATACENTER                0x00000080
    VER_SUITE_SINGLEUSERTS              0x00000100
    VER_SUITE_PERSONAL                  0x00000200
    VER_SUITE_BLADE                     0x00000400
    VER_SUITE_EMBEDDED_RESTRICTED       0x00000800
    VER_SUITE_SECURITY_APPLIANCE        0x00001000
    VER_SUITE_STORAGE_SERVER            0x00002000
    VER_SUITE_COMPUTE_SERVER            0x00004000
    VER_SUITE_WH_SERVER                 0x00008000</pre>

<p>The VER_SUITE_xxx names are listed here to crossreference the Microsoft documentation. The Win32 module does not provide symbolic names for these constants.</p>

<p>PRODUCTTYPE provides additional information about the system. It should be one of the following integer values:</p>

<pre class="sh_perl">    1 - Workstation (NT 4, 2000 Pro, XP Home, XP Pro, Vista)
    2 - Domaincontroller
    3 - Server (2000 Server, Server 2003, Server 2008)</pre>

<p>Note that a server that is also a domain controller is reported as PRODUCTTYPE 2 (Domaincontroller) and not PRODUCTTYPE 3 (Server).</p>

<dt><a name='Win32'></a><a name="Win32::GetShortPathName(PATHNAME)"
>Win32::GetShortPathName(PATHNAME)</a></dt>

<dd>
<p>[CORE] Returns a representation of PATHNAME that is composed of short (8.3) path components where available. For path components where the file system has not generated the short form the returned path will use the long form, so this function might still for instance return a path containing spaces. Returns <code>undef</code> when the PATHNAME does not exist. Compare with Win32::GetFullPathName() and Win32::GetLongPathName().</p>

<dt><a name='Win32'></a><a name="Win32::GetSystemMetrics(INDEX)"
>Win32::GetSystemMetrics(INDEX)</a></dt>

<dd>
<p>Retrieves the specified system metric or system configuration setting. Please refer to the Microsoft documentation of the GetSystemMetrics() function for a reference of available INDEX values. All system metrics return integer values.</p>

<dt><a name='Win32'></a><a name="Win32::GetProcAddress(INSTANCE,_PROCNAME)"
>Win32::GetProcAddress(INSTANCE, PROCNAME)</a></dt>

<dd>
<p>Returns the address of a function inside a loaded library. The information about what you can do with this address has been lost in the mist of time. Use the Win32::API module instead of this deprecated function.</p>

<dt><a name='Win32'></a><a name="Win32::GetProductInfo(OSMAJOR,_OSMINOR,_SPMAJOR,_SPMINOR)"
>Win32::GetProductInfo(OSMAJOR, OSMINOR, SPMAJOR, SPMINOR)</a></dt>

<dd>
<p>Retrieves the product type for the operating system on the local computer, and maps the type to the product types supported by the specified operating system. Please refer to the Microsoft documentation of the GetProductInfo() function for more information about the parameters and return value. This function requires Windows Vista or later.</p>

<p>See also the Win32::GetOSName() and Win32::GetOSDisplayName() functions which provide a higher level abstraction of the data returned by this function.</p>

<dt><a name='Win32'></a><a name="Win32::GetTickCount()"
>Win32::GetTickCount()</a></dt>

<dd>
<p>[CORE] Returns the number of milliseconds elapsed since the last system boot. Resolution is limited to system timer ticks (about 10ms on WinNT and 55ms on Win9X).</p>

<dt><a name='Win32'></a><a name="Win32::GuidGen()"
>Win32::GuidGen()</a></dt>

<dd>
<p>Creates a globally unique 128 bit integer that can be used as a persistent identifier in a distributed setting. To a very high degree of certainty this function returns a unique value. No other invocation, on the same or any other system (networked or not), should return the same value.</p>

<p>The return value is formatted according to OLE conventions, as groups of hex digits with surrounding braces. For example:</p>

<pre class="sh_perl">    {09531CF1-D0C7-4860-840C-1C8C8735E2AD}</pre>

<dt><a name='Win32'></a><a name="Win32::InitiateSystemShutdown"
>Win32::InitiateSystemShutdown</a></dt>

<dd>
<p>(MACHINE, MESSAGE, TIMEOUT, FORCECLOSE, REBOOT)</p>

<p>Shutsdown the specified MACHINE, notifying users with the supplied MESSAGE, within the specified TIMEOUT interval. Forces closing of all documents without prompting the user if FORCECLOSE is true, and reboots the machine if REBOOT is true. This function works only on WinNT.</p>

<dt><a name='Win32'></a><a name="Win32::IsAdminUser()"
>Win32::IsAdminUser()</a></dt>

<dd>
<p>Returns non zero if the account in whose security context the current process/thread is running belongs to the local group of Administrators in the built-in system domain; returns 0 if not. On Windows Vista it will only return non-zero if the process is actually running with elevated privileges. Returns <code>undef</code> and prints a warning if an error occurred. This function always returns 1 on Win9X.</p>

<dt><a name='Win32'></a><a name="Win32::IsWinNT()"
>Win32::IsWinNT()</a></dt>

<dd>
<p>[CORE] Returns non zero if the Win32 subsystem is Windows NT.</p>

<dt><a name='Win32'></a><a name="Win32::IsWin95()"
>Win32::IsWin95()</a></dt>

<dd>
<p>[CORE] Returns non zero if the Win32 subsystem is Windows 95.</p>

<dt><a name='Win32'></a><a name="Win32::LoadLibrary(LIBNAME)"
>Win32::LoadLibrary(LIBNAME)</a></dt>

<dd>
<p>Loads a dynamic link library into memory and returns its module handle. This handle can be used with Win32::GetProcAddress() and Win32::FreeLibrary(). This function is deprecated. Use the Win32::API module instead.</p>

<dt><a name='Win32'></a><a name="Win32::LoginName()"
>Win32::LoginName()</a></dt>

<dd>
<p>[CORE] Returns the username of the owner of the current perl process. The return value may be a Unicode string.</p>

<dt><a name='Win32'></a><a name="Win32::LookupAccountName(SYSTEM,_ACCOUNT,_DOMAIN,_SID,_SIDTYPE)"
>Win32::LookupAccountName(SYSTEM, ACCOUNT, DOMAIN, SID, SIDTYPE)</a></dt>

<dd>
<p>Looks up ACCOUNT on SYSTEM and returns the domain name the SID and the SID type.</p>

<dt><a name='Win32'></a><a name="Win32::LookupAccountSID(SYSTEM,_SID,_ACCOUNT,_DOMAIN,_SIDTYPE)"
>Win32::LookupAccountSID(SYSTEM, SID, ACCOUNT, DOMAIN, SIDTYPE)</a></dt>

<dd>
<p>Looks up SID on SYSTEM and returns the account name, domain name, and the SID type.</p>

<dt><a name='Win32'></a><a name="Win32::MsgBox(MESSAGE_[,_FLAGS_[,_TITLE]])"
>Win32::MsgBox(MESSAGE [, FLAGS [, TITLE]])</a></dt>

<dd>
<p>Create a dialogbox containing MESSAGE. FLAGS specifies the required icon and buttons according to the following table:</p>

<pre class="sh_perl">        0 = OK
        1 = OK and Cancel
        2 = Abort, Retry, and Ignore
        3 = Yes, No and Cancel
        4 = Yes and No
        5 = Retry and Cancel

        MB_ICONSTOP          &#34;X&#34; in a red circle
        MB_ICONQUESTION      question mark in a bubble
        MB_ICONEXCLAMATION   exclamation mark in a yellow triangle
        MB_ICONINFORMATION   &#34;i&#34; in a bubble</pre>

<p>TITLE specifies an optional window title. The default is &#34;Perl&#34;.</p>

<p>The function returns the menu id of the selected push button:</p>

<pre class="sh_perl">        0  Error

        1  OK
        2  Cancel
        3  Abort
        4  Retry
        5  Ignore
        6  Yes
        7  No</pre>

<dt><a name='Win32'></a><a name="Win32::NodeName()"
>Win32::NodeName()</a></dt>

<dd>
<p>[CORE] Returns the Microsoft Network node-name of the current machine.</p>

<dt><a name='Win32'></a><a name="Win32::OutputDebugString(STRING)"
>Win32::OutputDebugString(STRING)</a></dt>

<dd>
<p>Sends a string to the application or system debugger for display. The function does nothing if there is no active debugger.</p>

<p>Alternatively one can use the <i>Debug Viewer</i> application to watch the OutputDebugString() output:</p>

<p><a href="http://www.microsoft.com/technet/sysinternals/utilities/debugview.mspx" class="podlinkurl"
>http://www.microsoft.com/technet/sysinternals/utilities/debugview.mspx</a></p>

<dt><a name='Win32'></a><a name="Win32::RegisterServer(LIBRARYNAME)"
>Win32::RegisterServer(LIBRARYNAME)</a></dt>

<dd>
<p>Loads the DLL LIBRARYNAME and calls the function DllRegisterServer.</p>

<dt><a name='Win32'></a><a name="Win32::SetChildShowWindow(SHOWWINDOW)"
>Win32::SetChildShowWindow(SHOWWINDOW)</a></dt>

<dd>
<p>[CORE] Sets the <i>ShowMode</i> of child processes started by system(). By default system() will create a new console window for child processes if Perl itself is not running from a console. Calling SetChildShowWindow(0) will make these new console windows invisible. Calling SetChildShowWindow() without arguments reverts system() to the default behavior. The return value of SetChildShowWindow() is the previous setting or <code>undef</code>.</p>

<p>The following symbolic constants for SHOWWINDOW are available (but not exported) from the Win32 module: SW_HIDE, SW_SHOWNORMAL, SW_SHOWMINIMIZED, SW_SHOWMAXIMIZED and SW_SHOWNOACTIVATE.</p>

<dt><a name='Win32'></a><a name="Win32::SetCwd(NEWDIRECTORY)"
>Win32::SetCwd(NEWDIRECTORY)</a></dt>

<dd>
<p>[CORE] Sets the current active drive and directory. This function does not work with UNC paths, since the functionality required to required for such a feature is not available under Windows 95.</p>

<dt><a name='Win32'></a><a name="Win32::SetLastError(ERROR)"
>Win32::SetLastError(ERROR)</a></dt>

<dd>
<p>[CORE] Sets the value of the last error encountered to ERROR. This is that value that will be returned by the Win32::GetLastError() function.</p>

<dt><a name='Win32'></a><a name="Win32::Sleep(TIME)"
>Win32::Sleep(TIME)</a></dt>

<dd>
<p>[CORE] Pauses for TIME milliseconds. The timeslices are made available to other processes and threads.</p>

<dt><a name='Win32'></a><a name="Win32::Spawn(COMMAND,_ARGS,_PID)"
>Win32::Spawn(COMMAND, ARGS, PID)</a></dt>

<dd>
<p>[CORE] Spawns a new process using the supplied COMMAND, passing in arguments in the string ARGS. The pid of the new process is stored in PID. This function is deprecated. Please use the Win32::Process module instead.</p>

<dt><a name='Win32'></a><a name="Win32::UnregisterServer(LIBRARYNAME)"
>Win32::UnregisterServer(LIBRARYNAME)</a></dt>

<dd>
<p>Loads the DLL LIBRARYNAME and calls the function DllUnregisterServer.</p>
</dd>
</dl>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78280 Uploads, 24725 Distributions
106010 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 06:04:27 2012 GMT (0.0624489784240723) @cpansearch1 -->
 </body>
</html>
