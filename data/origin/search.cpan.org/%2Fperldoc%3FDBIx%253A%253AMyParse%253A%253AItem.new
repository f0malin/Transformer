<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>DBIx::MyParse::Item - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","DBIx-MyParse",3]);
    _gaq.push(["_setCustomVar",5,"Release","DBIx-MyParse-0.88",3]);
    _gaq.push(["_setCustomVar",3,"Module","DBIx::MyParse::Item",3]);
    _gaq.push(["_setCustomVar",1,"Author","PHILIPS",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?DBIx::MyParse::Item">permalink</a></div>
  <a href="/~philips/">Philip Stoev</a> &gt;
  <a href="/~philips/DBIx-MyParse-0.88/">DBIx-MyParse-0.88</a> &gt;
  DBIx::MyParse::Item
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/adf5d77d759b8222548fbcbe50d1a5ca?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/P/PH/PHILIPS/DBIx-MyParse-0.88.tar.gz">DBIx-MyParse-0.88.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=DBIx%3A%3AMyParse%3A%3AItem;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~PHILIPS/DBIx-MyParse-0.88/lib/DBIx/MyParse/Item.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 4</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=DBIx-MyParse">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.88 &nbsp;
<span class="noprint">
  <a href="/src/PHILIPS/DBIx-MyParse-0.88/lib/DBIx/MyParse/Item.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#CREATING,_MODIFYING_AND_PRINTING_ITEM_OBJECTS'>CREATING, MODIFYING AND PRINTING ITEM OBJECTS</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#SPECIAL_FUNCTIONS'>SPECIAL FUNCTIONS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#LITERAL_VALUES'>LITERAL VALUES</a>
  <li class='indexItem indexItem1'><a href='#FIELDS,_TABLES_and_DATABASES'>FIELDS, TABLES and DATABASES</a>
  <li class='indexItem indexItem1'><a href='#JOINS'>JOINS</a>
  <li class='indexItem indexItem1'><a href='#SUBQUERIES/SUBSELECTS'>SUBQUERIES/SUBSELECTS</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>DBIx::MyParse::Item - Accessing the items from a <code>DBIx::MyParse::Query</code> parse tree</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">        use DBIx::MyParse;
        use DBIx::MyParse::Query;
        use DBIx::MyParse::Item;

        my $parser = DBIx::MyParse-&#62;new();
        my $query = $parser-&#62;parse(&#34;SELECT field_name FROM table_name&#34;);
        my $item_list = $query-&#62;getSelectItems();
        my $first_item = $item_list-&#62;[0];
        print $first_item-&#62;getItemType();       # Prints &#34;FIELD_ITEM&#34;
        print $first_item-&#62;getFieldName()       # Prints &#34;field_name&#34;

        $first_item-&#62;getFieldName(&#39;another_field&#39;);
        my $new_item_sql = $first_item-&#62;print();# Reconstructs the item as SQL
        my $new_query_sql = $query-&#62;print();    # Reconstructs entire query

        my $one = DBIx::MyParser-&#62;newInt(1);
        my $pi = DBIx::MyParse-&#62;newReal(3.14);
        my $sum = DBIx::MyParse-&#62;newPlus($one, $pi);
        my $sum_sql = $sum-&#62;print();</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>MySQL uses a few dozen Item objects to store the various nodes possible in a parse tree. For the sake of simplicity, we only use a single object type in Perl to represent the same information.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CREATING,_MODIFYING_AND_PRINTING_ITEM_OBJECTS"
>CREATING, MODIFYING AND PRINTING ITEM OBJECTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Item objects can be constructed from scratch using <code>new()</code>. The arguments available to the constructor can be seen in the <code>%args</code> hash in <code>Item.pm</code>.</p>

<p>For any <code>get</code> function described below, a <code>set()</code> function is available to modify the object.</p>

<p>You can call <code>print()</code> on an <code>DBIx::MyParse::Item</code> object to print an item. Passing <code>1</code> as an argument to <code>print()</code> will cause the <code>getAlias()</code>, if any, to be appended to the output with an <code>AS</code> SQL clause.</p>

<p>The following convenience functions are available to create the simplest Item types: <code>newNull()</code>, <code>newInt($integer)</code>, <code>newString($string)</code>, <code>newReal($number)</code>, <code>newVarbin($data)</code>. Field items can be created usind <code>newField($field_name, $table, $database)</code>.</p>

<p>Additions, substractions can be created using <code>newPlus($arg1, $arg2)</code>, <code>newMinus($arg1, $arg2)</code>. ORs, ANDs and NOTs can be created using <code>newAnd($arg1, $arg2)</code>, <code>newOr($arg1, $arg2)</code>, and <code>newNot($arg)</code>. Equations and inequalities can be created using <code>newEq($arg1, $arg2)</code>, <code>newGt($arg1, $arg2)</code> and <code>newLt($arg1, $arg2)</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='getItemType'></a><a name="getItemType()"
><code>getItemType()</code></a></dt>

<dd>
<p>This returns the type of the <code>Item</code> as a string, to facilitate dumping and debugging.</p>

<pre class="sh_perl">        if ($item-&#62;getItemType() eq &#39;FIELD_ITEM&#39;) { ... }       # Correct
        if ($item-&#62;getItemType() == FIELD_ITEM) { ... } # Will not work</pre>

<p>Some values are listed in <code>enum Type</code> in <em>sql/item.h</em> in the MySQL source.</p>

<pre class="sh_perl">        enum Type {FIELD_ITEM, FUNC_ITEM, SUM_FUNC_ITEM, STRING_ITEM,
                INT_ITEM, REAL_ITEM, NULL_ITEM, VARBIN_ITEM,
                COPY_STR_ITEM, FIELD_AVG_ITEM, DEFAULT_VALUE_ITEM,
                PROC_ITEM,COND_ITEM, REF_ITEM, FIELD_STD_ITEM,
                FIELD_VARIANCE_ITEM, INSERT_VALUE_ITEM,
                SUBSELECT_ITEM, ROW_ITEM, CACHE_ITEM, TYPE_HOLDER,
                PARAM_ITEM
        };</pre>

<p>From those, the following are explicitly supported and are likely to occur during parsing:</p>

<pre class="sh_perl">        &#39;FIELD_ITEM&#39;,
        &#39;FUNC_ITEM&#39;, &#39;SUM_FUNC_ITEM&#39;,
        &#39;STRING_ITEM&#39;, &#39;INT_ITEM&#39;, &#39;DECIMAL_ITEM&#39;, &#39;NULL_ITEM&#39;, &#39;REAL_ITEM&#39;
        &#39;REF_ITEM&#39;, &#39;COND_ITEM&#39;, &#39;PARAM_ITEM&#39;, &#39;VARBIN_ITEM&#39;, &#39;DEFAULT_VALUE_ITEM&#39;
        &#39;ROW_ITEM&#39;</pre>

<p>In addition, <a href="/~philips/DBIx-MyParse-0.88/lib/DBIx/MyParse.pm" class="podlinkpod"
>DBIx::MyParse</a> defines its own <code>TABLE_ITEM</code> in case a table, rather than a field, is being referenced. <code>DATABASE_ITEM</code> may also be returned.</p>

<p><code>REF_ITEM</code> is a <code>FIELD_ITEM</code> that is used in a <code>HAVING</code> clause. <code>VARBIN_ITEM</code> is created when a Hex value is passed to MySQL (e.g. 0x5061756c). <code>PARAM_ITEM</code> is a ?-style placeholder. All decimal values are returned as <code>DECIMAL_ITEM</code>. <code>REAL_ITEM</code> is only returned if you use exponential notation (e.g. <code>3.14e1</code>). <code>INTERVAL_ITEM</code> is returned as an argument to some date and time functions. <code>CHARSET_ITEM</code> is returned as an argument to some cast functions. <code>JOIN_ITEM</code> is returned for joins.</p>

<dt><a name='getAlias'></a><a name="getAlias()"
><code>getAlias()</code></a></dt>

<dd>
<p>Returns the name of the Item if provided with an AS clause, such as SELECT field AS alias. If no AS clause is present, than (sort of) the SQL that produced the Item is returned. This is the same string that the mysql client would show as column headings if you execute the query manually.</p>

<blockquote></blockquote>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>&#39;FUNC_ITEM&#39;</code> and <code>&#39;SUM_FUNC_ITEM&#39;</code> denote functions in the parse tree.</p>

<dl>
<dt><a name='getFuncType'></a><a name="getFuncType()"
><code>getFuncType()</code></a></dt>

<dd>
<p>if <code>getType() eq &#39;FUNC_ITEM&#39;</code>, you can call <code>getFuncType()</code> to determine what type of function it is. For MySQL, all operators are also of type <code>FUNC_ITEM</code>.</p>

<p>The possible values are again strings (see above) and are listed in <em>sql/item_func.h</em> under <code>enum Functype</code></p>

<pre class="sh_perl">        enum Functype {
                UNKNOWN_FUNC,EQ_FUNC,EQUAL_FUNC,NE_FUNC,LT_FUNC,LE_FUNC,
                GE_FUNC,GT_FUNC,FT_FUNC,
                LIKE_FUNC,NOTLIKE_FUNC,ISNULL_FUNC,ISNOTNULL_FUNC,
                COND_AND_FUNC, COND_OR_FUNC, COND_XOR_FUNC, BETWEEN, IN_FUNC,
                INTERVAL_FUNC, ISNOTNULLTEST_FUNC,
                SP_EQUALS_FUNC, SP_DISJOINT_FUNC,SP_INTERSECTS_FUNC,
                SP_TOUCHES_FUNC,SP_CROSSES_FUNC,SP_WITHIN_FUNC,
                SP_CONTAINS_FUNC,SP_OVERLAPS_FUNC,
                SP_STARTPOINT,SP_ENDPOINT,SP_EXTERIORRING,
                SP_POINTN,SP_GEOMETRYN,SP_INTERIORRINGN,
                NOT_FUNC, NOT_ALL_FUNC, NOW_FUNC, VAR_VALUE_FUNC
        };</pre>

<p>if <code>getType() eq &#39;SUM_FUNC_ITEM&#39;</code>, <code>getFuncType()</code> can be any of the aggregate functions listed in enum Sumfunctype in <em>sql/item_sum.h</em>:</p>

<pre class="sh_perl">        enum Sumfunctype {
                COUNT_FUNC,COUNT_DISTINCT_FUNC,SUM_FUNC, SUM_DISTINCT_FUNC, AVG_FUNC,MIN_FUNC,
                MAX_FUNC,UNIQUE_USERS_FUNC,STD_FUNC,VARIANCE_FUNC,SUM_BIT_FUNC,
                UDF_SUM_FUNC,GROUP_CONCAT_FUNC
        };</pre>

<p>For MySQL, all functions not specifically listed above are <code>UNKNOWN_FUNC</code> and you must call <code>getFuncName()</code>. This may include both general-purpose functions and user-defined ones.</p>

<dt><a name='getFuncName'></a><a name="getFuncName()"
><code>getFuncName()</code></a></dt>

<dd>
<p>Returns the name of the function called, such as <code>&#34;concat_ws&#34;</code>, <code>&#34;md5&#34;</code>, etc. If the <code>Item</code> is not a function, but an operator, the symbol of the operator is returned, such as <code>&#39;+&#39;</code> or <code>&#39;||&#39;</code>. The name of the function will be lowercase regardless of the orginal case in the SQL string.</p>

<dt><a name='getArguments'></a><a name="getArguments()"
><code>getArguments()</code></a></dt>

<dd>
<p>Returns a reference to an array containing all the arguments to the function/operator. Each item from the array is an DBIx::MyParse::Item object, even if it is a simple string or a field name.</p>

<p><code>hasArguments()</code>, <code>getFirstArg()</code>, <code>getSecondArg()</code> and <code>getThirdArg()</code> are provided for convenience and to increase code readibility.</p>

<blockquote></blockquote>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="SPECIAL_FUNCTIONS"
>SPECIAL FUNCTIONS</a></h2>

<p>Some functions are not entirely supported by <a href="/~philips/DBIx-MyParse-0.88/lib/DBIx/MyParse.pm" class="podlinkpod"
>DBIx::MyParse</a>, e.g. some fancy arguments may be missing from the parse tree. Unfortunately, there is no way to know if you are missing any arguments. For a list of the currently problematic functions, see <a href="/~philips/DBIx-MyParse-0.88/lib/DBIx/MyParse.pm" class="podlinkpod"
>DBIx::MyParse</a>.</p>

<p>The functions below are fully supported, however there are oddities you need to have in mind:</p>

<dl>
<dt><a name='CAST'></a><a name="CAST(expr_AS_type_(length)),_CONVERT(expr,_type),_SELECT_BINARY_expr"
><code>CAST(expr AS type (length))</code>, <code>CONVERT(expr, type)</code>, <code>SELECT BINARY expr</code></a></dt>

<dd>
<p><code>getFuncName()</code> will return <code>&#39;cast_as_signed&#39;</code>, <code>&#39;cast_as_unsigned&#39;</code>, <code>&#39;cast_as_binary&#39;</code>, <code>&#39;cast_as_char&#39;</code>, <code>&#39;cast_as_date&#39;</code>, <code>&#39;cast_as_time&#39;</code>, or <code>&#39;cast_as_datetime&#39;</code>.</p>

<p>The thing being <code>CAST</code>&#39;ed will be returned as the first array item from <code>getArguments()</code>. If there is a <code>length</code>, it will be returned as the second argument.</p>

<p>For <code>CAST(expr AS DECIMAL)</code>, <code>getFuncName()</code> will return <code>&#39;decimal_typecast&#39;</code>.</p>

<dt><a name='CONVERT'></a><a name="CONVERT(expr_USING_charset)"
><code>CONVERT(expr USING charset)</code></a></dt>

<dd>
<p><code>getFuncName()</code> will return <code>&#39;convert&#39;</code>. The second item returned by <code>getArguments()</code> will be of type <code>&#39;CHARSET_ITEM&#39;</code> and you can call <code>getCharset()</code> on it.</p>

<dt><a name='DATE_ADD'></a><a name="DATE_ADD()_and_DATE_SUB()"
><code>DATE_ADD()</code> and <code>DATE_SUB()</code></a></dt>

<dd>
<p><code>getFuncName()</code> will return <code>&#39;get_add_interval&#39;</code> and <code>&#39;get_sub_interval&#39;</code> respectively. The second item returned by <code>getArguments()</code> will show the quantity of intervals that are to be added or substrated. This can be an <code>&#39;INT_ITEM&#39;</code> for round interval and <code>&#39;STRING_ITEM&#39;</code> for partial intervals, e.g. <code>&#39;5.55&#39; MINUTE</code>.</p>

<p>The last argument will be of type <code>&#39;INTERVAL_ITEM&#39;</code> and you can call <code>getInterval()</code> on it to determine the actual interval being used. A string will be returned, as listed on the table in section 12.5 of the MySQL manual, except that all strings are returned prefixed with <code>&#39;INTERVAL_&#39;</code> e.g. a day interval will be returned at <code>&#39;INTERVAL_DAY&#39;</code> and not just <code>&#39;DAY&#39;</code>.</p>

<dt><a name='ADDTIME'></a><a name="ADDTIME()_and_SUBTIME()"
><code>ADDTIME()</code> and <code>SUBTIME()</code></a></dt>

<dd>
<p><code>getFuncName()</code> will return <code>&#39;add_time&#39;</code> and <code>&#39;sub_time&#39;</code> respectively, that is, with an underscore between the two words.</p>

<dt><a name='CASE'></a><a name="CASE_WHEN_condition_THEN_result1_ELSE_result2_END"
><code>CASE WHEN condition THEN result1 ELSE result2 END</code></a></dt>

<dd>
<p>For this form of <code>CASE</code>, <code>getFuncName()</code> will return <code>&#39;case&#39;</code>. If <code>getArguments()</code> returns an odd number of arguments, this means that an <code>ELSE result2</code> clause is present, and it will be the last argument.</p>

<dt><a name='CASE'></a><a name="CASE_value_WHEN_compare_value_THEN_result_ELSE_result2_END"
><code>CASE value WHEN compare_value THEN result ELSE result2 END</code></a></dt>

<dd>
<p>For this form of <code>CASE</code>, <code>getFuncName()</code> will return <code>&#39;case_switch&#39;</code>. If <code>getArguments()</code> returns an even number of arguments, this means that an <code>ELSE result2</code> clause is present, and it will be the last argument. The <code>value</code> you are comparing against will be the last argument once you have <code>pop</code>-ed out the <code>ELSE result2</code> clause, if present.</p>

<dt><a name='expr'></a><a name="expr_IS_NULL_and_expr_IS_NOT_NULL"
><code>expr IS NULL</code> and <code>expr IS NOT NULL</code></a></dt>

<dd>
<p><code>getFuncType()</code> will return either <code>&#39;ISNULL_FUNC&#39;</code> or <code>&#39;ISNOTNULL_FUNC&#39;</code></p>

<dt><a name='expr'></a><a name="expr_BETWEEN_value_AND_value_and_expr_NOT_BETWEEN_value_AND_value"
><code>expr BETWEEN value AND value</code> and <code>expr NOT BETWEEN value AND value</code></a></dt>

<dd>
<p><code>getFuncType()</code> will return <code>&#39;BETWEEN&#39;</code>. <code>getFuncName()</code> will return <code>&#39;BETWEEN&#39;</code> or <code>&#39;NOT_BETWEEN&#39;</code>, however the case of the letters in <code>&#39;BETWEEN&#39;</code> can vary.</p>

<dt><a name='expr'></a><a name="expr_IN_(list)_and_expr_NOT_IN_(list)"
><code>expr IN (list)</code> and <code>expr NOT IN (list)</code></a></dt>

<dd>
<p><code>getFuncType()</code> will return either <code>&#39;IN_FUNC&#39;</code> or <code>&#39;NOT_IN_FUNC&#39;</code>. The first argument is the value you are examining, the rest are the values you are comparing against. If <code>list</code> contains just one value, MySQL will internally convert the entire expression to a simle equality or inequality.</p>

<dt><a name='MATCH'></a><a name="MATCH(list)_AGAINST_(expr)"
><code>MATCH(list) AGAINST (expr)</code></a></dt>

<dd>
<p><code>getFuncType()</code> will return <code>&#39;FT_FUNC&#39;</code>. The thing you are looking for, <code>expr</code> will be the first item from the argument list. The rest of the arguments will be of type <code>&#39;FIELD_ITEM&#39;</code>.</p>

<dt><a name='expr'></a><a name="expr_LIKE_expr_ESCAPE_string"
><code>expr LIKE expr ESCAPE string</code></a></dt>

<dd>
<p><code>getFuncType()</code> will return <code>&#39;LIKE_FUNC&#39;</code>. If an escape string is defined, it will appear as the third argument of the function.</p>

<dt><a name='SELECT'></a><a name="SELECT_@user_var"
><code>SELECT @user_var</code></a></dt>

<dd>
<p><code>getFuncType()</code> will return <code>&#39;GUSERVAR_FUNC&#39;</code>. The first argument will be an Item of type <code>&#39;USER_VAR_ITEM&#39;</code>. Call <code>getVarName()</code> on it to obtain the name of the user variable (without the leading @)</p>

<dt><a name='SELECT'></a><a name="SELECT_@user_var_:=_value"
><code>SELECT @user_var := value</code></a></dt>

<dd>
<p><code>getFuncType()</code> will return <code>&#39;SUSERVAR_FUNC&#39;</code>. The first argument will be of type <code>&#39;USER_VAR_ITEM&#39;</code>. The second one will contain the value being assigned.</p>

<dt><a name='SELECT'></a><a name="SELECT_@@component.system_var"
><code>SELECT @@component.system_var</code></a></dt>

<dd>
<p><code>getFuncName()</code> will return <code>&#39;get_system_var&#39;</code>. The first argument will be of type <code>&#39;SYSTEM_VAR_ITEM&#39;</code>. You can call <code>getVarComponent()</code> to obtain the component name and <code>getVarName()</code> to obtain the name of the variable. See section &#34;5.2.4.1. Structured System Variables&#34; in the MySQL manual.</p>

<p># =not_all_func</p>

<blockquote></blockquote>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LITERAL_VALUES"
>LITERAL VALUES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>For <code>&#39;STRING_ITEM&#39;</code>, <code>&#39;INT_ITEM&#39;</code>, <code>&#39;DECIMAL_ITEM&#39;</code>, <code>&#39;REAL_ITEM&#39;</code> and <code>&#39;VARBIN_ITEM&#39;</code> you can call <code>getValue()</code>. Please note that the value of <code>&#39;VARBIN_ITEM&#39;</code> is returned in a binary form, not as an integer or a hex string. This is consistent with the behavoir of <code>SELECT 0x4D7953514C</code>, which returns <code>&#39;MySQL&#39;</code>.</p>

<p>You can also call <code>&#39;getCharset()&#39;</code> to obtain the charset used for a particular string, if one was specified explicitly.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FIELDS,_TABLES_and_DATABASES"
>FIELDS, TABLES and DATABASES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='getDatabaseName'></a><a name="getDatabaseName()"
><code>getDatabaseName()</code></a></dt>

<dd>
<p>if $item is FIELD_ITEM, REF_ITEM or a TABLE_ITEM, getDatabaseName() returns the database the field belongs to, if it was explicitly specified. If it was not specified explicitly, such as was given previously with a &#34;USE DATABASE&#34; command, getDatabaseName() will return undef. This may change in the future if we incorporate some more of MySQL&#39;s logic that resolves table names.</p>

<dt><a name='getTableName'></a><a name="getTableName()"
><code>getTableName()</code></a></dt>

<dd>
<p>Returns the name of the table for a FIELD_ITEM or TABLE_ITEM object. For FIELD_ITEM, the table name must be explicitly specified with &#34;table_name.field_name&#34; notation. Otherwise returns undef and does not attempt to guess the name of the table.</p>

<dt><a name='getFieldName'></a><a name="getFieldName()"
><code>getFieldName()</code></a></dt>

<dd>
<p>Returns the name of the field for a FIELD_ITEM object.</p>

<dt><a name='getDirection'></a><a name="getDirection()"
><code>getDirection()</code></a></dt>

<dd>
<p>For an <code>FIELD_ITEM</code> used in <code>GROUP BY</code> or <code>ORDER BY</code>, the function will return either the string <code>&#34;ASC&#34;</code> or the string <code>&#34;DESC&#34;</code> depending on the group/ordering direction. Default is <code>&#34;ASC&#34;</code> and will be returned even if the query does not specify a direction explicitly.</p>

<dt><a name='getUseIndex'></a><a name="getUseIndex(),_getForceIndex()_and_getIgnoreIndex()"
><code>getUseIndex()</code>, <code>getForceIndex()</code> and <code>getIgnoreIndex()</code></a></dt>

<dd>
<p>Returns a reference to an array containing one string for each index mentioned in the <code>USE INDEX</code>, <code>FORCE INDEX</code> or <code>IGNORE INDEX</code> clause for the table in question.</p>

<blockquote></blockquote>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="JOINS"
>JOINS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>getItemType()</code> will return <code>&#39;JOIN_ITEM&#39;</code>. In <code>DBIx::MyParse</code>, joins are a separate object, even if it is not really so in the <code>MySQL</code> source. This way all JOINs are represented properly nested.</p>

<dl>
<dt><a name='getJoinItems'></a><a name="getJoinItems()"
><code>getJoinItems()</code></a></dt>

<dd>
<p>Will return the two sides of the join. Each side may be a <code>&#39;TABLE_ITEM&#39;</code>, a &#60;&#39;SUBSELECT_ITEM&#39;&#62; or another <code>&#39;JOIN_ITEM&#39;</code> so please be prepared to handle all.</p>

<dt><a name='getJoinCond'></a><a name="getJoinCond()"
><code>getJoinCond()</code></a></dt>

<dd>
<p>Returns a reference to a an <code>Item</code> object containing the <code>ON</code> join condition</p>

<dt><a name='getJoinFields'></a><a name="getJoinFields()"
><code>getJoinFields()</code></a></dt>

<dd>
<p>Returns a reference to <code>&#39;FIELD_ITEM&#39;</code> <code>Item</code>s for each fields that appears in the <code>USING</code> clause.</p>

<dt><a name='getJoinType'></a><a name="getJoinType()"
><code>getJoinType()</code></a></dt>

<dd>
<p>Returns, as string, the type of join that will be used. Possible values are:</p>

<pre class="sh_perl">        &#34;JOIN_TYPE_LEFT&#34;
        &#34;JOIN_TYPE_RIGHT&#34;
        &#34;JOIN_TYPE_STRAIGHT&#34;
        &#34;JOIN_TYPE_NATURAL&#34;</pre>

<p>If undef is returned, this means <code>&#39;INNER JOIN&#39;</code>.</p>

<blockquote></blockquote>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUBQUERIES/SUBSELECTS"
>SUBQUERIES/SUBSELECTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>getItemType()</code> will return <code>&#39;SUBSELECT_ITEM</code></p>

<dl>
<dt><a name='getSubselectType'></a><a name="getSubselectType()"
><code>getSubselectType()</code></a></dt>

<dd>
<p>Returns one of the following, depending on the context where the subquery was seen:</p>

<pre class="sh_perl">        &#34;SINGLEROW_SUBS&#34;
        &#34;IN_SUBS&#34;
        &#34;EXISTS_SUBS&#34;
        &#34;ANY_SUBS&#34;
        &#34;ALL_SUBS&#34;</pre>

<p>If undef is returned, this means a subquery in the <code>FROM</code> clause, e.g. derived table</p>

<dt><a name='getSubselectExpr'></a><a name="getSubselectExpr()"
><code>getSubselectExpr()</code></a></dt>

<dd>
<p>For subselect types <code>&#39;ANY_SUBS&#39;</code>, <code>&#39;IN_SUBS&#39;</code> and <code>&#39;ALL_SUBS&#39;</code>, will return the <code>Item</code> that is being checked against the data returned by the subquery.</p>

<dt><a name='getSubselectCond'></a><a name="getSubselectCond()"
><code>getSubselectCond()</code></a></dt>

<dd>
<p>For subselect types <code>&#39;ANY_SUBS&#39;</code> and <code>&#39;ALL_SUBS&#39;</code> will return the function used to match the expression against the data returned by the subquery, e.g. <code>&#39;&#62;&#39;</code>. A single-character string value is returned, not a full <code>Item</code> object of type <code>&#34;COND_ITEM&#34;</code> .</p>

<dt><a name='getSubselectQuery'></a><a name="getSubselectQuery()"
><code>getSubselectQuery()</code></a></dt>

<dd>
<p>Returns an <a href="/~philips/DBIx-MyParse-0.88/lib/DBIx/MyParse/Query.pm" class="podlinkpod"
>DBIx::MyParse::Query</a> object that contains the parse tree of the actual subselect itself.</p>
</dd>
</dl>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78068 Uploads, 24686 Distributions
105902 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sun Apr 22 11:07:20 2012 GMT (0.38088321685791) @cpansearch1 -->
 </body>
</html>
