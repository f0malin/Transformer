<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Net::DNS::Resolver - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Net-DNS",3]);
    _gaq.push(["_setCustomVar",5,"Release","Net-DNS-0.68",3]);
    _gaq.push(["_setCustomVar",3,"Module","Net::DNS::Resolver",3]);
    _gaq.push(["_setCustomVar",1,"Author","OLAF",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Net::DNS::Resolver">permalink</a></div>
  <a href="/~olaf/">OLAF</a> &gt;
  <a href="/~olaf/Net-DNS-0.68/">Net-DNS-0.68</a> &gt;
  Net::DNS::Resolver
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/e5747bf50b65faa67ee4828a0466d66d?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/O/OL/OLAF/Net-DNS-0.68.tar.gz">Net-DNS-0.68.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Net%3A%3ADNS%3A%3AResolver;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~OLAF/Net-DNS-0.68/lib/Net/DNS/Resolver.pm">Annotate this POD
(2)
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 2</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 8</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 5</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Net-DNS">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  955 &nbsp;
<span class="noprint">
  <a href="/src/OLAF/Net-DNS-0.68/lib/Net/DNS/Resolver.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#new'>new</a>
    <li class='indexItem indexItem2'><a href='#search'>search</a>
    <li class='indexItem indexItem2'><a href='#query'>query</a>
    <li class='indexItem indexItem2'><a href='#send'>send</a>
    <li class='indexItem indexItem2'><a href='#axfr'>axfr</a>
    <li class='indexItem indexItem2'><a href='#axfr_start'>axfr_start</a>
    <li class='indexItem indexItem2'><a href='#axfr_next'>axfr_next</a>
    <li class='indexItem indexItem2'><a href='#nameservers'>nameservers</a>
    <li class='indexItem indexItem2'><a href='#print'>print</a>
    <li class='indexItem indexItem2'><a href='#string'>string</a>
    <li class='indexItem indexItem2'><a href='#searchlist'>searchlist</a>
    <li class='indexItem indexItem2'><a href='#port'>port</a>
    <li class='indexItem indexItem2'><a href='#srcport'>srcport</a>
    <li class='indexItem indexItem2'><a href='#srcaddr'>srcaddr</a>
    <li class='indexItem indexItem2'><a href='#bgsend'>bgsend</a>
    <li class='indexItem indexItem2'><a href='#bgread'>bgread</a>
    <li class='indexItem indexItem2'><a href='#bgisready'>bgisready</a>
    <li class='indexItem indexItem2'><a href='#tsig'>tsig</a>
    <li class='indexItem indexItem2'><a href='#retrans'>retrans</a>
    <li class='indexItem indexItem2'><a href='#retry'>retry</a>
    <li class='indexItem indexItem2'><a href='#recurse'>recurse</a>
    <li class='indexItem indexItem2'><a href='#defnames'>defnames</a>
    <li class='indexItem indexItem2'><a href='#dnsrch'>dnsrch</a>
    <li class='indexItem indexItem2'><a href='#debug'>debug</a>
    <li class='indexItem indexItem2'><a href='#usevc'>usevc</a>
    <li class='indexItem indexItem2'><a href='#tcp_timeout'>tcp_timeout</a>
    <li class='indexItem indexItem2'><a href='#udp_timeout'>udp_timeout</a>
    <li class='indexItem indexItem2'><a href='#persistent_tcp'>persistent_tcp</a>
    <li class='indexItem indexItem2'><a href='#persistent_udp'>persistent_udp</a>
    <li class='indexItem indexItem2'><a href='#igntc'>igntc</a>
    <li class='indexItem indexItem2'><a href='#errorstring'>errorstring</a>
    <li class='indexItem indexItem2'><a href='#answerfrom'>answerfrom</a>
    <li class='indexItem indexItem2'><a href='#answersize'>answersize</a>
    <li class='indexItem indexItem2'><a href='#dnssec'>dnssec</a>
    <li class='indexItem indexItem2'><a href='#cdflag'>cdflag</a>
    <li class='indexItem indexItem2'><a href='#adflag'>adflag</a>
    <li class='indexItem indexItem2'><a href='#udppacketsize'>udppacketsize</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CUSTOMIZING'>CUSTOMIZING</a>
  <li class='indexItem indexItem1'><a href='#IPv6_transport'>IPv6 transport</a>
  <li class='indexItem indexItem1'><a href='#ENVIRONMENT'>ENVIRONMENT</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#RES_NAMESERVERS'>RES_NAMESERVERS</a>
    <li class='indexItem indexItem2'><a href='#RES_SEARCHLIST'>RES_SEARCHLIST</a>
    <li class='indexItem indexItem2'><a href='#LOCALDOMAIN'>LOCALDOMAIN</a>
    <li class='indexItem indexItem2'><a href='#RES_OPTIONS'>RES_OPTIONS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Net::DNS::Resolver - DNS resolver class</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Net::DNS;

  my $res = Net::DNS::Resolver-&#62;new;

  # Perform a lookup, using the searchlist if appropriate.
  my $answer = $res-&#62;search(&#39;example.com&#39;);

  # Perform a lookup, without the searchlist
  my $answer = $res-&#62;query(&#39;example.com&#39;, &#39;MX&#39;);

  # Perform a lookup, without pre or post-processing
  my $answer = $res-&#62;send(&#39;example.com&#39;, &#39;MX&#39;, &#39;CH&#39;);

  # Send a prebuilt packet
  my $packet = Net::DNS::Packet-&#62;new(...);
  my $answer = $res-&#62;send($packet);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Instances of the <code>Net::DNS::Resolver</code> class represent resolver objects. A program can have multiple resolver objects, each maintaining its own state information such as the nameservers to be queried, whether recursion is desired, etc.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="new"
>new</a></h2>

<pre class="sh_perl">  # Use the system defaults
  my $res = Net::DNS::Resolver-&#62;new;

  # Use my own configuration file
  my $res = Net::DNS::Resolver-&#62;new(config_file =&#62; &#39;/my/dns.conf&#39;);

  # Set options in the constructor
  my $res = Net::DNS::Resolver-&#62;new(
        nameservers =&#62; [qw(10.1.1.128 10.1.2.128)],
        recurse     =&#62; 0,
        debug       =&#62; 1,
  );</pre>

<p>Returns a resolver object. If given no arguments, <code>new()</code> returns an object configured to your system&#39;s defaults. On UNIX systems the defaults are read from the following files, in the order indicated:</p>

<pre class="sh_perl">    /etc/resolv.conf
    $HOME/.resolv.conf
    ./.resolv.conf</pre>

<p>The following keywords are recognized in resolver configuration files:</p>

<dl>
<dt><a name="domain"
>domain</a></dt>

<dd>
<p>The default domain.</p>

<dt><a name="search"
>search</a></dt>

<dd>
<p>A space-separated list of domains to put in the search list.</p>

<dt><a name="nameserver"
>nameserver</a></dt>

<dd>
<p>A space-separated list of nameservers to query.</p>
</dd>
</dl>

<p>Files except for <em>/etc/resolv.conf</em> must be owned by the effective userid running the program or they won&#39;t be read. In addition, several environment variables can also contain configuration information; see <a href="#ENVIRONMENT" class="podlinkpod"
>&#34;ENVIRONMENT&#34;</a>.</p>

<p>On Windows systems, an attempt is made to determine the system defaults using the registry. This is still a work in progress; systems with many dynamically configured network interfaces may confuse Net::DNS.</p>

<p>You can include a configuration file of your own when creating a resolver object:</p>

<pre class="sh_perl"> # Use my own configuration file
 my $res = Net::DNS::Resolver-&#62;new(config_file =&#62; &#39;/my/dns.conf&#39;);</pre>

<p>This is supported on both UNIX and Windows. Values pulled from a custom configuration file override the the system&#39;s defaults, but can still be overridden by the other arguments to new().</p>

<p>Explicit arguments to new override both the system&#39;s defaults and the values of the custom configuration file, if any. The following arguments to new() are supported:</p>

<dl>
<dt><a name="nameservers"
>nameservers</a></dt>

<dd>
<p>An array reference of nameservers to query.</p>

<dt><a name="searchlist"
>searchlist</a></dt>

<dd>
<p>An array reference of domains.</p>

<dt><a name="recurse"
>recurse</a></dt>

<dd>
<dt><a name="debug"
>debug</a></dt>

<dd>
<dt><a name="domain"
>domain</a></dt>

<dd>
<dt><a name="port"
>port</a></dt>

<dd>
<dt><a name="srcaddr"
>srcaddr</a></dt>

<dd>
<dt><a name="srcport"
>srcport</a></dt>

<dd>
<dt><a name="tcp_timeout"
>tcp_timeout</a></dt>

<dd>
<dt><a name="udp_timeout"
>udp_timeout</a></dt>

<dd>
<dt><a name="retrans"
>retrans</a></dt>

<dd>
<dt><a name="retry"
>retry</a></dt>

<dd>
<dt><a name="usevc"
>usevc</a></dt>

<dd>
<dt><a name="stayopen"
>stayopen</a></dt>

<dd>
<dt><a name="igntc"
>igntc</a></dt>

<dd>
<dt><a name="defnames"
>defnames</a></dt>

<dd>
<dt><a name="dnsrch"
>dnsrch</a></dt>

<dd>
<dt><a name="persistent_tcp"
>persistent_tcp</a></dt>

<dd>
<dt><a name="persistent_udp"
>persistent_udp</a></dt>

<dd>
<dt><a name="dnssec"
>dnssec</a></dt>
</dl>

<p>For more information on any of these options, please consult the method of the same name.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="search"
>search</a></h2>

<pre class="sh_perl">    $packet = $res-&#62;search(&#39;mailhost&#39;);
    $packet = $res-&#62;search(&#39;mailhost.example.com&#39;);
    $packet = $res-&#62;search(&#39;192.168.1.1&#39;);
    $packet = $res-&#62;search(&#39;example.com&#39;, &#39;MX&#39;);
    $packet = $res-&#62;search(&#39;user.passwd.example.com&#39;, &#39;TXT&#39;, &#39;HS&#39;);</pre>

<p>Performs a DNS query for the given name, applying the searchlist if appropriate. The search algorithm is as follows:</p>

<ol>
<li>If the name contains at least one dot, try it as is.</li>

<li>If the name doesn&#39;t end in a dot then append each item in the search list to the name. This is only done if <b>dnsrch</b> is true.</li>

<li>If the name doesn&#39;t contain any dots, try it as is.</li>
</ol>

<p>The record type and class can be omitted; they default to A and IN. If the name looks like an IP address (4 dot-separated numbers), then an appropriate PTR query will be performed.</p>

<p>Returns a &#34;Net::DNS::Packet&#34; object, or &#34;undef&#34; if no answers were found. If you need to examine the response packet whether it contains any answers or not, use the send() method instead.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="query"
>query</a></h2>

<pre class="sh_perl">    $packet = $res-&#62;query(&#39;mailhost&#39;);
    $packet = $res-&#62;query(&#39;mailhost.example.com&#39;);
    $packet = $res-&#62;query(&#39;192.168.1.1&#39;);
    $packet = $res-&#62;query(&#39;example.com&#39;, &#39;MX&#39;);
    $packet = $res-&#62;query(&#39;user.passwd.example.com&#39;, &#39;TXT&#39;, &#39;HS&#39;);</pre>

<p>Performs a DNS query for the given name; the search list is not applied. If the name doesn&#39;t contain any dots and <b>defnames</b> is true then the default domain will be appended.</p>

<p>The record type and class can be omitted; they default to A and IN. If the name looks like an IP address (IPv4 or IPv6), then an appropriate PTR query will be performed.</p>

<p>Returns a &#34;Net::DNS::Packet&#34; object, or &#34;undef&#34; if no answers were found. If you need to examine the response packet whether it contains any answers or not, use the send() method instead.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="send"
>send</a></h2>

<pre class="sh_perl">    $packet = $res-&#62;send($packet_object);
    $packet = $res-&#62;send(&#39;mailhost.example.com&#39;);
    $packet = $res-&#62;send(&#39;example.com&#39;, &#39;MX&#39;);
    $packet = $res-&#62;send(&#39;user.passwd.example.com&#39;, &#39;TXT&#39;, &#39;HS&#39;);</pre>

<p>Performs a DNS query for the given name. Neither the searchlist nor the default domain will be appended.</p>

<p>The argument list can be either a <code>Net::DNS::Packet</code> object or a list of strings. The record type and class can be omitted; they default to A and IN. If the name looks like an IP address (Ipv4 or IPv6), then an appropriate PTR query will be performed.</p>

<p>Returns a <code>Net::DNS::Packet</code> object whether there were any answers or not. Use <code>$packet-&#62;header-&#62;ancount</code> or <code>$packet-&#62;answer</code> to find out if there were any records in the answer section. Returns <code>undef</code> if there was an error.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="axfr"
>axfr</a></h2>

<pre class="sh_perl">    @zone = $res-&#62;axfr;
    @zone = $res-&#62;axfr(&#39;example.com&#39;);
    @zone = $res-&#62;axfr(&#39;passwd.example.com&#39;, &#39;HS&#39;);</pre>

<p>Performs a zone transfer from the first nameserver listed in <code>nameservers</code>. If the zone is omitted, it defaults to the first zone listed in the resolver&#39;s search list. If the class is omitted, it defaults to IN.</p>

<p>Returns a list of <code>Net::DNS::RR</code> objects, or <code>undef</code> if the zone transfer failed.</p>

<p>The redundant SOA record that terminates the zone transfer is not returned to the caller.</p>

<p>See also <a href="#axfr_start" class="podlinkpod"
>&#34;axfr_start&#34;</a> and <a href="#axfr_next" class="podlinkpod"
>&#34;axfr_next&#34;</a>.</p>

<p>Here&#39;s an example that uses a timeout:</p>

<pre class="sh_perl">    $res-&#62;tcp_timeout(10);
    my @zone = $res-&#62;axfr(&#39;example.com&#39;);

    if (@zone) {
        foreach my $rr (@zone) {
            $rr-&#62;print;
        }
    } else {
        print &#39;Zone transfer failed: &#39;, $res-&#62;errorstring, &#34;\n&#34;;
    }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="axfr_start"
>axfr_start</a></h2>

<pre class="sh_perl">    $res-&#62;axfr_start;
    $res-&#62;axfr_start(&#39;example.com&#39;);
    $res-&#62;axfr_start(&#39;example.com&#39;, &#39;HS&#39;);</pre>

<p>Starts a zone transfer from the first nameserver listed in <code>nameservers</code>. If the zone is omitted, it defaults to the first zone listed in the resolver&#39;s search list. If the class is omitted, it defaults to IN.</p>

<p><b>IMPORTANT</b>:</p>

<p>This method currently returns the <code>IO::Socket::INET</code> object that will be used for reading, or <code>undef</code> on error. DO NOT DEPEND ON <code>axfr_start()</code> returning a socket object. THIS MIGHT CHANGE in future releases.</p>

<p>Use <code>axfr_next</code> to read the zone records one at a time.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="axfr_next"
>axfr_next</a></h2>

<pre class="sh_perl">    $res-&#62;axfr_start(&#39;example.com&#39;);

    while (my $rr = $res-&#62;axfr_next) {
            $rr-&#62;print;
    }</pre>

<p>Reads records from a zone transfer one at a time.</p>

<p>Returns <code>undef</code> at the end of the zone transfer. The redundant SOA record that terminates the zone transfer is not returned.</p>

<p>See also <a href="#axfr" class="podlinkpod"
>&#34;axfr&#34;</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="nameservers"
>nameservers</a></h2>

<pre class="sh_perl">    @nameservers = $res-&#62;nameservers;
    $res-&#62;nameservers(&#39;192.168.1.1&#39;, &#39;192.168.2.2&#39;, &#39;192.168.3.3&#39;);</pre>

<p>Gets or sets the nameservers to be queried.</p>

<p>Also see the IPv6 transport notes below</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="print"
>print</a></h2>

<pre class="sh_perl">    $res-&#62;print;</pre>

<p>Prints the resolver state on the standard output.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="string"
>string</a></h2>

<pre class="sh_perl">    print $res-&#62;string;</pre>

<p>Returns a string representation of the resolver state.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="searchlist"
>searchlist</a></h2>

<pre class="sh_perl">    @searchlist = $res-&#62;searchlist;
    $res-&#62;searchlist(&#39;example.com&#39;, &#39;a.example.com&#39;, &#39;b.example.com&#39;);</pre>

<p>Gets or sets the resolver search list.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="port"
>port</a></h2>

<pre class="sh_perl">    print &#39;sending queries to port &#39;, $res-&#62;port, &#34;\n&#34;;
    $res-&#62;port(9732);</pre>

<p>Gets or sets the port to which we send queries. This can be useful for testing a nameserver running on a non-standard port. The default is port 53.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="srcport"
>srcport</a></h2>

<pre class="sh_perl">    print &#39;sending queries from port &#39;, $res-&#62;srcport, &#34;\n&#34;;
    $res-&#62;srcport(5353);</pre>

<p>Gets or sets the port from which we send queries. The default is 0, meaning any port.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="srcaddr"
>srcaddr</a></h2>

<pre class="sh_perl">    print &#39;sending queries from address &#39;, $res-&#62;srcaddr, &#34;\n&#34;;
    $res-&#62;srcaddr(&#39;192.168.1.1&#39;);</pre>

<p>Gets or sets the source address from which we send queries. Convenient for forcing queries out a specific interfaces on a multi-homed host. The default is 0.0.0.0, meaning any local address.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="bgsend"
>bgsend</a></h2>

<pre class="sh_perl">    $socket = $res-&#62;bgsend($packet_object) || die &#34; $res-&#62;errorstring&#34;;

    $socket = $res-&#62;bgsend(&#39;mailhost.example.com&#39;);
    $socket = $res-&#62;bgsend(&#39;example.com&#39;, &#39;MX&#39;);
    $socket = $res-&#62;bgsend(&#39;user.passwd.example.com&#39;, &#39;TXT&#39;, &#39;HS&#39;);</pre>

<p>Performs a background DNS query for the given name, i.e., sends a query packet to the first nameserver listed in <code>$res-&#62;nameservers</code> and returns immediately without waiting for a response. The program can then perform other tasks while waiting for a response from the nameserver.</p>

<p>The argument list can be either a <code>Net::DNS::Packet</code> object or a list of strings. The record type and class can be omitted; they default to A and IN. If the name looks like an IP address (4 dot-separated numbers), then an appropriate PTR query will be performed.</p>

<p>Returns an <code>IO::Socket::INET</code> object or <code>undef</code> on error in which case the reason for failure can be found through a call to the errorstring method.</p>

<p>The program must determine when the socket is ready for reading and call <code>$res-&#62;bgread</code> to get the response packet. You can use <code>$res-&#62;bgisready</code> or <code>IO::Select</code> to find out if the socket is ready before reading it.</p>

<p>bgsend does not support persistent sockets. bgsend does not support the usevc option (TCP).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="bgread"
>bgread</a></h2>

<pre class="sh_perl">    $packet = $res-&#62;bgread($socket);
    undef $socket;</pre>

<p>Reads the answer from a background query (see <a href="#bgsend" class="podlinkpod"
>&#34;bgsend&#34;</a>). The argument is an <code>IO::Socket</code> object returned by <code>bgsend</code>.</p>

<p>Returns a <code>Net::DNS::Packet</code> object or <code>undef</code> on error.</p>

<p>The programmer should close or destroy the socket object after reading it.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="bgisready"
>bgisready</a></h2>

<pre class="sh_perl">    $socket = $res-&#62;bgsend(&#39;foo.example.com&#39;);
    until ($res-&#62;bgisready($socket)) {
        # do some other processing
    }
    $packet = $res-&#62;bgread($socket);
    $socket = undef;</pre>

<p>Determines whether a socket is ready for reading. The argument is an <code>IO::Socket</code> object returned by <code>$res-&#62;bgsend</code>.</p>

<p>Returns true if the socket is ready, false if not.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="tsig"
>tsig</a></h2>

<pre class="sh_perl">    my $tsig = $res-&#62;tsig;

    $res-&#62;tsig(Net::DNS::RR-&#62;new(&#34;$key_name TSIG $key&#34;));

    $tsig = Net::DNS::RR-&#62;new(&#34;$key_name TSIG $key&#34;);
    $tsig-&#62;fudge(60);
    $res-&#62;tsig($tsig);

    $res-&#62;tsig($key_name, $key);

    $res-&#62;tsig(0);</pre>

<p>Get or set the TSIG record used to automatically sign outgoing queries and updates. Call with an argument of 0 or &#39;&#39; to turn off automatic signing.</p>

<p>The default resolver behavior is not to sign any packets. You must call this method to set the key if you&#39;d like the resolver to sign packets automatically.</p>

<p>You can also sign packets manually -- see the <code>Net::DNS::Packet</code> and <code>Net::DNS::Update</code> manual pages for examples. TSIG records in manually-signed packets take precedence over those that the resolver would add automatically.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="retrans"
>retrans</a></h2>

<pre class="sh_perl">    print &#39;retrans interval: &#39;, $res-&#62;retrans, &#34;\n&#34;;
    $res-&#62;retrans(3);</pre>

<p>Get or set the retransmission interval. The default is 5.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="retry"
>retry</a></h2>

<pre class="sh_perl">    print &#39;number of tries: &#39;, $res-&#62;retry, &#34;\n&#34;;
    $res-&#62;retry(2);</pre>

<p>Get or set the number of times to try the query. The default is 4.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="recurse"
>recurse</a></h2>

<pre class="sh_perl">    print &#39;recursion flag: &#39;, $res-&#62;recurse, &#34;\n&#34;;
    $res-&#62;recurse(0);</pre>

<p>Get or set the recursion flag. If this is true, nameservers will be requested to perform a recursive query. The default is true.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="defnames"
>defnames</a></h2>

<pre class="sh_perl">    print &#39;defnames flag: &#39;, $res-&#62;defnames, &#34;\n&#34;;
    $res-&#62;defnames(0);</pre>

<p>Get or set the defnames flag. If this is true, calls to <b>query</b> will append the default domain to names that contain no dots. The default is true.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="dnsrch"
>dnsrch</a></h2>

<pre class="sh_perl">    print &#39;dnsrch flag: &#39;, $res-&#62;dnsrch, &#34;\n&#34;;
    $res-&#62;dnsrch(0);</pre>

<p>Get or set the dnsrch flag. If this is true, calls to <b>search</b> will apply the search list. The default is true.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="debug"
>debug</a></h2>

<pre class="sh_perl">    print &#39;debug flag: &#39;, $res-&#62;debug, &#34;\n&#34;;
    $res-&#62;debug(1);</pre>

<p>Get or set the debug flag. If set, calls to <b>search</b>, <b>query</b>, and <b>send</b> will print debugging information on the standard output. The default is false.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="usevc"
>usevc</a></h2>

<pre class="sh_perl">    print &#39;usevc flag: &#39;, $res-&#62;usevc, &#34;\n&#34;;
    $res-&#62;usevc(1);</pre>

<p>Get or set the usevc flag. If true, then queries will be performed using virtual circuits (TCP) instead of datagrams (UDP). The default is false.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="tcp_timeout"
>tcp_timeout</a></h2>

<pre class="sh_perl">    print &#39;TCP timeout: &#39;, $res-&#62;tcp_timeout, &#34;\n&#34;;
    $res-&#62;tcp_timeout(10);</pre>

<p>Get or set the TCP timeout in seconds. A timeout of <code>undef</code> means indefinite. The default is 120 seconds (2 minutes).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="udp_timeout"
>udp_timeout</a></h2>

<pre class="sh_perl">    print &#39;UDP timeout: &#39;, $res-&#62;udp_timeout, &#34;\n&#34;;
    $res-&#62;udp_timeout(10);</pre>

<p>Get or set the UDP timeout in seconds. A timeout of <code>undef</code> means the retry and retrans settings will be just utilized to perform the retries until they are exhausted. The default is <code>undef</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="persistent_tcp"
>persistent_tcp</a></h2>

<pre class="sh_perl">    print &#39;Persistent TCP flag: &#39;, $res-&#62;persistent_tcp, &#34;\n&#34;;
    $res-&#62;persistent_tcp(1);</pre>

<p>Get or set the persistent TCP setting. If set to true, Net::DNS will keep a TCP socket open for each host:port to which it connects. This is useful if you&#39;re using TCP and need to make a lot of queries or updates to the same nameserver.</p>

<p>This option defaults to false unless you&#39;re running under a SOCKSified Perl, in which case it defaults to true.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="persistent_udp"
>persistent_udp</a></h2>

<pre class="sh_perl">    print &#39;Persistent UDP flag: &#39;, $res-&#62;persistent_udp, &#34;\n&#34;;
    $res-&#62;persistent_udp(1);</pre>

<p>Get or set the persistent UDP setting. If set to true, Net::DNS will keep a single UDP socket open for all queries. This is useful if you&#39;re using UDP and need to make a lot of queries or updates.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="igntc"
>igntc</a></h2>

<pre class="sh_perl">    print &#39;igntc flag: &#39;, $res-&#62;igntc, &#34;\n&#34;;
    $res-&#62;igntc(1);</pre>

<p>Get or set the igntc flag. If true, truncated packets will be ignored. If false, truncated packets will cause the query to be retried using TCP. The default is false.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="errorstring"
>errorstring</a></h2>

<pre class="sh_perl">    print &#39;query status: &#39;, $res-&#62;errorstring, &#34;\n&#34;;</pre>

<p>Returns a string containing the status of the most recent query.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="answerfrom"
>answerfrom</a></h2>

<pre class="sh_perl">    print &#39;last answer was from: &#39;, $res-&#62;answerfrom, &#34;\n&#34;;</pre>

<p>Returns the IP address from which we received the last answer in response to a query.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="answersize"
>answersize</a></h2>

<pre class="sh_perl">    print &#39;size of last answer: &#39;, $res-&#62;answersize, &#34;\n&#34;;</pre>

<p>Returns the size in bytes of the last answer we received in response to a query.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="dnssec"
>dnssec</a></h2>

<pre class="sh_perl">    print &#34;dnssec flag: &#34;, $res-&#62;dnssec, &#34;\n&#34;;
    $res-&#62;dnssec(0);</pre>

<p>Enabled DNSSEC this will set the checking disabled flag in the query header and add EDNS0 data as in RFC2671 and RFC3225</p>

<p>When set to true the answer and additional section of queries from secured zones will contain DNSKEY, NSEC and RRSIG records.</p>

<p>Setting calling the dnssec method with a non-zero value will set the UDP packet size to the default value of 2048. If that is to small or to big for your environment you should call the udppacketsize() method immeditatly after.</p>

<pre class="sh_perl">   $res-&#62;dnssec(1);    # turns on DNSSEC and sets udp packetsize to 2048
   $res-&#62;udppacketsize(1028);   # lowers the UDP pakcet size</pre>

<p>The method will Croak::croak with the message &#34;You called the Net::DNS::Resolver::dnssec() method but do not have Net::DNS::SEC installed at ...&#34; if you call it without Net::DNS::SEC being in your @INC path.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="cdflag"
>cdflag</a></h2>

<pre class="sh_perl">    print &#34;checking disabled flag: &#34;, $res-&#62;dnssec, &#34;\n&#34;;
    $res-&#62;dnssec(1);
    $res-&#62;cdflag(1);</pre>

<p>Sets or gets the CD bit for a dnssec query. This bit is always zero for non dnssec queries. When the dnssec is enabled the flag defaults to 0 can be set to 1.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="adflag"
>adflag</a></h2>

<pre class="sh_perl">    print &#34;checking disabled flag: &#34;, $res-&#62;dnssec, &#34;\n&#34;;
    $res-&#62;dnssec(1);
    $res-&#62;adflag(1);</pre>

<p>Sets or gets the AD bit for a dnssec query. This bit is always zero for non dnssec queries. When the dnssec is enabled the flag defaults to 1.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="udppacketsize"
>udppacketsize</a></h2>

<pre class="sh_perl">    print &#34;udppacketsize: &#34;, $res-&#62;udppacketsize, &#34;\n&#34;;
    $res-&#62;udppacketsize(2048);</pre>

<p>udppacketsize will set or get the packet size. If set to a value greater than Net::DNS::PACKETSZ() an EDNS extension will be added indicating support for MTU path recovery.</p>

<p>Default udppacketsize is Net::DNS::PACKETSZ() (512)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CUSTOMIZING"
>CUSTOMIZING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Net::DNS::Resolver is actually an empty subclass. At compile time a super class is chosen based on the current platform. A side benefit of this allows for easy modification of the methods in Net::DNS::Resolver. You simply add a method to the namespace!</p>

<p>For example, if we wanted to cache lookups:</p>

<pre class="sh_perl"> package Net::DNS::Resolver;

 my %cache;

 sub search {
        my ($self, @args) = @_;

        return $cache{@args} ||= $self-&#62;SUPER::search(@args);
 }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="IPv6_transport"
>IPv6 transport <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Net::DNS::Resolver library will use IPv6 transport if the appropriate libraries (Socket6 and IO::Socket::INET6) are available and the address the server tries to connect to is an IPv6 address.</p>

<p>The print() will method will report if IPv6 transport is available.</p>

<p>You can use the force_v4() method with a non-zero argument to force IPv4 transport.</p>

<p>The nameserver() method has IPv6 dependend behavior. If IPv6 is not available or IPv4 transport has been forced the nameserver() method will only return IPv4 addresses.</p>

<p>For example</p>

<pre class="sh_perl">    $res-&#62;nameservers(&#39;192.168.1.1&#39;, &#39;192.168.2.2&#39;, &#39;2001:610:240:0:53:0:0:3&#39;);
    $res-&#62;force_v4(1);
    print join (&#34; &#34;,$res-&#62;nameserver());</pre>

<p>Will print: 192.168.1.1 192.168.2.2</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ENVIRONMENT"
>ENVIRONMENT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following environment variables can also be used to configure the resolver:</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="RES_NAMESERVERS"
>RES_NAMESERVERS</a></h2>

<pre class="sh_perl">    # Bourne Shell
    RES_NAMESERVERS=&#34;192.168.1.1 192.168.2.2 192.168.3.3&#34;
    export RES_NAMESERVERS

    # C Shell
    setenv RES_NAMESERVERS &#34;192.168.1.1 192.168.2.2 192.168.3.3&#34;</pre>

<p>A space-separated list of nameservers to query.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="RES_SEARCHLIST"
>RES_SEARCHLIST</a></h2>

<pre class="sh_perl">    # Bourne Shell
    RES_SEARCHLIST=&#34;example.com sub1.example.com sub2.example.com&#34;
    export RES_SEARCHLIST

    # C Shell
    setenv RES_SEARCHLIST &#34;example.com sub1.example.com sub2.example.com&#34;</pre>

<p>A space-separated list of domains to put in the search list.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="LOCALDOMAIN"
>LOCALDOMAIN</a></h2>

<pre class="sh_perl">    # Bourne Shell
    LOCALDOMAIN=example.com
    export LOCALDOMAIN

    # C Shell
    setenv LOCALDOMAIN example.com</pre>

<p>The default domain.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="RES_OPTIONS"
>RES_OPTIONS</a></h2>

<pre class="sh_perl">    # Bourne Shell
    RES_OPTIONS=&#34;retrans:3 retry:2 debug&#34;
    export RES_OPTIONS

    # C Shell
    setenv RES_OPTIONS &#34;retrans:3 retry:2 debug&#34;</pre>

<p>A space-separated list of resolver options to set. Options that take values are specified as <i>option</i>:<i>value</i>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Error reporting and handling needs to be improved.</p>

<p>The current implementation supports TSIG only on outgoing packets. No validation of server replies is performed.</p>

<p>bgsend does not honor the usevc flag and only uses UDP for transport.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 1997-2002 Michael Fuhr.</p>

<p>Portions Copyright (c) 2002-2004 Chris Reinhardt. Portions Copyright (c) 2005 Olaf M. Kolkman, NLnet Labs.</p>

<p>All rights reserved. This program is free software; you may redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="http://man.he.net/man1/perl" class="podlinkman"
>perl(1)</a>, <a href="/~olaf/Net-DNS-0.68/lib/Net/DNS.pm" class="podlinkpod"
>Net::DNS</a>, <a href="/~olaf/Net-DNS-0.68/lib/Net/DNS/Packet.pm" class="podlinkpod"
>Net::DNS::Packet</a>, <a href="/~olaf/Net-DNS-0.68/lib/Net/DNS/Update.pm" class="podlinkpod"
>Net::DNS::Update</a>, <a href="/~olaf/Net-DNS-0.68/lib/Net/DNS/Header.pm" class="podlinkpod"
>Net::DNS::Header</a>, <a href="/~olaf/Net-DNS-0.68/lib/Net/DNS/Question.pm" class="podlinkpod"
>Net::DNS::Question</a>, <a href="/~olaf/Net-DNS-0.68/lib/Net/DNS/RR.pm" class="podlinkpod"
>Net::DNS::RR</a>, <a href="http://man.he.net/man5/resolver" class="podlinkman"
>resolver(5)</a>, RFC 1035, RFC 1034 Section 4.3.5</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78177 Uploads, 24708 Distributions
105988 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Wed Apr 25 03:53:10 2012 GMT (0.215445041656494) @cpansearch1 -->
 </body>
</html>
