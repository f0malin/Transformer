<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>CPAN - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","CPAN",3]);
    _gaq.push(["_setCustomVar",5,"Release","CPAN-1.9800",3]);
    _gaq.push(["_setCustomVar",3,"Module","CPAN",3]);
    _gaq.push(["_setCustomVar",1,"Author","ANDK",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?CPAN">permalink</a></div>
  <a href="/~andk/">Andreas J. K&ouml;nig</a> &gt;
  <a href="/~andk/CPAN-1.9800/">CPAN-1.9800</a> &gt;
  CPAN
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/c123e8a7a4e6b2de27017a03349d89ea?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/A/AN/ANDK/CPAN-1.9800.tar.gz">CPAN-1.9800.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=CPAN;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~ANDK/CPAN-1.9800/lib/CPAN.pm">Annotate this POD
(2)
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 63</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 84</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=CPAN">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.9800 &nbsp;
<span class="noprint">
  <a href="/src/ANDK/CPAN-1.9800/lib/CPAN.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#CPAN::shell([$prompt,_$command])_Starting_Interactive_Mode'>CPAN::shell([$prompt, $command]) Starting Interactive Mode</a>
    <li class='indexItem indexItem2'><a href='#CPAN::Shell'>CPAN::Shell</a>
    <li class='indexItem indexItem2'><a href='#autobundle'>autobundle</a>
    <li class='indexItem indexItem2'><a href='#hosts'>hosts</a>
    <li class='indexItem indexItem2'><a href='#mkmyconfig'>mkmyconfig</a>
    <li class='indexItem indexItem2'><a href='#r_[Module|/Regexp/]...'>r [Module|/Regexp/]...</a>
    <li class='indexItem indexItem2'><a href='#recent_***EXPERIMENTAL_COMMAND***'>recent ***EXPERIMENTAL COMMAND***</a>
    <li class='indexItem indexItem2'><a href='#recompile'>recompile</a>
    <li class='indexItem indexItem2'><a href='#report_Bundle|Distribution|Module'>report Bundle|Distribution|Module</a>
    <li class='indexItem indexItem2'><a href='#smoke_***EXPERIMENTAL_COMMAND***'>smoke ***EXPERIMENTAL COMMAND***</a>
    <li class='indexItem indexItem2'><a href='#upgrade_[Module|/Regexp/]...'>upgrade [Module|/Regexp/]...</a>
    <li class='indexItem indexItem2'><a href='#The_four_CPAN::*_Classes:_Author,_Bundle,_Module,_Distribution'>The four CPAN::* Classes: Author, Bundle, Module, Distribution</a>
    <li class='indexItem indexItem2'><a href='#Integrating_local_directories'>Integrating local directories</a>
    <li class='indexItem indexItem2'><a href='#Redirection'>Redirection</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CONFIGURATION'>CONFIGURATION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Config_Variables'>Config Variables</a>
    <li class='indexItem indexItem2'><a href='#CPAN::anycwd($path):_Note_on_config_variable_getcwd'>CPAN::anycwd($path): Note on config variable getcwd</a>
    <li class='indexItem indexItem2'><a href='#Note_on_the_format_of_the_urllist_parameter'>Note on the format of the urllist parameter</a>
    <li class='indexItem indexItem2'><a href='#The_urllist_parameter_has_CD-ROM_support'>The urllist parameter has CD-ROM support</a>
    <li class='indexItem indexItem2'><a href='#Maintaining_the_urllist_parameter'>Maintaining the urllist parameter</a>
    <li class='indexItem indexItem2'><a href='#The_requires_and_build_requires_dependency_declarations'>The requires and build_requires dependency declarations</a>
    <li class='indexItem indexItem2'><a href='#Configuration_for_individual_distributions_(Distroprefs)'>Configuration for individual distributions (Distroprefs)</a>
    <li class='indexItem indexItem2'><a href='#Filenames'>Filenames</a>
    <li class='indexItem indexItem2'><a href='#Fallback_Data::Dumper_and_Storable'>Fallback Data::Dumper and Storable</a>
    <li class='indexItem indexItem2'><a href='#Blueprint'>Blueprint</a>
    <li class='indexItem indexItem2'><a href='#Language_Specs'>Language Specs</a>
    <li class='indexItem indexItem2'><a href='#Processing_Instructions'>Processing Instructions</a>
    <li class='indexItem indexItem2'><a href='#Schema_verification_with_Kwalify'>Schema verification with Kwalify</a>
    <li class='indexItem indexItem2'><a href='#Example_Distroprefs_Files'>Example Distroprefs Files</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#PROGRAMMER&#39;S_INTERFACE'>PROGRAMMER&#39;S INTERFACE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Methods_in_the_other_Classes'>Methods in the other Classes</a>
    <li class='indexItem indexItem2'><a href='#Cache_Manager'>Cache Manager</a>
    <li class='indexItem indexItem2'><a href='#Bundles'>Bundles</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#PREREQUISITES'>PREREQUISITES</a>
  <li class='indexItem indexItem1'><a href='#UTILITIES'>UTILITIES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Finding_packages_and_VERSION'>Finding packages and VERSION</a>
    <li class='indexItem indexItem2'><a href='#Debugging'>Debugging</a>
    <li class='indexItem indexItem2'><a href='#Floppy,_Zip,_Offline_Mode'>Floppy, Zip, Offline Mode</a>
    <li class='indexItem indexItem2'><a href='#Basic_Utilities_for_Programmers'>Basic Utilities for Programmers</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SECURITY'>SECURITY</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Cryptographically_signed_modules'>Cryptographically signed modules</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXPORT'>EXPORT</a>
  <li class='indexItem indexItem1'><a href='#ENVIRONMENT'>ENVIRONMENT</a>
  <li class='indexItem indexItem1'><a href='#POPULATE_AN_INSTALLATION_WITH_LOTS_OF_MODULES'>POPULATE AN INSTALLATION WITH LOTS OF MODULES</a>
  <li class='indexItem indexItem1'><a href='#WORKING_WITH_CPAN.pm_BEHIND_FIREWALLS'>WORKING WITH CPAN.pm BEHIND FIREWALLS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Three_basic_types_of_firewalls'>Three basic types of firewalls</a>
    <li class='indexItem indexItem2'><a href='#Configuring_lynx_or_ncftp_for_going_through_a_firewall'>Configuring lynx or ncftp for going through a firewall</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#FAQ'>FAQ</a>
  <li class='indexItem indexItem1'><a href='#COMPATIBILITY'>COMPATIBILITY</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#OLD_PERL_VERSIONS'>OLD PERL VERSIONS</a>
    <li class='indexItem indexItem2'><a href='#CPANPLUS'>CPANPLUS</a>
    <li class='indexItem indexItem2'><a href='#CPANMINUS'>CPANMINUS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SECURITY_ADVICE'>SECURITY ADVICE</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#LICENSE'>LICENSE</a>
  <li class='indexItem indexItem1'><a href='#TRANSLATIONS'>TRANSLATIONS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>CPAN - query,
download and build perl modules from CPAN sites</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Interactive mode:</p>

<pre class="sh_perl">  perl -MCPAN -e shell</pre>

<p>--or--</p>

<pre class="sh_perl">  cpan</pre>

<p>Basic commands:</p>

<pre class="sh_perl">  # Modules:

  cpan&#62; install Acme::Meta                       # in the shell

  CPAN::Shell-&#62;install(&#34;Acme::Meta&#34;);            # in perl

  # Distributions:

  cpan&#62; install NWCLARK/Acme-Meta-0.02.tar.gz    # in the shell

  CPAN::Shell-&#62;
    install(&#34;NWCLARK/Acme-Meta-0.02.tar.gz&#34;);    # in perl

  # module objects:

  $mo = CPAN::Shell-&#62;expandany($mod);
  $mo = CPAN::Shell-&#62;expand(&#34;Module&#34;,$mod);      # same thing

  # distribution objects:

  $do = CPAN::Shell-&#62;expand(&#34;Module&#34;,$mod)-&#62;distribution;
  $do = CPAN::Shell-&#62;expandany($distro);         # same thing
  $do = CPAN::Shell-&#62;expand(&#34;Distribution&#34;,
                            $distro);            # same thing</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The CPAN module automates or at least simplifies the make and install of perl modules and extensions. It includes some primitive searching capabilities and knows how to use LWP, HTTP::Tiny, Net::FTP and certain external download clients to fetch distributions from the net.</p>

<p>These are fetched from one or more mirrored CPAN (Comprehensive Perl Archive Network) sites and unpacked in a dedicated directory.</p>

<p>The CPAN module also supports named and versioned <i>bundles</i> of modules. Bundles simplify handling of sets of related modules. See Bundles below.</p>

<p>The package contains a session manager and a cache manager. The session manager keeps track of what has been fetched, built, and installed in the current session. The cache manager keeps track of the disk space occupied by the make processes and deletes excess space using a simple FIFO mechanism.</p>

<p>All methods provided are accessible in a programmer style and in an interactive shell style.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CPAN::shell([$prompt,_$command])_Starting_Interactive_Mode"
>CPAN::shell([$prompt, $command]) Starting Interactive Mode</a></h2>

<p>Enter interactive mode by running</p>

<pre class="sh_perl">    perl -MCPAN -e shell</pre>

<p>or</p>

<pre class="sh_perl">    cpan</pre>

<p>which puts you into a readline interface. If <code>Term::ReadKey</code> and either of <code>Term::ReadLine::Perl</code> or <code>Term::ReadLine::Gnu</code> are installed, history and command completion are supported.</p>

<p>Once at the command line, type <code>h</code> for one-page help screen; the rest should be self-explanatory.</p>

<p>The function call <code>shell</code> takes two optional arguments: one the prompt, the second the default initial command line (the latter only works if a real ReadLine interface module is installed).</p>

<p>The most common uses of the interactive modes are</p>

<dl>
<dt><a name='Searching'></a><a name="Searching_for_authors,_bundles,_distribution_files_and_modules"
>Searching for authors, bundles, distribution files and modules</a></dt>

<dd>
<p>There are corresponding one-letter commands <code>a</code>, <code>b</code>, <code>d</code>, and <code>m</code> for each of the four categories and another, <code>i</code> for any of the mentioned four. Each of the four entities is implemented as a class with slightly differing methods for displaying an object.</p>

<p>Arguments to these commands are either strings exactly matching the identification string of an object, or regular expressions matched case-insensitively against various attributes of the objects. The parser only recognizes a regular expression when you enclose it with slashes.</p>

<p>The principle is that the number of objects found influences how an item is displayed. If the search finds one item, the result is displayed with the rather verbose method <code>as_string</code>, but if more than one is found, each object is displayed with the terse method <code>as_glimpse</code>.</p>

<p>Examples:</p>

<pre class="sh_perl">  cpan&#62; m Acme::MetaSyntactic
  Module id = Acme::MetaSyntactic
      CPAN_USERID  BOOK (Philippe Bruhat (BooK) &#60;[...]&#62;)
      CPAN_VERSION 0.99
      CPAN_FILE    B/BO/BOOK/Acme-MetaSyntactic-0.99.tar.gz
      UPLOAD_DATE  2006-11-06
      MANPAGE      Acme::MetaSyntactic - Themed metasyntactic variables names
      INST_FILE    /usr/local/lib/perl/5.10.0/Acme/MetaSyntactic.pm
      INST_VERSION 0.99
  cpan&#62; a BOOK
  Author id = BOOK
      EMAIL        [...]
      FULLNAME     Philippe Bruhat (BooK)
  cpan&#62; d BOOK/Acme-MetaSyntactic-0.99.tar.gz
  Distribution id = B/BO/BOOK/Acme-MetaSyntactic-0.99.tar.gz
      CPAN_USERID  BOOK (Philippe Bruhat (BooK) &#60;[...]&#62;)
      CONTAINSMODS Acme::MetaSyntactic Acme::MetaSyntactic::Alias [...]
      UPLOAD_DATE  2006-11-06
  cpan&#62; m /lorem/
  Module  = Acme::MetaSyntactic::loremipsum (BOOK/Acme-MetaSyntactic-0.99.tar.gz)
  Module    Text::Lorem            (ADEOLA/Text-Lorem-0.3.tar.gz)
  Module    Text::Lorem::More      (RKRIMEN/Text-Lorem-More-0.12.tar.gz)
  Module    Text::Lorem::More::Source (RKRIMEN/Text-Lorem-More-0.12.tar.gz)
  cpan&#62; i /berlin/
  Distribution    BEATNIK/Filter-NumberLines-0.02.tar.gz
  Module  = DateTime::TimeZone::Europe::Berlin (DROLSKY/DateTime-TimeZone-0.7904.tar.gz)
  Module    Filter::NumberLines    (BEATNIK/Filter-NumberLines-0.02.tar.gz)
  Author          [...]</pre>

<p>The examples illustrate several aspects: the first three queries target modules, authors, or distros directly and yield exactly one result. The last two use regular expressions and yield several results. The last one targets all of bundles, modules, authors, and distros simultaneously. When more than one result is available, they are printed in one-line format.</p>

<dt><a name='get'></a><a name="get,_make,_test,_install,_clean_modules_or_distributions"
><code>get</code>, <code>make</code>, <code>test</code>, <code>install</code>, <code>clean</code> modules or distributions</a></dt>

<dd>
<p>These commands take any number of arguments and investigate what is necessary to perform the action. Argument processing is as follows:</p>

<pre class="sh_perl">  known module name in format Foo/Bar.pm   module
  other embedded slash                     distribution
    - with trailing slash dot              directory
  enclosing slashes                        regexp
  known module name in format Foo::Bar     module</pre>

<p>If the argument is a distribution file name (recognized by embedded slashes), it is processed. If it is a module, CPAN determines the distribution file in which this module is included and processes that, following any dependencies named in the module&#39;s META.yml or Makefile.PL (this behavior is controlled by the configuration parameter <code>prerequisites_policy</code>). If an argument is enclosed in slashes it is treated as a regular expression: it is expanded and if the result is a single object (distribution, bundle or module), this object is processed.</p>

<p>Example:</p>

<pre class="sh_perl">    install Dummy::Perl                   # installs the module
    install AUXXX/Dummy-Perl-3.14.tar.gz  # installs that distribution
    install /Dummy-Perl-3.14/             # same if the regexp is unambiguous</pre>

<p><code>get</code> downloads a distribution file and untars or unzips it, <code>make</code> builds it, <code>test</code> runs the test suite, and <code>install</code> installs it.</p>

<p>Any <code>make</code> or <code>test</code> is run unconditionally. An</p>

<pre class="sh_perl">  install &#60;distribution_file&#62;</pre>

<p>is also run unconditionally. But for</p>

<pre class="sh_perl">  install &#60;module&#62;</pre>

<p>CPAN checks whether an install is needed and prints <i>module up to date</i> if the distribution file containing the module doesn&#39;t need updating.</p>

<p>CPAN also keeps track of what it has done within the current session and doesn&#39;t try to build a package a second time regardless of whether it succeeded or not. It does not repeat a test run if the test has been run successfully before. Same for install runs.</p>

<p>The <code>force</code> pragma may precede another command (currently: <code>get</code>, <code>make</code>, <code>test</code>, or <code>install</code>) to execute the command from scratch and attempt to continue past certain errors. See the section below on the <code>force</code> and the <code>fforce</code> pragma.</p>

<p>The <code>notest</code> pragma skips the test part in the build process.</p>

<p>Example:</p>

<pre class="sh_perl">    cpan&#62; notest install Tk</pre>

<p>A <code>clean</code> command results in a</p>

<pre class="sh_perl">  make clean</pre>

<p>being executed within the distribution file&#39;s working directory.</p>

<dt><a name='readme'></a><a name="readme,_perldoc,_look_module_or_distribution"
><code>readme</code>, <code>perldoc</code>, <code>look</code> module or distribution</a></dt>

<dd>
<p><code>readme</code> displays the README file of the associated distribution. <code>Look</code> gets and untars (if not yet done) the distribution file, changes to the appropriate directory and opens a subshell process in that directory. <code>perldoc</code> displays the module&#39;s pod documentation in html or plain text format.</p>

<dt><a name='ls'></a><a name="ls_author"
><code>ls</code> author</a></dt>

<dd>
<dt><a name='ls'></a><a name="ls_globbing_expression"
><code>ls</code> globbing_expression</a></dt>

<dd>
<p>The first form lists all distribution files in and below an author&#39;s CPAN directory as stored in the CHECKUMS files distributed on CPAN. The listing recurses into subdirectories.</p>

<p>The second form limits or expands the output with shell globbing as in the following examples:</p>

<pre class="sh_perl">      ls JV/make*
      ls GSAR/*make*
      ls */*make*</pre>

<p>The last example is very slow and outputs extra progress indicators that break the alignment of the result.</p>

<p>Note that globbing only lists directories explicitly asked for, for example FOO/* will not list FOO/bar/Acme-Sthg-n.nn.tar.gz. This may be regarded as a bug that may be changed in some future version.</p>

<dt><a name="failed"
><code>failed</code></a></dt>

<dd>
<p>The <code>failed</code> command reports all distributions that failed on one of <code>make</code>, <code>test</code> or <code>install</code> for some reason in the currently running shell session.</p>

<dt><a name='Persistence'></a><a name="Persistence_between_sessions"
>Persistence between sessions</a></dt>

<dd>
<p>If the <code>YAML</code> or the <code>YAML::Syck</code> module is installed a record of the internal state of all modules is written to disk after each step. The files contain a signature of the currently running perl version for later perusal.</p>

<p>If the configurations variable <code>build_dir_reuse</code> is set to a true value, then CPAN.pm reads the collected YAML files. If the stored signature matches the currently running perl, the stored state is loaded into memory such that persistence between sessions is effectively established.</p>

<dt><a name='The'></a><a name="The_force_and_the_fforce_pragma"
>The <code>force</code> and the <code>fforce</code> pragma</a></dt>

<dd>
<p>To speed things up in complex installation scenarios, CPAN.pm keeps track of what it has already done and refuses to do some things a second time. A <code>get</code>, a <code>make</code>, and an <code>install</code> are not repeated. A <code>test</code> is repeated only if the previous test was unsuccessful. The diagnostic message when CPAN.pm refuses to do something a second time is one of <i>Has already been </i><code>unwrapped|made|tested successfully</code> or something similar. Another situation where CPAN refuses to act is an <code>install</code> if the corresponding <code>test</code> was not successful.</p>

<p>In all these cases, the user can override this stubborn behaviour by prepending the command with the word force, for example:</p>

<pre class="sh_perl">  cpan&#62; force get Foo
  cpan&#62; force make AUTHOR/Bar-3.14.tar.gz
  cpan&#62; force test Baz
  cpan&#62; force install Acme::Meta</pre>

<p>Each <i>forced</i> command is executed with the corresponding part of its memory erased.</p>

<p>The <code>fforce</code> pragma is a variant that emulates a <code>force get</code> which erases the entire memory followed by the action specified, effectively restarting the whole get/make/test/install procedure from scratch.</p>

<dt><a name="Lockfile"
>Lockfile</a></dt>

<dd>
<p>Interactive sessions maintain a lockfile, by default <code>~/.cpan/.lock</code>. Batch jobs can run without a lockfile and not disturb each other.</p>

<p>The shell offers to run in <i>downgraded mode</i> when another process is holding the lockfile. This is an experimental feature that is not yet tested very well. This second shell then does not write the history file, does not use the metadata file, and has a different prompt.</p>

<dt><a name="Signals"
>Signals</a></dt>

<dd>
<p>CPAN.pm installs signal handlers for SIGINT and SIGTERM. While you are in the cpan-shell, it is intended that you can press <code>^C</code> anytime and return to the cpan-shell prompt. A SIGTERM will cause the cpan-shell to clean up and leave the shell loop. You can emulate the effect of a SIGTERM by sending two consecutive SIGINTs, which usually means by pressing <code>^C</code> twice.</p>

<p>CPAN.pm ignores SIGPIPE. If the user sets <code>inactivity_timeout</code>, a SIGALRM is used during the run of the <code>perl Makefile.PL</code> or <code>perl Build.PL</code> subprocess. A SIGALRM is also used during module version parsing, and is controlled by <code>version_timeout</code>.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CPAN::Shell"
>CPAN::Shell</a></h2>

<p>The commands available in the shell interface are methods in the package CPAN::Shell. If you enter the shell command, your input is split by the Text::ParseWords::shellwords() routine, which acts like most shells do. The first word is interpreted as the method to be invoked, and the rest of the words are treated as the method&#39;s arguments. Continuation lines are supported by ending a line with a literal backslash.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="autobundle"
>autobundle</a></h2>

<p><code>autobundle</code> writes a bundle file into the <code>$CPAN::Config-&#62;{cpan_home}/Bundle</code> directory. The file contains a list of all modules that are both available from CPAN and currently installed within @INC. Duplicates of each distribution are suppressed. The name of the bundle file is based on the current date and a counter.</p>

<p>Return value: path to the written file.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="hosts"
>hosts</a></h2>

<p>Note: this feature is still in alpha state and may change in future versions of CPAN.pm</p>

<p>This commands provides a statistical overview over recent download activities. The data for this is collected in the YAML file <code>FTPstats.yml</code> in your <code>cpan_home</code> directory. If no YAML module is configured or YAML not installed, no stats are provided.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="mkmyconfig"
>mkmyconfig</a></h2>

<p>mkmyconfig() writes your own CPAN::MyConfig file into your <code>~/.cpan/</code> directory so that you can save your own preferences instead of the system-wide ones.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="r_[Module|/Regexp/]..."
>r [Module|/Regexp/]...</a></h2>

<p>scans current perl installation for modules that have a newer version available on CPAN and provides a list of them. If called without argument, all potential upgrades are listed; if called with arguments the list is filtered to the modules and regexps given as arguments.</p>

<p>The listing looks something like this:</p>

<pre class="sh_perl">  Package namespace         installed    latest  in CPAN file
  CPAN                        1.94_64    1.9600  ANDK/CPAN-1.9600.tar.gz
  CPAN::Reporter               1.1801    1.1902  DAGOLDEN/CPAN-Reporter-1.1902.tar.gz
  YAML                           0.70      0.73  INGY/YAML-0.73.tar.gz
  YAML::Syck                     1.14      1.17  AVAR/YAML-Syck-1.17.tar.gz
  YAML::Tiny                     1.44      1.50  ADAMK/YAML-Tiny-1.50.tar.gz
  CGI                            3.43      3.55  MARKSTOS/CGI.pm-3.55.tar.gz
  Module::Build::YAML            1.40      1.41  DAGOLDEN/Module-Build-0.3800.tar.gz
  TAP::Parser::Result::YAML      3.22      3.23  ANDYA/Test-Harness-3.23.tar.gz
  YAML::XS                       0.34      0.35  INGY/YAML-LibYAML-0.35.tar.gz</pre>

<p>It suppresses duplicates in the column <code>in CPAN file</code> such that distributions with many upgradeable modules are listed only once.</p>

<p>Note that the list is not sorted.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="recent_***EXPERIMENTAL_COMMAND***"
>recent ***EXPERIMENTAL COMMAND***</a></h2>

<p>The <code>recent</code> command downloads a list of recent uploads to CPAN and displays them <i>slowly</i>. While the command is running, a $SIG{INT} exits the loop after displaying the current item.</p>

<p><b>Note</b>: This command requires XML::LibXML installed.</p>

<p><b>Note</b>: This whole command currently is just a hack and will probably change in future versions of CPAN.pm, but the general approach will likely remain.</p>

<p><b>Note</b>: See also <a href="/perldoc?smoke" class="podlinkpod"
>smoke</a></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="recompile"
>recompile</a></h2>

<p>recompile() is a special command that takes no argument and runs the make/test/install cycle with brute force over all installed dynamically loadable extensions (a.k.a. XS modules) with &#39;force&#39; in effect. The primary purpose of this command is to finish a network installation. Imagine you have a common source tree for two different architectures. You decide to do a completely independent fresh installation. You start on one architecture with the help of a Bundle file produced earlier. CPAN installs the whole Bundle for you, but when you try to repeat the job on the second architecture, CPAN responds with a <code>&#34;Foo up to date&#34;</code> message for all modules. So you invoke CPAN&#39;s recompile on the second architecture and you&#39;re done.</p>

<p>Another popular use for <code>recompile</code> is to act as a rescue in case your perl breaks binary compatibility. If one of the modules that CPAN uses is in turn depending on binary compatibility (so you cannot run CPAN commands), then you should try the CPAN::Nox module for recovery.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="report_Bundle|Distribution|Module"
>report Bundle|Distribution|Module</a></h2>

<p>The <code>report</code> command temporarily turns on the <code>test_report</code> config variable, then runs the <code>force test</code> command with the given arguments. The <code>force</code> pragma reruns the tests and repeats every step that might have failed before.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="smoke_***EXPERIMENTAL_COMMAND***"
>smoke ***EXPERIMENTAL COMMAND***</a></h2>

<p><b>*** WARNING: this command downloads and executes software from CPAN to your computer of completely unknown status. You should never do this with your normal account and better have a dedicated well separated and secured machine to do this. ***</b></p>

<p>The <code>smoke</code> command takes the list of recent uploads to CPAN as provided by the <code>recent</code> command and tests them all. While the command is running $SIG{INT} is defined to mean that the current item shall be skipped.</p>

<p><b>Note</b>: This whole command currently is just a hack and will probably change in future versions of CPAN.pm, but the general approach will likely remain.</p>

<p><b>Note</b>: See also <a href="/perldoc?recent" class="podlinkpod"
>recent</a></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="upgrade_[Module|/Regexp/]..."
>upgrade [Module|/Regexp/]...</a></h2>

<p>The <code>upgrade</code> command first runs an <code>r</code> command with the given arguments and then installs the newest versions of all modules that were listed by that.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_four_CPAN::*_Classes:_Author,_Bundle,_Module,_Distribution"
>The four <code>CPAN::*</code> Classes: Author, Bundle, Module, Distribution</a></h2>

<p>Although it may be considered internal, the class hierarchy does matter for both users and programmer. CPAN.pm deals with the four classes mentioned above, and those classes all share a set of methods. Classical single polymorphism is in effect. A metaclass object registers all objects of all kinds and indexes them with a string. The strings referencing objects have a separated namespace (well, not completely separated):</p>

<pre class="sh_perl">         Namespace                         Class

   words containing a &#34;/&#34; (slash)      Distribution
    words starting with Bundle::          Bundle
          everything else            Module or Author</pre>

<p>Modules know their associated Distribution objects. They always refer to the most recent official release. Developers may mark their releases as unstable development versions (by inserting an underbar into the module version number which will also be reflected in the distribution name when you run &#39;make dist&#39;), so the really hottest and newest distribution is not always the default. If a module Foo circulates on CPAN in both version 1.23 and 1.23_90, CPAN.pm offers a convenient way to install version 1.23 by saying</p>

<pre class="sh_perl">    install Foo</pre>

<p>This would install the complete distribution file (say BAR/Foo-1.23.tar.gz) with all accompanying material. But if you would like to install version 1.23_90, you need to know where the distribution file resides on CPAN relative to the authors/id/ directory. If the author is BAR, this might be BAR/Foo-1.23_90.tar.gz; so you would have to say</p>

<pre class="sh_perl">    install BAR/Foo-1.23_90.tar.gz</pre>

<p>The first example will be driven by an object of the class CPAN::Module, the second by an object of class CPAN::Distribution.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Integrating_local_directories"
>Integrating local directories</a></h2>

<p>Note: this feature is still in alpha state and may change in future versions of CPAN.pm</p>

<p>Distribution objects are normally distributions from the CPAN, but there is a slightly degenerate case for Distribution objects, too, of projects held on the local disk. These distribution objects have the same name as the local directory and end with a dot. A dot by itself is also allowed for the current directory at the time CPAN.pm was used. All actions such as <code>make</code>, <code>test</code>, and <code>install</code> are applied directly to that directory. This gives the command <code>cpan .</code> an interesting touch: while the normal mantra of installing a CPAN module without CPAN.pm is one of</p>

<pre class="sh_perl">    perl Makefile.PL                 perl Build.PL
           ( go and get prerequisites )
    make                             ./Build
    make test                        ./Build test
    make install                     ./Build install</pre>

<p>the command <code>cpan .</code> does all of this at once. It figures out which of the two mantras is appropriate, fetches and installs all prerequisites, takes care of them recursively, and finally finishes the installation of the module in the current directory, be it a CPAN module or not.</p>

<p>The typical usage case is for private modules or working copies of projects from remote repositories on the local disk.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Redirection"
>Redirection</a></h2>

<p>The usual shell redirection symbols <code> | </code> and <code>&#62;</code> are recognized by the cpan shell <b>only when surrounded by whitespace</b>. So piping to pager or redirecting output into a file works somewhat as in a normal shell, with the stipulation that you must type extra spaces.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONFIGURATION"
>CONFIGURATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>When the CPAN module is used for the first time, a configuration dialogue tries to determine a couple of site specific options. The result of the dialog is stored in a hash reference <code> $CPAN::Config </code> in a file CPAN/Config.pm.</p>

<p>Default values defined in the CPAN/Config.pm file can be overridden in a user specific file: CPAN/MyConfig.pm. Such a file is best placed in <code>$HOME/.cpan/CPAN/MyConfig.pm</code>, because <code>$HOME/.cpan</code> is added to the search path of the CPAN module before the use() or require() statements. The mkmyconfig command writes this file for you.</p>

<p>The <code>o conf</code> command has various bells and whistles:</p>

<dl>
<dt><a name='completion'></a><a name="completion_support"
>completion support</a></dt>

<dd>
<p>If you have a ReadLine module installed, you can hit TAB at any point of the commandline and <code>o conf</code> will offer you completion for the built-in subcommands and/or config variable names.</p>

<dt><a name='displaying'></a><a name="displaying_some_help:_o_conf_help"
>displaying some help: o conf help</a></dt>

<dd>
<p>Displays a short help</p>

<dt><a name='displaying'></a><a name="displaying_current_values:_o_conf_[KEY]"
>displaying current values: o conf [KEY]</a></dt>

<dd>
<p>Displays the current value(s) for this config variable. Without KEY, displays all subcommands and config variables.</p>

<p>Example:</p>

<pre class="sh_perl">  o conf shell</pre>

<p>If KEY starts and ends with a slash, the string in between is treated as a regular expression and only keys matching this regexp are displayed</p>

<p>Example:</p>

<pre class="sh_perl">  o conf /color/</pre>

<dt><a name='changing'></a><a name="changing_of_scalar_values:_o_conf_KEY_VALUE"
>changing of scalar values: o conf KEY VALUE</a></dt>

<dd>
<p>Sets the config variable KEY to VALUE. The empty string can be specified as usual in shells, with <code>&#39;&#39;</code> or <code>&#34;&#34;</code></p>

<p>Example:</p>

<pre class="sh_perl">  o conf wget /usr/bin/wget</pre>

<dt><a name='changing'></a><a name="changing_of_list_values:_o_conf_KEY_SHIFT|UNSHIFT|PUSH|POP|SPLICE|LIST"
>changing of list values: o conf KEY SHIFT|UNSHIFT|PUSH|POP|SPLICE|LIST</a></dt>

<dd>
<p>If a config variable name ends with <code>list</code>, it is a list. <code>o conf KEY shift</code> removes the first element of the list, <code>o conf KEY pop</code> removes the last element of the list. <code>o conf KEYS unshift LIST</code> prepends a list of values to the list, <code>o conf KEYS push LIST</code> appends a list of valued to the list.</p>

<p>Likewise, <code>o conf KEY splice LIST</code> passes the LIST to the corresponding splice command.</p>

<p>Finally, any other list of arguments is taken as a new list value for the KEY variable discarding the previous value.</p>

<p>Examples:</p>

<pre class="sh_perl">  o conf urllist unshift <a href="http://cpan.dev.local/CPAN" class="podlinkurl"
>http://cpan.dev.local/CPAN</a>
  o conf urllist splice 3 1
  o conf urllist <a href="http://cpan1.local" class="podlinkurl"
>http://cpan1.local</a> <a href="http://cpan2.local" class="podlinkurl"
>http://cpan2.local</a> <a href="ftp://ftp.perl.org" class="podlinkurl"
>ftp://ftp.perl.org</a></pre>

<dt><a name='reverting'></a><a name="reverting_to_saved:_o_conf_defaults"
>reverting to saved: o conf defaults</a></dt>

<dd>
<p>Reverts all config variables to the state in the saved config file.</p>

<dt><a name='saving'></a><a name="saving_the_config:_o_conf_commit"
>saving the config: o conf commit</a></dt>

<dd>
<p>Saves all config variables to the current config file (CPAN/Config.pm or CPAN/MyConfig.pm that was loaded at start).</p>
</dd>
</dl>

<p>The configuration dialog can be started any time later again by issuing the command <code> o conf init </code> in the CPAN shell. A subset of the configuration dialog can be run by issuing <code>o conf init WORD</code> where WORD is any valid config variable or a regular expression.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Config_Variables"
>Config Variables</a></h2>

<p>The following keys in the hash reference $CPAN::Config are currently defined:</p>

<pre class="sh_perl">  applypatch         path to external prg
  auto_commit        commit all changes to config variables to disk
  build_cache        size of cache for directories to build modules
  build_dir          locally accessible directory to build modules
  build_dir_reuse    boolean if distros in build_dir are persistent
  build_requires_install_policy
                     to install or not to install when a module is
                     only needed for building. yes|no|ask/yes|ask/no
  bzip2              path to external prg
  cache_metadata     use serializer to cache metadata
  check_sigs         if signatures should be verified
  colorize_debug     Term::ANSIColor attributes for debugging output
  colorize_output    boolean if Term::ANSIColor should colorize output
  colorize_print     Term::ANSIColor attributes for normal output
  colorize_warn      Term::ANSIColor attributes for warnings
  commandnumber_in_prompt
                     boolean if you want to see current command number
  commands_quote     preferred character to use for quoting external
                     commands when running them. Defaults to double
                     quote on Windows, single tick everywhere else;
                     can be set to space to disable quoting
  connect_to_internet_ok
                     whether to ask if opening a connection is ok before
                     urllist is specified
  cpan_home          local directory reserved for this package
  curl               path to external prg
  dontload_hash      DEPRECATED
  dontload_list      arrayref: modules in the list will not be
                     loaded by the CPAN::has_inst() routine
  ftp                path to external prg
  ftp_passive        if set, the environment variable FTP_PASSIVE is set
                     for downloads
  ftp_proxy          proxy host for ftp requests
  ftpstats_period    max number of days to keep download statistics
  ftpstats_size      max number of items to keep in the download statistics
  getcwd             see below
  gpg                path to external prg
  gzip               location of external program gzip
  halt_on_failure    stop processing after the first failure of queued
                     items or dependencies
  histfile           file to maintain history between sessions
  histsize           maximum number of lines to keep in histfile
  http_proxy         proxy host for http requests
  inactivity_timeout breaks interactive Makefile.PLs or Build.PLs
                     after this many seconds inactivity. Set to 0 to
                     disable timeouts.
  index_expire       refetch index files after this many days
  inhibit_startup_message
                     if true, suppress the startup message
  keep_source_where  directory in which to keep the source (if we do)
  load_module_verbosity
                     report loading of optional modules used by CPAN.pm
  lynx               path to external prg
  make               location of external make program
  make_arg           arguments that should always be passed to &#39;make&#39;
  make_install_make_command
                     the make command for running &#39;make install&#39;, for
                     example &#39;sudo make&#39;
  make_install_arg   same as make_arg for &#39;make install&#39;
  makepl_arg         arguments passed to &#39;perl Makefile.PL&#39;
  mbuild_arg         arguments passed to &#39;./Build&#39;
  mbuild_install_arg arguments passed to &#39;./Build install&#39;
  mbuild_install_build_command
                     command to use instead of &#39;./Build&#39; when we are
                     in the install stage, for example &#39;sudo ./Build&#39;
  mbuildpl_arg       arguments passed to &#39;perl Build.PL&#39;
  ncftp              path to external prg
  ncftpget           path to external prg
  no_proxy           don&#39;t proxy to these hosts/domains (comma separated list)
  pager              location of external program more (or any pager)
  password           your password if you CPAN server wants one
  patch              path to external prg
  patches_dir        local directory containing patch files
  perl5lib_verbosity verbosity level for PERL5LIB additions
  prefer_external_tar
                     per default all untar operations are done with
                     Archive::Tar; by setting this variable to true
                     the external tar command is used if available
  prefer_installer   legal values are MB and EUMM: if a module comes
                     with both a Makefile.PL and a Build.PL, use the
                     former (EUMM) or the latter (MB); if the module
                     comes with only one of the two, that one will be
                     used no matter the setting
  prerequisites_policy
                     what to do if you are missing module prerequisites
                     (&#39;follow&#39; automatically, &#39;ask&#39; me, or &#39;ignore&#39;)
                     For &#39;follow&#39;, also sets PERL_AUTOINSTALL and
                     PERL_EXTUTILS_AUTOINSTALL for &#34;--defaultdeps&#34; if
                     not already set
  prefs_dir          local directory to store per-distro build options
  proxy_user         username for accessing an authenticating proxy
  proxy_pass         password for accessing an authenticating proxy
  randomize_urllist  add some randomness to the sequence of the urllist
  scan_cache         controls scanning of cache (&#39;atstart&#39;, &#39;atexit&#39; or &#39;never&#39;)
  shell              your favorite shell
  show_unparsable_versions
                     boolean if r command tells which modules are versionless
  show_upload_date   boolean if commands should try to determine upload date
  show_zero_versions boolean if r command tells for which modules $version==0
  tar                location of external program tar
  tar_verbosity      verbosity level for the tar command
  term_is_latin      deprecated: if true Unicode is translated to ISO-8859-1
                     (and nonsense for characters outside latin range)
  term_ornaments     boolean to turn ReadLine ornamenting on/off
  test_report        email test reports (if CPAN::Reporter is installed)
  trust_test_report_history
                     skip testing when previously tested ok (according to
                     CPAN::Reporter history)
  unzip              location of external program unzip
  urllist            arrayref to nearby CPAN sites (or equivalent locations)
  use_sqlite         use CPAN::SQLite for metadata storage (fast and lean)
  username           your username if you CPAN server wants one
  version_timeout    stops version parsing after this many seconds.
                     Default is 15 secs. Set to 0 to disable.
  wait_list          arrayref to a wait server to try (See CPAN::WAIT)
  wget               path to external prg
  yaml_load_code     enable YAML code deserialisation via CPAN::DeferredCode
  yaml_module        which module to use to read/write YAML files</pre>

<p>You can set and query each of these options interactively in the cpan shell with the <code>o conf</code> or the <code>o conf init</code> command as specified below.</p>

<dl>
<dt><a name='o'></a><a name="o_conf_&#60;scalar_option&#62;"
><code>o conf &#60;scalar option&#62;</code></a></dt>

<dd>
<p>prints the current value of the <i>scalar option</i></p>

<dt><a name='o'></a><a name="o_conf_&#60;scalar_option&#62;_&#60;value&#62;"
><code>o conf &#60;scalar option&#62; &#60;value&#62;</code></a></dt>

<dd>
<p>Sets the value of the <i>scalar option</i> to <i>value</i></p>

<dt><a name='o'></a><a name="o_conf_&#60;list_option&#62;"
><code>o conf &#60;list option&#62;</code></a></dt>

<dd>
<p>prints the current value of the <i>list option</i> in MakeMaker&#39;s neatvalue format.</p>

<dt><a name='o'></a><a name="o_conf_&#60;list_option&#62;_[shift|pop]"
><code>o conf &#60;list option&#62; [shift|pop]</code></a></dt>

<dd>
<p>shifts or pops the array in the <i>list option</i> variable</p>

<dt><a name='o'></a><a name="o_conf_&#60;list_option&#62;_[unshift|push|splice]_&#60;list&#62;"
><code>o conf &#60;list option&#62; [unshift|push|splice] &#60;list&#62;</code></a></dt>

<dd>
<p>works like the corresponding perl commands.</p>

<dt><a name='interactive'></a><a name="interactive_editing:_o_conf_init_[MATCH|LIST]"
>interactive editing: o conf init [MATCH|LIST]</a></dt>

<dd>
<p>Runs an interactive configuration dialog for matching variables. Without argument runs the dialog over all supported config variables. To specify a MATCH the argument must be enclosed by slashes.</p>

<p>Examples:</p>

<pre class="sh_perl">  o conf init ftp_passive ftp_proxy
  o conf init /color/</pre>

<p>Note: this method of setting config variables often provides more explanation about the functioning of a variable than the manpage.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CPAN::anycwd($path):_Note_on_config_variable_getcwd"
>CPAN::anycwd($path): Note on config variable getcwd</a></h2>

<p>CPAN.pm changes the current working directory often and needs to determine its own current working directory. By default it uses Cwd::cwd, but if for some reason this doesn&#39;t work on your system, configure alternatives according to the following table:</p>

<dl>
<dt><a name="cwd"
>cwd</a></dt>

<dd>
<p>Calls Cwd::cwd</p>

<dt><a name="getcwd"
>getcwd</a></dt>

<dd>
<p>Calls Cwd::getcwd</p>

<dt><a name="fastcwd"
>fastcwd</a></dt>

<dd>
<p>Calls Cwd::fastcwd</p>

<dt><a name="backtickcwd"
>backtickcwd</a></dt>

<dd>
<p>Calls the external command cwd.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Note_on_the_format_of_the_urllist_parameter"
>Note on the format of the urllist parameter</a></h2>

<p>urllist parameters are URLs according to RFC 1738. We do a little guessing if your URL is not compliant, but if you have problems with <code>file</code> URLs, please try the correct format. Either:</p>

<pre class="sh_perl">    <a href="file://localhost/whatever/ftp/pub/CPAN/" class="podlinkurl"
>file://localhost/whatever/ftp/pub/CPAN/</a></pre>

<p>or</p>

<pre class="sh_perl">    <a href="file:///home/ftp/pub/CPAN/" class="podlinkurl"
>file:///home/ftp/pub/CPAN/</a></pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_urllist_parameter_has_CD-ROM_support"
>The urllist parameter has CD-ROM support</a></h2>

<p>The <code>urllist</code> parameter of the configuration table contains a list of URLs used for downloading. If the list contains any <code>file</code> URLs, CPAN always tries there first. This feature is disabled for index files. So the recommendation for the owner of a CD-ROM with CPAN contents is: include your local, possibly outdated CD-ROM as a <code>file</code> URL at the end of urllist, e.g.</p>

<pre class="sh_perl">  o conf urllist push <a href="file://localhost/CDROM/CPAN" class="podlinkurl"
>file://localhost/CDROM/CPAN</a></pre>

<p>CPAN.pm will then fetch the index files from one of the CPAN sites that come at the beginning of urllist. It will later check for each module to see whether there is a local copy of the most recent version.</p>

<p>Another peculiarity of urllist is that the site that we could successfully fetch the last file from automatically gets a preference token and is tried as the first site for the next request. So if you add a new site at runtime it may happen that the previously preferred site will be tried another time. This means that if you want to disallow a site for the next transfer, it must be explicitly removed from urllist.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Maintaining_the_urllist_parameter"
>Maintaining the urllist parameter</a></h2>

<p>If you have YAML.pm (or some other YAML module configured in <code>yaml_module</code>) installed, CPAN.pm collects a few statistical data about recent downloads. You can view the statistics with the <code>hosts</code> command or inspect them directly by looking into the <code>FTPstats.yml</code> file in your <code>cpan_home</code> directory.</p>

<p>To get some interesting statistics, it is recommended that <code>randomize_urllist</code> be set; this introduces some amount of randomness into the URL selection.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_requires_and_build_requires_dependency_declarations"
>The <code>requires</code> and <code>build_requires</code> dependency declarations</a></h2>

<p>Since CPAN.pm version 1.88_51 modules declared as <code>build_requires</code> by a distribution are treated differently depending on the config variable <code>build_requires_install_policy</code>. By setting <code>build_requires_install_policy</code> to <code>no</code>, such a module is not installed. It is only built and tested, and then kept in the list of tested but uninstalled modules. As such, it is available during the build of the dependent module by integrating the path to the <code>blib/arch</code> and <code>blib/lib</code> directories in the environment variable PERL5LIB. If <code>build_requires_install_policy</code> is set ti <code>yes</code>, then both modules declared as <code>requires</code> and those declared as <code>build_requires</code> are treated alike. By setting to <code>ask/yes</code> or <code>ask/no</code>, CPAN.pm asks the user and sets the default accordingly.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Configuration_for_individual_distributions_(Distroprefs)"
>Configuration for individual distributions (<i>Distroprefs</i>)</a></h2>

<p>(<b>Note:</b> This feature has been introduced in CPAN.pm 1.8854 and is still considered beta quality)</p>

<p>Distributions on CPAN usually behave according to what we call the CPAN mantra. Or since the advent of Module::Build we should talk about two mantras:</p>

<pre class="sh_perl">    perl Makefile.PL     perl Build.PL
    make                 ./Build
    make test            ./Build test
    make install         ./Build install</pre>

<p>But some modules cannot be built with this mantra. They try to get some extra data from the user via the environment, extra arguments, or interactively--thus disturbing the installation of large bundles like Phalanx100 or modules with many dependencies like Plagger.</p>

<p>The distroprefs system of <code>CPAN.pm</code> addresses this problem by allowing the user to specify extra informations and recipes in YAML files to either</p>

<ul>
<li>pass additional arguments to one of the four commands,</li>

<li>set environment variables</li>

<li>instantiate an Expect object that reads from the console, waits for some regular expressions and enters some answers</li>

<li>temporarily override assorted <code>CPAN.pm</code> configuration variables</li>

<li>specify dependencies the original maintainer forgot</li>

<li>disable the installation of an object altogether</li>
</ul>

<p>See the YAML and Data::Dumper files that come with the <code>CPAN.pm</code> distribution in the <code>distroprefs/</code> directory for examples.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Filenames"
>Filenames</a></h2>

<p>The YAML files themselves must have the <code>.yml</code> extension; all other files are ignored (for two exceptions see <i>Fallback Data::Dumper and Storable</i> below). The containing directory can be specified in <code>CPAN.pm</code> in the <code>prefs_dir</code> config variable. Try <code>o conf init prefs_dir</code> in the CPAN shell to set and activate the distroprefs system.</p>

<p>Every YAML file may contain arbitrary documents according to the YAML specification, and every document is treated as an entity that can specify the treatment of a single distribution.</p>

<p>Filenames can be picked arbitrarily; <code>CPAN.pm</code> always reads all files (in alphabetical order) and takes the key <code>match</code> (see below in <i>Language Specs</i>) as a hashref containing match criteria that determine if the current distribution matches the YAML document or not.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Fallback_Data::Dumper_and_Storable"
>Fallback Data::Dumper and Storable</a></h2>

<p>If neither your configured <code>yaml_module</code> nor YAML.pm is installed, CPAN.pm falls back to using Data::Dumper and Storable and looks for files with the extensions <code>.dd</code> or <code>.st</code> in the <code>prefs_dir</code> directory. These files are expected to contain one or more hashrefs. For Data::Dumper generated files, this is expected to be done with by defining <code>$VAR1</code>, <code>$VAR2</code>, etc. The YAML shell would produce these with the command</p>

<pre class="sh_perl">    ysh &#60; somefile.yml &#62; somefile.dd</pre>

<p>For Storable files the rule is that they must be constructed such that <code>Storable::retrieve(file)</code> returns an array reference and the array elements represent one distropref object each. The conversion from YAML would look like so:</p>

<pre class="sh_perl">    perl -MYAML=LoadFile -MStorable=nstore -e &#39;
        @y=LoadFile(shift);
        nstore(\@y, shift)&#39; somefile.yml somefile.st</pre>

<p>In bootstrapping situations it is usually sufficient to translate only a few YAML files to Data::Dumper for crucial modules like <code>YAML::Syck</code>, <code>YAML.pm</code> and <code>Expect.pm</code>. If you prefer Storable over Data::Dumper, remember to pull out a Storable version that writes an older format than all the other Storable versions that will need to read them.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Blueprint"
>Blueprint</a></h2>

<p>The following example contains all supported keywords and structures with the exception of <code>eexpect</code> which can be used instead of <code>expect</code>.</p>

<pre class="sh_perl">  ---
  comment: &#34;Demo&#34;
  match:
    module: &#34;Dancing::Queen&#34;
    distribution: &#34;^CHACHACHA/Dancing-&#34;
    not_distribution: &#34;\.zip$&#34;
    perl: &#34;/usr/local/cariba-perl/bin/perl&#34;
    perlconfig:
      archname: &#34;freebsd&#34;
      not_cc: &#34;gcc&#34;
    env:
      DANCING_FLOOR: &#34;Shubiduh&#34;
  disabled: 1
  cpanconfig:
    make: gmake
  pl:
    args:
      - &#34;--somearg=specialcase&#34;

    env: {}

    expect:
      - &#34;Which is your favorite fruit&#34;
      - &#34;apple\n&#34;

  make:
    args:
      - all
      - extra-all

    env: {}

    expect: []

    commandline: &#34;echo SKIPPING make&#34;

  test:
    args: []

    env: {}

    expect: []

  install:
    args: []

    env:
      WANT_TO_INSTALL: YES

    expect:
      - &#34;Do you really want to install&#34;
      - &#34;y\n&#34;

  patches:
    - &#34;ABCDE/Fedcba-3.14-ABCDE-01.patch&#34;

  depends:
    configure_requires:
      LWP: 5.8
    build_requires:
      Test::Exception: 0.25
    requires:
      Spiffy: 0.30</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Language_Specs"
>Language Specs</a></h2>

<p>Every YAML document represents a single hash reference. The valid keys in this hash are as follows:</p>

<dl>
<dt><a name='comment'></a><a name="comment_[scalar]"
>comment [scalar]</a></dt>

<dd>
<p>A comment</p>

<dt><a name='cpanconfig'></a><a name="cpanconfig_[hash]"
>cpanconfig [hash]</a></dt>

<dd>
<p>Temporarily override assorted <code>CPAN.pm</code> configuration variables.</p>

<p>Supported are: <code>build_requires_install_policy</code>, <code>check_sigs</code>, <code>make</code>, <code>make_install_make_command</code>, <code>prefer_installer</code>, <code>test_report</code>. Please report as a bug when you need another one supported.</p>

<dt><a name='depends'></a><a name="depends_[hash]_***_EXPERIMENTAL_FEATURE_***"
>depends [hash] *** EXPERIMENTAL FEATURE ***</a></dt>

<dd>
<p>All three types, namely <code>configure_requires</code>, <code>build_requires</code>, and <code>requires</code> are supported in the way specified in the META.yml specification. The current implementation <i>merges</i> the specified dependencies with those declared by the package maintainer. In a future implementation this may be changed to override the original declaration.</p>

<dt><a name='disabled'></a><a name="disabled_[boolean]"
>disabled [boolean]</a></dt>

<dd>
<p>Specifies that this distribution shall not be processed at all.</p>

<dt><a name='features'></a><a name="features_[array]_***_EXPERIMENTAL_FEATURE_***"
>features [array] *** EXPERIMENTAL FEATURE ***</a></dt>

<dd>
<p>Experimental implementation to deal with optional_features from META.yml. Still needs coordination with installer software and currently works only for META.yml declaring <code>dynamic_config=0</code>. Use with caution.</p>

<dt><a name='goto'></a><a name="goto_[string]"
>goto [string]</a></dt>

<dd>
<p>The canonical name of a delegate distribution to install instead. Useful when a new version, although it tests OK itself, breaks something else or a developer release or a fork is already uploaded that is better than the last released version.</p>

<dt><a name='install'></a><a name="install_[hash]"
>install [hash]</a></dt>

<dd>
<p>Processing instructions for the <code>make install</code> or <code>./Build install</code> phase of the CPAN mantra. See below under <i>Processing Instructions</i>.</p>

<dt><a name='make'></a><a name="make_[hash]"
>make [hash]</a></dt>

<dd>
<p>Processing instructions for the <code>make</code> or <code>./Build</code> phase of the CPAN mantra. See below under <i>Processing Instructions</i>.</p>

<dt><a name='match'></a><a name="match_[hash]"
>match [hash]</a></dt>

<dd>
<p>A hashref with one or more of the keys <code>distribution</code>, <code>modules</code>, <code>perl</code>, <code>perlconfig</code>, and <code>env</code> that specify whether a document is targeted at a specific CPAN distribution or installation. Keys prefixed with <code>not_</code> negates the corresponding match.</p>

<p>The corresponding values are interpreted as regular expressions. The <code>distribution</code> related one will be matched against the canonical distribution name, e.g. &#34;AUTHOR/Foo-Bar-3.14.tar.gz&#34;.</p>

<p>The <code>module</code> related one will be matched against <i>all</i> modules contained in the distribution until one module matches.</p>

<p>The <code>perl</code> related one will be matched against <code>$^X</code> (but with the absolute path).</p>

<p>The value associated with <code>perlconfig</code> is itself a hashref that is matched against corresponding values in the <code>%Config::Config</code> hash living in the <code>Config.pm</code> module. Keys prefixed with <code>not_</code> negates the corresponding match.</p>

<p>The value associated with <code>env</code> is itself a hashref that is matched against corresponding values in the <code>%ENV</code> hash. Keys prefixed with <code>not_</code> negates the corresponding match.</p>

<p>If more than one restriction of <code>module</code>, <code>distribution</code>, etc. is specified, the results of the separately computed match values must all match. If so, the hashref represented by the YAML document is returned as the preference structure for the current distribution.</p>

<dt><a name='patches'></a><a name="patches_[array]"
>patches [array]</a></dt>

<dd>
<p>An array of patches on CPAN or on the local disk to be applied in order via an external patch program. If the value for the <code>-p</code> parameter is <code>0</code> or <code>1</code> is determined by reading the patch beforehand. The path to each patch is either an absolute path on the local filesystem or relative to a patch directory specified in the <code>patches_dir</code> configuration variable or in the format of a canonical distro name. For examples please consult the distroprefs/ directory in the CPAN.pm distribution (these examples are not installed by default).</p>

<p>Note: if the <code>applypatch</code> program is installed and <code>CPAN::Config</code> knows about it <b>and</b> a patch is written by the <code>makepatch</code> program, then <code>CPAN.pm</code> lets <code>applypatch</code> apply the patch. Both <code>makepatch</code> and <code>applypatch</code> are available from CPAN in the <code>JV/makepatch-*</code> distribution.</p>

<dt><a name='pl'></a><a name="pl_[hash]"
>pl [hash]</a></dt>

<dd>
<p>Processing instructions for the <code>perl Makefile.PL</code> or <code>perl Build.PL</code> phase of the CPAN mantra. See below under <i>Processing Instructions</i>.</p>

<dt><a name='test'></a><a name="test_[hash]"
>test [hash]</a></dt>

<dd>
<p>Processing instructions for the <code>make test</code> or <code>./Build test</code> phase of the CPAN mantra. See below under <i>Processing Instructions</i>.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Processing_Instructions"
>Processing Instructions</a></h2>

<dl>
<dt><a name='args'></a><a name="args_[array]"
>args [array]</a></dt>

<dd>
<p>Arguments to be added to the command line</p>

<dt><a name="commandline"
>commandline</a></dt>

<dd>
<p>A full commandline to run via <code>system()</code>. During execution, the environment variable PERL is set to $^X (but with an absolute path). If <code>commandline</code> is specified, <code>args</code> is not used.</p>

<dt><a name='eexpect'></a><a name="eexpect_[hash]"
>eexpect [hash]</a></dt>

<dd>
<p>Extended <code>expect</code>. This is a hash reference with four allowed keys, <code>mode</code>, <code>timeout</code>, <code>reuse</code>, and <code>talk</code>.</p>

<p>You must install the <code>Expect</code> module to use <code>eexpect</code>. CPAN.pm does not install it for you.</p>

<p><code>mode</code> may have the values <code>deterministic</code> for the case where all questions come in the order written down and <code>anyorder</code> for the case where the questions may come in any order. The default mode is <code>deterministic</code>.</p>

<p><code>timeout</code> denotes a timeout in seconds. Floating-point timeouts are OK. With <code>mode=deterministic</code>, the timeout denotes the timeout per question; with <code>mode=anyorder</code> it denotes the timeout per byte received from the stream or questions.</p>

<p><code>talk</code> is a reference to an array that contains alternating questions and answers. Questions are regular expressions and answers are literal strings. The Expect module watches the stream from the execution of the external program (<code>perl Makefile.PL</code>, <code>perl Build.PL</code>, <code>make</code>, etc.).</p>

<p>For <code>mode=deterministic</code>, the CPAN.pm injects the corresponding answer as soon as the stream matches the regular expression.</p>

<p>For <code>mode=anyorder</code> CPAN.pm answers a question as soon as the timeout is reached for the next byte in the input stream. In this mode you can use the <code>reuse</code> parameter to decide what will happen with a question-answer pair after it has been used. In the default case (reuse=0) it is removed from the array, avoiding being used again accidentally. If you want to answer the question <code>Do you really want to do that</code> several times, then it must be included in the array at least as often as you want this answer to be given. Setting the parameter <code>reuse</code> to 1 makes this repetition unnecessary.</p>

<dt><a name='env'></a><a name="env_[hash]"
>env [hash]</a></dt>

<dd>
<p>Environment variables to be set during the command</p>

<dt><a name='expect'></a><a name="expect_[array]"
>expect [array]</a></dt>

<dd>
<p>You must install the <code>Expect</code> module to use <code>expect</code>. CPAN.pm does not install it for you.</p>

<p><code>expect: &#60;array&#62;</code> is a short notation for this <code>eexpect</code>:</p>

<pre class="sh_perl">        eexpect:
                mode: deterministic
                timeout: 15
                talk: &#60;array&#62;</pre>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Schema_verification_with_Kwalify"
>Schema verification with <code>Kwalify</code></a></h2>

<p>If you have the <code>Kwalify</code> module installed (which is part of the Bundle::CPANxxl), then all your distroprefs files are checked for syntactic correctness.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Example_Distroprefs_Files"
>Example Distroprefs Files</a></h2>

<p><code>CPAN.pm</code> comes with a collection of example YAML files. Note that these are really just examples and should not be used without care because they cannot fit everybody&#39;s purpose. After all, the authors of the packages that ask questions had a need to ask, so you should watch their questions and adjust the examples to your environment and your needs. You have been warned:-)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PROGRAMMER&#39;S_INTERFACE"
>PROGRAMMER&#39;S INTERFACE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you do not enter the shell, shell commands are available both as methods (<code>CPAN::Shell-&#62;install(...)</code>) and as functions in the calling package (<code>install(...)</code>). Before calling low-level commands, it makes sense to initialize components of CPAN you need, e.g.:</p>

<pre class="sh_perl">  CPAN::HandleConfig-&#62;load;
  CPAN::Shell::setup_output;
  CPAN::Index-&#62;reload;</pre>

<p>High-level commands do such initializations automatically.</p>

<p>There&#39;s currently only one class that has a stable interface - CPAN::Shell. All commands that are available in the CPAN shell are methods of the class CPAN::Shell. The arguments on the commandline are passed as arguments to the method.</p>

<p>So if you take for example the shell command</p>

<pre class="sh_perl">  notest install A B C</pre>

<p>the actually executed command is</p>

<pre class="sh_perl">  CPAN::Shell-&#62;notest(&#34;install&#34;,&#34;A&#34;,&#34;B&#34;,&#34;C&#34;);</pre>

<p>Each of the commands that produce listings of modules (<code>r</code>, <code>autobundle</code>, <code>u</code>) also return a list of the IDs of all modules within the list.</p>

<dl>
<dt><a name='expand'></a><a name="expand($type,@things)"
>expand($type,@things)</a></dt>

<dd>
<p>The IDs of all objects available within a program are strings that can be expanded to the corresponding real objects with the <code>CPAN::Shell-&#62;expand(&#34;Module&#34;,@things)</code> method. Expand returns a list of CPAN::Module objects according to the <code>@things</code> arguments given. In scalar context, it returns only the first element of the list.</p>

<dt><a name='expandany'></a><a name="expandany(@things)"
>expandany(@things)</a></dt>

<dd>
<p>Like expand, but returns objects of the appropriate type, i.e. CPAN::Bundle objects for bundles, CPAN::Module objects for modules, and CPAN::Distribution objects for distributions. Note: it does not expand to CPAN::Author objects.</p>

<dt><a name='Programming'></a><a name="Programming_Examples"
>Programming Examples</a></dt>

<dd>
<p>This enables the programmer to do operations that combine functionalities that are available in the shell.</p>

<pre class="sh_perl">    # install everything that is outdated on my disk:
    perl -MCPAN -e &#39;CPAN::Shell-&#62;install(CPAN::Shell-&#62;r)&#39;

    # install my favorite programs if necessary:
    for $mod (qw(Net::FTP Digest::SHA Data::Dumper)) {
        CPAN::Shell-&#62;install($mod);
    }

    # list all modules on my disk that have no VERSION number
    for $mod (CPAN::Shell-&#62;expand(&#34;Module&#34;,&#34;/./&#34;)) {
        next unless $mod-&#62;inst_file;
        # MakeMaker convention for undefined $VERSION:
        next unless $mod-&#62;inst_version eq &#34;undef&#34;;
        print &#34;No VERSION in &#34;, $mod-&#62;id, &#34;\n&#34;;
    }

    # find out which distribution on CPAN contains a module:
    print CPAN::Shell-&#62;expand(&#34;Module&#34;,&#34;Apache::Constants&#34;)-&#62;cpan_file</pre>

<p>Or if you want to schedule a <i>cron</i> job to watch CPAN, you could list all modules that need updating. First a quick and dirty way:</p>

<pre class="sh_perl">    perl -e &#39;use CPAN; CPAN::Shell-&#62;r;&#39;</pre>

<p>If you don&#39;t want any output should all modules be up to date, parse the output of above command for the regular expression <code>/modules are up to date/</code> and decide to mail the output only if it doesn&#39;t match.</p>

<p>If you prefer to do it more in a programmerish style in one single process, something like this may better suit you:</p>

<pre class="sh_perl">  # list all modules on my disk that have newer versions on CPAN
  for $mod (CPAN::Shell-&#62;expand(&#34;Module&#34;,&#34;/./&#34;)) {
    next unless $mod-&#62;inst_file;
    next if $mod-&#62;uptodate;
    printf &#34;Module %s is installed as %s, could be updated to %s from CPAN\n&#34;,
        $mod-&#62;id, $mod-&#62;inst_version, $mod-&#62;cpan_version;
  }</pre>

<p>If that gives too much output every day, you may want to watch only for three modules. You can write</p>

<pre class="sh_perl">  for $mod (CPAN::Shell-&#62;expand(&#34;Module&#34;,&#34;/Apache|LWP|CGI/&#34;)) {</pre>

<p>as the first line instead. Or you can combine some of the above tricks:</p>

<pre class="sh_perl">  # watch only for a new mod_perl module
  $mod = CPAN::Shell-&#62;expand(&#34;Module&#34;,&#34;mod_perl&#34;);
  exit if $mod-&#62;uptodate;
  # new mod_perl arrived, let me know all update recommendations
  CPAN::Shell-&#62;r;</pre>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Methods_in_the_other_Classes"
>Methods in the other Classes</a></h2>

<dl>
<dt><a name='CPAN'></a><a name="CPAN::Author::as_glimpse()"
>CPAN::Author::as_glimpse()</a></dt>

<dd>
<p>Returns a one-line description of the author</p>

<dt><a name='CPAN'></a><a name="CPAN::Author::as_string()"
>CPAN::Author::as_string()</a></dt>

<dd>
<p>Returns a multi-line description of the author</p>

<dt><a name='CPAN'></a><a name="CPAN::Author::email()"
>CPAN::Author::email()</a></dt>

<dd>
<p>Returns the author&#39;s email address</p>

<dt><a name='CPAN'></a><a name="CPAN::Author::fullname()"
>CPAN::Author::fullname()</a></dt>

<dd>
<p>Returns the author&#39;s name</p>

<dt><a name='CPAN'></a><a name="CPAN::Author::name()"
>CPAN::Author::name()</a></dt>

<dd>
<p>An alias for fullname</p>

<dt><a name='CPAN'></a><a name="CPAN::Bundle::as_glimpse()"
>CPAN::Bundle::as_glimpse()</a></dt>

<dd>
<p>Returns a one-line description of the bundle</p>

<dt><a name='CPAN'></a><a name="CPAN::Bundle::as_string()"
>CPAN::Bundle::as_string()</a></dt>

<dd>
<p>Returns a multi-line description of the bundle</p>

<dt><a name='CPAN'></a><a name="CPAN::Bundle::clean()"
>CPAN::Bundle::clean()</a></dt>

<dd>
<p>Recursively runs the <code>clean</code> method on all items contained in the bundle.</p>

<dt><a name='CPAN'></a><a name="CPAN::Bundle::contains()"
>CPAN::Bundle::contains()</a></dt>

<dd>
<p>Returns a list of objects&#39; IDs contained in a bundle. The associated objects may be bundles, modules or distributions.</p>

<dt><a name='CPAN'></a><a name="CPAN::Bundle::force($method,@args)"
>CPAN::Bundle::force($method,@args)</a></dt>

<dd>
<p>Forces CPAN to perform a task that it normally would have refused to do. Force takes as arguments a method name to be called and any number of additional arguments that should be passed to the called method. The internals of the object get the needed changes so that CPAN.pm does not refuse to take the action. The <code>force</code> is passed recursively to all contained objects. See also the section above on the <code>force</code> and the <code>fforce</code> pragma.</p>

<dt><a name='CPAN'></a><a name="CPAN::Bundle::get()"
>CPAN::Bundle::get()</a></dt>

<dd>
<p>Recursively runs the <code>get</code> method on all items contained in the bundle</p>

<dt><a name='CPAN'></a><a name="CPAN::Bundle::inst_file()"
>CPAN::Bundle::inst_file()</a></dt>

<dd>
<p>Returns the highest installed version of the bundle in either @INC or <code>$CPAN::Config-&#62;{cpan_home}</code>. Note that this is different from CPAN::Module::inst_file.</p>

<dt><a name='CPAN'></a><a name="CPAN::Bundle::inst_version()"
>CPAN::Bundle::inst_version()</a></dt>

<dd>
<p>Like CPAN::Bundle::inst_file, but returns the $VERSION</p>

<dt><a name='CPAN'></a><a name="CPAN::Bundle::uptodate()"
>CPAN::Bundle::uptodate()</a></dt>

<dd>
<p>Returns 1 if the bundle itself and all its members are up-to-date.</p>

<dt><a name='CPAN'></a><a name="CPAN::Bundle::install()"
>CPAN::Bundle::install()</a></dt>

<dd>
<p>Recursively runs the <code>install</code> method on all items contained in the bundle</p>

<dt><a name='CPAN'></a><a name="CPAN::Bundle::make()"
>CPAN::Bundle::make()</a></dt>

<dd>
<p>Recursively runs the <code>make</code> method on all items contained in the bundle</p>

<dt><a name='CPAN'></a><a name="CPAN::Bundle::readme()"
>CPAN::Bundle::readme()</a></dt>

<dd>
<p>Recursively runs the <code>readme</code> method on all items contained in the bundle</p>

<dt><a name='CPAN'></a><a name="CPAN::Bundle::test()"
>CPAN::Bundle::test()</a></dt>

<dd>
<p>Recursively runs the <code>test</code> method on all items contained in the bundle</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::as_glimpse()"
>CPAN::Distribution::as_glimpse()</a></dt>

<dd>
<p>Returns a one-line description of the distribution</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::as_string()"
>CPAN::Distribution::as_string()</a></dt>

<dd>
<p>Returns a multi-line description of the distribution</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::author"
>CPAN::Distribution::author</a></dt>

<dd>
<p>Returns the CPAN::Author object of the maintainer who uploaded this distribution</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::pretty_id()"
>CPAN::Distribution::pretty_id()</a></dt>

<dd>
<p>Returns a string of the form &#34;AUTHORID/TARBALL&#34;, where AUTHORID is the author&#39;s PAUSE ID and TARBALL is the distribution filename.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::base_id()"
>CPAN::Distribution::base_id()</a></dt>

<dd>
<p>Returns the distribution filename without any archive suffix. E.g &#34;Foo-Bar-0.01&#34;</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::clean()"
>CPAN::Distribution::clean()</a></dt>

<dd>
<p>Changes to the directory where the distribution has been unpacked and runs <code>make clean</code> there.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::containsmods()"
>CPAN::Distribution::containsmods()</a></dt>

<dd>
<p>Returns a list of IDs of modules contained in a distribution file. Works only for distributions listed in the 02packages.details.txt.gz file. This typically means that just most recent version of a distribution is covered.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::cvs_import()"
>CPAN::Distribution::cvs_import()</a></dt>

<dd>
<p>Changes to the directory where the distribution has been unpacked and runs something like</p>

<pre class="sh_perl">    cvs -d $cvs_root import -m $cvs_log $cvs_dir $userid v$version</pre>

<p>there.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::dir()"
>CPAN::Distribution::dir()</a></dt>

<dd>
<p>Returns the directory into which this distribution has been unpacked.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::force($method,@args)"
>CPAN::Distribution::force($method,@args)</a></dt>

<dd>
<p>Forces CPAN to perform a task that it normally would have refused to do. Force takes as arguments a method name to be called and any number of additional arguments that should be passed to the called method. The internals of the object get the needed changes so that CPAN.pm does not refuse to take the action. See also the section above on the <code>force</code> and the <code>fforce</code> pragma.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::get()"
>CPAN::Distribution::get()</a></dt>

<dd>
<p>Downloads the distribution from CPAN and unpacks it. Does nothing if the distribution has already been downloaded and unpacked within the current session.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::install()"
>CPAN::Distribution::install()</a></dt>

<dd>
<p>Changes to the directory where the distribution has been unpacked and runs the external command <code>make install</code> there. If <code>make</code> has not yet been run, it will be run first. A <code>make test</code> is issued in any case and if this fails, the install is cancelled. The cancellation can be avoided by letting <code>force</code> run the <code>install</code> for you.</p>

<p>This install method only has the power to install the distribution if there are no dependencies in the way. To install an object along with all its dependencies, use CPAN::Shell-&#62;install.</p>

<p>Note that install() gives no meaningful return value. See uptodate().</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::install_tested()"
>CPAN::Distribution::install_tested()</a></dt>

<dd>
<p>Install all distributions that have tested successfully but not yet installed. See also <code>is_tested</code>.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::isa_perl()"
>CPAN::Distribution::isa_perl()</a></dt>

<dd>
<p>Returns 1 if this distribution file seems to be a perl distribution. Normally this is derived from the file name only, but the index from CPAN can contain a hint to achieve a return value of true for other filenames too.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::look()"
>CPAN::Distribution::look()</a></dt>

<dd>
<p>Changes to the directory where the distribution has been unpacked and opens a subshell there. Exiting the subshell returns.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::make()"
>CPAN::Distribution::make()</a></dt>

<dd>
<p>First runs the <code>get</code> method to make sure the distribution is downloaded and unpacked. Changes to the directory where the distribution has been unpacked and runs the external commands <code>perl Makefile.PL</code> or <code>perl Build.PL</code> and <code>make</code> there.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::perldoc()"
>CPAN::Distribution::perldoc()</a></dt>

<dd>
<p>Downloads the pod documentation of the file associated with a distribution (in HTML format) and runs it through the external command <i>lynx</i> specified in <code>$CPAN::Config-&#62;{lynx}</code>. If <i>lynx</i> isn&#39;t available, it converts it to plain text with the external command <i>html2text</i> and runs it through the pager specified in <code>$CPAN::Config-&#62;{pager}</code>.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::prefs()"
>CPAN::Distribution::prefs()</a></dt>

<dd>
<p>Returns the hash reference from the first matching YAML file that the user has deposited in the <code>prefs_dir/</code> directory. The first succeeding match wins. The files in the <code>prefs_dir/</code> are processed alphabetically, and the canonical distro name (e.g. AUTHOR/Foo-Bar-3.14.tar.gz) is matched against the regular expressions stored in the $root-&#62;{match}{distribution} attribute value. Additionally all module names contained in a distribution are matched against the regular expressions in the $root-&#62;{match}{module} attribute value. The two match values are ANDed together. Each of the two attributes are optional.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::prereq_pm()"
>CPAN::Distribution::prereq_pm()</a></dt>

<dd>
<p>Returns the hash reference that has been announced by a distribution as the <code>requires</code> and <code>build_requires</code> elements. These can be declared either by the <code>META.yml</code> (if authoritative) or can be deposited after the run of <code>Build.PL</code> in the file <code>./_build/prereqs</code> or after the run of <code>Makfile.PL</code> written as the <code>PREREQ_PM</code> hash in a comment in the produced <code>Makefile</code>. <i>Note</i>: this method only works after an attempt has been made to <code>make</code> the distribution. Returns undef otherwise.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::readme()"
>CPAN::Distribution::readme()</a></dt>

<dd>
<p>Downloads the README file associated with a distribution and runs it through the pager specified in <code>$CPAN::Config-&#62;{pager}</code>.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::reports()"
>CPAN::Distribution::reports()</a></dt>

<dd>
<p>Downloads report data for this distribution from www.cpantesters.org and displays a subset of them.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::read_yaml()"
>CPAN::Distribution::read_yaml()</a></dt>

<dd>
<p>Returns the content of the META.yml of this distro as a hashref. Note: works only after an attempt has been made to <code>make</code> the distribution. Returns undef otherwise. Also returns undef if the content of META.yml is not authoritative. (The rules about what exactly makes the content authoritative are still in flux.)</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::test()"
>CPAN::Distribution::test()</a></dt>

<dd>
<p>Changes to the directory where the distribution has been unpacked and runs <code>make test</code> there.</p>

<dt><a name='CPAN'></a><a name="CPAN::Distribution::uptodate()"
>CPAN::Distribution::uptodate()</a></dt>

<dd>
<p>Returns 1 if all the modules contained in the distribution are up-to-date. Relies on containsmods.</p>

<dt><a name='CPAN'></a><a name="CPAN::Index::force_reload()"
>CPAN::Index::force_reload()</a></dt>

<dd>
<p>Forces a reload of all indices.</p>

<dt><a name='CPAN'></a><a name="CPAN::Index::reload()"
>CPAN::Index::reload()</a></dt>

<dd>
<p>Reloads all indices if they have not been read for more than <code>$CPAN::Config-&#62;{index_expire}</code> days.</p>

<dt><a name='CPAN'></a><a name="CPAN::InfoObj::dump()"
>CPAN::InfoObj::dump()</a></dt>

<dd>
<p>CPAN::Author, CPAN::Bundle, CPAN::Module, and CPAN::Distribution inherit this method. It prints the data structure associated with an object. Useful for debugging. Note: the data structure is considered internal and thus subject to change without notice.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::as_glimpse()"
>CPAN::Module::as_glimpse()</a></dt>

<dd>
<p>Returns a one-line description of the module in four columns: The first column contains the word <code>Module</code>, the second column consists of one character: an equals sign if this module is already installed and up-to-date, a less-than sign if this module is installed but can be upgraded, and a space if the module is not installed. The third column is the name of the module and the fourth column gives maintainer or distribution information.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::as_string()"
>CPAN::Module::as_string()</a></dt>

<dd>
<p>Returns a multi-line description of the module</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::clean()"
>CPAN::Module::clean()</a></dt>

<dd>
<p>Runs a clean on the distribution associated with this module.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::cpan_file()"
>CPAN::Module::cpan_file()</a></dt>

<dd>
<p>Returns the filename on CPAN that is associated with the module.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::cpan_version()"
>CPAN::Module::cpan_version()</a></dt>

<dd>
<p>Returns the latest version of this module available on CPAN.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::cvs_import()"
>CPAN::Module::cvs_import()</a></dt>

<dd>
<p>Runs a cvs_import on the distribution associated with this module.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::description()"
>CPAN::Module::description()</a></dt>

<dd>
<p>Returns a 44 character description of this module. Only available for modules listed in The Module List (CPAN/modules/00modlist.long.html or 00modlist.long.txt.gz)</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::distribution()"
>CPAN::Module::distribution()</a></dt>

<dd>
<p>Returns the CPAN::Distribution object that contains the current version of this module.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::dslip_status()"
>CPAN::Module::dslip_status()</a></dt>

<dd>
<p>Returns a hash reference. The keys of the hash are the letters <code>D</code>, <code>S</code>, <code>L</code>, <code>I</code>, and &#60;P&#62;, for development status, support level, language, interface and public licence respectively. The data for the DSLIP status are collected by pause.perl.org when authors register their namespaces. The values of the 5 hash elements are one-character words whose meaning is described in the table below. There are also 5 hash elements <code>DV</code>, <code>SV</code>, <code>LV</code>, <code>IV</code>, and &#60;PV&#62; that carry a more verbose value of the 5 status variables.</p>

<p>Where the &#39;DSLIP&#39; characters have the following meanings:</p>

<pre class="sh_perl">  D - Development Stage  (Note: *NO IMPLIED TIMESCALES*):
    i   - Idea, listed to gain consensus or as a placeholder
    c   - under construction but pre-alpha (not yet released)
    a/b - Alpha/Beta testing
    R   - Released
    M   - Mature (no rigorous definition)
    S   - Standard, supplied with Perl 5

  S - Support Level:
    m   - Mailing-list
    d   - Developer
    u   - Usenet newsgroup comp.lang.perl.modules
    n   - None known, try comp.lang.perl.modules
    a   - abandoned; volunteers welcome to take over maintenance

  L - Language Used:
    p   - Perl-only, no compiler needed, should be platform independent
    c   - C and perl, a C compiler will be needed
    h   - Hybrid, written in perl with optional C code, no compiler needed
    +   - C++ and perl, a C++ compiler will be needed
    o   - perl and another language other than C or C++

  I - Interface Style
    f   - plain Functions, no references used
    h   - hybrid, object and function interfaces available
    n   - no interface at all (huh?)
    r   - some use of unblessed References or ties
    O   - Object oriented using blessed references and/or inheritance

  P - Public License
    p   - Standard-Perl: user may choose between GPL and Artistic
    g   - GPL: GNU General Public License
    l   - LGPL: &#34;GNU Lesser General Public License&#34; (previously known as
          &#34;GNU Library General Public License&#34;)
    b   - BSD: The BSD License
    a   - Artistic license alone
    2   - Artistic license 2.0 or later
    o   - open source: approved by www.opensource.org
    d   - allows distribution without restrictions
    r   - restricted distribution
    n   - no license at all</pre>

<dt><a name='CPAN'></a><a name="CPAN::Module::force($method,@args)"
>CPAN::Module::force($method,@args)</a></dt>

<dd>
<p>Forces CPAN to perform a task it would normally refuse to do. Force takes as arguments a method name to be invoked and any number of additional arguments to pass that method. The internals of the object get the needed changes so that CPAN.pm does not refuse to take the action. See also the section above on the <code>force</code> and the <code>fforce</code> pragma.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::get()"
>CPAN::Module::get()</a></dt>

<dd>
<p>Runs a get on the distribution associated with this module.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::inst_file()"
>CPAN::Module::inst_file()</a></dt>

<dd>
<p>Returns the filename of the module found in @INC. The first file found is reported, just as perl itself stops searching @INC once it finds a module.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::available_file()"
>CPAN::Module::available_file()</a></dt>

<dd>
<p>Returns the filename of the module found in PERL5LIB or @INC. The first file found is reported. The advantage of this method over <code>inst_file</code> is that modules that have been tested but not yet installed are included because PERL5LIB keeps track of tested modules.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::inst_version()"
>CPAN::Module::inst_version()</a></dt>

<dd>
<p>Returns the version number of the installed module in readable format.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::available_version()"
>CPAN::Module::available_version()</a></dt>

<dd>
<p>Returns the version number of the available module in readable format.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::install()"
>CPAN::Module::install()</a></dt>

<dd>
<p>Runs an <code>install</code> on the distribution associated with this module.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::look()"
>CPAN::Module::look()</a></dt>

<dd>
<p>Changes to the directory where the distribution associated with this module has been unpacked and opens a subshell there. Exiting the subshell returns.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::make()"
>CPAN::Module::make()</a></dt>

<dd>
<p>Runs a <code>make</code> on the distribution associated with this module.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::manpage_headline()"
>CPAN::Module::manpage_headline()</a></dt>

<dd>
<p>If module is installed, peeks into the module&#39;s manpage, reads the headline, and returns it. Moreover, if the module has been downloaded within this session, does the equivalent on the downloaded module even if it hasn&#39;t been installed yet.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::perldoc()"
>CPAN::Module::perldoc()</a></dt>

<dd>
<p>Runs a <code>perldoc</code> on this module.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::readme()"
>CPAN::Module::readme()</a></dt>

<dd>
<p>Runs a <code>readme</code> on the distribution associated with this module.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::reports()"
>CPAN::Module::reports()</a></dt>

<dd>
<p>Calls the reports() method on the associated distribution object.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::test()"
>CPAN::Module::test()</a></dt>

<dd>
<p>Runs a <code>test</code> on the distribution associated with this module.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::uptodate()"
>CPAN::Module::uptodate()</a></dt>

<dd>
<p>Returns 1 if the module is installed and up-to-date.</p>

<dt><a name='CPAN'></a><a name="CPAN::Module::userid()"
>CPAN::Module::userid()</a></dt>

<dd>
<p>Returns the author&#39;s ID of the module.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Cache_Manager"
>Cache Manager</a></h2>

<p>Currently the cache manager only keeps track of the build directory ($CPAN::Config-&#62;{build_dir}). It is a simple FIFO mechanism that deletes complete directories below <code>build_dir</code> as soon as the size of all directories there gets bigger than $CPAN::Config-&#62;{build_cache} (in MB). The contents of this cache may be used for later re-installations that you intend to do manually, but will never be trusted by CPAN itself. This is due to the fact that the user might use these directories for building modules on different architectures.</p>

<p>There is another directory ($CPAN::Config-&#62;{keep_source_where}) where the original distribution files are kept. This directory is not covered by the cache manager and must be controlled by the user. If you choose to have the same directory as build_dir and as keep_source_where directory, then your sources will be deleted with the same fifo mechanism.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Bundles"
>Bundles</a></h2>

<p>A bundle is just a perl module in the namespace Bundle:: that does not define any functions or methods. It usually only contains documentation.</p>

<p>It starts like a perl module with a package declaration and a $VERSION variable. After that the pod section looks like any other pod with the only difference being that <i>one special pod section</i> exists starting with (verbatim):</p>

<pre class="sh_perl">    =head1 CONTENTS</pre>

<p>In this pod section each line obeys the format</p>

<pre class="sh_perl">        Module_Name [Version_String] [- optional text]</pre>

<p>The only required part is the first field, the name of a module (e.g. Foo::Bar, i.e. <i>not</i> the name of the distribution file). The rest of the line is optional. The comment part is delimited by a dash just as in the man page header.</p>

<p>The distribution of a bundle should follow the same convention as other distributions.</p>

<p>Bundles are treated specially in the CPAN package. If you say &#39;install Bundle::Tkkit&#39; (assuming such a bundle exists), CPAN will install all the modules in the CONTENTS section of the pod. You can install your own Bundles locally by placing a conformant Bundle file somewhere into your @INC path. The autobundle() command which is available in the shell interface does that for you by including all currently installed modules in a snapshot bundle file.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PREREQUISITES"
>PREREQUISITES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The CPAN program is trying to depend on as little as possible so the user can use it in hostile environment. It works better the more goodies the environment provides. For example if you try in the CPAN shell</p>

<pre class="sh_perl">  install Bundle::CPAN</pre>

<p>or</p>

<pre class="sh_perl">  install Bundle::CPANxxl</pre>

<p>you will find the shell more convenient than the bare shell before.</p>

<p>If you have a local mirror of CPAN and can access all files with &#34;file:&#34; URLs, then you only need a perl later than perl5.003 to run this module. Otherwise Net::FTP is strongly recommended. LWP may be required for non-UNIX systems, or if your nearest CPAN site is associated with a URL that is not <code>ftp:</code>.</p>

<p>If you have neither Net::FTP nor LWP, there is a fallback mechanism implemented for an external ftp command or for an external lynx command.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="UTILITIES"
>UTILITIES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Finding_packages_and_VERSION"
>Finding packages and VERSION</a></h2>

<p>This module presumes that all packages on CPAN</p>

<ul>
<li>declare their $VERSION variable in an easy to parse manner. This prerequisite can hardly be relaxed because it consumes far too much memory to load all packages into the running program just to determine the $VERSION variable. Currently all programs that are dealing with version use something like this
<pre class="sh_perl">    perl -MExtUtils::MakeMaker -le \
        &#39;print MM-&#62;parse_version(shift)&#39; filename</pre>

<p>If you are author of a package and wonder if your $VERSION can be parsed, please try the above method.</p>
</li>

<li>come as compressed or gzipped tarfiles or as zip files and contain a <code>Makefile.PL</code> or <code>Build.PL</code> (well, we try to handle a bit more, but with little enthusiasm).</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Debugging"
>Debugging</a></h2>

<p>Debugging this module is more than a bit complex due to interference from the software producing the indices on CPAN, the mirroring process on CPAN, packaging, configuration, synchronicity, and even (gasp!) due to bugs within the CPAN.pm module itself.</p>

<p>For debugging the code of CPAN.pm itself in interactive mode, some debugging aid can be turned on for most packages within CPAN.pm with one of</p>

<dl>
<dt><a name='o'></a><a name="o_debug_package..."
>o debug package...</a></dt>

<dd>
<p>sets debug mode for packages.</p>

<dt><a name='o'></a><a name="o_debug_-package..."
>o debug -package...</a></dt>

<dd>
<p>unsets debug mode for packages.</p>

<dt><a name='o'></a><a name="o_debug_all"
>o debug all</a></dt>

<dd>
<p>turns debugging on for all packages.</p>

<dt><a name='o'></a><a name="o_debug_number"
>o debug number</a></dt>
</dl>

<p>which sets the debugging packages directly. Note that <code>o debug 0</code> turns debugging off.</p>

<p>What seems a successful strategy is the combination of <code>reload cpan</code> and the debugging switches. Add a new debug statement while running in the shell and then issue a <code>reload cpan</code> and see the new debugging messages immediately without losing the current context.</p>

<p><code>o debug</code> without an argument lists the valid package names and the current set of packages in debugging mode. <code>o debug</code> has built-in completion support.</p>

<p>For debugging of CPAN data there is the <code>dump</code> command which takes the same arguments as make/test/install and outputs each object&#39;s Data::Dumper dump. If an argument looks like a perl variable and contains one of <code>$</code>, <code>@</code> or <code>%</code>, it is eval()ed and fed to Data::Dumper directly.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Floppy,_Zip,_Offline_Mode"
>Floppy, Zip, Offline Mode</a></h2>

<p>CPAN.pm works nicely without network access, too. If you maintain machines that are not networked at all, you should consider working with <code>file:</code> URLs. You&#39;ll have to collect your modules somewhere first. So you might use CPAN.pm to put together all you need on a networked machine. Then copy the $CPAN::Config-&#62;{keep_source_where} (but not $CPAN::Config-&#62;{build_dir}) directory on a floppy. This floppy is kind of a personal CPAN. CPAN.pm on the non-networked machines works nicely with this floppy. See also below the paragraph about CD-ROM support.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Basic_Utilities_for_Programmers"
>Basic Utilities for Programmers</a></h2>

<dl>
<dt><a name='has_inst'></a><a name="has_inst($module)"
>has_inst($module)</a></dt>

<dd>
<p>Returns true if the module is installed. Used to load all modules into the running CPAN.pm that are considered optional. The config variable <code>dontload_list</code> intercepts the <code>has_inst()</code> call such that an optional module is not loaded despite being available. For example, the following command will prevent <code>YAML.pm</code> from being loaded:</p>

<pre class="sh_perl">    cpan&#62; o conf dontload_list push YAML</pre>

<p>See the source for details.</p>

<dt><a name='has_usable'></a><a name="has_usable($module)"
>has_usable($module)</a></dt>

<dd>
<p>Returns true if the module is installed and in a usable state. Only useful for a handful of modules that are used internally. See the source for details.</p>

<dt><a name='instance'></a><a name="instance($module)"
>instance($module)</a></dt>

<dd>
<p>The constructor for all the singletons used to represent modules, distributions, authors, and bundles. If the object already exists, this method returns the object; otherwise, it calls the constructor.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SECURITY"
>SECURITY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There&#39;s no strong security layer in CPAN.pm. CPAN.pm helps you to install foreign, unmasked, unsigned code on your machine. We compare to a checksum that comes from the net just as the distribution file itself. But we try to make it easy to add security on demand:</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Cryptographically_signed_modules"
>Cryptographically signed modules</a></h2>

<p>Since release 1.77, CPAN.pm has been able to verify cryptographically signed module distributions using Module::Signature. The CPAN modules can be signed by their authors, thus giving more security. The simple unsigned MD5 checksums that were used before by CPAN protect mainly against accidental file corruption.</p>

<p>You will need to have Module::Signature installed, which in turn requires that you have at least one of Crypt::OpenPGP module or the command-line <em>gpg</em> tool installed.</p>

<p>You will also need to be able to connect over the Internet to the public key servers, like pgp.mit.edu, and their port 11731 (the HKP protocol).</p>

<p>The configuration parameter check_sigs is there to turn signature checking on or off.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORT"
>EXPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Most functions in package CPAN are exported by default. The reason for this is that the primary use is intended for the cpan shell or for one-liners.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ENVIRONMENT"
>ENVIRONMENT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>When the CPAN shell enters a subshell via the look command, it sets the environment CPAN_SHELL_LEVEL to 1, or increments that variable if it is already set.</p>

<p>When CPAN runs, it sets the environment variable PERL5_CPAN_IS_RUNNING to the ID of the running process. It also sets PERL5_CPANPLUS_IS_RUNNING to prevent runaway processes which could happen with older versions of Module::Install.</p>

<p>When running <code>perl Makefile.PL</code>, the environment variable <code>PERL5_CPAN_IS_EXECUTING</code> is set to the full path of the <code>Makefile.PL</code> that is being executed. This prevents runaway processes with newer versions of Module::Install.</p>

<p>When the config variable ftp_passive is set, all downloads will be run with the environment variable FTP_PASSIVE set to this value. This is in general a good idea as it influences both Net::FTP and LWP based connections. The same effect can be achieved by starting the cpan shell with this environment variable set. For Net::FTP alone, one can also always set passive mode by running libnetcfg.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="POPULATE_AN_INSTALLATION_WITH_LOTS_OF_MODULES"
>POPULATE AN INSTALLATION WITH LOTS OF MODULES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Populating a freshly installed perl with one&#39;s favorite modules is pretty easy if you maintain a private bundle definition file. To get a useful blueprint of a bundle definition file, the command autobundle can be used on the CPAN shell command line. This command writes a bundle definition file for all modules installed for the current perl interpreter. It&#39;s recommended to run this command once only, and from then on maintain the file manually under a private name, say Bundle/my_bundle.pm. With a clever bundle file you can then simply say</p>

<pre class="sh_perl">    cpan&#62; install Bundle::my_bundle</pre>

<p>then answer a few questions and go out for coffee (possibly even in a different city).</p>

<p>Maintaining a bundle definition file means keeping track of two things: dependencies and interactivity. CPAN.pm sometimes fails on calculating dependencies because not all modules define all MakeMaker attributes correctly, so a bundle definition file should specify prerequisites as early as possible. On the other hand, it&#39;s annoying that so many distributions need some interactive configuring. So what you can try to accomplish in your private bundle file is to have the packages that need to be configured early in the file and the gentle ones later, so you can go out for coffee after a few minutes and leave CPAN.pm to churn away untended.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WORKING_WITH_CPAN.pm_BEHIND_FIREWALLS"
>WORKING WITH CPAN.pm BEHIND FIREWALLS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Thanks to Graham Barr for contributing the following paragraphs about the interaction between perl, and various firewall configurations. For further information on firewalls, it is recommended to consult the documentation that comes with the <i>ncftp</i> program. If you are unable to go through the firewall with a simple Perl setup, it is likely that you can configure <i>ncftp</i> so that it works through your firewall.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Three_basic_types_of_firewalls"
>Three basic types of firewalls</a></h2>

<p>Firewalls can be categorized into three basic types.</p>

<dl>
<dt><a name='http'></a><a name="http_firewall"
>http firewall</a></dt>

<dd>
<p>This is when the firewall machine runs a web server, and to access the outside world, you must do so via that web server. If you set environment variables like http_proxy or ftp_proxy to values beginning with http://, or in your web browser you&#39;ve proxy information set, then you know you are running behind an http firewall.</p>

<p>To access servers outside these types of firewalls with perl (even for ftp), you need LWP or HTTP::Tiny.</p>

<dt><a name='ftp'></a><a name="ftp_firewall"
>ftp firewall</a></dt>

<dd>
<p>This where the firewall machine runs an ftp server. This kind of firewall will only let you access ftp servers outside the firewall. This is usually done by connecting to the firewall with ftp, then entering a username like &#34;user@outside.host.com&#34;.</p>

<p>To access servers outside these type of firewalls with perl, you need Net::FTP.</p>

<dt><a name='One'></a><a name="One-way_visibility"
>One-way visibility</a></dt>

<dd>
<p>One-way visibility means these firewalls try to make themselves invisible to users inside the firewall. An FTP data connection is normally created by sending your IP address to the remote server and then listening for the return connection. But the remote server will not be able to connect to you because of the firewall. For these types of firewall, FTP connections need to be done in a passive mode.</p>

<p>There are two that I can think off.</p>

<dl>
<dt><a name="SOCKS"
>SOCKS</a></dt>

<dd>
<p>If you are using a SOCKS firewall, you will need to compile perl and link it with the SOCKS library. This is what is normally called a &#39;socksified&#39; perl. With this executable you will be able to connect to servers outside the firewall as if it were not there.</p>

<dt><a name='IP'></a><a name="IP_Masquerade"
>IP Masquerade</a></dt>

<dd>
<p>This is when the firewall implemented in the kernel (via NAT, or networking address translation), it allows you to hide a complete network behind one IP address. With this firewall no special compiling is needed as you can access hosts directly.</p>

<p>For accessing ftp servers behind such firewalls you usually need to set the environment variable <code>FTP_PASSIVE</code> or the config variable ftp_passive to a true value.</p>
</dd>
</dl>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Configuring_lynx_or_ncftp_for_going_through_a_firewall"
>Configuring lynx or ncftp for going through a firewall</a></h2>

<p>If you can go through your firewall with e.g. lynx, presumably with a command such as</p>

<pre class="sh_perl">    /usr/local/bin/lynx -pscott:tiger</pre>

<p>then you would configure CPAN.pm with the command</p>

<pre class="sh_perl">    o conf lynx &#34;/usr/local/bin/lynx -pscott:tiger&#34;</pre>

<p>That&#39;s all. Similarly for ncftp or ftp, you would configure something like</p>

<pre class="sh_perl">    o conf ncftp &#34;/usr/bin/ncftp -f /home/scott/ncftplogin.cfg&#34;</pre>

<p>Your mileage may vary...</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FAQ"
>FAQ <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='1'></a><a name="1)"
>1)</a></dt>

<dd>
<p>I installed a new version of module X but CPAN keeps saying, I have the old version installed</p>

<p>Probably you <b>do</b> have the old version installed. This can happen if a module installs itself into a different directory in the @INC path than it was previously installed. This is not really a CPAN.pm problem, you would have the same problem when installing the module manually. The easiest way to prevent this behaviour is to add the argument <code>UNINST=1</code> to the <code>make install</code> call, and that is why many people add this argument permanently by configuring</p>

<pre class="sh_perl">  o conf make_install_arg UNINST=1</pre>

<dt><a name='2'></a><a name="2)"
>2)</a></dt>

<dd>
<p>So why is UNINST=1 not the default?</p>

<p>Because there are people who have their precise expectations about who may install where in the @INC path and who uses which @INC array. In fine tuned environments <code>UNINST=1</code> can cause damage.</p>

<dt><a name='3'></a><a name="3)"
>3)</a></dt>

<dd>
<p>I want to clean up my mess, and install a new perl along with all modules I have. How do I go about it?</p>

<p>Run the autobundle command for your old perl and optionally rename the resulting bundle file (e.g. Bundle/mybundle.pm), install the new perl with the Configure option prefix, e.g.</p>

<pre class="sh_perl">    ./Configure -Dprefix=/usr/local/perl-5.6.78.9</pre>

<p>Install the bundle file you produced in the first step with something like</p>

<pre class="sh_perl">    cpan&#62; install Bundle::mybundle</pre>

<p>and you&#39;re done.</p>

<dt><a name='4'></a><a name="4)"
>4)</a></dt>

<dd>
<p>When I install bundles or multiple modules with one command there is too much output to keep track of.</p>

<p>You may want to configure something like</p>

<pre class="sh_perl">  o conf make_arg &#34;| tee -ai /root/.cpan/logs/make.out&#34;
  o conf make_install_arg &#34;| tee -ai /root/.cpan/logs/make_install.out&#34;</pre>

<p>so that STDOUT is captured in a file for later inspection.</p>

<dt><a name='5'></a><a name="5)"
>5)</a></dt>

<dd>
<p>I am not root, how can I install a module in a personal directory?</p>

<p>As of CPAN 1.9463, if you do not have permission to write the default perl library directories, CPAN&#39;s configuration process will ask you whether you want to bootstrap &#60;local::lib&#62;, which makes keeping a personal perl library directory easy.</p>

<p>Another thing you should bear in mind is that the UNINST parameter can be dangerous when you are installing into a private area because you might accidentally remove modules that other people depend on that are not using the private area.</p>

<dt><a name='6'></a><a name="6)"
>6)</a></dt>

<dd>
<p>How to get a package, unwrap it, and make a change before building it?</p>

<p>Have a look at the <code>look</code> (!) command.</p>

<dt><a name='7'></a><a name="7)"
>7)</a></dt>

<dd>
<p>I installed a Bundle and had a couple of fails. When I retried, everything resolved nicely. Can this be fixed to work on first try?</p>

<p>The reason for this is that CPAN does not know the dependencies of all modules when it starts out. To decide about the additional items to install, it just uses data found in the META.yml file or the generated Makefile. An undetected missing piece breaks the process. But it may well be that your Bundle installs some prerequisite later than some depending item and thus your second try is able to resolve everything. Please note, CPAN.pm does not know the dependency tree in advance and cannot sort the queue of things to install in a topologically correct order. It resolves perfectly well <b>if</b> all modules declare the prerequisites correctly with the PREREQ_PM attribute to MakeMaker or the <code>requires</code> stanza of Module::Build. For bundles which fail and you need to install often, it is recommended to sort the Bundle definition file manually.</p>

<dt><a name='8'></a><a name="8)"
>8)</a></dt>

<dd>
<p>In our intranet, we have many modules for internal use. How can I integrate these modules with CPAN.pm but without uploading the modules to CPAN?</p>

<p>Have a look at the CPAN::Site module.</p>

<dt><a name='9'></a><a name="9)"
>9)</a></dt>

<dd>
<p>When I run CPAN&#39;s shell, I get an error message about things in my <code>/etc/inputrc</code> (or <code>~/.inputrc</code>) file.</p>

<p>These are readline issues and can only be fixed by studying readline configuration on your architecture and adjusting the referenced file accordingly. Please make a backup of the <code>/etc/inputrc</code> or <code>~/.inputrc</code> and edit them. Quite often harmless changes like uppercasing or lowercasing some arguments solves the problem.</p>

<dt><a name='10'></a><a name="10)"
>10)</a></dt>

<dd>
<p>Some authors have strange characters in their names.</p>

<p>Internally CPAN.pm uses the UTF-8 charset. If your terminal is expecting ISO-8859-1 charset, a converter can be activated by setting term_is_latin to a true value in your config file. One way of doing so would be</p>

<pre class="sh_perl">    cpan&#62; o conf term_is_latin 1</pre>

<p>If other charset support is needed, please file a bug report against CPAN.pm at rt.cpan.org and describe your needs. Maybe we can extend the support or maybe UTF-8 terminals become widely available.</p>

<p>Note: this config variable is deprecated and will be removed in a future version of CPAN.pm. It will be replaced with the conventions around the family of $LANG and $LC_* environment variables.</p>

<dt><a name='11'></a><a name="11)"
>11)</a></dt>

<dd>
<p>When an install fails for some reason and then I correct the error condition and retry, CPAN.pm refuses to install the module, saying <code>Already tried without success</code>.</p>

<p>Use the force pragma like so</p>

<pre class="sh_perl">  force install Foo::Bar</pre>

<p>Or you can use</p>

<pre class="sh_perl">  look Foo::Bar</pre>

<p>and then <code>make install</code> directly in the subshell.</p>

<dt><a name='12'></a><a name="12)"
>12)</a></dt>

<dd>
<p>How do I install a &#34;DEVELOPER RELEASE&#34; of a module?</p>

<p>By default, CPAN will install the latest non-developer release of a module. If you want to install a dev release, you have to specify the partial path starting with the author id to the tarball you wish to install, like so:</p>

<pre class="sh_perl">    cpan&#62; install KWILLIAMS/Module-Build-0.27_07.tar.gz</pre>

<p>Note that you can use the <code>ls</code> command to get this path listed.</p>

<dt><a name='13'></a><a name="13)"
>13)</a></dt>

<dd>
<p>How do I install a module and all its dependencies from the commandline, without being prompted for anything, despite my CPAN configuration (or lack thereof)?</p>

<p>CPAN uses ExtUtils::MakeMaker&#39;s prompt() function to ask its questions, so if you set the PERL_MM_USE_DEFAULT environment variable, you shouldn&#39;t be asked any questions at all (assuming the modules you are installing are nice about obeying that variable as well):</p>

<pre class="sh_perl">    % PERL_MM_USE_DEFAULT=1 perl -MCPAN -e &#39;install My::Module&#39;</pre>

<dt><a name='14'></a><a name="14)"
>14)</a></dt>

<dd>
<p>How do I create a Module::Build based Build.PL derived from an ExtUtils::MakeMaker focused Makefile.PL?</p>

<p><a href="http://search.cpan.org/dist/Module-Build-Convert/" class="podlinkurl"
>http://search.cpan.org/dist/Module-Build-Convert/</a></p>

<dt><a name='15'></a><a name="15)"
>15)</a></dt>

<dd>
<p>I&#39;m frequently irritated with the CPAN shell&#39;s inability to help me select a good mirror.</p>

<p>CPAN can now help you select a &#34;good&#34; mirror, based on which ones have the lowest &#39;ping&#39; round-trip times. From the shell, use the command &#39;o conf init urllist&#39; and allow CPAN to automatically select mirrors for you.</p>

<p>Beyond that help, the urllist config parameter is yours. You can add and remove sites at will. You should find out which sites have the best up-to-dateness, bandwidth, reliability, etc. and are topologically close to you. Some people prefer fast downloads, others up-to-dateness, others reliability. You decide which to try in which order.</p>

<p>Henk P. Penning maintains a site that collects data about CPAN sites:</p>

<pre class="sh_perl">  <a href="http://www.cs.uu.nl/people/henkp/mirmon/cpan.html" class="podlinkurl"
>http://www.cs.uu.nl/people/henkp/mirmon/cpan.html</a></pre>

<p>Also, feel free to play with experimental features. Run</p>

<pre class="sh_perl">  o conf init randomize_urllist ftpstats_period ftpstats_size</pre>

<p>and choose your favorite parameters. After a few downloads running the <code>hosts</code> command will probably assist you in choosing the best mirror sites.</p>

<dt><a name='16'></a><a name="16)"
>16)</a></dt>

<dd>
<p>Why do I get asked the same questions every time I start the shell?</p>

<p>You can make your configuration changes permanent by calling the command <code>o conf commit</code>. Alternatively set the <code>auto_commit</code> variable to true by running <code>o conf init auto_commit</code> and answering the following question with yes.</p>

<dt><a name='17'></a><a name="17)"
>17)</a></dt>

<dd>
<p>Older versions of CPAN.pm had the original root directory of all tarballs in the build directory. Now there are always random characters appended to these directory names. Why was this done?</p>

<p>The random characters are provided by File::Temp and ensure that each module&#39;s individual build directory is unique. This makes running CPAN.pm in concurrent processes simultaneously safe.</p>

<dt><a name='18'></a><a name="18)"
>18)</a></dt>

<dd>
<p>Speaking of the build directory. Do I have to clean it up myself?</p>

<p>You have the choice to set the config variable <code>scan_cache</code> to <code>never</code>. Then you must clean it up yourself. The other possible values, <code>atstart</code> and <code>atexit</code> clean up the build directory when you start or exit the CPAN shell, respectively. If you never start up the CPAN shell, you probably also have to clean up the build directory yourself.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COMPATIBILITY"
>COMPATIBILITY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="OLD_PERL_VERSIONS"
>OLD PERL VERSIONS</a></h2>

<p>CPAN.pm is regularly tested to run under 5.004, 5.005, and assorted newer versions. It is getting more and more difficult to get the minimal prerequisites working on older perls. It is close to impossible to get the whole Bundle::CPAN working there. If you&#39;re in the position to have only these old versions, be advised that CPAN is designed to work fine without the Bundle::CPAN installed.</p>

<p>To get things going, note that GBARR/Scalar-List-Utils-1.18.tar.gz is compatible with ancient perls and that File::Temp is listed as a prerequisite but CPAN has reasonable workarounds if it is missing.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CPANPLUS"
>CPANPLUS</a></h2>

<p>This module and its competitor, the CPANPLUS module, are both much cooler than the other. CPAN.pm is older. CPANPLUS was designed to be more modular, but it was never intended to be compatible with CPAN.pm.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CPANMINUS"
>CPANMINUS</a></h2>

<p>In the year 2010 App::cpanminus was launched as a new approach to a cpan shell with a considerably smaller footprint. Very cool stuff.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SECURITY_ADVICE"
>SECURITY ADVICE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This software enables you to upgrade software on your computer and so is inherently dangerous because the newly installed software may contain bugs and may alter the way your computer works or even make it unusable. Please consider backing up your data before every upgrade.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Please report bugs via <a href="http://rt.cpan.org/" class="podlinkurl"
>http://rt.cpan.org/</a></p>

<p>Before submitting a bug, please make sure that the traditional method of building a Perl module package from a shell by following the installation instructions of that package still works in your environment.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Andreas Koenig <code>&#60;andk@cpan.org&#62;</code></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE"
>LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>See <a href="http://www.perl.com/perl/misc/Artistic.html" class="podlinkurl"
>http://www.perl.com/perl/misc/Artistic.html</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TRANSLATIONS"
>TRANSLATIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Kawai,Takanori provides a Japanese translation of a very old version of this manpage at <a href="http://homepage3.nifty.com/hippo2000/perltips/CPAN.htm" class="podlinkurl"
>http://homepage3.nifty.com/hippo2000/perltips/CPAN.htm</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Many people enter the CPAN shell by running the <a href="/~andk/CPAN-1.9800/scripts/cpan" class="podlinkpod"
>cpan</a> utility program which is installed in the same directory as perl itself. So if you have this directory in your PATH variable (or some equivalent in your operating system) then typing <code>cpan</code> in a console window will work for you as well. Above that the utility provides several commandline shortcuts.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78059 Uploads, 24684 Distributions
105888 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 21 09:27:58 2012 GMT (0.228835105895996) @cpansearch1 -->
 </body>
</html>
