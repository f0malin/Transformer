<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>DBI - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","DBI",3]);
    _gaq.push(["_setCustomVar",5,"Release","DBI-1.620",3]);
    _gaq.push(["_setCustomVar",3,"Module","DBI",3]);
    _gaq.push(["_setCustomVar",1,"Author","TIMB",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?DBI">permalink</a></div>
  <a href="/~timb/">Tim Bunce</a> &gt;
  <a href="/~timb/DBI-1.620/">DBI-1.620</a> &gt;
  DBI
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/a497fd127f6d1e9e1e618bf46504fc59?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/T/TI/TIMB/DBI-1.620.tar.gz">DBI-1.620.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=DBI;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~TIMB/DBI-1.620/DBI.pm">Annotate this POD
(21)
</a></p>
     <p style="text-align:right"><a href="http://dbi.perl.org/">Website</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Rose%3A%3ADB%3A%3AObject">Rose::DB::Object</a><br>
<a href="/perldoc?DBIx%3A%3AClass">DBIx::Class</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=DBI">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 3</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 5</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=DBI">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.620 &nbsp;
<span class="noprint">
  <a href="/src/TIMB/DBI-1.620/DBI.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#GETTING_HELP'>GETTING HELP</a>
    <li class='indexItem indexItem2'><a href='#NOTES'>NOTES</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Architecture_of_a_DBI_Application'>Architecture of a DBI Application</a>
    <li class='indexItem indexItem2'><a href='#Notation_and_Conventions'>Notation and Conventions</a>
    <li class='indexItem indexItem2'><a href='#Outline_Usage'>Outline Usage</a>
    <li class='indexItem indexItem2'><a href='#General_Interface_Rules_&#38;_Caveats'>General Interface Rules &#38; Caveats</a>
    <li class='indexItem indexItem2'><a href='#Naming_Conventions_and_Name_Space'>Naming Conventions and Name Space</a>
    <li class='indexItem indexItem2'><a href='#SQL_-_A_Query_Language'>SQL - A Query Language</a>
    <li class='indexItem indexItem2'><a href='#Placeholders_and_Bind_Values'>Placeholders and Bind Values</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#THE_DBI_PACKAGE_AND_CLASS'>THE DBI PACKAGE AND CLASS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#DBI_Constants'>DBI Constants</a>
    <li class='indexItem indexItem2'><a href='#DBI_Class_Methods'>DBI Class Methods</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#parse_dsn'>parse_dsn</a>
      <li class='indexItem indexItem3'><a href='#connect'>connect</a>
      <li class='indexItem indexItem3'><a href='#connect_cached'>connect_cached</a>
      <li class='indexItem indexItem3'><a href='#available_drivers'>available_drivers</a>
      <li class='indexItem indexItem3'><a href='#installed_drivers'>installed_drivers</a>
      <li class='indexItem indexItem3'><a href='#installed_versions'>installed_versions</a>
      <li class='indexItem indexItem3'><a href='#data_sources'>data_sources</a>
      <li class='indexItem indexItem3'><a href='#trace'>trace</a>
      <li class='indexItem indexItem3'><a href='#visit_handles'>visit_handles</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#DBI_Utility_Functions'>DBI Utility Functions</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#data_string_desc'>data_string_desc</a>
      <li class='indexItem indexItem3'><a href='#data_string_diff'>data_string_diff</a>
      <li class='indexItem indexItem3'><a href='#data_diff'>data_diff</a>
      <li class='indexItem indexItem3'><a href='#neat'>neat</a>
      <li class='indexItem indexItem3'><a href='#neat_list'>neat_list</a>
      <li class='indexItem indexItem3'><a href='#looks_like_number'>looks_like_number</a>
      <li class='indexItem indexItem3'><a href='#hash'>hash</a>
      <li class='indexItem indexItem3'><a href='#sql_type_cast'>sql_type_cast</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#DBI_Dynamic_Attributes'>DBI Dynamic Attributes</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#$DBI::err'>$DBI::err</a>
      <li class='indexItem indexItem3'><a href='#$DBI::errstr'>$DBI::errstr</a>
      <li class='indexItem indexItem3'><a href='#$DBI::state'>$DBI::state</a>
      <li class='indexItem indexItem3'><a href='#$DBI::rows'>$DBI::rows</a>
      <li class='indexItem indexItem3'><a href='#$DBI::lasth'>$DBI::lasth</a>
    </ul>
  </ul>
  <li class='indexItem indexItem1'><a href='#METHODS_COMMON_TO_ALL_HANDLES'>METHODS COMMON TO ALL HANDLES</a>
  <ul   class='indexList indexList2'>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#err'>err</a>
      <li class='indexItem indexItem3'><a href='#errstr'>errstr</a>
      <li class='indexItem indexItem3'><a href='#state'>state</a>
      <li class='indexItem indexItem3'><a href='#set_err'>set_err</a>
      <li class='indexItem indexItem3'><a href='#trace'>trace</a>
      <li class='indexItem indexItem3'><a href='#trace_msg'>trace_msg</a>
      <li class='indexItem indexItem3'><a href='#func'>func</a>
      <li class='indexItem indexItem3'><a href='#can'>can</a>
      <li class='indexItem indexItem3'><a href='#parse_trace_flags'>parse_trace_flags</a>
      <li class='indexItem indexItem3'><a href='#parse_trace_flag'>parse_trace_flag</a>
      <li class='indexItem indexItem3'><a href='#private_attribute_info'>private_attribute_info</a>
      <li class='indexItem indexItem3'><a href='#swap_inner_handle'>swap_inner_handle</a>
      <li class='indexItem indexItem3'><a href='#visit_child_handles'>visit_child_handles</a>
    </ul>
  </ul>
  <li class='indexItem indexItem1'><a href='#ATTRIBUTES_COMMON_TO_ALL_HANDLES'>ATTRIBUTES COMMON TO ALL HANDLES</a>
  <ul   class='indexList indexList2'>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#Warn'>Warn</a>
      <li class='indexItem indexItem3'><a href='#Active'>Active</a>
      <li class='indexItem indexItem3'><a href='#Executed'>Executed</a>
      <li class='indexItem indexItem3'><a href='#Kids'>Kids</a>
      <li class='indexItem indexItem3'><a href='#ActiveKids'>ActiveKids</a>
      <li class='indexItem indexItem3'><a href='#CachedKids'>CachedKids</a>
      <li class='indexItem indexItem3'><a href='#Type'>Type</a>
      <li class='indexItem indexItem3'><a href='#ChildHandles'>ChildHandles</a>
      <li class='indexItem indexItem3'><a href='#CompatMode'>CompatMode</a>
      <li class='indexItem indexItem3'><a href='#InactiveDestroy'>InactiveDestroy</a>
      <li class='indexItem indexItem3'><a href='#AutoInactiveDestroy'>AutoInactiveDestroy</a>
      <li class='indexItem indexItem3'><a href='#PrintWarn'>PrintWarn</a>
      <li class='indexItem indexItem3'><a href='#PrintError'>PrintError</a>
      <li class='indexItem indexItem3'><a href='#RaiseError'>RaiseError</a>
      <li class='indexItem indexItem3'><a href='#HandleError'>HandleError</a>
      <li class='indexItem indexItem3'><a href='#HandleSetErr'>HandleSetErr</a>
      <li class='indexItem indexItem3'><a href='#ErrCount'>ErrCount</a>
      <li class='indexItem indexItem3'><a href='#ShowErrorStatement'>ShowErrorStatement</a>
      <li class='indexItem indexItem3'><a href='#TraceLevel'>TraceLevel</a>
      <li class='indexItem indexItem3'><a href='#FetchHashKeyName'>FetchHashKeyName</a>
      <li class='indexItem indexItem3'><a href='#ChopBlanks'>ChopBlanks</a>
      <li class='indexItem indexItem3'><a href='#LongReadLen'>LongReadLen</a>
      <li class='indexItem indexItem3'><a href='#LongTruncOk'>LongTruncOk</a>
      <li class='indexItem indexItem3'><a href='#TaintIn'>TaintIn</a>
      <li class='indexItem indexItem3'><a href='#TaintOut'>TaintOut</a>
      <li class='indexItem indexItem3'><a href='#Taint'>Taint</a>
      <li class='indexItem indexItem3'><a href='#Profile'>Profile</a>
      <li class='indexItem indexItem3'><a href='#ReadOnly'>ReadOnly</a>
      <li class='indexItem indexItem3'><a href='#Callbacks'>Callbacks</a>
      <li class='indexItem indexItem3'><a href='#private_your_module_name_*'>private_your_module_name_*</a>
    </ul>
  </ul>
  <li class='indexItem indexItem1'><a href='#DBI_DATABASE_HANDLE_OBJECTS'>DBI DATABASE HANDLE OBJECTS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Database_Handle_Methods'>Database Handle Methods</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#clone'>clone</a>
      <li class='indexItem indexItem3'><a href='#data_sources'>data_sources</a>
      <li class='indexItem indexItem3'><a href='#do'>do</a>
      <li class='indexItem indexItem3'><a href='#last_insert_id'>last_insert_id</a>
      <li class='indexItem indexItem3'><a href='#selectrow_array'>selectrow_array</a>
      <li class='indexItem indexItem3'><a href='#selectrow_arrayref'>selectrow_arrayref</a>
      <li class='indexItem indexItem3'><a href='#selectrow_hashref'>selectrow_hashref</a>
      <li class='indexItem indexItem3'><a href='#selectall_arrayref'>selectall_arrayref</a>
      <li class='indexItem indexItem3'><a href='#selectall_hashref'>selectall_hashref</a>
      <li class='indexItem indexItem3'><a href='#selectcol_arrayref'>selectcol_arrayref</a>
      <li class='indexItem indexItem3'><a href='#prepare'>prepare</a>
      <li class='indexItem indexItem3'><a href='#prepare_cached'>prepare_cached</a>
      <li class='indexItem indexItem3'><a href='#commit'>commit</a>
      <li class='indexItem indexItem3'><a href='#rollback'>rollback</a>
      <li class='indexItem indexItem3'><a href='#begin_work'>begin_work</a>
      <li class='indexItem indexItem3'><a href='#disconnect'>disconnect</a>
      <li class='indexItem indexItem3'><a href='#ping'>ping</a>
      <li class='indexItem indexItem3'><a href='#get_info'>get_info</a>
      <li class='indexItem indexItem3'><a href='#table_info'>table_info</a>
      <li class='indexItem indexItem3'><a href='#column_info'>column_info</a>
      <li class='indexItem indexItem3'><a href='#primary_key_info'>primary_key_info</a>
      <li class='indexItem indexItem3'><a href='#primary_key'>primary_key</a>
      <li class='indexItem indexItem3'><a href='#foreign_key_info'>foreign_key_info</a>
      <li class='indexItem indexItem3'><a href='#statistics_info'>statistics_info</a>
      <li class='indexItem indexItem3'><a href='#tables'>tables</a>
      <li class='indexItem indexItem3'><a href='#type_info_all'>type_info_all</a>
      <li class='indexItem indexItem3'><a href='#type_info'>type_info</a>
      <li class='indexItem indexItem3'><a href='#quote'>quote</a>
      <li class='indexItem indexItem3'><a href='#quote_identifier'>quote_identifier</a>
      <li class='indexItem indexItem3'><a href='#take_imp_data'>take_imp_data</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Database_Handle_Attributes'>Database Handle Attributes</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#AutoCommit'>AutoCommit</a>
      <li class='indexItem indexItem3'><a href='#Driver'>Driver</a>
      <li class='indexItem indexItem3'><a href='#Name'>Name</a>
      <li class='indexItem indexItem3'><a href='#Statement'>Statement</a>
      <li class='indexItem indexItem3'><a href='#RowCacheSize'>RowCacheSize</a>
      <li class='indexItem indexItem3'><a href='#Username'>Username</a>
    </ul>
  </ul>
  <li class='indexItem indexItem1'><a href='#DBI_STATEMENT_HANDLE_OBJECTS'>DBI STATEMENT HANDLE OBJECTS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Statement_Handle_Methods'>Statement Handle Methods</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#bind_param'>bind_param</a>
      <li class='indexItem indexItem3'><a href='#bind_param_inout'>bind_param_inout</a>
      <li class='indexItem indexItem3'><a href='#bind_param_array'>bind_param_array</a>
      <li class='indexItem indexItem3'><a href='#execute'>execute</a>
      <li class='indexItem indexItem3'><a href='#execute_array'>execute_array</a>
      <li class='indexItem indexItem3'><a href='#execute_for_fetch'>execute_for_fetch</a>
      <li class='indexItem indexItem3'><a href='#fetchrow_arrayref'>fetchrow_arrayref</a>
      <li class='indexItem indexItem3'><a href='#fetchrow_array'>fetchrow_array</a>
      <li class='indexItem indexItem3'><a href='#fetchrow_hashref'>fetchrow_hashref</a>
      <li class='indexItem indexItem3'><a href='#fetchall_arrayref'>fetchall_arrayref</a>
      <li class='indexItem indexItem3'><a href='#fetchall_hashref'>fetchall_hashref</a>
      <li class='indexItem indexItem3'><a href='#finish'>finish</a>
      <li class='indexItem indexItem3'><a href='#rows'>rows</a>
      <li class='indexItem indexItem3'><a href='#bind_col'>bind_col</a>
      <li class='indexItem indexItem3'><a href='#bind_columns'>bind_columns</a>
      <li class='indexItem indexItem3'><a href='#dump_results'>dump_results</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Statement_Handle_Attributes'>Statement Handle Attributes</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#NUM_OF_FIELDS'>NUM_OF_FIELDS</a>
      <li class='indexItem indexItem3'><a href='#NUM_OF_PARAMS'>NUM_OF_PARAMS</a>
      <li class='indexItem indexItem3'><a href='#NAME'>NAME</a>
      <li class='indexItem indexItem3'><a href='#NAME_lc'>NAME_lc</a>
      <li class='indexItem indexItem3'><a href='#NAME_uc'>NAME_uc</a>
      <li class='indexItem indexItem3'><a href='#NAME_hash'>NAME_hash</a>
      <li class='indexItem indexItem3'><a href='#NAME_lc_hash'>NAME_lc_hash</a>
      <li class='indexItem indexItem3'><a href='#NAME_uc_hash'>NAME_uc_hash</a>
      <li class='indexItem indexItem3'><a href='#TYPE'>TYPE</a>
      <li class='indexItem indexItem3'><a href='#PRECISION'>PRECISION</a>
      <li class='indexItem indexItem3'><a href='#SCALE'>SCALE</a>
      <li class='indexItem indexItem3'><a href='#NULLABLE'>NULLABLE</a>
      <li class='indexItem indexItem3'><a href='#CursorName'>CursorName</a>
      <li class='indexItem indexItem3'><a href='#Database'>Database</a>
      <li class='indexItem indexItem3'><a href='#Statement'>Statement</a>
      <li class='indexItem indexItem3'><a href='#ParamValues'>ParamValues</a>
      <li class='indexItem indexItem3'><a href='#ParamTypes'>ParamTypes</a>
      <li class='indexItem indexItem3'><a href='#ParamArrays'>ParamArrays</a>
      <li class='indexItem indexItem3'><a href='#RowsInCache'>RowsInCache</a>
    </ul>
  </ul>
  <li class='indexItem indexItem1'><a href='#FURTHER_INFORMATION'>FURTHER INFORMATION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Catalog_Methods'>Catalog Methods</a>
    <li class='indexItem indexItem2'><a href='#Transactions'>Transactions</a>
    <li class='indexItem indexItem2'><a href='#Handling_BLOB_/_LONG_/_Memo_Fields'>Handling BLOB / LONG / Memo Fields</a>
    <li class='indexItem indexItem2'><a href='#Simple_Examples'>Simple Examples</a>
    <li class='indexItem indexItem2'><a href='#Threads_and_Thread_Safety'>Threads and Thread Safety</a>
    <li class='indexItem indexItem2'><a href='#Signal_Handling_and_Canceling_Operations'>Signal Handling and Canceling Operations</a>
    <li class='indexItem indexItem2'><a href='#Subclassing_the_DBI'>Subclassing the DBI</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#TRACING'>TRACING</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Trace_Settings'>Trace Settings</a>
    <li class='indexItem indexItem2'><a href='#Trace_Levels'>Trace Levels</a>
    <li class='indexItem indexItem2'><a href='#Trace_Flags'>Trace Flags</a>
    <li class='indexItem indexItem2'><a href='#Enabling_Trace'>Enabling Trace</a>
    <li class='indexItem indexItem2'><a href='#Trace_Output'>Trace Output</a>
    <li class='indexItem indexItem2'><a href='#Tracing_to_Layered_Filehandles'>Tracing to Layered Filehandles</a>
    <li class='indexItem indexItem2'><a href='#Trace_Content'>Trace Content</a>
    <li class='indexItem indexItem2'><a href='#Tracing_Tips'>Tracing Tips</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#DBI_ENVIRONMENT_VARIABLES'>DBI ENVIRONMENT VARIABLES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#DBI_DSN'>DBI_DSN</a>
    <li class='indexItem indexItem2'><a href='#DBI_DRIVER'>DBI_DRIVER</a>
    <li class='indexItem indexItem2'><a href='#DBI_AUTOPROXY'>DBI_AUTOPROXY</a>
    <li class='indexItem indexItem2'><a href='#DBI_USER'>DBI_USER</a>
    <li class='indexItem indexItem2'><a href='#DBI_PASS'>DBI_PASS</a>
    <li class='indexItem indexItem2'><a href='#DBI_DBNAME_(obsolete)'>DBI_DBNAME (obsolete)</a>
    <li class='indexItem indexItem2'><a href='#DBI_TRACE'>DBI_TRACE</a>
    <li class='indexItem indexItem2'><a href='#PERL_DBI_DEBUG_(obsolete)'>PERL_DBI_DEBUG (obsolete)</a>
    <li class='indexItem indexItem2'><a href='#DBI_PROFILE'>DBI_PROFILE</a>
    <li class='indexItem indexItem2'><a href='#DBI_PUREPERL'>DBI_PUREPERL</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#WARNING_AND_ERROR_MESSAGES'>WARNING AND ERROR MESSAGES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Fatal_Errors'>Fatal Errors</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Pure-Perl_DBI'>Pure-Perl DBI</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Driver_and_Database_Documentation'>Driver and Database Documentation</a>
    <li class='indexItem indexItem2'><a href='#ODBC_and_SQL/CLI_Standards_Reference_Information'>ODBC and SQL/CLI Standards Reference Information</a>
    <li class='indexItem indexItem2'><a href='#Standards_Reference_Information'>Standards Reference Information</a>
    <li class='indexItem indexItem2'><a href='#Books_and_Articles'>Books and Articles</a>
    <li class='indexItem indexItem2'><a href='#Perl_Modules'>Perl Modules</a>
    <li class='indexItem indexItem2'><a href='#Mailing_List'>Mailing List</a>
    <li class='indexItem indexItem2'><a href='#Assorted_Related_WWW_Links'>Assorted Related WWW Links</a>
    <li class='indexItem indexItem2'><a href='#FAQ'>FAQ</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SUPPORT_/_WARRANTY'>SUPPORT / WARRANTY</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Support'>Support</a>
    <li class='indexItem indexItem2'><a href='#Sponsor_Enhancements'>Sponsor Enhancements</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#ACKNOWLEDGEMENTS'>ACKNOWLEDGEMENTS</a>
  <li class='indexItem indexItem1'><a href='#CONTRIBUTING'>CONTRIBUTING</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Browsing_the_source_code_repository'>Browsing the source code repository</a>
    <li class='indexItem indexItem2'><a href='#How_to_create_a_patch_using_Subversion'>How to create a patch using Subversion</a>
    <li class='indexItem indexItem2'><a href='#How_to_create_a_patch_without_Subversion'>How to create a patch without Subversion</a>
    <li class='indexItem indexItem2'><a href='#Speak_before_you_patch'>Speak before you patch</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#TRANSLATIONS'>TRANSLATIONS</a>
  <li class='indexItem indexItem1'><a href='#TRAINING'>TRAINING</a>
  <li class='indexItem indexItem1'><a href='#OTHER_RELATED_WORK_AND_PERL_MODULES'>OTHER RELATED WORK AND PERL MODULES</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>DBI - Database independent interface for Perl</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use DBI;

  @driver_names = DBI-&#62;available_drivers;
  %drivers      = DBI-&#62;installed_drivers;
  @data_sources = DBI-&#62;data_sources($driver_name, \%attr);

  $dbh = DBI-&#62;connect($data_source, $username, $auth, \%attr);

  $rv  = $dbh-&#62;do($statement);
  $rv  = $dbh-&#62;do($statement, \%attr);
  $rv  = $dbh-&#62;do($statement, \%attr, @bind_values);

  $ary_ref  = $dbh-&#62;selectall_arrayref($statement);
  $hash_ref = $dbh-&#62;selectall_hashref($statement, $key_field);

  $ary_ref  = $dbh-&#62;selectcol_arrayref($statement);
  $ary_ref  = $dbh-&#62;selectcol_arrayref($statement, \%attr);

  @row_ary  = $dbh-&#62;selectrow_array($statement);
  $ary_ref  = $dbh-&#62;selectrow_arrayref($statement);
  $hash_ref = $dbh-&#62;selectrow_hashref($statement);

  $sth = $dbh-&#62;prepare($statement);
  $sth = $dbh-&#62;prepare_cached($statement);

  $rc = $sth-&#62;bind_param($p_num, $bind_value);
  $rc = $sth-&#62;bind_param($p_num, $bind_value, $bind_type);
  $rc = $sth-&#62;bind_param($p_num, $bind_value, \%attr);

  $rv = $sth-&#62;execute;
  $rv = $sth-&#62;execute(@bind_values);
  $rv = $sth-&#62;execute_array(\%attr, ...);

  $rc = $sth-&#62;bind_col($col_num, \$col_variable);
  $rc = $sth-&#62;bind_columns(@list_of_refs_to_vars_to_bind);

  @row_ary  = $sth-&#62;fetchrow_array;
  $ary_ref  = $sth-&#62;fetchrow_arrayref;
  $hash_ref = $sth-&#62;fetchrow_hashref;

  $ary_ref  = $sth-&#62;fetchall_arrayref;
  $ary_ref  = $sth-&#62;fetchall_arrayref( $slice, $max_rows );

  $hash_ref = $sth-&#62;fetchall_hashref( $key_field );

  $rv  = $sth-&#62;rows;

  $rc  = $dbh-&#62;begin_work;
  $rc  = $dbh-&#62;commit;
  $rc  = $dbh-&#62;rollback;

  $quoted_string = $dbh-&#62;quote($string);

  $rc  = $h-&#62;err;
  $str = $h-&#62;errstr;
  $rv  = $h-&#62;state;

  $rc  = $dbh-&#62;disconnect;</pre>

<p><i>The synopsis above only lists the major methods and parameters.</i></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="GETTING_HELP"
>GETTING HELP</a></h2>

<p>If you have questions about DBI, or DBD driver modules, you can get help from the <i>dbi-users@perl.org</i> mailing list. You don&#39;t have to subscribe to the list in order to post, though I&#39;d recommend it. You can get help on subscribing and using the list by emailing <i>dbi-users-help@perl.org</i>.</p>

<p>I don&#39;t recommend the DBI cpanforum (at <a href="http://www.cpanforum.com/dist/DBI" class="podlinkurl"
>http://www.cpanforum.com/dist/DBI</a>) because relatively few people read it compared with dbi-users@perl.org.</p>

<p>To help you make the best use of the dbi-users mailing list, and any other lists or forums you may use, I recommend that you read &#34;Getting Answers&#34; by Mike Ash: <a href="http://mikeash.com/getting_answers.html" class="podlinkurl"
>http://mikeash.com/getting_answers.html</a>.</p>

<p>If you think you&#39;ve found a bug then please also read &#34;How to Report Bugs Effectively&#34; by Simon Tatham: <a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs.html" class="podlinkurl"
>http://www.chiark.greenend.org.uk/~sgtatham/bugs.html</a>.</p>

<p>The DBI home page at <a href="http://dbi.perl.org/" class="podlinkurl"
>http://dbi.perl.org/</a> and the DBI FAQ at <a href="http://faq.dbi-support.com/" class="podlinkurl"
>http://faq.dbi-support.com/</a> may be worth a visit. They include links to other resources, but are rather out-dated.</p>

<p>Before asking any questions, reread this document, consult the archives and read the DBI FAQ. The archives are listed at the end of this document and on the DBI home page.</p>

<p>You might also like to read the Advanced DBI Tutorial at <a href="http://www.slideshare.net/Tim.Bunce/dbi-advanced-tutorial-2007" class="podlinkurl"
>http://www.slideshare.net/Tim.Bunce/dbi-advanced-tutorial-2007</a></p>

<p>This document often uses terms like <i>references</i>, <i>objects</i>, <i>methods</i>. If you&#39;re not familiar with those terms then it would be a good idea to read at least the following perl manuals first: <a href="/perldoc?perlreftut" class="podlinkpod"
>perlreftut</a>, <a href="/perldoc?perldsc" class="podlinkpod"
>perldsc</a>, <a href="/perldoc?perllol" class="podlinkpod"
>perllol</a>, and <a href="/perldoc?perlboot" class="podlinkpod"
>perlboot</a>.</p>

<p>Please note that Tim Bunce does not maintain the mailing lists or the web page (generous volunteers do that). So please don&#39;t send mail directly to him; he just doesn&#39;t have the time to answer questions personally. The <i>dbi-users</i> mailing list has lots of experienced people who should be able to help you if you need it. If you do email Tim he is very likely to just forward it to the mailing list.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="NOTES"
>NOTES</a></h2>

<p>This is the DBI specification that corresponds to DBI version 1.620 (see <a href="/~timb/DBI-1.620/Changes" class="podlinkpod"
>DBI::Changes</a> for details).</p>

<p>The DBI is evolving at a steady pace, so it&#39;s good to check that you have the latest copy.</p>

<p>The significant user-visible changes in each release are documented in the <a href="/~timb/DBI-1.620/Changes" class="podlinkpod"
>DBI::Changes</a> module so you can read them by executing <code>perldoc DBI::Changes</code>.</p>

<p>Some DBI changes require changes in the drivers, but the drivers can take some time to catch up. Newer versions of the DBI have added features that may not yet be supported by the drivers you use. Talk to the authors of your drivers if you need a new feature that is not yet supported.</p>

<p>Features added after DBI 1.21 (February 2002) are marked in the text with the version number of the DBI release they first appeared in.</p>

<p>Extensions to the DBI API often use the <code>DBIx::*</code> namespace. See <a href="#Naming_Conventions_and_Name_Space" class="podlinkpod"
>&#34;Naming Conventions and Name Space&#34;</a>. DBI extension modules can be found at <a href="http://search.cpan.org/search?mode=module&#38;query=DBIx" class="podlinkurl"
>http://search.cpan.org/search?mode=module&#38;query=DBIx</a>. And all modules related to the DBI can be found at <a href="http://search.cpan.org/search?query=DBI&#38;mode=all" class="podlinkurl"
>http://search.cpan.org/search?query=DBI&#38;mode=all</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The DBI is a database access module for the Perl programming language. It defines a set of methods, variables, and conventions that provide a consistent database interface, independent of the actual database being used.</p>

<p>It is important to remember that the DBI is just an interface. The DBI is a layer of &#34;glue&#34; between an application and one or more database <i>driver</i> modules. It is the driver modules which do most of the real work. The DBI provides a standard interface and framework for the drivers to operate within.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Architecture_of_a_DBI_Application"
>Architecture of a DBI Application</a></h2>

<pre class="sh_perl">             |&#60;- Scope of DBI -&#62;|
                  .-.   .--------------.   .-------------.
  .-------.       | |---| XYZ Driver   |---| XYZ Engine  |
  | Perl  |       | |   `--------------&#39;   `-------------&#39;
  | script|  |A|  |D|   .--------------.   .-------------.
  | using |--|P|--|B|---|Oracle Driver |---|Oracle Engine|
  | DBI   |  |I|  |I|   `--------------&#39;   `-------------&#39;
  | API   |       | |...
  |methods|       | |... Other drivers
  `-------&#39;       | |...
                  `-&#39;</pre>

<p>The API, or Application Programming Interface, defines the call interface and variables for Perl scripts to use. The API is implemented by the Perl DBI extension.</p>

<p>The DBI &#34;dispatches&#34; the method calls to the appropriate driver for actual execution. The DBI is also responsible for the dynamic loading of drivers, error checking and handling, providing default implementations for methods, and many other non-database specific duties.</p>

<p>Each driver contains implementations of the DBI methods using the private interface functions of the corresponding database engine. Only authors of sophisticated/multi-database applications or generic library functions need be concerned with drivers.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Notation_and_Conventions"
>Notation and Conventions</a></h2>

<p>The following conventions are used in this document:</p>

<pre class="sh_perl">  $dbh    Database handle object
  $sth    Statement handle object
  $drh    Driver handle object (rarely seen or used in applications)
  $h      Any of the handle types above ($dbh, $sth, or $drh)
  $rc     General Return Code  (boolean: true=ok, false=error)
  $rv     General Return Value (typically an integer)
  @ary    List of values returned from the database, typically a row of data
  $rows   Number of rows processed (if available, else -1)
  $fh     A filehandle
  undef   NULL values are represented by undefined values in Perl
  \%attr  Reference to a hash of attribute values passed to methods</pre>

<p>Note that Perl will automatically destroy database and statement handle objects if all references to them are deleted.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Outline_Usage"
>Outline Usage</a></h2>

<p>To use DBI, first you need to load the DBI module:</p>

<pre class="sh_perl">  use DBI;
  use strict;</pre>

<p>(The <code>use strict;</code> isn&#39;t required but is strongly recommended.)</p>

<p>Then you need to <a href="#connect" class="podlinkpod"
>&#34;connect&#34;</a> to your data source and get a <i>handle</i> for that connection:</p>

<pre class="sh_perl">  $dbh = DBI-&#62;connect($dsn, $user, $password,
                      { RaiseError =&#62; 1, AutoCommit =&#62; 0 });</pre>

<p>Since connecting can be expensive, you generally just connect at the start of your program and disconnect at the end.</p>

<p>Explicitly defining the required <code>AutoCommit</code> behaviour is strongly recommended and may become mandatory in a later version. This determines whether changes are automatically committed to the database when executed, or need to be explicitly committed later.</p>

<p>The DBI allows an application to &#34;prepare&#34; statements for later execution. A prepared statement is identified by a statement handle held in a Perl variable. We&#39;ll call the Perl variable <code>$sth</code> in our examples.</p>

<p>The typical method call sequence for a <code>SELECT</code> statement is:</p>

<pre class="sh_perl">  prepare,
    execute, fetch, fetch, ...
    execute, fetch, fetch, ...
    execute, fetch, fetch, ...</pre>

<p>for example:</p>

<pre class="sh_perl">  $sth = $dbh-&#62;prepare(&#34;SELECT foo, bar FROM table WHERE baz=?&#34;);

  $sth-&#62;execute( $baz );

  while ( @row = $sth-&#62;fetchrow_array ) {
    print &#34;@row\n&#34;;
  }</pre>

<p>The typical method call sequence for a <i>non</i>-<code>SELECT</code> statement is:</p>

<pre class="sh_perl">  prepare,
    execute,
    execute,
    execute.</pre>

<p>for example:</p>

<pre class="sh_perl">  $sth = $dbh-&#62;prepare(&#34;INSERT INTO table(foo,bar,baz) VALUES (?,?,?)&#34;);

  while(&#60;CSV&#62;) {
    chomp;
    my ($foo,$bar,$baz) = split /,/;
        $sth-&#62;execute( $foo, $bar, $baz );
  }</pre>

<p>The <code>do()</code> method can be used for non repeated <i>non</i>-<code>SELECT</code> statement (or with drivers that don&#39;t support placeholders):</p>

<pre class="sh_perl">  $rows_affected = $dbh-&#62;do(&#34;UPDATE your_table SET foo = foo + 1&#34;);</pre>

<p>To commit your changes to the database (when <a href="#AutoCommit" class="podlinkpod"
>&#34;AutoCommit&#34;</a> is off):</p>

<pre class="sh_perl">  $dbh-&#62;commit;  # or call $dbh-&#62;rollback; to undo changes</pre>

<p>Finally, when you have finished working with the data source, you should <a href="#disconnect" class="podlinkpod"
>&#34;disconnect&#34;</a> from it:</p>

<pre class="sh_perl">  $dbh-&#62;disconnect;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="General_Interface_Rules_&#38;_Caveats"
>General Interface Rules &#38; Caveats</a></h2>

<p>The DBI does not have a concept of a &#34;current session&#34;. Every session has a handle object (i.e., a <code>$dbh</code>) returned from the <code>connect</code> method. That handle object is used to invoke database related methods.</p>

<p>Most data is returned to the Perl script as strings. (Null values are returned as <code>undef</code>.) This allows arbitrary precision numeric data to be handled without loss of accuracy. Beware that Perl may not preserve the same accuracy when the string is used as a number.</p>

<p>Dates and times are returned as character strings in the current default format of the corresponding database engine. Time zone effects are database/driver dependent.</p>

<p>Perl supports binary data in Perl strings, and the DBI will pass binary data to and from the driver without change. It is up to the driver implementors to decide how they wish to handle such binary data.</p>

<p>Perl supports two kinds of strings: Unicode (utf8 internally) and non-Unicode (defaults to iso-8859-1 if forced to assume an encoding). Drivers should accept both kinds of strings and, if required, convert them to the character set of the database being used. Similarly, when fetching from the database character data that isn&#39;t iso-8859-1 the driver should convert it into utf8.</p>

<p>Multiple SQL statements may not be combined in a single statement handle (<code>$sth</code>), although some databases and drivers do support this (notably Sybase and SQL Server).</p>

<p>Non-sequential record reads are not supported in this version of the DBI. In other words, records can only be fetched in the order that the database returned them, and once fetched they are forgotten.</p>

<p>Positioned updates and deletes are not directly supported by the DBI. See the description of the <code>CursorName</code> attribute for an alternative.</p>

<p>Individual driver implementors are free to provide any private functions and/or handle attributes that they feel are useful. Private driver functions can be invoked using the DBI <code>func()</code> method. Private driver attributes are accessed just like standard attributes.</p>

<p>Many methods have an optional <code>\%attr</code> parameter which can be used to pass information to the driver implementing the method. Except where specifically documented, the <code>\%attr</code> parameter can only be used to pass driver specific hints. In general, you can ignore <code>\%attr</code> parameters or pass it as <code>undef</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Naming_Conventions_and_Name_Space"
>Naming Conventions and Name Space</a></h2>

<p>The DBI package and all packages below it (<code>DBI::*</code>) are reserved for use by the DBI. Extensions and related modules use the <code>DBIx::</code> namespace (see <a href="http://www.perl.com/CPAN/modules/by-module/DBIx/" class="podlinkurl"
>http://www.perl.com/CPAN/modules/by-module/DBIx/</a>). Package names beginning with <code>DBD::</code> are reserved for use by DBI database drivers. All environment variables used by the DBI or by individual DBDs begin with &#34;<code>DBI_</code>&#34; or &#34;<code>DBD_</code>&#34;.</p>

<p>The letter case used for attribute names is significant and plays an important part in the portability of DBI scripts. The case of the attribute name is used to signify who defined the meaning of that name and its values.</p>

<pre class="sh_perl">  Case of name  Has a meaning defined by
  ------------  ------------------------
  UPPER_CASE    Standards, e.g.,  X/Open, ISO SQL92 etc (portable)
  MixedCase     DBI API (portable), underscores are not used.
  lower_case    Driver or database engine specific (non-portable)</pre>

<p>It is of the utmost importance that Driver developers only use lowercase attribute names when defining private attributes. Private attribute names must be prefixed with the driver name or suitable abbreviation (e.g., &#34;<code>ora_</code>&#34; for Oracle, &#34;<code>ing_</code>&#34; for Ingres, etc).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="SQL_-_A_Query_Language"
>SQL - A Query Language</a></h2>

<p>Most DBI drivers require applications to use a dialect of SQL (Structured Query Language) to interact with the database engine. The <a href="#Standards_Reference_Information" class="podlinkpod"
>&#34;Standards Reference Information&#34;</a> section provides links to useful information about SQL.</p>

<p>The DBI itself does not mandate or require any particular language to be used; it is language independent. In ODBC terms, the DBI is in &#34;pass-thru&#34; mode, although individual drivers might not be. The only requirement is that queries and other statements must be expressed as a single string of characters passed as the first argument to the <a href="#prepare" class="podlinkpod"
>&#34;prepare&#34;</a> or <a href="#do" class="podlinkpod"
>&#34;do&#34;</a> methods.</p>

<p>For an interesting diversion on the <i>real</i> history of RDBMS and SQL, from the people who made it happen, see:</p>

<pre class="sh_perl">  <a href="http://www.mcjones.org/System_R/SQL_Reunion_95/sqlr95.html" class="podlinkurl"
>http://www.mcjones.org/System_R/SQL_Reunion_95/sqlr95.html</a></pre>

<p>Follow the &#34;Full Contents&#34; then &#34;Intergalactic dataspeak&#34; links for the SQL history.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Placeholders_and_Bind_Values"
>Placeholders and Bind Values</a></h2>

<p>Some drivers support placeholders and bind values. <i>Placeholders</i>, also called parameter markers, are used to indicate values in a database statement that will be supplied later, before the prepared statement is executed. For example, an application might use the following to insert a row of data into the SALES table:</p>

<pre class="sh_perl">  INSERT INTO sales (product_code, qty, price) VALUES (?, ?, ?)</pre>

<p>or the following, to select the description for a product:</p>

<pre class="sh_perl">  SELECT description FROM products WHERE product_code = ?</pre>

<p>The <code>?</code> characters are the placeholders. The association of actual values with placeholders is known as <i>binding</i>, and the values are referred to as <i>bind values</i>. Note that the <code>?</code> is not enclosed in quotation marks, even when the placeholder represents a string.</p>

<p>Some drivers also allow placeholders like <code>:</code><i>name</i> and <code>:</code><i>N</i> (e.g., <code>:1</code>, <code>:2</code>, and so on) in addition to <code>?</code>, but their use is not portable.</p>

<p>If the <code>:</code><i>N</i> form of placeholder is supported by the driver you&#39;re using, then you should be able to use either <a href="#bind_param" class="podlinkpod"
>&#34;bind_param&#34;</a> or <a href="#execute" class="podlinkpod"
>&#34;execute&#34;</a> to bind values. Check your driver documentation.</p>

<p>With most drivers, placeholders can&#39;t be used for any element of a statement that would prevent the database server from validating the statement and creating a query execution plan for it. For example:</p>

<pre class="sh_perl">  &#34;SELECT name, age FROM ?&#34;         # wrong (will probably fail)
  &#34;SELECT name, ?   FROM people&#34;    # wrong (but may not &#39;fail&#39;)</pre>

<p>Also, placeholders can only represent single scalar values. For example, the following statement won&#39;t work as expected for more than one value:</p>

<pre class="sh_perl">  &#34;SELECT name, age FROM people WHERE name IN (?)&#34;    # wrong
  &#34;SELECT name, age FROM people WHERE name IN (?,?)&#34;  # two names</pre>

<p>When using placeholders with the SQL <code>LIKE</code> qualifier, you must remember that the placeholder substitutes for the whole string. So you should use &#34;<code>... LIKE ? ...</code>&#34; and include any wildcard characters in the value that you bind to the placeholder.</p>

<p><b>NULL Values</b></p>

<p>Undefined values, or <code>undef</code>, are used to indicate NULL values. You can insert and update columns with a NULL value as you would a non-NULL value. These examples insert and update the column <code>age</code> with a NULL value:</p>

<pre class="sh_perl">  $sth = $dbh-&#62;prepare(qq{
    INSERT INTO people (fullname, age) VALUES (?, ?)
  });
  $sth-&#62;execute(&#34;Joe Bloggs&#34;, undef);

  $sth = $dbh-&#62;prepare(qq{
    UPDATE people SET age = ? WHERE fullname = ?
  });
  $sth-&#62;execute(undef, &#34;Joe Bloggs&#34;);</pre>

<p>However, care must be taken when trying to use NULL values in a <code>WHERE</code> clause. Consider:</p>

<pre class="sh_perl">  SELECT fullname FROM people WHERE age = ?</pre>

<p>Binding an <code>undef</code> (NULL) to the placeholder will <i>not</i> select rows which have a NULL <code>age</code>! At least for database engines that conform to the SQL standard. Refer to the SQL manual for your database engine or any SQL book for the reasons for this. To explicitly select NULLs you have to say &#34;<code>WHERE age IS NULL</code>&#34;.</p>

<p>A common issue is to have a code fragment handle a value that could be either <code>defined</code> or <code>undef</code> (non-NULL or NULL) at runtime. A simple technique is to prepare the appropriate statement as needed, and substitute the placeholder for non-NULL cases:</p>

<pre class="sh_perl">  $sql_clause = defined $age? &#34;age = ?&#34; : &#34;age IS NULL&#34;;
  $sth = $dbh-&#62;prepare(qq{
    SELECT fullname FROM people WHERE $sql_clause
  });
  $sth-&#62;execute(defined $age ? $age : ());</pre>

<p>The following technique illustrates qualifying a <code>WHERE</code> clause with several columns, whose associated values (<code>defined</code> or <code>undef</code>) are in a hash %h:</p>

<pre class="sh_perl">  for my $col (&#34;age&#34;, &#34;phone&#34;, &#34;email&#34;) {
    if (defined $h{$col}) {
      push @sql_qual, &#34;$col = ?&#34;;
      push @sql_bind, $h{$col};
    }
    else {
      push @sql_qual, &#34;$col IS NULL&#34;;
    }
  }
  $sql_clause = join(&#34; AND &#34;, @sql_qual);
  $sth = $dbh-&#62;prepare(qq{
      SELECT fullname FROM people WHERE $sql_clause
  });
  $sth-&#62;execute(@sql_bind);</pre>

<p>The techniques above call prepare for the SQL statement with each call to execute. Because calls to prepare() can be expensive, performance can suffer when an application iterates many times over statements like the above.</p>

<p>A better solution is a single <code>WHERE</code> clause that supports both NULL and non-NULL comparisons. Its SQL statement would need to be prepared only once for all cases, thus improving performance. Several examples of <code>WHERE</code> clauses that support this are presented below. But each example lacks portability, robustness, or simplicity. Whether an example is supported on your database engine depends on what SQL extensions it provides, and where it supports the <code>?</code> placeholder in a statement.</p>

<pre class="sh_perl">  0)  age = ?
  1)  NVL(age, xx) = NVL(?, xx)
  2)  ISNULL(age, xx) = ISNULL(?, xx)
  3)  DECODE(age, ?, 1, 0) = 1
  4)  age = ? OR (age IS NULL AND ? IS NULL)
  5)  age = ? OR (age IS NULL AND SP_ISNULL(?) = 1)
  6)  age = ? OR (age IS NULL AND ? = 1)</pre>

<p>Statements formed with the above <code>WHERE</code> clauses require execute statements as follows. The arguments are required, whether their values are <code>defined</code> or <code>undef</code>.</p>

<pre class="sh_perl">  0,1,2,3)  $sth-&#62;execute($age);
  4,5)      $sth-&#62;execute($age, $age);
  6)        $sth-&#62;execute($age, defined($age) ? 0 : 1);</pre>

<p>Example 0 should not work (as mentioned earlier), but may work on a few database engines anyway (e.g. Sybase). Example 0 is part of examples 4, 5, and 6, so if example 0 works, these other examples may work, even if the engine does not properly support the right hand side of the <code>OR</code> expression.</p>

<p>Examples 1 and 2 are not robust: they require that you provide a valid column value xx (e.g. &#39;~&#39;) which is not present in any row. That means you must have some notion of what data won&#39;t be stored in the column, and expect clients to adhere to that.</p>

<p>Example 5 requires that you provide a stored procedure (SP_ISNULL in this example) that acts as a function: it checks whether a value is null, and returns 1 if it is, or 0 if not.</p>

<p>Example 6, the least simple, is probably the most portable, i.e., it should work with with most, if not all, database engines.</p>

<p>Here is a table that indicates which examples above are known to work on various database engines:</p>

<pre class="sh_perl">                   -----Examples------
                   0  1  2  3  4  5  6
                   -  -  -  -  -  -  -
  Oracle 9         N  Y  N  Y  Y  ?  Y
  Informix IDS 9   N  N  N  Y  N  Y  Y
  MS SQL           N  N  Y  N  Y  ?  Y
  Sybase           Y  N  N  N  N  N  Y
  AnyData,DBM,CSV  Y  N  N  N  Y  Y* Y
  SQLite 3.3       N  N  N  N  Y  N  N
  MSAccess         N  N  N  N  Y  N  Y</pre>

<p>* Works only because Example 0 works.</p>

<p>DBI provides a sample perl script that will test the examples above on your database engine and tell you which ones work. It is located in the <em>ex/</em> subdirectory of the DBI source distribution, or here: <a href="http://svn.perl.org/modules/dbi/trunk/ex/perl_dbi_nulls_test.pl" class="podlinkurl"
>http://svn.perl.org/modules/dbi/trunk/ex/perl_dbi_nulls_test.pl</a> Please use the script to help us fill-in and maintain this table.</p>

<p><b>Performance</b></p>

<p>Without using placeholders, the insert statement shown previously would have to contain the literal values to be inserted and would have to be re-prepared and re-executed for each row. With placeholders, the insert statement only needs to be prepared once. The bind values for each row can be given to the <code>execute</code> method each time it&#39;s called. By avoiding the need to re-prepare the statement for each row, the application typically runs many times faster. Here&#39;s an example:</p>

<pre class="sh_perl">  my $sth = $dbh-&#62;prepare(q{
    INSERT INTO sales (product_code, qty, price) VALUES (?, ?, ?)
  }) or die $dbh-&#62;errstr;
  while (&#60;&#62;) {
      chomp;
      my ($product_code, $qty, $price) = split /,/;
      $sth-&#62;execute($product_code, $qty, $price) or die $dbh-&#62;errstr;
  }
  $dbh-&#62;commit or die $dbh-&#62;errstr;</pre>

<p>See <a href="#execute" class="podlinkpod"
>&#34;execute&#34;</a> and <a href="#bind_param" class="podlinkpod"
>&#34;bind_param&#34;</a> for more details.</p>

<p>The <code>q{...}</code> style quoting used in this example avoids clashing with quotes that may be used in the SQL statement. Use the double-quote like <code>qq{...}</code> operator if you want to interpolate variables into the string. See <a href="/perldoc?perlop#Quote_and_Quote-like_Operators" class="podlinkpod"
>&#34;Quote and Quote-like Operators&#34; in perlop</a> for more details.</p>

<p>See also the <a href="#bind_columns" class="podlinkpod"
>&#34;bind_columns&#34;</a> method, which is used to associate Perl variables with the output columns of a <code>SELECT</code> statement.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="THE_DBI_PACKAGE_AND_CLASS"
>THE DBI PACKAGE AND CLASS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>In this section, we cover the DBI class methods, utility functions, and the dynamic attributes associated with generic DBI handles.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBI_Constants"
>DBI Constants</a></h2>

<p>Constants representing the values of the SQL standard types can be imported individually by name, or all together by importing the special <code>:sql_types</code> tag.</p>

<p>The names and values of all the defined SQL standard types can be produced like this:</p>

<pre class="sh_perl">  foreach (@{ $DBI::EXPORT_TAGS{sql_types} }) {
    printf &#34;%s=%d\n&#34;, $_, &#38;{&#34;DBI::$_&#34;};
  }</pre>

<p>These constants are defined by SQL/CLI, ODBC or both. <code>SQL_BIGINT</code> is (currently) omitted, because SQL/CLI and ODBC provide conflicting codes.</p>

<p>See the <a href="#type_info" class="podlinkpod"
>&#34;type_info&#34;</a>, <a href="#type_info_all" class="podlinkpod"
>&#34;type_info_all&#34;</a>, and <a href="#bind_param" class="podlinkpod"
>&#34;bind_param&#34;</a> methods for possible uses.</p>

<p>Note that just because the DBI defines a named constant for a given data type doesn&#39;t mean that drivers will support that data type.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBI_Class_Methods"
>DBI Class Methods</a></h2>

<p>The following methods are provided by the DBI class:</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="parse_dsn"
><code>parse_dsn</code></a></h3>

<pre class="sh_perl">  ($scheme, $driver, $attr_string, $attr_hash, $driver_dsn) = DBI-&#62;parse_dsn($dsn)
      or die &#34;Can&#39;t parse DBI DSN &#39;$dsn&#39;&#34;;</pre>

<p>Breaks apart a DBI Data Source Name (DSN) and returns the individual parts. If $dsn doesn&#39;t contain a valid DSN then parse_dsn() returns an empty list.</p>

<p>$scheme is the first part of the DSN and is currently always &#39;dbi&#39;. $driver is the driver name, possibly defaulted to $ENV{DBI_DRIVER}, and may be undefined. $attr_string is the contents of the optional attribute string, which may be undefined. If $attr_string is not empty then $attr_hash is a reference to a hash containing the parsed attribute names and values. $driver_dsn is the last part of the DBI DSN string. For example:</p>

<pre class="sh_perl">  ($scheme, $driver, $attr_string, $attr_hash, $driver_dsn)
      = DBI-&#62;parse_dsn(&#34;DBI:MyDriver(RaiseError=&#62;1):db=test;port=42&#34;);
  $scheme      = &#39;dbi&#39;;
  $driver      = &#39;MyDriver&#39;;
  $attr_string = &#39;RaiseError=&#62;1&#39;;
  $attr_hash   = { &#39;RaiseError&#39; =&#62; &#39;1&#39; };
  $driver_dsn  = &#39;db=test;port=42&#39;;</pre>

<p>The parse_dsn() method was added in DBI 1.43.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="connect"
><code>connect</code></a></h3>

<pre class="sh_perl">  $dbh = DBI-&#62;connect($data_source, $username, $password)
            or die $DBI::errstr;
  $dbh = DBI-&#62;connect($data_source, $username, $password, \%attr)
            or die $DBI::errstr;</pre>

<p>Establishes a database connection, or session, to the requested <code>$data_source</code>. Returns a database handle object if the connection succeeds. Use <code>$dbh-&#62;disconnect</code> to terminate the connection.</p>

<p>If the connect fails (see below), it returns <code>undef</code> and sets both <code>$DBI::err</code> and <code>$DBI::errstr</code>. (It does <i>not</i> explicitly set <code>$!</code>.) You should generally test the return status of <code>connect</code> and <code>print $DBI::errstr</code> if it has failed.</p>

<p>Multiple simultaneous connections to multiple databases through multiple drivers can be made via the DBI. Simply make one <code>connect</code> call for each database and keep a copy of each returned database handle.</p>

<p>The <code>$data_source</code> value must begin with &#34;<code>dbi:</code><i>driver_name</i><code>:</code>&#34;. The <i>driver_name</i> specifies the driver that will be used to make the connection. (Letter case is significant.)</p>

<p>As a convenience, if the <code>$data_source</code> parameter is undefined or empty, the DBI will substitute the value of the environment variable <code>DBI_DSN</code>. If just the <i>driver_name</i> part is empty (i.e., the <code>$data_source</code> prefix is &#34;<code>dbi::</code>&#34;), the environment variable <code>DBI_DRIVER</code> is used. If neither variable is set, then <code>connect</code> dies.</p>

<p>Examples of <code>$data_source</code> values are:</p>

<pre class="sh_perl">  dbi:DriverName:database_name
  dbi:DriverName:database_name@hostname:port
  dbi:DriverName:database=database_name;host=hostname;port=port</pre>

<p>There is <i>no standard</i> for the text following the driver name. Each driver is free to use whatever syntax it wants. The only requirement the DBI makes is that all the information is supplied in a single string. You must consult the documentation for the drivers you are using for a description of the syntax they require.</p>

<p>It is recommended that drivers support the ODBC style, shown in the last example above. It is also recommended that that they support the three common names &#39;<code>host</code>&#39;, &#39;<code>port</code>&#39;, and &#39;<code>database</code>&#39; (plus &#39;<code>db</code>&#39; as an alias for <code>database</code>). This simplifies automatic construction of basic DSNs: <code>&#34;dbi:$driver:database=$db;host=$host;port=$port&#34;</code>. Drivers should aim to &#39;do something reasonable&#39; when given a DSN in this form, but if any part is meaningless for that driver (such as &#39;port&#39; for Informix) it should generate an error if that part is not empty.</p>

<p>If the environment variable <code>DBI_AUTOPROXY</code> is defined (and the driver in <code>$data_source</code> is not &#34;<code>Proxy</code>&#34;) then the connect request will automatically be changed to:</p>

<pre class="sh_perl">  $ENV{DBI_AUTOPROXY};dsn=$data_source</pre>

<p><code>DBI_AUTOPROXY</code> is typically set as &#34;<code>dbi:Proxy:hostname=...;port=...</code>&#34;. If $ENV{DBI_AUTOPROXY} doesn&#39;t begin with &#39;<code>dbi:</code>&#39; then &#34;dbi:Proxy:&#34; will be prepended to it first. See the DBD::Proxy documentation for more details.</p>

<p>If <code>$username</code> or <code>$password</code> are undefined (rather than just empty), then the DBI will substitute the values of the <code>DBI_USER</code> and <code>DBI_PASS</code> environment variables, respectively. The DBI will warn if the environment variables are not defined. However, the everyday use of these environment variables is not recommended for security reasons. The mechanism is primarily intended to simplify testing. See below for alternative way to specify the username and password.</p>

<p><code>DBI-&#62;connect</code> automatically installs the driver if it has not been installed yet. Driver installation either returns a valid driver handle, or it <i>dies</i> with an error message that includes the string &#34;<code>install_driver</code>&#34; and the underlying problem. So <code>DBI-&#62;connect</code> will die on a driver installation failure and will only return <code>undef</code> on a connect failure, in which case <code>$DBI::errstr</code> will hold the error message. Use <code>eval { ... }</code> if you need to catch the &#34;<code>install_driver</code>&#34; error.</p>

<p>The <code>$data_source</code> argument (with the &#34;<code>dbi:...:</code>&#34; prefix removed) and the <code>$username</code> and <code>$password</code> arguments are then passed to the driver for processing. The DBI does not define any interpretation for the contents of these fields. The driver is free to interpret the <code>$data_source</code>, <code>$username</code>, and <code>$password</code> fields in any way, and supply whatever defaults are appropriate for the engine being accessed. (Oracle, for example, uses the ORACLE_SID and TWO_TASK environment variables if no <code>$data_source</code> is specified.)</p>

<p>The <code>AutoCommit</code> and <code>PrintError</code> attributes for each connection default to &#34;on&#34;. (See <a href="#AutoCommit" class="podlinkpod"
>&#34;AutoCommit&#34;</a> and <a href="#PrintError" class="podlinkpod"
>&#34;PrintError&#34;</a> for more information.) However, it is strongly recommended that you explicitly define <code>AutoCommit</code> rather than rely on the default. The <code>PrintWarn</code> attribute defaults to on if $^W is true, i.e., perl is running with warnings enabled.</p>

<p>The <code>\%attr</code> parameter can be used to alter the default settings of <code>PrintError</code>, <code>RaiseError</code>, <code>AutoCommit</code>, and other attributes. For example:</p>

<pre class="sh_perl">  $dbh = DBI-&#62;connect($data_source, $user, $pass, {
        PrintError =&#62; 0,
        AutoCommit =&#62; 0
  });</pre>

<p>The username and password can also be specified using the attributes <code>Username</code> and <code>Password</code>, in which case they take precedence over the <code>$username</code> and <code>$password</code> parameters.</p>

<p>You can also define connection attribute values within the <code>$data_source</code> parameter. For example:</p>

<pre class="sh_perl">  dbi:DriverName(PrintWarn=&#62;1,PrintError=&#62;0,Taint=&#62;1):...</pre>

<p>Individual attributes values specified in this way take precedence over any conflicting values specified via the <code>\%attr</code> parameter to <code>connect</code>.</p>

<p>The <code>dbi_connect_method</code> attribute can be used to specify which driver method should be called to establish the connection. The only useful values are &#39;connect&#39;, &#39;connect_cached&#39;, or some specialized case like &#39;Apache::DBI::connect&#39; (which is automatically the default when running within Apache).</p>

<p>Where possible, each session (<code>$dbh</code>) is independent from the transactions in other sessions. This is useful when you need to hold cursors open across transactions--for example, if you use one session for your long lifespan cursors (typically read-only) and another for your short update transactions.</p>

<p>For compatibility with old DBI scripts, the driver can be specified by passing its name as the fourth argument to <code>connect</code> (instead of <code>\%attr</code>):</p>

<pre class="sh_perl">  $dbh = DBI-&#62;connect($data_source, $user, $pass, $driver);</pre>

<p>In this &#34;old-style&#34; form of <code>connect</code>, the <code>$data_source</code> should not start with &#34;<code>dbi:driver_name:</code>&#34;. (If it does, the embedded driver_name will be ignored). Also note that in this older form of <code>connect</code>, the <code>$dbh-&#62;{AutoCommit}</code> attribute is <i>undefined</i>, the <code>$dbh-&#62;{PrintError}</code> attribute is off, and the old <code>DBI_DBNAME</code> environment variable is checked if <code>DBI_DSN</code> is not defined. Beware that this &#34;old-style&#34; <code>connect</code> will soon be withdrawn in a future version of DBI.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="connect_cached"
><code>connect_cached</code></a></h3>

<pre class="sh_perl">  $dbh = DBI-&#62;connect_cached($data_source, $username, $password)
            or die $DBI::errstr;
  $dbh = DBI-&#62;connect_cached($data_source, $username, $password, \%attr)
            or die $DBI::errstr;</pre>

<p><code>connect_cached</code> is like <a href="#connect" class="podlinkpod"
>&#34;connect&#34;</a>, except that the database handle returned is also stored in a hash associated with the given parameters. If another call is made to <code>connect_cached</code> with the same parameter values, then the corresponding cached <code>$dbh</code> will be returned if it is still valid. The cached database handle is replaced with a new connection if it has been disconnected or if the <code>ping</code> method fails.</p>

<p>Note that the behaviour of this method differs in several respects from the behaviour of persistent connections implemented by Apache::DBI. However, if Apache::DBI is loaded then <code>connect_cached</code> will use it.</p>

<p>Caching connections can be useful in some applications, but it can also cause problems, such as too many connections, and so should be used with care. In particular, avoid changing the attributes of a database handle created via connect_cached() because it will affect other code that may be using the same handle. When connect_cached() returns a handle the attributes will be reset to their initial values. This can cause problems, especially with the <code>AutoCommit</code> attribute.</p>

<p>Where multiple separate parts of a program are using connect_cached() to connect to the same database with the same (initial) attributes it is a good idea to add a private attribute to the connect_cached() call to effectively limit the scope of the caching. For example:</p>

<pre class="sh_perl">  DBI-&#62;connect_cached(..., { private_foo_cachekey =&#62; &#34;Bar&#34;, ... });</pre>

<p>Handles returned from that connect_cached() call will only be returned by other connect_cached() call elsewhere in the code if those other calls also pass in the same attribute values, including the private one. (I&#39;ve used <code>private_foo_cachekey</code> here as an example, you can use any attribute name with a <code>private_</code> prefix.)</p>

<p>Taking that one step further, you can limit a particular connect_cached() call to return handles unique to that one place in the code by setting the private attribute to a unique value for that place:</p>

<pre class="sh_perl">  DBI-&#62;connect_cached(..., { private_foo_cachekey =&#62; __FILE__.__LINE__, ... });</pre>

<p>By using a private attribute you still get connection caching for the individual calls to connect_cached() but, by making separate database connections for separate parts of the code, the database handles are isolated from any attribute changes made to other handles.</p>

<p>The cache can be accessed (and cleared) via the <a href="#CachedKids" class="podlinkpod"
>&#34;CachedKids&#34;</a> attribute:</p>

<pre class="sh_perl">  my $CachedKids_hashref = $dbh-&#62;{Driver}-&#62;{CachedKids};
  %$CachedKids_hashref = () if $CachedKids_hashref;</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="available_drivers"
><code>available_drivers</code></a></h3>

<pre class="sh_perl">  @ary = DBI-&#62;available_drivers;
  @ary = DBI-&#62;available_drivers($quiet);</pre>

<p>Returns a list of all available drivers by searching for <code>DBD::*</code> modules through the directories in <code>@INC</code>. By default, a warning is given if some drivers are hidden by others of the same name in earlier directories. Passing a true value for <code>$quiet</code> will inhibit the warning.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="installed_drivers"
><code>installed_drivers</code></a></h3>

<pre class="sh_perl">  %drivers = DBI-&#62;installed_drivers();</pre>

<p>Returns a list of driver name and driver handle pairs for all drivers &#39;installed&#39; (loaded) into the current process. The driver name does not include the &#39;DBD::&#39; prefix.</p>

<p>To get a list of all drivers available in your perl installation you can use <a href="#available_drivers" class="podlinkpod"
>&#34;available_drivers&#34;</a>.</p>

<p>Added in DBI 1.49.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="installed_versions"
><code>installed_versions</code></a></h3>

<pre class="sh_perl">  DBI-&#62;installed_versions;
  @ary  = DBI-&#62;installed_versions;
  %hash = DBI-&#62;installed_versions;</pre>

<p>Calls available_drivers() and attempts to load each of them in turn using install_driver(). For each load that succeeds the driver name and version number are added to a hash. When running under <a href="/~timb/DBI-1.620/lib/DBI/PurePerl.pm" class="podlinkpod"
>DBI::PurePerl</a> drivers which appear not be pure-perl are ignored.</p>

<p>When called in array context the list of successfully loaded drivers is returned (without the &#39;DBD::&#39; prefix).</p>

<p>When called in scalar context a reference to the hash is returned and the hash will also contain other entries for the <code>DBI</code> version, <code>OS</code> name, etc.</p>

<p>When called in a void context the installed_versions() method will print out a formatted list of the hash contents, one per line.</p>

<p>Due to the potentially high memory cost and unknown risks of loading in an unknown number of drivers that just happen to be installed on the system, this method is not recommended for general use. Use available_drivers() instead.</p>

<p>The installed_versions() method is primarily intended as a quick way to see from the command line what&#39;s installed. For example:</p>

<pre class="sh_perl">  perl -MDBI -e &#39;DBI-&#62;installed_versions&#39;</pre>

<p>The installed_versions() method was added in DBI 1.38.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="data_sources"
><code>data_sources</code></a></h3>

<pre class="sh_perl">  @ary = DBI-&#62;data_sources($driver);
  @ary = DBI-&#62;data_sources($driver, \%attr);</pre>

<p>Returns a list of data sources (databases) available via the named driver. If <code>$driver</code> is empty or <code>undef</code>, then the value of the <code>DBI_DRIVER</code> environment variable is used.</p>

<p>The driver will be loaded if it hasn&#39;t been already. Note that if the driver loading fails then data_sources() <i>dies</i> with an error message that includes the string &#34;<code>install_driver</code>&#34; and the underlying problem.</p>

<p>Data sources are returned in a form suitable for passing to the <a href="#connect" class="podlinkpod"
>&#34;connect&#34;</a> method (that is, they will include the &#34;<code>dbi:$driver:</code>&#34; prefix).</p>

<p>Note that many drivers have no way of knowing what data sources might be available for it. These drivers return an empty or incomplete list or may require driver-specific attributes.</p>

<p>There is also a data_sources() method defined for database handles.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="trace"
><code>trace</code></a></h3>

<pre class="sh_perl">  DBI-&#62;trace($trace_setting)
  DBI-&#62;trace($trace_setting, $trace_filename)
  DBI-&#62;trace($trace_setting, $trace_filehandle)
  $trace_setting = DBI-&#62;trace;</pre>

<p>The <code>DBI-&#62;trace</code> method sets the <i>global default</i> trace settings and returns the <i>previous</i> trace settings. It can also be used to change where the trace output is sent.</p>

<p>There&#39;s a similar method, <code>$h-&#62;trace</code>, which sets the trace settings for the specific handle it&#39;s called on.</p>

<p>See the <a href="#TRACING" class="podlinkpod"
>&#34;TRACING&#34;</a> section for full details about the DBI&#39;s powerful tracing facilities.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="visit_handles"
><code>visit_handles</code></a></h3>

<pre class="sh_perl">  DBI-&#62;visit_handles( $coderef );
  DBI-&#62;visit_handles( $coderef, $info );</pre>

<p>Where $coderef is a reference to a subroutine and $info is an arbitrary value which, if undefined, defaults to a reference to an empty hash. Returns $info.</p>

<p>For each installed driver handle, if any, $coderef is invoked as:</p>

<pre class="sh_perl">  $coderef-&#62;($driver_handle, $info);</pre>

<p>If the execution of $coderef returns a true value then <a href="#visit_child_handles" class="podlinkpod"
>&#34;visit_child_handles&#34;</a> is called on that child handle and passed the returned value as $info.</p>

<p>For example:</p>

<pre class="sh_perl">  my $info = $dbh-&#62;{Driver}-&#62;visit_child_handles(sub {
      my ($h, $info) = @_;
      ++$info-&#62;{ $h-&#62;{Type} }; # count types of handles (dr/db/st)
      return $info; # visit kids
  });</pre>

<p>See also <a href="#visit_child_handles" class="podlinkpod"
>&#34;visit_child_handles&#34;</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBI_Utility_Functions"
>DBI Utility Functions</a></h2>

<p>In addition to the DBI methods listed in the previous section, the DBI package also provides several utility functions.</p>

<p>These can be imported into your code by listing them in the <code>use</code> statement. For example:</p>

<pre class="sh_perl">  use DBI qw(neat data_diff);</pre>

<p>Alternatively, all these utility functions (except hash) can be imported using the <code>:utils</code> import tag. For example:</p>

<pre class="sh_perl">  use DBI qw(:utils);</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="data_string_desc"
><code>data_string_desc</code></a></h3>

<pre class="sh_perl">  $description = data_string_desc($string);</pre>

<p>Returns an informal description of the string. For example:</p>

<pre class="sh_perl">  UTF8 off, ASCII, 42 characters 42 bytes
  UTF8 off, non-ASCII, 42 characters 42 bytes
  UTF8 on, non-ASCII, 4 characters 6 bytes
  UTF8 on but INVALID encoding, non-ASCII, 4 characters 6 bytes
  UTF8 off, undef</pre>

<p>The initial <code>UTF8</code> on/off refers to Perl&#39;s internal SvUTF8 flag. If $string has the SvUTF8 flag set but the sequence of bytes it contains are not a valid UTF-8 encoding then data_string_desc() will report <code>UTF8 on but INVALID encoding</code>.</p>

<p>The <code>ASCII</code> vs <code>non-ASCII</code> portion shows <code>ASCII</code> if <i>all</i> the characters in the string are ASCII (have code points &#60;= 127).</p>

<p>The data_string_desc() function was added in DBI 1.46.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="data_string_diff"
><code>data_string_diff</code></a></h3>

<pre class="sh_perl">  $diff = data_string_diff($a, $b);</pre>

<p>Returns an informal description of the first character difference between the strings. If both $a and $b contain the same sequence of characters then data_string_diff() returns an empty string. For example:</p>

<pre class="sh_perl"> Params a &#38; b     Result
 ------------     ------
 &#39;aaa&#39;, &#39;aaa&#39;     &#39;&#39;
 &#39;aaa&#39;, &#39;abc&#39;     &#39;Strings differ at index 2: a[2]=a, b[2]=b&#39;
 &#39;aaa&#39;, undef     &#39;String b is undef, string a has 3 characters&#39;
 &#39;aaa&#39;, &#39;aa&#39;      &#39;String b truncated after 2 characters&#39;</pre>

<p>Unicode characters are reported in <code>\x{XXXX}</code> format. Unicode code points in the range U+0800 to U+08FF are unassigned and most likely to occur due to double-encoding. Characters in this range are reported as <code>\x{08XX}=&#39;C&#39;</code> where <code>C</code> is the corresponding latin-1 character.</p>

<p>The data_string_diff() function only considers logical <i>characters</i> and not the underlying encoding. See <a href="#data_diff" class="podlinkpod"
>&#34;data_diff&#34;</a> for an alternative.</p>

<p>The data_string_diff() function was added in DBI 1.46.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="data_diff"
><code>data_diff</code></a></h3>

<pre class="sh_perl">  $diff = data_diff($a, $b);
  $diff = data_diff($a, $b, $logical);</pre>

<p>Returns an informal description of the difference between two strings. It calls <a href="#data_string_desc" class="podlinkpod"
>&#34;data_string_desc&#34;</a> and <a href="#data_string_diff" class="podlinkpod"
>&#34;data_string_diff&#34;</a> and returns the combined results as a multi-line string.</p>

<p>For example, <code>data_diff(&#34;abc&#34;, &#34;ab\x{263a}&#34;)</code> will return:</p>

<pre class="sh_perl">  a: UTF8 off, ASCII, 3 characters 3 bytes
  b: UTF8 on, non-ASCII, 3 characters 5 bytes
  Strings differ at index 2: a[2]=c, b[2]=\x{263A}</pre>

<p>If $a and $b are identical in both the characters they contain <i>and</i> their physical encoding then data_diff() returns an empty string. If $logical is true then physical encoding differences are ignored (but are still reported if there is a difference in the characters).</p>

<p>The data_diff() function was added in DBI 1.46.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="neat"
><code>neat</code></a></h3>

<pre class="sh_perl">  $str = neat($value);
  $str = neat($value, $maxlen);</pre>

<p>Return a string containing a neat (and tidy) representation of the supplied value.</p>

<p>Strings will be quoted, although internal quotes will <i>not</i> be escaped. Values known to be numeric will be unquoted. Undefined (NULL) values will be shown as <code>undef</code> (without quotes).</p>

<p>If the string is flagged internally as utf8 then double quotes will be used, otherwise single quotes are used and unprintable characters will be replaced by dot (.).</p>

<p>For result strings longer than <code>$maxlen</code> the result string will be truncated to <code>$maxlen-4</code> and &#34;<code>...&#39;</code>&#34; will be appended. If <code>$maxlen</code> is 0 or <code>undef</code>, it defaults to <code>$DBI::neat_maxlen</code> which, in turn, defaults to 400.</p>

<p>This function is designed to format values for human consumption. It is used internally by the DBI for <a href="#trace" class="podlinkpod"
>&#34;trace&#34;</a> output. It should typically <i>not</i> be used for formatting values for database use. (See also <a href="#quote" class="podlinkpod"
>&#34;quote&#34;</a>.)</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="neat_list"
><code>neat_list</code></a></h3>

<pre class="sh_perl">  $str = neat_list(\@listref, $maxlen, $field_sep);</pre>

<p>Calls <code>neat</code> on each element of the list and returns a string containing the results joined with <code>$field_sep</code>. <code>$field_sep</code> defaults to <code>&#34;, &#34;</code>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="looks_like_number"
><code>looks_like_number</code></a></h3>

<pre class="sh_perl">  @bool = looks_like_number(@array);</pre>

<p>Returns true for each element that looks like a number. Returns false for each element that does not look like a number. Returns <code>undef</code> for each element that is undefined or empty.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="hash"
><code>hash</code></a></h3>

<pre class="sh_perl">  $hash_value = DBI::hash($buffer, $type);</pre>

<p>Return a 32-bit integer &#39;hash&#39; value corresponding to the contents of $buffer. The $type parameter selects which kind of hash algorithm should be used.</p>

<p>For the technically curious, type 0 (which is the default if $type isn&#39;t specified) is based on the Perl 5.1 hash except that the value is forced to be negative (for obscure historical reasons). Type 1 is the better &#34;Fowler / Noll / Vo&#34; (FNV) hash. See <a href="http://www.isthe.com/chongo/tech/comp/fnv/" class="podlinkurl"
>http://www.isthe.com/chongo/tech/comp/fnv/</a> for more information. Both types are implemented in C and are very fast.</p>

<p>This function doesn&#39;t have much to do with databases, except that it can be handy to store hash values in a database.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="sql_type_cast"
><code>sql_type_cast</code></a></h3>

<pre class="sh_perl">  $sts = DBI::sql_type_cast($sv, $sql_type, $flags);</pre>

<p>sql_type_cast attempts to cast <code>$sv</code> to the SQL type (see <a href="#DBI_Constants" class="podlinkpod"
>&#34;DBI Constants&#34;</a>) specified in <code>$sql_type</code>. At present only the SQL types <code>SQL_INTEGER</code>, <code>SQL_DOUBLE</code> and <code>SQL_NUMERIC</code> are supported.</p>

<p>For <code>SQL_INTEGER</code> the effect is similar to using the value in an expression that requires an integer. It gives the perl scalar an &#39;integer aspect&#39;. (Technically the value gains an IV, or possibly a UV or NV if the value is too large for an IV.)</p>

<p>For <code>SQL_DOUBLE</code> the effect is similar to using the value in an expression that requires a general numeric value. It gives the perl scalar a &#39;numeric aspect&#39;. (Technically the value gains an NV.)</p>

<p><code>SQL_NUMERIC</code> is similar to <code>SQL_INTEGER</code> or <code>SQL_DOUBLE</code> but more general and more cautious. It will look at the string first and if it looks like an integer (that will fit in an IV or UV) it will act like <code>SQL_INTEGER</code>, if it looks like a floating point value it will act like <code>SQL_DOUBLE</code>, if it looks like neither then it will do nothing - and thereby avoid the warnings that would be generated by <code>SQL_INTEGER</code> and <code>SQL_DOUBLE</code> when given non-numeric data.</p>

<p><code>$flags</code> may be:</p>

<dl>
<dt><a name="DBIstcf_DISCARD_STRING"
><code>DBIstcf_DISCARD_STRING</code></a></dt>

<dd>
<p>If this flag is specified then when the driver successfully casts the bound perl scalar to a non-string type then the string portion of the scalar will be discarded.</p>

<dt><a name="DBIstcf_STRICT"
><code>DBIstcf_STRICT</code></a></dt>

<dd>
<p>If <code>$sv</code> cannot be cast to the requested <code>$sql_type</code> then by default it is left untouched and no error is generated. If you specify <code>DBIstcf_STRICT</code> and the cast fails, this will generate an error.</p>
</dd>
</dl>

<p>The returned <code>$sts</code> value is:</p>

<pre class="sh_perl">  -2 sql_type is not handled
  -1 sv is undef so unchanged
   0 sv could not be cast cleanly and DBIstcf_STRICT was used
   1 sv could not be cast and DBIstcf_STRICT was not used
   2 sv was cast successfully</pre>

<p>This method is exported by the :utils tag and was introduced in DBI 1.611.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBI_Dynamic_Attributes"
>DBI Dynamic Attributes</a></h2>

<p>Dynamic attributes are always associated with the <i>last handle used</i> (that handle is represented by <code>$h</code> in the descriptions below).</p>

<p>Where an attribute is equivalent to a method call, then refer to the method call for all related documentation.</p>

<p>Warning: these attributes are provided as a convenience but they do have limitations. Specifically, they have a short lifespan: because they are associated with the last handle used, they should only be used <i>immediately</i> after calling the method that &#34;sets&#34; them. If in any doubt, use the corresponding method call.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="$DBI::err"
><code>$DBI::err</code></a></h3>

<p>Equivalent to <code>$h-&#62;err</code>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="$DBI::errstr"
><code>$DBI::errstr</code></a></h3>

<p>Equivalent to <code>$h-&#62;errstr</code>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="$DBI::state"
><code>$DBI::state</code></a></h3>

<p>Equivalent to <code>$h-&#62;state</code>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="$DBI::rows"
><code>$DBI::rows</code></a></h3>

<p>Equivalent to <code>$h-&#62;rows</code>. Please refer to the documentation for the <a href="#rows" class="podlinkpod"
>&#34;rows&#34;</a> method.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="$DBI::lasth"
><code>$DBI::lasth</code></a></h3>

<p>Returns the DBI object handle used for the most recent DBI method call. If the last DBI method call was a DESTROY then $DBI::lasth will return the handle of the parent of the destroyed handle, if there is one.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS_COMMON_TO_ALL_HANDLES"
>METHODS COMMON TO ALL HANDLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following methods can be used by all types of DBI handles.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="err"
><code>err</code></a></h3>

<pre class="sh_perl">  $rv = $h-&#62;err;</pre>

<p>Returns the <i>native</i> database engine error code from the last driver method called. The code is typically an integer but you should not assume that.</p>

<p>The DBI resets $h-&#62;err to undef before almost all DBI method calls, so the value only has a short lifespan. Also, for most drivers, the statement handles share the same error variable as the parent database handle, so calling a method on one handle may reset the error on the related handles.</p>

<p>(Methods which don&#39;t reset err before being called include err() and errstr(), obviously, state(), rows(), func(), trace(), trace_msg(), ping(), and the tied hash attribute FETCH() and STORE() methods.)</p>

<p>If you need to test for specific error conditions <i>and</i> have your program be portable to different database engines, then you&#39;ll need to determine what the corresponding error codes are for all those engines and test for all of them.</p>

<p>The DBI uses the value of $DBI::stderr as the <code>err</code> value for internal errors. Drivers should also do likewise. The default value for $DBI::stderr is 2000000000.</p>

<p>A driver may return <code>0</code> from err() to indicate a warning condition after a method call. Similarly, a driver may return an empty string to indicate a &#39;success with information&#39; condition. In both these cases the value is false but not undef. The errstr() and state() methods may be used to retrieve extra information in these cases.</p>

<p>See <a href="#set_err" class="podlinkpod"
>&#34;set_err&#34;</a> for more information.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="errstr"
><code>errstr</code></a></h3>

<pre class="sh_perl">  $str = $h-&#62;errstr;</pre>

<p>Returns the native database engine error message from the last DBI method called. This has the same lifespan issues as the <a href="#err" class="podlinkpod"
>&#34;err&#34;</a> method described above.</p>

<p>The returned string may contain multiple messages separated by newline characters.</p>

<p>The errstr() method should not be used to test for errors, use err() for that, because drivers may return &#39;success with information&#39; or warning messages via errstr() for methods that have not &#39;failed&#39;.</p>

<p>See <a href="#set_err" class="podlinkpod"
>&#34;set_err&#34;</a> for more information.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="state"
><code>state</code></a></h3>

<pre class="sh_perl">  $str = $h-&#62;state;</pre>

<p>Returns a state code in the standard SQLSTATE five character format. Note that the specific success code <code>00000</code> is translated to any empty string (false). If the driver does not support SQLSTATE (and most don&#39;t), then state() will return <code>S1000</code> (General Error) for all errors.</p>

<p>The driver is free to return any value via <code>state</code>, e.g., warning codes, even if it has not declared an error by returning a true value via the <a href="#err" class="podlinkpod"
>&#34;err&#34;</a> method described above.</p>

<p>The state() method should not be used to test for errors, use err() for that, because drivers may return a &#39;success with information&#39; or warning state code via state() for methods that have not &#39;failed&#39;.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="set_err"
><code>set_err</code></a></h3>

<pre class="sh_perl">  $rv = $h-&#62;set_err($err, $errstr);
  $rv = $h-&#62;set_err($err, $errstr, $state);
  $rv = $h-&#62;set_err($err, $errstr, $state, $method);
  $rv = $h-&#62;set_err($err, $errstr, $state, $method, $rv);</pre>

<p>Set the <code>err</code>, <code>errstr</code>, and <code>state</code> values for the handle. This method is typically only used by DBI drivers and DBI subclasses.</p>

<p>If the <a href="#HandleSetErr" class="podlinkpod"
>&#34;HandleSetErr&#34;</a> attribute holds a reference to a subroutine it is called first. The subroutine can alter the $err, $errstr, $state, and $method values. See <a href="#HandleSetErr" class="podlinkpod"
>&#34;HandleSetErr&#34;</a> for full details. If the subroutine returns a true value then the handle <code>err</code>, <code>errstr</code>, and <code>state</code> values are not altered and set_err() returns an empty list (it normally returns $rv which defaults to undef, see below).</p>

<p>Setting <code>err</code> to a <i>true</i> value indicates an error and will trigger the normal DBI error handling mechanisms, such as <code>RaiseError</code> and <code>HandleError</code>, if they are enabled, when execution returns from the DBI back to the application.</p>

<p>Setting <code>err</code> to <code>&#34;&#34;</code> indicates an &#39;information&#39; state, and setting it to <code>&#34;0&#34;</code> indicates a &#39;warning&#39; state. Setting <code>err</code> to <code>undef</code> also sets <code>errstr</code> to undef, and <code>state</code> to <code>&#34;&#34;</code>, irrespective of the values of the $errstr and $state parameters.</p>

<p>The $method parameter provides an alternate method name for the <code>RaiseError</code>/<code>PrintError</code>/<code>PrintWarn</code> error string instead of the fairly unhelpful &#39;<code>set_err</code>&#39;.</p>

<p>The <code>set_err</code> method normally returns undef. The $rv parameter provides an alternate return value.</p>

<p>Some special rules apply if the <code>err</code> or <code>errstr</code> values for the handle are <i>already</i> set...</p>

<p>If <code>errstr</code> is true then: &#34;<code> [err was %s now %s]</code>&#34; is appended if $err is true and <code>err</code> is already true and the new err value differs from the original one. Similarly &#34;<code> [state was %s now %s]</code>&#34; is appended if $state is true and <code>state</code> is already true and the new state value differs from the original one. Finally &#34;<code>\n</code>&#34; and the new $errstr are appended if $errstr differs from the existing errstr value. Obviously the <code>%s</code>&#39;s above are replaced by the corresponding values.</p>

<p>The handle <code>err</code> value is set to $err if: $err is true; or handle <code>err</code> value is undef; or $err is defined and the length is greater than the handle <code>err</code> length. The effect is that an &#39;information&#39; state only overrides undef; a &#39;warning&#39; overrides undef or &#39;information&#39;, and an &#39;error&#39; state overrides anything.</p>

<p>The handle <code>state</code> value is set to $state if $state is true and the handle <code>err</code> value was set (by the rules above).</p>

<p>Support for warning and information states was added in DBI 1.41.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="trace"
><code>trace</code></a></h3>

<pre class="sh_perl">  $h-&#62;trace($trace_settings);
  $h-&#62;trace($trace_settings, $trace_filename);
  $trace_settings = $h-&#62;trace;</pre>

<p>The trace() method is used to alter the trace settings for a handle (and any future children of that handle). It can also be used to change where the trace output is sent.</p>

<p>There&#39;s a similar method, <code>DBI-&#62;trace</code>, which sets the global default trace settings.</p>

<p>See the <a href="#TRACING" class="podlinkpod"
>&#34;TRACING&#34;</a> section for full details about the DBI&#39;s powerful tracing facilities.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="trace_msg"
><code>trace_msg</code></a></h3>

<pre class="sh_perl">  $h-&#62;trace_msg($message_text);
  $h-&#62;trace_msg($message_text, $min_level);</pre>

<p>Writes <code>$message_text</code> to the trace file if the trace level is greater than or equal to $min_level (which defaults to 1). Can also be called as <code>DBI-&#62;trace_msg($msg)</code>.</p>

<p>See <a href="#TRACING" class="podlinkpod"
>&#34;TRACING&#34;</a> for more details.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="func"
><code>func</code></a></h3>

<pre class="sh_perl">  $h-&#62;func(@func_arguments, $func_name) or die ...;</pre>

<p>The <code>func</code> method can be used to call private non-standard and non-portable methods implemented by the driver. Note that the function name is given as the <i>last</i> argument.</p>

<p>It&#39;s also important to note that the func() method does not clear a previous error ($DBI::err etc.) and it does not trigger automatic error detection (RaiseError etc.) so you must check the return status and/or $h-&#62;err to detect errors.</p>

<p>(This method is not directly related to calling stored procedures. Calling stored procedures is currently not defined by the DBI. Some drivers, such as DBD::Oracle, support it in non-portable ways. See driver documentation for more details.)</p>

<p>See also install_method() in <a href="/~timb/DBI-1.620/lib/DBI/DBD.pm" class="podlinkpod"
>DBI::DBD</a> for how you can avoid needing to use func() and gain direct access to driver-private methods.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="can"
><code>can</code></a></h3>

<pre class="sh_perl">  $is_implemented = $h-&#62;can($method_name);</pre>

<p>Returns true if $method_name is implemented by the driver or a default method is provided by the DBI. It returns false where a driver hasn&#39;t implemented a method and the default method is provided by the DBI is just an empty stub.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="parse_trace_flags"
><code>parse_trace_flags</code></a></h3>

<pre class="sh_perl">  $trace_settings_integer = $h-&#62;parse_trace_flags($trace_settings);</pre>

<p>Parses a string containing trace settings and returns the corresponding integer value used internally by the DBI and drivers.</p>

<p>The $trace_settings argument is a string containing a trace level between 0 and 15 and/or trace flag names separated by vertical bar (&#34;<code>|</code>&#34;) or comma (&#34;<code>,</code>&#34;) characters. For example: <code>&#34;SQL|3|foo&#34;</code>.</p>

<p>It uses the parse_trace_flag() method, described below, to process the individual trace flag names.</p>

<p>The parse_trace_flags() method was added in DBI 1.42.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="parse_trace_flag"
><code>parse_trace_flag</code></a></h3>

<pre class="sh_perl">  $bit_flag = $h-&#62;parse_trace_flag($trace_flag_name);</pre>

<p>Returns the bit flag corresponding to the trace flag name in $trace_flag_name. Drivers are expected to override this method and check if $trace_flag_name is a driver specific trace flags and, if not, then call the DBI&#39;s default parse_trace_flag().</p>

<p>The parse_trace_flag() method was added in DBI 1.42.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="private_attribute_info"
><code>private_attribute_info</code></a></h3>

<pre class="sh_perl">  $hash_ref = $h-&#62;private_attribute_info();</pre>

<p>Returns a reference to a hash whose keys are the names of driver-private handle attributes available for the kind of handle (driver, database, statement) that the method was called on.</p>

<p>For example, the return value when called with a DBD::Sybase $dbh could look like this:</p>

<pre class="sh_perl">  {
      syb_dynamic_supported =&#62; undef,
      syb_oc_version =&#62; undef,
      syb_server_version =&#62; undef,
      syb_server_version_string =&#62; undef,
  }</pre>

<p>and when called with a DBD::Sybase $sth they could look like this:</p>

<pre class="sh_perl">  {
      syb_types =&#62; undef,
      syb_proc_status =&#62; undef,
      syb_result_type =&#62; undef,
  }</pre>

<p>The values should be undef. Meanings may be assigned to particular values in future.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="swap_inner_handle"
><code>swap_inner_handle</code></a></h3>

<pre class="sh_perl">  $rc = $h1-&#62;swap_inner_handle( $h2 );
  $rc = $h1-&#62;swap_inner_handle( $h2, $allow_reparent );</pre>

<p>Brain transplants for handles. You don&#39;t need to know about this unless you want to become a handle surgeon.</p>

<p>A DBI handle is a reference to a tied hash. A tied hash has an <i>inner</i> hash that actually holds the contents. The swap_inner_handle() method swaps the inner hashes between two handles. The $h1 and $h2 handles still point to the same tied hashes, but what those hashes are tied to has been swapped. In effect $h1 <i>becomes</i> $h2 and vice-versa. This is powerful stuff, expect problems. Use with care.</p>

<p>As a small safety measure, the two handles, $h1 and $h2, have to share the same parent unless $allow_reparent is true.</p>

<p>The swap_inner_handle() method was added in DBI 1.44.</p>

<p>Here&#39;s a quick kind of &#39;diagram&#39; as a worked example to help think about what&#39;s happening:</p>

<pre class="sh_perl">    Original state:
            dbh1o -&#62; dbh1i
            sthAo -&#62; sthAi(dbh1i)
            dbh2o -&#62; dbh2i

    swap_inner_handle dbh1o with dbh2o:
            dbh2o -&#62; dbh1i
            sthAo -&#62; sthAi(dbh1i)
            dbh1o -&#62; dbh2i

    create new sth from dbh1o:
            dbh2o -&#62; dbh1i
            sthAo -&#62; sthAi(dbh1i)
            dbh1o -&#62; dbh2i
            sthBo -&#62; sthBi(dbh2i)

    swap_inner_handle sthAo with sthBo:
            dbh2o -&#62; dbh1i
            sthBo -&#62; sthAi(dbh1i)
            dbh1o -&#62; dbh2i
            sthAo -&#62; sthBi(dbh2i)</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="visit_child_handles"
><code>visit_child_handles</code></a></h3>

<pre class="sh_perl">  $h-&#62;visit_child_handles( $coderef );
  $h-&#62;visit_child_handles( $coderef, $info );</pre>

<p>Where $coderef is a reference to a subroutine and $info is an arbitrary value which, if undefined, defaults to a reference to an empty hash. Returns $info.</p>

<p>For each child handle of $h, if any, $coderef is invoked as:</p>

<pre class="sh_perl">  $coderef-&#62;($child_handle, $info);</pre>

<p>If the execution of $coderef returns a true value then <code>visit_child_handles</code> is called on that child handle and passed the returned value as $info.</p>

<p>For example:</p>

<pre class="sh_perl">  # count database connections with names (DSN) matching a pattern
  my $connections = 0;
  $dbh-&#62;{Driver}-&#62;visit_child_handles(sub {
      my ($h, $info) = @_;
      ++$connections if $h-&#62;{Name} =~ /foo/;
      return 0; # don&#39;t visit kids
  })</pre>

<p>See also <a href="#visit_handles" class="podlinkpod"
>&#34;visit_handles&#34;</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ATTRIBUTES_COMMON_TO_ALL_HANDLES"
>ATTRIBUTES COMMON TO ALL HANDLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>These attributes are common to all types of DBI handles.</p>

<p>Some attributes are inherited by child handles. That is, the value of an inherited attribute in a newly created statement handle is the same as the value in the parent database handle. Changes to attributes in the new statement handle do not affect the parent database handle and changes to the database handle do not affect existing statement handles, only future ones.</p>

<p>Attempting to set or get the value of an unknown attribute generates a warning, except for private driver specific attributes (which all have names starting with a lowercase letter).</p>

<p>Example:</p>

<pre class="sh_perl">  $h-&#62;{AttributeName} = ...;    # set/write
  ... = $h-&#62;{AttributeName};    # get/read</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Warn"
><code>Warn</code></a></h3>

<p>Type: boolean, inherited</p>

<p>The <code>Warn</code> attribute enables useful warnings for certain bad practices. It is enabled by default and should only be disabled in rare circumstances. Since warnings are generated using the Perl <code>warn</code> function, they can be intercepted using the Perl <code>$SIG{__WARN__}</code> hook.</p>

<p>The <code>Warn</code> attribute is not related to the <code>PrintWarn</code> attribute.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Active"
><code>Active</code></a></h3>

<p>Type: boolean, read-only</p>

<p>The <code>Active</code> attribute is true if the handle object is &#34;active&#34;. This is rarely used in applications. The exact meaning of active is somewhat vague at the moment. For a database handle it typically means that the handle is connected to a database (<code>$dbh-&#62;disconnect</code> sets <code>Active</code> off). For a statement handle it typically means that the handle is a <code>SELECT</code> that may have more data to fetch. (Fetching all the data or calling <code>$sth-&#62;finish</code> sets <code>Active</code> off.)</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Executed"
><code>Executed</code></a></h3>

<p>Type: boolean</p>

<p>The <code>Executed</code> attribute is true if the handle object has been &#34;executed&#34;. Currently only the $dbh do() method and the $sth execute(), execute_array(), and execute_for_fetch() methods set the <code>Executed</code> attribute.</p>

<p>When it&#39;s set on a handle it is also set on the parent handle at the same time. So calling execute() on a $sth also sets the <code>Executed</code> attribute on the parent $dbh.</p>

<p>The <code>Executed</code> attribute for a database handle is cleared by the commit() and rollback() methods (even if they fail). The <code>Executed</code> attribute of a statement handle is not cleared by the DBI under any circumstances and so acts as a permanent record of whether the statement handle was ever used.</p>

<p>The <code>Executed</code> attribute was added in DBI 1.41.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Kids"
><code>Kids</code></a></h3>

<p>Type: integer, read-only</p>

<p>For a driver handle, <code>Kids</code> is the number of currently existing database handles that were created from that driver handle. For a database handle, <code>Kids</code> is the number of currently existing statement handles that were created from that database handle. For a statement handle, the value is zero.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="ActiveKids"
><code>ActiveKids</code></a></h3>

<p>Type: integer, read-only</p>

<p>Like <code>Kids</code>, but only counting those that are <code>Active</code> (as above).</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="CachedKids"
><code>CachedKids</code></a></h3>

<p>Type: hash ref</p>

<p>For a database handle, <code>CachedKids</code> returns a reference to the cache (hash) of statement handles created by the <a href="#prepare_cached" class="podlinkpod"
>&#34;prepare_cached&#34;</a> method. For a driver handle, returns a reference to the cache (hash) of database handles created by the <a href="#connect_cached" class="podlinkpod"
>&#34;connect_cached&#34;</a> method.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Type"
><code>Type</code></a></h3>

<p>Type: scalar, read-only</p>

<p>The <code>Type</code> attribute identifies the type of a DBI handle. Returns &#34;dr&#34; for driver handles, &#34;db&#34; for database handles and &#34;st&#34; for statement handles.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="ChildHandles"
><code>ChildHandles</code></a></h3>

<p>Type: array ref</p>

<p>The ChildHandles attribute contains a reference to an array of all the handles created by this handle which are still accessible. The contents of the array are weak-refs and will become undef when the handle goes out of scope.</p>

<p><code>ChildHandles</code> returns undef if your perl version does not support weak references (check the <a href="/perldoc?Scalar%3A%3AUtil" class="podlinkpod"
>Scalar::Util</a> module). The referenced array returned should be treated as read-only.</p>

<p>For example, to enumerate all driver handles, database handles and statement handles:</p>

<pre class="sh_perl">    sub show_child_handles {
        my ($h, $level) = @_;
        printf &#34;%sh %s %s\n&#34;, $h-&#62;{Type}, &#34;\t&#34; x $level, $h;
        show_child_handles($_, $level + 1)
            for (grep { defined } @{$h-&#62;{ChildHandles}});
    }

    my %drivers = DBI-&#62;installed_drivers();
    show_child_handles($_, 0) for (values %drivers);</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="CompatMode"
><code>CompatMode</code></a></h3>

<p>Type: boolean, inherited</p>

<p>The <code>CompatMode</code> attribute is used by emulation layers (such as Oraperl) to enable compatible behaviour in the underlying driver (e.g., DBD::Oracle) for this handle. Not normally set by application code.</p>

<p>It also has the effect of disabling the &#39;quick FETCH&#39; of attribute values from the handles attribute cache. So all attribute values are handled by the drivers own FETCH method. This makes them slightly slower but is useful for special-purpose drivers like DBD::Multiplex.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="InactiveDestroy"
><code>InactiveDestroy</code></a></h3>

<p>Type: boolean</p>

<p>The default value, false, means a handle will be fully destroyed as normal when the last reference to it is removed, just as you&#39;d expect.</p>

<p>If set true then the handle will be treated by the DESTROY as if it was no longer Active, and so the <i>database engine</i> related effects of DESTROYing a handle will be skipped. Think of the name as meaning &#39;treat the handle as not-Active in the DESTROY method&#39;.</p>

<p>For a database handle, this attribute does not disable an <i>explicit</i> call to the disconnect method, only the implicit call from DESTROY that happens if the handle is still marked as <code>Active</code>.</p>

<p>This attribute is specifically designed for use in Unix applications that &#34;fork&#34; child processes. For some drivers, when the child process exits the destruction of inherited handles cause the corresponding handles in the parent process to cease working.</p>

<p>Either the parent or the child process, but not both, should set <code>InactiveDestroy</code> true on all their shared handles. Alternatively the <a href="#AutoInactiveDestroy" class="podlinkpod"
>&#34;AutoInactiveDestroy&#34;</a> can be set in the parent on connect.</p>

<p>To help tracing applications using fork the process id is shown in the trace log whenever a DBI or handle trace() method is called. The process id also shown for <i>every</i> method call if the DBI trace level (not handle trace level) is set high enough to show the trace from the DBI&#39;s method dispatcher, e.g. &#62;= 9.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="AutoInactiveDestroy"
><code>AutoInactiveDestroy</code></a></h3>

<p>Type: boolean, inherited</p>

<p>The <a href="#InactiveDestroy" class="podlinkpod"
>&#34;InactiveDestroy&#34;</a> attribute, described above, needs to be explicitly set in the child process after a fork(). This is a problem if the code that performs the fork() is not under your control, perhaps in a third-party module. Use <code>AutoInactiveDestroy</code> to get around this situation.</p>

<p>If set true, the DESTROY method will check the process id of the handle and, if different from the current process id, it will set the <i>InactiveDestroy</i> attribute.</p>

<p>This is the example it&#39;s designed to deal with:</p>

<pre class="sh_perl">    my $dbh = DBI-&#62;connect(...);
    some_code_that_forks(); # Perhaps without your knowledge
    # Child process dies, destroying the inherited dbh
    $dbh-&#62;do(...); # Breaks because parent $dbh is now broken</pre>

<p>The <code>AutoInactiveDestroy</code> attribute was added in DBI 1.614.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="PrintWarn"
><code>PrintWarn</code></a></h3>

<p>Type: boolean, inherited</p>

<p>The <code>PrintWarn</code> attribute controls the printing of warnings recorded by the driver. When set to a true value the DBI will check method calls to see if a warning condition has been set. If so, the DBI will effectively do a <code>warn(&#34;$class $method warning: $DBI::errstr&#34;)</code> where <code>$class</code> is the driver class and <code>$method</code> is the name of the method which failed. E.g.,</p>

<pre class="sh_perl">  DBD::Oracle::db execute warning: ... warning text here ...</pre>

<p>By default, <code>DBI-&#62;connect</code> sets <code>PrintWarn</code> &#34;on&#34; if $^W is true, i.e., perl is running with warnings enabled.</p>

<p>If desired, the warnings can be caught and processed using a <code>$SIG{__WARN__}</code> handler or modules like CGI::Carp and CGI::ErrorWrap.</p>

<p>See also <a href="#set_err" class="podlinkpod"
>&#34;set_err&#34;</a> for how warnings are recorded and <a href="#HandleSetErr" class="podlinkpod"
>&#34;HandleSetErr&#34;</a> for how to influence it.</p>

<p>Fetching the full details of warnings can require an extra round-trip to the database server for some drivers. In which case the driver may opt to only fetch the full details of warnings if the <code>PrintWarn</code> attribute is true. If <code>PrintWarn</code> is false then these drivers should still indicate the fact that there were warnings by setting the warning string to, for example: &#34;3 warnings&#34;.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="PrintError"
><code>PrintError</code></a></h3>

<p>Type: boolean, inherited</p>

<p>The <code>PrintError</code> attribute can be used to force errors to generate warnings (using <code>warn</code>) in addition to returning error codes in the normal way. When set &#34;on&#34;, any method which results in an error occurring will cause the DBI to effectively do a <code>warn(&#34;$class $method failed: $DBI::errstr&#34;)</code> where <code>$class</code> is the driver class and <code>$method</code> is the name of the method which failed. E.g.,</p>

<pre class="sh_perl">  DBD::Oracle::db prepare failed: ... error text here ...</pre>

<p>By default, <code>DBI-&#62;connect</code> sets <code>PrintError</code> &#34;on&#34;.</p>

<p>If desired, the warnings can be caught and processed using a <code>$SIG{__WARN__}</code> handler or modules like CGI::Carp and CGI::ErrorWrap.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="RaiseError"
><code>RaiseError</code></a></h3>

<p>Type: boolean, inherited</p>

<p>The <code>RaiseError</code> attribute can be used to force errors to raise exceptions rather than simply return error codes in the normal way. It is &#34;off&#34; by default. When set &#34;on&#34;, any method which results in an error will cause the DBI to effectively do a <code>die(&#34;$class $method failed: $DBI::errstr&#34;)</code>, where <code>$class</code> is the driver class and <code>$method</code> is the name of the method that failed. E.g.,</p>

<pre class="sh_perl">  DBD::Oracle::db prepare failed: ... error text here ...</pre>

<p>If you turn <code>RaiseError</code> on then you&#39;d normally turn <code>PrintError</code> off. If <code>PrintError</code> is also on, then the <code>PrintError</code> is done first (naturally).</p>

<p>Typically <code>RaiseError</code> is used in conjunction with <code>eval { ... }</code> to catch the exception that&#39;s been thrown and followed by an <code>if ($@) { ... }</code> block to handle the caught exception. For example:</p>

<pre class="sh_perl">  eval {
    ...
    $sth-&#62;execute();
    ...
  };
  if ($@) {
    # $sth-&#62;err and $DBI::err will be true if error was from DBI
    warn $@; # print the error
    ... # do whatever you need to deal with the error
  }</pre>

<p>In that eval block the $DBI::lasth variable can be useful for diagnosis and reporting if you can&#39;t be sure which handle triggered the error. For example, $DBI::lasth-&#62;{Type} and $DBI::lasth-&#62;{Statement}.</p>

<p>See also <a href="#Transactions" class="podlinkpod"
>&#34;Transactions&#34;</a>.</p>

<p>If you want to temporarily turn <code>RaiseError</code> off (inside a library function that is likely to fail, for example), the recommended way is like this:</p>

<pre class="sh_perl">  {
    local $h-&#62;{RaiseError};  # localize and turn off for this block
    ...
  }</pre>

<p>The original value will automatically and reliably be restored by Perl, regardless of how the block is exited. The same logic applies to other attributes, including <code>PrintError</code>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="HandleError"
><code>HandleError</code></a></h3>

<p>Type: code ref, inherited</p>

<p>The <code>HandleError</code> attribute can be used to provide your own alternative behaviour in case of errors. If set to a reference to a subroutine then that subroutine is called when an error is detected (at the same point that <code>RaiseError</code> and <code>PrintError</code> are handled).</p>

<p>The subroutine is called with three parameters: the error message string that <code>RaiseError</code> and <code>PrintError</code> would use, the DBI handle being used, and the first value being returned by the method that failed (typically undef).</p>

<p>If the subroutine returns a false value then the <code>RaiseError</code> and/or <code>PrintError</code> attributes are checked and acted upon as normal.</p>

<p>For example, to <code>die</code> with a full stack trace for any error:</p>

<pre class="sh_perl">  use Carp;
  $h-&#62;{HandleError} = sub { confess(shift) };</pre>

<p>Or to turn errors into exceptions:</p>

<pre class="sh_perl">  use Exception; # or your own favourite exception module
  $h-&#62;{HandleError} = sub { Exception-&#62;new(&#39;DBI&#39;)-&#62;raise($_[0]) };</pre>

<p>It is possible to &#39;stack&#39; multiple HandleError handlers by using closures:</p>

<pre class="sh_perl">  sub your_subroutine {
    my $previous_handler = $h-&#62;{HandleError};
    $h-&#62;{HandleError} = sub {
      return 1 if $previous_handler and &#38;$previous_handler(@_);
      ... your code here ...
    };
  }</pre>

<p>Using a <code>my</code> inside a subroutine to store the previous <code>HandleError</code> value is important. See <a href="/perldoc?perlsub" class="podlinkpod"
>perlsub</a> and <a href="/perldoc?perlref" class="podlinkpod"
>perlref</a> for more information about <i>closures</i>.</p>

<p>It is possible for <code>HandleError</code> to alter the error message that will be used by <code>RaiseError</code> and <code>PrintError</code> if it returns false. It can do that by altering the value of $_[0]. This example appends a stack trace to all errors and, unlike the previous example using Carp::confess, this will work <code>PrintError</code> as well as <code>RaiseError</code>:</p>

<pre class="sh_perl">  $h-&#62;{HandleError} = sub { $_[0]=Carp::longmess($_[0]); 0; };</pre>

<p>It is also possible for <code>HandleError</code> to hide an error, to a limited degree, by using <a href="#set_err" class="podlinkpod"
>&#34;set_err&#34;</a> to reset $DBI::err and $DBI::errstr, and altering the return value of the failed method. For example:</p>

<pre class="sh_perl">  $h-&#62;{HandleError} = sub {
    return 0 unless $_[0] =~ /^\S+ fetchrow_arrayref failed:/;
    return 0 unless $_[1]-&#62;err == 1234; # the error to &#39;hide&#39;
    $h-&#62;set_err(undef,undef);   # turn off the error
    $_[2] = [ ... ];    # supply alternative return value
    return 1;
  };</pre>

<p>This only works for methods which return a single value and is hard to make reliable (avoiding infinite loops, for example) and so isn&#39;t recommended for general use! If you find a <i>good</i> use for it then please let me know.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="HandleSetErr"
><code>HandleSetErr</code></a></h3>

<p>Type: code ref, inherited</p>

<p>The <code>HandleSetErr</code> attribute can be used to intercept the setting of handle <code>err</code>, <code>errstr</code>, and <code>state</code> values. If set to a reference to a subroutine then that subroutine is called whenever set_err() is called, typically by the driver or a subclass.</p>

<p>The subroutine is called with five arguments, the first five that were passed to set_err(): the handle, the <code>err</code>, <code>errstr</code>, and <code>state</code> values being set, and the method name. These can be altered by changing the values in the @_ array. The return value affects set_err() behaviour, see <a href="#set_err" class="podlinkpod"
>&#34;set_err&#34;</a> for details.</p>

<p>It is possible to &#39;stack&#39; multiple HandleSetErr handlers by using closures. See <a href="#HandleError" class="podlinkpod"
>&#34;HandleError&#34;</a> for an example.</p>

<p>The <code>HandleSetErr</code> and <code>HandleError</code> subroutines differ in subtle but significant ways. HandleError is only invoked at the point where the DBI is about to return to the application with <code>err</code> set true. It&#39;s not invoked by the failure of a method that&#39;s been called by another DBI method. HandleSetErr, on the other hand, is called whenever set_err() is called with a defined <code>err</code> value, even if false. So it&#39;s not just for errors, despite the name, but also warn and info states. The set_err() method, and thus HandleSetErr, may be called multiple times within a method and is usually invoked from deep within driver code.</p>

<p>In theory a driver can use the return value from HandleSetErr via set_err() to decide whether to continue or not. If set_err() returns an empty list, indicating that the HandleSetErr code has &#39;handled&#39; the &#39;error&#39;, the driver could then continue instead of failing (if that&#39;s a reasonable thing to do). This isn&#39;t excepted to be common and any such cases should be clearly marked in the driver documentation and discussed on the dbi-dev mailing list.</p>

<p>The <code>HandleSetErr</code> attribute was added in DBI 1.41.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="ErrCount"
><code>ErrCount</code></a></h3>

<p>Type: unsigned integer</p>

<p>The <code>ErrCount</code> attribute is incremented whenever the set_err() method records an error. It isn&#39;t incremented by warnings or information states. It is not reset by the DBI at any time.</p>

<p>The <code>ErrCount</code> attribute was added in DBI 1.41. Older drivers may not have been updated to use set_err() to record errors and so this attribute may not be incremented when using them.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="ShowErrorStatement"
><code>ShowErrorStatement</code></a></h3>

<p>Type: boolean, inherited</p>

<p>The <code>ShowErrorStatement</code> attribute can be used to cause the relevant Statement text to be appended to the error messages generated by the <code>RaiseError</code>, <code>PrintError</code>, and <code>PrintWarn</code> attributes. Only applies to errors on statement handles plus the prepare(), do(), and the various <code>select*()</code> database handle methods. (The exact format of the appended text is subject to change.)</p>

<p>If <code>$h-&#62;{ParamValues}</code> returns a hash reference of parameter (placeholder) values then those are formatted and appended to the end of the Statement text in the error message.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="TraceLevel"
><code>TraceLevel</code></a></h3>

<p>Type: integer, inherited</p>

<p>The <code>TraceLevel</code> attribute can be used as an alternative to the <a href="#trace" class="podlinkpod"
>&#34;trace&#34;</a> method to set the DBI trace level and trace flags for a specific handle. See <a href="#TRACING" class="podlinkpod"
>&#34;TRACING&#34;</a> for more details.</p>

<p>The <code>TraceLevel</code> attribute is especially useful combined with <code>local</code> to alter the trace settings for just a single block of code.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="FetchHashKeyName"
><code>FetchHashKeyName</code></a></h3>

<p>Type: string, inherited</p>

<p>The <code>FetchHashKeyName</code> attribute is used to specify whether the fetchrow_hashref() method should perform case conversion on the field names used for the hash keys. For historical reasons it defaults to &#39;<code>NAME</code>&#39; but it is recommended to set it to &#39;<code>NAME_lc</code>&#39; (convert to lower case) or &#39;<code>NAME_uc</code>&#39; (convert to upper case) according to your preference. It can only be set for driver and database handles. For statement handles the value is frozen when prepare() is called.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="ChopBlanks"
><code>ChopBlanks</code></a></h3>

<p>Type: boolean, inherited</p>

<p>The <code>ChopBlanks</code> attribute can be used to control the trimming of trailing space characters from fixed width character (CHAR) fields. No other field types are affected, even where field values have trailing spaces.</p>

<p>The default is false (although it is possible that the default may change). Applications that need specific behaviour should set the attribute as needed.</p>

<p>Drivers are not required to support this attribute, but any driver which does not support it must arrange to return <code>undef</code> as the attribute value.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="LongReadLen"
><code>LongReadLen</code></a></h3>

<p>Type: unsigned integer, inherited</p>

<p>The <code>LongReadLen</code> attribute may be used to control the maximum length of &#39;long&#39; type fields (LONG, BLOB, CLOB, MEMO, etc.) which the driver will read from the database automatically when it fetches each row of data.</p>

<p>The <code>LongReadLen</code> attribute only relates to fetching and reading long values; it is not involved in inserting or updating them.</p>

<p>A value of 0 means not to automatically fetch any long data. Drivers may return undef or an empty string for long fields when <code>LongReadLen</code> is 0.</p>

<p>The default is typically 0 (zero) or 80 bytes but may vary between drivers. Applications fetching long fields should set this value to slightly larger than the longest long field value to be fetched.</p>

<p>Some databases return some long types encoded as pairs of hex digits. For these types, <code>LongReadLen</code> relates to the underlying data length and not the doubled-up length of the encoded string.</p>

<p>Changing the value of <code>LongReadLen</code> for a statement handle after it has been <code>prepare</code>&#39;d will typically have no effect, so it&#39;s common to set <code>LongReadLen</code> on the <code>$dbh</code> before calling <code>prepare</code>.</p>

<p>For most drivers the value used here has a direct effect on the memory used by the statement handle while it&#39;s active, so don&#39;t be too generous. If you can&#39;t be sure what value to use you could execute an extra select statement to determine the longest value. For example:</p>

<pre class="sh_perl">  $dbh-&#62;{LongReadLen} = $dbh-&#62;selectrow_array(qq{
      SELECT MAX(OCTET_LENGTH(long_column_name))
      FROM table WHERE ...
  });
  $sth = $dbh-&#62;prepare(qq{
      SELECT long_column_name, ... FROM table WHERE ...
  });</pre>

<p>You may need to take extra care if the table can be modified between the first select and the second being executed. You may also need to use a different function if OCTET_LENGTH() does not work for long types in your database. For example, for Sybase use DATALENGTH() and for Oracle use LENGTHB().</p>

<p>See also <a href="#LongTruncOk" class="podlinkpod"
>&#34;LongTruncOk&#34;</a> for information on truncation of long types.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="LongTruncOk"
><code>LongTruncOk</code></a></h3>

<p>Type: boolean, inherited</p>

<p>The <code>LongTruncOk</code> attribute may be used to control the effect of fetching a long field value which has been truncated (typically because it&#39;s longer than the value of the <code>LongReadLen</code> attribute).</p>

<p>By default, <code>LongTruncOk</code> is false and so fetching a long value that needs to be truncated will cause the fetch to fail. (Applications should always be sure to check for errors after a fetch loop in case an error, such as a divide by zero or long field truncation, caused the fetch to terminate prematurely.)</p>

<p>If a fetch fails due to a long field truncation when <code>LongTruncOk</code> is false, many drivers will allow you to continue fetching further rows.</p>

<p>See also <a href="#LongReadLen" class="podlinkpod"
>&#34;LongReadLen&#34;</a>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="TaintIn"
><code>TaintIn</code></a></h3>

<p>Type: boolean, inherited</p>

<p>If the <code>TaintIn</code> attribute is set to a true value <i>and</i> Perl is running in taint mode (e.g., started with the <code>-T</code> option), then all the arguments to most DBI method calls are checked for being tainted. <i>This may change.</i></p>

<p>The attribute defaults to off, even if Perl is in taint mode. See <a href="/perldoc?perlsec" class="podlinkpod"
>perlsec</a> for more about taint mode. If Perl is not running in taint mode, this attribute has no effect.</p>

<p>When fetching data that you trust you can turn off the TaintIn attribute, for that statement handle, for the duration of the fetch loop.</p>

<p>The <code>TaintIn</code> attribute was added in DBI 1.31.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="TaintOut"
><code>TaintOut</code></a></h3>

<p>Type: boolean, inherited</p>

<p>If the <code>TaintOut</code> attribute is set to a true value <i>and</i> Perl is running in taint mode (e.g., started with the <code>-T</code> option), then most data fetched from the database is considered tainted. <i>This may change.</i></p>

<p>The attribute defaults to off, even if Perl is in taint mode. See <a href="/perldoc?perlsec" class="podlinkpod"
>perlsec</a> for more about taint mode. If Perl is not running in taint mode, this attribute has no effect.</p>

<p>When fetching data that you trust you can turn off the TaintOut attribute, for that statement handle, for the duration of the fetch loop.</p>

<p>Currently only fetched data is tainted. It is possible that the results of other DBI method calls, and the value of fetched attributes, may also be tainted in future versions. That change may well break your applications unless you take great care now. If you use DBI Taint mode, please report your experience and any suggestions for changes.</p>

<p>The <code>TaintOut</code> attribute was added in DBI 1.31.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Taint"
><code>Taint</code></a></h3>

<p>Type: boolean, inherited</p>

<p>The <code>Taint</code> attribute is a shortcut for <a href="#TaintIn" class="podlinkpod"
>&#34;TaintIn&#34;</a> and <a href="#TaintOut" class="podlinkpod"
>&#34;TaintOut&#34;</a> (it is also present for backwards compatibility).</p>

<p>Setting this attribute sets both <a href="#TaintIn" class="podlinkpod"
>&#34;TaintIn&#34;</a> and <a href="#TaintOut" class="podlinkpod"
>&#34;TaintOut&#34;</a>, and retrieving it returns a true value if and only if <a href="#TaintIn" class="podlinkpod"
>&#34;TaintIn&#34;</a> and <a href="#TaintOut" class="podlinkpod"
>&#34;TaintOut&#34;</a> are both set to true values.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Profile"
><code>Profile</code></a></h3>

<p>Type: inherited</p>

<p>The <code>Profile</code> attribute enables the collection and reporting of method call timing statistics. See the <a href="/~timb/DBI-1.620/lib/DBI/Profile.pm" class="podlinkpod"
>DBI::Profile</a> module documentation for <i>much</i> more detail.</p>

<p>The <code>Profile</code> attribute was added in DBI 1.24.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="ReadOnly"
><code>ReadOnly</code></a></h3>

<p>Type: boolean, inherited</p>

<p>An application can set the <code>ReadOnly</code> attribute of a handle to a true value to indicate that it will not be attempting to make any changes using that handle or any children of it.</p>

<p>Note that the exact definition of &#39;read only&#39; is rather fuzzy. For more details see the documentation for the driver you&#39;re using.</p>

<p>If the driver can make the handle truly read-only then it should (unless doing so would have unpleasant side effect, like changing the consistency level from per-statement to per-session). Otherwise the attribute is simply advisory.</p>

<p>A driver can set the <code>ReadOnly</code> attribute itself to indicate that the data it is connected to cannot be changed for some reason.</p>

<p>Library modules and proxy drivers can use the attribute to influence their behavior. For example, the DBD::Gofer driver considers the <code>ReadOnly</code> attribute when making a decision about whether to retry an operation that failed.</p>

<p>The attribute should be set to 1 or 0 (or undef). Other values are reserved.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Callbacks"
><code>Callbacks</code></a></h3>

<p>Type: hash ref</p>

<p>The DBI callback mechanism lets you intercept, and optionally replace, any method call on a DBI handle. At the extreme, it lets you become a puppet master, deceiving the application in any way you want.</p>

<p>The <code>Callbacks</code> attribute is a hash reference where the keys are DBI method names and the values are code references. For each key naming a method, the DBI will execute the associated code reference before executing the method.</p>

<p>The arguments to the code reference will be the same as to the method, including the invocant (a database handle or statement handle). For example, say that to callback to some code on a call to <code>prepare()</code>:</p>

<pre class="sh_perl">  $dbh-&#62;{Callbacks} = {
      prepare =&#62; sub {
          my ($dbh, $query, $attrs) = @_;
          print &#34;Preparing q{$query}\n&#34;
      },
  };</pre>

<p>The callback would then be executed when you called the <code>prepare()</code> method:</p>

<pre class="sh_perl">  $dbh-&#62;prepare(&#39;SELECT 1&#39;);</pre>

<p>And the output of course would be:</p>

<pre class="sh_perl">  Preparing q{SELECT 1}</pre>

<p>Because callbacks are executed <i>before</i> the methods they&#39;re associated with, you can modify the arguments before they&#39;re passed on to the method call. For example, to make sure that all calls to <code>prepare()</code> are immediately prepared by <a href="/perldoc?DBD%3A%3APg" class="podlinkpod"
>DBD::Pg</a>, add a callback that makes sure that the <code>pg_prepare_now</code> attribute is always set:</p>

<pre class="sh_perl">  my $dbh = DBI-&#62;connect($dsn, $username, $auth, {
      Callbacks =&#62; {
          prepare =&#62; sub {
              $_[2] ||= {};
              $_[2]-&#62;{pg_prepare_now} = 1;
              return; # must return nothing
          },
      }
  });</pre>

<p>Note that we are editing the contents of <code>@_</code> directly. In this case we&#39;ve created the attributes hash if it&#39;s not passed to the <code>prepare</code> call.</p>

<p>You can also prevent the associated method from ever executing. While a callback executes, <code>$_</code> holds the method name. (This allows multiple callbacks to share the same code reference and still know what method was called.) To prevent the method from executing, simply <code>undef $_</code>. For example, if you wanted to disable calls to <code>ping()</code>, you could do this:</p>

<pre class="sh_perl">  $dbh-&#62;{Callbacks} = {
      ping =&#62; sub {
          # tell dispatch to not call the method:
          undef $_;
          # return this value instead:
          return &#34;42 bells&#34;;
      }
  };</pre>

<p>As with other attributes, Callbacks can be specified on a handle or via the attributes to <code>connect()</code>. Callbacks can also be applied to a statement methods on a statement handle. For example:</p>

<pre class="sh_perl">  $sth-&#62;{Callbacks} = {
      execute =&#62; sub {
          print &#34;Executing &#34;, shift-&#62;{Statement}, &#34;\n&#34;;
      }
  };</pre>

<p>The <code>Callbacks</code> attribute of a database handle isn&#39;t copied to any statement handles it creates. So setting callbacks for a statement handle requires you to set the <code>Callbacks</code> attribute on the statement handle yourself, as in the example above, or use the special <code>ChildCallbacks</code> key described below.</p>

<p><b>Special Keys in Callbacks Attribute</b></p>

<p>In addition to DBI handle method names, the <code>Callbacks</code> hash reference supports three additional keys.</p>

<p>The first is the <code>ChildCallbacks</code> key. When a statement handle is created from a database handle the <code>ChildCallbacks</code> key of the database handle&#39;s <code>Callbacks</code> attribute, if any, becomes the new <code>Callbacks</code> attribute of the statement handle. This allows you to define callbacks for all statement handles created from a database handle. For example, if you wanted to count how many times <code>execute</code> was called in your application, you could write:</p>

<pre class="sh_perl">  my $exec_count = 0;
  my $dbh = DBI-&#62;connect( $dsn, $username, $auth, {
      Callbacks =&#62; {
          ChildCallbacks =&#62; {
              execute =&#62; sub { $exec_count++; return; }
          }
      }
  });

  END {
      print &#34;The execute method was called $exec_count times\n&#34;;
  }</pre>

<p>The other two special keys are <code>connect_cached.new</code> and <code>connect_cached.reused</code>. These keys define callbacks that are called when <code>connect_cached()</code> is called, but allow different behaviors depending on whether a new handle is created or a handle is returned. The callback is invoked with these arguments: <code>$dbh, $dsn, $user, $auth, $attr</code>.</p>

<p>For example, some applications uses <code>connect_cached()</code> to connect with <code>AutoCommit</code> enabled and then disable <code>AutoCommit</code> temporarily for transactions. If <code>connect_cached()</code> is called during a transaction, perhaps in a utility method, then it might select the same cached handle and then force <code>AutoCommit</code> on, forcing a commit of the transaction. See the <a href="#connect_cached" class="podlinkpod"
>&#34;connect_cached&#34;</a> documentation for one way to deal with that. Here we&#39;ll describe an alternative approach using a callback.</p>

<p>Because the <code>connect_cached.*</code> callbacks are invoked before connect_cached() has applied the connect attributes you can use a callback to edit the attributes that will be applied. To prevent a cached handle from having its transactions committed before it&#39;s returned, you can eliminate the <code>AutoCommit</code> attribute in a <code>connect_cached.reused</code> callback, like so:</p>

<pre class="sh_perl">  my $cb = {
      &#39;connect_cached.reused&#39; =&#62; sub { delete $_[4]-&#62;{AutoCommit} },
  };

  sub dbh {
      my $self = shift;
      DBI-&#62;connect_cached( $dsn, $username, $auth, {
          PrintError =&#62; 0,
          RaiseError =&#62; 1,
          AutoCommit =&#62; 1,
          Callbacks  =&#62; $cb,
      });
  }</pre>

<p>The upshot is that new database handles are created with <code>AutoCommit</code> enabled, while cached database handles are left in whatever transaction state they happened to be in when retrieved from the cache.</p>

<p>A more common application for callbacks is setting connection state only when a new connection is made (by connect() or connect_cached()). Adding a callback to the connected method makes this easy. This method is a no-op by default (unless you subclass the DBI and change it). The DBI calls it to indicate that a new connection has been made and the connection attributes have all been set. You can give it a bit of added functionality by applying a callback to it. For example, to make sure that MySQL understands your application&#39;s ANSI-compliant SQL, set it up like so:</p>

<pre class="sh_perl">  my $dbh = DBI-&#62;connect($dsn, $username, $auth, {
      Callbacks =&#62; {
          connected =&#62; sub {
              shift-&#62;do(q{
                  SET SESSION sql_mode=&#39;ansi,strict_trans_tables,no_auto_value_on_zero&#39;;
              });
              return;
          },
      }
  });</pre>

<p>One significant limitation with callbacks is that there can only be one per method per handle. This means it&#39;s easy for one use of callbacks to interfere with, or typically simply overwrite, another use of callbacks. For this reason modules using callbacks should document the fact clearly so application authors can tell if use of callbacks by the module will clash with use of callbacks by the application.</p>

<p>You might be able to work around this issue by taking a copy of the original callback and calling it within your own. For example:</p>

<pre class="sh_perl">  my $prev_cb = $h-&#62;{Callbacks}{method_name};
  $h-&#62;{Callbacks}{method_name} = sub {
    if ($prev_cb) {
        my @result = $prev_cb-&#62;(@_);
        return @result if not $_; # $prev_cb vetoed call
    }
    ... your callback logic here ...
  };</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="private_your_module_name_*"
><code>private_your_module_name_*</code></a></h3>

<p>The DBI provides a way to store extra information in a DBI handle as &#34;private&#34; attributes. The DBI will allow you to store and retrieve any attribute which has a name starting with &#34;<code>private_</code>&#34;.</p>

<p>It is <i>strongly</i> recommended that you use just <i>one</i> private attribute (e.g., use a hash ref) <i>and</i> give it a long and unambiguous name that includes the module or application name that the attribute relates to (e.g., &#34;<code>private_YourFullModuleName_thingy</code>&#34;).</p>

<p>Because of the way the Perl tie mechanism works you cannot reliably use the <code>||=</code> operator directly to initialise the attribute, like this:</p>

<pre class="sh_perl">  my $foo = $dbh-&#62;{private_yourmodname_foo} ||= { ... }; # WRONG</pre>

<p>you should use a two step approach like this:</p>

<pre class="sh_perl">  my $foo = $dbh-&#62;{private_yourmodname_foo};
  $foo ||= $dbh-&#62;{private_yourmodname_foo} = { ... };</pre>

<p>This attribute is primarily of interest to people sub-classing DBI, or for applications to piggy-back extra information onto DBI handles.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DBI_DATABASE_HANDLE_OBJECTS"
>DBI DATABASE HANDLE OBJECTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This section covers the methods and attributes associated with database handles.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Database_Handle_Methods"
>Database Handle Methods</a></h2>

<p>The following methods are specified for DBI database handles:</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="clone"
><code>clone</code></a></h3>

<pre class="sh_perl">  $new_dbh = $dbh-&#62;clone(\%attr);</pre>

<p>The <code>clone</code> method duplicates the $dbh connection by connecting with the same parameters ($dsn, $user, $password) as originally used.</p>

<p>The attributes for the cloned connect are the same as those used for the <i>original</i> connect, with any other attributes in <code>\%attr</code> merged over them. Effectively the same as doing:</p>

<pre class="sh_perl">  %attributes_used = ( %original_attributes, %attr );</pre>

<p>If \%attr is not given then it defaults to a hash containing all the attributes in the attribute cache of $dbh excluding any non-code references, plus the main boolean attributes (RaiseError, PrintError, AutoCommit, etc.). <i>This behaviour is unreliable and so use of clone without an argument is deprecated and may cause a warning in a future release.</i></p>

<p>The clone method can be used even if the database handle is disconnected.</p>

<p>The <code>clone</code> method was added in DBI 1.33.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="data_sources"
><code>data_sources</code></a></h3>

<pre class="sh_perl">  @ary = $dbh-&#62;data_sources();
  @ary = $dbh-&#62;data_sources(\%attr);</pre>

<p>Returns a list of data sources (databases) available via the $dbh driver&#39;s data_sources() method, plus any extra data sources that the driver can discover via the connected $dbh. Typically the extra data sources are other databases managed by the same server process that the $dbh is connected to.</p>

<p>Data sources are returned in a form suitable for passing to the <a href="#connect" class="podlinkpod"
>&#34;connect&#34;</a> method (that is, they will include the &#34;<code>dbi:$driver:</code>&#34; prefix).</p>

<p>The data_sources() method, for a $dbh, was added in DBI 1.38.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="do"
><code>do</code></a></h3>

<pre class="sh_perl">  $rows = $dbh-&#62;do($statement)           or die $dbh-&#62;errstr;
  $rows = $dbh-&#62;do($statement, \%attr)   or die $dbh-&#62;errstr;
  $rows = $dbh-&#62;do($statement, \%attr, @bind_values) or die ...</pre>

<p>Prepare and execute a single statement. Returns the number of rows affected or <code>undef</code> on error. A return value of <code>-1</code> means the number of rows is not known, not applicable, or not available.</p>

<p>This method is typically most useful for <i>non</i>-<code>SELECT</code> statements that either cannot be prepared in advance (due to a limitation of the driver) or do not need to be executed repeatedly. It should not be used for <code>SELECT</code> statements because it does not return a statement handle (so you can&#39;t fetch any data).</p>

<p>The default <code>do</code> method is logically similar to:</p>

<pre class="sh_perl">  sub do {
      my($dbh, $statement, $attr, @bind_values) = @_;
      my $sth = $dbh-&#62;prepare($statement, $attr) or return undef;
      $sth-&#62;execute(@bind_values) or return undef;
      my $rows = $sth-&#62;rows;
      ($rows == 0) ? &#34;0E0&#34; : $rows; # always return true if no error
  }</pre>

<p>For example:</p>

<pre class="sh_perl">  my $rows_deleted = $dbh-&#62;do(q{
      DELETE FROM table
      WHERE status = ?
  }, undef, &#39;DONE&#39;) or die $dbh-&#62;errstr;</pre>

<p>Using placeholders and <code>@bind_values</code> with the <code>do</code> method can be useful because it avoids the need to correctly quote any variables in the <code>$statement</code>. But if you&#39;ll be executing the statement many times then it&#39;s more efficient to <code>prepare</code> it once and call <code>execute</code> many times instead.</p>

<p>The <code>q{...}</code> style quoting used in this example avoids clashing with quotes that may be used in the SQL statement. Use the double-quote-like <code>qq{...}</code> operator if you want to interpolate variables into the string. See <a href="/perldoc?perlop#Quote_and_Quote-like_Operators" class="podlinkpod"
>&#34;Quote and Quote-like Operators&#34; in perlop</a> for more details.</p>

<p>Note drivers are free to avoid the overhead of creating an DBI statement handle for do(), especially if there are no parameters. In this case error handlers, if invoked during do(), will be passed the database handle.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="last_insert_id"
><code>last_insert_id</code></a></h3>

<pre class="sh_perl">  $rv = $dbh-&#62;last_insert_id($catalog, $schema, $table, $field);
  $rv = $dbh-&#62;last_insert_id($catalog, $schema, $table, $field, \%attr);</pre>

<p>Returns a value &#39;identifying&#39; the row just inserted, if possible. Typically this would be a value assigned by the database server to a column with an <i>auto_increment</i> or <i>serial</i> type. Returns undef if the driver does not support the method or can&#39;t determine the value.</p>

<p>The $catalog, $schema, $table, and $field parameters may be required for some drivers (see below). If you don&#39;t know the parameter values and your driver does not need them, then use <code>undef</code> for each.</p>

<p>There are several caveats to be aware of with this method if you want to use it for portable applications:</p>

<p><b>*</b> For some drivers the value may only available immediately after the insert statement has executed (e.g., mysql, Informix).</p>

<p><b>*</b> For some drivers the $catalog, $schema, $table, and $field parameters are required, for others they are ignored (e.g., mysql).</p>

<p><b>*</b> Drivers may return an indeterminate value if no insert has been performed yet.</p>

<p><b>*</b> For some drivers the value may only be available if placeholders have <i>not</i> been used (e.g., Sybase, MS SQL). In this case the value returned would be from the last non-placeholder insert statement.</p>

<p><b>*</b> Some drivers may need driver-specific hints about how to get the value. For example, being told the name of the database &#39;sequence&#39; object that holds the value. Any such hints are passed as driver-specific attributes in the \%attr parameter.</p>

<p><b>*</b> If the underlying database offers nothing better, then some drivers may attempt to implement this method by executing &#34;<code>select max($field) from $table</code>&#34;. Drivers using any approach like this should issue a warning if <code>AutoCommit</code> is true because it is generally unsafe - another process may have modified the table between your insert and the select. For situations where you know it is safe, such as when you have locked the table, you can silence the warning by passing <code>Warn</code> =&#62; 0 in \%attr.</p>

<p><b>*</b> If no insert has been performed yet, or the last insert failed, then the value is implementation defined.</p>

<p>Given all the caveats above, it&#39;s clear that this method must be used with care.</p>

<p>The <code>last_insert_id</code> method was added in DBI 1.38.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="selectrow_array"
><code>selectrow_array</code></a></h3>

<pre class="sh_perl">  @row_ary = $dbh-&#62;selectrow_array($statement);
  @row_ary = $dbh-&#62;selectrow_array($statement, \%attr);
  @row_ary = $dbh-&#62;selectrow_array($statement, \%attr, @bind_values);</pre>

<p>This utility method combines <a href="#prepare" class="podlinkpod"
>&#34;prepare&#34;</a>, <a href="#execute" class="podlinkpod"
>&#34;execute&#34;</a> and <a href="#fetchrow_array" class="podlinkpod"
>&#34;fetchrow_array&#34;</a> into a single call. If called in a list context, it returns the first row of data from the statement. The <code>$statement</code> parameter can be a previously prepared statement handle, in which case the <code>prepare</code> is skipped.</p>

<p>If any method fails, and <a href="#RaiseError" class="podlinkpod"
>&#34;RaiseError&#34;</a> is not set, <code>selectrow_array</code> will return an empty list.</p>

<p>If called in a scalar context for a statement handle that has more than one column, it is undefined whether the driver will return the value of the first column or the last. So don&#39;t do that. Also, in a scalar context, an <code>undef</code> is returned if there are no more rows or if an error occurred. That <code>undef</code> can&#39;t be distinguished from an <code>undef</code> returned because the first field value was NULL. For these reasons you should exercise some caution if you use <code>selectrow_array</code> in a scalar context, or just don&#39;t do that.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="selectrow_arrayref"
><code>selectrow_arrayref</code></a></h3>

<pre class="sh_perl">  $ary_ref = $dbh-&#62;selectrow_arrayref($statement);
  $ary_ref = $dbh-&#62;selectrow_arrayref($statement, \%attr);
  $ary_ref = $dbh-&#62;selectrow_arrayref($statement, \%attr, @bind_values);</pre>

<p>This utility method combines <a href="#prepare" class="podlinkpod"
>&#34;prepare&#34;</a>, <a href="#execute" class="podlinkpod"
>&#34;execute&#34;</a> and <a href="#fetchrow_arrayref" class="podlinkpod"
>&#34;fetchrow_arrayref&#34;</a> into a single call. It returns the first row of data from the statement. The <code>$statement</code> parameter can be a previously prepared statement handle, in which case the <code>prepare</code> is skipped.</p>

<p>If any method fails, and <a href="#RaiseError" class="podlinkpod"
>&#34;RaiseError&#34;</a> is not set, <code>selectrow_array</code> will return undef.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="selectrow_hashref"
><code>selectrow_hashref</code></a></h3>

<pre class="sh_perl">  $hash_ref = $dbh-&#62;selectrow_hashref($statement);
  $hash_ref = $dbh-&#62;selectrow_hashref($statement, \%attr);
  $hash_ref = $dbh-&#62;selectrow_hashref($statement, \%attr, @bind_values);</pre>

<p>This utility method combines <a href="#prepare" class="podlinkpod"
>&#34;prepare&#34;</a>, <a href="#execute" class="podlinkpod"
>&#34;execute&#34;</a> and <a href="#fetchrow_hashref" class="podlinkpod"
>&#34;fetchrow_hashref&#34;</a> into a single call. It returns the first row of data from the statement. The <code>$statement</code> parameter can be a previously prepared statement handle, in which case the <code>prepare</code> is skipped.</p>

<p>If any method fails, and <a href="#RaiseError" class="podlinkpod"
>&#34;RaiseError&#34;</a> is not set, <code>selectrow_hashref</code> will return undef.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="selectall_arrayref"
><code>selectall_arrayref</code></a></h3>

<pre class="sh_perl">  $ary_ref = $dbh-&#62;selectall_arrayref($statement);
  $ary_ref = $dbh-&#62;selectall_arrayref($statement, \%attr);
  $ary_ref = $dbh-&#62;selectall_arrayref($statement, \%attr, @bind_values);</pre>

<p>This utility method combines <a href="#prepare" class="podlinkpod"
>&#34;prepare&#34;</a>, <a href="#execute" class="podlinkpod"
>&#34;execute&#34;</a> and <a href="#fetchall_arrayref" class="podlinkpod"
>&#34;fetchall_arrayref&#34;</a> into a single call. It returns a reference to an array containing a reference to an array (or hash, see below) for each row of data fetched.</p>

<p>The <code>$statement</code> parameter can be a previously prepared statement handle, in which case the <code>prepare</code> is skipped. This is recommended if the statement is going to be executed many times.</p>

<p>If <a href="#RaiseError" class="podlinkpod"
>&#34;RaiseError&#34;</a> is not set and any method except <code>fetchall_arrayref</code> fails then <code>selectall_arrayref</code> will return <code>undef</code>; if <code>fetchall_arrayref</code> fails then it will return with whatever data has been fetched thus far. You should check <code>$sth-&#62;err</code> afterwards (or use the <code>RaiseError</code> attribute) to discover if the data is complete or was truncated due to an error.</p>

<p>The <a href="#fetchall_arrayref" class="podlinkpod"
>&#34;fetchall_arrayref&#34;</a> method called by <code>selectall_arrayref</code> supports a $max_rows parameter. You can specify a value for $max_rows by including a &#39;<code>MaxRows</code>&#39; attribute in \%attr. In which case finish() is called for you after fetchall_arrayref() returns.</p>

<p>The <a href="#fetchall_arrayref" class="podlinkpod"
>&#34;fetchall_arrayref&#34;</a> method called by <code>selectall_arrayref</code> also supports a $slice parameter. You can specify a value for $slice by including a &#39;<code>Slice</code>&#39; or &#39;<code>Columns</code>&#39; attribute in \%attr. The only difference between the two is that if <code>Slice</code> is not defined and <code>Columns</code> is an array ref, then the array is assumed to contain column index values (which count from 1), rather than perl array index values. In which case the array is copied and each value decremented before passing to <code>/fetchall_arrayref</code>.</p>

<p>You may often want to fetch an array of rows where each row is stored as a hash. That can be done simple using:</p>

<pre class="sh_perl">  my $emps = $dbh-&#62;selectall_arrayref(
      &#34;SELECT ename FROM emp ORDER BY ename&#34;,
      { Slice =&#62; {} }
  );
  foreach my $emp ( @$emps ) {
      print &#34;Employee: $emp-&#62;{ename}\n&#34;;
  }</pre>

<p>Or, to fetch into an array instead of an array ref:</p>

<pre class="sh_perl">  @result = @{ $dbh-&#62;selectall_arrayref($sql, { Slice =&#62; {} }) };</pre>

<p>See <a href="#fetchall_arrayref" class="podlinkpod"
>&#34;fetchall_arrayref&#34;</a> method for more details.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="selectall_hashref"
><code>selectall_hashref</code></a></h3>

<pre class="sh_perl">  $hash_ref = $dbh-&#62;selectall_hashref($statement, $key_field);
  $hash_ref = $dbh-&#62;selectall_hashref($statement, $key_field, \%attr);
  $hash_ref = $dbh-&#62;selectall_hashref($statement, $key_field, \%attr, @bind_values);</pre>

<p>This utility method combines <a href="#prepare" class="podlinkpod"
>&#34;prepare&#34;</a>, <a href="#execute" class="podlinkpod"
>&#34;execute&#34;</a> and <a href="#fetchall_hashref" class="podlinkpod"
>&#34;fetchall_hashref&#34;</a> into a single call. It returns a reference to a hash containing one entry, at most, for each row, as returned by fetchall_hashref().</p>

<p>The <code>$statement</code> parameter can be a previously prepared statement handle, in which case the <code>prepare</code> is skipped. This is recommended if the statement is going to be executed many times.</p>

<p>The <code>$key_field</code> parameter defines which column, or columns, are used as keys in the returned hash. It can either be the name of a single field, or a reference to an array containing multiple field names. Using multiple names yields a tree of nested hashes.</p>

<p>If a row has the same key as an earlier row then it replaces the earlier row.</p>

<p>If any method except <code>fetchrow_hashref</code> fails, and <a href="#RaiseError" class="podlinkpod"
>&#34;RaiseError&#34;</a> is not set, <code>selectall_hashref</code> will return <code>undef</code>. If <code>fetchrow_hashref</code> fails and <a href="#RaiseError" class="podlinkpod"
>&#34;RaiseError&#34;</a> is not set, then it will return with whatever data it has fetched thus far. $DBI::err should be checked to catch that.</p>

<p>See fetchall_hashref() for more details.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="selectcol_arrayref"
><code>selectcol_arrayref</code></a></h3>

<pre class="sh_perl">  $ary_ref = $dbh-&#62;selectcol_arrayref($statement);
  $ary_ref = $dbh-&#62;selectcol_arrayref($statement, \%attr);
  $ary_ref = $dbh-&#62;selectcol_arrayref($statement, \%attr, @bind_values);</pre>

<p>This utility method combines <a href="#prepare" class="podlinkpod"
>&#34;prepare&#34;</a>, <a href="#execute" class="podlinkpod"
>&#34;execute&#34;</a>, and fetching one column from all the rows, into a single call. It returns a reference to an array containing the values of the first column from each row.</p>

<p>The <code>$statement</code> parameter can be a previously prepared statement handle, in which case the <code>prepare</code> is skipped. This is recommended if the statement is going to be executed many times.</p>

<p>If any method except <code>fetch</code> fails, and <a href="#RaiseError" class="podlinkpod"
>&#34;RaiseError&#34;</a> is not set, <code>selectcol_arrayref</code> will return <code>undef</code>. If <code>fetch</code> fails and <a href="#RaiseError" class="podlinkpod"
>&#34;RaiseError&#34;</a> is not set, then it will return with whatever data it has fetched thus far. $DBI::err should be checked to catch that.</p>

<p>The <code>selectcol_arrayref</code> method defaults to pushing a single column value (the first) from each row into the result array. However, it can also push another column, or even multiple columns per row, into the result array. This behaviour can be specified via a &#39;<code>Columns</code>&#39; attribute which must be a ref to an array containing the column number or numbers to use. For example:</p>

<pre class="sh_perl">  # get array of id and name pairs:
  my $ary_ref = $dbh-&#62;selectcol_arrayref(&#34;select id, name from table&#34;, { Columns=&#62;[1,2] });
  my %hash = @$ary_ref; # build hash from key-value pairs so $hash{$id} =&#62; name</pre>

<p>You can specify a maximum number of rows to fetch by including a &#39;<code>MaxRows</code>&#39; attribute in \%attr.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="prepare"
><code>prepare</code></a></h3>

<pre class="sh_perl">  $sth = $dbh-&#62;prepare($statement)          or die $dbh-&#62;errstr;
  $sth = $dbh-&#62;prepare($statement, \%attr)  or die $dbh-&#62;errstr;</pre>

<p>Prepares a statement for later execution by the database engine and returns a reference to a statement handle object.</p>

<p>The returned statement handle can be used to get attributes of the statement and invoke the <a href="#execute" class="podlinkpod"
>&#34;execute&#34;</a> method. See <a href="#Statement_Handle_Methods" class="podlinkpod"
>&#34;Statement Handle Methods&#34;</a>.</p>

<p>Drivers for engines without the concept of preparing a statement will typically just store the statement in the returned handle and process it when <code>$sth-&#62;execute</code> is called. Such drivers are unlikely to give much useful information about the statement, such as <code>$sth-&#62;{NUM_OF_FIELDS}</code>, until after <code>$sth-&#62;execute</code> has been called. Portable applications should take this into account.</p>

<p>In general, DBI drivers do not parse the contents of the statement (other than simply counting any <a href="#Placeholders" class="podlinkpod"
>&#34;Placeholders&#34;</a>). The statement is passed directly to the database engine, sometimes known as pass-thru mode. This has advantages and disadvantages. On the plus side, you can access all the functionality of the engine being used. On the downside, you&#39;re limited if you&#39;re using a simple engine, and you need to take extra care if writing applications intended to be portable between engines.</p>

<p>Portable applications should not assume that a new statement can be prepared and/or executed while still fetching results from a previous statement.</p>

<p>Some command-line SQL tools use statement terminators, like a semicolon, to indicate the end of a statement. Such terminators should not normally be used with the DBI.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="prepare_cached"
><code>prepare_cached</code></a></h3>

<pre class="sh_perl">  $sth = $dbh-&#62;prepare_cached($statement)
  $sth = $dbh-&#62;prepare_cached($statement, \%attr)
  $sth = $dbh-&#62;prepare_cached($statement, \%attr, $if_active)</pre>

<p>Like <a href="#prepare" class="podlinkpod"
>&#34;prepare&#34;</a> except that the statement handle returned will be stored in a hash associated with the <code>$dbh</code>. If another call is made to <code>prepare_cached</code> with the same <code>$statement</code> and <code>%attr</code> parameter values, then the corresponding cached <code>$sth</code> will be returned without contacting the database server.</p>

<p>The <code>$if_active</code> parameter lets you adjust the behaviour if an already cached statement handle is still Active. There are several alternatives:</p>

<dl>
<dt><a 
><b>0</b>: A warning will be generated, and finish() will be called on the statement handle before it is returned. This is the default behaviour if $if_active is not passed.</a></dt>

<dd>
<dt><a name='1'></a><a name="1:_finish()_will_be_called_on_the_statement_handle,_but_the_warning_is_suppressed."
><b>1</b>: finish() will be called on the statement handle, but the warning is suppressed.</a></dt>

<dd>
<dt><a name='2'></a><a name="2:_Disables_any_checking."
><b>2</b>: Disables any checking.</a></dt>

<dd>
<dt><a 
><b>3</b>: The existing active statement handle will be removed from the cache and a new statement handle prepared and cached in its place. This is the safest option because it doesn&#39;t affect the state of the old handle, it just removes it from the cache. [Added in DBI 1.40]</a></dt>
</dl>

<p>Here are some examples of <code>prepare_cached</code>:</p>

<pre class="sh_perl">  sub insert_hash {
    my ($table, $field_values) = @_;
    # sort to keep field order, and thus sql, stable for prepare_cached
    my @fields = sort keys %$field_values;
    my @values = @{$field_values}{@fields};
    my $sql = sprintf &#34;insert into %s (%s) values (%s)&#34;,
        $table, join(&#34;,&#34;, @fields), join(&#34;,&#34;, (&#34;?&#34;)x@fields);
    my $sth = $dbh-&#62;prepare_cached($sql);
    return $sth-&#62;execute(@values);
  }

  sub search_hash {
    my ($table, $field_values) = @_;
    # sort to keep field order, and thus sql, stable for prepare_cached
    my @fields = sort keys %$field_values;
    my @values = @{$field_values}{@fields};
    my $qualifier = &#34;&#34;;
    $qualifier = &#34;where &#34;.join(&#34; and &#34;, map { &#34;$_=?&#34; } @fields) if @fields;
    $sth = $dbh-&#62;prepare_cached(&#34;SELECT * FROM $table $qualifier&#34;);
    return $dbh-&#62;selectall_arrayref($sth, {}, @values);
  }</pre>

<p><i>Caveat emptor:</i> This caching can be useful in some applications, but it can also cause problems and should be used with care. Here is a contrived case where caching would cause a significant problem:</p>

<pre class="sh_perl">  my $sth = $dbh-&#62;prepare_cached(&#39;SELECT * FROM foo WHERE bar=?&#39;);
  $sth-&#62;execute(...);
  while (my $data = $sth-&#62;fetchrow_hashref) {

    # later, in some other code called within the loop...
    my $sth2 = $dbh-&#62;prepare_cached(&#39;SELECT * FROM foo WHERE bar=?&#39;);
    $sth2-&#62;execute(...);
    while (my $data2 = $sth2-&#62;fetchrow_arrayref) {
      do_stuff(...);
    }
  }</pre>

<p>In this example, since both handles are preparing the exact same statement, <code>$sth2</code> will not be its own statement handle, but a duplicate of <code>$sth</code> returned from the cache. The results will certainly not be what you expect. Typically the inner fetch loop will work normally, fetching all the records and terminating when there are no more, but now that $sth is the same as $sth2 the outer fetch loop will also terminate.</p>

<p>You&#39;ll know if you run into this problem because prepare_cached() will generate a warning by default (when $if_active is false).</p>

<p>The cache used by prepare_cached() is keyed by both the statement and any attributes so you can also avoid this issue by doing something like:</p>

<pre class="sh_perl">  $sth = $dbh-&#62;prepare_cached(&#34;...&#34;, { dbi_dummy =&#62; __FILE__.__LINE__ });</pre>

<p>which will ensure that prepare_cached only returns statements cached by that line of code in that source file.</p>

<p>If you&#39;d like the cache to managed intelligently, you can tie the hashref returned by <code>CachedKids</code> to an appropriate caching module, such as <a href="/perldoc?Tie%3A%3ACache%3A%3ALRU" class="podlinkpod"
>Tie::Cache::LRU</a>:</p>

<pre class="sh_perl">  my $cache;
  tie %$cache, &#39;Tie::Cache::LRU&#39;, 500;
  $dbh-&#62;{CachedKids} = $cache;</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="commit"
><code>commit</code></a></h3>

<pre class="sh_perl">  $rc  = $dbh-&#62;commit     or die $dbh-&#62;errstr;</pre>

<p>Commit (make permanent) the most recent series of database changes if the database supports transactions and AutoCommit is off.</p>

<p>If <code>AutoCommit</code> is on, then calling <code>commit</code> will issue a &#34;commit ineffective with AutoCommit&#34; warning.</p>

<p>See also <a href="#Transactions" class="podlinkpod"
>&#34;Transactions&#34;</a> in the <a href="#FURTHER_INFORMATION" class="podlinkpod"
>&#34;FURTHER INFORMATION&#34;</a> section below.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="rollback"
><code>rollback</code></a></h3>

<pre class="sh_perl">  $rc  = $dbh-&#62;rollback   or die $dbh-&#62;errstr;</pre>

<p>Rollback (undo) the most recent series of uncommitted database changes if the database supports transactions and AutoCommit is off.</p>

<p>If <code>AutoCommit</code> is on, then calling <code>rollback</code> will issue a &#34;rollback ineffective with AutoCommit&#34; warning.</p>

<p>See also <a href="#Transactions" class="podlinkpod"
>&#34;Transactions&#34;</a> in the <a href="#FURTHER_INFORMATION" class="podlinkpod"
>&#34;FURTHER INFORMATION&#34;</a> section below.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="begin_work"
><code>begin_work</code></a></h3>

<pre class="sh_perl">  $rc  = $dbh-&#62;begin_work   or die $dbh-&#62;errstr;</pre>

<p>Enable transactions (by turning <code>AutoCommit</code> off) until the next call to <code>commit</code> or <code>rollback</code>. After the next <code>commit</code> or <code>rollback</code>, <code>AutoCommit</code> will automatically be turned on again.</p>

<p>If <code>AutoCommit</code> is already off when <code>begin_work</code> is called then it does nothing except return an error. If the driver does not support transactions then when <code>begin_work</code> attempts to set <code>AutoCommit</code> off the driver will trigger a fatal error.</p>

<p>See also <a href="#Transactions" class="podlinkpod"
>&#34;Transactions&#34;</a> in the <a href="#FURTHER_INFORMATION" class="podlinkpod"
>&#34;FURTHER INFORMATION&#34;</a> section below.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="disconnect"
><code>disconnect</code></a></h3>

<pre class="sh_perl">  $rc = $dbh-&#62;disconnect  or warn $dbh-&#62;errstr;</pre>

<p>Disconnects the database from the database handle. <code>disconnect</code> is typically only used before exiting the program. The handle is of little use after disconnecting.</p>

<p>The transaction behaviour of the <code>disconnect</code> method is, sadly, undefined. Some database systems (such as Oracle and Ingres) will automatically commit any outstanding changes, but others (such as Informix) will rollback any outstanding changes. Applications not using <code>AutoCommit</code> should explicitly call <code>commit</code> or <code>rollback</code> before calling <code>disconnect</code>.</p>

<p>The database is automatically disconnected by the <code>DESTROY</code> method if still connected when there are no longer any references to the handle. The <code>DESTROY</code> method for each driver should implicitly call <code>rollback</code> to undo any uncommitted changes. This is vital behaviour to ensure that incomplete transactions don&#39;t get committed simply because Perl calls <code>DESTROY</code> on every object before exiting. Also, do not rely on the order of object destruction during &#34;global destruction&#34;, as it is undefined.</p>

<p>Generally, if you want your changes to be committed or rolled back when you disconnect, then you should explicitly call <a href="#commit" class="podlinkpod"
>&#34;commit&#34;</a> or <a href="#rollback" class="podlinkpod"
>&#34;rollback&#34;</a> before disconnecting.</p>

<p>If you disconnect from a database while you still have active statement handles (e.g., SELECT statement handles that may have more data to fetch), you will get a warning. The warning may indicate that a fetch loop terminated early, perhaps due to an uncaught error. To avoid the warning call the <code>finish</code> method on the active handles.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="ping"
><code>ping</code></a></h3>

<pre class="sh_perl">  $rc = $dbh-&#62;ping;</pre>

<p>Attempts to determine, in a reasonably efficient way, if the database server is still running and the connection to it is still working. Individual drivers should implement this function in the most suitable manner for their database engine.</p>

<p>The current <i>default</i> implementation always returns true without actually doing anything. Actually, it returns &#34;<code>0 but true</code>&#34; which is true but zero. That way you can tell if the return value is genuine or just the default. Drivers should override this method with one that does the right thing for their type of database.</p>

<p>Few applications would have direct use for this method. See the specialized Apache::DBI module for one example usage.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="get_info"
><code>get_info</code></a></h3>

<pre class="sh_perl">  $value = $dbh-&#62;get_info( $info_type );</pre>

<p>Returns information about the implementation, i.e. driver and data source capabilities, restrictions etc. It returns <code>undef</code> for unknown or unimplemented information types. For example:</p>

<pre class="sh_perl">  $database_version  = $dbh-&#62;get_info(  18 ); # SQL_DBMS_VER
  $max_select_tables = $dbh-&#62;get_info( 106 ); # SQL_MAXIMUM_TABLES_IN_SELECT</pre>

<p>See <a href="#Standards_Reference_Information" class="podlinkpod"
>&#34;Standards Reference Information&#34;</a> for more detailed information about the information types and their meanings and possible return values.</p>

<p>The DBI::Const::GetInfoType module exports a %GetInfoType hash that can be used to map info type names to numbers. For example:</p>

<pre class="sh_perl">  $database_version = $dbh-&#62;get_info( $GetInfoType{SQL_DBMS_VER} );</pre>

<p>The names are a merging of the ANSI and ODBC standards (which differ in some cases). See <a href="/~timb/DBI-1.620/lib/DBI/Const/GetInfoType.pm" class="podlinkpod"
>DBI::Const::GetInfoType</a> for more details.</p>

<p>Because some DBI methods make use of get_info(), drivers are strongly encouraged to support <i>at least</i> the following very minimal set of information types to ensure the DBI itself works properly:</p>

<pre class="sh_perl"> Type  Name                        Example A     Example B
 ----  --------------------------  ------------  ----------------
   17  SQL_DBMS_NAME               &#39;ACCESS&#39;      &#39;Oracle&#39;
   18  SQL_DBMS_VER                &#39;03.50.0000&#39;  &#39;08.01.0721 ...&#39;
   29  SQL_IDENTIFIER_QUOTE_CHAR   &#39;`&#39;           &#39;&#34;&#39;
   41  SQL_CATALOG_NAME_SEPARATOR  &#39;.&#39;           &#39;@&#39;
  114  SQL_CATALOG_LOCATION        1             2</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="table_info"
><code>table_info</code></a></h3>

<pre class="sh_perl">  $sth = $dbh-&#62;table_info( $catalog, $schema, $table, $type );
  $sth = $dbh-&#62;table_info( $catalog, $schema, $table, $type, \%attr );

  # then $sth-&#62;fetchall_arrayref or $sth-&#62;fetchall_hashref etc</pre>

<p>Returns an active statement handle that can be used to fetch information about tables and views that exist in the database.</p>

<p>The arguments $catalog, $schema and $table may accept search patterns according to the database/driver, for example: $table = &#39;%FOO%&#39;; Remember that the underscore character (&#39;<code>_</code>&#39;) is a search pattern that means match any character, so &#39;FOO_%&#39; is the same as &#39;FOO%&#39; and &#39;FOO_BAR%&#39; will match names like &#39;FOO1BAR&#39;.</p>

<p>The value of $type is a comma-separated list of one or more types of tables to be returned in the result set. Each value may optionally be quoted, e.g.:</p>

<pre class="sh_perl">  $type = &#34;TABLE&#34;;
  $type = &#34;&#39;TABLE&#39;,&#39;VIEW&#39;&#34;;</pre>

<p>In addition the following special cases may also be supported by some drivers:</p>

<ul>
<li>If the value of $catalog is &#39;%&#39; and $schema and $table name are empty strings, the result set contains a list of catalog names. For example:
<pre class="sh_perl">  $sth = $dbh-&#62;table_info(&#39;%&#39;, &#39;&#39;, &#39;&#39;);</pre>
</li>

<li>If the value of $schema is &#39;%&#39; and $catalog and $table are empty strings, the result set contains a list of schema names.</li>

<li>If the value of $type is &#39;%&#39; and $catalog, $schema, and $table are all empty strings, the result set contains a list of table types.</li>
</ul>

<p>If your driver doesn&#39;t support one or more of the selection filter parameters then you may get back more than you asked for and can do the filtering yourself.</p>

<p>This method can be expensive, and can return a large amount of data. (For example, small Oracle installation returns over 2000 rows.) So it&#39;s a good idea to use the filters to limit the data as much as possible.</p>

<p>The statement handle returned has at least the following fields in the order show below. Other fields, after these, may also be present.</p>

<p><b>TABLE_CAT</b>: Table catalog identifier. This field is NULL (<code>undef</code>) if not applicable to the data source, which is usually the case. This field is empty if not applicable to the table.</p>

<p><b>TABLE_SCHEM</b>: The name of the schema containing the TABLE_NAME value. This field is NULL (<code>undef</code>) if not applicable to data source, and empty if not applicable to the table.</p>

<p><b>TABLE_NAME</b>: Name of the table (or view, synonym, etc).</p>

<p><b>TABLE_TYPE</b>: One of the following: &#34;TABLE&#34;, &#34;VIEW&#34;, &#34;SYSTEM TABLE&#34;, &#34;GLOBAL TEMPORARY&#34;, &#34;LOCAL TEMPORARY&#34;, &#34;ALIAS&#34;, &#34;SYNONYM&#34; or a type identifier that is specific to the data source.</p>

<p><b>REMARKS</b>: A description of the table. May be NULL (<code>undef</code>).</p>

<p>Note that <code>table_info</code> might not return records for all tables. Applications can use any valid table regardless of whether it&#39;s returned by <code>table_info</code>.</p>

<p>See also <a href="#tables" class="podlinkpod"
>&#34;tables&#34;</a>, <a href="#Catalog_Methods" class="podlinkpod"
>&#34;Catalog Methods&#34;</a> and <a href="#Standards_Reference_Information" class="podlinkpod"
>&#34;Standards Reference Information&#34;</a>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="column_info"
><code>column_info</code></a></h3>

<pre class="sh_perl">  $sth = $dbh-&#62;column_info( $catalog, $schema, $table, $column );

  # then $sth-&#62;fetchall_arrayref or $sth-&#62;fetchall_hashref etc</pre>

<p>Returns an active statement handle that can be used to fetch information about columns in specified tables.</p>

<p>The arguments $schema, $table and $column may accept search patterns according to the database/driver, for example: $table = &#39;%FOO%&#39;;</p>

<p>Note: The support for the selection criteria is driver specific. If the driver doesn&#39;t support one or more of them then you may get back more than you asked for and can do the filtering yourself.</p>

<p>Note: If your driver does not support column_info an undef is returned. This is distinct from asking for something which does not exist in a driver which supports column_info as a valid statement handle to an empty result-set will be returned in this case.</p>

<p>If the arguments don&#39;t match any tables then you&#39;ll still get a statement handle, it&#39;ll just return no rows.</p>

<p>The statement handle returned has at least the following fields in the order shown below. Other fields, after these, may also be present.</p>

<p><b>TABLE_CAT</b>: The catalog identifier. This field is NULL (<code>undef</code>) if not applicable to the data source, which is often the case. This field is empty if not applicable to the table.</p>

<p><b>TABLE_SCHEM</b>: The schema identifier. This field is NULL (<code>undef</code>) if not applicable to the data source, and empty if not applicable to the table.</p>

<p><b>TABLE_NAME</b>: The table identifier. Note: A driver may provide column metadata not only for base tables, but also for derived objects like SYNONYMS etc.</p>

<p><b>COLUMN_NAME</b>: The column identifier.</p>

<p><b>DATA_TYPE</b>: The concise data type code.</p>

<p><b>TYPE_NAME</b>: A data source dependent data type name.</p>

<p><b>COLUMN_SIZE</b>: The column size. This is the maximum length in characters for character data types, the number of digits or bits for numeric data types or the length in the representation of temporal types. See the relevant specifications for detailed information.</p>

<p><b>BUFFER_LENGTH</b>: The length in bytes of transferred data.</p>

<p><b>DECIMAL_DIGITS</b>: The total number of significant digits to the right of the decimal point.</p>

<p><b>NUM_PREC_RADIX</b>: The radix for numeric precision. The value is 10 or 2 for numeric data types and NULL (<code>undef</code>) if not applicable.</p>

<p><b>NULLABLE</b>: Indicates if a column can accept NULLs. The following values are defined:</p>

<pre class="sh_perl">  SQL_NO_NULLS          0
  SQL_NULLABLE          1
  SQL_NULLABLE_UNKNOWN  2</pre>

<p><b>REMARKS</b>: A description of the column.</p>

<p><b>COLUMN_DEF</b>: The default value of the column, in a format that can be used directly in an SQL statement.</p>

<p>Note that this may be an expression and not simply the text used for the default value in the original CREATE TABLE statement. For example, given:</p>

<pre class="sh_perl">    col1 char(30) default current_user    -- a &#39;function&#39;
    col2 char(30) default &#39;string&#39;        -- a string literal</pre>

<p>where &#34;current_user&#34; is the name of a function, the corresponding <code>COLUMN_DEF</code> values would be:</p>

<pre class="sh_perl">    Database        col1                     col2
    --------        ----                     ----
    Oracle:         current_user             &#39;string&#39;
    Postgres:       &#34;current_user&#34;()         &#39;string&#39;::text
    MS SQL:         (user_name())            (&#39;string&#39;)</pre>

<p><b>SQL_DATA_TYPE</b>: The SQL data type.</p>

<p><b>SQL_DATETIME_SUB</b>: The subtype code for datetime and interval data types.</p>

<p><b>CHAR_OCTET_LENGTH</b>: The maximum length in bytes of a character or binary data type column.</p>

<p><b>ORDINAL_POSITION</b>: The column sequence number (starting with 1).</p>

<p><b>IS_NULLABLE</b>: Indicates if the column can accept NULLs. Possible values are: &#39;NO&#39;, &#39;YES&#39; and &#39;&#39;.</p>

<p>SQL/CLI defines the following additional columns:</p>

<pre class="sh_perl">  CHAR_SET_CAT
  CHAR_SET_SCHEM
  CHAR_SET_NAME
  COLLATION_CAT
  COLLATION_SCHEM
  COLLATION_NAME
  UDT_CAT
  UDT_SCHEM
  UDT_NAME
  DOMAIN_CAT
  DOMAIN_SCHEM
  DOMAIN_NAME
  SCOPE_CAT
  SCOPE_SCHEM
  SCOPE_NAME
  MAX_CARDINALITY
  DTD_IDENTIFIER
  IS_SELF_REF</pre>

<p>Drivers capable of supplying any of those values should do so in the corresponding column and supply undef values for the others.</p>

<p>Drivers wishing to provide extra database/driver specific information should do so in extra columns beyond all those listed above, and use lowercase field names with the driver-specific prefix (i.e., &#39;ora_...&#39;). Applications accessing such fields should do so by name and not by column number.</p>

<p>The result set is ordered by TABLE_CAT, TABLE_SCHEM, TABLE_NAME and ORDINAL_POSITION.</p>

<p>Note: There is some overlap with statement handle attributes (in perl) and SQLDescribeCol (in ODBC). However, SQLColumns provides more metadata.</p>

<p>See also <a href="#Catalog_Methods" class="podlinkpod"
>&#34;Catalog Methods&#34;</a> and <a href="#Standards_Reference_Information" class="podlinkpod"
>&#34;Standards Reference Information&#34;</a>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="primary_key_info"
><code>primary_key_info</code></a></h3>

<pre class="sh_perl">  $sth = $dbh-&#62;primary_key_info( $catalog, $schema, $table );

  # then $sth-&#62;fetchall_arrayref or $sth-&#62;fetchall_hashref etc</pre>

<p>Returns an active statement handle that can be used to fetch information about columns that make up the primary key for a table. The arguments don&#39;t accept search patterns (unlike table_info()).</p>

<p>The statement handle will return one row per column, ordered by TABLE_CAT, TABLE_SCHEM, TABLE_NAME, and KEY_SEQ. If there is no primary key then the statement handle will fetch no rows.</p>

<p>Note: The support for the selection criteria, such as $catalog, is driver specific. If the driver doesn&#39;t support catalogs and/or schemas, it may ignore these criteria.</p>

<p>The statement handle returned has at least the following fields in the order shown below. Other fields, after these, may also be present.</p>

<p><b>TABLE_CAT</b>: The catalog identifier. This field is NULL (<code>undef</code>) if not applicable to the data source, which is often the case. This field is empty if not applicable to the table.</p>

<p><b>TABLE_SCHEM</b>: The schema identifier. This field is NULL (<code>undef</code>) if not applicable to the data source, and empty if not applicable to the table.</p>

<p><b>TABLE_NAME</b>: The table identifier.</p>

<p><b>COLUMN_NAME</b>: The column identifier.</p>

<p><b>KEY_SEQ</b>: The column sequence number (starting with 1). Note: This field is named <b>ORDINAL_POSITION</b> in SQL/CLI.</p>

<p><b>PK_NAME</b>: The primary key constraint identifier. This field is NULL (<code>undef</code>) if not applicable to the data source.</p>

<p>See also <a href="#Catalog_Methods" class="podlinkpod"
>&#34;Catalog Methods&#34;</a> and <a href="#Standards_Reference_Information" class="podlinkpod"
>&#34;Standards Reference Information&#34;</a>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="primary_key"
><code>primary_key</code></a></h3>

<pre class="sh_perl">  @key_column_names = $dbh-&#62;primary_key( $catalog, $schema, $table );</pre>

<p>Simple interface to the primary_key_info() method. Returns a list of the column names that comprise the primary key of the specified table. The list is in primary key column sequence order. If there is no primary key then an empty list is returned.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="foreign_key_info"
><code>foreign_key_info</code></a></h3>

<pre class="sh_perl">  $sth = $dbh-&#62;foreign_key_info( $pk_catalog, $pk_schema, $pk_table
                               , $fk_catalog, $fk_schema, $fk_table );

  $sth = $dbh-&#62;foreign_key_info( $pk_catalog, $pk_schema, $pk_table
                               , $fk_catalog, $fk_schema, $fk_table
                               , \%attr );

  # then $sth-&#62;fetchall_arrayref or $sth-&#62;fetchall_hashref etc</pre>

<p>Returns an active statement handle that can be used to fetch information about foreign keys in and/or referencing the specified table(s). The arguments don&#39;t accept search patterns (unlike table_info()).</p>

<p><code>$pk_catalog</code>, <code>$pk_schema</code>, <code>$pk_table</code> identify the primary (unique) key table (<b>PKT</b>).</p>

<p><code>$fk_catalog</code>, <code>$fk_schema</code>, <code>$fk_table</code> identify the foreign key table (<b>FKT</b>).</p>

<p>If both <b>PKT</b> and <b>FKT</b> are given, the function returns the foreign key, if any, in table <b>FKT</b> that refers to the primary (unique) key of table <b>PKT</b>. (Note: In SQL/CLI, the result is implementation-defined.)</p>

<p>If only <b>PKT</b> is given, then the result set contains the primary key of that table and all foreign keys that refer to it.</p>

<p>If only <b>FKT</b> is given, then the result set contains all foreign keys in that table and the primary keys to which they refer. (Note: In SQL/CLI, the result includes unique keys too.)</p>

<p>For example:</p>

<pre class="sh_perl">  $sth = $dbh-&#62;foreign_key_info( undef, $user, &#39;master&#39;);
  $sth = $dbh-&#62;foreign_key_info( undef, undef,   undef , undef, $user, &#39;detail&#39;);
  $sth = $dbh-&#62;foreign_key_info( undef, $user, &#39;master&#39;, undef, $user, &#39;detail&#39;);

  # then $sth-&#62;fetchall_arrayref or $sth-&#62;fetchall_hashref etc</pre>

<p>Note: The support for the selection criteria, such as <code>$catalog</code>, is driver specific. If the driver doesn&#39;t support catalogs and/or schemas, it may ignore these criteria.</p>

<p>The statement handle returned has the following fields in the order shown below. Because ODBC never includes unique keys, they define different columns in the result set than SQL/CLI. SQL/CLI column names are shown in parentheses.</p>

<p><b>PKTABLE_CAT ( UK_TABLE_CAT )</b>: The primary (unique) key table catalog identifier. This field is NULL (<code>undef</code>) if not applicable to the data source, which is often the case. This field is empty if not applicable to the table.</p>

<p><b>PKTABLE_SCHEM ( UK_TABLE_SCHEM )</b>: The primary (unique) key table schema identifier. This field is NULL (<code>undef</code>) if not applicable to the data source, and empty if not applicable to the table.</p>

<p><b>PKTABLE_NAME ( UK_TABLE_NAME )</b>: The primary (unique) key table identifier.</p>

<p><b>PKCOLUMN_NAME (UK_COLUMN_NAME )</b>: The primary (unique) key column identifier.</p>

<p><b>FKTABLE_CAT ( FK_TABLE_CAT )</b>: The foreign key table catalog identifier. This field is NULL (<code>undef</code>) if not applicable to the data source, which is often the case. This field is empty if not applicable to the table.</p>

<p><b>FKTABLE_SCHEM ( FK_TABLE_SCHEM )</b>: The foreign key table schema identifier. This field is NULL (<code>undef</code>) if not applicable to the data source, and empty if not applicable to the table.</p>

<p><b>FKTABLE_NAME ( FK_TABLE_NAME )</b>: The foreign key table identifier.</p>

<p><b>FKCOLUMN_NAME ( FK_COLUMN_NAME )</b>: The foreign key column identifier.</p>

<p><b>KEY_SEQ ( ORDINAL_POSITION )</b>: The column sequence number (starting with 1).</p>

<p><b>UPDATE_RULE ( UPDATE_RULE )</b>: The referential action for the UPDATE rule. The following codes are defined:</p>

<pre class="sh_perl">  CASCADE              0
  RESTRICT             1
  SET NULL             2
  NO ACTION            3
  SET DEFAULT          4</pre>

<p><b>DELETE_RULE ( DELETE_RULE )</b>: The referential action for the DELETE rule. The codes are the same as for UPDATE_RULE.</p>

<p><b>FK_NAME ( FK_NAME )</b>: The foreign key name.</p>

<p><b>PK_NAME ( UK_NAME )</b>: The primary (unique) key name.</p>

<p><b>DEFERRABILITY ( DEFERABILITY )</b>: The deferrability of the foreign key constraint. The following codes are defined:</p>

<pre class="sh_perl">  INITIALLY DEFERRED   5
  INITIALLY IMMEDIATE  6
  NOT DEFERRABLE       7</pre>

<p><b> ( UNIQUE_OR_PRIMARY )</b>: This column is necessary if a driver includes all candidate (i.e. primary and alternate) keys in the result set (as specified by SQL/CLI). The value of this column is UNIQUE if the foreign key references an alternate key and PRIMARY if the foreign key references a primary key, or it may be undefined if the driver doesn&#39;t have access to the information.</p>

<p>See also <a href="#Catalog_Methods" class="podlinkpod"
>&#34;Catalog Methods&#34;</a> and <a href="#Standards_Reference_Information" class="podlinkpod"
>&#34;Standards Reference Information&#34;</a>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="statistics_info"
><code>statistics_info</code></a></h3>

<p><b>Warning:</b> This method is experimental and may change.</p>

<pre class="sh_perl">  $sth = $dbh-&#62;statistics_info( $catalog, $schema, $table, $unique_only, $quick );

  # then $sth-&#62;fetchall_arrayref or $sth-&#62;fetchall_hashref etc</pre>

<p>Returns an active statement handle that can be used to fetch statistical information about a table and its indexes.</p>

<p>The arguments don&#39;t accept search patterns (unlike <a href="#table_info" class="podlinkpod"
>&#34;table_info&#34;</a>).</p>

<p>If the boolean argument $unique_only is true, only UNIQUE indexes will be returned in the result set, otherwise all indexes will be returned.</p>

<p>If the boolean argument $quick is set, the actual statistical information columns (CARDINALITY and PAGES) will only be returned if they are readily available from the server, and might not be current. Some databases may return stale statistics or no statistics at all with this flag set.</p>

<p>The statement handle will return at most one row per column name per index, plus at most one row for the entire table itself, ordered by NON_UNIQUE, TYPE, INDEX_QUALIFIER, INDEX_NAME, and ORDINAL_POSITION.</p>

<p>Note: The support for the selection criteria, such as $catalog, is driver specific. If the driver doesn&#39;t support catalogs and/or schemas, it may ignore these criteria.</p>

<p>The statement handle returned has at least the following fields in the order shown below. Other fields, after these, may also be present.</p>

<p><b>TABLE_CAT</b>: The catalog identifier. This field is NULL (<code>undef</code>) if not applicable to the data source, which is often the case. This field is empty if not applicable to the table.</p>

<p><b>TABLE_SCHEM</b>: The schema identifier. This field is NULL (<code>undef</code>) if not applicable to the data source, and empty if not applicable to the table.</p>

<p><b>TABLE_NAME</b>: The table identifier.</p>

<p><b>NON_UNIQUE</b>: Unique index indicator. Returns 0 for unique indexes, 1 for non-unique indexes</p>

<p><b>INDEX_QUALIFIER</b>: Index qualifier identifier. The identifier that is used to qualify the index name when doing a <code>DROP INDEX</code>; NULL (<code>undef</code>) is returned if an index qualifier is not supported by the data source. If a non-NULL (defined) value is returned in this column, it must be used to qualify the index name on a <code>DROP INDEX</code> statement; otherwise, the TABLE_SCHEM should be used to qualify the index name.</p>

<p><b>INDEX_NAME</b>: The index identifier.</p>

<p><b>TYPE</b>: The type of information being returned. Can be any of the following values: &#39;table&#39;, &#39;btree&#39;, &#39;clustered&#39;, &#39;content&#39;, &#39;hashed&#39;, or &#39;other&#39;.</p>

<p>In the case that this field is &#39;table&#39;, all fields other than TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TYPE, CARDINALITY, and PAGES will be NULL (<code>undef</code>).</p>

<p><b>ORDINAL_POSITION</b>: Column sequence number (starting with 1).</p>

<p><b>COLUMN_NAME</b>: The column identifier.</p>

<p><b>ASC_OR_DESC</b>: Column sort sequence. <code>A</code> for Ascending, <code>D</code> for Descending, or NULL (<code>undef</code>) if not supported for this index.</p>

<p><b>CARDINALITY</b>: Cardinality of the table or index. For indexes, this is the number of unique values in the index. For tables, this is the number of rows in the table. If not supported, the value will be NULL (<code>undef</code>).</p>

<p><b>PAGES</b>: Number of storage pages used by this table or index. If not supported, the value will be NULL (<code>undef</code>).</p>

<p><b>FILTER_CONDITION</b>: The index filter condition as a string. If the index is not a filtered index, or it cannot be determined whether the index is a filtered index, this value is NULL (<code>undef</code>). If the index is a filtered index, but the filter condition cannot be determined, this value is the empty string <code>&#39;&#39;</code>. Otherwise it will be the literal filter condition as a string, such as <code>SALARY &#60;= 4500</code>.</p>

<p>See also <a href="#Catalog_Methods" class="podlinkpod"
>&#34;Catalog Methods&#34;</a> and <a href="#Standards_Reference_Information" class="podlinkpod"
>&#34;Standards Reference Information&#34;</a>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="tables"
><code>tables</code></a></h3>

<pre class="sh_perl">  @names = $dbh-&#62;tables( $catalog, $schema, $table, $type );
  @names = $dbh-&#62;tables;        # deprecated</pre>

<p>Simple interface to table_info(). Returns a list of matching table names, possibly including a catalog/schema prefix.</p>

<p>See <a href="#table_info" class="podlinkpod"
>&#34;table_info&#34;</a> for a description of the parameters.</p>

<p>If <code>$dbh-&#62;get_info(29)</code> returns true (29 is SQL_IDENTIFIER_QUOTE_CHAR) then the table names are constructed and quoted by <a href="#quote_identifier" class="podlinkpod"
>&#34;quote_identifier&#34;</a> to ensure they are usable even if they contain whitespace or reserved words etc. This means that the table names returned will include quote characters.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="type_info_all"
><code>type_info_all</code></a></h3>

<pre class="sh_perl">  $type_info_all = $dbh-&#62;type_info_all;</pre>

<p>Returns a reference to an array which holds information about each data type variant supported by the database and driver. The array and its contents should be treated as read-only.</p>

<p>The first item is a reference to an &#39;index&#39; hash of <code>Name =</code>&#62; <code>Index</code> pairs. The items following that are references to arrays, one per supported data type variant. The leading index hash defines the names and order of the fields within the arrays that follow it. For example:</p>

<pre class="sh_perl">  $type_info_all = [
    {   TYPE_NAME         =&#62; 0,
        DATA_TYPE         =&#62; 1,
        COLUMN_SIZE       =&#62; 2,     # was PRECISION originally
        LITERAL_PREFIX    =&#62; 3,
        LITERAL_SUFFIX    =&#62; 4,
        CREATE_PARAMS     =&#62; 5,
        NULLABLE          =&#62; 6,
        CASE_SENSITIVE    =&#62; 7,
        SEARCHABLE        =&#62; 8,
        UNSIGNED_ATTRIBUTE=&#62; 9,
        FIXED_PREC_SCALE  =&#62; 10,    # was MONEY originally
        AUTO_UNIQUE_VALUE =&#62; 11,    # was AUTO_INCREMENT originally
        LOCAL_TYPE_NAME   =&#62; 12,
        MINIMUM_SCALE     =&#62; 13,
        MAXIMUM_SCALE     =&#62; 14,
        SQL_DATA_TYPE     =&#62; 15,
        SQL_DATETIME_SUB  =&#62; 16,
        NUM_PREC_RADIX    =&#62; 17,
        INTERVAL_PRECISION=&#62; 18,
    },
    [ &#39;VARCHAR&#39;, SQL_VARCHAR,
        undef, &#34;&#39;&#34;,&#34;&#39;&#34;, undef,0, 1,1,0,0,0,undef,1,255, undef
    ],
    [ &#39;INTEGER&#39;, SQL_INTEGER,
        undef,  &#34;&#34;, &#34;&#34;, undef,0, 0,1,0,0,0,undef,0,  0, 10
    ],
  ];</pre>

<p>More than one row may have the same value in the <code>DATA_TYPE</code> field if there are different ways to spell the type name and/or there are variants of the type with different attributes (e.g., with and without <code>AUTO_UNIQUE_VALUE</code> set, with and without <code>UNSIGNED_ATTRIBUTE</code>, etc).</p>

<p>The rows are ordered by <code>DATA_TYPE</code> first and then by how closely each type maps to the corresponding ODBC SQL data type, closest first.</p>

<p>The meaning of the fields is described in the documentation for the <a href="#type_info" class="podlinkpod"
>&#34;type_info&#34;</a> method.</p>

<p>An &#39;index&#39; hash is provided so you don&#39;t need to rely on index values defined above. However, using DBD::ODBC with some old ODBC drivers may return older names, shown as comments in the example above. Another issue with the index hash is that the lettercase of the keys is not defined. It is usually uppercase, as show here, but drivers may return names with any lettercase.</p>

<p>Drivers are also free to return extra driver-specific columns of information - though it&#39;s recommended that they start at column index 50 to leave room for expansion of the DBI/ODBC specification.</p>

<p>The type_info_all() method is not normally used directly. The <a href="#type_info" class="podlinkpod"
>&#34;type_info&#34;</a> method provides a more usable and useful interface to the data.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="type_info"
><code>type_info</code></a></h3>

<pre class="sh_perl">  @type_info = $dbh-&#62;type_info($data_type);</pre>

<p>Returns a list of hash references holding information about one or more variants of $data_type. The list is ordered by <code>DATA_TYPE</code> first and then by how closely each type maps to the corresponding ODBC SQL data type, closest first. If called in a scalar context then only the first (best) element is returned.</p>

<p>If $data_type is undefined or <code>SQL_ALL_TYPES</code>, then the list will contain hashes for all data type variants supported by the database and driver.</p>

<p>If $data_type is an array reference then <code>type_info</code> returns the information for the <i>first</i> type in the array that has any matches.</p>

<p>The keys of the hash follow the same letter case conventions as the rest of the DBI (see <a href="#Naming_Conventions_and_Name_Space" class="podlinkpod"
>&#34;Naming Conventions and Name Space&#34;</a>). The following uppercase items should always exist, though may be undef:</p>

<dl>
<dt><a name='TYPE_NAME'></a><a name="TYPE_NAME_(string)"
>TYPE_NAME (string)</a></dt>

<dd>
<p>Data type name for use in CREATE TABLE statements etc.</p>

<dt><a name='DATA_TYPE'></a><a name="DATA_TYPE_(integer)"
>DATA_TYPE (integer)</a></dt>

<dd>
<p>SQL data type number.</p>

<dt><a name='COLUMN_SIZE'></a><a name="COLUMN_SIZE_(integer)"
>COLUMN_SIZE (integer)</a></dt>

<dd>
<p>For numeric types, this is either the total number of digits (if the NUM_PREC_RADIX value is 10) or the total number of bits allowed in the column (if NUM_PREC_RADIX is 2).</p>

<p>For string types, this is the maximum size of the string in characters.</p>

<p>For date and interval types, this is the maximum number of characters needed to display the value.</p>

<dt><a name='LITERAL_PREFIX'></a><a name="LITERAL_PREFIX_(string)"
>LITERAL_PREFIX (string)</a></dt>

<dd>
<p>Characters used to prefix a literal. A typical prefix is &#34;<code>&#39;</code>&#34; for characters, or possibly &#34;<code>0x</code>&#34; for binary values passed as hexadecimal. NULL (<code>undef</code>) is returned for data types for which this is not applicable.</p>

<dt><a name='LITERAL_SUFFIX'></a><a name="LITERAL_SUFFIX_(string)"
>LITERAL_SUFFIX (string)</a></dt>

<dd>
<p>Characters used to suffix a literal. Typically &#34;<code>&#39;</code>&#34; for characters. NULL (<code>undef</code>) is returned for data types where this is not applicable.</p>

<dt><a name='CREATE_PARAMS'></a><a name="CREATE_PARAMS_(string)"
>CREATE_PARAMS (string)</a></dt>

<dd>
<p>Parameter names for data type definition. For example, <code>CREATE_PARAMS</code> for a <code>DECIMAL</code> would be &#34;<code>precision,scale</code>&#34; if the DECIMAL type should be declared as <code>DECIMAL(</code><i>precision,scale</i><code>)</code> where <i>precision</i> and <i>scale</i> are integer values. For a <code>VARCHAR</code> it would be &#34;<code>max length</code>&#34;. NULL (<code>undef</code>) is returned for data types for which this is not applicable.</p>

<dt><a name='NULLABLE'></a><a name="NULLABLE_(integer)"
>NULLABLE (integer)</a></dt>

<dd>
<p>Indicates whether the data type accepts a NULL value: <code>0</code> or an empty string = no, <code>1</code> = yes, <code>2</code> = unknown.</p>

<dt><a name='CASE_SENSITIVE'></a><a name="CASE_SENSITIVE_(boolean)"
>CASE_SENSITIVE (boolean)</a></dt>

<dd>
<p>Indicates whether the data type is case sensitive in collations and comparisons.</p>

<dt><a name='SEARCHABLE'></a><a name="SEARCHABLE_(integer)"
>SEARCHABLE (integer)</a></dt>

<dd>
<p>Indicates how the data type can be used in a WHERE clause, as follows:</p>

<pre class="sh_perl">  0 - Cannot be used in a WHERE clause
  1 - Only with a LIKE predicate
  2 - All comparison operators except LIKE
  3 - Can be used in a WHERE clause with any comparison operator</pre>

<dt><a name='UNSIGNED_ATTRIBUTE'></a><a name="UNSIGNED_ATTRIBUTE_(boolean)"
>UNSIGNED_ATTRIBUTE (boolean)</a></dt>

<dd>
<p>Indicates whether the data type is unsigned. NULL (<code>undef</code>) is returned for data types for which this is not applicable.</p>

<dt><a name='FIXED_PREC_SCALE'></a><a name="FIXED_PREC_SCALE_(boolean)"
>FIXED_PREC_SCALE (boolean)</a></dt>

<dd>
<p>Indicates whether the data type always has the same precision and scale (such as a money type). NULL (<code>undef</code>) is returned for data types for which this is not applicable.</p>

<dt><a name='AUTO_UNIQUE_VALUE'></a><a name="AUTO_UNIQUE_VALUE_(boolean)"
>AUTO_UNIQUE_VALUE (boolean)</a></dt>

<dd>
<p>Indicates whether a column of this data type is automatically set to a unique value whenever a new row is inserted. NULL (<code>undef</code>) is returned for data types for which this is not applicable.</p>

<dt><a name='LOCAL_TYPE_NAME'></a><a name="LOCAL_TYPE_NAME_(string)"
>LOCAL_TYPE_NAME (string)</a></dt>

<dd>
<p>Localized version of the <code>TYPE_NAME</code> for use in dialog with users. NULL (<code>undef</code>) is returned if a localized name is not available (in which case <code>TYPE_NAME</code> should be used).</p>

<dt><a name='MINIMUM_SCALE'></a><a name="MINIMUM_SCALE_(integer)"
>MINIMUM_SCALE (integer)</a></dt>

<dd>
<p>The minimum scale of the data type. If a data type has a fixed scale, then <code>MAXIMUM_SCALE</code> holds the same value. NULL (<code>undef</code>) is returned for data types for which this is not applicable.</p>

<dt><a name='MAXIMUM_SCALE'></a><a name="MAXIMUM_SCALE_(integer)"
>MAXIMUM_SCALE (integer)</a></dt>

<dd>
<p>The maximum scale of the data type. If a data type has a fixed scale, then <code>MINIMUM_SCALE</code> holds the same value. NULL (<code>undef</code>) is returned for data types for which this is not applicable.</p>

<dt><a name='SQL_DATA_TYPE'></a><a name="SQL_DATA_TYPE_(integer)"
>SQL_DATA_TYPE (integer)</a></dt>

<dd>
<p>This column is the same as the <code>DATA_TYPE</code> column, except for interval and datetime data types. For interval and datetime data types, the <code>SQL_DATA_TYPE</code> field will return <code>SQL_INTERVAL</code> or <code>SQL_DATETIME</code>, and the <code>SQL_DATETIME_SUB</code> field below will return the subcode for the specific interval or datetime data type. If this field is NULL, then the driver does not support or report on interval or datetime subtypes.</p>

<dt><a name='SQL_DATETIME_SUB'></a><a name="SQL_DATETIME_SUB_(integer)"
>SQL_DATETIME_SUB (integer)</a></dt>

<dd>
<p>For interval or datetime data types, where the <code>SQL_DATA_TYPE</code> field above is <code>SQL_INTERVAL</code> or <code>SQL_DATETIME</code>, this field will hold the <i>subcode</i> for the specific interval or datetime data type. Otherwise it will be NULL (<code>undef</code>).</p>

<p>Although not mentioned explicitly in the standards, it seems there is a simple relationship between these values:</p>

<pre class="sh_perl">  DATA_TYPE == (10 * SQL_DATA_TYPE) + SQL_DATETIME_SUB</pre>

<dt><a name='NUM_PREC_RADIX'></a><a name="NUM_PREC_RADIX_(integer)"
>NUM_PREC_RADIX (integer)</a></dt>

<dd>
<p>The radix value of the data type. For approximate numeric types, <code>NUM_PREC_RADIX</code> contains the value 2 and <code>COLUMN_SIZE</code> holds the number of bits. For exact numeric types, <code>NUM_PREC_RADIX</code> contains the value 10 and <code>COLUMN_SIZE</code> holds the number of decimal digits. NULL (<code>undef</code>) is returned either for data types for which this is not applicable or if the driver cannot report this information.</p>

<dt><a name='INTERVAL_PRECISION'></a><a name="INTERVAL_PRECISION_(integer)"
>INTERVAL_PRECISION (integer)</a></dt>

<dd>
<p>The interval leading precision for interval types. NULL is returned either for data types for which this is not applicable or if the driver cannot report this information.</p>
</dd>
</dl>

<p>For example, to find the type name for the fields in a select statement you can do:</p>

<pre class="sh_perl">  @names = map { scalar $dbh-&#62;type_info($_)-&#62;{TYPE_NAME} } @{ $sth-&#62;{TYPE} }</pre>

<p>Since DBI and ODBC drivers vary in how they map their types into the ISO standard types you may need to search for more than one type. Here&#39;s an example looking for a usable type to store a date:</p>

<pre class="sh_perl">  $my_date_type = $dbh-&#62;type_info( [ SQL_DATE, SQL_TIMESTAMP ] );</pre>

<p>Similarly, to more reliably find a type to store small integers, you could use a list starting with <code>SQL_SMALLINT</code>, <code>SQL_INTEGER</code>, <code>SQL_DECIMAL</code>, etc.</p>

<p>See also <a href="#Standards_Reference_Information" class="podlinkpod"
>&#34;Standards Reference Information&#34;</a>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="quote"
><code>quote</code></a></h3>

<pre class="sh_perl">  $sql = $dbh-&#62;quote($value);
  $sql = $dbh-&#62;quote($value, $data_type);</pre>

<p>Quote a string literal for use as a literal value in an SQL statement, by escaping any special characters (such as quotation marks) contained within the string and adding the required type of outer quotation marks.</p>

<pre class="sh_perl">  $sql = sprintf &#34;SELECT foo FROM bar WHERE baz = %s&#34;,
                $dbh-&#62;quote(&#34;Don&#39;t&#34;);</pre>

<p>For most database types, at least those that conform to SQL standards, quote would return <code>&#39;Don&#39;&#39;t&#39;</code> (including the outer quotation marks). For others it may return something like <code>&#39;Don\&#39;t&#39;</code></p>

<p>An undefined <code>$value</code> value will be returned as the string <code>NULL</code> (without single quotation marks) to match how NULLs are represented in SQL.</p>

<p>If <code>$data_type</code> is supplied, it is used to try to determine the required quoting behaviour by using the information returned by <a href="#type_info" class="podlinkpod"
>&#34;type_info&#34;</a>. As a special case, the standard numeric types are optimized to return <code>$value</code> without calling <code>type_info</code>.</p>

<p>Quote will probably <i>not</i> be able to deal with all possible input (such as binary data or data containing newlines), and is not related in any way with escaping or quoting shell meta-characters.</p>

<p>It is valid for the quote() method to return an SQL expression that evaluates to the desired string. For example:</p>

<pre class="sh_perl">  $quoted = $dbh-&#62;quote(&#34;one\ntwo\0three&#34;)</pre>

<p>may return something like:</p>

<pre class="sh_perl">  CONCAT(&#39;one&#39;, CHAR(12), &#39;two&#39;, CHAR(0), &#39;three&#39;)</pre>

<p>The quote() method should <i>not</i> be used with <a href="#Placeholders_and_Bind_Values" class="podlinkpod"
>&#34;Placeholders and Bind Values&#34;</a>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="quote_identifier"
><code>quote_identifier</code></a></h3>

<pre class="sh_perl">  $sql = $dbh-&#62;quote_identifier( $name );
  $sql = $dbh-&#62;quote_identifier( $catalog, $schema, $table, \%attr );</pre>

<p>Quote an identifier (table name etc.) for use in an SQL statement, by escaping any special characters (such as double quotation marks) it contains and adding the required type of outer quotation marks.</p>

<p>Undefined names are ignored and the remainder are quoted and then joined together, typically with a dot (<code>.</code>) character. For example:</p>

<pre class="sh_perl">  $id = $dbh-&#62;quote_identifier( undef, &#39;Her schema&#39;, &#39;My table&#39; );</pre>

<p>would, for most database types, return <code>&#34;Her schema&#34;.&#34;My table&#34;</code> (including all the double quotation marks).</p>

<p>If three names are supplied then the first is assumed to be a catalog name and special rules may be applied based on what <a href="#get_info" class="podlinkpod"
>&#34;get_info&#34;</a> returns for SQL_CATALOG_NAME_SEPARATOR (41) and SQL_CATALOG_LOCATION (114). For example, for Oracle:</p>

<pre class="sh_perl">  $id = $dbh-&#62;quote_identifier( &#39;link&#39;, &#39;schema&#39;, &#39;table&#39; );</pre>

<p>would return <code>&#34;schema&#34;.&#34;table&#34;@&#34;link&#34;</code>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="take_imp_data"
><code>take_imp_data</code></a></h3>

<pre class="sh_perl">  $imp_data = $dbh-&#62;take_imp_data;</pre>

<p>Leaves the $dbh in an almost dead, zombie-like, state and returns a binary string of raw implementation data from the driver which describes the current database connection. Effectively it detaches the underlying database API connection data from the DBI handle. After calling take_imp_data(), all other methods except <code>DESTROY</code> will generate a warning and return undef.</p>

<p>Why would you want to do this? You don&#39;t, forget I even mentioned it. Unless, that is, you&#39;re implementing something advanced like a multi-threaded connection pool. See <a href="/perldoc?DBI%3A%3APool" class="podlinkpod"
>DBI::Pool</a>.</p>

<p>The returned $imp_data can be passed as a <code>dbi_imp_data</code> attribute to a later connect() call, even in a separate thread in the same process, where the driver can use it to &#39;adopt&#39; the existing connection that the implementation data was taken from.</p>

<p>Some things to keep in mind...</p>

<p><b>*</b> the $imp_data holds the only reference to the underlying database API connection data. That connection is still &#39;live&#39; and won&#39;t be cleaned up properly unless the $imp_data is used to create a new $dbh which is then allowed to disconnect() normally.</p>

<p><b>*</b> using the same $imp_data to create more than one other new $dbh at a time may well lead to unpleasant problems. Don&#39;t do that.</p>

<p>Any child statement handles are effectively destroyed when take_imp_data() is called.</p>

<p>The <code>take_imp_data</code> method was added in DBI 1.36 but wasn&#39;t useful till 1.49.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Database_Handle_Attributes"
>Database Handle Attributes</a></h2>

<p>This section describes attributes specific to database handles.</p>

<p>Changes to these database handle attributes do not affect any other existing or future database handles.</p>

<p>Attempting to set or get the value of an unknown attribute generates a warning, except for private driver-specific attributes (which all have names starting with a lowercase letter).</p>

<p>Example:</p>

<pre class="sh_perl">  $h-&#62;{AutoCommit} = ...;       # set/write
  ... = $h-&#62;{AutoCommit};       # get/read</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="AutoCommit"
><code>AutoCommit</code></a></h3>

<p>Type: boolean</p>

<p>If true, then database changes cannot be rolled-back (undone). If false, then database changes automatically occur within a &#34;transaction&#34;, which must either be committed or rolled back using the <code>commit</code> or <code>rollback</code> methods.</p>

<p>Drivers should always default to <code>AutoCommit</code> mode (an unfortunate choice largely forced on the DBI by ODBC and JDBC conventions.)</p>

<p>Attempting to set <code>AutoCommit</code> to an unsupported value is a fatal error. This is an important feature of the DBI. Applications that need full transaction behaviour can set <code>$dbh-&#62;{AutoCommit} = 0</code> (or set <code>AutoCommit</code> to 0 via <a href="#connect" class="podlinkpod"
>&#34;connect&#34;</a>) without having to check that the value was assigned successfully.</p>

<p>For the purposes of this description, we can divide databases into three categories:</p>

<pre class="sh_perl">  Databases which don&#39;t support transactions at all.
  Databases in which a transaction is always active.
  Databases in which a transaction must be explicitly started (C&#60;&#39;BEGIN WORK&#39;&#62;).</pre>

<p><b>* Databases which don&#39;t support transactions at all</b></p>

<p>For these databases, attempting to turn <code>AutoCommit</code> off is a fatal error. <code>commit</code> and <code>rollback</code> both issue warnings about being ineffective while <code>AutoCommit</code> is in effect.</p>

<p><b>* Databases in which a transaction is always active</b></p>

<p>These are typically mainstream commercial relational databases with &#34;ANSI standard&#34; transaction behaviour. If <code>AutoCommit</code> is off, then changes to the database won&#39;t have any lasting effect unless <a href="#commit" class="podlinkpod"
>&#34;commit&#34;</a> is called (but see also <a href="#disconnect" class="podlinkpod"
>&#34;disconnect&#34;</a>). If <a href="#rollback" class="podlinkpod"
>&#34;rollback&#34;</a> is called then any changes since the last commit are undone.</p>

<p>If <code>AutoCommit</code> is on, then the effect is the same as if the DBI called <code>commit</code> automatically after every successful database operation. So calling <code>commit</code> or <code>rollback</code> explicitly while <code>AutoCommit</code> is on would be ineffective because the changes would have already been committed.</p>

<p>Changing <code>AutoCommit</code> from off to on will trigger a <a href="#commit" class="podlinkpod"
>&#34;commit&#34;</a>.</p>

<p>For databases which don&#39;t support a specific auto-commit mode, the driver has to commit each statement automatically using an explicit <code>COMMIT</code> after it completes successfully (and roll it back using an explicit <code>ROLLBACK</code> if it fails). The error information reported to the application will correspond to the statement which was executed, unless it succeeded and the commit or rollback failed.</p>

<p><b>* Databases in which a transaction must be explicitly started</b></p>

<p>For these databases, the intention is to have them act like databases in which a transaction is always active (as described above).</p>

<p>To do this, the driver will automatically begin an explicit transaction when <code>AutoCommit</code> is turned off, or after a <a href="#commit" class="podlinkpod"
>&#34;commit&#34;</a> or <a href="#rollback" class="podlinkpod"
>&#34;rollback&#34;</a> (or when the application issues the next database operation after one of those events).</p>

<p>In this way, the application does not have to treat these databases as a special case.</p>

<p>See <a href="#commit" class="podlinkpod"
>&#34;commit&#34;</a>, <a href="#disconnect" class="podlinkpod"
>&#34;disconnect&#34;</a> and <a href="#Transactions" class="podlinkpod"
>&#34;Transactions&#34;</a> for other important notes about transactions.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Driver"
><code>Driver</code></a></h3>

<p>Type: handle</p>

<p>Holds the handle of the parent driver. The only recommended use for this is to find the name of the driver using:</p>

<pre class="sh_perl">  $dbh-&#62;{Driver}-&#62;{Name}</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Name"
><code>Name</code></a></h3>

<p>Type: string</p>

<p>Holds the &#34;name&#34; of the database. Usually (and recommended to be) the same as the &#34;<code>dbi:DriverName:...</code>&#34; string used to connect to the database, but with the leading &#34;<code>dbi:DriverName:</code>&#34; removed.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Statement"
><code>Statement</code></a></h3>

<p>Type: string, read-only</p>

<p>Returns the statement string passed to the most recent <a href="#prepare" class="podlinkpod"
>&#34;prepare&#34;</a> or <a href="#do" class="podlinkpod"
>&#34;do&#34;</a> method called in this database handle, even if that method failed. This is especially useful where <code>RaiseError</code> is enabled and the exception handler checks $@ and sees that a &#39;prepare&#39; method call failed.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="RowCacheSize"
><code>RowCacheSize</code></a></h3>

<p>Type: integer</p>

<p>A hint to the driver indicating the size of the local row cache that the application would like the driver to use for future <code>SELECT</code> statements. If a row cache is not implemented, then setting <code>RowCacheSize</code> is ignored and getting the value returns <code>undef</code>.</p>

<p>Some <code>RowCacheSize</code> values have special meaning, as follows:</p>

<pre class="sh_perl">  0 - Automatically determine a reasonable cache size for each C&#60;SELECT&#62;
  1 - Disable the local row cache
 &#62;1 - Cache this many rows
 &#60;0 - Cache as many rows that will fit into this much memory for each C&#60;SELECT&#62;.</pre>

<p>Note that large cache sizes may require a very large amount of memory (<i>cached rows * maximum size of row</i>). Also, a large cache will cause a longer delay not only for the first fetch, but also whenever the cache needs refilling.</p>

<p>See also the <a href="#RowsInCache" class="podlinkpod"
>&#34;RowsInCache&#34;</a> statement handle attribute.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Username"
><code>Username</code></a></h3>

<p>Type: string</p>

<p>Returns the username used to connect to the database.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DBI_STATEMENT_HANDLE_OBJECTS"
>DBI STATEMENT HANDLE OBJECTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This section lists the methods and attributes associated with DBI statement handles.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Statement_Handle_Methods"
>Statement Handle Methods</a></h2>

<p>The DBI defines the following methods for use on DBI statement handles:</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="bind_param"
><code>bind_param</code></a></h3>

<pre class="sh_perl">  $sth-&#62;bind_param($p_num, $bind_value)
  $sth-&#62;bind_param($p_num, $bind_value, \%attr)
  $sth-&#62;bind_param($p_num, $bind_value, $bind_type)</pre>

<p>The <code>bind_param</code> method takes a copy of $bind_value and associates it (binds it) with a placeholder, identified by $p_num, embedded in the prepared statement. Placeholders are indicated with question mark character (<code>?</code>). For example:</p>

<pre class="sh_perl">  $dbh-&#62;{RaiseError} = 1;        # save having to check each method call
  $sth = $dbh-&#62;prepare(&#34;SELECT name, age FROM people WHERE name LIKE ?&#34;);
  $sth-&#62;bind_param(1, &#34;John%&#34;);  # placeholders are numbered from 1
  $sth-&#62;execute;
  DBI::dump_results($sth);</pre>

<p>See <a href="#Placeholders_and_Bind_Values" class="podlinkpod"
>&#34;Placeholders and Bind Values&#34;</a> for more information.</p>

<p><b>Data Types for Placeholders</b></p>

<p>The <code>\%attr</code> parameter can be used to hint at the data type the placeholder should have. This is rarely needed. Typically, the driver is only interested in knowing if the placeholder should be bound as a number or a string.</p>

<pre class="sh_perl">  $sth-&#62;bind_param(1, $value, { TYPE =&#62; SQL_INTEGER });</pre>

<p>As a short-cut for the common case, the data type can be passed directly, in place of the <code>\%attr</code> hash reference. This example is equivalent to the one above:</p>

<pre class="sh_perl">  $sth-&#62;bind_param(1, $value, SQL_INTEGER);</pre>

<p>The <code>TYPE</code> value indicates the standard (non-driver-specific) type for this parameter. To specify the driver-specific type, the driver may support a driver-specific attribute, such as <code>{ ora_type =&#62; 97 }</code>.</p>

<p>The SQL_INTEGER and other related constants can be imported using</p>

<pre class="sh_perl">  use DBI qw(:sql_types);</pre>

<p>See <a href="#DBI_Constants" class="podlinkpod"
>&#34;DBI Constants&#34;</a> for more information.</p>

<p>The data type is &#39;sticky&#39; in that bind values passed to execute() are bound with the data type specified by earlier bind_param() calls, if any. Portable applications should not rely on being able to change the data type after the first <code>bind_param</code> call.</p>

<p>Perl only has string and number scalar data types. All database types that aren&#39;t numbers are bound as strings and must be in a format the database will understand except where the bind_param() TYPE attribute specifies a type that implies a particular format. For example, given:</p>

<pre class="sh_perl">  $sth-&#62;bind_param(1, $value, SQL_DATETIME);</pre>

<p>the driver should expect $value to be in the ODBC standard SQL_DATETIME format, which is &#39;YYYY-MM-DD HH:MM:SS&#39;. Similarly for SQL_DATE, SQL_TIME etc.</p>

<p>As an alternative to specifying the data type in the <code>bind_param</code> call, you can let the driver pass the value as the default type (<code>VARCHAR</code>). You can then use an SQL function to convert the type within the statement. For example:</p>

<pre class="sh_perl">  INSERT INTO price(code, price) VALUES (?, CONVERT(MONEY,?))</pre>

<p>The <code>CONVERT</code> function used here is just an example. The actual function and syntax will vary between different databases and is non-portable.</p>

<p>See also <a href="#Placeholders_and_Bind_Values" class="podlinkpod"
>&#34;Placeholders and Bind Values&#34;</a> for more information.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="bind_param_inout"
><code>bind_param_inout</code></a></h3>

<pre class="sh_perl">  $rc = $sth-&#62;bind_param_inout($p_num, \$bind_value, $max_len)  or die $sth-&#62;errstr;
  $rv = $sth-&#62;bind_param_inout($p_num, \$bind_value, $max_len, \%attr)     or ...
  $rv = $sth-&#62;bind_param_inout($p_num, \$bind_value, $max_len, $bind_type) or ...</pre>

<p>This method acts like <a href="#bind_param" class="podlinkpod"
>&#34;bind_param&#34;</a>, but also enables values to be updated by the statement. The statement is typically a call to a stored procedure. The <code>$bind_value</code> must be passed as a reference to the actual value to be used.</p>

<p>Note that unlike <a href="#bind_param" class="podlinkpod"
>&#34;bind_param&#34;</a>, the <code>$bind_value</code> variable is not copied when <code>bind_param_inout</code> is called. Instead, the value in the variable is read at the time <a href="#execute" class="podlinkpod"
>&#34;execute&#34;</a> is called.</p>

<p>The additional <code>$max_len</code> parameter specifies the minimum amount of memory to allocate to <code>$bind_value</code> for the new value. If the value returned from the database is too big to fit, then the execution should fail. If unsure what value to use, pick a generous length, i.e., a length larger than the longest value that would ever be returned. The only cost of using a larger value than needed is wasted memory.</p>

<p>Undefined values or <code>undef</code> are used to indicate null values. See also <a href="#Placeholders_and_Bind_Values" class="podlinkpod"
>&#34;Placeholders and Bind Values&#34;</a> for more information.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="bind_param_array"
><code>bind_param_array</code></a></h3>

<pre class="sh_perl">  $rc = $sth-&#62;bind_param_array($p_num, $array_ref_or_value)
  $rc = $sth-&#62;bind_param_array($p_num, $array_ref_or_value, \%attr)
  $rc = $sth-&#62;bind_param_array($p_num, $array_ref_or_value, $bind_type)</pre>

<p>The <code>bind_param_array</code> method is used to bind an array of values to a placeholder embedded in the prepared statement which is to be executed with <a href="#execute_array" class="podlinkpod"
>&#34;execute_array&#34;</a>. For example:</p>

<pre class="sh_perl">  $dbh-&#62;{RaiseError} = 1;        # save having to check each method call
  $sth = $dbh-&#62;prepare(&#34;INSERT INTO staff (first_name, last_name, dept) VALUES(?, ?, ?)&#34;);
  $sth-&#62;bind_param_array(1, [ &#39;John&#39;, &#39;Mary&#39;, &#39;Tim&#39; ]);
  $sth-&#62;bind_param_array(2, [ &#39;Booth&#39;, &#39;Todd&#39;, &#39;Robinson&#39; ]);
  $sth-&#62;bind_param_array(3, &#34;SALES&#34;); # scalar will be reused for each row
  $sth-&#62;execute_array( { ArrayTupleStatus =&#62; \my @tuple_status } );</pre>

<p>The <code>%attr</code> ($bind_type) argument is the same as defined for <a href="#bind_param" class="podlinkpod"
>&#34;bind_param&#34;</a>. Refer to <a href="#bind_param" class="podlinkpod"
>&#34;bind_param&#34;</a> for general details on using placeholders.</p>

<p>(Note that bind_param_array() can <i>not</i> be used to expand a placeholder into a list of values for a statement like &#34;SELECT foo WHERE bar IN (?)&#34;. A placeholder can only ever represent one value per execution.)</p>

<p>Scalar values, including <code>undef</code>, may also be bound by <code>bind_param_array</code>. In which case the same value will be used for each <a href="#execute" class="podlinkpod"
>&#34;execute&#34;</a> call. Driver-specific implementations may behave differently, e.g., when binding to a stored procedure call, some databases may permit mixing scalars and arrays as arguments.</p>

<p>The default implementation provided by DBI (for drivers that have not implemented array binding) is to iteratively call <a href="#execute" class="podlinkpod"
>&#34;execute&#34;</a> for each parameter tuple provided in the bound arrays. Drivers may provide more optimized implementations using whatever bulk operation support the database API provides. The default driver behaviour should match the default DBI behaviour, but always consult your driver documentation as there may be driver specific issues to consider.</p>

<p>Note that the default implementation currently only supports non-data returning statements (INSERT, UPDATE, but not SELECT). Also, <code>bind_param_array</code> and <a href="#bind_param" class="podlinkpod"
>&#34;bind_param&#34;</a> cannot be mixed in the same statement execution, and <code>bind_param_array</code> must be used with <a href="#execute_array" class="podlinkpod"
>&#34;execute_array&#34;</a>; using <code>bind_param_array</code> will have no effect for <a href="#execute" class="podlinkpod"
>&#34;execute&#34;</a>.</p>

<p>The <code>bind_param_array</code> method was added in DBI 1.22.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="execute"
><code>execute</code></a></h3>

<pre class="sh_perl">  $rv = $sth-&#62;execute                or die $sth-&#62;errstr;
  $rv = $sth-&#62;execute(@bind_values)  or die $sth-&#62;errstr;</pre>

<p>Perform whatever processing is necessary to execute the prepared statement. An <code>undef</code> is returned if an error occurs. A successful <code>execute</code> always returns true regardless of the number of rows affected, even if it&#39;s zero (see below). It is always important to check the return status of <code>execute</code> (and most other DBI methods) for errors if you&#39;re not using <a href="#RaiseError" class="podlinkpod"
>&#34;RaiseError&#34;</a>.</p>

<p>For a <i>non</i>-<code>SELECT</code> statement, <code>execute</code> returns the number of rows affected, if known. If no rows were affected, then <code>execute</code> returns &#34;<code>0E0</code>&#34;, which Perl will treat as 0 but will regard as true. Note that it is <i>not</i> an error for no rows to be affected by a statement. If the number of rows affected is not known, then <code>execute</code> returns -1.</p>

<p>For <code>SELECT</code> statements, execute simply &#34;starts&#34; the query within the database engine. Use one of the fetch methods to retrieve the data after calling <code>execute</code>. The <code>execute</code> method does <i>not</i> return the number of rows that will be returned by the query (because most databases can&#39;t tell in advance), it simply returns a true value.</p>

<p>You can tell if the statement was a <code>SELECT</code> statement by checking if <code>$sth-&#62;{NUM_OF_FIELDS}</code> is greater than zero after calling <code>execute</code>.</p>

<p>If any arguments are given, then <code>execute</code> will effectively call <a href="#bind_param" class="podlinkpod"
>&#34;bind_param&#34;</a> for each value before executing the statement. Values bound in this way are usually treated as <code>SQL_VARCHAR</code> types unless the driver can determine the correct type (which is rare), or unless <code>bind_param</code> (or <code>bind_param_inout</code>) has already been used to specify the type.</p>

<p>Note that passing <code>execute</code> an empty array is the same as passing no arguments at all, which will execute the statement with previously bound values. That&#39;s probably not what you want.</p>

<p>If execute() is called on a statement handle that&#39;s still active ($sth-&#62;{Active} is true) then it should effectively call finish() to tidy up the previous execution results before starting this new execution.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="execute_array"
><code>execute_array</code></a></h3>

<pre class="sh_perl">  $tuples = $sth-&#62;execute_array(\%attr) or die $sth-&#62;errstr;
  $tuples = $sth-&#62;execute_array(\%attr, @bind_values) or die $sth-&#62;errstr;

  ($tuples, $rows) = $sth-&#62;execute_array(\%attr) or die $sth-&#62;errstr;
  ($tuples, $rows) = $sth-&#62;execute_array(\%attr, @bind_values) or die $sth-&#62;errstr;</pre>

<p>Execute the prepared statement once for each parameter tuple (group of values) provided either in the @bind_values, or by prior calls to <a href="#bind_param_array" class="podlinkpod"
>&#34;bind_param_array&#34;</a>, or via a reference passed in \%attr.</p>

<p>When called in scalar context the execute_array() method returns the number of tuples executed, or <code>undef</code> if an error occurred. Like execute(), a successful execute_array() always returns true regardless of the number of tuples executed, even if it&#39;s zero. If there were any errors the ArrayTupleStatus array can be used to discover which tuples failed and with what errors.</p>

<p>When called in list context the execute_array() method returns two scalars; $tuples is the same as calling execute_array() in scalar context and $rows is the number of rows affected for each tuple, if available or -1 if the driver cannot determine this. NOTE, some drivers cannot determine the number of rows affected per tuple but can provide the number of rows affected for the batch. If you are doing an update operation the returned rows affected may not be what you expect if, for instance, one or more of the tuples affected the same row multiple times. Some drivers may not yet support list context, in which case $rows will be undef, or may not be able to provide the number of rows affected when performing this batch operation, in which case $rows will be -1.</p>

<p>Bind values for the tuples to be executed may be supplied row-wise by an <code>ArrayTupleFetch</code> attribute, or else column-wise in the <code>@bind_values</code> argument, or else column-wise by prior calls to <a href="#bind_param_array" class="podlinkpod"
>&#34;bind_param_array&#34;</a>.</p>

<p>Where column-wise binding is used (via the <code>@bind_values</code> argument or calls to bind_param_array()) the maximum number of elements in any one of the bound value arrays determines the number of tuples executed. Placeholders with fewer values in their parameter arrays are treated as if padded with undef (NULL) values.</p>

<p>If a scalar value is bound, instead of an array reference, it is treated as a <i>variable</i> length array with all elements having the same value. It does not influence the number of tuples executed, so if all bound arrays have zero elements then zero tuples will be executed. If <i>all</i> bound values are scalars then one tuple will be executed, making execute_array() act just like execute().</p>

<p>The <code>ArrayTupleFetch</code> attribute can be used to specify a reference to a subroutine that will be called to provide the bind values for each tuple execution. The subroutine should return an reference to an array which contains the appropriate number of bind values, or return an undef if there is no more data to execute.</p>

<p>As a convenience, the <code>ArrayTupleFetch</code> attribute can also be used to specify a statement handle. In which case the fetchrow_arrayref() method will be called on the given statement handle in order to provide the bind values for each tuple execution.</p>

<p>The values specified via bind_param_array() or the @bind_values parameter may be either scalars, or arrayrefs. If any <code>@bind_values</code> are given, then <code>execute_array</code> will effectively call <a href="#bind_param_array" class="podlinkpod"
>&#34;bind_param_array&#34;</a> for each value before executing the statement. Values bound in this way are usually treated as <code>SQL_VARCHAR</code> types unless the driver can determine the correct type (which is rare), or unless <code>bind_param</code>, <code>bind_param_inout</code>, <code>bind_param_array</code>, or <code>bind_param_inout_array</code> has already been used to specify the type. See <a href="#bind_param_array" class="podlinkpod"
>&#34;bind_param_array&#34;</a> for details.</p>

<p>The <code>ArrayTupleStatus</code> attribute can be used to specify a reference to an array which will receive the execute status of each executed parameter tuple. Note the <code>ArrayTupleStatus</code> attribute was mandatory until DBI 1.38.</p>

<p>For tuples which are successfully executed, the element at the same ordinal position in the status array is the resulting rowcount (or -1 if unknown). If the execution of a tuple causes an error, then the corresponding status array element will be set to a reference to an array containing <a href="#err" class="podlinkpod"
>&#34;err&#34;</a>, <a href="#errstr" class="podlinkpod"
>&#34;errstr&#34;</a> and <a href="#state" class="podlinkpod"
>&#34;state&#34;</a> set by the failed execution.</p>

<p>If <b>any</b> tuple execution returns an error, <code>execute_array</code> will return <code>undef</code>. In that case, the application should inspect the status array to determine which parameter tuples failed. Some databases may not continue executing tuples beyond the first failure. In this case the status array will either hold fewer elements, or the elements beyond the failure will be undef.</p>

<p>If all parameter tuples are successfully executed, <code>execute_array</code> returns the number tuples executed. If no tuples were executed, then execute_array() returns &#34;<code>0E0</code>&#34;, just like execute() does, which Perl will treat as 0 but will regard as true.</p>

<p>For example:</p>

<pre class="sh_perl">  $sth = $dbh-&#62;prepare(&#34;INSERT INTO staff (first_name, last_name) VALUES (?, ?)&#34;);
  my $tuples = $sth-&#62;execute_array(
      { ArrayTupleStatus =&#62; \my @tuple_status },
      \@first_names,
      \@last_names,
  );
  if ($tuples) {
      print &#34;Successfully inserted $tuples records\n&#34;;
  }
  else {
      for my $tuple (0..@last_names-1) {
          my $status = $tuple_status[$tuple];
          $status = [0, &#34;Skipped&#34;] unless defined $status;
          next unless ref $status;
          printf &#34;Failed to insert (%s, %s): %s\n&#34;,
              $first_names[$tuple], $last_names[$tuple], $status-&#62;[1];
      }
  }</pre>

<p>Support for data returning statements such as SELECT is driver-specific and subject to change. At present, the default implementation provided by DBI only supports non-data returning statements.</p>

<p>Transaction semantics when using array binding are driver and database specific. If <code>AutoCommit</code> is on, the default DBI implementation will cause each parameter tuple to be individually committed (or rolled back in the event of an error). If <code>AutoCommit</code> is off, the application is responsible for explicitly committing the entire set of bound parameter tuples. Note that different drivers and databases may have different behaviours when some parameter tuples cause failures. In some cases, the driver or database may automatically rollback the effect of all prior parameter tuples that succeeded in the transaction; other drivers or databases may retain the effect of prior successfully executed parameter tuples. Be sure to check your driver and database for its specific behaviour.</p>

<p>Note that, in general, performance will usually be better with <code>AutoCommit</code> turned off, and using explicit <code>commit</code> after each <code>execute_array</code> call.</p>

<p>The <code>execute_array</code> method was added in DBI 1.22, and ArrayTupleFetch was added in 1.36.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="execute_for_fetch"
><code>execute_for_fetch</code></a></h3>

<pre class="sh_perl">  $tuples = $sth-&#62;execute_for_fetch($fetch_tuple_sub);
  $tuples = $sth-&#62;execute_for_fetch($fetch_tuple_sub, \@tuple_status);

  ($tuples, $rows) = $sth-&#62;execute_for_fetch($fetch_tuple_sub);
  ($tuples, $rows) = $sth-&#62;execute_for_fetch($fetch_tuple_sub, \@tuple_status);</pre>

<p>The execute_for_fetch() method is used to perform bulk operations and although it is most often used via the execute_array() method you can use it directly. The main difference between execute_array and execute_for_fetch is the former does column or row-wise binding and the latter uses row-wise binding.</p>

<p>The fetch subroutine, referenced by $fetch_tuple_sub, is expected to return a reference to an array (known as a &#39;tuple&#39;) or undef.</p>

<p>The execute_for_fetch() method calls $fetch_tuple_sub, without any parameters, until it returns a false value. Each tuple returned is used to provide bind values for an $sth-&#62;execute(@$tuple) call.</p>

<p>In scalar context execute_for_fetch() returns <code>undef</code> if there were any errors and the number of tuples executed otherwise. Like execute() and execute_array() a zero is returned as &#34;0E0&#34; so execute_for_fetch() is only false on error. If there were any errors the @tuple_status array can be used to discover which tuples failed and with what errors.</p>

<p>When called in list context execute_for_fetch() returns two scalars; $tuples is the same as calling execute_for_fetch() in scalar context and $rows is the sum of the number of rows affected for each tuple, if available or -1 if the driver cannot determine this. If you are doing an update operation the returned rows affected may not be what you expect if, for instance, one or more of the tuples affected the same row multiple times. Some drivers may not yet support list context, in which case $rows will be undef, or may not be able to provide the number of rows affected when performing this batch operation, in which case $rows will be -1.</p>

<p>If \@tuple_status is passed then the execute_for_fetch method uses it to return status information. The tuple_status array holds one element per tuple. If the corresponding execute() did not fail then the element holds the return value from execute(), which is typically a row count. If the execute() did fail then the element holds a reference to an array containing ($sth-&#62;err, $sth-&#62;errstr, $sth-&#62;state).</p>

<p>If the driver detects an error that it knows means no further tuples can be executed then it may return, with an error status, even though $fetch_tuple_sub may still have more tuples to be executed.</p>

<p>Although each tuple returned by $fetch_tuple_sub is effectively used to call $sth-&#62;execute(@$tuple_array_ref) the exact timing may vary. Drivers are free to accumulate sets of tuples to pass to the database server in bulk group operations for more efficient execution. However, the $fetch_tuple_sub is specifically allowed to return the same array reference each time (which is what fetchrow_arrayref() usually does).</p>

<p>For example:</p>

<pre class="sh_perl">  my $sel = $dbh1-&#62;prepare(&#34;select foo, bar from table1&#34;);
  $sel-&#62;execute;

  my $ins = $dbh2-&#62;prepare(&#34;insert into table2 (foo, bar) values (?,?)&#34;);
  my $fetch_tuple_sub = sub { $sel-&#62;fetchrow_arrayref };

  my @tuple_status;
  $rc = $ins-&#62;execute_for_fetch($fetch_tuple_sub, \@tuple_status);
  my @errors = grep { ref $_ } @tuple_status;</pre>

<p>Similarly, if you already have an array containing the data rows to be processed you&#39;d use a subroutine to shift off and return each array ref in turn:</p>

<pre class="sh_perl">  $ins-&#62;execute_for_fetch( sub { shift @array_of_arrays }, \@tuple_status);</pre>

<p>The <code>execute_for_fetch</code> method was added in DBI 1.38.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="fetchrow_arrayref"
><code>fetchrow_arrayref</code></a></h3>

<pre class="sh_perl">  $ary_ref = $sth-&#62;fetchrow_arrayref;
  $ary_ref = $sth-&#62;fetch;    # alias</pre>

<p>Fetches the next row of data and returns a reference to an array holding the field values. Null fields are returned as <code>undef</code> values in the array. This is the fastest way to fetch data, particularly if used with <code>$sth-&#62;bind_columns</code>.</p>

<p>If there are no more rows or if an error occurs, then <code>fetchrow_arrayref</code> returns an <code>undef</code>. You should check <code>$sth-&#62;err</code> afterwards (or use the <code>RaiseError</code> attribute) to discover if the <code>undef</code> returned was due to an error.</p>

<p>Note that the same array reference is returned for each fetch, so don&#39;t store the reference and then use it after a later fetch. Also, the elements of the array are also reused for each row, so take care if you want to take a reference to an element. See also <a href="#bind_columns" class="podlinkpod"
>&#34;bind_columns&#34;</a>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="fetchrow_array"
><code>fetchrow_array</code></a></h3>

<pre class="sh_perl"> @ary = $sth-&#62;fetchrow_array;</pre>

<p>An alternative to <code>fetchrow_arrayref</code>. Fetches the next row of data and returns it as a list containing the field values. Null fields are returned as <code>undef</code> values in the list.</p>

<p>If there are no more rows or if an error occurs, then <code>fetchrow_array</code> returns an empty list. You should check <code>$sth-&#62;err</code> afterwards (or use the <code>RaiseError</code> attribute) to discover if the empty list returned was due to an error.</p>

<p>If called in a scalar context for a statement handle that has more than one column, it is undefined whether the driver will return the value of the first column or the last. So don&#39;t do that. Also, in a scalar context, an <code>undef</code> is returned if there are no more rows or if an error occurred. That <code>undef</code> can&#39;t be distinguished from an <code>undef</code> returned because the first field value was NULL. For these reasons you should exercise some caution if you use <code>fetchrow_array</code> in a scalar context.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="fetchrow_hashref"
><code>fetchrow_hashref</code></a></h3>

<pre class="sh_perl"> $hash_ref = $sth-&#62;fetchrow_hashref;
 $hash_ref = $sth-&#62;fetchrow_hashref($name);</pre>

<p>An alternative to <code>fetchrow_arrayref</code>. Fetches the next row of data and returns it as a reference to a hash containing field name and field value pairs. Null fields are returned as <code>undef</code> values in the hash.</p>

<p>If there are no more rows or if an error occurs, then <code>fetchrow_hashref</code> returns an <code>undef</code>. You should check <code>$sth-&#62;err</code> afterwards (or use the <code>RaiseError</code> attribute) to discover if the <code>undef</code> returned was due to an error.</p>

<p>The optional <code>$name</code> parameter specifies the name of the statement handle attribute. For historical reasons it defaults to &#34;<code>NAME</code>&#34;, however using either &#34;<code>NAME_lc</code>&#34; or &#34;<code>NAME_uc</code>&#34; is recommended for portability.</p>

<p>The keys of the hash are the same names returned by <code>$sth-&#62;{$name}</code>. If more than one field has the same name, there will only be one entry in the returned hash for those fields, so statements like &#34;<code>select foo, foo from bar</code>&#34; will return only a single key from <code>fetchrow_hashref</code>. In these cases use column aliases or <code>fetchrow_arrayref</code>. Note that it is the database server (and not the DBD implementation) which provides the <i>name</i> for fields containing functions like &#34;<code>count(*)</code>&#34; or &#34;<code>max(c_foo)</code>&#34; and they may clash with existing column names (most databases don&#39;t care about duplicate column names in a result-set). If you want these to return as unique names that are the same across databases, use <i>aliases</i>, as in &#34;<code>select count(*) as cnt</code>&#34; or &#34;<code>select max(c_foo) mx_foo, ...</code>&#34; depending on the syntax your database supports.</p>

<p>Because of the extra work <code>fetchrow_hashref</code> and Perl have to perform, it is not as efficient as <code>fetchrow_arrayref</code> or <code>fetchrow_array</code>.</p>

<p>By default a reference to a new hash is returned for each row. It is likely that a future version of the DBI will support an attribute which will enable the same hash to be reused for each row. This will give a significant performance boost, but it won&#39;t be enabled by default because of the risk of breaking old code.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="fetchall_arrayref"
><code>fetchall_arrayref</code></a></h3>

<pre class="sh_perl">  $tbl_ary_ref = $sth-&#62;fetchall_arrayref;
  $tbl_ary_ref = $sth-&#62;fetchall_arrayref( $slice );
  $tbl_ary_ref = $sth-&#62;fetchall_arrayref( $slice, $max_rows  );</pre>

<p>The <code>fetchall_arrayref</code> method can be used to fetch all the data to be returned from a prepared and executed statement handle. It returns a reference to an array that contains one reference per row.</p>

<p>If called on an <i>inactive</i> statement handle, <code>fetchall_arrayref</code> returns undef.</p>

<p>If there are no rows left to return from an <i>active</i> statement handle, <code>fetchall_arrayref</code> returns a reference to an empty array. If an error occurs, <code>fetchall_arrayref</code> returns the data fetched thus far, which may be none. You should check <code>$sth-&#62;err</code> afterwards (or use the <code>RaiseError</code> attribute) to discover if the data is complete or was truncated due to an error.</p>

<p>If $slice is an array reference, <code>fetchall_arrayref</code> uses <a href="#fetchrow_arrayref" class="podlinkpod"
>&#34;fetchrow_arrayref&#34;</a> to fetch each row as an array ref. If the $slice array is not empty then it is used as a slice to select individual columns by perl array index number (starting at 0, unlike column and parameter numbers which start at 1).</p>

<p>With no parameters, or if $slice is undefined, <code>fetchall_arrayref</code> acts as if passed an empty array ref.</p>

<p>For example, to fetch just the first column of every row:</p>

<pre class="sh_perl">  $tbl_ary_ref = $sth-&#62;fetchall_arrayref([0]);</pre>

<p>To fetch the second to last and last column of every row:</p>

<pre class="sh_perl">  $tbl_ary_ref = $sth-&#62;fetchall_arrayref([-2,-1]);</pre>

<p>Those two examples both return a reference to an array of array refs.</p>

<p>If $slice is a hash reference, <code>fetchall_arrayref</code> fetches each row as a hash reference. If the $slice hash is empty then the keys in the hashes have whatever name lettercase is returned by default. (See <a href="#FetchHashKeyName" class="podlinkpod"
>&#34;FetchHashKeyName&#34;</a> attribute.) If the $slice hash is <i>not</i> empty, then it is used as a slice to select individual columns by name. The values of the hash should be set to 1. The key names of the returned hashes match the letter case of the names in the parameter hash, regardless of the <a href="#FetchHashKeyName" class="podlinkpod"
>&#34;FetchHashKeyName&#34;</a> attribute.</p>

<p>For example, to fetch all fields of every row as a hash ref:</p>

<pre class="sh_perl">  $tbl_ary_ref = $sth-&#62;fetchall_arrayref({});</pre>

<p>To fetch only the fields called &#34;foo&#34; and &#34;bar&#34; of every row as a hash ref (with keys named &#34;foo&#34; and &#34;BAR&#34;, regardless of the original capitalization):</p>

<pre class="sh_perl">  $tbl_ary_ref = $sth-&#62;fetchall_arrayref({ foo=&#62;1, BAR=&#62;1 });</pre>

<p>Those two examples both return a reference to an array of hash refs.</p>

<p>If $slice is a <i>reference to a hash reference</i>, that hash is used to select and rename columns. The keys are 0-based column index numbers and the values are the corresponding keys for the returned row hashes.</p>

<p>For example, to fetch only the first and second columns of every row as a hash ref (with keys named &#34;k&#34; and &#34;v&#34; regardless of their original names):</p>

<pre class="sh_perl">  $tbl_ary_ref = $sth-&#62;fetchall_arrayref( \{ 0 =&#62; &#39;k&#39;, 1 =&#62; &#39;v&#39; } );</pre>

<p>If $max_rows is defined and greater than or equal to zero then it is used to limit the number of rows fetched before returning. fetchall_arrayref() can then be called again to fetch more rows. This is especially useful when you need the better performance of fetchall_arrayref() but don&#39;t have enough memory to fetch and return all the rows in one go.</p>

<p>Here&#39;s an example (assumes RaiseError is enabled):</p>

<pre class="sh_perl">  my $rows = []; # cache for batches of rows
  while( my $row = ( shift(@$rows) || # get row from cache, or reload cache:
                     shift(@{$rows=$sth-&#62;fetchall_arrayref(undef,10_000)||[]}) )
  ) {
    ...
  }</pre>

<p>That <i>might</i> be the fastest way to fetch and process lots of rows using the DBI, but it depends on the relative cost of method calls vs memory allocation.</p>

<p>A standard <code>while</code> loop with column binding is often faster because the cost of allocating memory for the batch of rows is greater than the saving by reducing method calls. It&#39;s possible that the DBI may provide a way to reuse the memory of a previous batch in future, which would then shift the balance back towards fetchall_arrayref().</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="fetchall_hashref"
><code>fetchall_hashref</code></a></h3>

<pre class="sh_perl">  $hash_ref = $sth-&#62;fetchall_hashref($key_field);</pre>

<p>The <code>fetchall_hashref</code> method can be used to fetch all the data to be returned from a prepared and executed statement handle. It returns a reference to a hash containing a key for each distinct value of the $key_field column that was fetched. For each key the corresponding value is a reference to a hash containing all the selected columns and their values, as returned by <code>fetchrow_hashref()</code>.</p>

<p>If there are no rows to return, <code>fetchall_hashref</code> returns a reference to an empty hash. If an error occurs, <code>fetchall_hashref</code> returns the data fetched thus far, which may be none. You should check <code>$sth-&#62;err</code> afterwards (or use the <code>RaiseError</code> attribute) to discover if the data is complete or was truncated due to an error.</p>

<p>The $key_field parameter provides the name of the field that holds the value to be used for the key for the returned hash. For example:</p>

<pre class="sh_perl">  $dbh-&#62;{FetchHashKeyName} = &#39;NAME_lc&#39;;
  $sth = $dbh-&#62;prepare(&#34;SELECT FOO, BAR, ID, NAME, BAZ FROM TABLE&#34;);
  $sth-&#62;execute;
  $hash_ref = $sth-&#62;fetchall_hashref(&#39;id&#39;);
  print &#34;Name for id 42 is $hash_ref-&#62;{42}-&#62;{name}\n&#34;;</pre>

<p>The $key_field parameter can also be specified as an integer column number (counting from 1). If $key_field doesn&#39;t match any column in the statement, as a name first then as a number, then an error is returned.</p>

<p>For queries returning more than one &#39;key&#39; column, you can specify multiple column names by passing $key_field as a reference to an array containing one or more key column names (or index numbers). For example:</p>

<pre class="sh_perl">  $sth = $dbh-&#62;prepare(&#34;SELECT foo, bar, baz FROM table&#34;);
  $sth-&#62;execute;
  $hash_ref = $sth-&#62;fetchall_hashref( [ qw(foo bar) ] );
  print &#34;For foo 42 and bar 38, baz is $hash_ref-&#62;{42}-&#62;{38}-&#62;{baz}\n&#34;;</pre>

<p>The fetchall_hashref() method is normally used only where the key fields values for each row are unique. If multiple rows are returned with the same values for the key fields then later rows overwrite earlier ones.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="finish"
><code>finish</code></a></h3>

<pre class="sh_perl">  $rc  = $sth-&#62;finish;</pre>

<p>Indicate that no more data will be fetched from this statement handle before it is either executed again or destroyed. You almost certainly do <i>not</i> need to call this method.</p>

<p>Adding calls to <code>finish</code> after loop that fetches all rows is a common mistake, don&#39;t do it, it can mask genuine problems like uncaught fetch errors.</p>

<p>When all the data has been fetched from a <code>SELECT</code> statement, the driver will automatically call <code>finish</code> for you. So you should <i>not</i> call it explicitly <i>except</i> when you know that you&#39;ve not fetched all the data from a statement handle <i>and</i> the handle won&#39;t be destroyed soon.</p>

<p>The most common example is when you only want to fetch just one row, but in that case the <code>selectrow_*</code> methods are usually better anyway.</p>

<p>Consider a query like:</p>

<pre class="sh_perl">  SELECT foo FROM table WHERE bar=? ORDER BY baz</pre>

<p>on a very large table. When executed, the database server will have to use temporary buffer space to store the sorted rows. If, after executing the handle and selecting just a few rows, the handle won&#39;t be re-executed for some time and won&#39;t be destroyed, the <code>finish</code> method can be used to tell the server that the buffer space can be freed.</p>

<p>Calling <code>finish</code> resets the <a href="#Active" class="podlinkpod"
>&#34;Active&#34;</a> attribute for the statement. It may also make some statement handle attributes (such as <code>NAME</code> and <code>TYPE</code>) unavailable if they have not already been accessed (and thus cached).</p>

<p>The <code>finish</code> method does not affect the transaction status of the database connection. It has nothing to do with transactions. It&#39;s mostly an internal &#34;housekeeping&#34; method that is rarely needed. See also <a href="#disconnect" class="podlinkpod"
>&#34;disconnect&#34;</a> and the <a href="#Active" class="podlinkpod"
>&#34;Active&#34;</a> attribute.</p>

<p>The <code>finish</code> method should have been called <code>discard_pending_rows</code>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="rows"
><code>rows</code></a></h3>

<pre class="sh_perl">  $rv = $sth-&#62;rows;</pre>

<p>Returns the number of rows affected by the last row affecting command, or -1 if the number of rows is not known or not available.</p>

<p>Generally, you can only rely on a row count after a <i>non</i>-<code>SELECT</code> <code>execute</code> (for some specific operations like <code>UPDATE</code> and <code>DELETE</code>), or after fetching all the rows of a <code>SELECT</code> statement.</p>

<p>For <code>SELECT</code> statements, it is generally not possible to know how many rows will be returned except by fetching them all. Some drivers will return the number of rows the application has fetched so far, but others may return -1 until all rows have been fetched. So use of the <code>rows</code> method or <code>$DBI::rows</code> with <code>SELECT</code> statements is not recommended.</p>

<p>One alternative method to get a row count for a <code>SELECT</code> is to execute a &#34;SELECT COUNT(*) FROM ...&#34; SQL statement with the same &#34;...&#34; as your query and then fetch the row count from that.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="bind_col"
><code>bind_col</code></a></h3>

<pre class="sh_perl">  $rc = $sth-&#62;bind_col($column_number, \$var_to_bind);
  $rc = $sth-&#62;bind_col($column_number, \$var_to_bind, \%attr );
  $rc = $sth-&#62;bind_col($column_number, \$var_to_bind, $bind_type );</pre>

<p>Binds a Perl variable and/or some attributes to an output column (field) of a <code>SELECT</code> statement. Column numbers count up from 1. You do not need to bind output columns in order to fetch data. For maximum portability between drivers, bind_col() should be called after execute() and not before. See also <code>bind_columns</code> for an example.</p>

<p>The binding is performed at a low level using Perl aliasing. Whenever a row is fetched from the database $var_to_bind appears to be automatically updated simply because it now refers to the same memory location as the corresponding column value. This makes using bound variables very efficient. Binding a tied variable doesn&#39;t work, currently.</p>

<p>The <a href="#bind_param" class="podlinkpod"
>&#34;bind_param&#34;</a> method performs a similar, but opposite, function for input variables.</p>

<p><b>Data Types for Column Binding</b></p>

<p>The <code>\%attr</code> parameter can be used to hint at the data type formatting the column should have. For example, you can use:</p>

<pre class="sh_perl">  $sth-&#62;bind_col(1, undef, { TYPE =&#62; SQL_DATETIME });</pre>

<p>to specify that you&#39;d like the column (which presumably is some kind of datetime type) to be returned in the standard format for SQL_DATETIME, which is &#39;YYYY-MM-DD HH:MM:SS&#39;, rather than the native formatting the database would normally use.</p>

<p>There&#39;s no $var_to_bind in that example to emphasize the point that bind_col() works on the underlying column and not just a particular bound variable.</p>

<p>As a short-cut for the common case, the data type can be passed directly, in place of the <code>\%attr</code> hash reference. This example is equivalent to the one above:</p>

<pre class="sh_perl">  $sth-&#62;bind_col(1, undef, SQL_DATETIME);</pre>

<p>The <code>TYPE</code> value indicates the standard (non-driver-specific) type for this parameter. To specify the driver-specific type, the driver may support a driver-specific attribute, such as <code>{ ora_type =&#62; 97 }</code>.</p>

<p>The SQL_DATETIME and other related constants can be imported using</p>

<pre class="sh_perl">  use DBI qw(:sql_types);</pre>

<p>See <a href="#DBI_Constants" class="podlinkpod"
>&#34;DBI Constants&#34;</a> for more information.</p>

<p>Few drivers support specifying a data type via a <code>bind_col</code> call (most will simply ignore the data type). Fewer still allow the data type to be altered once set.</p>

<p>The TYPE attribute for bind_col() was first specified in DBI 1.41.</p>

<p>From DBI 1.611, drivers can use the <code>TYPE</code> attribute to attempt to cast the bound scalar to a perl type which more closely matches <code>TYPE</code>. At present DBI supports <code>SQL_INTEGER</code>, <code>SQL_DOUBLE</code> and <code>SQL_NUMERIC</code>. See <a href="#sql_type_cast" class="podlinkpod"
>&#34;sql_type_cast&#34;</a> for details of how types are cast.</p>

<p><b>Other attributes for Column Binding</b></p>

<p>The <code>\%attr</code> parameter may also contain the following attributes:</p>

<dl>
<dt><a name="StrictlyTyped"
><code>StrictlyTyped</code></a></dt>

<dd>
<p>If a <code>TYPE</code> attribute is passed to bind_col, then the driver will attempt to change the bound perl scalar to match the type more closely. If the bound value cannot be cast to the requested <code>TYPE</code> then by default it is left untouched and no error is generated. If you specify <code>StrictlyTyped</code> as 1 and the cast fails, this will generate an error.</p>

<p>This attribute was first added in DBI 1.611. When 1.611 was released few drivers actually supported this attribute but DBD::Oracle and DBD::ODBC should from versions 1.24.</p>

<dt><a name="DiscardString"
><code>DiscardString</code></a></dt>

<dd>
<p>When the <code>TYPE</code> attribute is passed to <a href="#bind_col" class="podlinkpod"
>&#34;bind_col&#34;</a> and the driver successfully casts the bound perl scalar to a non-string type then if <code>DiscardString</code> is set to 1, the string portion of the scalar will be discarded. By default, <code>DiscardString</code> is not set.</p>

<p>This attribute was first added in DBI 1.611. When 1.611 was released few drivers actually supported this attribute but DBD::Oracle and DBD::ODBC should from versions 1.24.</p>
</dd>
</dl>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="bind_columns"
><code>bind_columns</code></a></h3>

<pre class="sh_perl">  $rc = $sth-&#62;bind_columns(@list_of_refs_to_vars_to_bind);</pre>

<p>Calls <a href="#bind_col" class="podlinkpod"
>&#34;bind_col&#34;</a> for each column of the <code>SELECT</code> statement.</p>

<p>The list of references should have the same number of elements as the number of columns in the <code>SELECT</code> statement. If it doesn&#39;t then <code>bind_columns</code> will bind the elements given, up to the number of columns, and then return an error.</p>

<p>For maximum portability between drivers, bind_columns() should be called after execute() and not before.</p>

<p>For example:</p>

<pre class="sh_perl">  $dbh-&#62;{RaiseError} = 1; # do this, or check every call for errors
  $sth = $dbh-&#62;prepare(q{ SELECT region, sales FROM sales_by_region });
  $sth-&#62;execute;
  my ($region, $sales);

  # Bind Perl variables to columns:
  $rv = $sth-&#62;bind_columns(\$region, \$sales);

  # you can also use Perl&#39;s \(...) syntax (see perlref docs):
  #     $sth-&#62;bind_columns(\($region, $sales));

  # Column binding is the most efficient way to fetch data
  while ($sth-&#62;fetch) {
      print &#34;$region: $sales\n&#34;;
  }</pre>

<p>For compatibility with old scripts, the first parameter will be ignored if it is <code>undef</code> or a hash reference.</p>

<p>Here&#39;s a more fancy example that binds columns to the values <i>inside</i> a hash (thanks to H.Merijn Brand):</p>

<pre class="sh_perl">  $sth-&#62;execute;
  my %row;
  $sth-&#62;bind_columns( \( @row{ @{$sth-&#62;{NAME_lc} } } ));
  while ($sth-&#62;fetch) {
      print &#34;$row{region}: $row{sales}\n&#34;;
  }</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="dump_results"
><code>dump_results</code></a></h3>

<pre class="sh_perl">  $rows = $sth-&#62;dump_results($maxlen, $lsep, $fsep, $fh);</pre>

<p>Fetches all the rows from <code>$sth</code>, calls <code>DBI::neat_list</code> for each row, and prints the results to <code>$fh</code> (defaults to <code>STDOUT</code>) separated by <code>$lsep</code> (default <code>&#34;\n&#34;</code>). <code>$fsep</code> defaults to <code>&#34;, &#34;</code> and <code>$maxlen</code> defaults to 35.</p>

<p>This method is designed as a handy utility for prototyping and testing queries. Since it uses <a href="#neat_list" class="podlinkpod"
>&#34;neat_list&#34;</a> to format and edit the string for reading by humans, it is not recommended for data transfer applications.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Statement_Handle_Attributes"
>Statement Handle Attributes</a></h2>

<p>This section describes attributes specific to statement handles. Most of these attributes are read-only.</p>

<p>Changes to these statement handle attributes do not affect any other existing or future statement handles.</p>

<p>Attempting to set or get the value of an unknown attribute generates a warning, except for private driver specific attributes (which all have names starting with a lowercase letter).</p>

<p>Example:</p>

<pre class="sh_perl">  ... = $h-&#62;{NUM_OF_FIELDS};    # get/read</pre>

<p>Some drivers cannot provide valid values for some or all of these attributes until after <code>$sth-&#62;execute</code> has been successfully called. Typically the attribute will be <code>undef</code> in these situations.</p>

<p>Some attributes, like NAME, are not appropriate to some types of statement, like SELECT. Typically the attribute will be <code>undef</code> in these situations.</p>

<p>For drivers which support stored procedures and multiple result sets (see <a href="#more_results" class="podlinkpod"
>&#34;more_results&#34;</a>) these attributes relate to the <i>current</i> result set.</p>

<p>See also <a href="#finish" class="podlinkpod"
>&#34;finish&#34;</a> to learn more about the effect it may have on some attributes.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="NUM_OF_FIELDS"
><code>NUM_OF_FIELDS</code></a></h3>

<p>Type: integer, read-only</p>

<p>Number of fields (columns) in the data the prepared statement may return. Statements that don&#39;t return rows of data, like <code>DELETE</code> and <code>CREATE</code> set <code>NUM_OF_FIELDS</code> to 0 (though it may be undef in some drivers).</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="NUM_OF_PARAMS"
><code>NUM_OF_PARAMS</code></a></h3>

<p>Type: integer, read-only</p>

<p>The number of parameters (placeholders) in the prepared statement. See SUBSTITUTION VARIABLES below for more details.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
><code>NAME</code></a></h3>

<p>Type: array-ref, read-only</p>

<p>Returns a reference to an array of field names for each column. The names may contain spaces but should not be truncated or have any trailing space. Note that the names have the letter case (upper, lower or mixed) as returned by the driver being used. Portable applications should use <a href="#NAME_lc" class="podlinkpod"
>&#34;NAME_lc&#34;</a> or <a href="#NAME_uc" class="podlinkpod"
>&#34;NAME_uc&#34;</a>.</p>

<pre class="sh_perl">  print &#34;First column name: $sth-&#62;{NAME}-&#62;[0]\n&#34;;</pre>

<p>Also note that the name returned for (aggregate) functions like <code>count(*)</code> or <code>max(c_foo)</code> is determined by the database server and not by <code>DBI</code> or the <code>DBD</code> backend.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="NAME_lc"
><code>NAME_lc</code></a></h3>

<p>Type: array-ref, read-only</p>

<p>Like <a href="#NAME" class="podlinkpod"
>&#34;NAME&#34;</a> but always returns lowercase names.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="NAME_uc"
><code>NAME_uc</code></a></h3>

<p>Type: array-ref, read-only</p>

<p>Like <a href="#NAME" class="podlinkpod"
>&#34;NAME&#34;</a> but always returns uppercase names.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="NAME_hash"
><code>NAME_hash</code></a></h3>

<p>Type: hash-ref, read-only</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="NAME_lc_hash"
><code>NAME_lc_hash</code></a></h3>

<p>Type: hash-ref, read-only</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="NAME_uc_hash"
><code>NAME_uc_hash</code></a></h3>

<p>Type: hash-ref, read-only</p>

<p>The <code>NAME_hash</code>, <code>NAME_lc_hash</code>, and <code>NAME_uc_hash</code> attributes return column name information as a reference to a hash.</p>

<p>The keys of the hash are the names of the columns. The letter case of the keys corresponds to the letter case returned by the <code>NAME</code>, <code>NAME_lc</code>, and <code>NAME_uc</code> attributes respectively (as described above).</p>

<p>The value of each hash entry is the perl index number of the corresponding column (counting from 0). For example:</p>

<pre class="sh_perl">  $sth = $dbh-&#62;prepare(&#34;select Id, Name from table&#34;);
  $sth-&#62;execute;
  @row = $sth-&#62;fetchrow_array;
  print &#34;Name $row[ $sth-&#62;{NAME_lc_hash}{name} ]\n&#34;;</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="TYPE"
><code>TYPE</code></a></h3>

<p>Type: array-ref, read-only</p>

<p>Returns a reference to an array of integer values for each column. The value indicates the data type of the corresponding column.</p>

<p>The values correspond to the international standards (ANSI X3.135 and ISO/IEC 9075) which, in general terms, means ODBC. Driver-specific types that don&#39;t exactly match standard types should generally return the same values as an ODBC driver supplied by the makers of the database. That might include private type numbers in ranges the vendor has officially registered with the ISO working group:</p>

<pre class="sh_perl">  <a href="ftp://sqlstandards.org/SC32/SQL_Registry/" class="podlinkurl"
>ftp://sqlstandards.org/SC32/SQL_Registry/</a></pre>

<p>Where there&#39;s no vendor-supplied ODBC driver to be compatible with, the DBI driver can use type numbers in the range that is now officially reserved for use by the DBI: -9999 to -9000.</p>

<p>All possible values for <code>TYPE</code> should have at least one entry in the output of the <code>type_info_all</code> method (see <a href="#type_info_all" class="podlinkpod"
>&#34;type_info_all&#34;</a>).</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="PRECISION"
><code>PRECISION</code></a></h3>

<p>Type: array-ref, read-only</p>

<p>Returns a reference to an array of integer values for each column.</p>

<p>For numeric columns, the value is the maximum number of digits (without considering a sign character or decimal point). Note that the &#34;display size&#34; for floating point types (REAL, FLOAT, DOUBLE) can be up to 7 characters greater than the precision (for the sign + decimal point + the letter E + a sign + 2 or 3 digits).</p>

<p>For any character type column the value is the OCTET_LENGTH, in other words the number of bytes, not characters.</p>

<p>(More recent standards refer to this as COLUMN_SIZE but we stick with PRECISION for backwards compatibility.)</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="SCALE"
><code>SCALE</code></a></h3>

<p>Type: array-ref, read-only</p>

<p>Returns a reference to an array of integer values for each column. NULL (<code>undef</code>) values indicate columns where scale is not applicable.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="NULLABLE"
><code>NULLABLE</code></a></h3>

<p>Type: array-ref, read-only</p>

<p>Returns a reference to an array indicating the possibility of each column returning a null. Possible values are <code>0</code> (or an empty string) = no, <code>1</code> = yes, <code>2</code> = unknown.</p>

<pre class="sh_perl">  print &#34;First column may return NULL\n&#34; if $sth-&#62;{NULLABLE}-&#62;[0];</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="CursorName"
><code>CursorName</code></a></h3>

<p>Type: string, read-only</p>

<p>Returns the name of the cursor associated with the statement handle, if available. If not available or if the database driver does not support the <code>&#34;where current of ...&#34;</code> SQL syntax, then it returns <code>undef</code>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Database"
><code>Database</code></a></h3>

<p>Type: dbh, read-only</p>

<p>Returns the parent $dbh of the statement handle.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Statement"
><code>Statement</code></a></h3>

<p>Type: string, read-only</p>

<p>Returns the statement string passed to the <a href="#prepare" class="podlinkpod"
>&#34;prepare&#34;</a> method.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="ParamValues"
><code>ParamValues</code></a></h3>

<p>Type: hash ref, read-only</p>

<p>Returns a reference to a hash containing the values currently bound to placeholders. The keys of the hash are the &#39;names&#39; of the placeholders, typically integers starting at 1. Returns undef if not supported by the driver.</p>

<p>See <a href="#ShowErrorStatement" class="podlinkpod"
>&#34;ShowErrorStatement&#34;</a> for an example of how this is used.</p>

<p>* Keys:</p>

<p>If the driver supports <code>ParamValues</code> but no values have been bound yet then the driver should return a hash with placeholders names in the keys but all the values undef, but some drivers may return a ref to an empty hash because they can&#39;t pre-determine the names.</p>

<p>It is possible that the keys in the hash returned by <code>ParamValues</code> are not exactly the same as those implied by the prepared statement. For example, DBD::Oracle translates &#39;<code>?</code>&#39; placeholders into &#39;<code>:pN</code>&#39; where N is a sequence number starting at 1.</p>

<p>* Values:</p>

<p>It is possible that the values in the hash returned by <code>ParamValues</code> are not <i>exactly</i> the same as those passed to bind_param() or execute(). The driver may have slightly modified values in some way based on the TYPE the value was bound with. For example a floating point value bound as an SQL_INTEGER type may be returned as an integer. The values returned by <code>ParamValues</code> can be passed to another bind_param() method with the same TYPE and will be seen by the database as the same value. See also <a href="#ParamTypes" class="podlinkpod"
>&#34;ParamTypes&#34;</a> below.</p>

<p>The <code>ParamValues</code> attribute was added in DBI 1.28.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="ParamTypes"
><code>ParamTypes</code></a></h3>

<p>Type: hash ref, read-only</p>

<p>Returns a reference to a hash containing the type information currently bound to placeholders. Returns undef if not supported by the driver.</p>

<p>* Keys:</p>

<p>See <a href="#ParamValues" class="podlinkpod"
>&#34;ParamValues&#34;</a> above.</p>

<p>* Values:</p>

<p>The hash values are hashrefs of type information in the same form as that passed to the various bind_param() methods (See <a href="#bind_param" class="podlinkpod"
>&#34;bind_param&#34;</a> for the format and values).</p>

<p>It is possible that the values in the hash returned by <code>ParamTypes</code> are not exactly the same as those passed to bind_param() or execute(). Param attributes specified using the abbreviated form, like this:</p>

<pre class="sh_perl">    $sth-&#62;bind_param(1, SQL_INTEGER);</pre>

<p>are returned in the expanded form, as if called like this:</p>

<pre class="sh_perl">    $sth-&#62;bind_param(1, { TYPE =&#62; SQL_INTEGER });</pre>

<p>The driver may have modified the type information in some way based on the bound values, other hints provided by the prepare()&#39;d SQL statement, or alternate type mappings required by the driver or target database system. The driver may also add private keys (with names beginning with the drivers reserved prefix, e.g., odbc_xxx).</p>

<p>* Example:</p>

<p>The keys and values in the returned hash can be passed to the various bind_param() methods to effectively reproduce a previous param binding. For example:</p>

<pre class="sh_perl">  # assuming $sth1 is a previously prepared statement handle
  my $sth2 = $dbh-&#62;prepare( $sth1-&#62;{Statement} );
  my $ParamValues = $sth1-&#62;{ParamValues} || {};
  my $ParamTypes  = $sth1-&#62;{ParamTypes}  || {};
  $sth2-&#62;bind_param($_, $ParamValues-&#62;{$_} $ParamTypes-&#62;{$_})
    for keys %{ {%$ParamValues, %$ParamTypes} };
  $sth2-&#62;execute();</pre>

<p>The <code>ParamTypes</code> attribute was added in DBI 1.49. Implementation is the responsibility of individual drivers; the DBI layer default implementation simply returns undef.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="ParamArrays"
><code>ParamArrays</code></a></h3>

<p>Type: hash ref, read-only</p>

<p>Returns a reference to a hash containing the values currently bound to placeholders with <a href="#execute_array" class="podlinkpod"
>&#34;execute_array&#34;</a> or <a href="#bind_param_array" class="podlinkpod"
>&#34;bind_param_array&#34;</a>. The keys of the hash are the &#39;names&#39; of the placeholders, typically integers starting at 1. Returns undef if not supported by the driver or no arrays of parameters are bound.</p>

<p>Each key value is an array reference containing a list of the bound parameters for that column.</p>

<p>For example:</p>

<pre class="sh_perl">  $sth = $dbh-&#62;prepare(&#34;INSERT INTO staff (id, name) values (?,?)&#34;);
  $sth-&#62;execute_array({},[1,2], [&#39;fred&#39;,&#39;dave&#39;]);
  if ($sth-&#62;{ParamArrays}) {
      foreach $param (keys %{$sth-&#62;{ParamArrays}}) {
          printf &#34;Parameters for %s : %s\n&#34;, $param,
          join(&#34;,&#34;, @{$sth-&#62;{ParamArrays}-&#62;{$param}});
      }
  }</pre>

<p>It is possible that the values in the hash returned by <code>ParamArrays</code> are not <i>exactly</i> the same as those passed to <a href="#bind_param_array" class="podlinkpod"
>&#34;bind_param_array&#34;</a> or <a href="#execute_array" class="podlinkpod"
>&#34;execute_array&#34;</a>. The driver may have slightly modified values in some way based on the TYPE the value was bound with. For example a floating point value bound as an SQL_INTEGER type may be returned as an integer.</p>

<p>It is also possible that the keys in the hash returned by <code>ParamArrays</code> are not exactly the same as those implied by the prepared statement. For example, DBD::Oracle translates &#39;<code>?</code>&#39; placeholders into &#39;<code>:pN</code>&#39; where N is a sequence number starting at 1.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="RowsInCache"
><code>RowsInCache</code></a></h3>

<p>Type: integer, read-only</p>

<p>If the driver supports a local row cache for <code>SELECT</code> statements, then this attribute holds the number of un-fetched rows in the cache. If the driver doesn&#39;t, then it returns <code>undef</code>. Note that some drivers pre-fetch rows on execute, whereas others wait till the first fetch.</p>

<p>See also the <a href="#RowCacheSize" class="podlinkpod"
>&#34;RowCacheSize&#34;</a> database handle attribute.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FURTHER_INFORMATION"
>FURTHER INFORMATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Catalog_Methods"
>Catalog Methods</a></h2>

<p>An application can retrieve metadata information from the DBMS by issuing appropriate queries on the views of the Information Schema. Unfortunately, <code>INFORMATION_SCHEMA</code> views are seldom supported by the DBMS. Special methods (catalog methods) are available to return result sets for a small but important portion of that metadata:</p>

<pre class="sh_perl">  column_info
  foreign_key_info
  primary_key_info
  table_info
  statistics_info</pre>

<p>All catalog methods accept arguments in order to restrict the result sets. Passing <code>undef</code> to an optional argument does not constrain the search for that argument. However, an empty string (&#39;&#39;) is treated as a regular search criteria and will only match an empty value.</p>

<p><b>Note</b>: SQL/CLI and ODBC differ in the handling of empty strings. An empty string will not restrict the result set in SQL/CLI.</p>

<p>Most arguments in the catalog methods accept only <i>ordinary values</i>, e.g. the arguments of <code>primary_key_info()</code>. Such arguments are treated as a literal string, i.e. the case is significant and quote characters are taken literally.</p>

<p>Some arguments in the catalog methods accept <i>search patterns</i> (strings containing &#39;_&#39; and/or &#39;%&#39;), e.g. the <code>$table</code> argument of <code>column_info()</code>. Passing &#39;%&#39; is equivalent to leaving the argument <code>undef</code>.</p>

<p><b>Caveat</b>: The underscore (&#39;_&#39;) is valid and often used in SQL identifiers. Passing such a value to a search pattern argument may return more rows than expected! To include pattern characters as literals, they must be preceded by an escape character which can be achieved with</p>

<pre class="sh_perl">  $esc = $dbh-&#62;get_info( 14 );  # SQL_SEARCH_PATTERN_ESCAPE
  $search_pattern =~ s/([_%])/$esc$1/g;</pre>

<p>The ODBC and SQL/CLI specifications define a way to change the default behaviour described above: All arguments (except <i>list value arguments</i>) are treated as <i>identifier</i> if the <code>SQL_ATTR_METADATA_ID</code> attribute is set to <code>SQL_TRUE</code>. <i>Quoted identifiers</i> are very similar to <i>ordinary values</i>, i.e. their body (the string within the quotes) is interpreted literally. <i>Unquoted identifiers</i> are compared in UPPERCASE.</p>

<p>The DBI (currently) does not support the <code>SQL_ATTR_METADATA_ID</code> attribute, i.e. it behaves like an ODBC driver where <code>SQL_ATTR_METADATA_ID</code> is set to <code>SQL_FALSE</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Transactions"
>Transactions</a></h2>

<p>Transactions are a fundamental part of any robust database system. They protect against errors and database corruption by ensuring that sets of related changes to the database take place in atomic (indivisible, all-or-nothing) units.</p>

<p>This section applies to databases that support transactions and where <code>AutoCommit</code> is off. See <a href="#AutoCommit" class="podlinkpod"
>&#34;AutoCommit&#34;</a> for details of using <code>AutoCommit</code> with various types of databases.</p>

<p>The recommended way to implement robust transactions in Perl applications is to use <code>RaiseError</code> and <code>eval&#160;{&#160;...&#160;}</code> (which is very fast, unlike <code>eval&#160;&#34;...&#34;</code>). For example:</p>

<pre class="sh_perl">  $dbh-&#62;{AutoCommit} = 0;  # enable transactions, if possible
  $dbh-&#62;{RaiseError} = 1;
  eval {
      foo(...)        # do lots of work here
      bar(...)        # including inserts
      baz(...)        # and updates
      $dbh-&#62;commit;   # commit the changes if we get this far
  };
  if ($@) {
      warn &#34;Transaction aborted because $@&#34;;
      # now rollback to undo the incomplete changes
      # but do it in an eval{} as it may also fail
      eval { $dbh-&#62;rollback };
      # add other application on-error-clean-up code here
  }</pre>

<p>If the <code>RaiseError</code> attribute is not set, then DBI calls would need to be manually checked for errors, typically like this:</p>

<pre class="sh_perl">  $h-&#62;method(@args) or die $h-&#62;errstr;</pre>

<p>With <code>RaiseError</code> set, the DBI will automatically <code>die</code> if any DBI method call on that handle (or a child handle) fails, so you don&#39;t have to test the return value of each method call. See <a href="#RaiseError" class="podlinkpod"
>&#34;RaiseError&#34;</a> for more details.</p>

<p>A major advantage of the <code>eval</code> approach is that the transaction will be properly rolled back if <i>any</i> code (not just DBI calls) in the inner application dies for any reason. The major advantage of using the <code>$h-&#62;{RaiseError}</code> attribute is that all DBI calls will be checked automatically. Both techniques are strongly recommended.</p>

<p>After calling <code>commit</code> or <code>rollback</code> many drivers will not let you fetch from a previously active <code>SELECT</code> statement handle that&#39;s a child of the same database handle. A typical way round this is to connect the the database twice and use one connection for <code>SELECT</code> statements.</p>

<p>See <a href="#AutoCommit" class="podlinkpod"
>&#34;AutoCommit&#34;</a> and <a href="#disconnect" class="podlinkpod"
>&#34;disconnect&#34;</a> for other important information about transactions.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Handling_BLOB_/_LONG_/_Memo_Fields"
>Handling BLOB / LONG / Memo Fields</a></h2>

<p>Many databases support &#34;blob&#34; (binary large objects), &#34;long&#34;, or similar datatypes for holding very long strings or large amounts of binary data in a single field. Some databases support variable length long values over 2,000,000,000 bytes in length.</p>

<p>Since values of that size can&#39;t usually be held in memory, and because databases can&#39;t usually know in advance the length of the longest long that will be returned from a <code>SELECT</code> statement (unlike other data types), some special handling is required.</p>

<p>In this situation, the value of the <code>$h-&#62;{LongReadLen}</code> attribute is used to determine how much buffer space to allocate when fetching such fields. The <code>$h-&#62;{LongTruncOk}</code> attribute is used to determine how to behave if a fetched value can&#39;t fit into the buffer.</p>

<p>See the description of <a href="#LongReadLen" class="podlinkpod"
>&#34;LongReadLen&#34;</a> for more information.</p>

<p>When trying to insert long or binary values, placeholders should be used since there are often limits on the maximum size of an <code>INSERT</code> statement and the <a href="#quote" class="podlinkpod"
>&#34;quote&#34;</a> method generally can&#39;t cope with binary data. See <a href="#Placeholders_and_Bind_Values" class="podlinkpod"
>&#34;Placeholders and Bind Values&#34;</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Simple_Examples"
>Simple Examples</a></h2>

<p>Here&#39;s a complete example program to select and fetch some data:</p>

<pre class="sh_perl">  my $data_source = &#34;dbi::DriverName:db_name&#34;;
  my $dbh = DBI-&#62;connect($data_source, $user, $password)
      or die &#34;Can&#39;t connect to $data_source: $DBI::errstr&#34;;

  my $sth = $dbh-&#62;prepare( q{
          SELECT name, phone
          FROM mytelbook
  }) or die &#34;Can&#39;t prepare statement: $DBI::errstr&#34;;

  my $rc = $sth-&#62;execute
      or die &#34;Can&#39;t execute statement: $DBI::errstr&#34;;

  print &#34;Query will return $sth-&#62;{NUM_OF_FIELDS} fields.\n\n&#34;;
  print &#34;Field names: @{ $sth-&#62;{NAME} }\n&#34;;

  while (($name, $phone) = $sth-&#62;fetchrow_array) {
      print &#34;$name: $phone\n&#34;;
  }
  # check for problems which may have terminated the fetch early
  die $sth-&#62;errstr if $sth-&#62;err;

  $dbh-&#62;disconnect;</pre>

<p>Here&#39;s a complete example program to insert some data from a file. (This example uses <code>RaiseError</code> to avoid needing to check each call).</p>

<pre class="sh_perl">  my $dbh = DBI-&#62;connect(&#34;dbi:DriverName:db_name&#34;, $user, $password, {
      RaiseError =&#62; 1, AutoCommit =&#62; 0
  });

  my $sth = $dbh-&#62;prepare( q{
      INSERT INTO table (name, phone) VALUES (?, ?)
  });

  open FH, &#34;&#60;phone.csv&#34; or die &#34;Unable to open phone.csv: $!&#34;;
  while (&#60;FH&#62;) {
      chomp;
      my ($name, $phone) = split /,/;
      $sth-&#62;execute($name, $phone);
  }
  close FH;

  $dbh-&#62;commit;
  $dbh-&#62;disconnect;</pre>

<p>Here&#39;s how to convert fetched NULLs (undefined values) into empty strings:</p>

<pre class="sh_perl">  while($row = $sth-&#62;fetchrow_arrayref) {
    # this is a fast and simple way to deal with nulls:
    foreach (@$row) { $_ = &#39;&#39; unless defined }
    print &#34;@$row\n&#34;;
  }</pre>

<p>The <code>q{...}</code> style quoting used in these examples avoids clashing with quotes that may be used in the SQL statement. Use the double-quote like <code>qq{...}</code> operator if you want to interpolate variables into the string. See <a href="/perldoc?perlop#Quote_and_Quote-like_Operators" class="podlinkpod"
>&#34;Quote and Quote-like Operators&#34; in perlop</a> for more details.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Threads_and_Thread_Safety"
>Threads and Thread Safety</a></h2>

<p>Perl 5.7 and later support a new threading model called iThreads. (The old &#34;5.005 style&#34; threads are not supported by the DBI.)</p>

<p>In the iThreads model each thread has it&#39;s own copy of the perl interpreter. When a new thread is created the original perl interpreter is &#39;cloned&#39; to create a new copy for the new thread.</p>

<p>If the DBI and drivers are loaded and handles created before the thread is created then it will get a cloned copy of the DBI, the drivers and the handles.</p>

<p>However, the internal pointer data within the handles will refer to the DBI and drivers in the original interpreter. Using those handles in the new interpreter thread is not safe, so the DBI detects this and croaks on any method call using handles that don&#39;t belong to the current thread (except for DESTROY).</p>

<p>Because of this (possibly temporary) restriction, newly created threads must make their own connections to the database. Handles can&#39;t be shared across threads.</p>

<p>But BEWARE, some underlying database APIs (the code the DBD driver uses to talk to the database, often supplied by the database vendor) are not thread safe. If it&#39;s not thread safe, then allowing more than one thread to enter the code at the same time may cause subtle/serious problems. In some cases allowing more than one thread to enter the code, even if <i>not</i> at the same time, can cause problems. You have been warned.</p>

<p>Using DBI with perl threads is not yet recommended for production environments. For more information see <a href="http://www.perlmonks.org/index.pl?node_id=288022" class="podlinkurl"
>http://www.perlmonks.org/index.pl?node_id=288022</a></p>

<p>Note: There is a bug in perl 5.8.2 when configured with threads and debugging enabled (bug #24463) which causes a DBI test to fail.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Signal_Handling_and_Canceling_Operations"
>Signal Handling and Canceling Operations</a></h2>

<p>[The following only applies to systems with unix-like signal handling. I&#39;d welcome additions for other systems, especially Windows.]</p>

<p>The first thing to say is that signal handling in Perl versions less than 5.8 is <i>not</i> safe. There is always a small risk of Perl crashing and/or core dumping when, or after, handling a signal because the signal could arrive and be handled while internal data structures are being changed. If the signal handling code used those same internal data structures it could cause all manner of subtle and not-so-subtle problems. The risk was reduced with 5.4.4 but was still present in all perls up through 5.8.0.</p>

<p>Beginning in perl 5.8.0 perl implements &#39;safe&#39; signal handling if your system has the POSIX sigaction() routine. Now when a signal is delivered perl just makes a note of it but does <i>not</i> run the %SIG handler. The handling is &#39;deferred&#39; until a &#39;safe&#39; moment.</p>

<p>Although this change made signal handling safe, it also lead to a problem with signals being deferred for longer than you&#39;d like. If a signal arrived while executing a system call, such as waiting for data on a network connection, the signal is noted and then the system call that was executing returns with an EINTR error code to indicate that it was interrupted. All fine so far.</p>

<p>The problem comes when the code that made the system call sees the EINTR code and decides it&#39;s going to call it again. Perl doesn&#39;t do that, but database code sometimes does. If that happens then the signal handler doesn&#39;t get called until later. Maybe much later.</p>

<p>Fortunately there are ways around this which we&#39;ll discuss below. Unfortunately they make signals unsafe again.</p>

<p>The two most common uses of signals in relation to the DBI are for canceling operations when the user types Ctrl-C (interrupt), and for implementing a timeout using <code>alarm()</code> and <code>$SIG{ALRM}</code>.</p>

<dl>
<dt><a name="Cancel"
>Cancel</a></dt>

<dd>
<p>The DBI provides a <code>cancel</code> method for statement handles. The <code>cancel</code> method should abort the current operation and is designed to be called from a signal handler. For example:</p>

<pre class="sh_perl">  $SIG{INT} = sub { $sth-&#62;cancel };</pre>

<p>However, few drivers implement this (the DBI provides a default method that just returns <code>undef</code>) and, even if implemented, there is still a possibility that the statement handle, and even the parent database handle, will not be usable afterwards.</p>

<p>If <code>cancel</code> returns true, then it has successfully invoked the database engine&#39;s own cancel function. If it returns false, then <code>cancel</code> failed. If it returns <code>undef</code>, then the database driver does not have cancel implemented - very few do.</p>

<dt><a name="Timeout"
>Timeout</a></dt>

<dd>
<p>The traditional way to implement a timeout is to set <code>$SIG{ALRM}</code> to refer to some code that will be executed when an ALRM signal arrives and then to call alarm($seconds) to schedule an ALRM signal to be delivered $seconds in the future. For example:</p>

<pre class="sh_perl">  eval {
    local $SIG{ALRM} = sub { die &#34;TIMEOUT\n&#34; }; # N.B. \n required
    eval {
      alarm($seconds);
      ... code to execute with timeout here (which may die) ...
    };
    # outer eval catches alarm that might fire JUST before this alarm(0)
    alarm(0);  # cancel alarm (if code ran fast)
    die &#34;$@&#34; if $@;
  };
  if ( $@ eq &#34;TIMEOUT\n&#34; ) { ... }
  elsif ($@) { ... } # some other error</pre>

<p>The first (outer) eval is used to avoid the unlikely but possible chance that the &#34;code to execute&#34; dies and the alarm fires before it is cancelled. Without the outer eval, if this happened your program will die if you have no ALRM handler or a non-local alarm handler will be called.</p>

<p>Unfortunately, as described above, this won&#39;t always work as expected, depending on your perl version and the underlying database code.</p>

<p>With Oracle for instance (DBD::Oracle), if the system which hosts the database is down the DBI-&#62;connect() call will hang for several minutes before returning an error.</p>
</dd>
</dl>

<p>The solution on these systems is to use the <code>POSIX::sigaction()</code> routine to gain low level access to how the signal handler is installed.</p>

<p>The code would look something like this (for the DBD-Oracle connect()):</p>

<pre class="sh_perl">   use POSIX qw(:signal_h);

   my $mask = POSIX::SigSet-&#62;new( SIGALRM ); # signals to mask in the handler
   my $action = POSIX::SigAction-&#62;new(
       sub { die &#34;connect timeout\n&#34; },        # the handler code ref
       $mask,
       # not using (perl 5.8.2 and later) &#39;safe&#39; switch or sa_flags
   );
   my $oldaction = POSIX::SigAction-&#62;new();
   sigaction( SIGALRM, $action, $oldaction );
   my $dbh;
   eval {
      eval {
        alarm(5); # seconds before time out
        $dbh = DBI-&#62;connect(&#34;dbi:Oracle:$dsn&#34; ... );
      };
      alarm(0); # cancel alarm (if connect worked fast)
      die &#34;$@\n&#34; if $@; # connect died
   };
   sigaction( SIGALRM, $oldaction );  # restore original signal handler
   if ( $@ ) {
     if ($@ eq &#34;connect timeout\n&#34;) {...}
     else { # connect died }
   }</pre>

<p>See previous example for the reasoning around the double eval.</p>

<p>Similar techniques can be used for canceling statement execution.</p>

<p>Unfortunately, this solution is somewhat messy, and it does <i>not</i> work with perl versions less than perl 5.8 where <code>POSIX::sigaction()</code> appears to be broken.</p>

<p>For a cleaner implementation that works across perl versions, see Lincoln Baxter&#39;s Sys::SigAction module at <a href="http://search.cpan.org/~lbaxter/Sys-SigAction/" class="podlinkurl"
>http://search.cpan.org/~lbaxter/Sys-SigAction/</a>. The documentation for Sys::SigAction includes an longer discussion of this problem, and a DBD::Oracle test script.</p>

<p>Be sure to read all the signal handling sections of the <a href="/perldoc?perlipc" class="podlinkpod"
>perlipc</a> manual.</p>

<p>And finally, two more points to keep firmly in mind. Firstly, remember that what we&#39;ve done here is essentially revert to old style <i>unsafe</i> handling of these signals. So do as little as possible in the handler. Ideally just die(). Secondly, the handles in use at the time the signal is handled may not be safe to use afterwards.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Subclassing_the_DBI"
>Subclassing the DBI</a></h2>

<p>DBI can be subclassed and extended just like any other object oriented module. Before we talk about how to do that, it&#39;s important to be clear about the various DBI classes and how they work together.</p>

<p>By default <code>$dbh = DBI-&#62;connect(...)</code> returns a $dbh blessed into the <code>DBI::db</code> class. And the <code>$dbh-&#62;prepare</code> method returns an $sth blessed into the <code>DBI::st</code> class (actually it simply changes the last four characters of the calling handle class to be <code>::st</code>).</p>

<p>The leading &#39;<code>DBI</code>&#39; is known as the &#39;root class&#39; and the extra &#39;<code>::db</code>&#39; or &#39;<code>::st</code>&#39; are the &#39;handle type suffixes&#39;. If you want to subclass the DBI you&#39;ll need to put your overriding methods into the appropriate classes. For example, if you want to use a root class of <code>MySubDBI</code> and override the do(), prepare() and execute() methods, then your do() and prepare() methods should be in the <code>MySubDBI::db</code> class and the execute() method should be in the <code>MySubDBI::st</code> class.</p>

<p>To setup the inheritance hierarchy the @ISA variable in <code>MySubDBI::db</code> should include <code>DBI::db</code> and the @ISA variable in <code>MySubDBI::st</code> should include <code>DBI::st</code>. The <code>MySubDBI</code> root class itself isn&#39;t currently used for anything visible and so, apart from setting @ISA to include <code>DBI</code>, it can be left empty.</p>

<p>So, having put your overriding methods into the right classes, and setup the inheritance hierarchy, how do you get the DBI to use them? You have two choices, either a static method call using the name of your subclass:</p>

<pre class="sh_perl">  $dbh = MySubDBI-&#62;connect(...);</pre>

<p>or specifying a <code>RootClass</code> attribute:</p>

<pre class="sh_perl">  $dbh = DBI-&#62;connect(..., { RootClass =&#62; &#39;MySubDBI&#39; });</pre>

<p>If both forms are used then the attribute takes precedence.</p>

<p>The only differences between the two are that using an explicit RootClass attribute will a) make the DBI automatically attempt to load a module by that name if the class doesn&#39;t exist, and b) won&#39;t call your MySubDBI::connect() method, if you have one.</p>

<p>When subclassing is being used then, after a successful new connect, the DBI-&#62;connect method automatically calls:</p>

<pre class="sh_perl">  $dbh-&#62;connected($dsn, $user, $pass, \%attr);</pre>

<p>The default method does nothing. The call is made just to simplify any post-connection setup that your subclass may want to perform. The parameters are the same as passed to DBI-&#62;connect. If your subclass supplies a connected method, it should be part of the MySubDBI::db package.</p>

<p>One more thing to note: you must let the DBI do the handle creation. If you want to override the connect() method in your *::dr class then it must still call SUPER::connect to get a $dbh to work with. Similarly, an overridden prepare() method in *::db must still call SUPER::prepare to get a $sth. If you try to create your own handles using bless() then you&#39;ll find the DBI will reject them with an &#34;is not a DBI handle (has no magic)&#34; error.</p>

<p>Here&#39;s a brief example of a DBI subclass. A more thorough example can be found in <em>t/subclass.t</em> in the DBI distribution.</p>

<pre class="sh_perl">  package MySubDBI;

  use strict;

  use DBI;
  use vars qw(@ISA);
  @ISA = qw(DBI);

  package MySubDBI::db;
  use vars qw(@ISA);
  @ISA = qw(DBI::db);

  sub prepare {
    my ($dbh, @args) = @_;
    my $sth = $dbh-&#62;SUPER::prepare(@args)
        or return;
    $sth-&#62;{private_mysubdbi_info} = { foo =&#62; &#39;bar&#39; };
    return $sth;
  }

  package MySubDBI::st;
  use vars qw(@ISA);
  @ISA = qw(DBI::st);

  sub fetch {
    my ($sth, @args) = @_;
    my $row = $sth-&#62;SUPER::fetch(@args)
        or return;
    do_something_magical_with_row_data($row)
        or return $sth-&#62;set_err(1234, &#34;The magic failed&#34;, undef, &#34;fetch&#34;);
    return $row;
  }</pre>

<p>When calling a SUPER::method that returns a handle, be careful to check the return value before trying to do other things with it in your overridden method. This is especially important if you want to set a hash attribute on the handle, as Perl&#39;s autovivification will bite you by (in)conveniently creating an unblessed hashref, which your method will then return with usually baffling results later on like the error &#34;dbih_getcom handle HASH(0xa4451a8) is not a DBI handle (has no magic&#34;. It&#39;s best to check right after the call and return undef immediately on error, just like DBI would and just like the example above.</p>

<p>If your method needs to record an error it should call the set_err() method with the error code and error string, as shown in the example above. The error code and error string will be recorded in the handle and available via <code>$h-&#62;err</code> and <code>$DBI::errstr</code> etc. The set_err() method always returns an undef or empty list as appropriate. Since your method should nearly always return an undef or empty list as soon as an error is detected it&#39;s handy to simply return what set_err() returns, as shown in the example above.</p>

<p>If the handle has <code>RaiseError</code>, <code>PrintError</code>, or <code>HandleError</code> etc. set then the set_err() method will honour them. This means that if <code>RaiseError</code> is set then set_err() won&#39;t return in the normal way but will &#39;throw an exception&#39; that can be caught with an <code>eval</code> block.</p>

<p>You can stash private data into DBI handles via <code>$h-&#62;{private_..._*}</code>. See the entry under <a href="#ATTRIBUTES_COMMON_TO_ALL_HANDLES" class="podlinkpod"
>&#34;ATTRIBUTES COMMON TO ALL HANDLES&#34;</a> for info and important caveats.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TRACING"
>TRACING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The DBI has a powerful tracing mechanism built in. It enables you to see what&#39;s going on &#39;behind the scenes&#39;, both within the DBI and the drivers you&#39;re using.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Trace_Settings"
>Trace Settings</a></h2>

<p>Which details are written to the trace output is controlled by a combination of a <i>trace level</i>, an integer from 0 to 15, and a set of <i>trace flags</i> that are either on or off. Together these are known as the <i>trace settings</i> and are stored together in a single integer. For normal use you only need to set the trace level, and generally only to a value between 1 and 4.</p>

<p>Each handle has it&#39;s own trace settings, and so does the DBI. When you call a method the DBI merges the handles settings into its own for the duration of the call: the trace flags of the handle are OR&#39;d into the trace flags of the DBI, and if the handle has a higher trace level then the DBI trace level is raised to match it. The previous DBI trace settings are restored when the called method returns.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Trace_Levels"
>Trace Levels</a></h2>

<p>Trace <i>levels</i> are as follows:</p>

<pre class="sh_perl">  0 - Trace disabled.
  1 - Trace top-level DBI method calls returning with results or errors.
  2 - As above, adding tracing of top-level method entry with parameters.
  3 - As above, adding some high-level information from the driver
      and some internal information from the DBI.
  4 - As above, adding more detailed information from the driver.
      This is the first level to trace all the rows being fetched.
  5 to 15 - As above but with more and more internal information.</pre>

<p>Trace level 1 is best for a simple overview of what&#39;s happening. Trace levels 2 thru 4 a good choice for general purpose tracing. Levels 5 and above are best reserved for investigating a specific problem, when you need to see &#34;inside&#34; the driver and DBI.</p>

<p>The trace output is detailed and typically very useful. Much of the trace output is formatted using the <a href="#neat" class="podlinkpod"
>&#34;neat&#34;</a> function, so strings in the trace output may be edited and truncated by that function.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Trace_Flags"
>Trace Flags</a></h2>

<p>Trace <i>flags</i> are used to enable tracing of specific activities within the DBI and drivers. The DBI defines some trace flags and drivers can define others. DBI trace flag names begin with a capital letter and driver specific names begin with a lowercase letter, as usual.</p>

<p>Currently the DBI only defines two trace flags:</p>

<pre class="sh_perl">  ALL - turn on all DBI and driver flags (not recommended)
  SQL - trace SQL statements executed
        (not yet implemented in DBI but implemented in some DBDs)
  CON - trace connection process
  ENC - trace encoding (unicode translations etc)
        (not yet implemented in DBI but implemented in some DBDs)
  DBD - trace only DBD messages
        (not implemented by all DBDs yet)
  TXN - trace transactions
        (not implemented in all DBDs yet)</pre>

<p>The <a href="#parse_trace_flags" class="podlinkpod"
>&#34;parse_trace_flags&#34;</a> and <a href="#parse_trace_flag" class="podlinkpod"
>&#34;parse_trace_flag&#34;</a> methods are used to convert trace flag names into the corresponding integer bit flags.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Enabling_Trace"
>Enabling Trace</a></h2>

<p>The <code>$h-&#62;trace</code> method sets the trace settings for a handle and <code>DBI-&#62;trace</code> does the same for the DBI.</p>

<p>In addition to the <a href="#trace" class="podlinkpod"
>&#34;trace&#34;</a> method, you can enable the same trace information, and direct the output to a file, by setting the <code>DBI_TRACE</code> environment variable before starting Perl. See <a href="#DBI_TRACE" class="podlinkpod"
>&#34;DBI_TRACE&#34;</a> for more information.</p>

<p>Finally, you can set, or get, the trace settings for a handle using the <code>TraceLevel</code> attribute.</p>

<p>All of those methods use parse_trace_flags() and so allow you set both the trace level and multiple trace flags by using a string containing the trace level and/or flag names separated by vertical bar (&#34;<code>|</code>&#34;) or comma (&#34;<code>,</code>&#34;) characters. For example:</p>

<pre class="sh_perl">  local $h-&#62;{TraceLevel} = &#34;3|SQL|foo&#34;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Trace_Output"
>Trace Output</a></h2>

<p>Initially trace output is written to <code>STDERR</code>. Both the <code>$h-&#62;trace</code> and <code>DBI-&#62;trace</code> methods take an optional $trace_file parameter, which may be either the name of a file to be opened by DBI in append mode, or a reference to an existing writable (possibly layered) filehandle. If $trace_file is a filename, and can be opened in append mode, or $trace_file is a writable filehandle, then <i>all</i> trace output (currently including that from other handles) is redirected to that file. A warning is generated if $trace_file can&#39;t be opened or is not writable.</p>

<p>Further calls to trace() without $trace_file do not alter where the trace output is sent. If $trace_file is undefined, then trace output is sent to <code>STDERR</code> and, if the prior trace was opened with $trace_file as a filename, the previous trace file is closed; if $trace_file was a filehandle, the filehandle is <b>not</b> closed.</p>

<p><b>NOTE</b>: If $trace_file is specified as a filehandle, the filehandle should not be closed until all DBI operations are completed, or the application has reset the trace file via another call to <code>trace()</code> that changes the trace file.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Tracing_to_Layered_Filehandles"
>Tracing to Layered Filehandles</a></h2>

<p><b>NOTE</b>:</p>

<ul>
<li>Tied filehandles are not currently supported, as tie operations are not available to the PerlIO methods used by the DBI.</li>

<li>PerlIO layer support requires Perl version 5.8 or higher.</li>
</ul>

<p>As of version 5.8, Perl provides the ability to layer various &#34;disciplines&#34; on an open filehandle via the <a href="/perldoc?PerlIO" class="podlinkpod"
>PerlIO</a> module.</p>

<p>A simple example of using PerlIO layers is to use a scalar as the output:</p>

<pre class="sh_perl">    my $scalar = &#39;&#39;;
    open( my $fh, &#34;+&#62;:scalar&#34;, \$scalar );
    $dbh-&#62;trace( 2, $fh );</pre>

<p>Now all trace output is simply appended to $scalar.</p>

<p>A more complex application of tracing to a layered filehandle is the use of a custom layer (<i>Refer to </i><a href="/perldoc?Perlio%3A%3Avia" class="podlinkpod"
>Perlio::via</a> <i>for details on creating custom PerlIO layers.</i>). Consider an application with the following logger module:</p>

<pre class="sh_perl">    package MyFancyLogger;

    sub new
    {
        my $self = {};
        my $fh;
        open $fh, &#39;&#62;&#39;, &#39;fancylog.log&#39;;
        $self-&#62;{_fh} = $fh;
        $self-&#62;{_buf} = &#39;&#39;;
        return bless $self, shift;
    }

    sub log
    {
        my $self = shift;
        return unless exists $self-&#62;{_fh};
        my $fh = $self-&#62;{_fh};
        $self-&#62;{_buf} .= shift;
    #
    # DBI feeds us pieces at a time, so accumulate a complete line
    # before outputing
    #
        print $fh &#34;At &#34;, scalar localtime(), &#39;:&#39;, $self-&#62;{_buf}, &#34;\n&#34; and
        $self-&#62;{_buf} = &#39;&#39;
            if $self-&#62;{_buf}=~tr/\n//;
    }

    sub close {
        my $self = shift;
        return unless exists $self-&#62;{_fh};
        my $fh = $self-&#62;{_fh};
        print $fh &#34;At &#34;, scalar localtime(), &#39;:&#39;, $self-&#62;{_buf}, &#34;\n&#34; and
        $self-&#62;{_buf} = &#39;&#39;
            if $self-&#62;{_buf};
        close $fh;
        delete $self-&#62;{_fh};
    }

    1;</pre>

<p>To redirect DBI traces to this logger requires creating a package for the layer:</p>

<pre class="sh_perl">    package PerlIO::via::MyFancyLogLayer;

    sub PUSHED
    {
        my ($class,$mode,$fh) = @_;
        my $logger;
        return bless \$logger,$class;
    }

    sub OPEN {
        my ($self, $path, $mode, $fh) = @_;
        #
        # $path is actually our logger object
        #
        $$self = $path;
        return 1;
    }

    sub WRITE
    {
        my ($self, $buf, $fh) = @_;
        $$self-&#62;log($buf);
        return length($buf);
    }

    sub CLOSE {
        my $self = shift;
        $$self-&#62;close();
        return 0;
    }

    1;</pre>

<p>The application can then cause DBI traces to be routed to the logger using</p>

<pre class="sh_perl">    use PerlIO::via::MyFancyLogLayer;

    open my $fh, &#39;&#62;:via(MyFancyLogLayer)&#39;, MyFancyLogger-&#62;new();

    $dbh-&#62;trace(&#39;SQL&#39;, $fh);</pre>

<p>Now all trace output will be processed by MyFancyLogger&#39;s log() method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Trace_Content"
>Trace Content</a></h2>

<p>Many of the values embedded in trace output are formatted using the neat() utility function. This means they may be quoted, sanitized, and possibly truncated if longer than <code>$DBI::neat_maxlen</code>. See <a href="#neat" class="podlinkpod"
>&#34;neat&#34;</a> for more details.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Tracing_Tips"
>Tracing Tips</a></h2>

<p>You can add tracing to your own application code using the <a href="#trace_msg" class="podlinkpod"
>&#34;trace_msg&#34;</a> method.</p>

<p>It can sometimes be handy to compare trace files from two different runs of the same script. However using a tool like <code>diff</code> on the original log output doesn&#39;t work well because the trace file is full of object addresses that may differ on each run.</p>

<p>The DBI includes a handy utility called dbilogstrip that can be used to &#39;normalize&#39; the log content. It can be used as a filter like this:</p>

<pre class="sh_perl">    DBI_TRACE=2 perl yourscript.pl ...args1... 2&#62;&#38;1 | dbilogstrip &#62; dbitrace1.log
    DBI_TRACE=2 perl yourscript.pl ...args2... 2&#62;&#38;1 | dbilogstrip &#62; dbitrace2.log
    diff -u dbitrace1.log dbitrace2.log</pre>

<p>See <a href="/~timb/DBI-1.620/dbilogstrip.PL" class="podlinkpod"
>dbilogstrip</a> for more information.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DBI_ENVIRONMENT_VARIABLES"
>DBI ENVIRONMENT VARIABLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The DBI module recognizes a number of environment variables, but most of them should not be used most of the time. It is better to be explicit about what you are doing to avoid the need for environment variables, especially in a web serving system where web servers are stingy about which environment variables are available.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBI_DSN"
>DBI_DSN</a></h2>

<p>The DBI_DSN environment variable is used by DBI-&#62;connect if you do not specify a data source when you issue the connect. It should have a format such as &#34;dbi:Driver:databasename&#34;.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBI_DRIVER"
>DBI_DRIVER</a></h2>

<p>The DBI_DRIVER environment variable is used to fill in the database driver name in DBI-&#62;connect if the data source string starts &#34;dbi::&#34; (thereby omitting the driver). If DBI_DSN omits the driver name, DBI_DRIVER can fill the gap.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBI_AUTOPROXY"
>DBI_AUTOPROXY</a></h2>

<p>The DBI_AUTOPROXY environment variable takes a string value that starts &#34;dbi:Proxy:&#34; and is typically followed by &#34;hostname=...;port=...&#34;. It is used to alter the behaviour of DBI-&#62;connect. For full details, see DBI::Proxy documentation.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBI_USER"
>DBI_USER</a></h2>

<p>The DBI_USER environment variable takes a string value that is used as the user name if the DBI-&#62;connect call is given undef (as distinct from an empty string) as the username argument. Be wary of the security implications of using this.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBI_PASS"
>DBI_PASS</a></h2>

<p>The DBI_PASS environment variable takes a string value that is used as the password if the DBI-&#62;connect call is given undef (as distinct from an empty string) as the password argument. Be extra wary of the security implications of using this.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBI_DBNAME_(obsolete)"
>DBI_DBNAME (obsolete)</a></h2>

<p>The DBI_DBNAME environment variable takes a string value that is used only when the obsolescent style of DBI-&#62;connect (with driver name as fourth parameter) is used, and when no value is provided for the first (database name) argument.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBI_TRACE"
>DBI_TRACE</a></h2>

<p>The DBI_TRACE environment variable specifies the global default trace settings for the DBI at startup. Can also be used to direct trace output to a file. When the DBI is loaded it does:</p>

<pre class="sh_perl">  DBI-&#62;trace(split /=/, $ENV{DBI_TRACE}, 2) if $ENV{DBI_TRACE};</pre>

<p>So if <code>DBI_TRACE</code> contains an &#34;<code>=</code>&#34; character then what follows it is used as the name of the file to append the trace to.</p>

<p>output appended to that file. If the name begins with a number followed by an equal sign (<code>=</code>), then the number and the equal sign are stripped off from the name, and the number is used to set the trace level. For example:</p>

<pre class="sh_perl">  DBI_TRACE=1=dbitrace.log perl your_test_script.pl</pre>

<p>On Unix-like systems using a Bourne-like shell, you can do this easily on the command line:</p>

<pre class="sh_perl">  DBI_TRACE=2 perl your_test_script.pl</pre>

<p>See <a href="#TRACING" class="podlinkpod"
>&#34;TRACING&#34;</a> for more information.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="PERL_DBI_DEBUG_(obsolete)"
>PERL_DBI_DEBUG (obsolete)</a></h2>

<p>An old variable that should no longer be used; equivalent to DBI_TRACE.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBI_PROFILE"
>DBI_PROFILE</a></h2>

<p>The DBI_PROFILE environment variable can be used to enable profiling of DBI method calls. See <a href="/~timb/DBI-1.620/lib/DBI/Profile.pm" class="podlinkpod"
>DBI::Profile</a> for more information.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DBI_PUREPERL"
>DBI_PUREPERL</a></h2>

<p>The DBI_PUREPERL environment variable can be used to enable the use of DBI::PurePerl. See <a href="/~timb/DBI-1.620/lib/DBI/PurePerl.pm" class="podlinkpod"
>DBI::PurePerl</a> for more information.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WARNING_AND_ERROR_MESSAGES"
>WARNING AND ERROR MESSAGES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Fatal_Errors"
>Fatal Errors</a></h2>

<dl>
<dt><a name='Can'></a><a name="Can&#39;t_call_method_&#34;prepare&#34;_without_a_package_or_object_reference"
>Can&#39;t call method &#34;prepare&#34; without a package or object reference</a></dt>

<dd>
<p>The <code>$dbh</code> handle you&#39;re using to call <code>prepare</code> is probably undefined because the preceding <code>connect</code> failed. You should always check the return status of DBI methods, or use the <a href="#RaiseError" class="podlinkpod"
>&#34;RaiseError&#34;</a> attribute.</p>

<dt><a name='Can'></a><a name="Can&#39;t_call_method_&#34;execute&#34;_without_a_package_or_object_reference"
>Can&#39;t call method &#34;execute&#34; without a package or object reference</a></dt>

<dd>
<p>The <code>$sth</code> handle you&#39;re using to call <code>execute</code> is probably undefined because the preceding <code>prepare</code> failed. You should always check the return status of DBI methods, or use the <a href="#RaiseError" class="podlinkpod"
>&#34;RaiseError&#34;</a> attribute.</p>

<dt><a name='DBI'></a><a name="DBI/DBD_internal_version_mismatch"
>DBI/DBD internal version mismatch</a></dt>

<dd>
<p>The DBD driver module was built with a different version of DBI than the one currently being used. You should rebuild the DBD module under the current version of DBI.</p>

<p>(Some rare platforms require &#34;static linking&#34;. On those platforms, there may be an old DBI or DBD driver version actually embedded in the Perl executable being used.)</p>

<dt><a name='DBD'></a><a name="DBD_driver_has_not_implemented_the_AutoCommit_attribute"
>DBD driver has not implemented the AutoCommit attribute</a></dt>

<dd>
<p>The DBD driver implementation is incomplete. Consult the author.</p>

<dt><a name='Can'></a><a name="Can&#39;t_[sg]et_%s-&#62;{%s}:_unrecognised_attribute"
>Can&#39;t [sg]et %s-&#62;{%s}: unrecognised attribute</a></dt>

<dd>
<p>You attempted to set or get an unknown attribute of a handle. Make sure you have spelled the attribute name correctly; case is significant (e.g., &#34;Autocommit&#34; is not the same as &#34;AutoCommit&#34;).</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Pure-Perl_DBI"
>Pure-Perl DBI <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A pure-perl emulation of the DBI is included in the distribution for people using pure-perl drivers who, for whatever reason, can&#39;t install the compiled DBI. See <a href="/~timb/DBI-1.620/lib/DBI/PurePerl.pm" class="podlinkpod"
>DBI::PurePerl</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Driver_and_Database_Documentation"
>Driver and Database Documentation</a></h2>

<p>Refer to the documentation for the DBD driver that you are using.</p>

<p>Refer to the SQL Language Reference Manual for the database engine that you are using.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ODBC_and_SQL/CLI_Standards_Reference_Information"
>ODBC and SQL/CLI Standards Reference Information</a></h2>

<p>More detailed information about the semantics of certain DBI methods that are based on ODBC and SQL/CLI standards is available on-line via microsoft.com, for ODBC, and www.jtc1sc32.org for the SQL/CLI standard:</p>

<pre class="sh_perl"> DBI method        ODBC function     SQL/CLI Working Draft
 ----------        -------------     ---------------------
 column_info       SQLColumns        Page 124
 foreign_key_info  SQLForeignKeys    Page 163
 get_info          SQLGetInfo        Page 214
 primary_key_info  SQLPrimaryKeys    Page 254
 table_info        SQLTables         Page 294
 type_info         SQLGetTypeInfo    Page 239
 statistics_info   SQLStatistics</pre>

<p>To find documentation on the ODBC function you can use the MSDN search facility at:</p>

<pre class="sh_perl">    <a href="http://msdn.microsoft.com/Search" class="podlinkurl"
>http://msdn.microsoft.com/Search</a></pre>

<p>and search for something like <code>&#34;SQLColumns returns&#34;</code>.</p>

<p>And for SQL/CLI standard information on SQLColumns you&#39;d read page 124 of the (very large) SQL/CLI Working Draft available from:</p>

<pre class="sh_perl">  <a href="http://jtc1sc32.org/doc/N0701-0750/32N0744T.pdf" class="podlinkurl"
>http://jtc1sc32.org/doc/N0701-0750/32N0744T.pdf</a></pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Standards_Reference_Information"
>Standards Reference Information</a></h2>

<p>A hyperlinked, browsable version of the BNF syntax for SQL92 (plus Oracle 7 SQL and PL/SQL) is available here:</p>

<pre class="sh_perl">  <a href="http://cui.unige.ch/db-research/Enseignement/analyseinfo/SQL92/BNFindex.html" class="podlinkurl"
>http://cui.unige.ch/db-research/Enseignement/analyseinfo/SQL92/BNFindex.html</a></pre>

<p>A BNF syntax for SQL3 is available here:</p>

<pre class="sh_perl">  <a href="http://www.sqlstandards.org/SC32/WG3/Progression_Documents/Informal_working_drafts/iso-9075-2-1999.bnf" class="podlinkurl"
>http://www.sqlstandards.org/SC32/WG3/Progression_Documents/Informal_working_drafts/iso-9075-2-1999.bnf</a></pre>

<p>The following links provide further useful information about SQL. Some of these are rather dated now but may still be useful.</p>

<pre class="sh_perl">  <a href="http://www.jcc.com/SQLPages/jccs_sql.htm" class="podlinkurl"
>http://www.jcc.com/SQLPages/jccs_sql.htm</a>
  <a href="http://www.contrib.andrew.cmu.edu/~shadow/sql.html" class="podlinkurl"
>http://www.contrib.andrew.cmu.edu/~shadow/sql.html</a>
  <a href="http://www.altavista.com/query?q=sql+tutorial" class="podlinkurl"
>http://www.altavista.com/query?q=sql+tutorial</a></pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Books_and_Articles"
>Books and Articles</a></h2>

<p>Programming the Perl DBI, by Alligator Descartes and Tim Bunce. <a href="http://books.perl.org/book/154" class="podlinkurl"
>http://books.perl.org/book/154</a></p>

<p>Programming Perl 3rd Ed. by Larry Wall, Tom Christiansen &#38; Jon Orwant. <a href="http://books.perl.org/book/134" class="podlinkurl"
>http://books.perl.org/book/134</a></p>

<p>Learning Perl by Randal Schwartz. <a href="http://books.perl.org/book/101" class="podlinkurl"
>http://books.perl.org/book/101</a></p>

<p>Details of many other books related to perl can be found at <a href="http://books.perl.org" class="podlinkurl"
>http://books.perl.org</a></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Perl_Modules"
>Perl Modules</a></h2>

<p>Index of DBI related modules available from CPAN:</p>

<pre class="sh_perl"> <a href="http://search.cpan.org/search?mode=module&#38;query=DBIx%3A%3A" class="podlinkurl"
>http://search.cpan.org/search?mode=module&#38;query=DBIx%3A%3A</a>
 <a href="http://search.cpan.org/search?mode=doc&#38;query=DBI" class="podlinkurl"
>http://search.cpan.org/search?mode=doc&#38;query=DBI</a></pre>

<p>For a good comparison of RDBMS-OO mappers and some OO-RDBMS mappers (including <a href="/perldoc?Class%3A%3ADBI" class="podlinkpod"
>Class::DBI</a>, Alzabo, and <a href="/perldoc?DBIx%3A%3ARecordSet" class="podlinkpod"
>DBIx::RecordSet</a> in the former category and Tangram and SPOPS in the latter) see the Perl Object-Oriented Persistence project pages at:</p>

<pre class="sh_perl"> <a href="http://poop.sourceforge.net" class="podlinkurl"
>http://poop.sourceforge.net</a></pre>

<p>A similar page for Java toolkits can be found at:</p>

<pre class="sh_perl"> <a href="http://c2.com/cgi-bin/wiki?ObjectRelationalToolComparison" class="podlinkurl"
>http://c2.com/cgi-bin/wiki?ObjectRelationalToolComparison</a></pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Mailing_List"
>Mailing List</a></h2>

<p>The <i>dbi-users</i> mailing list is the primary means of communication among users of the DBI and its related modules. For details send email to:</p>

<pre class="sh_perl"> dbi-users-help@perl.org</pre>

<p>There are typically between 700 and 900 messages per month. You have to subscribe in order to be able to post. However you can opt for a &#39;post-only&#39; subscription.</p>

<p>Mailing list archives (of variable quality) are held at:</p>

<pre class="sh_perl"> <a href="http://groups.google.com/groups?group=perl.dbi.users" class="podlinkurl"
>http://groups.google.com/groups?group=perl.dbi.users</a>
 <a href="http://www.xray.mpe.mpg.de/mailing-lists/dbi/" class="podlinkurl"
>http://www.xray.mpe.mpg.de/mailing-lists/dbi/</a>
 <a href="http://www.mail-archive.com/dbi-users%40perl.org/" class="podlinkurl"
>http://www.mail-archive.com/dbi-users%40perl.org/</a></pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Assorted_Related_WWW_Links"
>Assorted Related WWW Links</a></h2>

<p>The DBI &#34;Home Page&#34;:</p>

<pre class="sh_perl"> <a href="http://dbi.perl.org/" class="podlinkurl"
>http://dbi.perl.org/</a></pre>

<p>Other DBI related links:</p>

<pre class="sh_perl"> <a href="http://tegan.deltanet.com/~phlip/DBUIdoc.html" class="podlinkurl"
>http://tegan.deltanet.com/~phlip/DBUIdoc.html</a>
 <a href="http://dc.pm.org/perl_db.html" class="podlinkurl"
>http://dc.pm.org/perl_db.html</a>
 <a href="http://wdvl.com/Authoring/DB/Intro/toc.html" class="podlinkurl"
>http://wdvl.com/Authoring/DB/Intro/toc.html</a>
 <a href="http://www.hotwired.com/webmonkey/backend/tutorials/tutorial1.html" class="podlinkurl"
>http://www.hotwired.com/webmonkey/backend/tutorials/tutorial1.html</a>
 <a href="http://bumppo.net/lists/macperl/1999/06/msg00197.html" class="podlinkurl"
>http://bumppo.net/lists/macperl/1999/06/msg00197.html</a>
 <a href="http://www.perlmonks.org/?node=DBI%20recipes" class="podlinkurl"
>http://www.perlmonks.org/?node=DBI%20recipes</a>
 <a href="http://www.perlmonks.org/?node=Speeding%20up%20the%20DBI" class="podlinkurl"
>http://www.perlmonks.org/?node=Speeding%20up%20the%20DBI</a></pre>

<p>Other database related links:</p>

<pre class="sh_perl"> <a href="http://www.jcc.com/sql_stnd.html" class="podlinkurl"
>http://www.jcc.com/sql_stnd.html</a>
 <a href="http://cuiwww.unige.ch/OSG/info/FreeDB/FreeDB.home.html" class="podlinkurl"
>http://cuiwww.unige.ch/OSG/info/FreeDB/FreeDB.home.html</a>
 <a href="http://www.connectionstrings.com/" class="podlinkurl"
>http://www.connectionstrings.com/</a></pre>

<p>Security, especially the &#34;SQL Injection&#34; attack:</p>

<pre class="sh_perl"> <a href="http://www.ngssoftware.com/research/papers.html" class="podlinkurl"
>http://www.ngssoftware.com/research/papers.html</a>
 <a href="http://www.ngssoftware.com/papers/advanced_sql_injection.pdf" class="podlinkurl"
>http://www.ngssoftware.com/papers/advanced_sql_injection.pdf</a>
 <a href="http://www.ngssoftware.com/papers/more_advanced_sql_injection.pdf" class="podlinkurl"
>http://www.ngssoftware.com/papers/more_advanced_sql_injection.pdf</a>
 <a href="http://www.esecurityplanet.com/trends/article.php/2243461" class="podlinkurl"
>http://www.esecurityplanet.com/trends/article.php/2243461</a>
 <a href="http://www.spidynamics.com/papers/SQLInjectionWhitePaper.pdf" class="podlinkurl"
>http://www.spidynamics.com/papers/SQLInjectionWhitePaper.pdf</a>
 <a href="http://www.imperva.com/application_defense_center/white_papers/blind_sql_server_injection.html" class="podlinkurl"
>http://www.imperva.com/application_defense_center/white_papers/blind_sql_server_injection.html</a>
 <a href="http://online.securityfocus.com/infocus/1644" class="podlinkurl"
>http://online.securityfocus.com/infocus/1644</a></pre>

<p>Commercial and Data Warehouse Links</p>

<pre class="sh_perl"> <a href="http://www.dwinfocenter.org" class="podlinkurl"
>http://www.dwinfocenter.org</a>
 <a href="http://www.datawarehouse.com" class="podlinkurl"
>http://www.datawarehouse.com</a>
 <a href="http://www.datamining.org" class="podlinkurl"
>http://www.datamining.org</a>
 <a href="http://www.olapcouncil.org" class="podlinkurl"
>http://www.olapcouncil.org</a>
 <a href="http://www.idwa.org" class="podlinkurl"
>http://www.idwa.org</a>
 <a href="http://www.knowledgecenters.org/dwcenter.asp" class="podlinkurl"
>http://www.knowledgecenters.org/dwcenter.asp</a></pre>

<p>Recommended Perl Programming Links</p>

<pre class="sh_perl"> <a href="http://language.perl.com/style/" class="podlinkurl"
>http://language.perl.com/style/</a></pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="FAQ"
>FAQ</a></h2>

<p>See <a href="http://faq.dbi-support.com/" class="podlinkurl"
>http://faq.dbi-support.com/</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>DBI by Tim Bunce, <a href="http://www.tim.bunce.name" class="podlinkurl"
>http://www.tim.bunce.name</a></p>

<p>This pod text by Tim Bunce, J. Douglas Dunlop, Jonathan Leffler and others. Perl by Larry Wall and the <code>perl5-porters</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The DBI module is Copyright (c) 1994-2012 Tim Bunce. Ireland. All rights reserved.</p>

<p>You may distribute under the terms of either the GNU General Public License or the Artistic License, as specified in the Perl 5.10.0 README file.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT_/_WARRANTY"
>SUPPORT / WARRANTY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The DBI is free Open Source software. IT COMES WITHOUT WARRANTY OF ANY KIND.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Support"
>Support</a></h2>

<p>My consulting company, Data Plan Services, offers annual and multi-annual support contracts for the DBI. These provide sustained support for DBI development, and sustained value for you in return. Contact me for details.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Sponsor_Enhancements"
>Sponsor Enhancements</a></h2>

<p>The DBI Roadmap is available at <a href="http://search.cpan.org/~timb/DBI/Roadmap.pod" class="podlinkurl"
>http://search.cpan.org/~timb/DBI/Roadmap.pod</a></p>

<p>If your company would benefit from a specific new DBI feature, please consider sponsoring its development. Work is performed rapidly, and usually on a fixed-price payment-on-delivery basis. Contact me for details.</p>

<p>Using such targeted financing allows you to contribute to DBI development, and rapidly get something specific and valuable in return.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACKNOWLEDGEMENTS"
>ACKNOWLEDGEMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>I would like to acknowledge the valuable contributions of the many people I have worked with on the DBI project, especially in the early years (1992-1994). In no particular order: Kevin Stock, Buzz Moschetti, Kurt Andersen, Ted Lemon, William Hails, Garth Kennedy, Michael Peppler, Neil S. Briscoe, Jeff Urlwin, David J. Hughes, Jeff Stander, Forrest D Whitcher, Larry Wall, Jeff Fried, Roy Johnson, Paul Hudson, Georg Rehfeld, Steve Sizemore, Ron Pool, Jon Meek, Tom Christiansen, Steve Baumgarten, Randal Schwartz, and a whole lot more.</p>

<p>Then, of course, there are the poor souls who have struggled through untold and undocumented obstacles to actually implement DBI drivers. Among their ranks are Jochen Wiedmann, Alligator Descartes, Jonathan Leffler, Jeff Urlwin, Michael Peppler, Henrik Tougaard, Edwin Pratomo, Davide Migliavacca, Jan Pazdziora, Peter Haworth, Edmund Mergl, Steve Williams, Thomas Lowery, and Phlip Plumlee. Without them, the DBI would not be the practical reality it is today. I&#39;m also especially grateful to Alligator Descartes for starting work on the first edition of the &#34;Programming the Perl DBI&#34; book and letting me jump on board.</p>

<p>The DBI and DBD::Oracle were originally developed while I was Technical Director (CTO) of Ingeneering in the UK (<a href="http://www.ig.co.uk" class="podlinkurl"
>http://www.ig.co.uk</a>) (formerly known as the Paul Ingram Group). So I&#39;d especially like to thank Paul for his generosity and vision in supporting this work for many years.</p>

<p>A couple of specific DBI features have been sponsored by enlightened companies:</p>

<p>The development of the swap_inner_handle() method was sponsored by BizRate.com (<a href="http://BizRate.com" class="podlinkurl"
>http://BizRate.com</a>)</p>

<p>The development of DBD::Gofer and related modules was sponsored by Shopzilla.com (<a href="http://Shopzilla.com" class="podlinkurl"
>http://Shopzilla.com</a>), where I currently work.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONTRIBUTING"
>CONTRIBUTING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>As you can see above, many people have contributed to the DBI and drivers in many ways over many years.</p>

<p>If you&#39;d like to help then see <a href="http://dbi.perl.org/contributing" class="podlinkurl"
>http://dbi.perl.org/contributing</a> and <a href="http://search.cpan.org/~timb/DBI/Roadmap.pod" class="podlinkurl"
>http://search.cpan.org/~timb/DBI/Roadmap.pod</a></p>

<p>If you&#39;d like the DBI to do something new or different then a good way to make that happen is to do it yourself and send me a patch to the source code that shows the changes. (But read &#34;Speak before you patch&#34; below.)</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Browsing_the_source_code_repository"
>Browsing the source code repository</a></h2>

<p>Use <a href="http://svn.perl.org/modules/dbi/trunk" class="podlinkurl"
>http://svn.perl.org/modules/dbi/trunk</a> (basic) or <a href="http://svn.perl.org/viewcvs/modules/" class="podlinkurl"
>http://svn.perl.org/viewcvs/modules/</a> (more useful)</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="How_to_create_a_patch_using_Subversion"
>How to create a patch using Subversion</a></h2>

<p>The DBI source code is maintained using Subversion (a replacement for CVS, see <a href="http://subversion.tigris.org/" class="podlinkurl"
>http://subversion.tigris.org/</a>). To access the source you&#39;ll need to install a Subversion client. Then, to get the source code, do:</p>

<pre class="sh_perl">  svn checkout <a href="http://svn.perl.org/modules/dbi/trunk" class="podlinkurl"
>http://svn.perl.org/modules/dbi/trunk</a></pre>

<p>If it prompts for a username and password use your perl.org account if you have one, else just &#39;guest&#39; and &#39;guest&#39;. The source code will be in a new subdirectory called <code>trunk</code>.</p>

<p>To keep informed about changes to the source you can send an empty email to svn-commit-modules-dbi-subscribe@perl.org after which you&#39;ll get an email with the change log message and diff of each change checked-in to the source.</p>

<p>After making your changes you can generate a patch file, but before you do, make sure your source is still up to date using:</p>

<pre class="sh_perl">  svn update</pre>

<p>If you get any conflicts reported you&#39;ll need to fix them first. Then generate the patch file from within the <code>trunk</code> directory using:</p>

<pre class="sh_perl">  svn diff &#62; foo.patch</pre>

<p>Read the patch file, as a sanity check, and then email it to dbi-dev@perl.org.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="How_to_create_a_patch_without_Subversion"
>How to create a patch without Subversion</a></h2>

<p>Unpack a fresh copy of the distribution:</p>

<pre class="sh_perl">  tar xfz DBI-1.40.tar.gz</pre>

<p>Rename the newly created top level directory:</p>

<pre class="sh_perl">  mv DBI-1.40 DBI-1.40.your_foo</pre>

<p>Edit the contents of DBI-1.40.your_foo/* till it does what you want.</p>

<p>Test your changes and then remove all temporary files:</p>

<pre class="sh_perl">  make test &#38;&#38; make distclean</pre>

<p>Go back to the directory you originally unpacked the distribution:</p>

<pre class="sh_perl">  cd ..</pre>

<p>Unpack <i>another</i> copy of the original distribution you started with:</p>

<pre class="sh_perl">  tar xfz DBI-1.40.tar.gz</pre>

<p>Then create a patch file by performing a recursive <code>diff</code> on the two top level directories:</p>

<pre class="sh_perl">  diff -r -u DBI-1.40 DBI-1.40.your_foo &#62; DBI-1.40.your_foo.patch</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Speak_before_you_patch"
>Speak before you patch</a></h2>

<p>For anything non-trivial or possibly controversial it&#39;s a good idea to discuss (on dbi-dev@perl.org) the changes you propose before actually spending time working on them. Otherwise you run the risk of them being rejected because they don&#39;t fit into some larger plans you may not be aware of.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TRANSLATIONS"
>TRANSLATIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A German translation of this manual (possibly slightly out of date) is available, thanks to O&#39;Reilly, at:</p>

<pre class="sh_perl">  <a href="http://www.oreilly.de/catalog/perldbiger/" class="podlinkurl"
>http://www.oreilly.de/catalog/perldbiger/</a></pre>

<p>Some other translations:</p>

<pre class="sh_perl"> <a href="http://cronopio.net/perl/" class="podlinkurl"
>http://cronopio.net/perl/</a>                              - Spanish
 <a href="http://member.nifty.ne.jp/hippo2000/dbimemo.htm" class="podlinkurl"
>http://member.nifty.ne.jp/hippo2000/dbimemo.htm</a>        - Japanese</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TRAINING"
>TRAINING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>References to DBI related training resources. No recommendation implied.</p>

<pre class="sh_perl">  <a href="http://www.treepax.co.uk/" class="podlinkurl"
>http://www.treepax.co.uk/</a>
  <a href="http://www.keller.com/dbweb/" class="podlinkurl"
>http://www.keller.com/dbweb/</a></pre>

<p>(If you offer professional DBI related training services, please send me your details so I can add them here.)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OTHER_RELATED_WORK_AND_PERL_MODULES"
>OTHER RELATED WORK AND PERL MODULES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='Apache'></a><a name="Apache::DBI_by_E.Mergl@bawue.de"
>Apache::DBI by E.Mergl@bawue.de</a></dt>

<dd>
<p>To be used with the Apache daemon together with an embedded Perl interpreter like <code>mod_perl</code>. Establishes a database connection which remains open for the lifetime of the HTTP daemon. This way the CGI connect and disconnect for every database access becomes superfluous.</p>

<dt><a name='SQL'></a><a name="SQL_Parser"
>SQL Parser</a></dt>

<dd>
<p>See also the <a href="/perldoc?SQL%3A%3AStatement" class="podlinkpod"
>SQL::Statement</a> module, SQL parser and engine.</p>
</dd>
</dl>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78232 Uploads, 24718 Distributions
106021 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Thu Apr 26 11:55:34 2012 GMT (0.639699935913086) @cpansearch1 -->
 </body>
</html>
