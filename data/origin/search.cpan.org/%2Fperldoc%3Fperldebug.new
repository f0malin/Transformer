<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>perldebug - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","perl",3]);
    _gaq.push(["_setCustomVar",5,"Release","perl-5.14.2",3]);
    _gaq.push(["_setCustomVar",4,"Document","perldebug",3]);
    _gaq.push(["_setCustomVar",1,"Author","FLORA",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?perldebug">permalink</a></div>
  <a href="/~flora/">Florian Ragwitz</a> &gt;
  <a href="/~flora/perl-5.14.2/">perl-5.14.2</a> &gt;
  perldebug
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/fd2bdaaefe41908133793d1ddf38f75d?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/F/FL/FLORA/perl-5.14.2.tar.gz">perl-5.14.2.tar.gz</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~FLORA/perl-5.14.2/pod/perldebug.pod">Annotate this POD
</a></p>
     <p style="text-align:right"><a href="http://www.perl.org/">Website</a></p>

<div style="float:right">

</div>
</div>
<span class="noprint">
  <a href="/src/FLORA/perl-5.14.2/pod/perldebug.pod">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~abigail/perl/pod/perldebug.pod">perl-5.15.9</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME  </a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#The_Perl_Debugger'>The Perl Debugger</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Calling_the_Debugger'>Calling the Debugger</a>
    <li class='indexItem indexItem2'><a href='#Debugger_Commands'>Debugger Commands</a>
    <li class='indexItem indexItem2'><a href='#Configurable_Options'>Configurable Options</a>
    <li class='indexItem indexItem2'><a href='#Debugger_Input/Output'>Debugger Input/Output</a>
    <li class='indexItem indexItem2'><a href='#Debugging_Compile-Time_Statements'>Debugging Compile-Time Statements</a>
    <li class='indexItem indexItem2'><a href='#Debugger_Customization'>Debugger Customization</a>
    <li class='indexItem indexItem2'><a href='#Readline_Support_/_History_in_the_Debugger'>Readline Support / History in the Debugger</a>
    <li class='indexItem indexItem2'><a href='#Editor_Support_for_Debugging'>Editor Support for Debugging</a>
    <li class='indexItem indexItem2'><a href='#The_Perl_Profiler'>The Perl Profiler   </a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Debugging_Regular_Expressions'>Debugging Regular Expressions   </a>
  <li class='indexItem indexItem1'><a href='#Debugging_Memory_Usage'>Debugging Memory Usage </a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <!--
	INDEX: debug
--> <!--
	INDEX: debugger
--> <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perldebug - Perl debugging</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>First of all,
have you tried using the <b>-w</b> switch?</p>

<p>If you&#39;re new to the Perl debugger,
you may prefer to read <a href="/~flora/perl-5.14.2/pod/perldebtut.pod" class="podlinkpod"
>perldebtut</a>,
which is a tutorial introduction to the debugger.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="The_Perl_Debugger"
>The Perl Debugger <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you invoke Perl with the <b>-d</b> switch,
your script runs under the Perl source debugger.
This works like an interactive Perl environment,
prompting for debugger commands that let you examine source code,
set breakpoints,
get stack backtraces,
change the values of variables,
etc.
This is so convenient that you often fire up the debugger all by itself just to test out Perl constructs interactively to see what they do.
For example: <!--
	INDEX: -d
--></p>

<pre class="sh_perl">    $ perl -d -e 42</pre>

<p>In Perl, the debugger is not a separate program the way it usually is in the typical compiled environment. Instead, the <b>-d</b> flag tells the compiler to insert source information into the parse trees it&#39;s about to hand off to the interpreter. That means your code must first compile correctly for the debugger to work on it. Then when the interpreter starts up, it preloads a special Perl library file containing the debugger.</p>

<p>The program will halt <i>right before</i> the first run-time executable statement (but see below regarding compile-time statements) and ask you to enter a debugger command. Contrary to popular expectations, whenever the debugger halts and shows you a line of code, it always displays the line it&#39;s <i>about</i> to execute, rather than the one it has just executed.</p>

<p>Any command not recognized by the debugger is directly executed (<code>eval</code>&#39;d) as Perl code in the current package. (The debugger uses the DB package for keeping its own state information.)</p>

<p>Note that the said <code>eval</code> is bound by an implicit scope. As a result any newly introduced lexical variable or any modified capture buffer content is lost after the eval. The debugger is a nice environment to learn Perl, but if you interactively experiment using material which should be in the same scope, stuff it in one line.</p>

<p>For any text entered at the debugger prompt, leading and trailing whitespace is first stripped before further processing. If a debugger command coincides with some function in your own program, merely precede the function with something that doesn&#39;t look like a debugger command, such as a leading <code>;</code> or perhaps a <code>+</code>, or by wrapping it with parentheses or braces.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Calling_the_Debugger"
>Calling the Debugger</a></h2>

<p>There are several ways to call the debugger:</p>

<dl>
<dt><a name='perl'></a><a name="perl_-d_program_name"
>perl -d program_name</a></dt>

<dd>
<p>On the given program identified by <code>program_name</code>.</p>

<dt><a name='perl'></a><a name="perl_-d_-e_0"
>perl -d -e 0</a></dt>

<dd>
<p>Interactively supply an arbitrary <code>expression</code> using <code>-e</code>.</p>

<dt><a name='perl'></a><a name="perl_-d:Ptkdb_program_name"
>perl -d:Ptkdb program_name</a></dt>

<dd>
<p>Debug a given program via the <code>Devel::Ptkdb</code> GUI.</p>

<dt><a name='perl'></a><a name="perl_-dt_threaded_program_name"
>perl -dt threaded_program_name</a></dt>

<dd>
<p>Debug a given program using threads (experimental).</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Debugger_Commands"
>Debugger Commands</a></h2>

<p>The interactive debugger understands the following commands:</p>

<dl>
<dt><a name='h'></a><a name="h"
>h <!--
	INDEX: debugger command, h
--></a></dt>

<dd>
<p>Prints out a summary help message</p>

<dt><a name='h'></a><a name="h_[command]"
>h [command]</a></dt>

<dd>
<p>Prints out a help message for the given debugger command.</p>

<dt><a name='h'></a><a name="h_h"
>h h</a></dt>

<dd>
<p>The special argument of <code>h h</code> produces the entire help page, which is quite long.</p>

<p>If the output of the <code>h h</code> command (or any command, for that matter) scrolls past your screen, precede the command with a leading pipe symbol so that it&#39;s run through your pager, as in</p>

<pre class="sh_perl">    DB&#62; |h h</pre>

<p>You may change the pager which is used via <code>o pager=...</code> command.</p>

<dt><a name='p'></a><a name="p_expr"
>p expr <!--
	INDEX: debugger command, p
--></a></dt>

<dd>
<p>Same as <code>print {$DB::OUT} expr</code> in the current package. In particular, because this is just Perl&#39;s own <code>print</code> function, this means that nested data structures and objects are not dumped, unlike with the <code>x</code> command.</p>

<p>The <code>DB::OUT</code> filehandle is opened to <em>/dev/tty</em>, regardless of where STDOUT may be redirected to.</p>

<dt><a name='x'></a><a name="x_[maxdepth]_expr"
>x [maxdepth] expr <!--
	INDEX: debugger command, x
--></a></dt>

<dd>
<p>Evaluates its expression in list context and dumps out the result in a pretty-printed fashion. Nested data structures are printed out recursively, unlike the real <code>print</code> function in Perl. When dumping hashes, you&#39;ll probably prefer &#39;x \%h&#39; rather than &#39;x %h&#39;. See <a href="/perldoc?Dumpvalue" class="podlinkpod"
>Dumpvalue</a> if you&#39;d like to do this yourself.</p>

<p>The output format is governed by multiple options described under <a href="#Configurable_Options" class="podlinkpod"
>&#34;Configurable Options&#34;</a>.</p>

<p>If the <code>maxdepth</code> is included, it must be a numeral <i>N</i>; the value is dumped only <i>N</i> levels deep, as if the <code>dumpDepth</code> option had been temporarily set to <i>N</i>.</p>

<dt><a name='V'></a><a name="V_[pkg_[vars]]"
>V [pkg [vars]] <!--
	INDEX: debugger command, V
--></a></dt>

<dd>
<p>Display all (or some) variables in package (defaulting to <code>main</code>) using a data pretty-printer (hashes show their keys and values so you see what&#39;s what, control characters are made printable, etc.). Make sure you don&#39;t put the type specifier (like <code>$</code>) there, just the symbol names, like this:</p>

<pre class="sh_perl">    V DB filename line</pre>

<p>Use <code>~pattern</code> and <code>!pattern</code> for positive and negative regexes.</p>

<p>This is similar to calling the <code>x</code> command on each applicable var.</p>

<dt><a name='X'></a><a name="X_[vars]"
>X [vars] <!--
	INDEX: debugger command, X
--></a></dt>

<dd>
<p>Same as <code>V currentpackage [vars]</code>.</p>

<dt><a name='y'></a><a name="y_[level_[vars]]"
>y [level [vars]] <!--
	INDEX: debugger command, y
--></a></dt>

<dd>
<p>Display all (or some) lexical variables (mnemonic: <code>mY</code> variables) in the current scope or <i>level</i> scopes higher. You can limit the variables that you see with <i>vars</i> which works exactly as it does for the <code>V</code> and <code>X</code> commands. Requires the <code>PadWalker</code> module version 0.08 or higher; will warn if this isn&#39;t installed. Output is pretty-printed in the same style as for <code>V</code> and the format is controlled by the same options.</p>

<dt><a name='T'></a><a name="T"
>T <!--
	INDEX: debugger command, T
--> <!--
	INDEX: backtrace
--> <!--
	INDEX: stack, backtrace
--></a></dt>

<dd>
<p>Produce a stack backtrace. See below for details on its output.</p>

<dt><a name='s'></a><a name="s_[expr]"
>s [expr] <!--
	INDEX: debugger command, s
--> <!--
	INDEX: step
--></a></dt>

<dd>
<p>Single step. Executes until the beginning of another statement, descending into subroutine calls. If an expression is supplied that includes function calls, it too will be single-stepped.</p>

<dt><a name='n'></a><a name="n_[expr]"
>n [expr] <!--
	INDEX: debugger command, n
--></a></dt>

<dd>
<p>Next. Executes over subroutine calls, until the beginning of the next statement. If an expression is supplied that includes function calls, those functions will be executed with stops before each statement.</p>

<dt><a name='r'></a><a name="r"
>r <!--
	INDEX: debugger command, r
--></a></dt>

<dd>
<p>Continue until the return from the current subroutine. Dump the return value if the <code>PrintRet</code> option is set (default).</p>

<dt><a name='CR'></a><a name="&#60;CR&#62;"
>&#60;CR&#62;</a></dt>

<dd>
<p>Repeat last <code>n</code> or <code>s</code> command.</p>

<dt><a name='c'></a><a name="c_[line|sub]"
>c [line|sub] <!--
	INDEX: debugger command, c
--></a></dt>

<dd>
<p>Continue, optionally inserting a one-time-only breakpoint at the specified line or subroutine.</p>

<dt><a name='l'></a><a name="l"
>l <!--
	INDEX: debugger command, l
--></a></dt>

<dd>
<p>List next window of lines.</p>

<dt><a name='l'></a><a name="l_min+incr"
>l min+incr</a></dt>

<dd>
<p>List <code>incr+1</code> lines starting at <code>min</code>.</p>

<dt><a name='l'></a><a name="l_min-max"
>l min-max</a></dt>

<dd>
<p>List lines <code>min</code> through <code>max</code>. <code>l -</code> is synonymous to <code>-</code>.</p>

<dt><a name='l'></a><a name="l_line"
>l line</a></dt>

<dd>
<p>List a single line.</p>

<dt><a name='l'></a><a name="l_subname"
>l subname</a></dt>

<dd>
<p>List first window of lines from subroutine. <i>subname</i> may be a variable that contains a code reference.</p>

<dt><a name="-"
>- <!--
	INDEX: debugger command, -
--></a></dt>

<dd>
<p>List previous window of lines.</p>

<dt><a name='v'></a><a name="v_[line]"
>v [line] <!--
	INDEX: debugger command, v
--></a></dt>

<dd>
<p>View a few lines of code around the current line.</p>

<dt><a name="."
>. <!--
	INDEX: debugger command, .
--></a></dt>

<dd>
<p>Return the internal debugger pointer to the line last executed, and print out that line.</p>

<dt><a name='f'></a><a name="f_filename"
>f filename <!--
	INDEX: debugger command, f
--></a></dt>

<dd>
<p>Switch to viewing a different file or <code>eval</code> statement. If <i>filename</i> is not a full pathname found in the values of %INC, it is considered a regex.</p>

<p><code>eval</code>ed strings (when accessible) are considered to be filenames: <code>f (eval 7)</code> and <code>f eval 7\b</code> access the body of the 7th <code>eval</code>ed string (in the order of execution). The bodies of the currently executed <code>eval</code> and of <code>eval</code>ed strings that define subroutines are saved and thus accessible.</p>

<dt><a name='pattern'></a><a name="/pattern/"
>/pattern/</a></dt>

<dd>
<p>Search forwards for pattern (a Perl regex); final / is optional. The search is case-insensitive by default.</p>

<dt><a name='pattern'></a><a name="?pattern?"
>?pattern?</a></dt>

<dd>
<p>Search backwards for pattern; final ? is optional. The search is case-insensitive by default.</p>

<dt><a name='L'></a><a name="L_[abw]"
>L [abw] <!--
	INDEX: debugger command, L
--></a></dt>

<dd>
<p>List (default all) actions, breakpoints and watch expressions</p>

<dt><a name='S'></a><a name="S_[[!]regex]"
>S [[!]regex] <!--
	INDEX: debugger command, S
--></a></dt>

<dd>
<p>List subroutine names [not] matching the regex.</p>

<dt><a name='t'></a><a name="t"
>t <!--
	INDEX: debugger command, t
--></a></dt>

<dd>
<p>Toggle trace mode (see also the <code>AutoTrace</code> option).</p>

<dt><a name='t'></a><a name="t_expr"
>t expr <!--
	INDEX: debugger command, t
--></a></dt>

<dd>
<p>Trace through execution of <code>expr</code>. See <a href="/~flora/perl-5.14.2/pod/perldebguts.pod#Frame_Listing_Output_Examples" class="podlinkpod"
>&#34;Frame Listing Output Examples&#34; in perldebguts</a> for examples.</p>

<dt><a name='b'></a><a name="b"
>b <!--
	INDEX: breakpoint
--> <!--
	INDEX: debugger command, b
--></a></dt>

<dd>
<p>Sets breakpoint on current line</p>

<dt><a name='b'></a><a name="b_[line]_[condition]"
>b [line] [condition] <!--
	INDEX: breakpoint
--> <!--
	INDEX: debugger command, b
--></a></dt>

<dd>
<p>Set a breakpoint before the given line. If a condition is specified, it&#39;s evaluated each time the statement is reached: a breakpoint is taken only if the condition is true. Breakpoints may only be set on lines that begin an executable statement. Conditions don&#39;t use <code>if</code>:</p>

<pre class="sh_perl">    b 237 $x &#62; 30
    b 237 ++$count237 &#60; 11
    b 33 /pattern/i</pre>

<dt><a name='b'></a><a name="b_subname_[condition]"
>b subname [condition] <!--
	INDEX: breakpoint
--> <!--
	INDEX: debugger command, b
--></a></dt>

<dd>
<p>Set a breakpoint before the first line of the named subroutine. <i>subname</i> may be a variable containing a code reference (in this case <i>condition</i> is not supported).</p>

<dt><a name='b'></a><a name="b_postpone_subname_[condition]"
>b postpone subname [condition] <!--
	INDEX: breakpoint
--> <!--
	INDEX: debugger command, b
--></a></dt>

<dd>
<p>Set a breakpoint at first line of subroutine after it is compiled.</p>

<dt><a name='b'></a><a name="b_load_filename"
>b load filename <!--
	INDEX: breakpoint
--> <!--
	INDEX: debugger command, b
--></a></dt>

<dd>
<p>Set a breakpoint before the first executed line of the <i>filename</i>, which should be a full pathname found amongst the %INC values.</p>

<dt><a name='b'></a><a name="b_compile_subname"
>b compile subname <!--
	INDEX: breakpoint
--> <!--
	INDEX: debugger command, b
--></a></dt>

<dd>
<p>Sets a breakpoint before the first statement executed after the specified subroutine is compiled.</p>

<dt><a name='B'></a><a name="B_line"
>B line <!--
	INDEX: breakpoint
--> <!--
	INDEX: debugger command, B
--></a></dt>

<dd>
<p>Delete a breakpoint from the specified <i>line</i>.</p>

<dt><a name='B'></a><a name="B_*"
>B * <!--
	INDEX: breakpoint
--> <!--
	INDEX: debugger command, B
--></a></dt>

<dd>
<p>Delete all installed breakpoints.</p>

<dt><a name='a'></a><a name="a_[line]_command"
>a [line] command <!--
	INDEX: debugger command, a
--></a></dt>

<dd>
<p>Set an action to be done before the line is executed. If <i>line</i> is omitted, set an action on the line about to be executed. The sequence of steps taken by the debugger is</p>

<pre class="sh_perl">  1. check for a breakpoint at this line
  2. print the line if necessary (tracing)
  3. do any actions associated with that line
  4. prompt user if at a breakpoint or in single-step
  5. evaluate line</pre>

<p>For example, this will print out $foo every time line 53 is passed:</p>

<pre class="sh_perl">    a 53 print &#34;DB FOUND $foo\n&#34;</pre>

<dt><a name='A'></a><a name="A_line"
>A line <!--
	INDEX: debugger command, A
--></a></dt>

<dd>
<p>Delete an action from the specified line.</p>

<dt><a name='A'></a><a name="A_*"
>A * <!--
	INDEX: debugger command, A
--></a></dt>

<dd>
<p>Delete all installed actions.</p>

<dt><a name='w'></a><a name="w_expr"
>w expr <!--
	INDEX: debugger command, w
--></a></dt>

<dd>
<p>Add a global watch-expression. Whenever a watched global changes the debugger will stop and display the old and new values.</p>

<dt><a name='W'></a><a name="W_expr"
>W expr <!--
	INDEX: debugger command, W
--></a></dt>

<dd>
<p>Delete watch-expression</p>

<dt><a name='W'></a><a name="W_*"
>W * <!--
	INDEX: debugger command, W
--></a></dt>

<dd>
<p>Delete all watch-expressions.</p>

<dt><a name='o'></a><a name="o"
>o <!--
	INDEX: debugger command, o
--></a></dt>

<dd>
<p>Display all options.</p>

<dt><a name='o'></a><a name="o_booloption_..."
>o booloption ... <!--
	INDEX: debugger command, o
--></a></dt>

<dd>
<p>Set each listed Boolean option to the value <code>1</code>.</p>

<dt><a name='o'></a><a name="o_anyoption?_..."
>o anyoption? ... <!--
	INDEX: debugger command, o
--></a></dt>

<dd>
<p>Print out the value of one or more options.</p>

<dt><a name='o'></a><a name="o_option=value_..."
>o option=value ... <!--
	INDEX: debugger command, o
--></a></dt>

<dd>
<p>Set the value of one or more options. If the value has internal whitespace, it should be quoted. For example, you could set <code>o pager=&#34;less -MQeicsNfr&#34;</code> to call <b>less</b> with those specific options. You may use either single or double quotes, but if you do, you must escape any embedded instances of same sort of quote you began with, as well as any escaping any escapes that immediately precede that quote but which are not meant to escape the quote itself. In other words, you follow single-quoting rules irrespective of the quote; eg: <code>o option=&#39;this isn\&#39;t bad&#39;</code> or <code>o option=&#34;She said, \&#34;Isn&#39;t it?\&#34;&#34;</code>.</p>

<p>For historical reasons, the <code>=value</code> is optional, but defaults to 1 only where it is safe to do so--that is, mostly for Boolean options. It is always better to assign a specific value using <code>=</code>. The <code>option</code> can be abbreviated, but for clarity probably should not be. Several options can be set together. See <a href="#Configurable_Options" class="podlinkpod"
>&#34;Configurable Options&#34;</a> for a list of these.</p>

<dt><a name="&#60;_?"
>&#60; ? <!--
	INDEX: debugger command, &#60;
--></a></dt>

<dd>
<p>List out all pre-prompt Perl command actions.</p>

<dt><a name='command'></a><a name="&#60;_[_command_]"
>&#60; [ command ] <!--
	INDEX: debugger command, &#60;
--></a></dt>

<dd>
<p>Set an action (Perl command) to happen before every debugger prompt. A multi-line command may be entered by backslashing the newlines.</p>

<dt><a name="&#60;_*"
>&#60; * <!--
	INDEX: debugger command, &#60;
--></a></dt>

<dd>
<p>Delete all pre-prompt Perl command actions.</p>

<dt><a name='command'></a><a name="&#60;&#60;_command"
>&#60;&#60; command <!--
	INDEX: debugger command, &#60;&#60;
--></a></dt>

<dd>
<p>Add an action (Perl command) to happen before every debugger prompt. A multi-line command may be entered by backwhacking the newlines.</p>

<dt><a name="&#62;_?"
>&#62; ? <!--
	INDEX: debugger command, &#62;
--></a></dt>

<dd>
<p>List out post-prompt Perl command actions.</p>

<dt><a name='command'></a><a name="&#62;_command"
>&#62; command <!--
	INDEX: debugger command, &#62;
--></a></dt>

<dd>
<p>Set an action (Perl command) to happen after the prompt when you&#39;ve just given a command to return to executing the script. A multi-line command may be entered by backslashing the newlines (we bet you couldn&#39;t have guessed this by now).</p>

<dt><a name="&#62;_*"
>&#62; * <!--
	INDEX: debugger command, &#62;
--></a></dt>

<dd>
<p>Delete all post-prompt Perl command actions.</p>

<dt><a name='command'></a><a name="&#62;&#62;_command"
>&#62;&#62; command <!--
	INDEX: debugger command, &#62;&#62;
--></a></dt>

<dd>
<p>Adds an action (Perl command) to happen after the prompt when you&#39;ve just given a command to return to executing the script. A multi-line command may be entered by backslashing the newlines.</p>

<dt><a name="{_?"
>{ ? <!--
	INDEX: debugger command, {
--></a></dt>

<dd>
<p>List out pre-prompt debugger commands.</p>

<dt><a name='command'></a><a name="{_[_command_]"
>{ [ command ]</a></dt>

<dd>
<p>Set an action (debugger command) to happen before every debugger prompt. A multi-line command may be entered in the customary fashion.</p>

<p>Because this command is in some senses new, a warning is issued if you appear to have accidentally entered a block instead. If that&#39;s what you mean to do, write it as with <code>;{ ... }</code> or even <code>do { ... }</code>.</p>

<dt><a name="{_*"
>{ * <!--
	INDEX: debugger command, {
--></a></dt>

<dd>
<p>Delete all pre-prompt debugger commands.</p>

<dt><a name='command'></a><a name="{{_command"
>{{ command <!--
	INDEX: debugger command, {{
--></a></dt>

<dd>
<p>Add an action (debugger command) to happen before every debugger prompt. A multi-line command may be entered, if you can guess how: see above.</p>

<dt><a name='number'></a><a name="!_number"
>! number <!--
	INDEX: debugger command, !
--></a></dt>

<dd>
<p>Redo a previous command (defaults to the previous command).</p>

<dt><a name='number'></a><a name="!_-number"
>! -number <!--
	INDEX: debugger command, !
--></a></dt>

<dd>
<p>Redo number&#39;th previous command.</p>

<dt><a name='pattern'></a><a name="!_pattern"
>! pattern <!--
	INDEX: debugger command, !
--></a></dt>

<dd>
<p>Redo last command that started with pattern. See <code>o recallCommand</code>, too.</p>

<dt><a name='cmd'></a><a name="!!_cmd"
>!! cmd <!--
	INDEX: debugger command, !!
--></a></dt>

<dd>
<p>Run cmd in a subprocess (reads from DB::IN, writes to DB::OUT) See <code>o shellBang</code>, also. Note that the user&#39;s current shell (well, their <code>$ENV{SHELL}</code> variable) will be used, which can interfere with proper interpretation of exit status or signal and coredump information.</p>

<dt><a name='source'></a><a name="source_file"
>source file <!--
	INDEX: debugger command, source
--></a></dt>

<dd>
<p>Read and execute debugger commands from <i>file</i>. <i>file</i> may itself contain <code>source</code> commands.</p>

<dt><a name='H'></a><a name="H_-number"
>H -number <!--
	INDEX: debugger command, H
--></a></dt>

<dd>
<p>Display last n commands. Only commands longer than one character are listed. If <i>number</i> is omitted, list them all.</p>

<dt><a name='q'></a><a name="q_or_^D"
>q or ^D <!--
	INDEX: debugger command, q
--> <!--
	INDEX: debugger command, ^D
--></a></dt>

<dd>
<p>Quit. (&#34;quit&#34; doesn&#39;t work for this, unless you&#39;ve made an alias) This is the only supported way to exit the debugger, though typing <code>exit</code> twice might work.</p>

<p>Set the <code>inhibit_exit</code> option to 0 if you want to be able to step off the end the script. You may also need to set $finished to 0 if you want to step through global destruction.</p>

<dt><a name='R'></a><a name="R"
>R <!--
	INDEX: debugger command, R
--></a></dt>

<dd>
<p>Restart the debugger by <code>exec()</code>ing a new session. We try to maintain your history across this, but internal settings and command-line options may be lost.</p>

<p>The following setting are currently preserved: history, breakpoints, actions, debugger options, and the Perl command-line options <b>-w</b>, <b>-I</b>, and <b>-e</b>.</p>

<dt><a name='dbcmd'></a><a name="|dbcmd"
>|dbcmd <!--
	INDEX: debugger command, |
--></a></dt>

<dd>
<p>Run the debugger command, piping DB::OUT into your current pager.</p>

<dt><a name='dbcmd'></a><a name="||dbcmd"
>||dbcmd <!--
	INDEX: debugger command, ||
--></a></dt>

<dd>
<p>Same as <code>|dbcmd</code> but DB::OUT is temporarily <code>select</code>ed as well.</p>

<dt><a name='alias'></a><a name="=_[alias_value]"
>= [alias value] <!--
	INDEX: debugger command, =
--></a></dt>

<dd>
<p>Define a command alias, like</p>

<pre class="sh_perl">    = quit q</pre>

<p>or list current aliases.</p>

<dt><a name="command"
>command</a></dt>

<dd>
<p>Execute command as a Perl statement. A trailing semicolon will be supplied. If the Perl statement would otherwise be confused for a Perl debugger, use a leading semicolon, too.</p>

<dt><a name='m'></a><a name="m_expr"
>m expr <!--
	INDEX: debugger command, m
--></a></dt>

<dd>
<p>List which methods may be called on the result of the evaluated expression. The expression may evaluated to a reference to a blessed object, or to a package name.</p>

<dt><a name='M'></a><a name="M"
>M <!--
	INDEX: debugger command, M
--></a></dt>

<dd>
<p>Display all loaded modules and their versions.</p>

<dt><a name='man'></a><a name="man_[manpage]"
>man [manpage] <!--
	INDEX: debugger command, man
--></a></dt>

<dd>
<p>Despite its name, this calls your system&#39;s default documentation viewer on the given page, or on the viewer itself if <i>manpage</i> is omitted. If that viewer is <b>man</b>, the current <code>Config</code> information is used to invoke <b>man</b> using the proper MANPATH or <b>-M</b>&#160;<i>manpath</i> option. Failed lookups of the form <code>XXX</code> that match known manpages of the form <i>perlXXX</i> will be retried. This lets you type <code>man debug</code> or <code>man op</code> from the debugger.</p>

<p>On systems traditionally bereft of a usable <b>man</b> command, the debugger invokes <b>perldoc</b>. Occasionally this determination is incorrect due to recalcitrant vendors or rather more felicitously, to enterprising users. If you fall into either category, just manually set the $DB::doccmd variable to whatever viewer to view the Perl documentation on your system. This may be set in an rc file, or through direct assignment. We&#39;re still waiting for a working example of something along the lines of:</p>

<pre class="sh_perl">    $DB::doccmd = &#39;netscape -remote <a href="http://something.here/" class="podlinkurl"
>http://something.here/</a>&#39;;</pre>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Configurable_Options"
>Configurable Options</a></h2>

<p>The debugger has numerous options settable using the <code>o</code> command, either interactively or from the environment or an rc file. (./.perldb or ~/.perldb under Unix.)</p>

<dl>
<dt><a name='recallCommand'></a><a name="recallCommand,_ShellBang"
><code>recallCommand</code>, <code>ShellBang</code> <!--
	INDEX: debugger option, recallCommand
--> <!--
	INDEX: debugger option, ShellBang
--></a></dt>

<dd>
<p>The characters used to recall command or spawn shell. By default, both are set to <code>!</code>, which is unfortunate.</p>

<dt><a name='pager'></a><a name="pager"
><code>pager</code> <!--
	INDEX: debugger option, pager
--></a></dt>

<dd>
<p>Program to use for output of pager-piped commands (those beginning with a <code>|</code> character.) By default, <code>$ENV{PAGER}</code> will be used. Because the debugger uses your current terminal characteristics for bold and underlining, if the chosen pager does not pass escape sequences through unchanged, the output of some debugger commands will not be readable when sent through the pager.</p>

<dt><a name='tkRunning'></a><a name="tkRunning"
><code>tkRunning</code> <!--
	INDEX: debugger option, tkRunning
--></a></dt>

<dd>
<p>Run Tk while prompting (with ReadLine).</p>

<dt><a name='signalLevel'></a><a name="signalLevel,_warnLevel,_dieLevel"
><code>signalLevel</code>, <code>warnLevel</code>, <code>dieLevel</code> <!--
	INDEX: debugger option, signalLevel
--> <!--
	INDEX: debugger option, warnLevel
--> <!--
	INDEX: debugger option, dieLevel
--></a></dt>

<dd>
<p>Level of verbosity. By default, the debugger leaves your exceptions and warnings alone, because altering them can break correctly running programs. It will attempt to print a message when uncaught INT, BUS, or SEGV signals arrive. (But see the mention of signals in <a href="#BUGS" class="podlinkpod"
>&#34;BUGS&#34;</a> below.)</p>

<p>To disable this default safe mode, set these values to something higher than 0. At a level of 1, you get backtraces upon receiving any kind of warning (this is often annoying) or exception (this is often valuable). Unfortunately, the debugger cannot discern fatal exceptions from non-fatal ones. If <code>dieLevel</code> is even 1, then your non-fatal exceptions are also traced and unceremoniously altered if they came from <code>eval&#39;ed</code> strings or from any kind of <code>eval</code> within modules you&#39;re attempting to load. If <code>dieLevel</code> is 2, the debugger doesn&#39;t care where they came from: It usurps your exception handler and prints out a trace, then modifies all exceptions with its own embellishments. This may perhaps be useful for some tracing purposes, but tends to hopelessly destroy any program that takes its exception handling seriously.</p>

<dt><a name='AutoTrace'></a><a name="AutoTrace"
><code>AutoTrace</code> <!--
	INDEX: debugger option, AutoTrace
--></a></dt>

<dd>
<p>Trace mode (similar to <code>t</code> command, but can be put into <code>PERLDB_OPTS</code>).</p>

<dt><a name='LineInfo'></a><a name="LineInfo"
><code>LineInfo</code> <!--
	INDEX: debugger option, LineInfo
--></a></dt>

<dd>
<p>File or pipe to print line number info to. If it is a pipe (say, <code>|visual_perl_db</code>), then a short message is used. This is the mechanism used to interact with a slave editor or visual debugger, such as the special <code>vi</code> or <code>emacs</code> hooks, or the <code>ddd</code> graphical debugger.</p>

<dt><a name='inhibit_exit'></a><a name="inhibit_exit"
><code>inhibit_exit</code> <!--
	INDEX: debugger option, inhibit_exit
--></a></dt>

<dd>
<p>If 0, allows <i>stepping off</i> the end of the script.</p>

<dt><a name='PrintRet'></a><a name="PrintRet"
><code>PrintRet</code> <!--
	INDEX: debugger option, PrintRet
--></a></dt>

<dd>
<p>Print return value after <code>r</code> command if set (default).</p>

<dt><a name='ornaments'></a><a name="ornaments"
><code>ornaments</code> <!--
	INDEX: debugger option, ornaments
--></a></dt>

<dd>
<p>Affects screen appearance of the command line (see <a href="/~flora/perl-5.14.2/lib/Term/ReadLine.pm" class="podlinkpod"
>Term::ReadLine</a>). There is currently no way to disable these, which can render some output illegible on some displays, or with some pagers. This is considered a bug.</p>

<dt><a name='frame'></a><a name="frame"
><code>frame</code> <!--
	INDEX: debugger option, frame
--></a></dt>

<dd>
<p>Affects the printing of messages upon entry and exit from subroutines. If <code>frame &#38; 2</code> is false, messages are printed on entry only. (Printing on exit might be useful if interspersed with other messages.)</p>

<p>If <code>frame &#38; 4</code>, arguments to functions are printed, plus context and caller info. If <code>frame &#38; 8</code>, overloaded <code>stringify</code> and <code>tie</code>d <code>FETCH</code> is enabled on the printed arguments. If <code>frame &#38; 16</code>, the return value from the subroutine is printed.</p>

<p>The length at which the argument list is truncated is governed by the next option:</p>

<dt><a name='maxTraceLen'></a><a name="maxTraceLen"
><code>maxTraceLen</code> <!--
	INDEX: debugger option, maxTraceLen
--></a></dt>

<dd>
<p>Length to truncate the argument list when the <code>frame</code> option&#39;s bit 4 is set.</p>

<dt><a name='windowSize'></a><a name="windowSize"
><code>windowSize</code> <!--
	INDEX: debugger option, windowSize
--></a></dt>

<dd>
<p>Change the size of code list window (default is 10 lines).</p>
</dd>
</dl>

<p>The following options affect what happens with <code>V</code>, <code>X</code>, and <code>x</code> commands:</p>

<dl>
<dt><a name='arrayDepth'></a><a name="arrayDepth,_hashDepth"
><code>arrayDepth</code>, <code>hashDepth</code> <!--
	INDEX: debugger option, arrayDepth
--> <!--
	INDEX: debugger option, hashDepth
--></a></dt>

<dd>
<p>Print only first N elements (&#39;&#39; for all).</p>

<dt><a name='dumpDepth'></a><a name="dumpDepth"
><code>dumpDepth</code> <!--
	INDEX: debugger option, dumpDepth
--></a></dt>

<dd>
<p>Limit recursion depth to N levels when dumping structures. Negative values are interpreted as infinity. Default: infinity.</p>

<dt><a name='compactDump'></a><a name="compactDump,_veryCompact"
><code>compactDump</code>, <code>veryCompact</code> <!--
	INDEX: debugger option, compactDump
--> <!--
	INDEX: debugger option, veryCompact
--></a></dt>

<dd>
<p>Change the style of array and hash output. If <code>compactDump</code>, short array may be printed on one line.</p>

<dt><a name='globPrint'></a><a name="globPrint"
><code>globPrint</code> <!--
	INDEX: debugger option, globPrint
--></a></dt>

<dd>
<p>Whether to print contents of globs.</p>

<dt><a name='DumpDBFiles'></a><a name="DumpDBFiles"
><code>DumpDBFiles</code> <!--
	INDEX: debugger option, DumpDBFiles
--></a></dt>

<dd>
<p>Dump arrays holding debugged files.</p>

<dt><a name='DumpPackages'></a><a name="DumpPackages"
><code>DumpPackages</code> <!--
	INDEX: debugger option, DumpPackages
--></a></dt>

<dd>
<p>Dump symbol tables of packages.</p>

<dt><a name='DumpReused'></a><a name="DumpReused"
><code>DumpReused</code> <!--
	INDEX: debugger option, DumpReused
--></a></dt>

<dd>
<p>Dump contents of &#34;reused&#34; addresses.</p>

<dt><a name='quote'></a><a name="quote,_HighBit,_undefPrint"
><code>quote</code>, <code>HighBit</code>, <code>undefPrint</code> <!--
	INDEX: debugger option, quote
--> <!--
	INDEX: debugger option, HighBit
--> <!--
	INDEX: debugger option, undefPrint
--></a></dt>

<dd>
<p>Change the style of string dump. The default value for <code>quote</code> is <code>auto</code>; one can enable double-quotish or single-quotish format by setting it to <code>&#34;</code> or <code>&#39;</code>, respectively. By default, characters with their high bit set are printed verbatim.</p>

<dt><a name='UsageOnly'></a><a name="UsageOnly"
><code>UsageOnly</code> <!--
	INDEX: debugger option, UsageOnly
--></a></dt>

<dd>
<p>Rudimentary per-package memory usage dump. Calculates total size of strings found in variables in the package. This does not include lexicals in a module&#39;s file scope, or lost in closures.</p>
</dd>
</dl>

<p>After the rc file is read, the debugger reads the <code>$ENV{PERLDB_OPTS}</code> environment variable and parses this as the remainder of a &#34;O ...&#34; line as one might enter at the debugger prompt. You may place the initialization options <code>TTY</code>, <code>noTTY</code>, <code>ReadLine</code>, and <code>NonStop</code> there.</p>

<p>If your rc file contains:</p>

<pre class="sh_perl">  parse_options(&#34;NonStop=1 LineInfo=db.out AutoTrace&#34;);</pre>

<p>then your script will run without human intervention, putting trace information into the file <i>db.out</i>. (If you interrupt it, you&#39;d better reset <code>LineInfo</code> to <em>/dev/tty</em> if you expect to see anything.)</p>

<dl>
<dt><a name='TTY'></a><a name="TTY"
><code>TTY</code> <!--
	INDEX: debugger option, TTY
--></a></dt>

<dd>
<p>The TTY to use for debugging I/O.</p>

<dt><a name='noTTY'></a><a name="noTTY"
><code>noTTY</code> <!--
	INDEX: debugger option, noTTY
--></a></dt>

<dd>
<p>If set, the debugger goes into <code>NonStop</code> mode and will not connect to a TTY. If interrupted (or if control goes to the debugger via explicit setting of $DB::signal or $DB::single from the Perl script), it connects to a TTY specified in the <code>TTY</code> option at startup, or to a tty found at runtime using the <code>Term::Rendezvous</code> module of your choice.</p>

<p>This module should implement a method named <code>new</code> that returns an object with two methods: <code>IN</code> and <code>OUT</code>. These should return filehandles to use for debugging input and output correspondingly. The <code>new</code> method should inspect an argument containing the value of <code>$ENV{PERLDB_NOTTY}</code> at startup, or <code>&#34;$ENV{HOME}/.perldbtty$$&#34;</code> otherwise. This file is not inspected for proper ownership, so security hazards are theoretically possible.</p>

<dt><a name='ReadLine'></a><a name="ReadLine"
><code>ReadLine</code> <!--
	INDEX: debugger option, ReadLine
--></a></dt>

<dd>
<p>If false, readline support in the debugger is disabled in order to debug applications that themselves use ReadLine.</p>

<dt><a name='NonStop'></a><a name="NonStop"
><code>NonStop</code> <!--
	INDEX: debugger option, NonStop
--></a></dt>

<dd>
<p>If set, the debugger goes into non-interactive mode until interrupted, or programmatically by setting $DB::signal or $DB::single.</p>
</dd>
</dl>

<p>Here&#39;s an example of using the <code>$ENV{PERLDB_OPTS}</code> variable:</p>

<pre class="sh_perl">    $ PERLDB_OPTS=&#34;NonStop frame=2&#34; perl -d myprogram</pre>

<p>That will run the script <b>myprogram</b> without human intervention, printing out the call tree with entry and exit points. Note that <code>NonStop=1 frame=2</code> is equivalent to <code>N f=2</code>, and that originally, options could be uniquely abbreviated by the first letter (modulo the <code>Dump*</code> options). It is nevertheless recommended that you always spell them out in full for legibility and future compatibility.</p>

<p>Other examples include</p>

<pre class="sh_perl">    $ PERLDB_OPTS=&#34;NonStop LineInfo=listing frame=2&#34; perl -d myprogram</pre>

<p>which runs script non-interactively, printing info on each entry into a subroutine and each executed line into the file named <em>listing</em>. (If you interrupt it, you would better reset <code>LineInfo</code> to something &#34;interactive&#34;!)</p>

<p>Other examples include (using standard shell syntax to show environment variable settings):</p>

<pre class="sh_perl">  $ ( PERLDB_OPTS=&#34;NonStop frame=1 AutoTrace LineInfo=tperl.out&#34;
      perl -d myprogram )</pre>

<p>which may be useful for debugging a program that uses <code>Term::ReadLine</code> itself. Do not forget to detach your shell from the TTY in the window that corresponds to <em>/dev/ttyXX</em>, say, by issuing a command like</p>

<pre class="sh_perl">  $ sleep 1000000</pre>

<p>See <a href="/~flora/perl-5.14.2/pod/perldebguts.pod#Debugger_Internals" class="podlinkpod"
>&#34;Debugger Internals&#34; in perldebguts</a> for details.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Debugger_Input/Output"
>Debugger Input/Output</a></h2>

<dl>
<dt><a name="Prompt"
>Prompt</a></dt>

<dd>
<p>The debugger prompt is something like</p>

<pre class="sh_perl">    DB&#60;8&#62;</pre>

<p>or even</p>

<pre class="sh_perl">    DB&#60;&#60;17&#62;&#62;</pre>

<p>where that number is the command number, and which you&#39;d use to access with the built-in <b>csh</b>-like history mechanism. For example, <code>!17</code> would repeat command number 17. The depth of the angle brackets indicates the nesting depth of the debugger. You could get more than one set of brackets, for example, if you&#39;d already at a breakpoint and then printed the result of a function call that itself has a breakpoint, or you step into an expression via <code>s/n/t expression</code> command.</p>

<dt><a name='Multiline'></a><a name="Multiline_commands"
>Multiline commands</a></dt>

<dd>
<p>If you want to enter a multi-line command, such as a subroutine definition with several statements or a format, escape the newline that would normally end the debugger command with a backslash. Here&#39;s an example:</p>

<pre class="sh_perl">      DB&#60;1&#62; for (1..4) {         \
      cont:     print &#34;ok\n&#34;;   \
      cont: }
      ok
      ok
      ok
      ok</pre>

<p>Note that this business of escaping a newline is specific to interactive commands typed into the debugger.</p>

<dt><a name='Stack'></a><a name="Stack_backtrace"
>Stack backtrace <!--
	INDEX: backtrace
--> <!--
	INDEX: stack, backtrace
--></a></dt>

<dd>
<p>Here&#39;s an example of what a stack backtrace via <code>T</code> command might look like:</p>

<pre class="sh_perl">    $ = main::infested called from file `Ambulation.pm&#39; line 10
    @ = Ambulation::legs(1, 2, 3, 4) called from file `camel_flea&#39; line 7
    $ = main::pests(&#39;bactrian&#39;, 4) called from file `camel_flea&#39; line 4</pre>

<p>The left-hand character up there indicates the context in which the function was called, with <code>$</code> and <code>@</code> meaning scalar or list contexts respectively, and <code>.</code> meaning void context (which is actually a sort of scalar context). The display above says that you were in the function <code>main::infested</code> when you ran the stack dump, and that it was called in scalar context from line 10 of the file <i>Ambulation.pm</i>, but without any arguments at all, meaning it was called as <code>&#38;infested</code>. The next stack frame shows that the function <code>Ambulation::legs</code> was called in list context from the <i>camel_flea</i> file with four arguments. The last stack frame shows that <code>main::pests</code> was called in scalar context, also from <i>camel_flea</i>, but from line 4.</p>

<p>If you execute the <code>T</code> command from inside an active <code>use</code> statement, the backtrace will contain both a <code>require</code> frame and an <code>eval</code> frame.</p>

<dt><a name='Line'></a><a name="Line_Listing_Format"
>Line Listing Format</a></dt>

<dd>
<p>This shows the sorts of output the <code>l</code> command can produce:</p>

<pre class="sh_perl">    DB&#60;&#60;13&#62;&#62; l
  101:                @i{@i} = ();
  102:b               @isa{@i,$pack} = ()
  103                     if(exists $i{$prevpack} || exists $isa{$pack});
  104             }
  105
  106             next
  107==&#62;              if(exists $isa{$pack});
  108
  109:a           if ($extra-- &#62; 0) {
  110:                %isa = ($pack,1);</pre>

<p>Breakable lines are marked with <code>:</code>. Lines with breakpoints are marked by <code>b</code> and those with actions by <code>a</code>. The line that&#39;s about to be executed is marked by <code>==&#62;</code>.</p>

<p>Please be aware that code in debugger listings may not look the same as your original source code. Line directives and external source filters can alter the code before Perl sees it, causing code to move from its original positions or take on entirely different forms.</p>

<dt><a name='Frame'></a><a name="Frame_listing"
>Frame listing</a></dt>

<dd>
<p>When the <code>frame</code> option is set, the debugger would print entered (and optionally exited) subroutines in different styles. See <a href="/~flora/perl-5.14.2/pod/perldebguts.pod" class="podlinkpod"
>perldebguts</a> for incredibly long examples of these.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Debugging_Compile-Time_Statements"
>Debugging Compile-Time Statements</a></h2>

<p>If you have compile-time executable statements (such as code within BEGIN, UNITCHECK and CHECK blocks or <code>use</code> statements), these will <i>not</i> be stopped by debugger, although <code>require</code>s and INIT blocks will, and compile-time statements can be traced with the <code>AutoTrace</code> option set in <code>PERLDB_OPTS</code>). From your own Perl code, however, you can transfer control back to the debugger using the following statement, which is harmless if the debugger is not running:</p>

<pre class="sh_perl">    $DB::single = 1;</pre>

<p>If you set <code>$DB::single</code> to 2, it&#39;s equivalent to having just typed the <code>n</code> command, whereas a value of 1 means the <code>s</code> command. The <code>$DB::trace</code> variable should be set to 1 to simulate having typed the <code>t</code> command.</p>

<p>Another way to debug compile-time code is to start the debugger, set a breakpoint on the <i>load</i> of some module:</p>

<pre class="sh_perl">    DB&#60;7&#62; b load f:/perllib/lib/Carp.pm
  Will stop on load of `f:/perllib/lib/Carp.pm&#39;.</pre>

<p>and then restart the debugger using the <code>R</code> command (if possible). One can use <code>b compile subname</code> for the same purpose.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Debugger_Customization"
>Debugger Customization</a></h2>

<p>The debugger probably contains enough configuration hooks that you won&#39;t ever have to modify it yourself. You may change the behaviour of the debugger from within the debugger using its <code>o</code> command, from the command line via the <code>PERLDB_OPTS</code> environment variable, and from customization files.</p>

<p>You can do some customization by setting up a <em>.perldb</em> file, which contains initialization code. For instance, you could make aliases like these (the last one is one people expect to be there):</p>

<pre class="sh_perl">    $DB::alias{&#39;len&#39;}  = &#39;s/^len(.*)/p length($1)/&#39;;
    $DB::alias{&#39;stop&#39;} = &#39;s/^stop (at|in)/b/&#39;;
    $DB::alias{&#39;ps&#39;}   = &#39;s/^ps\b/p scalar /&#39;;
    $DB::alias{&#39;quit&#39;} = &#39;s/^quit(\s*)/exit/&#39;;</pre>

<p>You can change options from <em>.perldb</em> by using calls like this one;</p>

<pre class="sh_perl">    parse_options(&#34;NonStop=1 LineInfo=db.out AutoTrace=1 frame=2&#34;);</pre>

<p>The code is executed in the package <code>DB</code>. Note that <em>.perldb</em> is processed before processing <code>PERLDB_OPTS</code>. If <em>.perldb</em> defines the subroutine <code>afterinit</code>, that function is called after debugger initialization ends. <em>.perldb</em> may be contained in the current directory, or in the home directory. Because this file is sourced in by Perl and may contain arbitrary commands, for security reasons, it must be owned by the superuser or the current user, and writable by no one but its owner.</p>

<p>You can mock TTY input to debugger by adding arbitrary commands to @DB::typeahead. For example, your <em>.perldb</em> file might contain:</p>

<pre class="sh_perl">    sub afterinit { push @DB::typeahead, &#34;b 4&#34;, &#34;b 6&#34;; }</pre>

<p>Which would attempt to set breakpoints on lines 4 and 6 immediately after debugger initialization. Note that @DB::typeahead is not a supported interface and is subject to change in future releases.</p>

<p>If you want to modify the debugger, copy <em>perl5db.pl</em> from the Perl library to another name and hack it to your heart&#39;s content. You&#39;ll then want to set your <code>PERL5DB</code> environment variable to say something like this:</p>

<pre class="sh_perl">    BEGIN { require &#34;myperl5db.pl&#34; }</pre>

<p>As a last resort, you could also use <code>PERL5DB</code> to customize the debugger by directly setting internal variables or calling debugger functions.</p>

<p>Note that any variables and functions that are not documented in this document (or in <a href="/~flora/perl-5.14.2/pod/perldebguts.pod" class="podlinkpod"
>perldebguts</a>) are considered for internal use only, and as such are subject to change without notice.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Readline_Support_/_History_in_the_Debugger"
>Readline Support / History in the Debugger</a></h2>

<p>As shipped, the only command-line history supplied is a simplistic one that checks for leading exclamation points. However, if you install the Term::ReadKey and Term::ReadLine modules from CPAN (such as Term::ReadLine::Gnu, Term::ReadLine::Perl, ...) you will have full editing capabilities much like those GNU <i>readline</i>(3) provides. Look for these in the <em>modules/by-module/Term</em> directory on CPAN. These do not support normal <b>vi</b> command-line editing, however.</p>

<p>A rudimentary command-line completion is also available, including lexical variables in the current scope if the <code>PadWalker</code> module is installed.</p>

<p>Without Readline support you may see the symbols &#34;^[[A&#34;, &#34;^[[C&#34;, &#34;^[[B&#34;, &#34;^[[D&#34;&#34;, &#34;^H&#34;, ... when using the arrow keys and/or the backspace key.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Editor_Support_for_Debugging"
>Editor Support for Debugging</a></h2>

<p>If you have the FSF&#39;s version of <b>emacs</b> installed on your system, it can interact with the Perl debugger to provide an integrated software development environment reminiscent of its interactions with C debuggers.</p>

<p>Recent versions of Emacs come with a start file for making <b>emacs</b> act like a syntax-directed editor that understands (some of) Perl&#39;s syntax. See <a href="/~flora/perl-5.14.2/pod/perlfaq3.pod" class="podlinkpod"
>perlfaq3</a>.</p>

<p>A similar setup by Tom Christiansen for interacting with any vendor-shipped <b>vi</b> and the X11 window system is also available. This works similarly to the integrated multiwindow support that <b>emacs</b> provides, where the debugger drives the editor. At the time of this writing, however, that tool&#39;s eventual location in the Perl distribution was uncertain.</p>

<p>Users of <b>vi</b> should also look into <b>vim</b> and <b>gvim</b>, the mousey and windy version, for coloring of Perl keywords.</p>

<p>Note that only perl can truly parse Perl, so all such CASE tools fall somewhat short of the mark, especially if you don&#39;t program your Perl as a C programmer might.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_Perl_Profiler"
>The Perl Profiler <!--
	INDEX: profile
--> <!--
	INDEX: profiling
--> <!--
	INDEX: profiler
--></a></h2>

<p>If you wish to supply an alternative debugger for Perl to run, invoke your script with a colon and a package argument given to the <b>-d</b> flag. Perl&#39;s alternative debuggers include the Perl profiler, <a href="/perldoc?Devel%3A%3ADProf" class="podlinkpod"
>Devel::DProf</a>, which is included with the standard Perl distribution. To profile your Perl program in the file <em>mycode.pl</em>, just type:</p>

<pre class="sh_perl">    $ perl -d:DProf mycode.pl</pre>

<p>When the script terminates the profiler will dump the profile information to a file called <em>tmon.out</em>. A tool like <b>dprofpp</b>, also supplied with the standard Perl distribution, can be used to interpret the information in that profile. More powerful profilers, such as <code>Devel::NYTProf</code> are available from the CPAN: see <a href="/~flora/perl-5.14.2/pod/perlperf.pod" class="podlinkpod"
>perlperf</a> for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Debugging_Regular_Expressions"
>Debugging Regular Expressions <!--
	INDEX: regular expression, debugging
--> <!--
	INDEX: regex, debugging
--> <!--
	INDEX: regexp, debugging
--> <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>use re &#39;debug&#39;</code> enables you to see the gory details of how the Perl regular expression engine works. In order to understand this typically voluminous output, one must not only have some idea about how regular expression matching works in general, but also know how Perl&#39;s regular expressions are internally compiled into an automaton. These matters are explored in some detail in <a href="/~flora/perl-5.14.2/pod/perldebguts.pod#Debugging_Regular_Expressions" class="podlinkpod"
>&#34;Debugging Regular Expressions&#34; in perldebguts</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Debugging_Memory_Usage"
>Debugging Memory Usage <!--
	INDEX: memory usage
--> <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Perl contains internal support for reporting its own memory usage, but this is a fairly advanced concept that requires some understanding of how memory allocation works. See <a href="/~flora/perl-5.14.2/pod/perldebguts.pod#Debugging_Perl_Memory_Usage" class="podlinkpod"
>&#34;Debugging Perl Memory Usage&#34; in perldebguts</a> for the details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You did try the <b>-w</b> switch, didn&#39;t you?</p>

<p><a href="/~flora/perl-5.14.2/pod/perldebtut.pod" class="podlinkpod"
>perldebtut</a>, <a href="/~flora/perl-5.14.2/pod/perldebguts.pod" class="podlinkpod"
>perldebguts</a>, <a href="/~flora/perl-5.14.2/ext/re/re.pm" class="podlinkpod"
>re</a>, <a href="/~flora/perl-5.14.2/lib/DB.pm" class="podlinkpod"
>DB</a>, <a href="/perldoc?Devel%3A%3ADProf" class="podlinkpod"
>Devel::DProf</a>, <a href="/perldoc?dprofpp" class="podlinkpod"
>dprofpp</a>, <a href="/perldoc?Dumpvalue" class="podlinkpod"
>Dumpvalue</a>, and <a href="/~flora/perl-5.14.2/pod/perlrun.pod" class="podlinkpod"
>perlrun</a>.</p>

<p>When debugging a script that uses #! and is thus normally found in $PATH, the -S option causes perl to search $PATH for it, so you don&#39;t have to type the path or <code>which $scriptname</code>.</p>

<pre class="sh_perl">  $ perl -Sd foo.pl</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You cannot get stack frame information or in any fashion debug functions that were not compiled by Perl, such as those from C or C++ extensions.</p>

<p>If you alter your @_ arguments in a subroutine (such as with <code>shift</code> or <code>pop</code>), the stack backtrace will not show the original values.</p>

<p>The debugger does not currently work in conjunction with the <b>-W</b> command-line switch, because it itself is not free of warnings.</p>

<p>If you&#39;re in a slow syscall (like <code>wait</code>ing, <code>accept</code>ing, or <code>read</code>ing from your keyboard or a socket) and haven&#39;t set up your own <code>$SIG{INT}</code> handler, then you won&#39;t be able to CTRL-C your way back to the debugger, because the debugger&#39;s own <code>$SIG{INT}</code> handler doesn&#39;t understand that it needs to raise an exception to longjmp(3) out of slow syscalls.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78071 Uploads, 24685 Distributions
105889 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Document']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Document']);
    });
  });
</script>
<!-- Sat Apr 21 16:37:35 2012 GMT (0.180314064025879) @cpansearch1 -->
 </body>
</html>
