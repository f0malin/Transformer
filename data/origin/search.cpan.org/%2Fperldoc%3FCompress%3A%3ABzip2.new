<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Compress::Bzip2 - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Compress-Bzip2",3]);
    _gaq.push(["_setCustomVar",5,"Release","Compress-Bzip2-2.09",3]);
    _gaq.push(["_setCustomVar",3,"Module","Compress::Bzip2",3]);
    _gaq.push(["_setCustomVar",1,"Author","ARJAY",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Compress::Bzip2">permalink</a></div>
  <a href="/~arjay/">Rob Janes</a> &gt;
  <a href="/~arjay/Compress-Bzip2-2.09/">Compress-Bzip2-2.09</a> &gt;
  Compress::Bzip2
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/ce843cd388fa6a856f02f203a2340dbd?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/A/AR/ARJAY/Compress-Bzip2-2.09.tar.gz">Compress-Bzip2-2.09.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Compress%3A%3ABzip2;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~ARJAY/Compress-Bzip2-2.09/lib/Compress/Bzip2.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Archive%3A%3ATar">Archive::Tar</a><br>
<a href="/perldoc?Compress%3A%3AZlib">Compress::Zlib</a><br>
<a href="/perldoc?XML%3A%3AParser">XML::Parser</a><br>
<a href="/perldoc?Archive%3A%3AZip">Archive::Zip</a><br>
<a href="/perldoc?XML%3A%3ATwig">XML::Twig</a><br>
<a href="/perldoc?Net%3A%3ASSLeay">Net::SSLeay</a><br>
<a href="/perldoc?DBD%3A%3ACSV">DBD::CSV</a><br>
<a href="/perldoc?IO%3A%3AScalar">IO::Scalar</a><br>
<a href="/perldoc?List%3A%3AUtil">List::Util</a><br>
<a href="/perldoc?DBD%3A%3AODBC">DBD::ODBC</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Compress%3A%3ABzip2">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 12</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Compress-Bzip2">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.09 &nbsp;
<span class="noprint">
  <a href="/src/ARJAY/Compress-Bzip2-2.09/lib/Compress/Bzip2.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#FILE_READ/WRITE_INTERFACE'>FILE READ/WRITE INTERFACE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#$bz_=_bzopen(filename_or_filehandle,_mode)'>$bz = bzopen(filename or filehandle, mode)</a>
    <li class='indexItem indexItem2'><a href='#$bz_=_Compress::Bzip2-&#62;new(_[PARAMS]_)'>$bz = Compress::Bzip2-&#62;new( [PARAMS] )</a>
    <li class='indexItem indexItem2'><a href='#$bz-&#62;bzopen(filename_or_filehandle,_mode)'>$bz-&#62;bzopen(filename or filehandle, mode)</a>
    <li class='indexItem indexItem2'><a href='#$bytesread_=_$bz-&#62;bzread($buffer_[,_$size])_;'>$bytesread = $bz-&#62;bzread($buffer [, $size]) ;</a>
    <li class='indexItem indexItem2'><a href='#$bytesread_=_$bz-&#62;bzreadline($line)_;'>$bytesread = $bz-&#62;bzreadline($line) ;</a>
    <li class='indexItem indexItem2'><a href='#$byteswritten_=_$bz-&#62;bzwrite($buffer_[,_$limit])_;'>$byteswritten = $bz-&#62;bzwrite($buffer [, $limit]) ;</a>
    <li class='indexItem indexItem2'><a href='#$status_=_$bz-&#62;bzflush($flush)_;'>$status = $bz-&#62;bzflush($flush) ;</a>
    <li class='indexItem indexItem2'><a href='#$status_=_$bz-&#62;bzeof()_;'>$status = $bz-&#62;bzeof() ;</a>
    <li class='indexItem indexItem2'><a href='#$bz-&#62;bzclose'>$bz-&#62;bzclose</a>
    <li class='indexItem indexItem2'><a href='#$bz-&#62;bzsetparams(_[PARAMS]_);'>$bz-&#62;bzsetparams( [PARAMS] );</a>
    <li class='indexItem indexItem2'><a href='#$bz-&#62;bzerror'>$bz-&#62;bzerror</a>
    <li class='indexItem indexItem2'><a href='#$bzerrno'>$bzerrno</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Compress::Bzip2_1.03_COMPATIBILITY'>Compress::Bzip2 1.03 COMPATIBILITY</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#$dest_=_compress(_$string,_[$level]_)'>$dest = compress( $string, [$level] )</a>
    <li class='indexItem indexItem2'><a href='#$dest_=_decompress($string)'>$dest = decompress($string)</a>
    <li class='indexItem indexItem2'><a href='#$stream_=_compress_init(_[PARAMS]_)'>$stream = compress_init( [PARAMS] )</a>
    <li class='indexItem indexItem2'><a href='#$stream_=_decompress_init(_[PARAMS]_)'>$stream = decompress_init( [PARAMS] )</a>
    <li class='indexItem indexItem2'><a href='#$output_=_$stream-&#62;add(_$string_)'>$output = $stream-&#62;add( $string )</a>
    <li class='indexItem indexItem2'><a href='#$output_=_$stream-&#62;finish(_[$string]_)'>$output = $stream-&#62;finish( [$string] )</a>
    <li class='indexItem indexItem2'><a href='#$stream-&#62;error'>$stream-&#62;error</a>
    <li class='indexItem indexItem2'><a href='#$stream-&#62;input_size'>$stream-&#62;input_size</a>
    <li class='indexItem indexItem2'><a href='#$stream-&#62;output_size'>$stream-&#62;output_size</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#GZIP_COMPATIBILITY_INTERFACE'>GZIP COMPATIBILITY INTERFACE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#$gz_=_gzopen(_$filename,_$mode_)'> $gz = gzopen( $filename, $mode ) </a>
    <li class='indexItem indexItem2'><a href='#$gz-&#62;gzread(_$buffer,_[_$length_]_)'> $gz-&#62;gzread( $buffer, [ $length ] ) </a>
    <li class='indexItem indexItem2'><a href='#$gz-&#62;gzreadline(_$buffer_)'> $gz-&#62;gzreadline( $buffer ) </a>
    <li class='indexItem indexItem2'><a href='#$gz-&#62;gzwrite(_$buffer_)'> $gz-&#62;gzwrite( $buffer ) </a>
    <li class='indexItem indexItem2'><a href='#$gz-&#62;gzflush(_[$flushtype]_)'> $gz-&#62;gzflush( [$flushtype] ) </a>
    <li class='indexItem indexItem2'><a href='#$gz-&#62;gzclose(_)'> $gz-&#62;gzclose( ) </a>
    <li class='indexItem indexItem2'><a href='#$gz-&#62;gzeof(_)'> $gz-&#62;gzeof( ) </a>
    <li class='indexItem indexItem2'><a href='#$gz-&#62;gzerror(_)'> $gz-&#62;gzerror( ) </a>
    <li class='indexItem indexItem2'><a href='#$gz-&#62;gzsetparams(_$level,_$strategy_)'> $gz-&#62;gzsetparams( $level, $strategy ) </a>
    <li class='indexItem indexItem2'><a href='#$d_=_deflateInit(_[OPTS]_)'> $d = deflateInit( [OPTS] ) </a>
    <li class='indexItem indexItem2'><a href='#$d-&#62;deflate(_$buffer_)'> $d-&#62;deflate( $buffer ) </a>
    <li class='indexItem indexItem2'><a href='#$d-&#62;deflateParams(_[OPTS]_)'> $d-&#62;deflateParams( [OPTS] ) </a>
    <li class='indexItem indexItem2'><a href='#$d-&#62;flush(_[$flushtype]_)'> $d-&#62;flush( [$flushtype] ) </a>
    <li class='indexItem indexItem2'><a href='#$d-&#62;dict_adler(_)'> $d-&#62;dict_adler( ) </a>
    <li class='indexItem indexItem2'><a href='#$d-&#62;msg(_)'> $d-&#62;msg( ) </a>
    <li class='indexItem indexItem2'><a href='#$d_=_inflateInit(_[OPTS]_)'> $d = inflateInit( [OPTS] ) </a>
    <li class='indexItem indexItem2'><a href='#$d-&#62;inflate(_)'> $d-&#62;inflate( ) </a>
    <li class='indexItem indexItem2'><a href='#$d-&#62;inflateSync(_)'> $d-&#62;inflateSync( ) </a>
    <li class='indexItem indexItem2'><a href='#$d-&#62;adler32(_$crc_)'> $d-&#62;adler32( $crc ) </a>
    <li class='indexItem indexItem2'><a href='#$d-&#62;crc32(_$crc_)'> $d-&#62;crc32( $crc ) </a>
    <li class='indexItem indexItem2'><a href='#$buffer_=_memGzip(_$buffer_)'> $buffer = memGzip( $buffer ) </a>
    <li class='indexItem indexItem2'><a href='#$buffer_=_memGunzip(_$buffer_)'> $buffer = memGunzip( $buffer ) </a>
  </ul>
  <li class='indexItem indexItem1'><a href='#IN-MEMORY_COMPRESS/UNCOMPRESS'>IN-MEMORY COMPRESS/UNCOMPRESS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#$compressed_=_memBzip($buffer);'>$compressed = memBzip($buffer);</a>
    <li class='indexItem indexItem2'><a href='#$uncompressed_=_memBunzip($buffer);'>$uncompressed = memBunzip($buffer);</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#STREAM_DEFLATE'>STREAM DEFLATE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#($d,_$status)_=_bzdeflateInit(_[PARAMS]_)'>($d, $status) = bzdeflateInit( [PARAMS] )</a>
    <li class='indexItem indexItem2'><a href='#($out,_$status)_=_$d-&#62;bzdeflate($buffer)'>($out, $status) = $d-&#62;bzdeflate($buffer)</a>
    <li class='indexItem indexItem2'><a href='#($out,_$status)_=_$d-&#62;bzflush([flush_type])'>($out, $status) = $d-&#62;bzflush([flush_type])</a>
    <li class='indexItem indexItem2'><a href='#Example'>Example</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#STREAM_INFLATE'>STREAM INFLATE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#($i,_$status)_=_inflateInit()'>($i, $status) = inflateInit()</a>
    <li class='indexItem indexItem2'><a href='#($out,_$status)_=_$i-&#62;bzinflate($buffer)'>($out, $status) = $i-&#62;bzinflate($buffer)</a>
    <li class='indexItem indexItem2'><a href='#Example'>Example</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#A_bzcat_function'>A bzcat function</a>
    <li class='indexItem indexItem2'><a href='#A_grep_using_bzreadline'>A grep using bzreadline</a>
    <li class='indexItem indexItem2'><a href='#Streaming_Compression'>Streaming Compression</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXPORT'>EXPORT</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Export_tag_:all'>Export tag :all</a>
    <li class='indexItem indexItem2'><a href='#Export_tag_:constants'>Export tag :constants</a>
    <li class='indexItem indexItem2'><a href='#Export_tag_:bzip1'>Export tag :bzip1</a>
    <li class='indexItem indexItem2'><a href='#Export_tag_:utilities'>Export tag :utilities</a>
    <li class='indexItem indexItem2'><a href='#Export_tag_:gzip'>Export tag :gzip</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Exportable_constants'>Exportable constants</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#MODIFICATION_HISTORY'>MODIFICATION HISTORY</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Compress::Bzip2 - Interface to Bzip2 compression library</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use Compress::Bzip2 qw(:all :constant :utilities :gzip);

    ($bz, $status) = bzdeflateInit( [PARAMS] ) ;
    ($out, $status) = $bz-&#62;bzdeflate($buffer) ;

    ($bz, $status) = bzinflateInit( [PARAMS] ) ;
    ($out, $status) = $bz-&#62;bzinflate($buffer) ;

    ($out, $status) = $bz-&#62;bzflush() ;
    ($out, $status) = $bz-&#62;bzclose() ;

    $dest = memBzip($source);
        alias compress
    $dest = memBunzip($source);
        alias decompress

    $bz = Compress::Bzip2-&#62;new( [PARAMS] );

    $bz = bzopen($filename or filehandle, $mode);
        alternate, with $bz created by new():
    $bz-&#62;bzopen($filename or filehandle, $mode);

    $bytesread = $bz-&#62;bzread($buffer [,$size]) ;
    $bytesread = $bz-&#62;bzreadline($line);
    $byteswritten = $bz-&#62;bzwrite($buffer [,$limit]);
    $errstring = $bz-&#62;bzerror(); 
    $status = $bz-&#62;bzeof();
    $status = $bz-&#62;bzflush();
    $status = $bz-&#62;bzclose() ;

    $status = $bz-&#62;bzsetparams( $param =&#62; $setting );

    $bz-&#62;total_in() ;
    $bz-&#62;total_out() ;

    $verstring = $bz-&#62;bzversion();

    $Compress::Bzip2::bzerrno</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <i>Compress::Bzip2</i> module provides a Perl interface to the <i>Bzip2</i> compression library (see <a href="#AUTHOR" class="podlinkpod"
>&#34;AUTHOR&#34;</a> for details about where to get <i>Bzip2</i>). A relevant subset of the functionality provided by <i>Bzip2</i> is available in <i>Compress::Bzip2</i>.</p>

<p>All string parameters can either be a scalar or a scalar reference.</p>

<p>The module can be split into two general areas of functionality, namely in-memory compression/decompression and read/write access to <i>bzip2</i> files. Each of these areas will be discussed separately below.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FILE_READ/WRITE_INTERFACE"
>FILE READ/WRITE INTERFACE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A number of functions are supplied in <i>bzlib</i> for reading and writing <i>bzip2</i> files. Unfortunately, most of them are not suitable. So, this module provides another interface, built over top of the low level bzlib methods.</p>

<blockquote></blockquote>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$bz_=_bzopen(filename_or_filehandle,_mode)"
><b>$bz = bzopen(filename or filehandle, mode)</b></a></h2>

<p>This function returns an object which is used to access the other <i>bzip2</i> methods.</p>

<p>The <b>mode</b> parameter is used to specify both whether the file is opened for reading or writing, with &#34;r&#34; or &#34;w&#34; respectively.</p>

<p>If a reference to an open filehandle is passed in place of the filename, it better be positioned to the start of a compression/decompression sequence.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$bz_=_Compress::Bzip2-&#62;new(_[PARAMS]_)"
><b>$bz = Compress::Bzip2-&#62;new( [PARAMS] )</b></a></h2>

<p>Create a Compress::Bzip2 object. Optionally, provide compression/decompression parameters as a keyword =&#62; setting list. See <i>bzsetparams()</i> for a description of the parameters.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$bz-&#62;bzopen(filename_or_filehandle,_mode)"
><b>$bz-&#62;bzopen(filename or filehandle, mode)</b></a></h2>

<p>This is bzopen, but it uses an object previously created by the new method. Other than that, it is identical to the above bzopen.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$bytesread_=_$bz-&#62;bzread($buffer_[,_$size])_;"
><b>$bytesread = $bz-&#62;bzread($buffer [, $size]) ;</b></a></h2>

<p>Reads <b>$size</b> bytes from the compressed file into <b>$buffer</b>. If <b>$size</b> is not specified, it will default to 4096. If the scalar <b>$buffer</b> is not large enough, it will be extended automatically.</p>

<p>Returns the number of bytes actually read. On EOF it returns 0 and in the case of an error, -1.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$bytesread_=_$bz-&#62;bzreadline($line)_;"
><b>$bytesread = $bz-&#62;bzreadline($line) ;</b></a></h2>

<p>Reads the next line from the compressed file into <b>$line</b>.</p>

<p>Returns the number of bytes actually read. On EOF it returns 0 and in the case of an error, -1.</p>

<p>It IS legal to intermix calls to <b>bzread</b> and <b>bzreadline</b>.</p>

<p>At this time <b>bzreadline</b> ignores the variable <code>$/</code> (<code>$INPUT_RECORD_SEPARATOR</code> or <code>$RS</code> when <code>English</code> is in use). The end of a line is denoted by the C character <code>&#39;\n&#39;</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$byteswritten_=_$bz-&#62;bzwrite($buffer_[,_$limit])_;"
><b>$byteswritten = $bz-&#62;bzwrite($buffer [, $limit]) ;</b></a></h2>

<p>Writes the contents of <b>$buffer</b> to the compressed file. Returns the number of bytes actually written, or 0 on error.</p>

<p>If $limit is given and non-zero, then only that many bytes from $buffer will be written.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$status_=_$bz-&#62;bzflush($flush)_;"
><b>$status = $bz-&#62;bzflush($flush) ;</b></a></h2>

<p>Flushes all pending output to the compressed file. Works identically to the <i>zlib</i> function it interfaces to. Note that the use of <b>bzflush</b> can degrade compression.</p>

<p>Returns <code>BZ_OK</code> if <b>$flush</b> is <code>BZ_FINISH</code> and all output could be flushed. Otherwise the bzlib error code is returned.</p>

<p>Refer to the <i>bzlib</i> documentation for the valid values of <b>$flush</b>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$status_=_$bz-&#62;bzeof()_;"
><b>$status = $bz-&#62;bzeof() ;</b></a></h2>

<p>Returns 1 if the end of file has been detected while reading the input file, otherwise returns 0.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$bz-&#62;bzclose"
><b>$bz-&#62;bzclose</b></a></h2>

<p>Closes the compressed file. Any pending data is flushed to the file before it is closed.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$bz-&#62;bzsetparams(_[PARAMS]_);"
><b>$bz-&#62;bzsetparams( [PARAMS] );</b></a></h2>

<p>Change settings for the deflate stream <code>$bz</code>.</p>

<p>The list of the valid options is shown below. Options not specified will remain unchanged.</p>

<dl>
<dt><a name='verbosity'></a><a name="-verbosity"
><b>-verbosity</b></a></dt>

<dd>
<p>Defines the verbosity level. Valid values are 0 through 4,</p>

<p>The default is <code>-verbosity =&#62; 0</code>.</p>

<dt><a name='blockSize100k'></a><a name="-blockSize100k"
><b>-blockSize100k</b></a></dt>

<dd>
<p>For bzip object opened for stream deflation or write.</p>

<p>Defines the buffering factor of compression method. The algorithm buffers all data until the buffer is full, then it flushes all the data out. Use -blockSize100k to specify the size of the buffer.</p>

<p>Valid settings are 1 through 9, representing a blocking in multiples of 100k.</p>

<p>Note that each such block has an overhead of leading and trailing synchronization bytes. bzip2 recovery uses this information to pull useable data out of a corrupted file.</p>

<p>A streaming application would probably want to set the blocking low.</p>

<dt><a name='workFactor'></a><a name="-workFactor"
><b>-workFactor</b></a></dt>

<dd>
<p>For bzip object opened for stream deflation or write.</p>

<p>The workFactor setting tells the deflation algorithm how much work to invest to compensate for repetitive data.</p>

<p>workFactor may be a number from 0 to 250 inclusive. The default setting is 30.</p>

<p>See the bzip documentation for more information.</p>

<dt><a name='small'></a><a name="-small"
><b>-small</b></a></dt>

<dd>
<p>For bzip object opened for stream inflation or read.</p>

<p><b>small</b> may be 0 or 1. Set <code>small</code> to one to use a slower, less memory intensive algorithm.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$bz-&#62;bzerror"
><b>$bz-&#62;bzerror</b></a></h2>

<p>Returns the <i>bzlib</i> error message or number for the last operation associated with <b>$bz</b>. The return value will be the <i>bzlib</i> error number when used in a numeric context and the <i>bzlib</i> error message when used in a string context. The <i>bzlib</i> error number constants, shown below, are available for use.</p>

<pre class="sh_perl">  BZ_CONFIG_ERROR
  BZ_DATA_ERROR
  BZ_DATA_ERROR_MAGIC
  BZ_FINISH
  BZ_FINISH_OK
  BZ_FLUSH
  BZ_FLUSH_OK
  BZ_IO_ERROR
  BZ_MAX_UNUSED
  BZ_MEM_ERROR
  BZ_OK
  BZ_OUTBUFF_FULL
  BZ_PARAM_ERROR
  BZ_RUN
  BZ_RUN_OK
  BZ_SEQUENCE_ERROR
  BZ_STREAM_END
  BZ_UNEXPECTED_EOF</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$bzerrno"
><b>$bzerrno</b></a></h2>

<p>The <b>$bzerrno</b> scalar holds the error code associated with the most recent <i>bzip2</i> routine. Note that unlike <b>bzerror()</b>, the error is <i>not</i> associated with a particular file.</p>

<p>As with <b>bzerror()</b> it returns an error number in numeric context and an error message in string context. Unlike <b>bzerror()</b> though, the error message will correspond to the <i>bzlib</i> message when the error is associated with <i>bzlib</i> itself, or the UNIX error message when it is not (i.e. <i>bzlib</i> returned <code>Z_ERRORNO</code>).</p>

<p>As there is an overlap between the error numbers used by <i>bzlib</i> and UNIX, <b>$bzerrno</b> should only be used to check for the presence of <i>an</i> error in numeric context. Use <b>bzerror()</b> to check for specific <i>bzlib</i> errors. The <i>bzcat</i> example below shows how the variable can be used safely.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Compress::Bzip2_1.03_COMPATIBILITY"
>Compress::Bzip2 1.03 COMPATIBILITY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>While the 2.x thread forked off of 1.00, another line of development came to a head at 1.03. The 1.03 version worked with bzlib 1.0.2, had improvements to the error handling, single buffer inflate/deflate, a streaming interface to inflate/deflate, and a cpan style test suite.</p>

<blockquote></blockquote>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$dest_=_compress(_$string,_[$level]_)"
><b>$dest = compress( $string, [$level] )</b></a></h2>

<p>Alias to memBzip, this compresses string, using the optional compression level, 1 through 9, the default being 1. Returns a string containing the compressed data.</p>

<p>On error <i>undef</i> is returned.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$dest_=_decompress($string)"
><b>$dest = decompress($string)</b></a></h2>

<p>Alias to memBunzip, this decompresses the data in string, returning a string containing the decompressed data.</p>

<p>On error <i>undef</i> is returned.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$stream_=_compress_init(_[PARAMS]_)"
><b>$stream = compress_init( [PARAMS] )</b></a></h2>

<p>Alias to bzdeflateInit. In addition to the named parameters documented for bzdeflateInit, the following are accepted:</p>

<pre class="sh_perl">   -level, alias to -blockSize100k
   -buffer, to set the buffer size.</pre>

<p>The -buffer option is ignored. The intermediate buffer size is not changeable.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$stream_=_decompress_init(_[PARAMS]_)"
><b>$stream = decompress_init( [PARAMS] )</b></a></h2>

<p>Alias to bzinflateInit. See bzinflateInit for a description of the parameters. The option &#34;-buffer&#34; is accepted, but ignored.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$output_=_$stream-&#62;add(_$string_)"
><b>$output = $stream-&#62;add( $string )</b></a></h2>

<p>Add data to be compressed/decompressed. Returns whatever output is available (possibly none, if it&#39;s still buffering it), or undef on error.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$output_=_$stream-&#62;finish(_[$string]_)"
><b>$output = $stream-&#62;finish( [$string] )</b></a></h2>

<p>Finish the operation; takes an optional final data string. Whatever is returned completes the output; returns undef on error.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$stream-&#62;error"
><b>$stream-&#62;error</b></a></h2>

<p>Like the function, but applies to the current object only. Note that errors in a stream object are also returned by the function.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$stream-&#62;input_size"
><b>$stream-&#62;input_size</b></a></h2>

<p>Alias to total_in. Total bytes passed to the stream.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$stream-&#62;output_size"
><b>$stream-&#62;output_size</b></a></h2>

<p>Alias to total_out. Total bytes received from the stream.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="GZIP_COMPATIBILITY_INTERFACE"
>GZIP COMPATIBILITY INTERFACE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Except for the exact state and error numbers, this package presents an interface very much like that given by the Compress::Zlib package. Mostly, if you take the method name, state or error number from Compress::Zlib and replace the &#34;g&#34; with a &#34;b&#34;, your code should work.</p>

<p>To make the interoperability even easier, all the Compress::Zlib method names have been used as aliases or cover functions for the bzip2 methods.</p>

<p>Therefore, most code that uses Compress::Zlib should be able to use this package, with a one line change.</p>

<p>Simply change</p>

<pre class="sh_perl">   $gz = Compress::Zlib::gzopen( &#34;filename&#34;, &#34;w&#34; );</pre>

<p>to</p>

<pre class="sh_perl">   $gz = Compress::Bzip2::gzopen( &#34;filename&#34;, &#34;w&#34; );</pre>

<p>Some of the Compress::Zlib aliases don&#39;t return anything useful, like crc32 or adler32, cause bzip2 doesn&#39;t do that sort of thing.</p>

<blockquote></blockquote>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$gz_=_gzopen(_$filename,_$mode_)"
><b> $gz = gzopen( $filename, $mode ) </b></a></h2>

<p>Alias for bzopen.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$gz-&#62;gzread(_$buffer,_[_$length_]_)"
><b> $gz-&#62;gzread( $buffer, [ $length ] ) </b></a></h2>

<p>Alias for bzread.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$gz-&#62;gzreadline(_$buffer_)"
><b> $gz-&#62;gzreadline( $buffer ) </b></a></h2>

<p>Alias for bzreadline.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$gz-&#62;gzwrite(_$buffer_)"
><b> $gz-&#62;gzwrite( $buffer ) </b></a></h2>

<p>Alias for bzwrite.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$gz-&#62;gzflush(_[$flushtype]_)"
><b> $gz-&#62;gzflush( [$flushtype] ) </b></a></h2>

<p>Alias for bzflush, with return code translation.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$gz-&#62;gzclose(_)"
><b> $gz-&#62;gzclose( ) </b></a></h2>

<p>Alias for bzclose.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$gz-&#62;gzeof(_)"
><b> $gz-&#62;gzeof( ) </b></a></h2>

<p>Alias for bzeof.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$gz-&#62;gzerror(_)"
><b> $gz-&#62;gzerror( ) </b></a></h2>

<p>Alias for bzerror.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$gz-&#62;gzsetparams(_$level,_$strategy_)"
><b> $gz-&#62;gzsetparams( $level, $strategy ) </b></a></h2>

<p>This is a no-op.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$d_=_deflateInit(_[OPTS]_)"
><b> $d = deflateInit( [OPTS] ) </b></a></h2>

<p>Alias for bzdeflateInit, with return code translation.</p>

<p>All OPTS are ignored.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$d-&#62;deflate(_$buffer_)"
><b> $d-&#62;deflate( $buffer ) </b></a></h2>

<p>Alias for bzdeflate, with return code translation.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$d-&#62;deflateParams(_[OPTS]_)"
><b> $d-&#62;deflateParams( [OPTS] ) </b></a></h2>

<p>This is a no-op.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$d-&#62;flush(_[$flushtype]_)"
><b> $d-&#62;flush( [$flushtype] ) </b></a></h2>

<p>Cover function for bzflush or bzclose, depending on $flushtype.</p>

<p>See the Compress::Zlib documentation for more information.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$d-&#62;dict_adler(_)"
><b> $d-&#62;dict_adler( ) </b></a></h2>

<p>This is a no-op.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$d-&#62;msg(_)"
><b> $d-&#62;msg( ) </b></a></h2>

<p>This is a no-op.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$d_=_inflateInit(_[OPTS]_)"
><b> $d = inflateInit( [OPTS] ) </b></a></h2>

<p>Alias for bzinflateInit, with return code translation.</p>

<p>All OPTS are ignored.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$d-&#62;inflate(_)"
><b> $d-&#62;inflate( ) </b></a></h2>

<p>Alias for bzinflate, with return code translation.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$d-&#62;inflateSync(_)"
><b> $d-&#62;inflateSync( ) </b></a></h2>

<p>This is a no-op.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$d-&#62;adler32(_$crc_)"
><b> $d-&#62;adler32( $crc ) </b></a></h2>

<p>This is a no-op.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$d-&#62;crc32(_$crc_)"
><b> $d-&#62;crc32( $crc ) </b></a></h2>

<p>This is a no-op.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$buffer_=_memGzip(_$buffer_)"
><b> $buffer = memGzip( $buffer ) </b></a></h2>

<p>Alias for memBzip.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$buffer_=_memGunzip(_$buffer_)"
><b> $buffer = memGunzip( $buffer ) </b></a></h2>

<p>Alias for memBunzip.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="IN-MEMORY_COMPRESS/UNCOMPRESS"
>IN-MEMORY COMPRESS/UNCOMPRESS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Two high-level functions are provided by <i>bzlib</i> to perform in-memory compression. They are <b>memBzip</b> and <b>memBunzip</b>. Two Perl subs are provided which provide similar functionality.</p>

<blockquote></blockquote>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$compressed_=_memBzip($buffer);"
><b>$compressed = memBzip($buffer);</b></a></h2>

<p>Compresses <b>$source</b>. If successful it returns the compressed data. Otherwise it returns <i>undef</i>.</p>

<p>The buffer parameter can either be a scalar or a scalar reference.</p>

<p>Essentially, an in-memory bzip file is created. It creates a minimal bzip header.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$uncompressed_=_memBunzip($buffer);"
><b>$uncompressed = memBunzip($buffer);</b></a></h2>

<p>Uncompresses <b>$source</b>. If successful it returns the uncompressed data. Otherwise it returns <i>undef</i>.</p>

<p>The source buffer can either be a scalar or a scalar reference.</p>

<p>The buffer parameter can either be a scalar or a scalar reference. The contents of the buffer parameter are destroyed after calling this function.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="STREAM_DEFLATE"
>STREAM DEFLATE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Perl interface will <i>always</i> consume the complete input buffer before returning. Also the output buffer returned will be automatically grown to fit the amount of output available.</p>

<p>Here is a definition of the interface available:</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="($d,_$status)_=_bzdeflateInit(_[PARAMS]_)"
><b>($d, $status) = bzdeflateInit( [PARAMS] )</b></a></h2>

<p>Initialises a deflation stream.</p>

<p>If successful, it will return the initialised deflation stream, <b>$d</b> and <b>$status</b> of <code>BZ_OK</code> in a list context. In scalar context it returns the deflation stream, <b>$d</b>, only.</p>

<p>If not successful, the returned deflation stream (<b>$d</b>) will be <i>undef</i> and <b>$status</b> will hold the exact <i>bzip2</i> error code.</p>

<p>The function optionally takes a number of named options specified as <code>-Name=&#62;value</code> pairs. This allows individual options to be tailored without having to specify them all in the parameter list.</p>

<p>Here is a list of the valid options:</p>

<dl>
<dt><a name='verbosity'></a><a name="-verbosity"
><b>-verbosity</b></a></dt>

<dd>
<p>Defines the verbosity level. Valid values are 0 through 4,</p>

<p>The default is <code>-verbosity =&#62; 0</code>.</p>

<dt><a name='blockSize100k'></a><a name="-blockSize100k"
><b>-blockSize100k</b></a></dt>

<dd>
<p>Defines the buffering factor of compression method. The algorithm buffers all data until the buffer is full, then it flushes all the data out. Use -blockSize100k to specify the size of the buffer.</p>

<p>Valid settings are 1 through 9, representing a blocking in multiples of 100k.</p>

<p>Note that each such block has an overhead of leading and trailing synchronization bytes. bzip2 recovery uses this information to pull useable data out of a corrupted file.</p>

<p>A streaming application would probably want to set the blocking low.</p>

<dt><a name='workFactor'></a><a name="-workFactor"
><b>-workFactor</b></a></dt>

<dd>
<p>The workFactor setting tells the deflation algorithm how much work to invest to compensate for repetitive data.</p>

<p>workFactor may be a number from 0 to 250 inclusive. The default setting is 30.</p>

<p>See the bzip documentation for more information.</p>
</dd>
</dl>

<p>Here is an example of using the <b>deflateInit</b> optional parameter list to override the default buffer size and compression level. All other options will take their default values.</p>

<pre class="sh_perl">    bzdeflateInit( -blockSize100k =&#62; 1, -verbosity =&#62; 1 );</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="($out,_$status)_=_$d-&#62;bzdeflate($buffer)"
><b>($out, $status) = $d-&#62;bzdeflate($buffer)</b></a></h2>

<p>Deflates the contents of <b>$buffer</b>. The buffer can either be a scalar or a scalar reference. When finished, <b>$buffer</b> will be completely processed (assuming there were no errors). If the deflation was successful it returns deflated output, <b>$out</b>, and a status value, <b>$status</b>, of <code>Z_OK</code>.</p>

<p>On error, <b>$out</b> will be <i>undef</i> and <b>$status</b> will contain the <i>zlib</i> error code.</p>

<p>In a scalar context <b>bzdeflate</b> will return <b>$out</b> only.</p>

<p>As with the internal buffering of the <i>deflate</i> function in <i>bzip2</i>, it is not necessarily the case that any output will be produced by this method. So don&#39;t rely on the fact that <b>$out</b> is empty for an error test. In fact, given the size of bzdeflates internal buffer, with most files it&#39;s likely you won&#39;t see any output at all until flush or close.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="($out,_$status)_=_$d-&#62;bzflush([flush_type])"
><b>($out, $status) = $d-&#62;bzflush([flush_type])</b></a></h2>

<p>Typically used to finish the deflation. Any pending output will be returned via <b>$out</b>. <b>$status</b> will have a value <code>BZ_OK</code> if successful.</p>

<p>In a scalar context <b>bzflush</b> will return <b>$out</b> only.</p>

<p>Note that flushing can seriously degrade the compression ratio, so it should only be used to terminate a decompression (using <code>BZ_FLUSH</code>) or when you want to create a <i>full flush point</i> (using <code>BZ_FINISH</code>).</p>

<p>The allowable values for <code>flush_type</code> are <code>BZ_FLUSH</code> and <code>BZ_FINISH</code>.</p>

<p>For a handle opened for &#34;w&#34; (bzwrite), the default is <code>BZ_FLUSH</code>. For a stream, the default for <code>flush_type</code> is <code>BZ_FINISH</code> (which is essentially a close and reopen).</p>

<p>It is strongly recommended that you only set the <code>flush_type</code> parameter if you fully understand the implications of what it does. See the <code>bzip2</code> documentation for details.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Example"
>Example</a></h2>

<p>Here is a trivial example of using <b>bzdeflate</b>. It simply reads standard input, deflates it and writes it to standard output.</p>

<pre class="sh_perl">    use strict ;
    use warnings ;

    use Compress::Bzip2 ;

    binmode STDIN;
    binmode STDOUT;
    my $x = bzdeflateInit()
       or die &#34;Cannot create a deflation stream\n&#34; ;

    my ($output, $status) ;
    while (&#60;&#62;)
    {
        ($output, $status) = $x-&#62;bzdeflate($_) ;
    
        $status == BZ_OK
            or die &#34;deflation failed\n&#34; ;
    
        print $output ;
    }
    
    ($output, $status) = $x-&#62;bzclose() ;
    
    $status == BZ_OK
        or die &#34;deflation failed\n&#34; ;
    
    print $output ;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="STREAM_INFLATE"
>STREAM INFLATE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Here is a definition of the interface:</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="($i,_$status)_=_inflateInit()"
><b>($i, $status) = inflateInit()</b></a></h2>

<p>Initialises an inflation stream.</p>

<p>In a list context it returns the inflation stream, <b>$i</b>, and the <i>zlib</i> status code (<b>$status</b>). In a scalar context it returns the inflation stream only.</p>

<p>If successful, <b>$i</b> will hold the inflation stream and <b>$status</b> will be <code>BZ_OK</code>.</p>

<p>If not successful, <b>$i</b> will be <i>undef</i> and <b>$status</b> will hold the <i>bzlib.h</i> error code.</p>

<p>The function optionally takes a number of named options specified as <code>-Name=&#62;value</code> pairs. This allows individual options to be tailored without having to specify them all in the parameter list.</p>

<p>For backward compatibility, it is also possible to pass the parameters as a reference to a hash containing the name=&#62;value pairs.</p>

<p>The function takes one optional parameter, a reference to a hash. The contents of the hash allow the deflation interface to be tailored.</p>

<p>Here is a list of the valid options:</p>

<dl>
<dt><a name='small'></a><a name="-small"
><b>-small</b></a></dt>

<dd>
<p><b>small</b> may be 0 or 1. Set <code>small</code> to one to use a slower, less memory intensive algorithm.</p>

<dt><a name='verbosity'></a><a name="-verbosity"
><b>-verbosity</b></a></dt>

<dd>
<p>Defines the verbosity level. Valid values are 0 through 4,</p>

<p>The default is <code>-verbosity =&#62; 0</code>.</p>
</dd>
</dl>

<p>Here is an example of using the <b>bzinflateInit</b> optional parameter.</p>

<pre class="sh_perl">    bzinflateInit( -small =&#62; 1, -verbosity =&#62; 1 );</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="($out,_$status)_=_$i-&#62;bzinflate($buffer)"
><b>($out, $status) = $i-&#62;bzinflate($buffer)</b></a></h2>

<p>Inflates the complete contents of <b>$buffer</b>. The buffer can either be a scalar or a scalar reference.</p>

<p>Returns <code>BZ_OK</code> if successful and <code>BZ_STREAM_END</code> if the end of the compressed data has been successfully reached. If not successful, <b>$out</b> will be <i>undef</i> and <b>$status</b> will hold the <i>bzlib</i> error code.</p>

<p>The <code>$buffer</code> parameter is modified by <code>bzinflate</code>. On completion it will contain what remains of the input buffer after inflation. This means that <code>$buffer</code> will be an empty string when the return status is <code>BZ_OK</code>. When the return status is <code>BZ_STREAM_END</code> the <code>$buffer</code> parameter will contains what (if anything) was stored in the input buffer after the deflated data stream.</p>

<p>This feature is useful when processing a file format that encapsulates a compressed data stream.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Example"
>Example</a></h2>

<p>Here is an example of using <b>bzinflate</b>.</p>

<pre class="sh_perl">    use strict ;
    use warnings ;
    
    use Compress::Bzip2;
    
    my $x = bzinflateInit()
       or die &#34;Cannot create a inflation stream\n&#34; ;
    
    my $input = &#39;&#39; ;
    binmode STDIN;
    binmode STDOUT;
    
    my ($output, $status) ;
    while (read(STDIN, $input, 4096))
    {
        ($output, $status) = $x-&#62;bzinflate(\$input) ;
    
        print $output 
            if $status == BZ_OK or $status == BZ_STREAM_END ;
    
        last if $status != BZ_OK ;
    }
    
    die &#34;inflation failed\n&#34;
        unless $status == BZ_STREAM_END ;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Here are some example scripts of using the interface.</p>

<blockquote></blockquote>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="A_bzcat_function"
><b>A bzcat function</b></a></h2>

<pre class="sh_perl">  use strict ;
  use warnings ;
    
  use Compress::Bzip2 ;
    
  die &#34;Usage: bzcat file...\n&#34; unless @ARGV ;
    
  my $file ;
    
  foreach $file (@ARGV) {
    my $buffer ;
    
    my $bz = bzopen($file, &#34;rb&#34;) 
       or die &#34;Cannot open $file: $bzerrno\n&#34; ;
    
    print $buffer while $bz-&#62;bzread($buffer) &#62; 0 ;
    
    die &#34;Error reading from $file: $bzerrno&#34; . ($bzerrno+0) . &#34;\n&#34; 
       if $bzerrno != BZ_STREAM_END ;
        
    $bz-&#62;bzclose() ;
  }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="A_grep_using_bzreadline"
><b>A grep using bzreadline</b></a></h2>

<pre class="sh_perl">  use strict ;
  use warnings ;
    
  use Compress::Bzip2 ;
    
  die &#34;Usage: bzgrep pattern file...\n&#34; unless @ARGV &#62;= 2;
    
  my $pattern = shift ;
    
  my $file ;
    
  foreach $file (@ARGV) {
    my $bz = bzopen($file, &#34;rb&#34;) 
       or die &#34;Cannot open $file: $bzerrno\n&#34; ;
    
    while ($bz-&#62;bzreadline($_) &#62; 0) {
      print if /$pattern/ ;
    }
    
    die &#34;Error reading from $file: $bzerrno\n&#34; 
      if $bzerrno != Z_STREAM_END ;
        
    $bz-&#62;bzclose() ;
  }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Streaming_Compression"
><b>Streaming Compression</b></a></h2>

<p>This script, <i>bzstream</i>, does the opposite of the <i>bzcat</i> script above. It reads from standard input and writes a bzip file to standard output.</p>

<pre class="sh_perl">  use strict ;
  use warnings ;
    
  use Compress::Bzip2 ;
    
  binmode STDOUT;       # bzopen only sets it on the fd
    
  my $bz = bzopen(\*STDOUT, &#34;wb&#34;)
     or die &#34;Cannot open stdout: $bzerrno\n&#34; ;
    
  while (&#60;&#62;) {
    $bz-&#62;bzwrite($_) or die &#34;error writing: $bzerrno\n&#34; ;
  }

  $bz-&#62;bzclose ;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORT"
>EXPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Use the tags :all, :utilities, :constants, :bzip1 and :gzip.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Export_tag_:all"
>Export tag :all</a></h2>

<p>This exports all the exportable methods.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Export_tag_:constants"
>Export tag :constants</a></h2>

<p>This exports only the BZ_* constants.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Export_tag_:bzip1"
>Export tag :bzip1</a></h2>

<p>This exports the Compress::Bzip2 1.x functions, for compatibility.</p>

<pre class="sh_perl">   compress
   decompress
   compress_init
   decompress_init
   version</pre>

<p>These are actually aliases to memBzip and memBunzip.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Export_tag_:utilities"
>Export tag :utilities</a></h2>

<p>This gives an interface to the bzip2 methods.</p>

<pre class="sh_perl">    bzopen
    bzinflateInit
    bzdeflateInit
    memBzip
    memBunzip
    bzip2
    bunzip2
    bzcat
    bzlibversion
    $bzerrno</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Export_tag_:gzip"
>Export tag :gzip</a></h2>

<p>This gives compatibility with Compress::Zlib.</p>

<pre class="sh_perl">    gzopen
    gzinflateInit
    gzdeflateInit
    memGzip
    memGunzip
    $gzerrno</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Exportable_constants"
>Exportable constants <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>All the <i>bzlib</i> constants are automatically imported when you make use of <i>Compress::Bzip2</i>.</p>

<pre class="sh_perl">  BZ_CONFIG_ERROR
  BZ_DATA_ERROR
  BZ_DATA_ERROR_MAGIC
  BZ_FINISH
  BZ_FINISH_OK
  BZ_FLUSH
  BZ_FLUSH_OK
  BZ_IO_ERROR
  BZ_MAX_UNUSED
  BZ_MEM_ERROR
  BZ_OK
  BZ_OUTBUFF_FULL
  BZ_PARAM_ERROR
  BZ_RUN
  BZ_RUN_OK
  BZ_SEQUENCE_ERROR
  BZ_STREAM_END
  BZ_UNEXPECTED_EOF</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The documentation for zlib, bzip2 and <a href="/perldoc?Compress%3A%3AZlib" class="podlinkpod"
>Compress::Zlib</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Rob Janes, &#60;arjay at cpan.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (C) 2005 by Rob Janes</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself, either Perl version 5.8.3 or, at your option, any later version of Perl 5 you may have available.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <i>Compress::Bzip2</i> module was originally written by Gawdi Azem <em>azemgi@rupert.informatik.uni-stuttgart.de</em>.</p>

<p>The first <i>Compress::Bzip2</i> module was written by Gawdi Azem <em>azemgi@rupert.informatik.uni-stuttgart.de</em>. It provided an interface to the in memory inflate and deflate routines.</p>

<p><i>Compress::Bzip2</i> was subsequently passed on to Marco Carnut <em>kiko@tempest.com.br</em> who shepharded it through to version 1.03, a set of changes which included upgrades to handle bzlib 1.0.2, and improvements to the in memory inflate and deflate routines. The streaming interface and error information were added by David Robins <em>dbrobins@davidrobins.net</em>.</p>

<p>Version 2 of <i>Compress::Bzip2</i> is due to Rob Janes, of arjay@cpan.org. This release is intended to give an interface close to that of Compress::Zlib. It&#39;s development forks from 1.00, not 1.03, so the streaming interface is not the same as that in 1.03, although apparently compatible as it passes the 1.03 test suite.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MODIFICATION_HISTORY"
>MODIFICATION HISTORY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>See the Changes file.</p>

<p>2.00 Second public release of <i>Compress::Bzip2</i>.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78276 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 03:30:48 2012 GMT (0.25879693031311) @cpansearch1 -->
 </body>
</html>
