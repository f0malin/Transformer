<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Win32::API - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Win32-API",3]);
    _gaq.push(["_setCustomVar",5,"Release","Win32-API-0.68",3]);
    _gaq.push(["_setCustomVar",3,"Module","Win32::API",3]);
    _gaq.push(["_setCustomVar",1,"Author","COSIMO",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Win32::API">permalink</a></div>
  <a href="/~cosimo/">Cosimo Streppone</a> &gt;
  <a href="/~cosimo/Win32-API-0.68/">Win32-API-0.68</a> &gt;
  Win32::API
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/5ff5e7f57a011f5c49781459e66ad61f?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/C/CO/COSIMO/Win32-API-0.68.tar.gz">Win32-API-0.68.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Win32%3A%3AAPI;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~COSIMO/Win32-API-0.68/API.pm">Annotate this POD
(1)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Win32%3A%3AOLE">Win32::OLE</a><br>
<a href="/perldoc?Win32%3A%3AGUI">Win32::GUI</a><br>
<a href="/perldoc?Inline%3A%3AC">Inline::C</a><br>
<a href="/perldoc?Time%3A%3AHiRes">Time::HiRes</a><br>
<a href="/perldoc?Win32%3A%3AProcess">Win32::Process</a><br>
<a href="/perldoc?Win32API%3A%3AFile">Win32API::File</a><br>
<a href="/perldoc?File%3A%3AFind">File::Find</a><br>
<a href="/perldoc?Win32%3A%3AGuiTest">Win32::GuiTest</a><br>
<a href="/perldoc?Win32%3A%3ASerialPort">Win32::SerialPort</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Win32%3A%3AAPI">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 5</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 7</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Win32-API">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.68 &nbsp;
<span class="noprint">
  <a href="/src/COSIMO/Win32-API-0.68/API.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#ABSTRACT'>ABSTRACT</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#IMPORTING_A_FUNCTION'>IMPORTING A FUNCTION</a>
    <li class='indexItem indexItem2'><a href='#IMPORTING_A_FUNCTION_BY_PROTOTYPE'>IMPORTING A FUNCTION BY PROTOTYPE</a>
    <li class='indexItem indexItem2'><a href='#IMPORTING_A_FUNCTION_WITH_A_PARAMETER_LIST'>IMPORTING A FUNCTION WITH A PARAMETER LIST</a>
    <li class='indexItem indexItem2'><a href='#CALLING_AN_IMPORTED_FUNCTION'>CALLING AN IMPORTED FUNCTION</a>
    <li class='indexItem indexItem2'><a href='#USING_STRUCTURES'>USING STRUCTURES</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#MAINTAINER'>MAINTAINER</a>
  <li class='indexItem indexItem1'><a href='#LICENSE'>LICENSE</a>
  <li class='indexItem indexItem1'><a href='#CREDITS'>CREDITS</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Win32::API - Perl Win32 API Import Facility</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  #### Method 1: with prototype

  use Win32::API;
  $function = Win32::API-&#62;new(
      &#39;mydll, &#39;int sum_integers(int a, int b)&#39;,
  );
  $return = $function-&#62;Call(3, 2);
  
  #### Method 2: with parameter list
  
  use Win32::API;
  $function = Win32::API-&#62;new(
      &#39;mydll&#39;, &#39;sum_integers&#39;, &#39;II&#39;, &#39;I&#39;,
  );
  $return = $function-&#62;Call(3, 2);
  
  #### Method 3: with Import
 
  use Win32::API;
  Win32::API-&#62;Import(
      &#39;mydll&#39;, &#39;int sum_integers(int a, int b)&#39;,
  );  
  $return = sum_integers(3, 2);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ABSTRACT"
>ABSTRACT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>With this module you can import and call arbitrary functions from Win32&#39;s Dynamic Link Libraries (DLL), without having to write an XS extension. Note, however, that this module can&#39;t do everything. In fact, parameters input and output is limited to simpler cases.</p>

<p>A regular <b>XS</b> extension is always safer and faster anyway.</p>

<p>The current version of Win32::API is always available at your nearest CPAN mirror:</p>

<pre class="sh_perl">  <a href="http://search.cpan.org/dist/Win32-API/" class="podlinkurl"
>http://search.cpan.org/dist/Win32-API/</a></pre>

<p>A short example of how you can use this module (it just gets the PID of the current process, eg. same as Perl&#39;s internal <code>$$</code>):</p>

<pre class="sh_perl">    use Win32::API;
    Win32::API-&#62;Import(&#34;kernel32&#34;, &#34;int GetCurrentProcessId()&#34;);
    $PID = GetCurrentProcessId();</pre>

<p>The possibilities are nearly infinite (but not all are good :-). Enjoy it.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>To use this module put the following line at the beginning of your script:</p>

<pre class="sh_perl">    use Win32::API;</pre>

<p>You can now use the <code>new()</code> function of the Win32::API module to create a new Win32::API object (see <a href="#IMPORTING_A_FUNCTION" class="podlinkpod"
>&#34;IMPORTING A FUNCTION&#34;</a>) and then invoke the <code>Call()</code> method on this object to perform a call to the imported API (see <a href="#CALLING_AN_IMPORTED_FUNCTION" class="podlinkpod"
>&#34;CALLING AN IMPORTED FUNCTION&#34;</a>).</p>

<p>Starting from version 0.40, you can also avoid creating a Win32::API object and instead automatically define a Perl sub with the same name of the API function you&#39;re importing. The details of the API definitions are the same, just the call is different:</p>

<pre class="sh_perl">    my $GetCurrentProcessId = Win32::API-&#62;new(
        &#34;kernel32&#34;, &#34;int GetCurrentProcessId()&#34;
    );
    my $PID = $GetCurrentProcessId-&#62;Call();

    #### vs.

    Win32::API-&#62;Import(&#34;kernel32&#34;, &#34;int GetCurrentProcessId()&#34;);
    $PID = GetCurrentProcessId();</pre>

<p>Note that <code>Import</code> returns 1 on success and 0 on failure (in which case you can check the content of <code>$^E</code>).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="IMPORTING_A_FUNCTION"
>IMPORTING A FUNCTION</a></h2>

<p>You can import a function from a 32 bit Dynamic Link Library (DLL) file with the <code>new()</code> function. This will create a Perl object that contains the reference to that function, which you can later <code>Call()</code>.</p>

<p>What you need to know is the prototype of the function you&#39;re going to import (eg. the definition of the function expressed in C syntax).</p>

<p>Starting from version 0.40, there are 2 different approaches for this step: (the preferred) one uses the prototype directly, while the other (now deprecated) one uses Win32::API&#39;s internal representation for parameters.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="IMPORTING_A_FUNCTION_BY_PROTOTYPE"
>IMPORTING A FUNCTION BY PROTOTYPE</a></h2>

<p>You need to pass 2 parameters:</p>

<ol>
<li>The name of the library from which you want to import the function.</li>

<li>The C prototype of the function.</li>
</ol>

<p>When calling a function imported with a prototype, if you pass an undefined Perl scalar to one of its arguments, it will be automatically turned into a C <code>NULL</code> value.</p>

<p>See <a href="/~cosimo/Win32-API-0.68/Type.pm" class="podlinkpod"
>Win32::API::Type</a> for a list of the known parameter types and <a href="/~cosimo/Win32-API-0.68/Struct.pm" class="podlinkpod"
>Win32::API::Struct</a> for information on how to define a structure.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="IMPORTING_A_FUNCTION_WITH_A_PARAMETER_LIST"
>IMPORTING A FUNCTION WITH A PARAMETER LIST</a></h2>

<p>You need to pass 4 parameters:</p>

<dl>
<dt><a name='1'></a><a name="1._The_name_of_the_library_from_which_you_want_to_import_the_function."
>1. The name of the library from which you want to import the function.</a></dt>

<dd>
<dt><a name='2'></a><a name="2._The_name_of_the_function_(as_exported_by_the_library)."
>2. The name of the function (as exported by the library).</a></dt>

<dd>
<dt><a name='3'></a><a name="3._The_number_and_types_of_the_arguments_the_function_expects_as_input."
>3. The number and types of the arguments the function expects as input.</a></dt>

<dd>
<dt><a name='4'></a><a name="4._The_type_of_the_value_returned_by_the_function."
>4. The type of the value returned by the function.</a></dt>

<dd>
<dt><a 
>5. And optionally you can specify the calling convention, this defaults to &#39;__stdcall&#39;, alternatively you can specify &#39;_cdecl&#39;.</a></dt>
</dl>

<p>To better explain their meaning, let&#39;s suppose that we want to import and call the Win32 API <code>GetTempPath()</code>. This function is defined in C as:</p>

<pre class="sh_perl">    DWORD WINAPI GetTempPathA( DWORD nBufferLength, LPSTR lpBuffer );</pre>

<p>This is documented in the <b>Win32 SDK Reference</b>; you can look for it on the Microsoft&#39;s WWW site, or in your C compiler&#39;s documentation, if you own one.</p>

<dl>
<dt><a name='1'></a><a name="1."
><b>1.</b></a></dt>

<dd>
<p>The first parameter is the name of the library file that exports this function; our function resides in the <em>KERNEL32.DLL</em> system file.</p>

<p>When specifying this name as parameter, the <em>.DLL</em> extension is implicit, and if no path is given, the file is searched through a couple of directories, including:</p>

<dl>
<dt><a name='1'></a><a name="1._The_directory_from_which_the_application_loaded."
>1. The directory from which the application loaded.</a></dt>

<dd>
<dt><a name='2'></a><a name="2._The_current_directory."
>2. The current directory.</a></dt>

<dd>
<dt><a name='3'></a><a name="3._The_Windows_system_directory_(eg._c:\windows\system_or_system32)."
>3. The Windows system directory (eg. c:\windows\system or system32).</a></dt>

<dd>
<dt><a name='4'></a><a name="4._The_Windows_directory_(eg._c:\windows)."
>4. The Windows directory (eg. c:\windows).</a></dt>

<dd>
<dt><a name='5'></a><a name="5._The_directories_that_are_listed_in_the_PATH_environment_variable."
>5. The directories that are listed in the PATH environment variable.</a></dt>
</dl>

<p>So, you don&#39;t have to write <em>C:\windows\system\kernel32.dll</em>; only <em>kernel32</em> is enough:</p>

<pre class="sh_perl">    $GetTempPath = new Win32::API(&#39;kernel32&#39;, ...</pre>

<dt><a name='2'></a><a name="2."
><b>2.</b></a></dt>

<dd>
<p>Now for the second parameter: the name of the function. It must be written exactly as it is exported by the library (case is significant here). If you are using Windows 95 or NT 4.0, you can use the <b>Quick View</b> command on the DLL file to see the function it exports. Remember that you can only import functions from 32 bit DLLs: in Quick View, the file&#39;s characteristics should report somewhere &#34;32 bit word machine&#34;; as a rule of thumb, when you see that all the exported functions are in upper case, the DLL is a 16 bit one and you can&#39;t use it. If their capitalization looks correct, then it&#39;s probably a 32 bit DLL.</p>

<p>Also note that many Win32 APIs are exported twice, with the addition of a final <b>A</b> or <b>W</b> to their name, for - respectively - the ASCII and the Unicode version. When a function name is not found, Win32::API will actually append an <b>A</b> to the name and try again; if the extension is built on a Unicode system, then it will try with the <b>W</b> instead. So our function name will be:</p>

<pre class="sh_perl">    $GetTempPath = new Win32::API(&#39;kernel32&#39;, &#39;GetTempPath&#39;, ...</pre>

<p>In our case <code>GetTempPath</code> is really loaded as <code>GetTempPathA</code>.</p>

<dt><a name='3'></a><a name="3."
><b>3.</b></a></dt>

<dd>
<p>The third parameter, the input parameter list, specifies how many arguments the function wants, and their types. It can be passed as a single string, in which each character represents one parameter, or as a list reference. The following forms are valid:</p>

<pre class="sh_perl">    &#34;abcd&#34;
    [a, b, c, d]
    \@LIST</pre>

<p>But those are not:</p>

<pre class="sh_perl">    (a, b, c, d)
    @LIST</pre>

<p>The number of characters, or elements in the list, specifies the number of parameters, and each character or element specifies the type of an argument; allowed types are:</p>

<dl>
<dt><a name='I'></a><a name="I:_value_is_an_integer_(int)"
><code>I</code>: value is an integer (int)</a></dt>

<dd>
<dt><a name='N'></a><a name="N:_value_is_a_number_(long)"
><code>N</code>: value is a number (long)</a></dt>

<dd>
<dt><a name='F'></a><a name="F:_value_is_a_floating_point_number_(float)"
><code>F</code>: value is a floating point number (float)</a></dt>

<dd>
<dt><a name='D'></a><a name="D:_value_is_a_double_precision_number_(double)"
><code>D</code>: value is a double precision number (double)</a></dt>

<dd>
<dt><a name='C'></a><a name="C:_value_is_a_char_(char)"
><code>C</code>: value is a char (char)</a></dt>

<dd>
<dt><a name='P'></a><a name="P:_value_is_a_pointer_(to_a_string,_structure,_etc...)"
><code>P</code>: value is a pointer (to a string, structure, etc...)</a></dt>

<dd>
<dt><a name='S'></a><a name="S:_value_is_a_Win32::API::Struct_object_(see_below)"
><code>S</code>: value is a Win32::API::Struct object (see below)</a></dt>

<dd>
<dt><a name='K'></a><a name="K:_value_is_a_Win32::API::Callback_object_(see_Win32::API::Callback)"
><code>K</code>: value is a Win32::API::Callback object (see <a href="/~cosimo/Win32-API-0.68/Callback.pm" class="podlinkpod"
>Win32::API::Callback</a>)</a></dt>
</dl>

<p>Our function needs two parameters: a number (<code>DWORD</code>) and a pointer to a string (<code>LPSTR</code>):</p>

<pre class="sh_perl">    $GetTempPath = new Win32::API(&#39;kernel32&#39;, &#39;GetTempPath&#39;, &#39;NP&#39;, ...</pre>

<dt><a name='4'></a><a name="4."
><b>4.</b></a></dt>

<dd>
<p>The fourth and final parameter is the type of the value returned by the function. It can be one of the types seen above, plus another type named <b>V</b> (for <code>void</code>), used for functions that do not return a value. In our example the value returned by GetTempPath() is a <code>DWORD</code>, so our return type will be <b>N</b>:</p>

<pre class="sh_perl">    $GetTempPath = new Win32::API(&#39;kernel32&#39;, &#39;GetTempPath&#39;, &#39;NP&#39;, &#39;N&#39;);</pre>

<p>Now the line is complete, and the GetTempPath() API is ready to be used in Perl. Before calling it, you should test that $GetTempPath is <code>defined</code>, otherwise either the function or the library could not be loaded; in this case, <code>$!</code> will be set to the error message reported by Windows. Our definition, with error checking added, should then look like this:</p>

<pre class="sh_perl">    $GetTempPath = new Win32::API(&#39;kernel32&#39;, &#39;GetTempPath&#39;, &#39;NP&#39;, &#39;N&#39;);
    if(not defined $GetTempPath) {
        die &#34;Can&#39;t import API GetTempPath: $!\n&#34;;
    }</pre>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CALLING_AN_IMPORTED_FUNCTION"
>CALLING AN IMPORTED FUNCTION</a></h2>

<p>To effectively make a call to an imported function you must use the Call() method on the Win32::API object you created. Continuing with the example from the previous paragraph, the GetTempPath() API can be called using the method:</p>

<pre class="sh_perl">    $GetTempPath-&#62;Call(...</pre>

<p>Of course, parameters have to be passed as defined in the import phase. In particular, if the number of parameters does not match (in the example, if GetTempPath() is called with more or less than two parameters), Perl will <code>croak</code> an error message and <code>die</code>.</p>

<p>The two parameters needed here are the length of the buffer that will hold the returned temporary path, and a pointer to the buffer itself. For numerical parameters, you can use either a constant expression or a variable, while <b>for pointers you must use a variable name</b> (no Perl references, just a plain variable name). Also note that <b>memory must be allocated before calling the function</b>, just like in C. For example, to pass a buffer of 80 characters to GetTempPath(), it must be initialized before with:</p>

<pre class="sh_perl">    $lpBuffer = &#34; &#34; x 80;</pre>

<p>This allocates a string of 80 characters. If you don&#39;t do so, you&#39;ll probably get <code>Runtime exception</code> errors, and generally nothing will work. The call should therefore include:</p>

<pre class="sh_perl">    $lpBuffer = &#34; &#34; x 80;
    $GetTempPath-&#62;Call(80, $lpBuffer);</pre>

<p>And the result will be stored in the $lpBuffer variable. Note that you don&#39;t need to pass a reference to the variable (eg. you <b>don&#39;t need</b> <code>\$lpBuffer</code>), even if its value will be set by the function.</p>

<p>A little problem here is that Perl does not trim the variable, so $lpBuffer will still contain 80 characters in return; the exceeding characters will be spaces, because we said <code>&#34; &#34; x 80</code>.</p>

<p>In this case we&#39;re lucky enough, because the value returned by the GetTempPath() function is the length of the string, so to get the actual temporary path we can write:</p>

<pre class="sh_perl">    $lpBuffer = &#34; &#34; x 80;
    $return = $GetTempPath-&#62;Call(80, $lpBuffer);
    $TempPath = substr($lpBuffer, 0, $return);</pre>

<p>If you don&#39;t know the length of the string, you can usually cut it at the <code>\0</code> (ASCII zero) character, which is the string delimiter in C:</p>

<pre class="sh_perl">    $TempPath = ((split(/\0/, $lpBuffer))[0];  
    # or    
    $lpBuffer =~ s/\0.*$//;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="USING_STRUCTURES"
>USING STRUCTURES</a></h2>

<p>Starting from version 0.40, Win32::API comes with a support package named Win32::API::Struct. The package is loaded automatically with Win32::API, so you don&#39;t need to use it explicitly.</p>

<p>With this module you can conveniently define structures and use them as parameters to Win32::API functions. A short example follows:</p>

<pre class="sh_perl">    # the &#39;POINT&#39; structure is defined in C as:
    #     typedef struct {
    #        LONG  x;
    #        LONG  y;
    #     } POINT;
    

    #### define the structure
    Win32::API::Struct-&#62;typedef( POINT =&#62; qw{
        LONG x; 
        LONG y; 
    });
    
    #### import an API that uses this structure
    Win32::API-&#62;Import(&#39;user32&#39;, &#39;BOOL GetCursorPos(LPPOINT lpPoint)&#39;);
    
    #### create a &#39;POINT&#39; object
    my $pt = Win32::API::Struct-&#62;new(&#39;POINT&#39;);
    
    #### call the function passing our structure object
    GetCursorPos($pt);
    
    #### and now, access its members
    print &#34;The cursor is at: $pt-&#62;{x}, $pt-&#62;{y}\n&#34;;</pre>

<p>Note that this works only when the function wants a <b>pointer to a structure</b>: as you can see, our structure is named &#39;POINT&#39;, but the API used &#39;LPPOINT&#39;. &#39;LP&#39; is automatically added at the beginning of the structure name when feeding it to a Win32::API call.</p>

<p>For more information, see also <a href="/~cosimo/Win32-API-0.68/Struct.pm" class="podlinkpod"
>Win32::API::Struct</a>.</p>

<p>If you don&#39;t want (or can&#39;t) use the <code>Win32::API::Struct</code> facility, you can still use the low-level approach to use structures:</p>

<ol>
<li>you have to pack() the required elements in a variable:
<pre class="sh_perl">    $lpPoint = pack(&#39;LL&#39;, 0, 0); # store two LONGs</pre>
</li>

<li>to access the values stored in a structure, unpack() it as required:
<pre class="sh_perl">    ($x, $y) = unpack(&#39;LL&#39;, $lpPoint); # get the actual values</pre>
</li>
</ol>

<p>The rest is left as an exercise to the reader...</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Aldo Calpini ( <i>dada@perl.it</i> ).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MAINTAINER"
>MAINTAINER <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Cosimo Streppone ( <i>cosimo@cpan.org</i> )</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE"
>LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>To finally clarify this, <code>Win32::API</code> is OSI-approved free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>See <a href="http://dev.perl.org/licenses/artistic.html" class="podlinkurl"
>http://dev.perl.org/licenses/artistic.html</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CREDITS"
>CREDITS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>All the credits go to Andrea Frosini for the neat assembler trick that makes this thing work. I&#39;ve also used some work by Dave Roth for the prototyping stuff. A big thank you also to Gurusamy Sarathy for his unvaluable help in XS development, and to all the Perl community for being what it is.</p>

<p>Cosimo also wants to personally thank everyone that contributed to Win32::API with complaints, emails, patches, RT bug reports and so on.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78052 Uploads, 24684 Distributions
105889 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 21 18:22:29 2012 GMT (0.161036968231201) @cpansearch1 -->
 </body>
</html>
