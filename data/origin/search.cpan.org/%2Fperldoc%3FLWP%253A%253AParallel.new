<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>LWP::Parallel - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","ParallelUserAgent",3]);
    _gaq.push(["_setCustomVar",5,"Release","ParallelUserAgent-2.57",3]);
    _gaq.push(["_setCustomVar",3,"Module","LWP::Parallel",3]);
    _gaq.push(["_setCustomVar",1,"Author","MARCLANG",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?LWP::Parallel">permalink</a></div>
  <a href="/~marclang/">Marc Langheinrich</a> &gt;
  <a href="/~marclang/ParallelUserAgent-2.57/">ParallelUserAgent-2.57</a> &gt;
  LWP::Parallel
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/b9aa4b20ef337625bf9686367c172efa?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/M/MA/MARCLANG/ParallelUserAgent-2.57.tar.gz">ParallelUserAgent-2.57.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=LWP%3A%3AParallel;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~MARCLANG/ParallelUserAgent-2.57/lib/LWP/Parallel.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?LWP%3A%3AUserAgent">LWP::UserAgent</a><br>
<a href="/perldoc?LWP%3A%3ASimple">LWP::Simple</a><br>
<a href="/perldoc?HTTP%3A%3ARequest">HTTP::Request</a><br>
<a href="/perldoc?HTTP%3A%3AGHTTP">HTTP::GHTTP</a><br>
<a href="/perldoc?IO%3A%3ASocket">IO::Socket</a><br>
<a href="/perldoc?WWW%3A%3ASearch">WWW::Search</a><br>
<a href="/perldoc?Time%3A%3AHiRes">Time::HiRes</a><br>
<a href="/perldoc?Thread%3A%3APool">Thread::Pool</a><br>
<a href="/perldoc?URI%3A%3AURL">URI::URL</a><br>
<a href="/perldoc?WWW%3A%3AMechanize">WWW::Mechanize</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=LWP%3A%3AParallel">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 9</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=ParallelUserAgent">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.57 &nbsp;
<span class="noprint">
  <a href="/src/MARCLANG/ParallelUserAgent-2.57/lib/LWP/Parallel.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Introduction'>Introduction</a>
    <li class='indexItem indexItem2'><a href='#Examples'>Examples</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>LWP::Parallel - Extension for LWP to allow parallel HTTP and FTP access</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use LWP::Parallel;
  print &#34;This is LWP::Parallel_$LWP::Parallel::VERSION\n&#34;;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Introduction"
>Introduction</a></h2>

<p>ParallelUserAgent is an extension to the existing libwww module. It allows you to take a list of URLs (it currently supports HTTP, FTP, and FILE URLs. HTTPS might work, too) and connect to all of them _in parallel_, then wait for the results to come in.</p>

<p>See the Parallel::UserAgent for how to create a LWP UserAgent that will access multiple Web resources in parallel. The Parallel::RobotUA module will additionally offer proper handling of robot.txt file, the de-facto exclusion protocol for Web Robots.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Examples"
>Examples</a></h2>

<p>The following examples might help to get you started:</p>

<pre class="sh_perl">  require LWP::Parallel::UserAgent;
  use HTTP::Request; 

  # display tons of debugging messages. See &#39;perldoc LWP::Debug&#39;
  #use LWP::Debug qw(+);

  # shortcut for demo URLs
  my $url = &#34;<a href="http://localhost/" class="podlinkurl"
>http://localhost/</a>&#34;; 

  my $reqs = [  
     HTTP::Request-&#62;new(&#39;GET&#39;, $url),
     HTTP::Request-&#62;new(&#39;GET&#39;, $url.&#34;homes/marclang/&#34;),
  ];

  my $pua = LWP::Parallel::UserAgent-&#62;new();
  $pua-&#62;in_order  (1);  # handle requests in order of registration
  $pua-&#62;duplicates(0);  # ignore duplicates
  $pua-&#62;timeout   (2);  # in seconds
  $pua-&#62;redirect  (1);  # follow redirects

  foreach my $req (@$reqs) {
    print &#34;Registering &#39;&#34;.$req-&#62;url.&#34;&#39;\n&#34;;
    if ( my $res = $pua-&#62;register ($req) ) { 
        print STDERR $res-&#62;error_as_HTML; 
    }  
  }
  my $entries = $pua-&#62;wait();

  foreach (keys %$entries) {
    my $res = $entries-&#62;{$_}-&#62;response;

    print &#34;Answer for &#39;&#34;,$res-&#62;request-&#62;url, &#34;&#39; was \t&#34;, $res-&#62;code,&#34;: &#34;,
          $res-&#62;message,&#34;\n&#34;;
  }</pre>

<p>Parallel::UserAgent (as well as the Parallel::RobotUA) offer three default methods that will be called at certain points during the connection: <code>on_connect</code>, <code>on_return</code> and <code>on_failure</code>.</p>

<pre class="sh_perl">  #
  # provide subclassed UserAgent to override on_connect, on_failure and
  # on_return methods
  #
  package myUA;

  use Exporter();
  use LWP::Parallel::UserAgent qw(:CALLBACK);
  @ISA = qw(LWP::Parallel::UserAgent Exporter);
  @EXPORT = @LWP::Parallel::UserAgent::EXPORT_OK;

  # redefine methods: on_connect gets called whenever we&#39;re about to
  # make a a connection
  sub on_connect {
    my ($self, $request, $response, $entry) = @_;
    print &#34;Connecting to &#34;,$request-&#62;url,&#34;\n&#34;;
  }

  # on_failure gets called whenever a connection fails right away
  # (either we timed out, or failed to connect to this address before,
  # or it&#39;s a duplicate). Please note that non-connection based
  # errors, for example requests for non-existant pages, will NOT call
  # on_failure since the response from the server will be a well
  # formed HTTP response!
  sub on_failure {
    my ($self, $request, $response, $entry) = @_;
    print &#34;Failed to connect to &#34;,$request-&#62;url,&#34;\n\t&#34;,
          $response-&#62;code, &#34;, &#34;, $response-&#62;message,&#34;\n&#34;
            if $response;
  }

  # on_return gets called whenever a connection (or its callback)
  # returns EOF (or any other terminating status code available for
  # callback functions). Please note that on_return gets called for
  # any successfully terminated HTTP connection! This does not imply
  # that the response sent from the server is a success! 
  sub on_return {
    my ($self, $request, $response, $entry) = @_;
    if ($response-&#62;is_success) {
       print &#34;\n\nWoa! Request to &#34;,$request-&#62;url,&#34; returned code &#34;, $response-&#62;code,
          &#34;: &#34;, $response-&#62;message, &#34;\n&#34;;
       print $response-&#62;content;
    } else {
       print &#34;\n\nBummer! Request to &#34;,$request-&#62;url,&#34; returned code &#34;, $response-&#62;code,
          &#34;: &#34;, $response-&#62;message, &#34;\n&#34;;
       # print $response-&#62;error_as_HTML;
    }
    return;
  }

  package main;
  use HTTP::Request; 

  # shortcut for demo URLs
  my $url = &#34;<a href="http://localhost/" class="podlinkurl"
>http://localhost/</a>&#34;; 

  my $reqs = [  
     HTTP::Request-&#62;new(&#39;GET&#39;, $url),
     HTTP::Request-&#62;new(&#39;GET&#39;, $url.&#34;homes/marclang/&#34;),
  ];

  my $pua = myUA-&#62;new();

  foreach my $req (@$reqs) {
    print &#34;Registering &#39;&#34;.$req-&#62;url.&#34;&#39;\n&#34;;
    $pua-&#62;register ($req);
  }
  my $entries = $pua-&#62;wait(); # responses will be caught by on_return, etc</pre>

<p>The final example will demonstrate a simple Web Robot that keeps a cache of the &#34;robots.txt&#34; permission files it has encountered so far. This example also uses callbacks to handle the response as it comes in.</p>

<pre class="sh_perl">  require LWP::Parallel::UserAgent;
  use HTTP::Request; 

  # persistent robot rules support. See &#39;perldoc WWW::RobotRules::AnyDBM_File&#39;
  require WWW::RobotRules::AnyDBM_File;

  # shortcut for demo URLs
  my $url = &#34;<a href="http://www.cs.washington.edu/" class="podlinkurl"
>http://www.cs.washington.edu/</a>&#34;; 

  my $reqs = [  
     HTTP::Request-&#62;new(&#39;GET&#39;, $url),
            # these are all redirects. depending on how you set
            # &#39;redirect_ok&#39; they either just return the status code for
            # redirect (like 302 moved), or continue to follow redirection.
     HTTP::Request-&#62;new(&#39;GET&#39;, $url.&#34;research/ahoy/&#34;),
     HTTP::Request-&#62;new(&#39;GET&#39;, $url.&#34;research/ahoy/doc/paper.html&#34;),
     HTTP::Request-&#62;new(&#39;GET&#39;, &#34;<a href="http://metacrawler.cs.washington.edu:6060/" class="podlinkurl"
>http://metacrawler.cs.washington.edu:6060/</a>&#34;),
            # these are all non-existant server. the first one should take
            # some time, but the following ones should be rejected right
            # away
     HTTP::Request-&#62;new(&#39;GET&#39;, &#34;<a href="http://www.foobar.foo/research/ahoy/" class="podlinkurl"
>http://www.foobar.foo/research/ahoy/</a>&#34;),
     HTTP::Request-&#62;new(&#39;GET&#39;, &#34;<a href="http://www.foobar.foo/foobar/foo/" class="podlinkurl"
>http://www.foobar.foo/foobar/foo/</a>&#34;),
     HTTP::Request-&#62;new(&#39;GET&#39;, &#34;<a href="http://www.foobar.foo/baz/buzz.html" class="podlinkurl"
>http://www.foobar.foo/baz/buzz.html</a>&#34;),
            # although server exists, file doesn&#39;t
     HTTP::Request-&#62;new(&#39;GET&#39;, $url.&#34;foobar/bar/baz.html&#34;),
            ];

  my ($req,$res);

  # establish persistant robot rules cache. See WWW::RobotRules for
  # non-permanent version. you should probably adjust the agentname
  # and cache filename.
  my $rules = new WWW::RobotRules::AnyDBM_File &#39;ParallelUA&#39;, &#39;cache&#39;;

  # create new UserAgent (actually, a Robot)
  my $pua = new LWP::Parallel::RobotUA (&#34;ParallelUA&#34;, 
                                        &#39;yourname@your.site.com&#39;, $rules);

  $pua-&#62;timeout   (2);  # in seconds
  $pua-&#62;delay    ( 5);  # in seconds
  $pua-&#62;max_req  ( 2);  # max parallel requests per server
  $pua-&#62;max_hosts(10);  # max parallel servers accessed
 
  # for our own print statements that follow below:
  local($\) = &#34;&#34;; # ensure standard $OUTPUT_RECORD_SEPARATOR

  # register requests
  foreach $req (@$reqs) {
    print &#34;Registering &#39;&#34;.$req-&#62;url.&#34;&#39;\n&#34;;
    $pua-&#62;register ($req , \&#38;handle_answer);
    #  Each request, even if it failed to # register properly, will
    #  show up in the final list of # requests returned by $pua-&#62;wait,
    #  so you can examine it # later.
  }

  # $pua-&#62;wait returns a pointer to an associative array, containing
  # an &#39;$entry&#39; for each request made, sorted by its url. (as returned
  # by $request-&#62;url-&#62;as_string)
  my $entries = $pua-&#62;wait(); # give another timeout here, 25 seconds

  # let&#39;s see what we got back (see also callback function!!)
  foreach (keys %$entries) {
    $res = $entries-&#62;{$_}-&#62;response;

    # examine response to find cascaded requests (redirects, etc) and
    # set current response to point to the very first response of this
    # sequence. (not very exciting if you set &#39;$pua-&#62;redirect(0)&#39;)
    my $r = $res; my @redirects;
    while ($r) { 
        $res = $r; 
        $r = $r-&#62;previous; 
        push (@redirects, $res) if $r;
    }
    
    # summarize response. see &#34;perldoc HTTP::Response&#34;
    print &#34;Answer for &#39;&#34;,$res-&#62;request-&#62;url, &#34;&#39; was \t&#34;, $res-&#62;code,&#34;: &#34;,
          $res-&#62;message,&#34;\n&#34;;
    # print redirection history, in case we got redirected
    foreach (@redirects) {
        print &#34;\t&#34;,$_-&#62;request-&#62;url, &#34;\t&#34;, $_-&#62;code,&#34;: &#34;, $_-&#62;message,&#34;\n&#34;;
    }
  }

  # our callback function gets called whenever some data comes in
  # (same parameter format as standard LWP::UserAgent callbacks!)
  sub handle_answer {
    my ($content, $response, $protocol, $entry) = @_;

    print &#34;Handling answer from &#39;&#34;,$response-&#62;request-&#62;url,&#34;: &#34;,
          length($content), &#34; bytes, Code &#34;,
          $response-&#62;code, &#34;, &#34;, $response-&#62;message,&#34;\n&#34;;

    if (length ($content) ) {
        # just store content if it comes in
        $response-&#62;add_content($content);
    } else {
        # Having no content doesn&#39;t mean the connection is closed!
        # Sometimes the server might return zero bytes, so unless
        # you already got the information you need, you should continue
        # processing here (see below)
        
        # Otherwise you can return a special exit code that will
        # determins how ParallelUA will continue with this connection.

        # Note: We have to import those constants via &#34;qw(:CALLBACK)&#34;!

        # return C_ENDCON;  # will end only this connection
                            # (silly, we already have EOF)
        # return C_LASTCON; # wait for remaining open connections,
                            # but don&#39;t issue any new ones!!
        # return C_ENDALL;  # will immediately end all connections
                            # and return from $pua-&#62;wait
    }

    # ATTENTION!! If you want to keep reading from your connection,
    # you should have a final &#39;return undef&#39; statement here. Even if
    # you think that all data has arrived, it does not hurt to return
    # undef here. The Parallel UserAgent will figure out by itself
    # when to close the connection!

    return undef;           # just keep on connecting/reading/waiting 
                            # until the server closes the connection. 
  }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Marc Langheinrich, marclang@cpan.org</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>See <a href="/perldoc?LWP" class="podlinkpod"
>LWP</a> for an overview on Web communication using Perl. See <a href="/~marclang/ParallelUserAgent-2.57/lib/LWP/Parallel/UserAgent.pm" class="podlinkpod"
>LWP::Parallel::UserAgent</a> and <a href="/~marclang/ParallelUserAgent-2.57/lib/LWP/Parallel/RobotUA.pm" class="podlinkpod"
>LWP::Parallel::RobotUA</a> for details on how to use this library.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 1997-2004 Marc Langheinrich &#60;marclang@cpan.org&#62;</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78156 Uploads, 24704 Distributions
105967 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Tue Apr 24 19:44:42 2012 GMT (0.1095290184021) @cpansearch1 -->
 </body>
</html>
