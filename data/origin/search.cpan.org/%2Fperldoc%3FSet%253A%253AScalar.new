<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Set::Scalar - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Set-Scalar",3]);
    _gaq.push(["_setCustomVar",5,"Release","Set-Scalar-1.25",3]);
    _gaq.push(["_setCustomVar",3,"Module","Set::Scalar",3]);
    _gaq.push(["_setCustomVar",1,"Author","JHI",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Set::Scalar">permalink</a></div>
  <a href="/~jhi/">Jarkko Hietaniemi</a> &gt;
  <a href="/~jhi/Set-Scalar-1.25/">Set-Scalar-1.25</a> &gt;
  Set::Scalar
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/5aaaee305cd57a85e1be8f889fbfac7e?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/J/JH/JHI/Set-Scalar-1.25.tar.gz">Set-Scalar-1.25.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Set%3A%3AScalar;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~JHI/Set-Scalar-1.25/lib/Set/Scalar.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Object%3A%3AInsideOut">Object::InsideOut</a><br>
<a href="/perldoc?List%3A%3AUtil">List::Util</a><br>
<a href="/perldoc?Set%3A%3AArray">Set::Array</a><br>
<a href="/perldoc?List%3A%3ACompare">List::Compare</a><br>
<a href="/perldoc?Set%3A%3AIntSpan">Set::IntSpan</a><br>
<a href="/perldoc?HTML%3A%3AParser">HTML::Parser</a><br>
<a href="/perldoc?Set%3A%3ABag">Set::Bag</a><br>
<a href="/perldoc?Array%3A%3ACompare">Array::Compare</a><br>
<a href="/perldoc?Class%3A%3AInsideOut">Class::InsideOut</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Set%3A%3AScalar">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 2</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Set-Scalar">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.25 &nbsp;
<span class="noprint">
  <a href="/src/JHI/Set-Scalar-1.25/lib/Set/Scalar.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Creating'>Creating</a>
    <li class='indexItem indexItem2'><a href='#Modifying'>Modifying</a>
    <li class='indexItem indexItem2'><a href='#Displaying'>Displaying</a>
    <li class='indexItem indexItem2'><a href='#Querying'>Querying</a>
    <li class='indexItem indexItem2'><a href='#Deriving'>Deriving</a>
    <li class='indexItem indexItem2'><a href='#Comparing'>Comparing</a>
    <li class='indexItem indexItem2'><a href='#Boolean_contexts'>Boolean contexts</a>
    <li class='indexItem indexItem2'><a href='#Iterating'>Iterating</a>
    <li class='indexItem indexItem2'><a href='#Cartesian_Product_and_Power_Set'>Cartesian Product and Power Set</a>
    <li class='indexItem indexItem2'><a href='#Customising_Display'>Customising Display</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CAVEATS'>CAVEATS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Set::Scalar - basic set operations</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use Set::Scalar;
    $s = Set::Scalar-&#62;new;
    $s-&#62;insert(&#39;a&#39;, &#39;b&#39;);
    $s-&#62;delete(&#39;b&#39;);
    $t = Set::Scalar-&#62;new(&#39;x&#39;, &#39;y&#39;, $z);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Creating"
>Creating</a></h2>

<pre class="sh_perl">    $s = Set::Scalar-&#62;new;
    $s = Set::Scalar-&#62;new(@members);

    $t = $s-&#62;clone;
    $t = $s-&#62;copy;         # Clone of clone.
    $t = $s-&#62;empty_clone;  # Like clone() but with no members.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Modifying"
>Modifying</a></h2>

<pre class="sh_perl">    $s-&#62;insert(@members);
    $s-&#62;delete(@members);
    $s-&#62;invert(@members);  # Insert if hasn&#39;t, delete if has.

    $s-&#62;clear;  # Removes all the elements.</pre>

<p>Note that clear() only releases the memory used by the set to be reused by Perl; it will not reduce the overall memory use.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Displaying"
>Displaying</a></h2>

<pre class="sh_perl">    print $s, &#34;\n&#34;;</pre>

<p>The display format of a set is the members of the set separated by spaces and enclosed in parentheses ().</p>

<p>You can even display recursive sets.</p>

<p>See <a href="#Customising_Display" class="podlinkpod"
>&#34;Customising Display&#34;</a> for customising the set display.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Querying"
>Querying</a></h2>

<p>Assuming a set <code>$s</code>:</p>

<pre class="sh_perl">    @members  = $s-&#62;members;
    @elements = $s-&#62;elements;  # Alias for members.

    @$s  # Overloaded alias for members.

    $size = $s-&#62;size;  # The number of members.

    $s-&#62;has($m)        # Return true if has that member.
    $s-&#62;contains($m)   # Alias for has().

    if ($s-&#62;has($member)) { ... }

    $s-&#62;member($m)     # Returns the member if has that member.
    $s-&#62;element($m)    # Alias for member.

    $s-&#62;is_null        # Returns true if the set is empty.
    $s-&#62;is_empty       # Alias for is_null.

    $s-&#62;is_universal   # Returns true if the set is universal.

    $s-&#62;null           # The null set.
    $s-&#62;empty          # Alias for null.
    $s-&#62;universe       # The universe of the set.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Deriving"
>Deriving</a></h2>

<pre class="sh_perl">    $u = $s-&#62;union($t);
    $i = $s-&#62;intersection($t);
    $d = $s-&#62;difference($t);
    $e = $s-&#62;symmetric_difference($t);
    $v = $s-&#62;unique($t);
    $c = $s-&#62;complement;</pre>

<p>These methods have operator overloads:</p>

<pre class="sh_perl">    $u = $s + $t;  # union
    $i = $s * $t;  # intersection
    $d = $s - $t;  # difference
    $e = $s % $t;  # symmetric_difference
    $v = $s / $t;  # unique
    $c = -$s;      # complement</pre>

<p>Both the <code>symmetric_difference</code> and <code>unique</code> are symmetric on all their arguments. For two sets they are identical but for more than two sets beware: <code>symmetric_difference</code> returns true for elements that are in an odd number (1, 3, 5, ...) of sets, <code>unique</code> returns true for elements that are in one set.</p>

<p>Some examples of the various set differences:</p>

<pre class="sh_perl">    set or difference                   value

    $a                                  (a b c d e)
    $b                                  (c d e f g)
    $c                                  (e f g h i)

    $a-&#62;difference($b)                  (a b)
    $a-&#62;symmetric_difference($b)        (a b f g)
    $a-&#62;unique($b)                      (a b f g)

    $b-&#62;difference($a)                  (f g)
    $b-&#62;symmetric_difference($a)        (a b f g)
    $b-&#62;unique($a)                      (a b f g)

    $a-&#62;difference($b, $c)              (a b)
    $a-&#62;symmetric_difference($b, $c)    (a b e h i)
    $a-&#62;unique($b, $c)                  (a b h i)</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Comparing"
>Comparing</a></h2>

<pre class="sh_perl">    $eq = $s-&#62;is_equal($t);
    $dj = $s-&#62;is_disjoint($t);
    $pi = $s-&#62;is_properly_intersecting($t);
    $ps = $s-&#62;is_proper_subset($t);
    $pS = $s-&#62;is_proper_superset($t);
    $is = $s-&#62;is_subset($t);
    $iS = $s-&#62;is_superset($t);

    $cmp = $s-&#62;compare($t);</pre>

<p>The <code>compare</code> method returns a string from the following list: &#34;equal&#34;, &#34;disjoint&#34;, &#34;proper subset&#34;, &#34;proper superset&#34;, &#34;proper intersect&#34;, and in future (once I get around implementing it), &#34;disjoint universes&#34;.</p>

<p>These methods have operator overloads:</p>

<pre class="sh_perl">    $eq = $s == $t;  # is_equal
    $dj = $s != $t;  # is_disjoint
    # No operator overload for is_properly_intersecting.
    $ps = $s &#60; $t;   # is_proper_subset
    $pS = $s &#62; $t;   # is_proper_superset
    $is = $s &#60;= $t;  # is_subset
    $iS = $s &#62;= $t;  # is_superset

    $cmp = $s &#60;=&#62; $t;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Boolean_contexts"
>Boolean contexts</a></h2>

<p>In Boolean contexts such as</p>

<pre class="sh_perl">    if ($set) { ... }
    while ($set1 &#38;&#38; $set2) { ... }</pre>

<p>the size of the <code>$set</code> is tested, so empty sets test as false, and non-empty sets as true.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Iterating"
>Iterating</a></h2>

<pre class="sh_perl">    while (defined(my $e = $s-&#62;each)) { ... }</pre>

<p>This is more memory-friendly than</p>

<pre class="sh_perl">    for my $e ($s-&#62;elements) { ... }</pre>

<p>which would first construct the full list of elements and then walk through it: the <code>$s-&#62;each</code> handles one element at a time.</p>

<p>Analogously to using normal <code>each(%hash)</code> in scalar context, using <code>$s-&#62;each</code> has the following caveats:</p>

<ul>
<li>The elements are returned in (apparently) random order. So don&#39;t expect any particular order.</li>

<li>When no more elements remain <code>undef</code> is returned. Since you may one day have elements named <code>0</code> don&#39;t test just like this
<pre class="sh_perl">    while (my $e = $s-&#62;each) { ... }           # WRONG!</pre>

<p>but instead like this</p>

<pre class="sh_perl">    while (defined(my $e = $s-&#62;each)) { ... }  # Right.</pre>

<p>(An <code>undef</code> as a set element doesn&#39;t really work, you get <code>&#34;&#34;</code>.)</p>
</li>

<li>There is one iterator per one set which is shared by many element-accessing interfaces-- using the following will reset the iterator: elements(), insert(), members(), size(), unique(). insert() causes the iterator of the set being inserted (not the set being the target of insertion) becoming reset. unique() causes the iterators of all the participant sets becoming reset. <b>The iterator getting reset most probably causes an endless loop.</b> So avoid doing that.</li>

<li>Modifying the set during the iteration may cause elements to be missed or duplicated, or in the worst case, an endless loop; so don&#39;t do that, either.</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Cartesian_Product_and_Power_Set"
>Cartesian Product and Power Set</a></h2>

<ul>
<li>Cartesian product is a product of two or more sets. For two sets, it is the set consisting of <b>ordered pairs</b> of members from each set. For example for the sets
<pre class="sh_perl">  (a b)
  (c d e)</pre>

<p>The Cartesian product of the above is the set</p>

<pre class="sh_perl">  ([a, c] [a, d] [a, e] [b, c] [b, d] [b, e])</pre>

<p>The [,] notation is for the ordered pairs, which sets are are not. This means two things: firstly, that [e, b] is <b>not</b> in the above Cartesian product, and secondly, [b, b] is a possibility:</p>

<pre class="sh_perl">  (a b)
  (b c e)

  ([a, b] [a, c] [a, e] [b, b] [b, c] [b, d])</pre>

<p>For example:</p>

<pre class="sh_perl">  my $a = Set::Scalar-&#62;new(1..2);
  my $b = Set::Scalar-&#62;new(3..5);
  my $c = $a-&#62;cartesian_product($b);  # As an object method.
  my $d = Set::Scalar-&#62;cartesian_product($a, $b);  # As a class method.</pre>

<p>The $c and $d will be of the same class as $a. The members of $c and $c in the above will be anonymous arrays (array references), not sets, since sets wouldn&#39;t be able to represent the ordering or that a member can be present more than once. Also note that since the members of the input sets are unordered, the ordered pairs themselves are unlikely to be in any particular order.</p>

<p>If you don&#39;t want to construct the Cartesian product set, you can construct an iterator and call it while it returns more members:</p>

<pre class="sh_perl">   my $iter = Set::Scalar-&#62;cartesian_product_iterator($a, $b, $c);
   while (my @m = $iter-&#62;()) {
     process(@m);
   }</pre>
</li>

<li>Power set is the set of all the subsets of a set. If the set has N members, its power set has 2**N members. For example for the set
<pre class="sh_perl">    (a b c)</pre>

<p>size 3, its power set is</p>

<pre class="sh_perl">    (() (a) (b) (c) (a b) (a c) (b c) (a b c))</pre>

<p>size 8. Note that since the elements of the power set are sets, they are unordered, and therefore (b c) is equal to (c b). For example:</p>

<pre class="sh_perl">    my $a = Set::Scalar-&#62;new(1..3);
    my $b = $a-&#62;power_set;               # As an object method.
    my $c = Set::Scalar-&#62;power_set($a);  # As a class method.</pre>

<p>Even the empty set has a power set, of size one.</p>

<p>If you don&#39;t want to construct the power set, you can construct an iterator and call it until it returns no more members:</p>

<pre class="sh_perl">   my $iter = Set::Scalar-&#62;power_set($a);
   my @m;
   do {
     @m = $iter-&#62;();
     process(@m);
   } while (@m);</pre>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Customising_Display"
>Customising Display</a></h2>

<p>If you want to customise the display routine you will have to modify the <code>as_string</code> callback. You can modify it either for all sets by using <code>as_string_callback()</code> as a class method:</p>

<pre class="sh_perl">    my $class_callback = sub { ... };

    Set::Scalar-&#62;as_string_callback($class_callback);</pre>

<p>or for specific sets by using <code>as_string_callback()</code> as an object method:</p>

<pre class="sh_perl">    my $callback = sub  { ... };

    $s1-&#62;as_string_callback($callback);
    $s2-&#62;as_string_callback($callback);</pre>

<p>The anonymous subroutine gets as its first (and only) argument the set to display as a string. For example to display the set <code>$s</code> as <code>a-b-c-d-e</code> instead of <code>(a b c d e)</code></p>

<pre class="sh_perl">    $s-&#62;as_string_callback(sub{join(&#34;-&#34;,sort $_[0]-&#62;elements)});</pre>

<p>If called without an argument, the current callback is returned.</p>

<p>If called as a class method with undef as the only argument, the original callback (the one returning <code>(a b c d e)</code>) for all the sets is restored, or if called for a single set the callback is removed (and the callback for all the sets will be used).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CAVEATS"
>CAVEATS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The first priority of Set::Scalar is to be a convenient interface to sets. While not designed to be slow or big, neither has it been designed to be fast or compact.</p>

<p>Using references (or objects) as set members has not been extensively tested. The desired semantics are not always clear: what should happen when the elements behind the references change? Especially unclear is what should happen when the objects start having their own stringification overloads.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?Set%3A%3ABag" class="podlinkpod"
>Set::Bag</a> for bags (multisets, counted sets), and <a href="/perldoc?Bit%3A%3AVector" class="podlinkpod"
>Bit::Vector</a> for fast set operations (you have to take care of the element name to bit number and back mappings yourself), or <a href="/perldoc?Set%3A%3AInfinite" class="podlinkpod"
>Set::Infinite</a> for sets of intervals, and many more. CPAN is your friend.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Jarkko Hietaniemi &#60;jhi@iki.fi&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2001,2002,2003,2004,2005,2007,2009 by Jarkko Hietaniemi</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78052 Uploads, 24684 Distributions
105889 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 21 19:25:31 2012 GMT (0.0946769714355469) @cpansearch1 -->
 </body>
</html>
