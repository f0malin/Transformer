<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>AtExit - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","AtExit",3]);
    _gaq.push(["_setCustomVar",5,"Release","AtExit-2.01",3]);
    _gaq.push(["_setCustomVar",3,"Module","AtExit",3]);
    _gaq.push(["_setCustomVar",1,"Author","BRADAPP",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?AtExit">permalink</a></div>
  <a href="/~bradapp/">Brad Appleton</a> &gt;
  <a href="/~bradapp/AtExit-2.01/">AtExit-2.01</a> &gt;
  AtExit
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/d635cbaaa173745b345879327a05bcaf?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/B/BR/BRADAPP/AtExit-2.01.tar.gz">AtExit-2.01.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=AtExit;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~BRADAPP/AtExit-2.01/AtExit.pm">Annotate this POD
</a></p>

<div style="float:right">
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=AtExit">View/Report Bugs</a><br/>

</div>
</div>
  Module Version:  2.01 &nbsp;
<span class="noprint">
  <a href="/src/BRADAPP/AtExit-2.01/AtExit.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Adding_and_removing_callbacks_during_exit/destruction_time.'>Adding and removing callbacks during exit/destruction time.</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXPORTS'>EXPORTS</a>
  <li class='indexItem indexItem1'><a href='#CAVEATS'>CAVEATS</a>
  <li class='indexItem indexItem1'><a href='#Program-termination_and_Object-destruction'>Program-termination and Object-destruction</a>
  <li class='indexItem indexItem1'><a href='#END{}_block_processing_order'>END{} block processing order</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>atexit</b>,
<b>AtExit</b> -- perform exit processing for a program or object</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> use AtExit;

 sub cleanup {
     my @args = @_;
     print &#34;cleanup() executing: args = @args\n&#34;;
 }
 
 ## Register subroutines to be called when this program exits

 $_ = atexit(\&#38;cleanup, &#34;This call was registered first&#34;);
 print &#34;first call to atexit() returned $_\n&#34;;

 $_ = atexit(&#34;cleanup&#34;, &#34;This call was registered second&#34;);
 print &#34;second call to atexit() returned $_\n&#34;;

 $_ = atexit(&#34;cleanup&#34;, &#34;This call should&#39;ve been unregistered by rmexit&#34;);
 rmexit($_)  or  warn &#34;couldnt&#39; unregister exit-sub $_!&#34;;

 if (@ARGV == 0) {
    ## Register subroutines to be called when this lexical scope is exited
    my $scope1 = AtExit-&#62;new( \&#38;cleanup, &#34;Scope 1, Callback 1&#34; );
    {
       ## Do the same for this nested scope
       my $scope2 = AtExit-&#62;new;
       $_ = $scope2-&#62;atexit( \&#38;cleanup, &#34;Scope 2, Callback 1&#34; );
       $scope1-&#62;atexit( \&#38;cleanup, &#34;Scope 1, Callback 2&#34;);
       $scope2-&#62;atexit( \&#38;cleanup, &#34;Scope 2, Callback 2&#34; );
       $scope2-&#62;rmexit($_) or warn &#34;couldn&#39;t unregister exit-sub $_!&#34;;

       print &#34;*** Leaving Scope 2 ***\n&#34;;
     }
     print &#34;*** Finished Scope 2 ***\n&#34;;
     print &#34;*** Leaving Scope 1 ***\n&#34;;
 }
 print &#34;*** Finished Scope 1 ***\n&#34;  if (@ARGV == 0);

 END {
     print &#34;*** Now performing program-exit processing ***\n&#34;;
 }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <b>AtExit</b> module provides ANSI-C style exit processing modeled after the <code>atexit</code> function in the standard C library (see <a>atexit(3C)</a>). Various exit processing routines may be registered by calling <b>atexit</b> and passing it the desired subroutine along with any desired arguments. Then, at program-exit time, the subroutines registered with <b>atexit</b> are invoked with their given arguments in the <i>reverse</i> order of registration (last one registered is invoked first). Registering the same subroutine more than once will cause that subroutine to be invoked once for each registration.</p>

<p>An <b>AtExit</b> object can be created in any scope. When invoked as a function, <b>atexit</b> registers callbacks to be executed at <i>program-exit</i> time. But when invoked as an object-method (using the <code>$object-&#62;method_name</code> syntax), callbacks registered with an <b>AtExit</b> object are executed at <i>object-destruction time</i>! The rules for order of execution of the registered subroutines are the same for objects during object-destruction, as for the program during program-termination.</p>

<p>The <b>atexit</b> function/method should be passed a subroutine name or reference, optionally followed by the list of arguments with which to invoke it at program/object exit time. Anonymous subroutine references passed to <b>atexit</b> act as &#34;closures&#34; (which are described in <a href="/perldoc?perlref" class="podlinkpod"
>perlref</a>). If a subroutine <i>name</i> is specified (as opposed to a subroutine reference) then, unless the subroutine name has an explicit package prefix, it is assumed to be the name of a subroutine in the caller&#39;s current package. A reference to the specified subroutine is obtained, and, if invocation arguments were specified, it is &#34;wrapped up&#34; in a closure which invokes the subroutine with the specified arguments. The resulting subroutine reference is added to the front of the list of exit-handling subroutines for the program (<code>atexit</code>) or the <b>AtExit</b> object (<code>$exitObject-&#62;atexit</code>) and the reference is then returned to the caller (just in case you might want to unregister it later using <b>rmexit</b>. If the given subroutine could <i>not</i> be registered, then the value zero is returned.</p>

<p>The <b>rmexit</b> function/method should be passed one or more subroutine references, each of which was returned by a previous call to <b>atexit</b>. For each argument given, <b>rmexit</b> will look in the list of exit-handling subroutines for the program (<b>rmexit</b>) or the <b>AtExit</b> object (<code>$exitObject-&#62;rmexit</code>) and remove the first matching entry from the list. If no arguments are given, <i>then all program or object exit-handlers are unregistered!</i> The value returned will be the number of subroutines that were successfully unregistered.</p>

<p>At object destruction time, the <code>DESTROY{}</code> subroutine in the <b>AtExit</b> module iterates over the subroutine references in the <b>AtExit</b> object and invokes each one in turn (each subroutine is removed from the front of the queue immediately before it is invoked). At program-exit time, the <code>END{}</code> block in the <b>AtExit</b> module iterates over the subroutines in the array returned by the <b>exit_subs</b> method and invokes each one in turn (each subroutine is removed from the front of the queue immediately before it is invoked). Note that in both cases (program-exit, and object-destruction) the subroutines in this queue are invoked in first-to-last order (the <i>reverse</i> order in which they were registered with <b>atexit</b>).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Adding_and_removing_callbacks_during_exit/destruction_time."
>Adding and removing callbacks during exit/destruction time.</a></h2>

<p>The method <b>ignore_when_exiting</b> specifies how exit-callback registration and unregistration will be handled during program-exit or object-destruction time, while exit-callbacks are in process of being invoked.</p>

<p>When invoked as a class method (e.g., <code>AtExit-&#62;ignore_when_exiting</code>), <b>ignore_when_exiting</b> corresponds to the handling of calls to <b>atexit</b> and <b>rmexit</b> during program-termination. But when invoked as an <i>object</i> method (e.g., <code>$exitObject-&#62;ignore_when_exiting</code>), then <b>ignore_when_exiting</b> corresponds to the handling of calls to <b>atexit</b> and <b>rmexit</b> during <i>object-destruction</i> for the particular object.</p>

<p>By default, <b>ignore_when_exiting</b> returns a non-zero value, which causes <b>atexit</b> to <i>ignore</i> any calls made to it during this time (a value of zero will be returned). This behavior is consistent with that of the standard C library function of the same name. If desired however, the user may enable the registration of subroutines by <b>atexit</b> during this time by invoking <b>ignore_when_exiting</b> and passing it an argument of 0, <code>&#34;&#34;</code>, or <code>undef</code> (for example, <code>AtExit-&#62;ignore_when_exiting(0)</code> or <code>$exitObject-&#62;ignore_when_exiting(0)</code>, Just remember that any subroutines registered with <b>atexit</b> be placed at the <i>front</i> of the queue of yet-to-be-invoked exit-processing subroutines for the program (<b>atexit</b>) or the <b>AtExit</b> object (<code>$exitObject-&#62;atexit</code>).</p>

<p>Regardless of when it is invoked, <b>rmexit</b> will <i>always</i> attempt to unregister the given subroutines (even when called during program/object exit processing). Keep in mind however that if it is invoked during program/object exit then it will <i>fail</i> to unregister any subroutines that have <i>already been invoked</i> (since those subroutine calls have already been removed from the corresponding list of exit-handling subroutines).</p>

<p>The method <b>is_exiting</b> may consulted examined to determine if routines registered using <b>atexit</b> are currently in the process of being invoked. It will be non-zero if they are and zero otherwise. When invoked as a class method (e.g., <code>AtExit-&#62;is_exiting</code>), the return value will correspond to program-exit processing; but when invoked as an <i>object</i> method (e.g., <code>$exitObject-&#62;is_exiting</code>) the return value will correspond to object-destruction processing for the given object.</p>

<p>If, for any reason, the list of registered callback needs to be directly accessed or manipulated, the <b>exit_subs</b> function will return a reference to the list of program-exit callbacks. When invoked as a method, <b>exit_subs</b> will return a reference to the list of object-destruction callbacks for the corresponding object.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORTS"
>EXPORTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>For backward compatibility, <b>atexit</b> and <b>rmexit</b> are exported by default. <i>Note</i> however that <b>exit_subs</b>, <b>is_exiting</b>, and <b>ignore_when_exiting</b> are <i>not</i> exported by default, and should be invoked as class methods (e.g. <code>AtExit-&#62;is_exiting</code>) if they are to manipulate program-exit information (rather than object-destruction) and not explicitly imported.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CAVEATS"
>CAVEATS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Program-termination_and_Object-destruction"
>Program-termination and Object-destruction <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The usual Perl way of doing program/module-exit processing is through the use of <code>END{}</code> blocks (see <a href="/perldoc?perlmod#Package_Constructors_and_Destructors" class="podlinkpod"
>&#34;Package Constructors and Destructors&#34; in perlmod</a>). The <b>AtExit</b> module implements its program-exit processing with with an <code>END{}</code> block that invokes all the subroutines registered by <b>atexit</b> in the array whose referenced is returned by <code>exit_subs</code>.</p>

<p>For an object, object-destruction processing is implemented by having the <code>DESTROY</code> method for the object invoke all the subroutines registered by <code>$exitObject-&#62;atexit</code>. This occurs when the object loses it&#39;s last reference, which is not necessarily at program end time.</p>

<p>For objects defined in the global context, if any other <code>END{}</code> block processing is specified in the user&#39;s code or in any other packages it uses, then the order in which the exit processing takes place is subject to Perl&#39;s rules for the order in which objects loose their last references and <code>END{}</code> blocks are processed. This may affect when subroutines registered with <b>atexit</b> are invoked with respect to other exit processing that is to be performed. In particular, if <b>rmexit</b> is invoked from within an <code>END{}</code> block that executes <i>after</i> the <b>AtExit</b> object was destroyed, then the corresponding subroutine will not be registered and will never be invoked by the <b>AtExit</b> module&#39;s destructor code.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="END{}_block_processing_order"
><code>END{}</code> block processing order <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>END{}</code> blocks, including those in other packages, get called in the reverse order in which they appear in the code. (<b>atexit</b> subroutines get called in the reverse order in which they are registered.) If a package gets read via &#34;use&#34;, it will act as if the <code>END{}</code> block was defined at that particular part of the &#34;main&#34; code. Packages read via &#34;require&#34; will be executed after the code of &#34;main&#34; has been parsed and will be seen last so will execute first (they get executed in the context of the package in which they exist).</p>

<p>It is important to note that <code>END{}</code> blocks and object destruction only get called on normal termination (which includes calls to <b>die</b> or <b>Carp::croak</b>). They do <i>not</i> get called when the program terminates <i>abnormally</i> (due to a signal for example) unless special arrangements have been made by the programmer (e.g. using a signal handler -- see <a href="/perldoc?perlvar#%SIG{expr}" class="podlinkpod"
>&#34;%SIG{expr}&#34; in perlvar</a>).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a>atexit(3C)</a> describes the <b>atexit</b> function for the standard C library (the actual Unix manual section in which it appears may differ from platform to platform - try sections 3C, 3, 2C, and 2). Further information on anonymous subroutines (&#34;closures&#34;) may be found in <a href="/perldoc?perlref" class="podlinkpod"
>perlref</a>. For more information on <code>END{}</code> blocks, see <a href="/perldoc?perlmod#Package_Constructors_and_Destructors" class="podlinkpod"
>&#34;Package Constructors and Destructors&#34; in perlmod</a>. See <a href="/perldoc?perlvar#%SIG{expr}" class="podlinkpod"
>&#34;%SIG{expr}&#34; in perlvar</a> for handling abnormal program termination.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Andrew Langmead &#60;aml@world.std.com&#62; (initial draft).</p>

<p>Brad Appleton &#60;bradapp@enteract.com&#62; (Version 1.02 and 2.00).</p>

<p>Michael A. Chase &#60;mchase@ix.netcom.com&#62; (Version 2.00).</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78069 Uploads, 24686 Distributions
105893 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sun Apr 22 04:35:35 2012 GMT (0.0749518871307373) @cpansearch1 -->
 </body>
</html>
