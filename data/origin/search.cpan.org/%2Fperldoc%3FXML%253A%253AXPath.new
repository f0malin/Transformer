<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>XML::XPath - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","XML-XPath",3]);
    _gaq.push(["_setCustomVar",5,"Release","XML-XPath-1.13",3]);
    _gaq.push(["_setCustomVar",3,"Module","XML::XPath",3]);
    _gaq.push(["_setCustomVar",1,"Author","MSERGEANT",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?XML::XPath">permalink</a></div>
  <a href="/~msergeant/">Matt Sergeant</a> &gt;
  <a href="/~msergeant/XML-XPath-1.13/">XML-XPath-1.13</a> &gt;
  XML::XPath
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/d372604239b5c6b56a5416eef95fa441?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/M/MS/MSERGEANT/XML-XPath-1.13.tar.gz">XML-XPath-1.13.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=XML%3A%3AXPath;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~MSERGEANT/XML-XPath-1.13/XPath.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?XML%3A%3AParser">XML::Parser</a><br>
<a href="/perldoc?XML%3A%3ATwig">XML::Twig</a><br>
<a href="/perldoc?XML%3A%3ASimple">XML::Simple</a><br>
<a href="/perldoc?XML%3A%3ALibXML">XML::LibXML</a><br>
<a href="/perldoc?XML%3A%3ADOM">XML::DOM</a><br>
<a href="/perldoc?HTML%3A%3AParser">HTML::Parser</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?HTML%3A%3ATokeParser">HTML::TokeParser</a><br>
<a href="/perldoc?Parse%3A%3ARecDescent">Parse::RecDescent</a><br>
<a href="/perldoc?XML%3A%3AXSLT">XML::XSLT</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=XML%3A%3AXPath">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 32</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=XML-XPath">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.13 &nbsp;
<span class="noprint">
  <a href="/src/MSERGEANT/XML-XPath-1.13/XPath.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DETAILS'>DETAILS</a>
  <li class='indexItem indexItem1'><a href='#API'>API</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#new()'>new()</a>
    <li class='indexItem indexItem2'><a href='#nodeset_=_find($path,_[$context])'>nodeset = find($path, [$context])</a>
    <li class='indexItem indexItem2'><a href='#findnodes($path,_[$context])'>findnodes($path, [$context])</a>
    <li class='indexItem indexItem2'><a href='#findnodes_as_string($path,_[$context])'>findnodes_as_string($path, [$context])</a>
    <li class='indexItem indexItem2'><a href='#findvalue($path,_[$context])'>findvalue($path, [$context])</a>
    <li class='indexItem indexItem2'><a href='#exists($path,_[$context])'>exists($path, [$context])</a>
    <li class='indexItem indexItem2'><a href='#matches($node,_$path,_[$context])'>matches($node, $path, [$context])</a>
    <li class='indexItem indexItem2'><a href='#getNodeText($path)'>getNodeText($path)</a>
    <li class='indexItem indexItem2'><a href='#setNodeText($path,_$text)'>setNodeText($path, $text)</a>
    <li class='indexItem indexItem2'><a href='#createNode($path)'>createNode($path)</a>
    <li class='indexItem indexItem2'><a href='#set_namespace($prefix,_$uri)'>set_namespace($prefix, $uri)</a>
    <li class='indexItem indexItem2'><a href='#clear_namespaces()'>clear_namespaces()</a>
    <li class='indexItem indexItem2'><a href='#$XML::XPath::Namespaces'>$XML::XPath::Namespaces</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Node_Object_Model'>Node Object Model</a>
  <li class='indexItem indexItem1'><a href='#On_Garbage_Collection'>On Garbage Collection</a>
  <li class='indexItem indexItem1'><a href='#Example'>Example</a>
  <li class='indexItem indexItem1'><a href='#Support/Author'>Support/Author</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>XML::XPath - a set of modules for parsing and evaluating XPath statements</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module aims to comply exactly to the XPath specification at <a href="http://www.w3.org/TR/xpath" class="podlinkurl"
>http://www.w3.org/TR/xpath</a> and yet allow extensions to be added in the form of functions.
Modules such as XSLT and XPointer may need to do this as they support functionality beyond XPath.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use XML::XPath;
    use XML::XPath::XMLParser;
    
    my $xp = XML::XPath-&#62;new(filename =&#62; &#39;test.xhtml&#39;);
    
    my $nodeset = $xp-&#62;find(&#39;/html/body/p&#39;); # find all paragraphs
    
    foreach my $node ($nodeset-&#62;get_nodelist) {
        print &#34;FOUND\n\n&#34;, 
            XML::XPath::XMLParser::as_string($node),
            &#34;\n\n&#34;;
    }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DETAILS"
>DETAILS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There&#39;s an awful lot to all of this, so bear with it - if you stick it out it should be worth it. Please get a good understanding of XPath by reading the spec before asking me questions. All of the classes and parts herein are named to be synonimous with the names in the specification, so consult that if you don&#39;t understand why I&#39;m doing something in the code.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="API"
>API <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The API of XML::XPath itself is extremely simple to allow you to get going almost immediately. The deeper API&#39;s are more complex, but you shouldn&#39;t have to touch most of that.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="new()"
>new()</a></h2>

<p>This constructor follows the often seen named parameter method call. Parameters you can use are: filename, parser, xml, ioref and context. The filename parameter specifies an XML file to parse. The xml parameter specifies a string to parse, and the ioref parameter specifies an ioref to parse. The context option allows you to specify a context node. The context node has to be in the format of a node as specified in <a href="/~msergeant/XML-XPath-1.13/XPath/XMLParser.pm" class="podlinkpod"
>XML::XPath::XMLParser</a>. The 4 parameters filename, xml, ioref and context are mutually exclusive - you should only specify one (if you specify anything other than context, the context node is the root of your document). The parser option allows you to pass in an already prepared XML::Parser object, to save you having to create more than one in your application (if, for example, you&#39;re doing more than just XPath).</p>

<pre class="sh_perl">    my $xp = XML::XPath-&#62;new( context =&#62; $node );</pre>

<p>It is very much recommended that you use only 1 XPath object throughout the life of your application. This is because the object (and it&#39;s sub-objects) maintain certain bits of state information that will be useful (such as XPath variables) to later calls to find(). It&#39;s also a good idea because you&#39;ll use less memory this way.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="nodeset_=_find($path,_[$context])"
><i>nodeset</i> = find($path, [$context])</a></h2>

<p>The find function takes an XPath expression (a string) and returns either an XML::XPath::NodeSet object containing the nodes it found (or empty if no nodes matched the path), or one of XML::XPath::Literal (a string), XML::XPath::Number, or XML::XPath::Boolean. It should always return something - and you can use -&#62;isa() to find out what it returned. If you need to check how many nodes it found you should check $nodeset-&#62;size. See <a href="/~msergeant/XML-XPath-1.13/XPath/NodeSet.pm" class="podlinkpod"
>XML::XPath::NodeSet</a>. An optional second parameter of a context node allows you to use this method repeatedly, for example XSLT needs to do this.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="findnodes($path,_[$context])"
>findnodes($path, [$context])</a></h2>

<p>Returns a list of nodes found by $path, optionally in context $context. In scalar context returns an XML::XPath::NodeSet object.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="findnodes_as_string($path,_[$context])"
>findnodes_as_string($path, [$context])</a></h2>

<p>Returns the nodes found reproduced as XML. The result is not guaranteed to be valid XML though.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="findvalue($path,_[$context])"
>findvalue($path, [$context])</a></h2>

<p>Returns either a <code>XML::XPath::Literal</code>, a <code>XML::XPath::Boolean</code> or a <code>XML::XPath::Number</code> object. If the path returns a NodeSet, $nodeset-&#62;to_literal is called automatically for you (and thus a <code>XML::XPath::Literal</code> is returned). Note that for each of the objects stringification is overloaded, so you can just print the value found, or manipulate it in the ways you would a normal perl value (e.g. using regular expressions).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="exists($path,_[$context])"
>exists($path, [$context])</a></h2>

<p>Returns true if the given path exists.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="matches($node,_$path,_[$context])"
>matches($node, $path, [$context])</a></h2>

<p>Returns true if the node matches the path (optionally in context $context).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="getNodeText($path)"
>getNodeText($path)</a></h2>

<p>Returns the text string for a particular XML node. Returns a string, or undef if the node doesn&#39;t exist.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="setNodeText($path,_$text)"
>setNodeText($path, $text)</a></h2>

<p>Sets the text string for a particular XML node. The node can be an element or an attribute. If the node to be set is an attribute, and the attribute node does not exist, it will be created automatically.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="createNode($path)"
>createNode($path)</a></h2>

<p>Creates the node matching the path given. If part of the path given, or all of the path do not exist, the necessary nodes will be created automatically.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="set_namespace($prefix,_$uri)"
>set_namespace($prefix, $uri)</a></h2>

<p>Sets the namespace prefix mapping to the uri.</p>

<p>Normally in XML::XPath the prefixes in XPath node tests take their context from the current node. This means that foo:bar will always match an element &#60;foo:bar&#62; regardless of the namespace that the prefix foo is mapped to (which might even change within the document, resulting in unexpected results). In order to make prefixes in XPath node tests actually map to a real URI, you need to enable that via a call to the set_namespace method of your XML::XPath object.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="clear_namespaces()"
>clear_namespaces()</a></h2>

<p>Clears all previously set namespace mappings.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$XML::XPath::Namespaces"
>$XML::XPath::Namespaces</a></h2>

<p>Set this to 0 if you <i>don&#39;t</i> want namespace processing to occur. This will make everything a little (tiny) bit faster, but you&#39;ll suffer for it, probably.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Node_Object_Model"
>Node Object Model <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>See <a href="/~msergeant/XML-XPath-1.13/XPath/Node.pm" class="podlinkpod"
>XML::XPath::Node</a>, <a href="/~msergeant/XML-XPath-1.13/XPath/Node/Element.pm" class="podlinkpod"
>XML::XPath::Node::Element</a>, <a href="/~msergeant/XML-XPath-1.13/XPath/Node/Text.pm" class="podlinkpod"
>XML::XPath::Node::Text</a>, <a href="/~msergeant/XML-XPath-1.13/XPath/Node/Comment.pm" class="podlinkpod"
>XML::XPath::Node::Comment</a>, <a href="/~msergeant/XML-XPath-1.13/XPath/Node/Attribute.pm" class="podlinkpod"
>XML::XPath::Node::Attribute</a>, <a href="/~msergeant/XML-XPath-1.13/XPath/Node/Namespace.pm" class="podlinkpod"
>XML::XPath::Node::Namespace</a>, and <a href="/~msergeant/XML-XPath-1.13/XPath/Node/PI.pm" class="podlinkpod"
>XML::XPath::Node::PI</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="On_Garbage_Collection"
>On Garbage Collection <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>XPath nodes work in a special way that allows circular references, and yet still lets Perl&#39;s reference counting garbage collector to clean up the nodes after use. This should be totally transparent to the user, with one caveat: <b>If you free your tree before letting go of a sub-tree, consider that playing with fire and you may get burned</b>. What does this mean to the average user? Not much. Provided you don&#39;t free (or let go out of scope) either the tree you passed to XML::XPath-&#62;new, or if you didn&#39;t pass a tree, and passed a filename or IO-ref, then provided you don&#39;t let the XML::XPath object go out of scope before you let results of find() and its friends go out of scope, then you&#39;ll be fine. Even if you <b>do</b> let the tree go out of scope before results, you&#39;ll probably still be fine. The only case where you may get stung is when the last part of your path/query is either an ancestor or parent axis. In that case the worst that will happen is you&#39;ll end up with a circular reference that won&#39;t get cleared until interpreter destruction time. You can get around that by explicitly calling $node-&#62;DESTROY on each of your result nodes, if you really need to do that.</p>

<p>Mail me direct if that&#39;s not clear. Note that it&#39;s not doom and gloom. It&#39;s by no means perfect, but the worst that will happen is a long running process could leak memory. Most long running processes will therefore be able to explicitly be careful not to free the tree (or XML::XPath object) before freeing results. AxKit, an application that uses XML::XPath, does this and I didn&#39;t have to make any changes to the code - it&#39;s already sensible programming.</p>

<p>If you <i>really</i> don&#39;t want all this to happen, then set the variable $XML::XPath::SafeMode, and call $xp-&#62;cleanup() on the XML::XPath object when you&#39;re finished, or $tree-&#62;dispose() if you have a tree instead.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Example"
>Example <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Please see the test files in t/ for examples on how to use XPath.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Support/Author"
>Support/Author <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is copyright 2000 AxKit.com Ltd. This is free software, and as such comes with NO WARRANTY. No dates are used in this module. You may distribute this module under the terms of either the Gnu GPL, or the Artistic License (the same terms as Perl itself).</p>

<p>For support, please subscribe to the Perl-XML mailing list at the URL <a href="http://listserv.activestate.com/mailman/listinfo/perl-xml" class="podlinkurl"
>http://listserv.activestate.com/mailman/listinfo/perl-xml</a></p>

<p>Matt Sergeant, matt@sergeant.org</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~msergeant/XML-XPath-1.13/XPath/Literal.pm" class="podlinkpod"
>XML::XPath::Literal</a>, <a href="/~msergeant/XML-XPath-1.13/XPath/Boolean.pm" class="podlinkpod"
>XML::XPath::Boolean</a>, <a href="/~msergeant/XML-XPath-1.13/XPath/Number.pm" class="podlinkpod"
>XML::XPath::Number</a>, <a href="/~msergeant/XML-XPath-1.13/XPath/XMLParser.pm" class="podlinkpod"
>XML::XPath::XMLParser</a>, <a href="/~msergeant/XML-XPath-1.13/XPath/NodeSet.pm" class="podlinkpod"
>XML::XPath::NodeSet</a>, <a href="/~msergeant/XML-XPath-1.13/XPath/PerlSAX.pm" class="podlinkpod"
>XML::XPath::PerlSAX</a>, <a href="/~msergeant/XML-XPath-1.13/XPath/Builder.pm" class="podlinkpod"
>XML::XPath::Builder</a>.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78283 Uploads, 24725 Distributions
106015 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 07:44:52 2012 GMT (0.110826015472412) @cpansearch1 -->
 </body>
</html>
