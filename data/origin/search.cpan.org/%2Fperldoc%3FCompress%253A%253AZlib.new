<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Compress::Zlib - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","IO-Compress",3]);
    _gaq.push(["_setCustomVar",5,"Release","IO-Compress-2.049",3]);
    _gaq.push(["_setCustomVar",3,"Module","Compress::Zlib",3]);
    _gaq.push(["_setCustomVar",1,"Author","PMQS",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Compress::Zlib">permalink</a></div>
  <a href="/~pmqs/">Paul Marquess</a> &gt;
  <a href="/~pmqs/IO-Compress-2.049/">IO-Compress-2.049</a> &gt;
  Compress::Zlib
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/1bf245ac173d6991ade027315ff58683?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/P/PM/PMQS/IO-Compress-2.049.tar.gz">IO-Compress-2.049.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Compress%3A%3AZlib;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~PMQS/IO-Compress-2.049/lib/Compress/Zlib.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Archive%3A%3AZip">Archive::Zip</a><br>
<a href="/perldoc?Archive%3A%3ATar">Archive::Tar</a><br>
<a href="/perldoc?PDF%3A%3AAPI2">PDF::API2</a><br>
<a href="/perldoc?Digest%3A%3AMD5">Digest::MD5</a><br>
<a href="/perldoc?IO%3A%3AZlib">IO::Zlib</a><br>
<a href="/perldoc?WWW%3A%3AMechanize">WWW::Mechanize</a><br>
<a href="/perldoc?PerlIO%3A%3Agzip">PerlIO::gzip</a><br>
<a href="/perldoc?File%3A%3AFind">File::Find</a><br>
<a href="/perldoc?LWP%3A%3AUserAgent">LWP::UserAgent</a><br>
<a href="/perldoc?Module%3A%3ABuild">Module::Build</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Compress%3A%3AZlib">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 7</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=IO-Compress">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.049 &nbsp;
<span class="noprint">
  <a href="/src/PMQS/IO-Compress-2.049/lib/Compress/Zlib.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Notes_for_users_of_Compress::Zlib_version_1'>Notes for users of Compress::Zlib version 1</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#GZIP_INTERFACE'>GZIP INTERFACE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Examples'>Examples</a>
    <li class='indexItem indexItem2'><a href='#Compress::Zlib::memGzip'>Compress::Zlib::memGzip</a>
    <li class='indexItem indexItem2'><a href='#Compress::Zlib::memGunzip'>Compress::Zlib::memGunzip</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#COMPRESS/UNCOMPRESS'>COMPRESS/UNCOMPRESS</a>
  <li class='indexItem indexItem1'><a href='#Deflate_Interface'>Deflate Interface</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#($d,_$status)_=_deflateInit(_[OPT]_)'>($d, $status) = deflateInit( [OPT] )</a>
    <li class='indexItem indexItem2'><a href='#($out,_$status)_=_$d-&#62;deflate($buffer)'>($out, $status) = $d-&#62;deflate($buffer)</a>
    <li class='indexItem indexItem2'><a href='#($out,_$status)_=_$d-&#62;flush()_=head2_($out,_$status)_=_$d-&#62;flush($flush_type)'>($out, $status) = $d-&#62;flush() =head2 ($out, $status) = $d-&#62;flush($flush_type)</a>
    <li class='indexItem indexItem2'><a href='#$status_=_$d-&#62;deflateParams([OPT])'>$status = $d-&#62;deflateParams([OPT])</a>
    <li class='indexItem indexItem2'><a href='#$d-&#62;dict_adler()'>$d-&#62;dict_adler()</a>
    <li class='indexItem indexItem2'><a href='#$d-&#62;msg()'>$d-&#62;msg()</a>
    <li class='indexItem indexItem2'><a href='#$d-&#62;total_in()'>$d-&#62;total_in()</a>
    <li class='indexItem indexItem2'><a href='#$d-&#62;total_out()'>$d-&#62;total_out()</a>
    <li class='indexItem indexItem2'><a href='#Example'>Example</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Inflate_Interface'>Inflate Interface</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#($i,_$status)_=_inflateInit()'>($i, $status) = inflateInit()</a>
    <li class='indexItem indexItem2'><a href='#($out,_$status)_=_$i-&#62;inflate($buffer)'>($out, $status) = $i-&#62;inflate($buffer)</a>
    <li class='indexItem indexItem2'><a href='#$status_=_$i-&#62;inflateSync($buffer)'>$status = $i-&#62;inflateSync($buffer)</a>
    <li class='indexItem indexItem2'><a href='#$i-&#62;dict_adler()'>$i-&#62;dict_adler()</a>
    <li class='indexItem indexItem2'><a href='#$i-&#62;msg()'>$i-&#62;msg()</a>
    <li class='indexItem indexItem2'><a href='#$i-&#62;total_in()'>$i-&#62;total_in()</a>
    <li class='indexItem indexItem2'><a href='#$i-&#62;total_out()'>$i-&#62;total_out()</a>
    <li class='indexItem indexItem2'><a href='#Example'>Example</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CHECKSUM_FUNCTIONS'>CHECKSUM FUNCTIONS</a>
  <li class='indexItem indexItem1'><a href='#Misc'>Misc</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#my_$version_=_Compress::Zlib::zlib_version();'>my $version = Compress::Zlib::zlib_version();</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CONSTANTS'>CONSTANTS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#MODIFICATION_HISTORY'>MODIFICATION HISTORY</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Compress::Zlib - Interface to zlib compression library</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use Compress::Zlib ;

    ($d, $status) = deflateInit( [OPT] ) ;
    $status = $d-&#62;deflate($input, $output) ;
    $status = $d-&#62;flush([$flush_type]) ;
    $d-&#62;deflateParams(OPTS) ;
    $d-&#62;deflateTune(OPTS) ;
    $d-&#62;dict_adler() ;
    $d-&#62;crc32() ;
    $d-&#62;adler32() ;
    $d-&#62;total_in() ;
    $d-&#62;total_out() ;
    $d-&#62;msg() ;
    $d-&#62;get_Strategy();
    $d-&#62;get_Level();
    $d-&#62;get_BufSize();

    ($i, $status) = inflateInit( [OPT] ) ;
    $status = $i-&#62;inflate($input, $output [, $eof]) ;
    $status = $i-&#62;inflateSync($input) ;
    $i-&#62;dict_adler() ;
    $d-&#62;crc32() ;
    $d-&#62;adler32() ;
    $i-&#62;total_in() ;
    $i-&#62;total_out() ;
    $i-&#62;msg() ;
    $d-&#62;get_BufSize();

    $dest = compress($source) ;
    $dest = uncompress($source) ;

    $gz = gzopen($filename or filehandle, $mode) ;
    $bytesread = $gz-&#62;gzread($buffer [,$size]) ;
    $bytesread = $gz-&#62;gzreadline($line) ;
    $byteswritten = $gz-&#62;gzwrite($buffer) ;
    $status = $gz-&#62;gzflush($flush) ;
    $offset = $gz-&#62;gztell() ;
    $status = $gz-&#62;gzseek($offset, $whence) ;
    $status = $gz-&#62;gzclose() ;
    $status = $gz-&#62;gzeof() ;
    $status = $gz-&#62;gzsetparams($level, $strategy) ;
    $errstring = $gz-&#62;gzerror() ; 
    $gzerrno

    $dest = Compress::Zlib::memGzip($buffer) ;
    $dest = Compress::Zlib::memGunzip($buffer) ;

    $crc = adler32($buffer [,$crc]) ;
    $crc = crc32($buffer [,$crc]) ;

    $crc = adler32_combine($crc1, $crc2, $len2)l
    $crc = crc32_combine($adler1, $adler2, $len2)

    my $version = Compress::Raw::Zlib::zlib_version();</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <i>Compress::Zlib</i> module provides a Perl interface to the <i>zlib</i> compression library (see <a href="#AUTHOR" class="podlinkpod"
>&#34;AUTHOR&#34;</a> for details about where to get <i>zlib</i>).</p>

<p>The <code>Compress::Zlib</code> module can be split into two general areas of functionality, namely a simple read/write interface to <i>gzip</i> files and a low-level in-memory compression/decompression interface.</p>

<p>Each of these areas will be discussed in the following sections.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Notes_for_users_of_Compress::Zlib_version_1"
>Notes for users of Compress::Zlib version 1</a></h2>

<p>The main change in <code>Compress::Zlib</code> version 2.x is that it does not now interface directly to the zlib library. Instead it uses the <code>IO::Compress::Gzip</code> and <code>IO::Uncompress::Gunzip</code> modules for reading/writing gzip files, and the <code>Compress::Raw::Zlib</code> module for some low-level zlib access.</p>

<p>The interface provided by version 2 of this module should be 100% backward compatible with version 1. If you find a difference in the expected behaviour please contact the author (See <a href="#AUTHOR" class="podlinkpod"
>&#34;AUTHOR&#34;</a>). See <a href="#GZIP_INTERFACE" class="podlinkpod"
>&#34;GZIP INTERFACE&#34;</a></p>

<p>With the creation of the <code>IO::Compress</code> and <code>IO::Uncompress</code> modules no new features are planned for <code>Compress::Zlib</code> - the new modules do everything that <code>Compress::Zlib</code> does and then some. Development on <code>Compress::Zlib</code> will be limited to bug fixes only.</p>

<p>If you are writing new code, your first port of call should be one of the new <code>IO::Compress</code> or <code>IO::Uncompress</code> modules.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="GZIP_INTERFACE"
>GZIP INTERFACE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A number of functions are supplied in <i>zlib</i> for reading and writing <i>gzip</i> files that conform to RFC 1952. This module provides an interface to most of them.</p>

<p>If you have previously used <code>Compress::Zlib</code> 1.x, the following enhancements/changes have been made to the <code>gzopen</code> interface:</p>

<ol>
<li>If you want to open either STDIN or STDOUT with <code>gzopen</code>, you can now optionally use the special filename &#34;<code>-</code>&#34; as a synonym for <code>\*STDIN</code> and <code>\*STDOUT</code>.</li>

<li>In <code>Compress::Zlib</code> version 1.x, <code>gzopen</code> used the zlib library to open the underlying file. This made things especially tricky when a Perl filehandle was passed to <code>gzopen</code>. Behind the scenes the numeric C file descriptor had to be extracted from the Perl filehandle and this passed to the zlib library.
<p>Apart from being non-portable to some operating systems, this made it difficult to use <code>gzopen</code> in situations where you wanted to extract/create a gzip data stream that is embedded in a larger file, without having to resort to opening and closing the file multiple times.</p>

<p>It also made it impossible to pass a perl filehandle that wasn&#39;t associated with a real filesystem file, like, say, an <code>IO::String</code>.</p>

<p>In <code>Compress::Zlib</code> version 2.x, the <code>gzopen</code> interface has been completely rewritten to use the <a href="/~pmqs/IO-Compress-2.049/lib/IO/Compress/Gzip.pm" class="podlinkpod"
>IO::Compress::Gzip</a> for writing gzip files and <a href="/~pmqs/IO-Compress-2.049/lib/IO/Uncompress/Gunzip.pm" class="podlinkpod"
>IO::Uncompress::Gunzip</a> for reading gzip files. None of the limitations mentioned above apply.</p>
</li>

<li>Addition of <code>gzseek</code> to provide a restricted <code>seek</code> interface.</li>

<li>Added <code>gztell</code>.</li>
</ol>

<p>A more complete and flexible interface for reading/writing gzip files/buffers is included with the module <code>IO-Compress-Zlib</code>. See <a href="/~pmqs/IO-Compress-2.049/lib/IO/Compress/Gzip.pm" class="podlinkpod"
>IO::Compress::Gzip</a> and <a href="/~pmqs/IO-Compress-2.049/lib/IO/Uncompress/Gunzip.pm" class="podlinkpod"
>IO::Uncompress::Gunzip</a> for more details.</p>

<dl>
<dt><a name='gz'></a><a name="$gz_=_gzopen($filename,_$mode)"
><b>$gz = gzopen($filename, $mode)</b></a></dt>

<dd>
<dt><a name='gz'></a><a name="$gz_=_gzopen($filehandle,_$mode)"
><b>$gz = gzopen($filehandle, $mode)</b></a></dt>

<dd>
<p>This function opens either the <i>gzip</i> file <code>$filename</code> for reading or writing or attaches to the opened filehandle, <code>$filehandle</code>. It returns an object on success and <code>undef</code> on failure.</p>

<p>When writing a gzip file this interface will <i>always</i> create the smallest possible gzip header (exactly 10 bytes). If you want greater control over what gets stored in the gzip header (like the original filename or a comment) use <a href="/~pmqs/IO-Compress-2.049/lib/IO/Compress/Gzip.pm" class="podlinkpod"
>IO::Compress::Gzip</a> instead. Similarly if you want to read the contents of the gzip header use <a href="/~pmqs/IO-Compress-2.049/lib/IO/Uncompress/Gunzip.pm" class="podlinkpod"
>IO::Uncompress::Gunzip</a>.</p>

<p>The second parameter, <code>$mode</code>, is used to specify whether the file is opened for reading or writing and to optionally specify a compression level and compression strategy when writing. The format of the <code>$mode</code> parameter is similar to the mode parameter to the &#39;C&#39; function <code>fopen</code>, so &#34;rb&#34; is used to open for reading, &#34;wb&#34; for writing and &#34;ab&#34; for appending (writing at the end of the file).</p>

<p>To specify a compression level when writing, append a digit between 0 and 9 to the mode string -- 0 means no compression and 9 means maximum compression. If no compression level is specified Z_DEFAULT_COMPRESSION is used.</p>

<p>To specify the compression strategy when writing, append &#39;f&#39; for filtered data, &#39;h&#39; for Huffman only compression, or &#39;R&#39; for run-length encoding. If no strategy is specified Z_DEFAULT_STRATEGY is used.</p>

<p>So, for example, &#34;wb9&#34; means open for writing with the maximum compression using the default strategy and &#34;wb4R&#34; means open for writing with compression level 4 and run-length encoding.</p>

<p>Refer to the <i>zlib</i> documentation for the exact format of the <code>$mode</code> parameter.</p>

<dt><a name='bytesread'></a><a name="$bytesread_=_$gz-&#62;gzread($buffer_[,_$size])_;"
><b>$bytesread = $gz-&#62;gzread($buffer [, $size]) ;</b></a></dt>

<dd>
<p>Reads <code>$size</code> bytes from the compressed file into <code>$buffer</code>. If <code>$size</code> is not specified, it will default to 4096. If the scalar <code>$buffer</code> is not large enough, it will be extended automatically.</p>

<p>Returns the number of bytes actually read. On EOF it returns 0 and in the case of an error, -1.</p>

<dt><a name='bytesread'></a><a name="$bytesread_=_$gz-&#62;gzreadline($line)_;"
><b>$bytesread = $gz-&#62;gzreadline($line) ;</b></a></dt>

<dd>
<p>Reads the next line from the compressed file into <code>$line</code>.</p>

<p>Returns the number of bytes actually read. On EOF it returns 0 and in the case of an error, -1.</p>

<p>It is legal to intermix calls to <code>gzread</code> and <code>gzreadline</code>.</p>

<p>To maintain backward compatibility with version 1.x of this module <code>gzreadline</code> ignores the <code>$/</code> variable - it <i>always</i> uses the string <code>&#34;\n&#34;</code> as the line delimiter.</p>

<p>If you want to read a gzip file a line at a time and have it respect the <code>$/</code> variable (or <code>$INPUT_RECORD_SEPARATOR</code>, or <code>$RS</code> when <code>English</code> is in use) see <a href="/~pmqs/IO-Compress-2.049/lib/IO/Uncompress/Gunzip.pm" class="podlinkpod"
>IO::Uncompress::Gunzip</a>.</p>

<dt><a name='byteswritten'></a><a name="$byteswritten_=_$gz-&#62;gzwrite($buffer)_;"
><b>$byteswritten = $gz-&#62;gzwrite($buffer) ;</b></a></dt>

<dd>
<p>Writes the contents of <code>$buffer</code> to the compressed file. Returns the number of bytes actually written, or 0 on error.</p>

<dt><a name='status'></a><a name="$status_=_$gz-&#62;gzflush($flush_type)_;"
><b>$status = $gz-&#62;gzflush($flush_type) ;</b></a></dt>

<dd>
<p>Flushes all pending output into the compressed file.</p>

<p>This method takes an optional parameter, <code>$flush_type</code>, that controls how the flushing will be carried out. By default the <code>$flush_type</code> used is <code>Z_FINISH</code>. Other valid values for <code>$flush_type</code> are <code>Z_NO_FLUSH</code>, <code>Z_SYNC_FLUSH</code>, <code>Z_FULL_FLUSH</code> and <code>Z_BLOCK</code>. It is strongly recommended that you only set the <code>flush_type</code> parameter if you fully understand the implications of what it does - overuse of <code>flush</code> can seriously degrade the level of compression achieved. See the <code>zlib</code> documentation for details.</p>

<p>Returns 0 on success.</p>

<dt><a name='offset'></a><a name="$offset_=_$gz-&#62;gztell()_;"
><b>$offset = $gz-&#62;gztell() ;</b></a></dt>

<dd>
<p>Returns the uncompressed file offset.</p>

<dt><a name='status'></a><a name="$status_=_$gz-&#62;gzseek($offset,_$whence)_;"
><b>$status = $gz-&#62;gzseek($offset, $whence) ;</b></a></dt>

<dd>
<p>Provides a sub-set of the <code>seek</code> functionality, with the restriction that it is only legal to seek forward in the compressed file. It is a fatal error to attempt to seek backward.</p>

<p>When opened for writing, empty parts of the file will have NULL (0x00) bytes written to them.</p>

<p>The <code>$whence</code> parameter should be one of SEEK_SET, SEEK_CUR or SEEK_END.</p>

<p>Returns 1 on success, 0 on failure.</p>

<dt><a name='gz'></a><a name="$gz-&#62;gzclose"
><b>$gz-&#62;gzclose</b></a></dt>

<dd>
<p>Closes the compressed file. Any pending data is flushed to the file before it is closed.</p>

<p>Returns 0 on success.</p>

<dt><a name='gz'></a><a name="$gz-&#62;gzsetparams($level,_$strategy"
><b>$gz-&#62;gzsetparams($level, $strategy</b></a></dt>

<dd>
<p>Change settings for the deflate stream <code>$gz</code>.</p>

<p>The list of the valid options is shown below. Options not specified will remain unchanged.</p>

<p>Note: This method is only available if you are running zlib 1.0.6 or better.</p>

<dl>
<dt><a name='level'></a><a name="$level"
><b>$level</b></a></dt>

<dd>
<p>Defines the compression level. Valid values are 0 through 9, <code>Z_NO_COMPRESSION</code>, <code>Z_BEST_SPEED</code>, <code>Z_BEST_COMPRESSION</code>, and <code>Z_DEFAULT_COMPRESSION</code>.</p>

<dt><a name='strategy'></a><a name="$strategy"
><b>$strategy</b></a></dt>

<dd>
<p>Defines the strategy used to tune the compression. The valid values are <code>Z_DEFAULT_STRATEGY</code>, <code>Z_FILTERED</code> and <code>Z_HUFFMAN_ONLY</code>.</p>
</dd>
</dl>

<dt><a name='gz'></a><a name="$gz-&#62;gzerror"
><b>$gz-&#62;gzerror</b></a></dt>

<dd>
<p>Returns the <i>zlib</i> error message or number for the last operation associated with <code>$gz</code>. The return value will be the <i>zlib</i> error number when used in a numeric context and the <i>zlib</i> error message when used in a string context. The <i>zlib</i> error number constants, shown below, are available for use.</p>

<pre class="sh_perl">    Z_OK
    Z_STREAM_END
    Z_ERRNO
    Z_STREAM_ERROR
    Z_DATA_ERROR
    Z_MEM_ERROR
    Z_BUF_ERROR</pre>

<dt><a name='gzerrno'></a><a name="$gzerrno"
><b>$gzerrno</b></a></dt>

<dd>
<p>The <code>$gzerrno</code> scalar holds the error code associated with the most recent <i>gzip</i> routine. Note that unlike <code>gzerror()</code>, the error is <i>not</i> associated with a particular file.</p>

<p>As with <code>gzerror()</code> it returns an error number in numeric context and an error message in string context. Unlike <code>gzerror()</code> though, the error message will correspond to the <i>zlib</i> message when the error is associated with <i>zlib</i> itself, or the UNIX error message when it is not (i.e. <i>zlib</i> returned <code>Z_ERRORNO</code>).</p>

<p>As there is an overlap between the error numbers used by <i>zlib</i> and UNIX, <code>$gzerrno</code> should only be used to check for the presence of <i>an</i> error in numeric context. Use <code>gzerror()</code> to check for specific <i>zlib</i> errors. The <i>gzcat</i> example below shows how the variable can be used safely.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Examples"
>Examples</a></h2>

<p>Here is an example script which uses the interface. It implements a <i>gzcat</i> function.</p>

<pre class="sh_perl">    use strict ;
    use warnings ;
    
    use Compress::Zlib ;
    
    # use stdin if no files supplied
    @ARGV = &#39;-&#39; unless @ARGV ;
    
    foreach my $file (@ARGV) {
        my $buffer ;
    
        my $gz = gzopen($file, &#34;rb&#34;) 
             or die &#34;Cannot open $file: $gzerrno\n&#34; ;
    
        print $buffer while $gz-&#62;gzread($buffer) &#62; 0 ;
    
        die &#34;Error reading from $file: $gzerrno&#34; . ($gzerrno+0) . &#34;\n&#34; 
            if $gzerrno != Z_STREAM_END ;
        
        $gz-&#62;gzclose() ;
    }</pre>

<p>Below is a script which makes use of <code>gzreadline</code>. It implements a very simple <i>grep</i> like script.</p>

<pre class="sh_perl">    use strict ;
    use warnings ;
    
    use Compress::Zlib ;
    
    die &#34;Usage: gzgrep pattern [file...]\n&#34;
        unless @ARGV &#62;= 1;
    
    my $pattern = shift ;
    
    # use stdin if no files supplied
    @ARGV = &#39;-&#39; unless @ARGV ;
    
    foreach my $file (@ARGV) {
        my $gz = gzopen($file, &#34;rb&#34;) 
             or die &#34;Cannot open $file: $gzerrno\n&#34; ;
    
        while ($gz-&#62;gzreadline($_) &#62; 0) {
            print if /$pattern/ ;
        }
    
        die &#34;Error reading from $file: $gzerrno\n&#34; 
            if $gzerrno != Z_STREAM_END ;
        
        $gz-&#62;gzclose() ;
    }</pre>

<p>This script, <i>gzstream</i>, does the opposite of the <i>gzcat</i> script above. It reads from standard input and writes a gzip data stream to standard output.</p>

<pre class="sh_perl">    use strict ;
    use warnings ;
    
    use Compress::Zlib ;
    
    binmode STDOUT;  # gzopen only sets it on the fd
    
    my $gz = gzopen(\*STDOUT, &#34;wb&#34;)
          or die &#34;Cannot open stdout: $gzerrno\n&#34; ;
    
    while (&#60;&#62;) {
        $gz-&#62;gzwrite($_) 
          or die &#34;error writing: $gzerrno\n&#34; ;
    }

    $gz-&#62;gzclose ;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Compress::Zlib::memGzip"
>Compress::Zlib::memGzip</a></h2>

<p>This function is used to create an in-memory gzip file with the minimum possible gzip header (exactly 10 bytes).</p>

<pre class="sh_perl">    $dest = Compress::Zlib::memGzip($buffer) 
        or die &#34;Cannot compress: $gzerrno\n&#34;;</pre>

<p>If successful, it returns the in-memory gzip file. Otherwise it returns <code>undef</code> and the <code>$gzerrno</code> variable will store the zlib error code.</p>

<p>The <code>$buffer</code> parameter can either be a scalar or a scalar reference.</p>

<p>See <a href="/~pmqs/IO-Compress-2.049/lib/IO/Compress/Gzip.pm" class="podlinkpod"
>IO::Compress::Gzip</a> for an alternative way to carry out in-memory gzip compression.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Compress::Zlib::memGunzip"
>Compress::Zlib::memGunzip</a></h2>

<p>This function is used to uncompress an in-memory gzip file.</p>

<pre class="sh_perl">    $dest = Compress::Zlib::memGunzip($buffer) 
        or die &#34;Cannot uncompress: $gzerrno\n&#34;;</pre>

<p>If successful, it returns the uncompressed gzip file. Otherwise it returns <code>undef</code> and the <code>$gzerrno</code> variable will store the zlib error code.</p>

<p>The <code>$buffer</code> parameter can either be a scalar or a scalar reference. The contents of the <code>$buffer</code> parameter are destroyed after calling this function.</p>

<p>If <code>$buffer</code> consists of multiple concatenated gzip data streams only the first will be uncompressed. Use <code>gunzip</code> with the <code>MultiStream</code> option in the <code>IO::Uncompress::Gunzip</code> module if you need to deal with concatenated data streams.</p>

<p>See <a href="/~pmqs/IO-Compress-2.049/lib/IO/Uncompress/Gunzip.pm" class="podlinkpod"
>IO::Uncompress::Gunzip</a> for an alternative way to carry out in-memory gzip uncompression.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COMPRESS/UNCOMPRESS"
>COMPRESS/UNCOMPRESS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Two functions are provided to perform in-memory compression/uncompression of RFC 1950 data streams. They are called <code>compress</code> and <code>uncompress</code>.</p>

<dl>
<dt><a name='dest'></a><a name="$dest_=_compress($source_[,_$level]_)_;"
><b>$dest = compress($source [, $level] ) ;</b></a></dt>

<dd>
<p>Compresses <code>$source</code>. If successful it returns the compressed data. Otherwise it returns <i>undef</i>.</p>

<p>The source buffer, <code>$source</code>, can either be a scalar or a scalar reference.</p>

<p>The <code>$level</code> parameter defines the compression level. Valid values are 0 through 9, <code>Z_NO_COMPRESSION</code>, <code>Z_BEST_SPEED</code>, <code>Z_BEST_COMPRESSION</code>, and <code>Z_DEFAULT_COMPRESSION</code>. If <code>$level</code> is not specified <code>Z_DEFAULT_COMPRESSION</code> will be used.</p>

<dt><a name='dest'></a><a name="$dest_=_uncompress($source)_;"
><b>$dest = uncompress($source) ;</b></a></dt>

<dd>
<p>Uncompresses <code>$source</code>. If successful it returns the uncompressed data. Otherwise it returns <i>undef</i>.</p>

<p>The source buffer can either be a scalar or a scalar reference.</p>
</dd>
</dl>

<p>Please note: the two functions defined above are <i>not</i> compatible with the Unix commands of the same name.</p>

<p>See <a href="/perldoc?IO%3A%3ADeflate" class="podlinkpod"
>IO::Deflate</a> and <a href="/perldoc?IO%3A%3AInflate" class="podlinkpod"
>IO::Inflate</a> included with this distribution for an alternative interface for reading/writing RFC 1950 files/buffers.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Deflate_Interface"
>Deflate Interface <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This section defines an interface that allows in-memory compression using the <i>deflate</i> interface provided by zlib.</p>

<p>Here is a definition of the interface available:</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="($d,_$status)_=_deflateInit(_[OPT]_)"
><b>($d, $status) = deflateInit( [OPT] )</b></a></h2>

<p>Initialises a deflation stream.</p>

<p>It combines the features of the <i>zlib</i> functions <code>deflateInit</code>, <code>deflateInit2</code> and <code>deflateSetDictionary</code>.</p>

<p>If successful, it will return the initialised deflation stream, <code>$d</code> and <code>$status</code> of <code>Z_OK</code> in a list context. In scalar context it returns the deflation stream, <code>$d</code>, only.</p>

<p>If not successful, the returned deflation stream (<code>$d</code>) will be <i>undef</i> and <code>$status</code> will hold the exact <i>zlib</i> error code.</p>

<p>The function optionally takes a number of named options specified as <code>-Name=&#62;value</code> pairs. This allows individual options to be tailored without having to specify them all in the parameter list.</p>

<p>For backward compatibility, it is also possible to pass the parameters as a reference to a hash containing the name=&#62;value pairs.</p>

<p>The function takes one optional parameter, a reference to a hash. The contents of the hash allow the deflation interface to be tailored.</p>

<p>Here is a list of the valid options:</p>

<dl>
<dt><a name='Level'></a><a name="-Level"
><b>-Level</b></a></dt>

<dd>
<p>Defines the compression level. Valid values are 0 through 9, <code>Z_NO_COMPRESSION</code>, <code>Z_BEST_SPEED</code>, <code>Z_BEST_COMPRESSION</code>, and <code>Z_DEFAULT_COMPRESSION</code>.</p>

<p>The default is Z_DEFAULT_COMPRESSION.</p>

<dt><a name='Method'></a><a name="-Method"
><b>-Method</b></a></dt>

<dd>
<p>Defines the compression method. The only valid value at present (and the default) is Z_DEFLATED.</p>

<dt><a name='WindowBits'></a><a name="-WindowBits"
><b>-WindowBits</b></a></dt>

<dd>
<p>To create an RFC 1950 data stream, set <code>WindowBits</code> to a positive number.</p>

<p>To create an RFC 1951 data stream, set <code>WindowBits</code> to <code>-MAX_WBITS</code>.</p>

<p>For a full definition of the meaning and valid values for <code>WindowBits</code> refer to the <i>zlib</i> documentation for <i>deflateInit2</i>.</p>

<p>Defaults to MAX_WBITS.</p>

<dt><a name='MemLevel'></a><a name="-MemLevel"
><b>-MemLevel</b></a></dt>

<dd>
<p>For a definition of the meaning and valid values for <code>MemLevel</code> refer to the <i>zlib</i> documentation for <i>deflateInit2</i>.</p>

<p>Defaults to MAX_MEM_LEVEL.</p>

<dt><a name='Strategy'></a><a name="-Strategy"
><b>-Strategy</b></a></dt>

<dd>
<p>Defines the strategy used to tune the compression. The valid values are <code>Z_DEFAULT_STRATEGY</code>, <code>Z_FILTERED</code> and <code>Z_HUFFMAN_ONLY</code>.</p>

<p>The default is Z_DEFAULT_STRATEGY.</p>

<dt><a name='Dictionary'></a><a name="-Dictionary"
><b>-Dictionary</b></a></dt>

<dd>
<p>When a dictionary is specified <i>Compress::Zlib</i> will automatically call <code>deflateSetDictionary</code> directly after calling <code>deflateInit</code>. The Adler32 value for the dictionary can be obtained by calling the method <code>$d-</code>dict_adler()&#62;.</p>

<p>The default is no dictionary.</p>

<dt><a name='Bufsize'></a><a name="-Bufsize"
><b>-Bufsize</b></a></dt>

<dd>
<p>Sets the initial size for the deflation buffer. If the buffer has to be reallocated to increase the size, it will grow in increments of <code>Bufsize</code>.</p>

<p>The default is 4096.</p>
</dd>
</dl>

<p>Here is an example of using the <code>deflateInit</code> optional parameter list to override the default buffer size and compression level. All other options will take their default values.</p>

<pre class="sh_perl">    deflateInit( -Bufsize =&#62; 300, 
                 -Level =&#62; Z_BEST_SPEED  ) ;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="($out,_$status)_=_$d-&#62;deflate($buffer)"
><b>($out, $status) = $d-&#62;deflate($buffer)</b></a></h2>

<p>Deflates the contents of <code>$buffer</code>. The buffer can either be a scalar or a scalar reference. When finished, <code>$buffer</code> will be completely processed (assuming there were no errors). If the deflation was successful it returns the deflated output, <code>$out</code>, and a status value, <code>$status</code>, of <code>Z_OK</code>.</p>

<p>On error, <code>$out</code> will be <i>undef</i> and <code>$status</code> will contain the <i>zlib</i> error code.</p>

<p>In a scalar context <code>deflate</code> will return <code>$out</code> only.</p>

<p>As with the <i>deflate</i> function in <i>zlib</i>, it is not necessarily the case that any output will be produced by this method. So don&#39;t rely on the fact that <code>$out</code> is empty for an error test.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="($out,_$status)_=_$d-&#62;flush()_=head2_($out,_$status)_=_$d-&#62;flush($flush_type)"
><b>($out, $status) = $d-&#62;flush()</b> =head2 <b>($out, $status) = $d-&#62;flush($flush_type)</b></a></h2>

<p>Typically used to finish the deflation. Any pending output will be returned via <code>$out</code>. <code>$status</code> will have a value <code>Z_OK</code> if successful.</p>

<p>In a scalar context <code>flush</code> will return <code>$out</code> only.</p>

<p>Note that flushing can seriously degrade the compression ratio, so it should only be used to terminate a decompression (using <code>Z_FINISH</code>) or when you want to create a <i>full flush point</i> (using <code>Z_FULL_FLUSH</code>).</p>

<p>By default the <code>flush_type</code> used is <code>Z_FINISH</code>. Other valid values for <code>flush_type</code> are <code>Z_NO_FLUSH</code>, <code>Z_PARTIAL_FLUSH</code>, <code>Z_SYNC_FLUSH</code> and <code>Z_FULL_FLUSH</code>. It is strongly recommended that you only set the <code>flush_type</code> parameter if you fully understand the implications of what it does. See the <code>zlib</code> documentation for details.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$status_=_$d-&#62;deflateParams([OPT])"
><b>$status = $d-&#62;deflateParams([OPT])</b></a></h2>

<p>Change settings for the deflate stream <code>$d</code>.</p>

<p>The list of the valid options is shown below. Options not specified will remain unchanged.</p>

<dl>
<dt><a name='Level'></a><a name="-Level"
><b>-Level</b></a></dt>

<dd>
<p>Defines the compression level. Valid values are 0 through 9, <code>Z_NO_COMPRESSION</code>, <code>Z_BEST_SPEED</code>, <code>Z_BEST_COMPRESSION</code>, and <code>Z_DEFAULT_COMPRESSION</code>.</p>

<dt><a name='Strategy'></a><a name="-Strategy"
><b>-Strategy</b></a></dt>

<dd>
<p>Defines the strategy used to tune the compression. The valid values are <code>Z_DEFAULT_STRATEGY</code>, <code>Z_FILTERED</code> and <code>Z_HUFFMAN_ONLY</code>.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$d-&#62;dict_adler()"
><b>$d-&#62;dict_adler()</b></a></h2>

<p>Returns the adler32 value for the dictionary.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$d-&#62;msg()"
><b>$d-&#62;msg()</b></a></h2>

<p>Returns the last error message generated by zlib.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$d-&#62;total_in()"
><b>$d-&#62;total_in()</b></a></h2>

<p>Returns the total number of bytes uncompressed bytes input to deflate.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$d-&#62;total_out()"
><b>$d-&#62;total_out()</b></a></h2>

<p>Returns the total number of compressed bytes output from deflate.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Example"
>Example</a></h2>

<p>Here is a trivial example of using <code>deflate</code>. It simply reads standard input, deflates it and writes it to standard output.</p>

<pre class="sh_perl">    use strict ;
    use warnings ;

    use Compress::Zlib ;

    binmode STDIN;
    binmode STDOUT;
    my $x = deflateInit()
       or die &#34;Cannot create a deflation stream\n&#34; ;

    my ($output, $status) ;
    while (&#60;&#62;)
    {
        ($output, $status) = $x-&#62;deflate($_) ;
    
        $status == Z_OK
            or die &#34;deflation failed\n&#34; ;
    
        print $output ;
    }
    
    ($output, $status) = $x-&#62;flush() ;
    
    $status == Z_OK
        or die &#34;deflation failed\n&#34; ;
    
    print $output ;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Inflate_Interface"
>Inflate Interface <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This section defines the interface available that allows in-memory uncompression using the <i>deflate</i> interface provided by zlib.</p>

<p>Here is a definition of the interface:</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="($i,_$status)_=_inflateInit()"
><b>($i, $status) = inflateInit()</b></a></h2>

<p>Initialises an inflation stream.</p>

<p>In a list context it returns the inflation stream, <code>$i</code>, and the <i>zlib</i> status code in <code>$status</code>. In a scalar context it returns the inflation stream only.</p>

<p>If successful, <code>$i</code> will hold the inflation stream and <code>$status</code> will be <code>Z_OK</code>.</p>

<p>If not successful, <code>$i</code> will be <i>undef</i> and <code>$status</code> will hold the <i>zlib</i> error code.</p>

<p>The function optionally takes a number of named options specified as <code>-Name=&#62;value</code> pairs. This allows individual options to be tailored without having to specify them all in the parameter list.</p>

<p>For backward compatibility, it is also possible to pass the parameters as a reference to a hash containing the name=&#62;value pairs.</p>

<p>The function takes one optional parameter, a reference to a hash. The contents of the hash allow the deflation interface to be tailored.</p>

<p>Here is a list of the valid options:</p>

<dl>
<dt><a name='WindowBits'></a><a name="-WindowBits"
><b>-WindowBits</b></a></dt>

<dd>
<p>To uncompress an RFC 1950 data stream, set <code>WindowBits</code> to a positive number.</p>

<p>To uncompress an RFC 1951 data stream, set <code>WindowBits</code> to <code>-MAX_WBITS</code>.</p>

<p>For a full definition of the meaning and valid values for <code>WindowBits</code> refer to the <i>zlib</i> documentation for <i>inflateInit2</i>.</p>

<p>Defaults to MAX_WBITS.</p>

<dt><a name='Bufsize'></a><a name="-Bufsize"
><b>-Bufsize</b></a></dt>

<dd>
<p>Sets the initial size for the inflation buffer. If the buffer has to be reallocated to increase the size, it will grow in increments of <code>Bufsize</code>.</p>

<p>Default is 4096.</p>

<dt><a name='Dictionary'></a><a name="-Dictionary"
><b>-Dictionary</b></a></dt>

<dd>
<p>The default is no dictionary.</p>
</dd>
</dl>

<p>Here is an example of using the <code>inflateInit</code> optional parameter to override the default buffer size.</p>

<pre class="sh_perl">    inflateInit( -Bufsize =&#62; 300 ) ;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="($out,_$status)_=_$i-&#62;inflate($buffer)"
><b>($out, $status) = $i-&#62;inflate($buffer)</b></a></h2>

<p>Inflates the complete contents of <code>$buffer</code>. The buffer can either be a scalar or a scalar reference.</p>

<p>Returns <code>Z_OK</code> if successful and <code>Z_STREAM_END</code> if the end of the compressed data has been successfully reached. If not successful, <code>$out</code> will be <i>undef</i> and <code>$status</code> will hold the <i>zlib</i> error code.</p>

<p>The <code>$buffer</code> parameter is modified by <code>inflate</code>. On completion it will contain what remains of the input buffer after inflation. This means that <code>$buffer</code> will be an empty string when the return status is <code>Z_OK</code>. When the return status is <code>Z_STREAM_END</code> the <code>$buffer</code> parameter will contains what (if anything) was stored in the input buffer after the deflated data stream.</p>

<p>This feature is useful when processing a file format that encapsulates a compressed data stream (e.g. gzip, zip).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$status_=_$i-&#62;inflateSync($buffer)"
><b>$status = $i-&#62;inflateSync($buffer)</b></a></h2>

<p>Scans <code>$buffer</code> until it reaches either a <i>full flush point</i> or the end of the buffer.</p>

<p>If a <i>full flush point</i> is found, <code>Z_OK</code> is returned and <code>$buffer</code> will be have all data up to the flush point removed. This can then be passed to the <code>deflate</code> method.</p>

<p>Any other return code means that a flush point was not found. If more data is available, <code>inflateSync</code> can be called repeatedly with more compressed data until the flush point is found.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$i-&#62;dict_adler()"
><b>$i-&#62;dict_adler()</b></a></h2>

<p>Returns the adler32 value for the dictionary.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$i-&#62;msg()"
><b>$i-&#62;msg()</b></a></h2>

<p>Returns the last error message generated by zlib.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$i-&#62;total_in()"
><b>$i-&#62;total_in()</b></a></h2>

<p>Returns the total number of bytes compressed bytes input to inflate.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="$i-&#62;total_out()"
><b>$i-&#62;total_out()</b></a></h2>

<p>Returns the total number of uncompressed bytes output from inflate.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Example"
>Example</a></h2>

<p>Here is an example of using <code>inflate</code>.</p>

<pre class="sh_perl">    use strict ;
    use warnings ;
    
    use Compress::Zlib ;
    
    my $x = inflateInit()
       or die &#34;Cannot create a inflation stream\n&#34; ;
    
    my $input = &#39;&#39; ;
    binmode STDIN;
    binmode STDOUT;
    
    my ($output, $status) ;
    while (read(STDIN, $input, 4096))
    {
        ($output, $status) = $x-&#62;inflate(\$input) ;
    
        print $output 
            if $status == Z_OK or $status == Z_STREAM_END ;
    
        last if $status != Z_OK ;
    }
    
    die &#34;inflation failed\n&#34;
        unless $status == Z_STREAM_END ;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CHECKSUM_FUNCTIONS"
>CHECKSUM FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Two functions are provided by <i>zlib</i> to calculate checksums. For the Perl interface, the order of the two parameters in both functions has been reversed. This allows both running checksums and one off calculations to be done.</p>

<pre class="sh_perl">    $crc = adler32($buffer [,$crc]) ;
    $crc = crc32($buffer [,$crc]) ;</pre>

<p>The buffer parameters can either be a scalar or a scalar reference.</p>

<p>If the $crc parameters is <code>undef</code>, the crc value will be reset.</p>

<p>If you have built this module with zlib 1.2.3 or better, two more CRC-related functions are available.</p>

<pre class="sh_perl">    $crc = adler32_combine($crc1, $crc2, $len2)l
    $crc = crc32_combine($adler1, $adler2, $len2)</pre>

<p>These functions allow checksums to be merged.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Misc"
>Misc <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="my_$version_=_Compress::Zlib::zlib_version();"
>my $version = Compress::Zlib::zlib_version();</a></h2>

<p>Returns the version of the zlib library.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONSTANTS"
>CONSTANTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>All the <i>zlib</i> constants are automatically imported when you make use of <i>Compress::Zlib</i>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~pmqs/IO-Compress-2.049/lib/IO/Compress/Gzip.pm" class="podlinkpod"
>IO::Compress::Gzip</a>, <a href="/~pmqs/IO-Compress-2.049/lib/IO/Uncompress/Gunzip.pm" class="podlinkpod"
>IO::Uncompress::Gunzip</a>, <a href="/~pmqs/IO-Compress-2.049/lib/IO/Compress/Deflate.pm" class="podlinkpod"
>IO::Compress::Deflate</a>, <a href="/~pmqs/IO-Compress-2.049/lib/IO/Uncompress/Inflate.pm" class="podlinkpod"
>IO::Uncompress::Inflate</a>, <a href="/~pmqs/IO-Compress-2.049/lib/IO/Compress/RawDeflate.pm" class="podlinkpod"
>IO::Compress::RawDeflate</a>, <a href="/~pmqs/IO-Compress-2.049/lib/IO/Uncompress/RawInflate.pm" class="podlinkpod"
>IO::Uncompress::RawInflate</a>, <a href="/~pmqs/IO-Compress-2.049/lib/IO/Compress/Bzip2.pm" class="podlinkpod"
>IO::Compress::Bzip2</a>, <a href="/~pmqs/IO-Compress-2.049/lib/IO/Uncompress/Bunzip2.pm" class="podlinkpod"
>IO::Uncompress::Bunzip2</a>, <a href="/perldoc?IO%3A%3ACompress%3A%3ALzma" class="podlinkpod"
>IO::Compress::Lzma</a>, <a href="/perldoc?IO%3A%3AUncompress%3A%3AUnLzma" class="podlinkpod"
>IO::Uncompress::UnLzma</a>, <a href="/perldoc?IO%3A%3ACompress%3A%3AXz" class="podlinkpod"
>IO::Compress::Xz</a>, <a href="/perldoc?IO%3A%3AUncompress%3A%3AUnXz" class="podlinkpod"
>IO::Uncompress::UnXz</a>, <a href="/perldoc?IO%3A%3ACompress%3A%3ALzop" class="podlinkpod"
>IO::Compress::Lzop</a>, <a href="/perldoc?IO%3A%3AUncompress%3A%3AUnLzop" class="podlinkpod"
>IO::Uncompress::UnLzop</a>, <a href="/perldoc?IO%3A%3ACompress%3A%3ALzf" class="podlinkpod"
>IO::Compress::Lzf</a>, <a href="/perldoc?IO%3A%3AUncompress%3A%3AUnLzf" class="podlinkpod"
>IO::Uncompress::UnLzf</a>, <a href="/~pmqs/IO-Compress-2.049/lib/IO/Uncompress/AnyInflate.pm" class="podlinkpod"
>IO::Uncompress::AnyInflate</a>, <a href="/~pmqs/IO-Compress-2.049/lib/IO/Uncompress/AnyUncompress.pm" class="podlinkpod"
>IO::Uncompress::AnyUncompress</a></p>

<p><a href="/~pmqs/IO-Compress-2.049/lib/IO/Compress/FAQ.pod" class="podlinkpod"
>IO::Compress::FAQ</a></p>

<p><a href="/~pmqs/IO-Compress-2.049/lib/File/GlobMapper.pm" class="podlinkpod"
>File::GlobMapper</a>, <a href="/perldoc?Archive%3A%3AZip" class="podlinkpod"
>Archive::Zip</a>, <a href="/perldoc?Archive%3A%3ATar" class="podlinkpod"
>Archive::Tar</a>, <a href="/perldoc?IO%3A%3AZlib" class="podlinkpod"
>IO::Zlib</a></p>

<p>For RFC 1950, 1951 and 1952 see <em><a href="http://www.faqs.org/rfcs/rfc1950.html" class="podlinkurl"
>http://www.faqs.org/rfcs/rfc1950.html</a></em>, <em><a href="http://www.faqs.org/rfcs/rfc1951.html" class="podlinkurl"
>http://www.faqs.org/rfcs/rfc1951.html</a></em> and <em><a href="http://www.faqs.org/rfcs/rfc1952.html" class="podlinkurl"
>http://www.faqs.org/rfcs/rfc1952.html</a></em></p>

<p>The <i>zlib</i> compression library was written by Jean-loup Gailly <em>gzip@prep.ai.mit.edu</em> and Mark Adler <em>madler@alumni.caltech.edu</em>.</p>

<p>The primary site for the <i>zlib</i> compression library is <em><a href="http://www.zlib.org" class="podlinkurl"
>http://www.zlib.org</a></em>.</p>

<p>The primary site for gzip is <em><a href="http://www.gzip.org" class="podlinkurl"
>http://www.gzip.org</a></em>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module was written by Paul Marquess, <em>pmqs@cpan.org</em>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MODIFICATION_HISTORY"
>MODIFICATION HISTORY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>See the Changes file.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 1995-2012 Paul Marquess. All rights reserved.</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78067 Uploads, 24685 Distributions
105889 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 21 15:31:41 2012 GMT (0.187546968460083) @cpansearch1 -->
 </body>
</html>
