<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Math::Random::Secure - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Math-Random-Secure",3]);
    _gaq.push(["_setCustomVar",5,"Release","Math-Random-Secure-0.06",3]);
    _gaq.push(["_setCustomVar",3,"Module","Math::Random::Secure",3]);
    _gaq.push(["_setCustomVar",1,"Author","MKANAT",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Math::Random::Secure">permalink</a></div>
  <a href="/~mkanat/">Max Kanat-Alexander</a> &gt;
  <a href="/~mkanat/Math-Random-Secure-0.06/">Math-Random-Secure-0.06</a> &gt;
  Math::Random::Secure
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/d75c99cad584b9ce06ed814e1e54013d?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/M/MK/MKANAT/Math-Random-Secure-0.06.tar.gz">Math-Random-Secure-0.06.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Math%3A%3ARandom%3A%3ASecure;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~MKANAT/Math-Random-Secure-0.06/lib/Math/Random/Secure.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Math-Random-Secure">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.06 &nbsp;
<span class="noprint">
  <a href="/src/MKANAT/Math-Random-Secure-0.06/lib/Math/Random/Secure.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#rand'>rand</a>
    <li class='indexItem indexItem2'><a href='#srand'>srand</a>
    <li class='indexItem indexItem2'><a href='#irand'>irand</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#IMPLEMENTATION_DETAILS'>IMPLEMENTATION DETAILS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Making_Math::Random::Secure_Even_More_Secure'>Making Math::Random::Secure Even More Secure</a>
    <li class='indexItem indexItem2'><a href='#Seed_Exhaustion'>Seed Exhaustion</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#SUPPORT'>SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Math::Random::Secure - Cryptographically-secure,
cross-platform replacement for rand()</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> # Replace rand().
 use Math::Random::Secure qw(rand);

 # Get a random number between 0 and 1
 my $float = rand();

 # Get a random integer (faster than int(rand))
 use Math::Random::Secure qw(irand);
 my $int = irand();

 # Random integer between 0 and 9 inclusive.
 $int = irand(10);

 # Random floating-point number greater than or equal to 0.0 and 
 # less than 10.0.
 $float = rand(10);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is intended to provide a cryptographically-secure replacement for Perl&#39;s built-in <code>rand</code> function. &#34;Crytographically secure&#34;, in this case, means:</p>

<ul>
<li>No matter how many numbers you see generated by the random number generator, you cannot guess the future numbers, and you cannot guess the seed.</li>

<li>There are so many possible seeds that it would take decades, centuries, or millenia for an attacker to try them all.</li>

<li>The seed comes from a source that generates relatively strong random data on your platform, so the seed itself will be as random as possible.
<p>See <a href="#IMPLEMENTATION_DETAILS" class="podlinkpod"
>&#34;IMPLEMENTATION DETAILS&#34;</a> for more information about the underlying systems used to implement all of these guarantees, and some important caveats if you&#39;re going to use this module for some very-high-security purpose.</p>
</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="rand"
>rand</a></h2>

<p>Should work exactly like Perl&#39;s built-in <code>rand</code>. Will automatically call <code>srand</code> if <code>srand</code> has never been called in this process or thread.</p>

<p>There is one limitation--Math::Random::Secure is backed by a 32-bit random number generator. So if you are on a 64-bit platform and you specify a limit that is greater than 2^32, you are likely to get less-random data.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="srand"
>srand</a></h2>

<p><b>Note:</b> Under normal circumstances, you should <b>not</b> call this function, as <code>rand</code> and <code>irand</code> will automatically call it for you the first time they are used in a thread or process.</p>

<p>Seeds the random number generator, much like Perl&#39;s built-in <code>srand</code>, except that it uses a much larger and more secure seed. The seed should be passed as a string of bytes, at least 8 bytes in length, and more ideally between 32 and 64 bytes. (See <a href="/~mkanat/Math-Random-Secure-0.06/lib/Math/Random/Secure/RNG.pm#seed" class="podlinkpod"
>&#34;seed&#34; in Math::Random::Secure::RNG</a> for more info.)</p>

<p>If you do not pass a seed, a seed will be generated automatically using a secure mechanism. See <a href="#IMPLEMENTATION_DETAILS" class="podlinkpod"
>&#34;IMPLEMENTATION DETAILS&#34;</a> for more information.</p>

<p>This function returns the seed that generated (or the seed that was passed in, if you passed one in).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="irand"
>irand</a></h2>

<p>Works somewhat like <a href="#rand" class="podlinkpod"
>&#34;rand&#34;</a>, except that it returns a 32-bit integer between 0 and 2^32. Should be faster than doing <code>int(rand)</code>.</p>

<p>Note that because it returns 32-bit integers, specifying a limit greater than 2^32 will have no effect.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="IMPLEMENTATION_DETAILS"
>IMPLEMENTATION DETAILS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Currently, Math::Random::Secure is backed by <a href="/perldoc?Math%3A%3ARandom%3A%3AISAAC" class="podlinkpod"
>Math::Random::ISAAC</a>, a cryptographically-strong random number generator with no known serious weaknesses. If there are significant weaknesses found in ISAAC, we will change our backend to a more-secure random number generator. The goal is for Math::Random::Secure to be cryptographically strong, not to represent some specific random number generator.</p>

<p>Math::Random::Secure seeds itself using <a href="/perldoc?Crypt%3A%3ARandom%3A%3ASource" class="podlinkpod"
>Crypt::Random::Source</a>. The underlying implementation uses <em>/dev/urandom</em> on Unix-like platforms, and the <code>RtlGenRandom</code> or <code>CryptGenRandom</code> functions on Windows 2000 and above. (There is no support for versions of Windows before Windows 2000.) If any of these seeding sources are not available and you have other <a href="/perldoc?Crypt%3A%3ARandom%3A%3ASource" class="podlinkpod"
>Crypt::Random::Source</a> modules installed, Math::Random::Secure will use those other sources to seed itself.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Making_Math::Random::Secure_Even_More_Secure"
>Making Math::Random::Secure Even More Secure</a></h2>

<p>We use <em>/dev/urandom</em> on Unix-like systems, because one of the requirements of duplicating <code>rand</code> is that we never block waiting for seed data, and <em>/dev/random</em> could do that. However, it&#39;s possible that <em>/dev/urandom</em> could run out of &#34;truly random&#34; data and start to use its built-in pseudo-random number generator to generate data. On most systems, this should still provide a very good seed for nearly all uses, but it may not be suitable for very high-security cryptographic circumstances.</p>

<p>For Windows, there are known issues with <code>CryptGenRandom</code> on Windows 2000 and versions of Windows XP before Service Pack 3. However, there is no other built-in method of getting secure random data on Windows, and I suspect that these issues will not be significant for most applications of Math::Random::Secure.</p>

<p>If either of these situations are a problem for your use, you can create your own <a href="/~mkanat/Math-Random-Secure-0.06/lib/Math/Random/Secure/RNG.pm" class="podlinkpod"
>Math::Random::Secure::RNG</a> object with a different &#34;seeder&#34; argument, and set <code>$Math::Random::Secure::RNG</code> to your own instance of <a href="/~mkanat/Math-Random-Secure-0.06/lib/Math/Random/Secure/RNG.pm" class="podlinkpod"
>Math::Random::Secure::RNG</a>. The &#34;seeder&#34; is an instance of <a href="/perldoc?Crypt%3A%3ARandom%3A%3ASource%3A%3ABase" class="podlinkpod"
>Crypt::Random::Source::Base</a>, which should allow you to use most random-data sources in existence for your seeder, should you wish.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Seed_Exhaustion"
>Seed Exhaustion</a></h2>

<p>Perl&#39;s built-in <code>srand</code> reads 32 bits from <em>/dev/urandom</em>. By default, we read 512 bits. This means that we are more likely to exhaust available truly-random data than the built-in <code>srand</code> is, and cause <em>/dev/urandom</em> to fall back on its psuedo-random number generator. Normally this is not a problem, since <a href="#srand" class="podlinkpod"
>&#34;srand&#34;</a> is only called once per Perl process or thread, but it is something that you should be aware of if you are going to be in a situation where you have many new Perl processes or threads and you have very high security requirements (on the order of generating private SSH or GPG keypairs, SSL private keys, etc.).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='http'></a><a name="http://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator"
><a href="http://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator" class="podlinkurl"
>http://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator</a></a></dt>

<dd>
<p>Describes the requirements and nature of a cryptographically-secure random number generator.</p>

<dt><a name='http'></a><a name="http://en.wikipedia.org/wiki/CryptGenRandom,"
><a href="http://en.wikipedia.org/wiki/CryptGenRandom" class="podlinkurl"
>http://en.wikipedia.org/wiki/CryptGenRandom</a>,</a></dt>

<dd>
<p>More information about the Windows functions we use to seed ourselves. The article also has some information about the weaknesses in Windows 2000&#39;s <code>CryptGenRandom</code> implementation.</p>

<dt><a name='http'></a><a name="http://www.computerworld.com/s/article/9048438/Microsoft_confirms_that_XP_contains_random_number_generator_bug"
><a href="http://www.computerworld.com/s/article/9048438/Microsoft_confirms_that_XP_contains_random_number_generator_bug" class="podlinkurl"
>http://www.computerworld.com/s/article/9048438/Microsoft_confirms_that_XP_contains_random_number_generator_bug</a></a></dt>

<dd>
<p>A news article about the Windows 2000/XP CryptGenRandom weakness, fixed in Vista and XP Service Pack 3.</p>

<dt><a name='http'></a><a name="http://en.wikipedia.org/wiki/Random_number_generator_attack"
><a href="http://en.wikipedia.org/wiki/Random_number_generator_attack" class="podlinkurl"
>http://en.wikipedia.org/wiki/Random_number_generator_attack</a></a></dt>

<dd>
<p>A description of ways to attack a random number generator, which can help in understanding why such a generator needs to be secure.</p>

<dt><a name='Math'></a><a name="Math::Random::Secure::RNG"
><a href="/~mkanat/Math-Random-Secure-0.06/lib/Math/Random/Secure/RNG.pm" class="podlinkpod"
>Math::Random::Secure::RNG</a></a></dt>

<dd>
<p>The underlying random-number generator and seeding code for <a href="/~mkanat/Math-Random-Secure-0.06/lib/Math/Random/Secure.pm" class="podlinkpod"
>Math::Random::Secure</a>.</p>

<dt><a name='Crypt'></a><a name="Crypt::Source::Random"
><a href="/perldoc?Crypt%3A%3ASource%3A%3ARandom" class="podlinkpod"
>Crypt::Source::Random</a></a></dt>

<dd>
<dt><a name='Crypt'></a><a name="Crypt::Random"
><a href="/perldoc?Crypt%3A%3ARandom" class="podlinkpod"
>Crypt::Random</a></a></dt>

<dd>
<dt><a name='Math'></a><a name="Math::TrulyRandom"
><a href="/perldoc?Math%3A%3ATrulyRandom" class="podlinkpod"
>Math::TrulyRandom</a></a></dt>

<dd>
<p>All of these modules contain generators for &#34;truly random&#34; data, but they don&#39;t contain a simple <code>rand</code> replacement and they can be very slow.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT"
>SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Right now, the best way to get support for Math::Random::Secure is to email the author using the email address in the <a href="#AUTHOR" class="podlinkpod"
>&#34;AUTHOR&#34;</a> section below.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Math::Random::Secure is relatively new, as of December 2010, but the modules that underlie it are very well-tested and have a long history. However, the author still welcomes all feedback and bug reports, particularly those having to do with the security assurances provided by this module.</p>

<p>You can report a bug by emailing <code>bug-Math-Random-Secure@rt.cpan.org</code> or by using the RT web interface at <a href="https://rt.cpan.org/Ticket/Display.html?Queue=Math-Random-Secure" class="podlinkurl"
>https://rt.cpan.org/Ticket/Display.html?Queue=Math-Random-Secure</a>. If your bug report is security-sensitive, you may also email it directly to the author using the email address in the <a href="#AUTHOR" class="podlinkpod"
>&#34;AUTHOR&#34;</a> section below.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Max Kanat-Alexander &#60;mkanat@cpan.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (C) 2010 BugzillaSource, Inc.</p>

<p>This library (the entirety of Math-Random-Secure) is free software; you can redistribute it and/or modify it under the terms of the Artistic License 2.0. For details, see the full text of the license at <a href="http://opensource.org/licenses/artistic-license-2.0.php" class="podlinkurl"
>http://opensource.org/licenses/artistic-license-2.0.php</a>.</p>

<p>This program is distributed in the hope that it will be useful, but it is provided &#34;as is&#34; and without any express or implied warranties. For details, see the full text of the license at <a href="http://opensource.org/licenses/artistic-license-2.0.php" class="podlinkurl"
>http://opensource.org/licenses/artistic-license-2.0.php</a>.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78063 Uploads, 24684 Distributions
105888 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 21 11:59:21 2012 GMT (0.190348863601685) @cpansearch1 -->
 </body>
</html>
