<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Apache::Test - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","mod_perl",3]);
    _gaq.push(["_setCustomVar",5,"Release","mod_perl-2.0.6",3]);
    _gaq.push(["_setCustomVar",3,"Module","Apache::Test",3]);
    _gaq.push(["_setCustomVar",1,"Author","PHRED",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Apache::Test">permalink</a></div>
  <a href="/~phred/">Fred Moyer</a> &gt;
  <a href="/~phred/mod_perl-2.0.6/">mod_perl-2.0.6</a> &gt;
  Apache::Test
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/c18b1af66a7f62015ecc26707a1321b9?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/P/PH/PHRED/mod_perl-2.0.6.tar.gz">mod_perl-2.0.6.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Apache%3A%3ATest;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~PHRED/mod_perl-2.0.6/Apache-Test/lib/Apache/Test.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Test%3A%3AMore">Test::More</a><br>
<a href="/perldoc?WWW%3A%3AMechanize">WWW::Mechanize</a><br>
<a href="/perldoc?Apache%3A%3ARequest">Apache::Request</a><br>
<a href="/perldoc?Test%3A%3AHarness">Test::Harness</a><br>
<a href="/perldoc?Devel%3A%3ACover">Devel::Cover</a><br>
<a href="/perldoc?Apache2%3A%3AAjax">Apache2::Ajax</a><br>
<a href="/perldoc?LWP%3A%3AUA">LWP::UA</a><br>
<a href="/perldoc?Test%3A%3ASimple">Test::Simple</a><br>
<a href="/perldoc?Module%3A%3ABuild">Module::Build</a><br>
<a href="/perldoc?LWP%3A%3AUserAgent">LWP::UserAgent</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Apache%3A%3ATest">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 16</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=mod_perl">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.37 &nbsp;
<span class="noprint">
  <a href="/src/PHRED/mod_perl-2.0.6/Apache-Test/lib/Apache/Test.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <li class='indexItem indexItem1'><a href='#Additional_Configuration_Variables'>Additional Configuration Variables</a>
  <li class='indexItem indexItem1'><a href='#Test::More_Integration'>Test::More Integration</a>
  <li class='indexItem indexItem1'><a href='#Apache::TestToString_Class'>Apache::TestToString Class</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Apache::Test - Test.pm wrapper with helpers for testing Apache</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use Apache::Test;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>Apache::Test</b> is a wrapper around the standard <code>Test.pm</code> with helpers for testing an Apache server.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name="plan"
>plan</a></dt>

<dd>
<p>This function is a wrapper around <code>Test::plan</code>:</p>

<pre class="sh_perl">    plan tests =&#62; 3;</pre>

<p>just like using Test.pm, plan 3 tests.</p>

<p>If the first argument is an object, such as an <code>Apache::RequestRec</code> object, <code>STDOUT</code> will be tied to it. The <code>Test.pm</code> global state will also be refreshed by calling <code>Apache::Test::test_pm_refresh</code>. For example:</p>

<pre class="sh_perl">    plan $r, tests =&#62; 7;</pre>

<p>ties STDOUT to the request object <code>$r</code>.</p>

<p>If there is a last argument that doesn&#39;t belong to <code>Test::plan</code> (which expects a balanced hash), it&#39;s used to decide whether to continue with the test or to skip it all-together. This last argument can be:</p>

<ul>
<li>a <code>SCALAR</code>
<p>the test is skipped if the scalar has a false value. For example:</p>

<pre class="sh_perl">  plan tests =&#62; 5, 0;</pre>

<p>But this won&#39;t hint the reason for skipping therefore it&#39;s better to use need():</p>

<pre class="sh_perl">  plan tests =&#62; 5,
      need &#39;LWP&#39;,
           { &#34;not Win32&#34; =&#62; sub { $^O eq &#39;MSWin32&#39;} };</pre>

<p>see <code>need()</code> for more info.</p>
</li>

<li>an <code>ARRAY</code> reference
<p>need_module() is called for each value in this array. The test is skipped if need_module() returns false (which happens when at least one C or Perl module from the list cannot be found).</p>

<p>Watch out for case insensitive file systems or duplicate modules with the same name. I.E. If you mean mod_env.c need_module(&#39;mod_env.c&#39;) Not need_module(&#39;env&#39;)</p>
</li>

<li>a <code>CODE</code> reference
<p>the tests will be skipped if the function returns a false value. For example:</p>

<pre class="sh_perl">    plan tests =&#62; 5, need_lwp;</pre>

<p>the test will be skipped if LWP is not available</p>
</li>
</ul>

<p>All other arguments are passed through to <i>Test::plan</i> as is.</p>

<dt><a name="ok"
>ok</a></dt>

<dd>
<p>Same as <i>Test::ok</i>, see <i>Test.pm</i> documentation.</p>

<dt><a name="sok"
>sok</a></dt>

<dd>
<p>Allows to skip a sub-test, controlled from the command line. The argument to sok() is a CODE reference or a BLOCK whose return value will be passed to ok(). By default behaves like ok(). If all sub-tests of the same test are written using sok(), and a test is executed as:</p>

<pre class="sh_perl">  % ./t/TEST -v skip_subtest 1 3</pre>

<p>only sub-tests 1 and 3 will be run, the rest will be skipped.</p>

<dt><a name="skip"
>skip</a></dt>

<dd>
<p>Same as <i>Test::skip</i>, see <i>Test.pm</i> documentation.</p>

<dt><a name="test_pm_refresh"
>test_pm_refresh</a></dt>

<dd>
<p>Normally called by <i>Apache::Test::plan</i>, this function will refresh the global state maintained by <i>Test.pm</i>, allowing <code>plan</code> and friends to be called more than once per-process. This function is not exported.</p>
</dd>
</dl>

<p>Functions that can be used as a last argument to the extended plan(). Note that for each <code>need_*</code> function there is a <code>have_*</code> equivalent that performs the exact same function except that it is designed to be used outside of <code>plan()</code>. <code>need_*</code> functions have the side effect of generating skip messages, if the test is skipped. <code>have_*</code> functions don&#39;t have this side effect. In other words, use <code>need_apache()</code> with <code>plan()</code> to decide whether a test will run, but <code>have_apache()</code> within test logic to adjust expectations based on older or newer server versions.</p>

<dl>
<dt><a name="need_http11"
>need_http11</a></dt>

<dd>
<pre class="sh_perl">  plan tests =&#62; 5, need_http11;</pre>

<p>Require HTTP/1.1 support.</p>

<dt><a name="need_ssl"
>need_ssl</a></dt>

<dd>
<pre class="sh_perl">  plan tests =&#62; 5, need_ssl;</pre>

<p>Require SSL support.</p>

<p>Not exported by default.</p>

<dt><a name="need_lwp"
>need_lwp</a></dt>

<dd>
<pre class="sh_perl">  plan tests =&#62; 5, need_lwp;</pre>

<p>Require LWP support.</p>

<dt><a name="need_cgi"
>need_cgi</a></dt>

<dd>
<pre class="sh_perl">  plan tests =&#62; 5, need_cgi;</pre>

<p>Requires mod_cgi or mod_cgid to be installed.</p>

<dt><a name="need_cache_disk"
>need_cache_disk</a></dt>

<dd>
<pre class="sh_perl">  plan tests =&#62; 5, need_cache_disk</pre>

<p>Requires mod_cache_disk or mod_disk_cache to be installed.</p>

<dt><a name="need_php"
>need_php</a></dt>

<dd>
<pre class="sh_perl">  plan tests =&#62; 5, need_php;</pre>

<p>Requires a PHP module to be installed (version 4 or 5).</p>

<dt><a name="need_php4"
>need_php4</a></dt>

<dd>
<pre class="sh_perl">  plan tests =&#62; 5, need_php4;</pre>

<p>Requires a PHP version 4 module to be installed.</p>

<dt><a name="need_imagemap"
>need_imagemap</a></dt>

<dd>
<pre class="sh_perl">  plan tests =&#62; 5, need_imagemap;</pre>

<p>Requires a mod_imagemap or mod_imap be installed</p>

<dt><a name="need_apache"
>need_apache</a></dt>

<dd>
<pre class="sh_perl">  plan tests =&#62; 5, need_apache 2;</pre>

<p>Requires Apache 2nd generation httpd-2.x.xx</p>

<pre class="sh_perl">  plan tests =&#62; 5, need_apache 1;</pre>

<p>Requires Apache 1st generation (apache-1.3.xx)</p>

<p>See also <code>need_min_apache_version()</code>.</p>

<dt><a name="need_min_apache_version"
>need_min_apache_version</a></dt>

<dd>
<p>Used to require a minimum version of Apache.</p>

<p>For example:</p>

<pre class="sh_perl">  plan tests =&#62; 5, need_min_apache_version(&#34;2.0.40&#34;);</pre>

<p>requires Apache 2.0.40 or higher.</p>

<dt><a name="need_apache_version"
>need_apache_version</a></dt>

<dd>
<p>Used to require a specific version of Apache.</p>

<p>For example:</p>

<pre class="sh_perl">  plan tests =&#62; 5, need_apache_version(&#34;2.0.40&#34;);</pre>

<p>requires Apache 2.0.40.</p>

<dt><a name="need_apache_mpm"
>need_apache_mpm</a></dt>

<dd>
<p>Used to require a specific Apache Multi-Processing Module.</p>

<p>For example:</p>

<pre class="sh_perl">  plan tests =&#62; 5, need_apache_mpm(&#39;prefork&#39;);</pre>

<p>requires the prefork MPM.</p>

<dt><a name="need_perl"
>need_perl</a></dt>

<dd>
<pre class="sh_perl">  plan tests =&#62; 5, need_perl &#39;iolayers&#39;;
  plan tests =&#62; 5, need_perl &#39;ithreads&#39;;</pre>

<p>Requires a perl extension to be present, or perl compiled with certain capabilities.</p>

<p>The first example tests whether <code>PerlIO</code> is available, the second whether:</p>

<pre class="sh_perl">  $Config{useithread} eq &#39;define&#39;;</pre>

<dt><a name="need_min_perl_version"
>need_min_perl_version</a></dt>

<dd>
<p>Used to require a minimum version of Perl.</p>

<p>For example:</p>

<pre class="sh_perl">  plan tests =&#62; 5, need_min_perl_version(&#34;5.008001&#34;);</pre>

<p>requires Perl 5.8.1 or higher.</p>

<dt><a name="need_module"
>need_module</a></dt>

<dd>
<pre class="sh_perl">  plan tests =&#62; 5, need_module &#39;CGI&#39;;
  plan tests =&#62; 5, need_module qw(CGI Find::File);
  plan tests =&#62; 5, need_module [&#39;CGI&#39;, &#39;Find::File&#39;, &#39;cgid&#39;];</pre>

<p>Requires Apache C and Perl modules. The function accept a list of arguments or a reference to a list.</p>

<p>In case of C modules, depending on how the module name was passed it may pass through the following completions:</p>

<dl>
<dt><a name='1'></a><a name="1_need_module_&#39;proxy_http.c&#39;"
>1 need_module &#39;proxy_http.c&#39;</a></dt>

<dd>
<p>If there is the <i>.c</i> extension, the module name will be looked up as is, i.e. <i>&#39;proxy_http.c&#39;</i>.</p>

<dt><a name='2'></a><a name="2_need_module_&#39;mod_cgi&#39;"
>2 need_module &#39;mod_cgi&#39;</a></dt>

<dd>
<p>The <i>.c</i> extension will be appended before the lookup, turning it into <i>&#39;mod_cgi.c&#39;</i>.</p>

<dt><a name='3'></a><a name="3_need_module_&#39;cgi&#39;"
>3 need_module &#39;cgi&#39;</a></dt>

<dd>
<p>The <i>.c</i> extension and <i>mod_</i> prefix will be added before the lookup, turning it into <i>&#39;mod_cgi.c&#39;</i>.</p>
</dd>
</dl>

<dt><a name="need_min_module_version"
>need_min_module_version</a></dt>

<dd>
<p>Used to require a minimum version of a module</p>

<p>For example:</p>

<pre class="sh_perl">  plan tests =&#62; 5, need_min_module_version(CGI =&#62; 2.81);</pre>

<p>requires <code>CGI.pm</code> version 2.81 or higher.</p>

<p>Currently works only for perl modules.</p>

<dt><a name="need"
>need</a></dt>

<dd>
<pre class="sh_perl">  plan tests =&#62; 5,
      need &#39;LWP&#39;,
           { &#34;perl &#62;= 5.8.0 and w/ithreads is required&#34; =&#62;
             ($Config{useperlio} &#38;&#38; $] &#62;= 5.008) },
           { &#34;not Win32&#34;                 =&#62; sub { $^O eq &#39;MSWin32&#39; },
             &#34;foo is disabled&#34;           =&#62; \&#38;is_foo_enabled,
           },
           &#39;cgid&#39;;</pre>

<p>need() is more generic function which can impose multiple requirements at once. All requirements must be satisfied.</p>

<p>need()&#39;s argument is a list of things to test. The list can include scalars, which are passed to need_module(), and hash references. If hash references are used, the keys, are strings, containing a reason for a failure to satisfy this particular entry, the values are the condition, which are satisfaction if they return true. If the value is 0 or 1, it used to decide whether the requirements very satisfied, so you can mix special <code>need_*()</code> functions that return 0 or 1. For example:</p>

<pre class="sh_perl">  plan tests =&#62; 1, need &#39;Compress::Zlib&#39;, &#39;deflate&#39;,
      need_min_apache_version(&#34;2.0.49&#34;);</pre>

<p>If the scalar value is a string, different from 0 or 1, it&#39;s passed to <i>need_module()</i>. If the value is a code reference, it gets executed at the time of check and its return value is used to check the condition. If the condition check fails, the provided (in a key) reason is used to tell user why the test was skipped.</p>

<p>In the presented example, we require the presence of the <code>LWP</code> Perl module, <code>mod_cgid</code>, that we run under perl &#62;= 5.7.3 on Win32.</p>

<p>It&#39;s possible to put more than one requirement into a single hash reference, but be careful that the keys will be different.</p>

<p>It&#39;s also important to mention to avoid using:</p>

<pre class="sh_perl">  plan tests =&#62; 1, requirement1 &#38;&#38; requirement2;</pre>

<p>technique. While test-wise that technique is equivalent to:</p>

<pre class="sh_perl">  plan tests =&#62; 1, need requirement1, requirement2;</pre>

<p>since the test will be skipped, unless all the rules are satisfied, it&#39;s not equivalent for the end users. The second technique, deploying <code>need()</code> and a list of requirements, always runs all the requirement checks and reports all the missing requirements. In the case of the first technique, if the first requirement fails, the second is not run, and the missing requirement is not reported. So let&#39;s say all the requirements are missing Apache modules, and a user wants to satisfy all of these and run the test suite again. If all the unsatisfied requirements are reported at once, she will need to rebuild Apache once. If only one requirement is reported at a time, she will have to rebuild Apache as many times as there are elements in the <code>&#38;&#38;</code> statement.</p>

<p>Also see plan().</p>

<dt><a name="under_construction"
>under_construction</a></dt>

<dd>
<pre class="sh_perl">  plan tests =&#62; 5, under_construction;</pre>

<p>skip all tests, noting that the tests are under construction</p>

<dt><a name="skip_reason"
>skip_reason</a></dt>

<dd>
<pre class="sh_perl">  plan tests =&#62; 5, skip_reason(&#39;my custom reason&#39;);</pre>

<p>skip all tests. the reason you specify will be given at runtime. if no reason is given a default reason will be used.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Additional_Configuration_Variables"
>Additional Configuration Variables <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name="basic_config"
>basic_config</a></dt>

<dd>
<pre class="sh_perl">  my $basic_cfg = Apache::Test::basic_config();
  $basic_cfg-&#62;write_perlscript($file, $content);</pre>

<p><code>basic_config()</code> is similar to <code>config()</code>, but doesn&#39;t contain any httpd-specific information and should be used for operations that don&#39;t require any httpd-specific knowledge.</p>

<dt><a name="config"
>config</a></dt>

<dd>
<pre class="sh_perl">  my $cfg = Apache::Test::config();
  my $server_rev = $cfg-&#62;{server}-&#62;{rev};
  ...</pre>

<p><code>config()</code> gives an access to the configuration object.</p>

<dt><a name="vars"
>vars</a></dt>

<dd>
<pre class="sh_perl">  my $serverroot = Apache::Test::vars-&#62;{serverroot};
  my $serverroot = Apache::Test::vars(&#39;serverroot&#39;);
  my($top_dir, $t_dir) = Apache::Test::vars(qw(top_dir t_dir));</pre>

<p><code>vars()</code> gives an access to the configuration variables, otherwise accessible as:</p>

<pre class="sh_perl">  $vars = Apache::Test::config()-&#62;{vars};</pre>

<p>If no arguments are passed, the reference to the variables hash is returned. If one or more arguments are passed the corresponding values are returned.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Test::More_Integration"
>Test::More Integration <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There are a few caveats if you want to use <i>Apache::Test</i> with <i>Test::More</i> instead of the default <i>Test</i> backend. The first is that <i>Test::More</i> requires you to use its own <code>plan()</code> function and not the one that ships with <i>Apache::Test</i>. <i>Test::More</i> also defines <code>ok()</code> and <code>skip()</code> functions that are different, and simply <code>use</code>ing both modules in your test script will lead to redefined warnings for these subroutines.</p>

<p>To assist <i>Test::More</i> users we have created a special <i>Apache::Test</i> import tag, <code>:withtestmore</code>, which will export all of the standard <i>Apache::Test</i> symbols into your namespace except the ones that collide with <i>Test::More</i>.</p>

<pre class="sh_perl">    use Apache::Test qw(:withtestmore);
    use Test::More;

    plan tests =&#62; 1;           # Test::More::plan()

    ok (&#39;yes&#39;, &#39;testing ok&#39;);  # Test::More::ok()</pre>

<p>Now, while this works fine for standard client-side tests (such as <code>t/basic.t</code>), the more advanced features of <i>Apache::Test</i> require using <i>Test::More</i> as the sole driver behind the scenes.</p>

<p>Should you choose to use <i>Test::More</i> as the backend for server-based tests (such as <code>t/response/TestMe/basic.pm</code>) you will need to use the <code>-withtestmore</code> action tag:</p>

<pre class="sh_perl">    use Apache::Test qw(-withtestmore);

    sub handler {

        my $r = shift;

        plan $r, tests =&#62; 1;           # Test::More::plan() with
                                       # Apache::Test features

        ok (&#39;yes&#39;, &#39;testing ok&#39;);      # Test::More::ok()
    }</pre>

<p><code>-withtestmore</code> tells <i>Apache::Test</i> to use <i>Test::More</i> instead of <i>Test.pm</i> behind the scenes. Note that you are not required to <code>use Test::More</code> yourself with the <code>-withtestmore</code> option and that the <code>use Test::More tests =&#62; 1</code> syntax may have unexpected results.</p>

<p>Note that <i>Test::More</i> version 0.49, available within the <i>Test::Simple</i> 0.49 distribution on CPAN, or greater is required to use this feature.</p>

<p>Because <i>Apache:Test</i> was initially developed using <i>Test</i> as the framework driver, complete <i>Test::More</i> integration is considered experimental at this time - it is supported as best as possible but is not guaranteed to be as stable as the default <i>Test</i> interface at this time.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Apache::TestToString_Class"
>Apache::TestToString Class <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <i>Apache::TestToString</i> class is used to capture <i>Test.pm</i> output into a string. Example:</p>

<pre class="sh_perl">    Apache::TestToString-&#62;start;

    plan tests =&#62; 4;

    ok $data eq &#39;foo&#39;;

    ...

    # $tests will contain the Test.pm output: 1..4\nok 1\n...
    my $tests = Apache::TestToString-&#62;finish;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Apache-Test tutorial: <a href="http://perl.apache.org/docs/general/testing/testing.html" class="podlinkurl"
>http://perl.apache.org/docs/general/testing/testing.html</a>.</p>

<p><a href="/~phred/mod_perl-2.0.6/Apache-Test/lib/Apache/TestRequest.pm" class="podlinkpod"
>Apache::TestRequest</a> subclasses <a href="/perldoc?LWP%3A%3AUserAgent" class="podlinkpod"
>LWP::UserAgent</a> and exports a number of useful functions for sending request to the Apache test server. You can then test the results of those requests.</p>

<p>Use <a href="/~phred/mod_perl-2.0.6/Apache-Test/lib/Apache/TestMM.pm" class="podlinkpod"
>Apache::TestMM</a> in your <em>Makefile.PL</em> to set up your distribution for testing.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Doug MacEachern with contributions from Geoffrey Young, Philippe M. Chiasson, Stas Bekman and others.</p>

<p>Questions can be asked at the test-dev &#60;at&#62; httpd.apache.org list For more information see: <a href="http://httpd.apache.org/test/" class="podlinkurl"
>http://httpd.apache.org/test/</a>.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78290 Uploads, 24725 Distributions
106015 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 09:00:54 2012 GMT (0.154494047164917) @cpansearch1 -->
 </body>
</html>
