<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>MIME::Decoder - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","MIME-tools",3]);
    _gaq.push(["_setCustomVar",5,"Release","MIME-tools-5.502",3]);
    _gaq.push(["_setCustomVar",3,"Module","MIME::Decoder",3]);
    _gaq.push(["_setCustomVar",1,"Author","DSKOLL",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?MIME::Decoder">permalink</a></div>
  <a href="/~dskoll/">David F. Skoll</a> &gt;
  <a href="/~dskoll/MIME-tools-5.502/">MIME-tools-5.502</a> &gt;
  MIME::Decoder
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/77ceb1d700a17c6454d82e26e73d9807?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DS/DSKOLL/MIME-tools-5.502.tar.gz">MIME-tools-5.502.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=MIME%3A%3ADecoder;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DSKOLL/MIME-tools-5.502/lib/MIME/Decoder.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Mail%3A%3APOP3Client">Mail::POP3Client</a><br>
<a href="/perldoc?XML%3A%3AParser">XML::Parser</a><br>
<a href="/perldoc?MIME%3A%3AParser">MIME::Parser</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Tie%3A%3AHandle">Tie::Handle</a><br>
<a href="/perldoc?MIME%3A%3ALite">MIME::Lite</a><br>
<a href="/perldoc?Text%3A%3AIconv">Text::Iconv</a><br>
<a href="/perldoc?Mail%3A%3AInternet">Mail::Internet</a><br>
<a href="/perldoc?IO%3A%3AScalar">IO::Scalar</a><br>
<a href="/perldoc?IO%3A%3AString">IO::String</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=MIME%3A%3ADecoder">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 6</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 8</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=MIME-tools">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  5.502 &nbsp;
<span class="noprint">
  <a href="/src/DSKOLL/MIME-tools-5.502/lib/MIME/Decoder.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Decoding_a_data_stream'>Decoding a data stream</a>
    <li class='indexItem indexItem2'><a href='#Encoding_a_data_stream'>Encoding a data stream</a>
    <li class='indexItem indexItem2'><a href='#Non-standard_encodings'>Non-standard encodings</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#PUBLIC_INTERFACE'>PUBLIC INTERFACE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Standard_interface'>Standard interface</a>
    <li class='indexItem indexItem2'><a href='#Subclass_interface'>Subclass interface</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#DECODER_SUBCLASSES'>DECODER SUBCLASSES</a>
  <li class='indexItem indexItem1'><a href='#NOTES'>NOTES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Input/Output_handles'>Input/Output handles</a>
    <li class='indexItem indexItem2'><a href='#Writing_a_decoder'>Writing a decoder</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>MIME::Decoder - an object for decoding the body part of a MIME stream</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Before reading further,
you should see <a href="/perldoc?MIME%3A%3ATools" class="podlinkpod"
>MIME::Tools</a> to make sure that you understand where this module fits into the grand scheme of things.
Go on,
do it now.
I&#39;ll wait.</p>

<p>Ready?
Ok...</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Decoding_a_data_stream"
>Decoding a data stream</a></h2>

<p>Here&#39;s a simple filter program to read quoted-printable data from STDIN (until EOF) and write the decoded data to STDOUT:</p>

<pre class="sh_perl">    use MIME::Decoder;

    $decoder = new MIME::Decoder &#39;quoted-printable&#39; or die &#34;unsupported&#34;;
    $decoder-&#62;decode(\*STDIN, \*STDOUT);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Encoding_a_data_stream"
>Encoding a data stream</a></h2>

<p>Here&#39;s a simple filter program to read binary data from STDIN (until EOF) and write base64-encoded data to STDOUT:</p>

<pre class="sh_perl">    use MIME::Decoder;

    $decoder = new MIME::Decoder &#39;base64&#39; or die &#34;unsupported&#34;;
    $decoder-&#62;encode(\*STDIN, \*STDOUT);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Non-standard_encodings"
>Non-standard encodings</a></h2>

<p>You can <b>write and install</b> your own decoders so that MIME::Decoder will know about them:</p>

<pre class="sh_perl">    use MyBase64Decoder;

    install MyBase64Decoder &#39;base64&#39;;</pre>

<p>You can also <b>test</b> if a given encoding is supported:</p>

<pre class="sh_perl">    if (supported MIME::Decoder &#39;x-uuencode&#39;) {
        ### we can uuencode!
    }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This abstract class, and its private concrete subclasses (see below) provide an OO front end to the actions of...</p>

<ul>
<li>Decoding a MIME-encoded stream</li>

<li>Encoding a raw data stream into a MIME-encoded stream.</li>
</ul>

<p>The constructor for MIME::Decoder takes the name of an encoding (<code>base64</code>, <code>7bit</code>, etc.), and returns an instance of a <i>subclass</i> of MIME::Decoder whose <code>decode()</code> method will perform the appropriate decoding action, and whose <code>encode()</code> method will perform the appropriate encoding action.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PUBLIC_INTERFACE"
>PUBLIC INTERFACE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Standard_interface"
>Standard interface</a></h2>

<p>If all you are doing is <i>using</i> this class, here&#39;s all you&#39;ll need...</p>

<dl>
<dt><a name='new'></a><a name="new_ENCODING"
>new ENCODING</a></dt>

<dd>
<p><i>Class method, constructor.</i> Create and return a new decoder object which can handle the given ENCODING.</p>

<pre class="sh_perl">    my $decoder = new MIME::Decoder &#34;7bit&#34;;</pre>

<p>Returns the undefined value if no known decoders are appropriate.</p>

<dt><a name='best'></a><a name="best_ENCODING"
>best ENCODING</a></dt>

<dd>
<p><i>Class method, constructor.</i> Exactly like new(), except that this defaults any unsupported encoding to &#34;binary&#34;, after raising a suitable warning (it&#39;s a fatal error if there&#39;s no binary decoder).</p>

<pre class="sh_perl">    my $decoder = best MIME::Decoder &#34;x-gzip64&#34;;</pre>

<p>Will either return a decoder, or a raise a fatal exception.</p>

<dt><a name='decode'></a><a name="decode_INSTREAM,OUTSTREAM"
>decode INSTREAM,OUTSTREAM</a></dt>

<dd>
<p><i>Instance method.</i> Decode the document waiting in the input handle INSTREAM, writing the decoded information to the output handle OUTSTREAM.</p>

<p>Read the section in this document on I/O handles for more information about the arguments. Note that you can still supply old-style unblessed filehandles for INSTREAM and OUTSTREAM.</p>

<p>Returns true on success, throws exception on failure.</p>

<dt><a name='encode'></a><a name="encode_INSTREAM,OUTSTREAM"
>encode INSTREAM,OUTSTREAM</a></dt>

<dd>
<p><i>Instance method.</i> Encode the document waiting in the input filehandle INSTREAM, writing the encoded information to the output stream OUTSTREAM.</p>

<p>Read the section in this document on I/O handles for more information about the arguments. Note that you can still supply old-style unblessed filehandles for INSTREAM and OUTSTREAM.</p>

<p>Returns true on success, throws exception on failure.</p>

<dt><a name="encoding"
>encoding</a></dt>

<dd>
<p><i>Instance method.</i> Return the encoding that this object was created to handle, coerced to all lowercase (e.g., <code>&#34;base64&#34;</code>).</p>

<dt><a name='head'></a><a name="head_[HEAD]"
>head [HEAD]</a></dt>

<dd>
<p><i>Instance method.</i> Completely optional: some decoders need to know a little about the file they are encoding/decoding; e.g., x-uu likes to have the filename. The HEAD is any object which responds to messages like:</p>

<pre class="sh_perl">    $head-&#62;mime_attr(&#39;content-disposition.filename&#39;);</pre>

<dt><a name='supported'></a><a name="supported_[ENCODING]"
>supported [ENCODING]</a></dt>

<dd>
<p><i>Class method.</i> With one arg (an ENCODING name), returns truth if that encoding is currently handled, and falsity otherwise. The ENCODING will be automatically coerced to lowercase:</p>

<pre class="sh_perl">    if (supported MIME::Decoder &#39;7BIT&#39;) {
        ### yes, we can handle it...
    }
    else {
        ### drop back six and punt...
    }</pre>

<p>With no args, returns a reference to a hash of all available decoders, where the key is the encoding name (all lowercase, like &#39;7bit&#39;), and the value is true (it happens to be the name of the class that handles the decoding, but you probably shouldn&#39;t rely on that). You may safely modify this hash; it will <i>not</i> change the way the module performs its lookups. Only <code>install</code> can do that.</p>

<p><i>Thanks to Achim Bohnet for suggesting this method.</i></p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Subclass_interface"
>Subclass interface</a></h2>

<p>If you are writing (or installing) a new decoder subclass, there are some other methods you&#39;ll need to know about:</p>

<dl>
<dt><a name='decode_it'></a><a name="decode_it_INSTREAM,OUTSTREAM"
>decode_it INSTREAM,OUTSTREAM</a></dt>

<dd>
<p><i>Abstract instance method.</i> The back-end of the <b>decode</b> method. It takes an input handle opened for reading (INSTREAM), and an output handle opened for writing (OUTSTREAM).</p>

<p>If you are writing your own decoder subclass, you must override this method in your class. Your method should read from the input handle via <code>getline()</code> or <code>read()</code>, decode this input, and print the decoded data to the output handle via <code>print()</code>. You may do this however you see fit, so long as the end result is the same.</p>

<p>Note that unblessed references and globrefs are automatically turned into I/O handles for you by <code>decode()</code>, so you don&#39;t need to worry about it.</p>

<p>Your method must return either <code>undef</code> (to indicate failure), or <code>1</code> (to indicate success). It may also throw an exception to indicate failure.</p>

<dt><a name='encode_it'></a><a name="encode_it_INSTREAM,OUTSTREAM"
>encode_it INSTREAM,OUTSTREAM</a></dt>

<dd>
<p><i>Abstract instance method.</i> The back-end of the <b>encode</b> method. It takes an input handle opened for reading (INSTREAM), and an output handle opened for writing (OUTSTREAM).</p>

<p>If you are writing your own decoder subclass, you must override this method in your class. Your method should read from the input handle via <code>getline()</code> or <code>read()</code>, encode this input, and print the encoded data to the output handle via <code>print()</code>. You may do this however you see fit, so long as the end result is the same.</p>

<p>Note that unblessed references and globrefs are automatically turned into I/O handles for you by <code>encode()</code>, so you don&#39;t need to worry about it.</p>

<p>Your method must return either <code>undef</code> (to indicate failure), or <code>1</code> (to indicate success). It may also throw an exception to indicate failure.</p>

<dt><a name='filter'></a><a name="filter_IN,_OUT,_COMMAND..."
>filter IN, OUT, COMMAND...</a></dt>

<dd>
<p><i>Class method, utility.</i> If your decoder involves an external program, you can invoke them easily through this method. The command must be a &#34;filter&#34;: a command that reads input from its STDIN (which will come from the IN argument) and writes output to its STDOUT (which will go to the OUT argument).</p>

<p>For example, here&#39;s a decoder that un-gzips its data:</p>

<pre class="sh_perl">    sub decode_it {
        my ($self, $in, $out) = @_;
        $self-&#62;filter($in, $out, &#34;gzip -d -&#34;);
    }</pre>

<p>The usage is similar to IPC::Open2::open2 (which it uses internally), so you can specify COMMAND as a single argument or as an array.</p>

<dt><a name='init'></a><a name="init_ARGS..."
>init ARGS...</a></dt>

<dd>
<p><i>Instance method.</i> Do any necessary initialization of the new instance, taking whatever arguments were given to <code>new()</code>. Should return the self object on success, undef on failure.</p>

<dt><a name='install'></a><a name="install_ENCODINGS..."
>install ENCODINGS...</a></dt>

<dd>
<p><i>Class method</i>. Install this class so that each encoding in ENCODINGS is handled by it:</p>

<pre class="sh_perl">    install MyBase64Decoder &#39;base64&#39;, &#39;x-base64super&#39;;</pre>

<p>You should not override this method.</p>

<dt><a name='uninstall'></a><a name="uninstall_ENCODINGS..."
>uninstall ENCODINGS...</a></dt>

<dd>
<p><i>Class method</i>. Uninstall support for encodings. This is a way to turn off the decoding of &#34;experimental&#34; encodings. For safety, always use MIME::Decoder directly:</p>

<pre class="sh_perl">    uninstall MIME::Decoder &#39;x-uu&#39;, &#39;x-uuencode&#39;;</pre>

<p>You should not override this method.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DECODER_SUBCLASSES"
>DECODER SUBCLASSES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You don&#39;t need to <code>&#34;use&#34;</code> any other Perl modules; the following &#34;standard&#34; subclasses are included as part of MIME::Decoder:</p>

<pre class="sh_perl">     Class:                         Handles encodings:
     ------------------------------------------------------------
     MIME::Decoder::Binary          binary
     MIME::Decoder::NBit            7bit, 8bit
     MIME::Decoder::Base64          base64
     MIME::Decoder::QuotedPrint     quoted-printable</pre>

<p>The following &#34;non-standard&#34; subclasses are also included:</p>

<pre class="sh_perl">     Class:                         Handles encodings:
     ------------------------------------------------------------
     MIME::Decoder::UU              x-uu, x-uuencode
     MIME::Decoder::Gzip64          x-gzip64            ** requires gzip!</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTES"
>NOTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Input/Output_handles"
>Input/Output handles</a></h2>

<p>As of MIME-tools 2.0, this class has to play nice with the new MIME::Body class... which means that input and output routines cannot just assume that they are dealing with filehandles.</p>

<p>Therefore, all that MIME::Decoder and its subclasses require (and, thus, all that they can assume) is that INSTREAMs and OUTSTREAMs are objects which respond to a subset of the messages defined in the IO::Handle interface; minimally:</p>

<pre class="sh_perl">      print
      getline
      read(BUF,NBYTES)</pre>

<p><i>Thanks to Achim Bohnet for suggesting this more-generic I/O model.</i></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Writing_a_decoder"
>Writing a decoder</a></h2>

<p>If you&#39;re experimenting with your own encodings, you&#39;ll probably want to write a decoder. Here are the basics:</p>

<ol>
<li>Create a module, like &#34;MyDecoder::&#34;, for your decoder. Declare it to be a subclass of MIME::Decoder.</li>

<li>Create the following instance methods in your class, as described above:
<pre class="sh_perl">    decode_it
    encode_it
    init</pre>
</li>

<li>In your application program, activate your decoder for one or more encodings like this:
<pre class="sh_perl">    require MyDecoder;

    install MyDecoder &#34;7bit&#34;;   ### use MyDecoder to decode &#34;7bit&#34;
    install MyDecoder &#34;x-foo&#34;;  ### also use MyDecoder to decode &#34;x-foo&#34;</pre>
</li>
</ol>

<p>To illustrate, here&#39;s a custom decoder class for the <code>quoted-printable</code> encoding:</p>

<pre class="sh_perl">    package MyQPDecoder;

    @ISA = qw(MIME::Decoder);
    use MIME::Decoder;
    use MIME::QuotedPrint;

    ### decode_it - the private decoding method
    sub decode_it {
        my ($self, $in, $out) = @_;
        local $_;
        while (defined($_ = $in-&#62;getline)) {
            my $decoded = decode_qp($_);
            $out-&#62;print($decoded);
        }
        1;
    }

    ### encode_it - the private encoding method
    sub encode_it {
        my ($self, $in, $out) = @_;

        my ($buf, $nread) = (&#39;&#39;, 0);
        while ($in-&#62;read($buf, 60)) {
            my $encoded = encode_qp($buf);
            $out-&#62;print($encoded);
        }
        1;
    }</pre>

<p>That&#39;s it. The task was pretty simple because the <code>&#34;quoted-printable&#34;</code> encoding can easily be converted line-by-line... as can even <code>&#34;7bit&#34;</code> and <code>&#34;8bit&#34;</code> (since all these encodings guarantee short lines, with a max of 1000 characters). The good news is: it is very likely that it will be similarly-easy to write a MIME::Decoder for any future standard encodings.</p>

<p>The <code>&#34;binary&#34;</code> decoder, however, really required block reads and writes: see <a href="#MIME::Decoder::Binary" class="podlinkpod"
>&#34;MIME::Decoder::Binary&#34;</a> for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?MIME%3A%3ATools" class="podlinkpod"
>MIME::Tools</a>, other <a href="/~dskoll/MIME-tools-5.502/lib/MIME/Decoder.pm" class="podlinkpod"
>MIME::Decoder</a> subclasses.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Eryq (<em>eryq@zeegee.com</em>), ZeeGee Software Inc (<em><a href="http://www.zeegee.com" class="podlinkurl"
>http://www.zeegee.com</a></em>).</p>

<p>All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>1;</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78269 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 00:17:24 2012 GMT (0.111930847167969) @cpansearch1 -->
 </body>
</html>
