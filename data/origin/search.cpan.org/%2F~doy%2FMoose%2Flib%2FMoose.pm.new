<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Moose - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Moose",3]);
    _gaq.push(["_setCustomVar",5,"Release","Moose-2.0403",3]);
    _gaq.push(["_setCustomVar",3,"Module","Moose",3]);
    _gaq.push(["_setCustomVar",1,"Author","DOY",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Moose">permalink</a></div>
  <a href="/~doy/">Jesse Luehrs</a> &gt;
  <a href="/~doy/Moose/">Moose</a> &gt;
  Moose
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/88766de7a058697d3d0335b8d384fd2a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DO/DOY/Moose-2.0403.tar.gz">Moose-2.0403.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Moose;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DOY/Moose-2.0403/lib/Moose.pm">Annotate this POD
(5)
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 13</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 27</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=Moose">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.0403 &nbsp;
<span class="noprint">
  <a href="/src/DOY/Moose-2.0403/lib/Moose.pm">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~doy/Moose/lib/Moose.pm">Moose-2.0501-TRIAL</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#New_to_Moose?'>New to Moose?</a>
    <li class='indexItem indexItem2'><a href='#Moose_Extensions'>Moose Extensions</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#TRANSLATIONS'>TRANSLATIONS</a>
  <li class='indexItem indexItem1'><a href='#BUILDING_CLASSES_WITH_MOOSE'>BUILDING CLASSES WITH MOOSE</a>
  <li class='indexItem indexItem1'><a href='#PROVIDED_METHODS'>PROVIDED METHODS</a>
  <li class='indexItem indexItem1'><a href='#EXPORTED_FUNCTIONS'>EXPORTED FUNCTIONS</a>
  <li class='indexItem indexItem1'><a href='#METACLASS'>METACLASS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Metaclass_and_Trait_Name_Resolution'>Metaclass and Trait Name Resolution</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#UNIMPORTING_FUNCTIONS'>UNIMPORTING FUNCTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#unimport'>unimport</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXTENDING_AND_EMBEDDING_MOOSE'>EXTENDING AND EMBEDDING MOOSE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#The_MooseX::_namespace'>The MooseX:: namespace</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#METACLASS_COMPATIBILITY_AND_MOOSE'>METACLASS COMPATIBILITY AND MOOSE</a>
  <li class='indexItem indexItem1'><a href='#CAVEATS'>CAVEATS</a>
  <li class='indexItem indexItem1'><a href='#GETTING_HELP'>GETTING HELP</a>
  <li class='indexItem indexItem1'><a href='#ACKNOWLEDGEMENTS'>ACKNOWLEDGEMENTS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Books'>Books</a>
    <li class='indexItem indexItem2'><a href='#Papers'>Papers</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#FEATURE_REQUESTS'>FEATURE REQUESTS</a>
  <li class='indexItem indexItem1'><a href='#CABAL'>CABAL</a>
  <li class='indexItem indexItem1'><a href='#CONTRIBUTORS'>CONTRIBUTORS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose - A postmodern object system for Perl 5</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>version 2.0403</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  package Point;
  use Moose; # automatically turns on strict and warnings

  has &#39;x&#39; =&#62; (is =&#62; &#39;rw&#39;, isa =&#62; &#39;Int&#39;);
  has &#39;y&#39; =&#62; (is =&#62; &#39;rw&#39;, isa =&#62; &#39;Int&#39;);

  sub clear {
      my $self = shift;
      $self-&#62;x(0);
      $self-&#62;y(0);
  }

  package Point3D;
  use Moose;

  extends &#39;Point&#39;;

  has &#39;z&#39; =&#62; (is =&#62; &#39;rw&#39;, isa =&#62; &#39;Int&#39;);

  after &#39;clear&#39; =&#62; sub {
      my $self = shift;
      $self-&#62;z(0);
  };</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose is an extension of the Perl 5 object system.</p>

<p>The main goal of Moose is to make Perl 5 Object Oriented programming easier, more consistent, and less tedious. With Moose you can think more about what you want to do and less about the mechanics of OOP.</p>

<p>Additionally, Moose is built on top of <a href="/~doy/Moose-2.0403/lib/Class/MOP.pm" class="podlinkpod"
>Class::MOP</a>, which is a metaclass system for Perl 5. This means that Moose not only makes building normal Perl 5 objects better, but it provides the power of metaclass programming as well.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="New_to_Moose?"
>New to Moose?</a></h2>

<p>If you&#39;re new to Moose, the best place to start is the <a href="/~doy/Moose-2.0403/lib/Moose/Manual.pod" class="podlinkpod"
>Moose::Manual</a> docs, followed by the <a href="/~doy/Moose-2.0403/lib/Moose/Cookbook.pod" class="podlinkpod"
>Moose::Cookbook</a>. The intro will show you what Moose is, and how it makes Perl 5 OO better.</p>

<p>The cookbook recipes on Moose basics will get you up to speed with many of Moose&#39;s features quickly. Once you have an idea of what Moose can do, you can use the API documentation to get more detail on features which interest you.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Moose_Extensions"
>Moose Extensions</a></h2>

<p>The <code>MooseX::</code> namespace is the official place to find Moose extensions. These extensions can be found on the CPAN. The easiest way to find them is to search for them (<a href="http://search.cpan.org/search?query=MooseX::" class="podlinkurl"
>http://search.cpan.org/search?query=MooseX::</a>), or to examine <a href="/perldoc?Task%3A%3AMoose" class="podlinkpod"
>Task::Moose</a> which aims to keep an up-to-date, easily installable list of Moose extensions.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TRANSLATIONS"
>TRANSLATIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Much of the Moose documentation has been translated into other languages.</p>

<dl>
<dt><a name="Japanese"
>Japanese</a></dt>

<dd>
<p>Japanese docs can be found at <a href="http://perldoc.perlassociation.org/pod/Moose-Doc-JA/index.html" class="podlinkurl"
>http://perldoc.perlassociation.org/pod/Moose-Doc-JA/index.html</a>. The source POD files can be found in GitHub: <a href="http://github.com/jpa/Moose-Doc-JA" class="podlinkurl"
>http://github.com/jpa/Moose-Doc-JA</a></p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUILDING_CLASSES_WITH_MOOSE"
>BUILDING CLASSES WITH MOOSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose makes every attempt to provide as much convenience as possible during class construction/definition, but still stay out of your way if you want it to. Here are a few items to note when building classes with Moose.</p>

<p>When you <code>use Moose</code>, Moose will set the class&#39;s parent class to <a href="/~doy/Moose-2.0403/lib/Moose/Object.pm" class="podlinkpod"
>Moose::Object</a>, <i>unless</i> the class using Moose already has a parent class. In addition, specifying a parent with <code>extends</code> will change the parent class.</p>

<p>Moose will also manage all attributes (including inherited ones) that are defined with <code>has</code>. And (assuming you call <code>new</code>, which is inherited from <a href="/~doy/Moose-2.0403/lib/Moose/Object.pm" class="podlinkpod"
>Moose::Object</a>) this includes properly initializing all instance slots, setting defaults where appropriate, and performing any type constraint checking or coercion.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PROVIDED_METHODS"
>PROVIDED METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose provides a number of methods to all your classes, mostly through the inheritance of <a href="/~doy/Moose-2.0403/lib/Moose/Object.pm" class="podlinkpod"
>Moose::Object</a>. There is however, one exception.</p>

<dl>
<dt><a name="meta"
><b>meta</b></a></dt>

<dd>
<p>This is a method which provides access to the current class&#39;s metaclass.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORTED_FUNCTIONS"
>EXPORTED FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose will export a number of functions into the class&#39;s namespace which may then be used to set up the class. These functions all work directly on the current class.</p>

<dl>
<dt><a name='extends'></a><a name="extends_(@superclasses)"
><b>extends (@superclasses)</b></a></dt>

<dd>
<p>This function will set the superclass(es) for the current class.</p>

<p>This approach is recommended instead of <code>use base</code>, because <code>use base</code> actually <code>push</code>es onto the class&#39;s <code>@ISA</code>, whereas <code>extends</code> will replace it. This is important to ensure that classes which do not have superclasses still properly inherit from <a href="/~doy/Moose-2.0403/lib/Moose/Object.pm" class="podlinkpod"
>Moose::Object</a>.</p>

<p>Each superclass can be followed by a hash reference with options. Currently, only <a href="/~doy/Moose-2.0403/lib/Class/MOP.pm#Class_Loading_Options" class="podlinkpod"
>-version</a> is recognized:</p>

<pre class="sh_perl">    extends &#39;My::Parent&#39;      =&#62; { -version =&#62; 0.01 },
            &#39;My::OtherParent&#39; =&#62; { -version =&#62; 0.03 };</pre>

<p>An exception will be thrown if the version requirements are not satisfied.</p>

<dt><a name='with'></a><a name="with_(@roles)"
><b>with (@roles)</b></a></dt>

<dd>
<p>This will apply a given set of <code>@roles</code> to the local class.</p>

<p>Like with <code>extends</code>, each specified role can be followed by a hash reference with a <a href="/~doy/Moose-2.0403/lib/Class/MOP.pm#Class_Loading_Options" class="podlinkpod"
>-version</a> option:</p>

<pre class="sh_perl">    with &#39;My::Role&#39;      =&#62; { -version =&#62; 0.32 },
         &#39;My::Otherrole&#39; =&#62; { -version =&#62; 0.23 };</pre>

<p>The specified version requirements must be satisfied, otherwise an exception will be thrown.</p>

<p>If your role takes options or arguments, they can be passed along in the hash reference as well.</p>

<dt><a name='has'></a><a name="has_$name|@$names_=&#62;_%options"
><b>has $name|@$names =&#62; %options</b></a></dt>

<dd>
<p>This will install an attribute of a given <code>$name</code> into the current class. If the first parameter is an array reference, it will create an attribute for every <code>$name</code> in the list. The <code>%options</code> will be passed to the constructor for <a href="/~doy/Moose-2.0403/lib/Moose/Meta/Attribute.pm" class="podlinkpod"
>Moose::Meta::Attribute</a> (which inherits from <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm" class="podlinkpod"
>Class::MOP::Attribute</a>), so the full documentation for the valid options can be found there. These are the most commonly used options:</p>

<dl>
<dt><a name='is'></a><a name="is_=&#62;_&#39;rw&#39;|&#39;ro&#39;"
><i>is =&#62; &#39;rw&#39;|&#39;ro&#39;</i></a></dt>

<dd>
<p>The <i>is</i> option accepts either <i>rw</i> (for read/write) or <i>ro</i> (for read only). These will create either a read/write accessor or a read-only accessor respectively, using the same name as the <code>$name</code> of the attribute.</p>

<p>If you need more control over how your accessors are named, you can use the <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm#reader" class="podlinkpod"
>reader</a>, <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm#writer" class="podlinkpod"
>writer</a> and <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm#accessor" class="podlinkpod"
>accessor</a> options inherited from <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm" class="podlinkpod"
>Class::MOP::Attribute</a>, however if you use those, you won&#39;t need the <i>is</i> option.</p>

<dt><a name='isa'></a><a name="isa_=&#62;_$type_name"
><i>isa =&#62; $type_name</i></a></dt>

<dd>
<p>The <i>isa</i> option uses Moose&#39;s type constraint facilities to set up runtime type checking for this attribute. Moose will perform the checks during class construction, and within any accessors. The <code>$type_name</code> argument must be a string. The string may be either a class name or a type defined using Moose&#39;s type definition features. (Refer to <a href="/~doy/Moose-2.0403/lib/Moose/Util/TypeConstraints.pm" class="podlinkpod"
>Moose::Util::TypeConstraints</a> for information on how to define a new type, and how to retrieve type meta-data).</p>

<dt><a name='coerce'></a><a name="coerce_=&#62;_(1|0)"
><i>coerce =&#62; (1|0)</i></a></dt>

<dd>
<p>This will attempt to use coercion with the supplied type constraint to change the value passed into any accessors or constructors. You <b>must</b> supply a type constraint, and that type constraint <b>must</b> define a coercion. See <a href="/~doy/Moose-2.0403/lib/Moose/Cookbook/Basics/Recipe5.pod" class="podlinkpod"
>Moose::Cookbook::Basics::Recipe5</a> for an example.</p>

<dt><a name='does'></a><a name="does_=&#62;_$role_name"
><i>does =&#62; $role_name</i></a></dt>

<dd>
<p>This will accept the name of a role which the value stored in this attribute is expected to have consumed.</p>

<dt><a name='required'></a><a name="required_=&#62;_(1|0)"
><i>required =&#62; (1|0)</i></a></dt>

<dd>
<p>This marks the attribute as being required. This means a value must be supplied during class construction, <i>or</i> the attribute must be lazy and have either a default or a builder. Note that c&#60;required&#62; does not say anything about the attribute&#39;s value, which can be <code>undef</code>.</p>

<dt><a name='weak_ref'></a><a name="weak_ref_=&#62;_(1|0)"
><i>weak_ref =&#62; (1|0)</i></a></dt>

<dd>
<p>This will tell the class to store the value of this attribute as a weakened reference. If an attribute is a weakened reference, it <b>cannot</b> also be coerced. Note that when a weak ref expires, the attribute&#39;s value becomes undefined, and is still considered to be set for purposes of predicate, default, etc.</p>

<dt><a name='lazy'></a><a name="lazy_=&#62;_(1|0)"
><i>lazy =&#62; (1|0)</i></a></dt>

<dd>
<p>This will tell the class to not create this slot until absolutely necessary. If an attribute is marked as lazy it <b>must</b> have a default or builder supplied.</p>

<dt><a name='trigger'></a><a name="trigger_=&#62;_$code"
><i>trigger =&#62; $code</i></a></dt>

<dd>
<p>The <i>trigger</i> option is a CODE reference which will be called after the value of the attribute is set. The CODE ref is passed the instance itself, the updated value, and the original value if the attribute was already set.</p>

<p>You <b>can</b> have a trigger on a read-only attribute.</p>

<p><b>NOTE:</b> Triggers will only fire when you <b>assign</b> to the attribute, either in the constructor, or using the writer. Default and built values will <b>not</b> cause the trigger to be fired.</p>

<dt><a name='handles'></a><a name="handles_=&#62;_ARRAY_|_HASH_|_REGEXP_|_ROLE_|_ROLETYPE_|_DUCKTYPE_|_CODE"
><i>handles =&#62; ARRAY | HASH | REGEXP | ROLE | ROLETYPE | DUCKTYPE | CODE</i></a></dt>

<dd>
<p>The <i>handles</i> option provides Moose classes with automated delegation features. This is a pretty complex and powerful option. It accepts many different option formats, each with its own benefits and drawbacks.</p>

<p><b>NOTE:</b> The class being delegated to does not need to be a Moose based class, which is why this feature is especially useful when wrapping non-Moose classes.</p>

<p>All <i>handles</i> option formats share the following traits:</p>

<p>You cannot override a locally defined method with a delegated method; an exception will be thrown if you try. That is to say, if you define <code>foo</code> in your class, you cannot override it with a delegated <code>foo</code>. This is almost never something you would want to do, and if it is, you should do it by hand and not use Moose.</p>

<p>You cannot override any of the methods found in Moose::Object, or the <code>BUILD</code> and <code>DEMOLISH</code> methods. These will not throw an exception, but will silently move on to the next method in the list. My reasoning for this is that you would almost never want to do this, since it usually breaks your class. As with overriding locally defined methods, if you do want to do this, you should do it manually, not with Moose.</p>

<p>You do not <i>need</i> to have a reader (or accessor) for the attribute in order to delegate to it. Moose will create a means of accessing the value for you, however this will be several times <b>less</b> efficient then if you had given the attribute a reader (or accessor) to use.</p>

<p>Below is the documentation for each option format:</p>

<dl>
<dt><a name="ARRAY"
><code>ARRAY</code></a></dt>

<dd>
<p>This is the most common usage for <i>handles</i>. You basically pass a list of method names to be delegated, and Moose will install a delegation method for each one.</p>

<dt><a name="HASH"
><code>HASH</code></a></dt>

<dd>
<p>This is the second most common usage for <i>handles</i>. Instead of a list of method names, you pass a HASH ref where each key is the method name you want installed locally, and its value is the name of the original method in the class being delegated to.</p>

<p>This can be very useful for recursive classes like trees. Here is a quick example (soon to be expanded into a Moose::Cookbook recipe):</p>

<pre class="sh_perl">  package Tree;
  use Moose;

  has &#39;node&#39; =&#62; (is =&#62; &#39;rw&#39;, isa =&#62; &#39;Any&#39;);

  has &#39;children&#39; =&#62; (
      is      =&#62; &#39;ro&#39;,
      isa     =&#62; &#39;ArrayRef&#39;,
      default =&#62; sub { [] }
  );

  has &#39;parent&#39; =&#62; (
      is          =&#62; &#39;rw&#39;,
      isa         =&#62; &#39;Tree&#39;,
      weak_ref    =&#62; 1,
      handles     =&#62; {
          parent_node =&#62; &#39;node&#39;,
          siblings    =&#62; &#39;children&#39;,
      }
  );</pre>

<p>In this example, the Tree package gets <code>parent_node</code> and <code>siblings</code> methods, which delegate to the <code>node</code> and <code>children</code> methods (respectively) of the Tree instance stored in the <code>parent</code> slot.</p>

<p>You may also use an array reference to curry arguments to the original method.</p>

<pre class="sh_perl">  has &#39;thing&#39; =&#62; (
      ...
      handles =&#62; { set_foo =&#62; [ set =&#62; &#39;foo&#39; ] },
  );

  # $self-&#62;set_foo(...) calls $self-&#62;thing-&#62;set(&#39;foo&#39;, ...)</pre>

<p>The first element of the array reference is the original method name, and the rest is a list of curried arguments.</p>

<dt><a name="REGEXP"
><code>REGEXP</code></a></dt>

<dd>
<p>The regexp option works very similar to the ARRAY option, except that it builds the list of methods for you. It starts by collecting all possible methods of the class being delegated to, then filters that list using the regexp supplied here.</p>

<p><b>NOTE:</b> An <i>isa</i> option is required when using the regexp option format. This is so that we can determine (at compile time) the method list from the class. Without an <i>isa</i> this is just not possible.</p>

<dt><a name='ROLE'></a><a name="ROLE_or_ROLETYPE"
><code>ROLE</code> or <code>ROLETYPE</code></a></dt>

<dd>
<p>With the role option, you specify the name of a role or a <a href="/~doy/Moose-2.0403/lib/Moose/Meta/TypeConstraint/Role.pm" class="podlinkpod"
>role type</a> whose &#34;interface&#34; then becomes the list of methods to handle. The &#34;interface&#34; can be defined as; the methods of the role and any required methods of the role. It should be noted that this does <b>not</b> include any method modifiers or generated attribute methods (which is consistent with role composition).</p>

<dt><a name="DUCKTYPE"
><code>DUCKTYPE</code></a></dt>

<dd>
<p>With the duck type option, you pass a duck type object whose &#34;interface&#34; then becomes the list of methods to handle. The &#34;interface&#34; can be defined as the list of methods passed to <code>duck_type</code> to create a duck type object. For more information on <code>duck_type</code> please check <a href="/~doy/Moose-2.0403/lib/Moose/Util/TypeConstraints.pm" class="podlinkpod"
>Moose::Util::TypeConstraints</a>.</p>

<dt><a name="CODE"
><code>CODE</code></a></dt>

<dd>
<p>This is the option to use when you really want to do something funky. You should only use it if you really know what you are doing, as it involves manual metaclass twiddling.</p>

<p>This takes a code reference, which should expect two arguments. The first is the attribute meta-object this <i>handles</i> is attached to. The second is the metaclass of the class being delegated to. It expects you to return a hash (not a HASH ref) of the methods you want mapped.</p>
</dd>
</dl>

<dt><a name='traits'></a><a name="traits_=&#62;_[_@role_names_]"
><i>traits =&#62; [ @role_names ]</i></a></dt>

<dd>
<p>This tells Moose to take the list of <code>@role_names</code> and apply them to the attribute meta-object. Custom attribute metaclass traits are useful for extending the capabilities of the <i>has</i> keyword: they are the simplest way to extend the MOP, but they are still a fairly advanced topic and too much to cover here.</p>

<p>See <a href="#Metaclass_and_Trait_Name_Resolution" class="podlinkpod"
>&#34;Metaclass and Trait Name Resolution&#34;</a> for details on how a trait name is resolved to a role name.</p>

<p>Also see <a href="/~doy/Moose-2.0403/lib/Moose/Cookbook/Meta/Recipe3.pod" class="podlinkpod"
>Moose::Cookbook::Meta::Recipe3</a> for a metaclass trait example.</p>

<dt><a name='builder'></a><a name="builder_=&#62;_Str"
><i>builder</i> =&#62; Str</a></dt>

<dd>
<p>The value of this key is the name of the method that will be called to obtain the value used to initialize the attribute. See the <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm#builder" class="podlinkpod"
>builder option docs in Class::MOP::Attribute</a> and/or <a href="/~doy/Moose-2.0403/lib/Moose/Cookbook/Basics/Recipe8.pod" class="podlinkpod"
>Moose::Cookbook::Basics::Recipe8</a> for more information.</p>

<dt><a name='default'></a><a name="default_=&#62;_SCALAR_|_CODE"
><i>default</i> =&#62; SCALAR | CODE</a></dt>

<dd>
<p>The value of this key is the default value which will initialize the attribute.</p>

<p>NOTE: If the value is a simple scalar (string or number), then it can be just passed as is. However, if you wish to initialize it with a HASH or ARRAY ref, then you need to wrap that inside a CODE reference. See the <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm#default" class="podlinkpod"
>default option docs in Class::MOP::Attribute</a> for more information.</p>

<dt><a name='clearer'></a><a name="clearer_=&#62;_Str"
><i>clearer</i> =&#62; Str</a></dt>

<dd>
<p>Creates a method allowing you to clear the value. See the <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm#clearer" class="podlinkpod"
>clearer option docs in Class::MOP::Attribute</a> for more information.</p>

<dt><a name='predicate'></a><a name="predicate_=&#62;_Str"
><i>predicate</i> =&#62; Str</a></dt>

<dd>
<p>Creates a method to perform a basic test to see if a value has been set in the attribute. See the <a href="/~doy/Moose-2.0403/lib/Class/MOP/Attribute.pm#predicate" class="podlinkpod"
>predicate option docs in Class::MOP::Attribute</a> for more information.</p>

<p>Note that the predicate will return true even for a <code>weak_ref</code> attribute whose value has expired.</p>

<dt><a name='documentation'></a><a name="documentation_=&#62;_$string"
><i>documentation</i> =&#62; $string</a></dt>

<dd>
<p>An arbitrary string that can be retrieved later by calling <code>$attr-&#62;documentation</code>.</p>
</dd>
</dl>

<dt><a name='has'></a><a name="has_+$name_=&#62;_%options"
><b>has +$name =&#62; %options</b></a></dt>

<dd>
<p>This is variation on the normal attribute creator <code>has</code> which allows you to clone and extend an attribute from a superclass or from a role. Here is an example of the superclass usage:</p>

<pre class="sh_perl">  package Foo;
  use Moose;

  has &#39;message&#39; =&#62; (
      is      =&#62; &#39;rw&#39;,
      isa     =&#62; &#39;Str&#39;,
      default =&#62; &#39;Hello, I am a Foo&#39;
  );

  package My::Foo;
  use Moose;

  extends &#39;Foo&#39;;

  has &#39;+message&#39; =&#62; (default =&#62; &#39;Hello I am My::Foo&#39;);</pre>

<p>What is happening here is that <b>My::Foo</b> is cloning the <code>message</code> attribute from its parent class <b>Foo</b>, retaining the <code>is =&#62; &#39;rw&#39;</code> and <code>isa =&#62; &#39;Str&#39;</code> characteristics, but changing the value in <code>default</code>.</p>

<p>Here is another example, but within the context of a role:</p>

<pre class="sh_perl">  package Foo::Role;
  use Moose::Role;

  has &#39;message&#39; =&#62; (
      is      =&#62; &#39;rw&#39;,
      isa     =&#62; &#39;Str&#39;,
      default =&#62; &#39;Hello, I am a Foo&#39;
  );

  package My::Foo;
  use Moose;

  with &#39;Foo::Role&#39;;

  has &#39;+message&#39; =&#62; (default =&#62; &#39;Hello I am My::Foo&#39;);</pre>

<p>In this case, we are basically taking the attribute which the role supplied and altering it within the bounds of this feature.</p>

<p>Note that you can only extend an attribute from either a superclass or a role, you cannot extend an attribute in a role that composes over an attribute from another role.</p>

<p>Aside from where the attributes come from (one from superclass, the other from a role), this feature works exactly the same. This feature is restricted somewhat, so as to try and force at least <i>some</i> sanity into it. Most options work the same, but there are some exceptions:</p>

<dl>
<dt><a name="reader"
><i>reader</i></a></dt>

<dd>
<dt><a name="writer"
><i>writer</i></a></dt>

<dd>
<dt><a name="accessor"
><i>accessor</i></a></dt>

<dd>
<dt><a name="clearer"
><i>clearer</i></a></dt>

<dd>
<dt><a name="predicate"
><i>predicate</i></a></dt>

<dd>
<p>These options can be added, but cannot override a superclass definition.</p>

<dt><a name="traits"
><i>traits</i></a></dt>

<dd>
<p>You are allowed to <b>add</b> additional traits to the <code>traits</code> definition. These traits will be composed into the attribute, but preexisting traits <b>are not</b> overridden, or removed.</p>
</dd>
</dl>

<dt><a name='before'></a><a name="before_$name|@names|\@names|qr/.../_=&#62;_sub_{_..._}"
><b>before $name|@names|\@names|qr/.../ =&#62; sub { ... }</b></a></dt>

<dd>
<dt><a name='after'></a><a name="after_$name|@names|\@names|qr/.../_=&#62;_sub_{_..._}"
><b>after $name|@names|\@names|qr/.../ =&#62; sub { ... }</b></a></dt>

<dd>
<dt><a name='around'></a><a name="around_$name|@names|\@names|qr/.../_=&#62;_sub_{_..._}"
><b>around $name|@names|\@names|qr/.../ =&#62; sub { ... }</b></a></dt>

<dd>
<p>These three items are syntactic sugar for the before, after, and around method modifier features that <a href="/~doy/Moose-2.0403/lib/Class/MOP.pm" class="podlinkpod"
>Class::MOP</a> provides. More information on these may be found in <a href="/~doy/Moose-2.0403/lib/Moose/Manual/MethodModifiers.pod" class="podlinkpod"
>Moose::Manual::MethodModifiers</a> and the <a href="/~doy/Moose-2.0403/lib/Class/MOP/Class.pm#Method_Modifiers" class="podlinkpod"
>Class::MOP::Class documentation</a>.</p>

<dt><a name='override'></a><a name="override_($name,_&#38;sub)"
><b>override ($name, &#38;sub)</b></a></dt>

<dd>
<p>An <code>override</code> method is a way of explicitly saying &#34;I am overriding this method from my superclass&#34;. You can call <code>super</code> within this method, and it will work as expected. The same thing <i>can</i> be accomplished with a normal method call and the <code>SUPER::</code> pseudo-package; it is really your choice.</p>

<dt><a name="super"
><b>super</b></a></dt>

<dd>
<p>The keyword <code>super</code> is a no-op when called outside of an <code>override</code> method. In the context of an <code>override</code> method, it will call the next most appropriate superclass method with the same arguments as the original method.</p>

<dt><a name='augment'></a><a name="augment_($name,_&#38;sub)"
><b>augment ($name, &#38;sub)</b></a></dt>

<dd>
<p>An <code>augment</code> method, is a way of explicitly saying &#34;I am augmenting this method from my superclass&#34;. Once again, the details of how <code>inner</code> and <code>augment</code> work is best described in the <a href="/~doy/Moose-2.0403/lib/Moose/Cookbook/Basics/Recipe6.pod" class="podlinkpod"
>Moose::Cookbook::Basics::Recipe6</a>.</p>

<dt><a name="inner"
><b>inner</b></a></dt>

<dd>
<p>The keyword <code>inner</code>, much like <code>super</code>, is a no-op outside of the context of an <code>augment</code> method. You can think of <code>inner</code> as being the inverse of <code>super</code>; the details of how <code>inner</code> and <code>augment</code> work is best described in the <a href="/~doy/Moose-2.0403/lib/Moose/Cookbook/Basics/Recipe6.pod" class="podlinkpod"
>Moose::Cookbook::Basics::Recipe6</a>.</p>

<dt><a name="blessed"
><b>blessed</b></a></dt>

<dd>
<p>This is the <code>Scalar::Util::blessed</code> function. It is highly recommended that this is used instead of <code>ref</code> anywhere you need to test for an object&#39;s class name.</p>

<dt><a name="confess"
><b>confess</b></a></dt>

<dd>
<p>This is the <code>Carp::confess</code> function, and exported here for historical reasons.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METACLASS"
>METACLASS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>When you use Moose, you can specify traits which will be applied to your metaclass:</p>

<pre class="sh_perl">    use Moose -traits =&#62; &#39;My::Trait&#39;;</pre>

<p>This is very similar to the attribute traits feature. When you do this, your class&#39;s <code>meta</code> object will have the specified traits applied to it. See <a href="#Metaclass_and_Trait_Name_Resolution" class="podlinkpod"
>&#34;Metaclass and Trait Name Resolution&#34;</a> for more details.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Metaclass_and_Trait_Name_Resolution"
>Metaclass and Trait Name Resolution</a></h2>

<p>By default, when given a trait name, Moose simply tries to load a class of the same name. If such a class does not exist, it then looks for for a class matching <b>Moose::Meta::$type::Custom::Trait::$trait_name</b>. The <code>$type</code> variable here will be one of <b>Attribute</b> or <b>Class</b>, depending on what the trait is being applied to.</p>

<p>If a class with this long name exists, Moose checks to see if it has the method <code>register_implementation</code>. This method is expected to return the <i>real</i> class name of the trait. If there is no <code>register_implementation</code> method, it will fall back to using <b>Moose::Meta::$type::Custom::Trait::$trait</b> as the trait name.</p>

<p>The lookup method for metaclasses is the same, except that it looks for a class matching <b>Moose::Meta::$type::Custom::$metaclass_name</b>.</p>

<p>If all this is confusing, take a look at <a href="/~doy/Moose-2.0403/lib/Moose/Cookbook/Meta/Recipe3.pod" class="podlinkpod"
>Moose::Cookbook::Meta::Recipe3</a>, which demonstrates how to create an attribute trait.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="UNIMPORTING_FUNCTIONS"
>UNIMPORTING FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="unimport"
><b>unimport</b></a></h2>

<p>Moose offers a way to remove the keywords it exports, through the <code>unimport</code> method. You simply have to say <code>no Moose</code> at the bottom of your code for this to work. Here is an example:</p>

<pre class="sh_perl">    package Person;
    use Moose;

    has &#39;first_name&#39; =&#62; (is =&#62; &#39;rw&#39;, isa =&#62; &#39;Str&#39;);
    has &#39;last_name&#39;  =&#62; (is =&#62; &#39;rw&#39;, isa =&#62; &#39;Str&#39;);

    sub full_name {
        my $self = shift;
        $self-&#62;first_name . &#39; &#39; . $self-&#62;last_name
    }

    no Moose; # keywords are removed from the Person package</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXTENDING_AND_EMBEDDING_MOOSE"
>EXTENDING AND EMBEDDING MOOSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>To learn more about extending Moose, we recommend checking out the &#34;Extending&#34; recipes in the <a href="/~doy/Moose-2.0403/lib/Moose/Cookbook.pod" class="podlinkpod"
>Moose::Cookbook</a>, starting with <a href="/~doy/Moose-2.0403/lib/Moose/Cookbook/Extending/Recipe1.pod" class="podlinkpod"
>Moose::Cookbook::Extending::Recipe1</a>, which provides an overview of all the different ways you might extend Moose. <a href="/~doy/Moose-2.0403/lib/Moose/Exporter.pm" class="podlinkpod"
>Moose::Exporter</a> and <a href="/~doy/Moose-2.0403/lib/Moose/Util/MetaRole.pm" class="podlinkpod"
>Moose::Util::MetaRole</a> are the modules which provide the majority of the extension functionality, so reading their documentation should also be helpful.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_MooseX::_namespace"
>The MooseX:: namespace</a></h2>

<p>Generally if you&#39;re writing an extension <i>for</i> Moose itself you&#39;ll want to put your extension in the <code>MooseX::</code> namespace. This namespace is specifically for extensions that make Moose better or different in some fundamental way. It is traditionally <b>not</b> for a package that just happens to use Moose. This namespace follows from the examples of the <code>LWPx::</code> and <code>DBIx::</code> namespaces that perform the same function for <code>LWP</code> and <code>DBI</code> respectively.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METACLASS_COMPATIBILITY_AND_MOOSE"
>METACLASS COMPATIBILITY AND MOOSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Metaclass compatibility is a thorny subject. You should start by reading the &#34;About Metaclass compatibility&#34; section in the <code>Class::MOP</code> docs.</p>

<p>Moose will attempt to resolve a few cases of metaclass incompatibility when you set the superclasses for a class, in addition to the cases that <code>Class::MOP</code> handles.</p>

<p>Moose tries to determine if the metaclasses only &#34;differ by roles&#34;. This means that the parent and child&#39;s metaclass share a common ancestor in their respective hierarchies, and that the subclasses under the common ancestor are only different because of role applications. This case is actually fairly common when you mix and match various <code>MooseX::*</code> modules, many of which apply roles to the metaclass.</p>

<p>If the parent and child do differ by roles, Moose replaces the metaclass in the child with a newly created metaclass. This metaclass is a subclass of the parent&#39;s metaclass which does all of the roles that the child&#39;s metaclass did before being replaced. Effectively, this means the new metaclass does all of the roles done by both the parent&#39;s and child&#39;s original metaclasses.</p>

<p>Ultimately, this is all transparent to you except in the case of an unresolvable conflict.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CAVEATS"
>CAVEATS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li>It should be noted that <code>super</code> and <code>inner</code> <b>cannot</b> be used in the same method. However, they may be combined within the same class hierarchy; see <em>t/basics/override_augment_inner_super.t</em> for an example.
<p>The reason for this is that <code>super</code> is only valid within a method with the <code>override</code> modifier, and <code>inner</code> will never be valid within an <code>override</code> method. In fact, <code>augment</code> will skip over any <code>override</code> methods when searching for its appropriate <code>inner</code>.</p>

<p>This might seem like a restriction, but I am of the opinion that keeping these two features separate (yet interoperable) actually makes them easy to use, since their behavior is then easier to predict. Time will tell whether I am right or not (UPDATE: so far so good).</p>
</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="GETTING_HELP"
>GETTING HELP <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>We offer both a mailing list and a very active IRC channel.</p>

<p>The mailing list is <a href="/perldoc?moose%40perl.org" class="podlinkpod"
>moose@perl.org</a>. You must be subscribed to send a message. To subscribe, send an empty message to <a href="/perldoc?moose-subscribe%40perl.org" class="podlinkpod"
>moose-subscribe@perl.org</a></p>

<p>You can also visit us at <code>#moose</code> on <a href="irc://irc.perl.org/#moose" class="podlinkurl"
>irc://irc.perl.org/#moose</a> This channel is quite active, and questions at all levels (on Moose-related topics ;) are welcome.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACKNOWLEDGEMENTS"
>ACKNOWLEDGEMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='I'></a><a name="I_blame_Sam_Vilain_for_introducing_me_to_the_insanity_that_is_meta-models."
>I blame Sam Vilain for introducing me to the insanity that is meta-models.</a></dt>

<dd>
<dt><a name='I'></a><a name="I_blame_Audrey_Tang_for_then_encouraging_my_meta-model_habit_in_#perl6."
>I blame Audrey Tang for then encouraging my meta-model habit in #perl6.</a></dt>

<dd>
<dt><a name='Without'></a><a name="Without_Yuval_&#34;nothingmuch&#34;_Kogman_this_module_would_not_be_possible,_and_it_certainly_wouldn&#39;t_have_this_name_;P"
>Without Yuval &#34;nothingmuch&#34; Kogman this module would not be possible, and it certainly wouldn&#39;t have this name ;P</a></dt>

<dd>
<dt><a name='The'></a><a name="The_basis_of_the_TypeContraints_module_was_Rob_Kinyon&#39;s_idea_originally,_I_just_ran_with_it."
>The basis of the TypeContraints module was Rob Kinyon&#39;s idea originally, I just ran with it.</a></dt>

<dd>
<dt><a name='Thanks'></a><a name="Thanks_to_mst_&#38;_chansen_and_the_whole_#moose_posse_for_all_the_early_ideas/feature-requests/encouragement/bug-finding."
>Thanks to mst &#38; chansen and the whole #moose posse for all the early ideas/feature-requests/encouragement/bug-finding.</a></dt>

<dd>
<dt><a name='Thanks'></a><a name="Thanks_to_David_&#34;Theory&#34;_Wheeler_for_meta-discussions_and_spelling_fixes."
>Thanks to David &#34;Theory&#34; Wheeler for meta-discussions and spelling fixes.</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='http'></a><a name="http://www.iinteractive.com/moose"
><a href="http://www.iinteractive.com/moose" class="podlinkurl"
>http://www.iinteractive.com/moose</a></a></dt>

<dd>
<p>This is the official web home of Moose. It contains links to our public git repository, as well as links to a number of talks and articles on Moose and Moose related technologies.</p>

<dt><a name='the'></a><a name="the_Moose_manual"
>the <a href="/~doy/Moose-2.0403/lib/Moose/Manual.pod" class="podlinkpod"
>Moose manual</a></a></dt>

<dd>
<p>This is an introduction to Moose which covers most of the basics.</p>

<dt><a name='Modern'></a><a name="Modern_Perl,_by_chromatic"
>Modern Perl, by chromatic</a></dt>

<dd>
<p>This is an introduction to modern Perl programming, which includes a section on Moose. It is available in print and as a free download from <a href="http://onyxneon.com/books/modern_perl/" class="podlinkurl"
>http://onyxneon.com/books/modern_perl/</a>.</p>

<dt><a name='The'></a><a name="The_Moose_is_flying,_a_tutorial_by_Randal_Schwartz"
>The Moose is flying, a tutorial by Randal Schwartz</a></dt>

<dd>
<p>Part 1 - <a href="http://www.stonehenge.com/merlyn/LinuxMag/col94.html" class="podlinkurl"
>http://www.stonehenge.com/merlyn/LinuxMag/col94.html</a></p>

<p>Part 2 - <a href="http://www.stonehenge.com/merlyn/LinuxMag/col95.html" class="podlinkurl"
>http://www.stonehenge.com/merlyn/LinuxMag/col95.html</a></p>

<dt><a name='Several'></a><a name="Several_Moose_extension_modules_in_the_MooseX::_namespace."
>Several Moose extension modules in the <code>MooseX::</code> namespace.</a></dt>

<dd>
<p>See <a href="http://search.cpan.org/search?query=MooseX::" class="podlinkurl"
>http://search.cpan.org/search?query=MooseX::</a> for extensions.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Books"
>Books</a></h2>

<dl>
<dt><a name='The'></a><a name="The_Art_of_the_MetaObject_Protocol"
>The Art of the MetaObject Protocol</a></dt>

<dd>
<p>I mention this in the <a href="/~doy/Moose-2.0403/lib/Class/MOP.pm" class="podlinkpod"
>Class::MOP</a> docs too, as this book was critical in the development of both modules and is highly recommended.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Papers"
>Papers</a></h2>

<dl>
<dt><a name='http'></a><a name="http://www.cs.utah.edu/plt/publications/oopsla04-gff.pdf"
><a href="http://www.cs.utah.edu/plt/publications/oopsla04-gff.pdf" class="podlinkurl"
>http://www.cs.utah.edu/plt/publications/oopsla04-gff.pdf</a></a></dt>

<dd>
<p>This paper (suggested by lbr on #moose) was what lead to the implementation of the <code>super</code>/<code>override</code> and <code>inner</code>/<code>augment</code> features. If you really want to understand them, I suggest you read this.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>All complex software has bugs lurking in it, and this module is no exception.</p>

<p>Please report any bugs to <code>bug-moose@rt.cpan.org</code>, or through the web interface at <a href="http://rt.cpan.org" class="podlinkurl"
>http://rt.cpan.org</a>.</p>

<p>You can also discuss feature requests or possible bugs on the Moose mailing list (moose@perl.org) or on IRC at <a href="irc://irc.perl.org/#moose" class="podlinkurl"
>irc://irc.perl.org/#moose</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FEATURE_REQUESTS"
>FEATURE REQUESTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>We are very strict about what features we add to the Moose core, especially the user-visible features. Instead we have made sure that the underlying meta-system of Moose is as extensible as possible so that you can add your own features easily.</p>

<p>That said, occasionally there is a feature needed in the meta-system to support your planned extension, in which case you should either email the mailing list (moose@perl.org) or join us on IRC at <a href="irc://irc.perl.org/#moose" class="podlinkurl"
>irc://irc.perl.org/#moose</a> to discuss. The <a href="/~doy/Moose-2.0403/lib/Moose/Manual/Contributing.pod" class="podlinkpod"
>Moose::Manual::Contributing</a> has more detail about how and when you can contribute.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CABAL"
>CABAL <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There are only a few people with the rights to release a new version of Moose. The Moose Cabal are the people to go to with questions regarding the wider purview of Moose. They help maintain not just the code but the community as well.</p>

<p>Stevan (stevan) Little &#60;stevan@iinteractive.com&#62;</p>

<p>Jesse (doy) Luehrs &#60;doy at tozt dot net&#62;</p>

<p>Yuval (nothingmuch) Kogman</p>

<p>Shawn (sartak) Moore &#60;sartak@bestpractical.com&#62;</p>

<p>Hans Dieter (confound) Pearcey &#60;hdp@pobox.com&#62;</p>

<p>Chris (perigrin) Prather</p>

<p>Florian Ragwitz &#60;rafl@debian.org&#62;</p>

<p>Dave (autarch) Rolsky &#60;autarch@urth.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONTRIBUTORS"
>CONTRIBUTORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose is a community project, and as such, involves the work of many, many members of the community beyond just the members in the cabal. In particular:</p>

<p>Dave (autarch) Rolsky wrote most of the documentation in <a href="/~doy/Moose-2.0403/lib/Moose/Manual.pod" class="podlinkpod"
>Moose::Manual</a>.</p>

<p>John (jgoulah) Goulah wrote <a href="/~doy/Moose-2.0403/lib/Moose/Cookbook/Snack/Keywords.pod" class="podlinkpod"
>Moose::Cookbook::Snack::Keywords</a>.</p>

<p>Jess (castaway) Robinson wrote <a href="/~doy/Moose-2.0403/lib/Moose/Cookbook/Snack/Types.pod" class="podlinkpod"
>Moose::Cookbook::Snack::Types</a>.</p>

<p>Aran (bluefeet) Clary Deltac wrote <a href="/~doy/Moose-2.0403/lib/Moose/Cookbook/Basics/Recipe9.pod" class="podlinkpod"
>Moose::Cookbook::Basics::Recipe9</a>.</p>

<p>Anders (Debolaz) Nor Berle contributed <a href="/~doy/Moose-2.0403/lib/Test/Moose.pm" class="podlinkpod"
>Test::Moose</a> and <a href="/~doy/Moose-2.0403/lib/Moose/Util.pm" class="podlinkpod"
>Moose::Util</a>.</p>

<p>Also, the code in <a href="/~doy/Moose-2.0403/lib/Moose/Meta/Attribute/Native.pm" class="podlinkpod"
>Moose::Meta::Attribute::Native</a> is based on code from the <a href="/perldoc?MooseX%3A%3AAttributeHelpers" class="podlinkpod"
>MooseX::AttributeHelpers</a> distribution, which had contributions from:</p>

<p>Chris (perigrin) Prather</p>

<p>Cory (gphat) Watson</p>

<p>Evan Carroll</p>

<p>Florian (rafl) Ragwitz</p>

<p>Jason May</p>

<p>Jay Hannah</p>

<p>Jesse (doy) Luehrs</p>

<p>Paul (frodwith) Driver</p>

<p>Robert (rlb3) Boone</p>

<p>Robert Buels</p>

<p>Robert (phaylon) Sedlacek</p>

<p>Shawn (Sartak) Moore</p>

<p>Stevan Little</p>

<p>Tom (dec) Lanyon</p>

<p>Yuval Kogman</p>

<p>Finally, these people also contributed various tests, bug fixes, documentation, and features to the Moose codebase:</p>

<p>Aankhen</p>

<p>Adam (Alias) Kennedy</p>

<p>Christian (chansen) Hansen</p>

<p>Cory (gphat) Watson</p>

<p>Dylan Hardison (doc fixes)</p>

<p>Eric (ewilhelm) Wilhelm</p>

<p>Evan Carroll</p>

<p>Guillermo (groditi) Roditi</p>

<p>Jason May</p>

<p>Jay Hannah</p>

<p>Jonathan (jrockway) Rockway</p>

<p>Matt (mst) Trout</p>

<p>Nathan (kolibrie) Gray</p>

<p>Paul (frodwith) Driver</p>

<p>Piotr (dexter) Roszatycki</p>

<p>Robert Buels</p>

<p>Robert (phaylon) Sedlacek</p>

<p>Robert (rlb3) Boone</p>

<p>Sam (mugwump) Vilain</p>

<p>Scott (konobi) McWhirter</p>

<p>Shlomi (rindolf) Fish</p>

<p>Tom (dec) Lanyon</p>

<p>Wallace (wreis) Reis</p>

<p>... and many other #moose folks</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose is maintained by the Moose Cabal, along with the help of many contributors. See <a href="/~doy/Moose-2.0403/lib/Moose.pm#CABAL" class="podlinkpod"
>&#34;CABAL&#34; in Moose</a> and <a href="/~doy/Moose-2.0403/lib/Moose.pm#CONTRIBUTORS" class="podlinkpod"
>&#34;CONTRIBUTORS&#34; in Moose</a> for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This software is copyright (c) 2012 by Infinity Interactive, Inc..</p>

<p>This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78080 Uploads, 24688 Distributions
105904 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sun Apr 22 18:19:51 2012 GMT (0.144665956497192) @cpansearch1 -->
 </body>
</html>
