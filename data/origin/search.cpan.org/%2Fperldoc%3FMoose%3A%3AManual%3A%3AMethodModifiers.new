<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Moose::Manual::MethodModifiers - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Moose",3]);
    _gaq.push(["_setCustomVar",5,"Release","Moose-2.0403",3]);
    _gaq.push(["_setCustomVar",4,"Document","Moose::Manual::MethodModifiers",3]);
    _gaq.push(["_setCustomVar",1,"Author","DOY",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Moose::Manual::MethodModifiers">permalink</a></div>
  <a href="/~doy/">Jesse Luehrs</a> &gt;
  <a href="/~doy/Moose-2.0403/">Moose-2.0403</a> &gt;
  Moose::Manual::MethodModifiers
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/88766de7a058697d3d0335b8d384fd2a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DO/DOY/Moose-2.0403.tar.gz">Moose-2.0403.tar.gz</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DOY/Moose-2.0403/lib/Moose/Manual/MethodModifiers.pod">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 13</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 27</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=Moose">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
<span class="noprint">
  <a href="/src/DOY/Moose-2.0403/lib/Moose/Manual/MethodModifiers.pod">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~doy/Moose/lib/Moose/Manual/MethodModifiers.pod">Moose-2.0501-TRIAL</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#WHAT_IS_A_METHOD_MODIFIER?'>WHAT IS A METHOD MODIFIER?</a>
  <li class='indexItem indexItem1'><a href='#WHY_USE_THEM?'>WHY USE THEM?</a>
  <li class='indexItem indexItem1'><a href='#BEFORE,_AFTER,_AND_AROUND'>BEFORE, AFTER, AND AROUND</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#BEFORE_and_AFTER_modifiers'>BEFORE and AFTER modifiers</a>
    <li class='indexItem indexItem2'><a href='#AROUND_modifiers'>AROUND modifiers</a>
    <li class='indexItem indexItem2'><a href='#Wrapping_multiple_methods_at_once'>Wrapping multiple methods at once</a>
    <li class='indexItem indexItem2'><a href='#Using_regular_expressions_to_select_methods_to_wrap'>Using regular expressions to select methods to wrap</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#INNER_AND_AUGMENT'>INNER AND AUGMENT</a>
  <li class='indexItem indexItem1'><a href='#OVERRIDE_AND_SUPER'>OVERRIDE AND SUPER</a>
  <li class='indexItem indexItem1'><a href='#SEMI-COLONS'>SEMI-COLONS</a>
  <li class='indexItem indexItem1'><a href='#CAVEATS'>CAVEATS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose::Manual::MethodModifiers - Moose&#39;s method modifiers</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>version 2.0403</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WHAT_IS_A_METHOD_MODIFIER?"
>WHAT IS A METHOD MODIFIER? <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose provides a feature called &#34;method modifiers&#34;.
You can also think of these as &#34;hooks&#34; or &#34;advice&#34;.</p>

<p>It&#39;s probably easiest to understand this feature with a few examples:</p>

<pre class="sh_perl">  package Example;

  use Moose;

  sub foo {
      print &#34;    foo\n&#34;;
  }

  before &#39;foo&#39; =&#62; sub { print &#34;about to call foo\n&#34;; };
  after &#39;foo&#39;  =&#62; sub { print &#34;just called foo\n&#34;; };

  around &#39;foo&#39; =&#62; sub {
      my $orig = shift;
      my $self = shift;

      print &#34;  I&#39;m around foo\n&#34;;

      $self-&#62;$orig(@_);

      print &#34;  I&#39;m still around foo\n&#34;;
  };</pre>

<p>Now if I call <code>Example-&#62;new-&#62;foo</code> I&#39;ll get the following output:</p>

<pre class="sh_perl">  about to call foo
    I&#39;m around foo
      foo
    I&#39;m still around foo
  just called foo</pre>

<p>You probably could have figured that out from the names &#34;before&#34;, &#34;after&#34;, and &#34;around&#34;.</p>

<p>Also, as you can see, the before modifiers come before around modifiers, and after modifiers come last.</p>

<p>When there are multiple modifiers of the same type, the before and around modifiers run from the last added to the first, and after modifiers run from first added to last:</p>

<pre class="sh_perl">   before 2
    before 1
     around 2
      around 1
       primary
      around 1
     around 2
    after 1
   after 2</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WHY_USE_THEM?"
>WHY USE THEM? <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Method modifiers have many uses. They are often used in roles to alter the behavior of methods in the classes that consume the role. See <a href="/~doy/Moose-2.0403/lib/Moose/Manual/Roles.pod" class="podlinkpod"
>Moose::Manual::Roles</a> for more information about roles.</p>

<p>Since modifiers are mostly useful in roles, some of the examples below are a bit artificial. They&#39;re intended to give you an idea of how modifiers work, but may not be the most natural usage.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BEFORE,_AFTER,_AND_AROUND"
>BEFORE, AFTER, AND AROUND <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Method modifiers can be used to add behavior to methods without modifying the definition of those methods.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="BEFORE_and_AFTER_modifiers"
>BEFORE and AFTER modifiers</a></h2>

<p>Method modifiers can be used to add behavior to a method that Moose generates for you, such as an attribute accessor:</p>

<pre class="sh_perl">  has &#39;size&#39; =&#62; ( is =&#62; &#39;rw&#39; );

  before &#39;size&#39; =&#62; sub {
      my $self = shift;

      if (@_) {
          Carp::cluck(&#39;Someone is setting size&#39;);
      }
  };</pre>

<p>Another use for the before modifier would be to do some sort of prechecking on a method call. For example:</p>

<pre class="sh_perl">  before &#39;size&#39; =&#62; sub {
      my $self = shift;

      die &#39;Cannot set size while the person is growing&#39;
          if @_ &#38;&#38; $self-&#62;is_growing;
  };</pre>

<p>This lets us implement logical checks that don&#39;t make sense as type constraints. In particular, they&#39;re useful for defining logical rules about an object&#39;s state changes.</p>

<p>Similarly, an after modifier could be used for logging an action that was taken.</p>

<p>Note that the return values of both before and after modifiers are ignored.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="AROUND_modifiers"
>AROUND modifiers</a></h2>

<p>An around modifier is more powerful than either a before or after modifier. It can modify the arguments being passed to the original method, and you can even decide to simply not call the original method at all. You can also modify the return value with an around modifier.</p>

<p>An around modifier receives the original method as its first argument, <i>then</i> the object, and finally any arguments passed to the method.</p>

<pre class="sh_perl">  around &#39;size&#39; =&#62; sub {
      my $orig = shift;
      my $self = shift;

      return $self-&#62;$orig()
          unless @_;

      my $size = shift;
      $size = $size / 2
          if $self-&#62;likes_small_things();

      return $self-&#62;$orig($size);
  };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Wrapping_multiple_methods_at_once"
>Wrapping multiple methods at once</a></h2>

<p><code>before</code>, <code>after</code>, and <code>around</code> can also modify multiple methods at once. The simplest example of this is passing them as a list:</p>

<pre class="sh_perl">  before [qw(foo bar baz)] =&#62; sub {
      warn &#34;something is being called!&#34;;
  };</pre>

<p>This will add a <code>before</code> modifier to each of the <code>foo</code>, <code>bar</code>, and <code>baz</code> methods in the current class, just as though a separate call to <code>before</code> was made for each of them. The list can be passed either as a bare list, or as an arrayref. Note that the name of the function being modified isn&#39;t passed in in any way; this syntax is only intended for cases where the function being modified doesn&#39;t actually matter. If the function name does matter, use something like this:</p>

<pre class="sh_perl">  for my $func (qw(foo bar baz)) {
      before $func =&#62; sub {
          warn &#34;$func was called!&#34;;
      };
  }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Using_regular_expressions_to_select_methods_to_wrap"
>Using regular expressions to select methods to wrap</a></h2>

<p>In addition, you can specify a regular expression to indicate the methods to wrap, like so:</p>

<pre class="sh_perl">  after qr/^command_/ =&#62; sub {
      warn &#34;got a command&#34;;
  };</pre>

<p>This will match the regular expression against each method name returned by <a href="/~doy/Moose-2.0403/lib/Class/MOP/Class.pm#get_method_list" class="podlinkpod"
>&#34;get_method_list&#34; in Class::MOP::Class</a>, and add a modifier to each one that matches. The same caveats apply as above.</p>

<p>Using regular expressions to determine methods to wrap is quite a bit more powerful than the previous alternatives, but it&#39;s also quite a bit more dangerous. Bear in mind that if your regular expression matches certain Perl and Moose reserved method names with a special meaning to Moose or Perl, such as <code>meta</code>, <code>new</code>, <code>BUILD</code>, <code>DESTROY</code>, <code>AUTOLOAD</code>, etc, this could cause unintended (and hard to debug) problems and is best avoided.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INNER_AND_AUGMENT"
>INNER AND AUGMENT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Augment and inner are two halves of the same feature. The augment modifier provides a sort of inverted subclassing. You provide part of the implementation in a superclass, and then document that subclasses are expected to provide the rest.</p>

<p>The superclass calls <code>inner()</code>, which then calls the <code>augment</code> modifier in the subclass:</p>

<pre class="sh_perl">  package Document;

  use Moose;

  sub as_xml {
      my $self = shift;

      my $xml = &#34;&#60;document&#62;\n&#34;;
      $xml .= inner();
      $xml .= &#34;&#60;/document&#62;\n&#34;;

      return $xml;
  }</pre>

<p>Using <code>inner()</code> in this method makes it possible for one or more subclasses to then augment this method with their own specific implementation:</p>

<pre class="sh_perl">  package Report;

  use Moose;

  extends &#39;Document&#39;;

  augment &#39;as_xml&#39; =&#62; sub {
      my $self = shift;

      my $xml = &#34;  &#60;report&#62;\n&#34;;
      $xml .= inner();
      $xml .= &#34;  &#60;/report&#62;\n&#34;;

      return $xml;
  };</pre>

<p>When we call <code>as_xml</code> on a Report object, we get something like this:</p>

<pre class="sh_perl">  &#60;document&#62;
    &#60;report&#62;
    &#60;/report&#62;
  &#60;/document&#62;</pre>

<p>But we also called <code>inner()</code> in <code>Report</code>, so we can continue subclassing and adding more content inside the document:</p>

<pre class="sh_perl">  package Report::IncomeAndExpenses;

  use Moose;

  extends &#39;Report&#39;;

  augment &#39;as_xml&#39; =&#62; sub {
      my $self = shift;

      my $xml = &#39;    &#60;income&#62;&#39; . $self-&#62;income . &#39;&#60;/income&#62;&#39;;
      $xml .= &#34;\n&#34;;
      $xml .= &#39;    &#60;expenses&#62;&#39; . $self-&#62;expenses . &#39;&#60;/expenses&#62;&#39;;
      $xml .= &#34;\n&#34;;

      $xml .= inner() || q{};

      return $xml;
  };</pre>

<p>Now our report has some content:</p>

<pre class="sh_perl">  &#60;document&#62;
    &#60;report&#62;
      &#60;income&#62;$10&#60;/income&#62;
      &#60;expenses&#62;$8&#60;/expenses&#62;
    &#60;/report&#62;
  &#60;/document&#62;</pre>

<p>What makes this combination of <code>augment</code> and <code>inner()</code> special is that it allows us to have methods which are called from parent (least specific) to child (most specific). This inverts the normal inheritance pattern.</p>

<p>Note that in <code>Report::IncomeAndExpenses</code> we call <code>inner()</code> again. If the object is an instance of <code>Report::IncomeAndExpenses</code> then this call is a no-op, and just returns false. It&#39;s a good idea to always call <code>inner()</code> to allow for future subclassing.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OVERRIDE_AND_SUPER"
>OVERRIDE AND SUPER <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Finally, Moose provides some simple sugar for Perl&#39;s built-in method overriding scheme. If you want to override a method from a parent class, you can do this with <code>override</code>:</p>

<pre class="sh_perl">  package Employee;

  use Moose;

  extends &#39;Person&#39;;

  has &#39;job_title&#39; =&#62; ( is =&#62; &#39;rw&#39; );

  override &#39;display_name&#39; =&#62; sub {
      my $self = shift;

      return super() . q{, } . $self-&#62;title();
  };</pre>

<p>The call to <code>super()</code> is almost the same as calling <code>$self-&#62;SUPER::display_name</code>. The difference is that the arguments passed to the superclass&#39;s method will always be the same as the ones passed to the method modifier, and cannot be changed.</p>

<p>All arguments passed to <code>super()</code> are ignored, as are any changes made to <code>@_</code> before <code>super()</code> is called.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEMI-COLONS"
>SEMI-COLONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Because all of these method modifiers are implemented as Perl functions, you must always end the modifier declaration with a semi-colon:</p>

<pre class="sh_perl">  after &#39;foo&#39; =&#62; sub { };</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CAVEATS"
>CAVEATS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>These method modification features do not work well with multiple inheritance, due to how method resolution is performed in Perl. Experiment with a test program to ensure your class hierarchy works as expected, or more preferably, don&#39;t use multiple inheritance (roles can help with this)!</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose is maintained by the Moose Cabal, along with the help of many contributors. See <a href="/~doy/Moose-2.0403/lib/Moose.pm#CABAL" class="podlinkpod"
>&#34;CABAL&#34; in Moose</a> and <a href="/~doy/Moose-2.0403/lib/Moose.pm#CONTRIBUTORS" class="podlinkpod"
>&#34;CONTRIBUTORS&#34; in Moose</a> for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This software is copyright (c) 2012 by Infinity Interactive, Inc..</p>

<p>This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78179 Uploads, 24710 Distributions
106004 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Document']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Document']);
    });
  });
</script>
<!-- Wed Apr 25 07:01:57 2012 GMT (0.0759902000427246) @cpansearch1 -->
 </body>
</html>
