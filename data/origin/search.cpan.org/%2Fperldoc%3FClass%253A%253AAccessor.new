<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Class::Accessor - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Class-Accessor",3]);
    _gaq.push(["_setCustomVar",5,"Release","Class-Accessor-0.34",3]);
    _gaq.push(["_setCustomVar",3,"Module","Class::Accessor",3]);
    _gaq.push(["_setCustomVar",1,"Author","KASEI",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Class::Accessor">permalink</a></div>
  <a href="/~kasei/">Marty Pauley</a> &gt;
  <a href="/~kasei/Class-Accessor-0.34/">Class-Accessor-0.34</a> &gt;
  Class::Accessor
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/a9a48b6a5543d5ede030cd7783c46797?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/K/KA/KASEI/Class-Accessor-0.34.tar.gz">Class-Accessor-0.34.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Class%3A%3AAccessor;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~KASEI/Class-Accessor-0.34/lib/Class/Accessor.pm">Annotate this POD
(2)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?CGI%3A%3AApplication">CGI::Application</a><br>
<a href="/perldoc?Test%3A%3AMore">Test::More</a><br>
<a href="/perldoc?Scalar%3A%3AUtil">Scalar::Util</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?Class%3A%3AFields">Class::Fields</a><br>
<a href="/perldoc?CGI%3A%3AAjax">CGI::Ajax</a><br>
<a href="/perldoc?Object%3A%3AInsideOut">Object::InsideOut</a><br>
<a href="/perldoc?File%3A%3AFind">File::Find</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Class%3A%3AAccessor">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 2</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Class-Accessor">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.34 &nbsp;
<span class="noprint">
  <a href="/src/KASEI/Class-Accessor-0.34/lib/Class/Accessor.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Moose-like'>Moose-like</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CONSTRUCTOR'>CONSTRUCTOR</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#new'>new</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#MAKING_ACCESSORS'>MAKING ACCESSORS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#follow_best_practice'>follow_best_practice</a>
    <li class='indexItem indexItem2'><a href='#accessor_name_for_/_mutator_name_for'>accessor_name_for / mutator_name_for</a>
    <li class='indexItem indexItem2'><a href='#mk_accessors'>mk_accessors</a>
    <li class='indexItem indexItem2'><a href='#mk_ro_accessors'>mk_ro_accessors</a>
    <li class='indexItem indexItem2'><a href='#mk_wo_accessors'>mk_wo_accessors</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Moose!'>Moose!</a>
  <li class='indexItem indexItem1'><a href='#DETAILS'>DETAILS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Modifying_the_behavior_of_the_accessor'>Modifying the behavior of the accessor</a>
    <li class='indexItem indexItem2'><a href='#set'>set</a>
    <li class='indexItem indexItem2'><a href='#get'>get</a>
    <li class='indexItem indexItem2'><a href='#make_accessor'>make_accessor</a>
    <li class='indexItem indexItem2'><a href='#make_ro_accessor'>make_ro_accessor</a>
    <li class='indexItem indexItem2'><a href='#make_wo_accessor'>make_wo_accessor</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXCEPTIONS'>EXCEPTIONS</a>
  <li class='indexItem indexItem1'><a href='#EFFICIENCY'>EFFICIENCY</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <li class='indexItem indexItem1'><a href='#CAVEATS_AND_TRICKS'>CAVEATS AND TRICKS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Don&#39;t_make_a_field_called_DESTROY'>Don&#39;t make a field called DESTROY</a>
    <li class='indexItem indexItem2'><a href='#Overriding_autogenerated_accessors'>Overriding autogenerated accessors</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#ORIGINAL_AUTHOR'>ORIGINAL AUTHOR</a>
    <li class='indexItem indexItem2'><a href='#THANKS'>THANKS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  Class::Accessor - Automated accessor generation</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  package Foo;
  use base qw(Class::Accessor);
  Foo-&#62;follow_best_practice;
  Foo-&#62;mk_accessors(qw(name role salary));

  # or if you prefer a Moose-like interface...
 
  package Foo;
  use Class::Accessor &#34;antlers&#34;;
  has name =&#62; ( is =&#62; &#34;rw&#34;, isa =&#62; &#34;Str&#34; );
  has role =&#62; ( is =&#62; &#34;rw&#34;, isa =&#62; &#34;Str&#34; );
  has salary =&#62; ( is =&#62; &#34;rw&#34;, isa =&#62; &#34;Num&#34; );

  # Meanwhile, in a nearby piece of code!
  # Class::Accessor provides new().
  my $mp = Foo-&#62;new({ name =&#62; &#34;Marty&#34;, role =&#62; &#34;JAPH&#34; });

  my $job = $mp-&#62;role;  # gets $mp-&#62;{role}
  $mp-&#62;salary(400000);  # sets $mp-&#62;{salary} = 400000 # I wish
  
  # like my @info = @{$mp}{qw(name role)}
  my @info = $mp-&#62;get(qw(name role));
  
  # $mp-&#62;{salary} = 400000
  $mp-&#62;set(&#39;salary&#39;, 400000);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module automagically generates accessors/mutators for your class.</p>

<p>Most of the time, writing accessors is an exercise in cutting and pasting. You usually wind up with a series of methods like this:</p>

<pre class="sh_perl">    sub name {
        my $self = shift;
        if(@_) {
            $self-&#62;{name} = $_[0];
        }
        return $self-&#62;{name};
    }

    sub salary {
        my $self = shift;
        if(@_) {
            $self-&#62;{salary} = $_[0];
        }
        return $self-&#62;{salary};
    }

  # etc...</pre>

<p>One for each piece of data in your object. While some will be unique, doing value checks and special storage tricks, most will simply be exercises in repetition. Not only is it Bad Style to have a bunch of repetitious code, but it&#39;s also simply not lazy, which is the real tragedy.</p>

<p>If you make your module a subclass of Class::Accessor and declare your accessor fields with mk_accessors() then you&#39;ll find yourself with a set of automatically generated accessors which can even be customized!</p>

<p>The basic set up is very simple:</p>

<pre class="sh_perl">    package Foo;
    use base qw(Class::Accessor);
    Foo-&#62;mk_accessors( qw(far bar car) );</pre>

<p>Done. Foo now has simple far(), bar() and car() accessors defined.</p>

<p>Alternatively, if you want to follow Damian&#39;s <i>best practice</i> guidelines you can use:</p>

<pre class="sh_perl">    package Foo;
    use base qw(Class::Accessor);
    Foo-&#62;follow_best_practice;
    Foo-&#62;mk_accessors( qw(far bar car) );</pre>

<p><b>Note:</b> you must call <code>follow_best_practice</code> before calling <code>mk_accessors</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Moose-like"
>Moose-like</a></h2>

<p>By popular demand we now have a simple Moose-like interface. You can now do:</p>

<pre class="sh_perl">    package Foo;
    use Class::Accessor &#34;antlers&#34;;
    has far =&#62; ( is =&#62; &#34;rw&#34; );
    has bar =&#62; ( is =&#62; &#34;rw&#34; );
    has car =&#62; ( is =&#62; &#34;rw&#34; );</pre>

<p>Currently only the <code>is</code> attribute is supported.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTOR"
>CONSTRUCTOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Class::Accessor provides a basic constructor, <code>new</code>. It generates a hash-based object and can be called as either a class method or an object method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="new"
>new</a></h2>

<pre class="sh_perl">    my $obj = Foo-&#62;new;
    my $obj = $other_obj-&#62;new;

    my $obj = Foo-&#62;new(\%fields);
    my $obj = $other_obj-&#62;new(\%fields);</pre>

<p>It takes an optional %fields hash which is used to initialize the object (handy if you use read-only accessors). The fields of the hash correspond to the names of your accessors, so...</p>

<pre class="sh_perl">    package Foo;
    use base qw(Class::Accessor);
    Foo-&#62;mk_accessors(&#39;foo&#39;);

    my $obj = Foo-&#62;new({ foo =&#62; 42 });
    print $obj-&#62;foo;    # 42</pre>

<p>however %fields can contain anything, new() will shove them all into your object.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MAKING_ACCESSORS"
>MAKING ACCESSORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="follow_best_practice"
>follow_best_practice</a></h2>

<p>In Damian&#39;s Perl Best Practices book he recommends separate get and set methods with the prefix set_ and get_ to make it explicit what you intend to do. If you want to create those accessor methods instead of the default ones, call:</p>

<pre class="sh_perl">    __PACKAGE__-&#62;follow_best_practice</pre>

<p><b>before</b> you call any of the accessor-making methods.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="accessor_name_for_/_mutator_name_for"
>accessor_name_for / mutator_name_for</a></h2>

<p>You may have your own crazy ideas for the names of the accessors, so you can make those happen by overriding <code>accessor_name_for</code> and <code>mutator_name_for</code> in your subclass. (I copied that idea from Class::DBI.)</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="mk_accessors"
>mk_accessors</a></h2>

<pre class="sh_perl">    __PACKAGE__-&#62;mk_accessors(@fields);</pre>

<p>This creates accessor/mutator methods for each named field given in @fields. Foreach field in @fields it will generate two accessors. One called &#34;field()&#34; and the other called &#34;_field_accessor()&#34;. For example:</p>

<pre class="sh_perl">    # Generates foo(), _foo_accessor(), bar() and _bar_accessor().
    __PACKAGE__-&#62;mk_accessors(qw(foo bar));</pre>

<p>See <a href="/perldoc?CAVEATS%20AND%20TRICKS#Overriding_autogenerated_accessors" class="podlinkpod"
>&#34;Overriding autogenerated accessors&#34; in CAVEATS AND TRICKS</a> for details.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="mk_ro_accessors"
>mk_ro_accessors</a></h2>

<pre class="sh_perl">  __PACKAGE__-&#62;mk_ro_accessors(@read_only_fields);</pre>

<p>Same as mk_accessors() except it will generate read-only accessors (ie. true accessors). If you attempt to set a value with these accessors it will throw an exception. It only uses get() and not set().</p>

<pre class="sh_perl">    package Foo;
    use base qw(Class::Accessor);
    Foo-&#62;mk_ro_accessors(qw(foo bar));

    # Let&#39;s assume we have an object $foo of class Foo...
    print $foo-&#62;foo;  # ok, prints whatever the value of $foo-&#62;{foo} is
    $foo-&#62;foo(42);    # BOOM!  Naughty you.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="mk_wo_accessors"
>mk_wo_accessors</a></h2>

<pre class="sh_perl">  __PACKAGE__-&#62;mk_wo_accessors(@write_only_fields);</pre>

<p>Same as mk_accessors() except it will generate write-only accessors (ie. mutators). If you attempt to read a value with these accessors it will throw an exception. It only uses set() and not get().</p>

<p><b>NOTE</b> I&#39;m not entirely sure why this is useful, but I&#39;m sure someone will need it. If you&#39;ve found a use, let me know. Right now it&#39;s here for orthoginality and because it&#39;s easy to implement.</p>

<pre class="sh_perl">    package Foo;
    use base qw(Class::Accessor);
    Foo-&#62;mk_wo_accessors(qw(foo bar));

    # Let&#39;s assume we have an object $foo of class Foo...
    $foo-&#62;foo(42);      # OK.  Sets $self-&#62;{foo} = 42
    print $foo-&#62;foo;    # BOOM!  Can&#39;t read from this accessor.</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Moose!"
>Moose! <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you prefer a Moose-like interface to create accessors, you can use <code>has</code> by importing this module like this:</p>

<pre class="sh_perl">  use Class::Accessor &#34;antlers&#34;;</pre>

<p>or</p>

<pre class="sh_perl">  use Class::Accessor &#34;moose-like&#34;;</pre>

<p>Then you can declare accessors like this:</p>

<pre class="sh_perl">  has alpha =&#62; ( is =&#62; &#34;rw&#34;, isa =&#62; &#34;Str&#34; );
  has beta  =&#62; ( is =&#62; &#34;ro&#34;, isa =&#62; &#34;Str&#34; );
  has gamma =&#62; ( is =&#62; &#34;wo&#34;, isa =&#62; &#34;Str&#34; );</pre>

<p>Currently only the <code>is</code> attribute is supported. And our <code>is</code> also supports the &#34;wo&#34; value to make a write-only accessor.</p>

<p>If you are using the Moose-like interface then you should use the <code>extends</code> rather than tweaking your <code>@ISA</code> directly. Basically, replace</p>

<pre class="sh_perl">  @ISA = qw/Foo Bar/;</pre>

<p>with</p>

<pre class="sh_perl">  extends(qw/Foo Bar/);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DETAILS"
>DETAILS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>An accessor generated by Class::Accessor looks something like this:</p>

<pre class="sh_perl">    # Your foo may vary.
    sub foo {
        my($self) = shift;
        if(@_) {    # set
            return $self-&#62;set(&#39;foo&#39;, @_);
        }
        else {
            return $self-&#62;get(&#39;foo&#39;);
        }
    }</pre>

<p>Very simple. All it does is determine if you&#39;re wanting to set a value or get a value and calls the appropriate method. Class::Accessor provides default get() and set() methods which your class can override. They&#39;re detailed later.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Modifying_the_behavior_of_the_accessor"
>Modifying the behavior of the accessor</a></h2>

<p>Rather than actually modifying the accessor itself, it is much more sensible to simply override the two key methods which the accessor calls. Namely set() and get().</p>

<p>If you -really- want to, you can override make_accessor().</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="set"
>set</a></h2>

<pre class="sh_perl">    $obj-&#62;set($key, $value);
    $obj-&#62;set($key, @values);</pre>

<p>set() defines how generally one stores data in the object.</p>

<p>override this method to change how data is stored by your accessors.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="get"
>get</a></h2>

<pre class="sh_perl">    $value  = $obj-&#62;get($key);
    @values = $obj-&#62;get(@keys);</pre>

<p>get() defines how data is retreived from your objects.</p>

<p>override this method to change how it is retreived.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="make_accessor"
>make_accessor</a></h2>

<pre class="sh_perl">    $accessor = __PACKAGE__-&#62;make_accessor($field);</pre>

<p>Generates a subroutine reference which acts as an accessor for the given $field. It calls get() and set().</p>

<p>If you wish to change the behavior of your accessors, try overriding get() and set() before you start mucking with make_accessor().</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="make_ro_accessor"
>make_ro_accessor</a></h2>

<pre class="sh_perl">    $read_only_accessor = __PACKAGE__-&#62;make_ro_accessor($field);</pre>

<p>Generates a subroutine refrence which acts as a read-only accessor for the given $field. It only calls get().</p>

<p>Override get() to change the behavior of your accessors.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="make_wo_accessor"
>make_wo_accessor</a></h2>

<pre class="sh_perl">    $read_only_accessor = __PACKAGE__-&#62;make_wo_accessor($field);</pre>

<p>Generates a subroutine refrence which acts as a write-only accessor (mutator) for the given $field. It only calls set().</p>

<p>Override set() to change the behavior of your accessors.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXCEPTIONS"
>EXCEPTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If something goes wrong Class::Accessor will warn or die by calling Carp::carp or Carp::croak. If you don&#39;t like this you can override _carp() and _croak() in your subclass and do whatever else you want.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EFFICIENCY"
>EFFICIENCY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Class::Accessor does not employ an autoloader, thus it is much faster than you&#39;d think. Its generated methods incur no special penalty over ones you&#39;d write yourself.</p>

<pre class="sh_perl">  accessors:
              Rate  Basic   Fast Faster Direct
  Basic   367589/s     --   -51%   -55%   -89%
  Fast    747964/s   103%     --    -9%   -77%
  Faster  819199/s   123%    10%     --   -75%
  Direct 3245887/s   783%   334%   296%     --

  mutators:
              Rate    Acc   Fast Faster Direct
  Acc     265564/s     --   -54%   -63%   -91%
  Fast    573439/s   116%     --   -21%   -80%
  Faster  724710/s   173%    26%     --   -75%
  Direct 2860979/s   977%   399%   295%     --</pre>

<p>Class::Accessor::Fast is faster than methods written by an average programmer (where &#34;average&#34; is based on Schwern&#39;s example code).</p>

<p>Class::Accessor is slower than average, but more flexible.</p>

<p>Class::Accessor::Faster is even faster than Class::Accessor::Fast. It uses an array internally, not a hash. This could be a good or bad feature depending on your point of view.</p>

<p>Direct hash access is, of course, much faster than all of these, but it provides no encapsulation.</p>

<p>Of course, it&#39;s not as simple as saying &#34;Class::Accessor is slower than average&#34;. These are benchmarks for a simple accessor. If your accessors do any sort of complicated work (such as talking to a database or writing to a file) the time spent doing that work will quickly swamp the time spend just calling the accessor. In that case, Class::Accessor and the ones you write will be roughly the same speed.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Here&#39;s an example of generating an accessor for every public field of your class.</p>

<pre class="sh_perl">    package Altoids;
    
    use base qw(Class::Accessor Class::Fields);
    use fields qw(curiously strong mints);
    Altoids-&#62;mk_accessors( Altoids-&#62;show_fields(&#39;Public&#39;) );

    sub new {
        my $proto = shift;
        my $class = ref $proto || $proto;
        return fields::new($class);
    }

    my Altoids $tin = Altoids-&#62;new;

    $tin-&#62;curiously(&#39;Curiouser and curiouser&#39;);
    print $tin-&#62;{curiously};    # prints &#39;Curiouser and curiouser&#39;

    
    # Subclassing works, too.
    package Mint::Snuff;
    use base qw(Altoids);

    my Mint::Snuff $pouch = Mint::Snuff-&#62;new;
    $pouch-&#62;strong(&#39;Blow your head off!&#39;);
    print $pouch-&#62;{strong};     # prints &#39;Blow your head off!&#39;</pre>

<p>Here&#39;s a simple example of altering the behavior of your accessors.</p>

<pre class="sh_perl">    package Foo;
    use base qw(Class::Accessor);
    Foo-&#62;mk_accessors(qw(this that up down));

    sub get {
        my $self = shift;

        # Note every time someone gets some data.
        print STDERR &#34;Getting @_\n&#34;;

        $self-&#62;SUPER::get(@_);
    }

    sub set {
        my ($self, $key) = splice(@_, 0, 2);

        # Note every time someone sets some data.
        print STDERR &#34;Setting $key to @_\n&#34;;

        $self-&#62;SUPER::set($key, @_);
    }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CAVEATS_AND_TRICKS"
>CAVEATS AND TRICKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Class::Accessor has to do some internal wackiness to get its job done quickly and efficiently. Because of this, there&#39;s a few tricks and traps one must know about.</p>

<p>Hey, nothing&#39;s perfect.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Don&#39;t_make_a_field_called_DESTROY"
>Don&#39;t make a field called DESTROY</a></h2>

<p>This is bad. Since DESTROY is a magical method it would be bad for us to define an accessor using that name. Class::Accessor will carp if you try to use it with a field named &#34;DESTROY&#34;.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Overriding_autogenerated_accessors"
>Overriding autogenerated accessors</a></h2>

<p>You may want to override the autogenerated accessor with your own, yet have your custom accessor call the default one. For instance, maybe you want to have an accessor which checks its input. Normally, one would expect this to work:</p>

<pre class="sh_perl">    package Foo;
    use base qw(Class::Accessor);
    Foo-&#62;mk_accessors(qw(email this that whatever));

    # Only accept addresses which look valid.
    sub email {
        my($self) = shift;
        my($email) = @_;

        if( @_ ) {  # Setting
            require Email::Valid;
            unless( Email::Valid-&#62;address($email) ) {
                carp(&#34;$email doesn&#39;t look like a valid address.&#34;);
                return;
            }
        }

        return $self-&#62;SUPER::email(@_);
    }</pre>

<p>There&#39;s a subtle problem in the last example, and it&#39;s in this line:</p>

<pre class="sh_perl">    return $self-&#62;SUPER::email(@_);</pre>

<p>If we look at how Foo was defined, it called mk_accessors() which stuck email() right into Foo&#39;s namespace. There *is* no SUPER::email() to delegate to! Two ways around this... first is to make a &#34;pure&#34; base class for Foo. This pure class will generate the accessors and provide the necessary super class for Foo to use:</p>

<pre class="sh_perl">    package Pure::Organic::Foo;
    use base qw(Class::Accessor);
    Pure::Organic::Foo-&#62;mk_accessors(qw(email this that whatever));

    package Foo;
    use base qw(Pure::Organic::Foo);</pre>

<p>And now Foo::email() can override the generated Pure::Organic::Foo::email() and use it as SUPER::email().</p>

<p>This is probably the most obvious solution to everyone but me. Instead, what first made sense to me was for mk_accessors() to define an alias of email(), _email_accessor(). Using this solution, Foo::email() would be written with:</p>

<pre class="sh_perl">    return $self-&#62;_email_accessor(@_);</pre>

<p>instead of the expected SUPER::email().</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2009 Marty Pauley &#60;marty+perl@kasei.com&#62;</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself. That means either (a) the GNU General Public License or (b) the Artistic License.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ORIGINAL_AUTHOR"
>ORIGINAL AUTHOR</a></h2>

<p>Michael G Schwern &#60;schwern@pobox.com&#62;</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="THANKS"
>THANKS</a></h2>

<p>Liz and RUZ for performance tweaks.</p>

<p>Tels, for his big feature request/bug report.</p>

<p>Various presenters at YAPC::Asia 2009 for criticising the non-Moose interface.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>See <a href="/~kasei/Class-Accessor-0.34/lib/Class/Accessor/Fast.pm" class="podlinkpod"
>Class::Accessor::Fast</a> and <a href="/~kasei/Class-Accessor-0.34/lib/Class/Accessor/Faster.pm" class="podlinkpod"
>Class::Accessor::Faster</a> if speed is more important than flexibility.</p>

<p>These are some modules which do similar things in different ways <a href="/perldoc?Class%3A%3AStruct" class="podlinkpod"
>Class::Struct</a>, <a href="/perldoc?Class%3A%3AMethodmaker" class="podlinkpod"
>Class::Methodmaker</a>, <a href="/perldoc?Class%3A%3AGenerate" class="podlinkpod"
>Class::Generate</a>, <a href="/perldoc?Class%3A%3AClass" class="podlinkpod"
>Class::Class</a>, <a href="/perldoc?Class%3A%3AContract" class="podlinkpod"
>Class::Contract</a>, <a href="/perldoc?Moose" class="podlinkpod"
>Moose</a>, <a href="/perldoc?Mouse" class="podlinkpod"
>Mouse</a></p>

<p>See <a href="/perldoc?Class%3A%3ADBI" class="podlinkpod"
>Class::DBI</a> for an example of this module in use.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78163 Uploads, 24704 Distributions
105968 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Tue Apr 24 21:02:04 2012 GMT (0.0892119407653809) @cpansearch1 -->
 </body>
</html>
