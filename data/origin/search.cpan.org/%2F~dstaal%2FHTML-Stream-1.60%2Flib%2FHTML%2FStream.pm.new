<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>HTML::Stream - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","HTML-Stream",3]);
    _gaq.push(["_setCustomVar",5,"Release","HTML-Stream-1.60",3]);
    _gaq.push(["_setCustomVar",3,"Module","HTML::Stream",3]);
    _gaq.push(["_setCustomVar",1,"Author","DSTAAL",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?HTML::Stream">permalink</a></div>
  <a href="/~dstaal/">Daniel T. Staal</a> &gt;
  <a href="/~dstaal/HTML-Stream-1.60/">HTML-Stream-1.60</a> &gt;
  HTML::Stream
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/e2a1b047218103ad1ed334cf8e0d0a75?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DS/DSTAAL/HTML-Stream-1.60.tar.gz">HTML-Stream-1.60.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=HTML%3A%3AStream;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DSTAAL/HTML-Stream-1.60/lib/HTML/Stream.pm">Annotate this POD
(2)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?XML%3A%3ASimple">XML::Simple</a><br>
<a href="/perldoc?CGI%3A%3ALite">CGI::Lite</a><br>
<a href="/perldoc?Apache%3A%3ARequest">Apache::Request</a><br>
<a href="/perldoc?CGI%3A%3AApplication">CGI::Application</a><br>
<a href="/perldoc?HTML%3A%3ALoL">HTML::LoL</a><br>
<a href="/perldoc?HTML%3A%3AEasyTags">HTML::EasyTags</a><br>
<a href="/perldoc?HTML%3A%3AParser">HTML::Parser</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=HTML%3A%3AStream">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=HTML-Stream">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.60 &nbsp;
<span class="noprint">
  <a href="/src/DSTAAL/HTML-Stream-1.60/lib/HTML/Stream.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#INTRODUCTION_(the_Neapolitan_dessert_special)'>INTRODUCTION (the Neapolitan dessert special)</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Function_interface'>Function interface</a>
    <li class='indexItem indexItem2'><a href='#OO_interface,_vanilla'>OO interface, vanilla</a>
    <li class='indexItem indexItem2'><a href='#OO_interface,_chocolate'>OO interface, chocolate</a>
    <li class='indexItem indexItem2'><a href='#OO_interface,_with_whipped_cream'>OO interface, with whipped cream</a>
    <li class='indexItem indexItem2'><a href='#OO_interface,_strawberry'>OO interface, strawberry</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#ADVANCED_TOPICS'>ADVANCED TOPICS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Auto-formatting_and_inserting_newlines'>Auto-formatting and inserting newlines</a>
    <li class='indexItem indexItem2'><a href='#Entities'>Entities</a>
    <li class='indexItem indexItem2'><a href='#Auto-escaping:_changing_the_way_text_is_escaped'>Auto-escaping: changing the way text is escaped</a>
    <li class='indexItem indexItem2'><a href='#Outputting_HTML_to_things_besides_filehandles'>Outputting HTML to things besides filehandles</a>
    <li class='indexItem indexItem2'><a href='#Subclassing'>Subclassing</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#PUBLIC_INTERFACE'>PUBLIC INTERFACE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Functions'>Functions</a>
    <li class='indexItem indexItem2'><a href='#Vanilla'>Vanilla</a>
    <li class='indexItem indexItem2'><a href='#Strawberry'>Strawberry</a>
    <li class='indexItem indexItem2'><a href='#Chocolate'>Chocolate</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SUBCLASSES'>SUBCLASSES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#HTML::Stream::Latin1'>HTML::Stream::Latin1</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#PERFORMANCE'>PERFORMANCE</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#CHANGE_LOG'>CHANGE LOG</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#ACKNOWLEDGEMENTS'>ACKNOWLEDGEMENTS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>HTML::Stream - HTML output stream class,
and some markup utilities</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Here&#39;s small sample of some of the non-OO ways you can use this module:</p>

<pre class="sh_perl">      use HTML::Stream qw(:funcs);
      
      print html_tag(&#39;A&#39;, HREF=&#62;$link);     
      print html_escape(&#34;&#60;&#60;Hello &#38; welcome!&#62;&#62;&#34;);      </pre>

<p>And some of the OO ways as well:</p>

<pre class="sh_perl">      use HTML::Stream;
      $HTML = new HTML::Stream \*STDOUT;
      
      # The vanilla interface...
      $HTML-&#62;tag(&#39;A&#39;, HREF=&#62;&#34;$href&#34;);
      $HTML-&#62;tag(&#39;IMG&#39;, SRC=&#62;&#34;logo.gif&#34;, ALT=&#62;&#34;LOGO&#34;);
      $HTML-&#62;text($copyright);
      $HTML-&#62;tag(&#39;_A&#39;);
      
      # The chocolate interface...
      $HTML -&#62; A(HREF=&#62;&#34;$href&#34;);
      $HTML -&#62; IMG(SRC=&#62;&#34;logo.gif&#34;, ALT=&#62;&#34;LOGO&#34;);
      $HTML -&#62; t($caption);
      $HTML -&#62; _A;
       
      # The chocolate interface, with whipped cream...
      $HTML -&#62; A(HREF=&#62;&#34;$href&#34;)
            -&#62; IMG(SRC=&#62;&#34;logo.gif&#34;, ALT=&#62;&#34;LOGO&#34;)
            -&#62; t($caption)
            -&#62; _A;

      # The strawberry interface...
      output $HTML [A, HREF=&#62;&#34;$href&#34;], 
                   [IMG, SRC=&#62;&#34;logo.gif&#34;, ALT=&#62;&#34;LOGO&#34;],
                   $caption,
                   [_A];</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <b>HTML::Stream</b> module provides you with an object-oriented (and subclassable) way of outputting HTML. Basically, you open up an &#34;HTML stream&#34; on an existing filehandle, and then do all of your output to the HTML stream. You can intermix HTML-stream-output and ordinary-print-output, if you like.</p>

<p>There&#39;s even a small built-in subclass, <b>HTML::Stream::Latin1</b>, which can handle Latin-1 input right out of the box. But all in good time...</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INTRODUCTION_(the_Neapolitan_dessert_special)"
>INTRODUCTION (the Neapolitan dessert special) <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Function_interface"
>Function interface</a></h2>

<p>Let&#39;s start out with the simple stuff. This module provides a collection of non-OO utility functions for escaping HTML text and producing HTML tags, like this:</p>

<pre class="sh_perl">    use HTML::Stream qw(:funcs);        # imports functions from @EXPORT_OK
    
    print html_tag(A, HREF=&#62;$url);
    print &#39;&#38;copy; 1996 by&#39;, html_escape($myname), &#39;!&#39;;
    print html_tag(&#39;/A&#39;);</pre>

<p>By the way: that last line could be rewritten as:</p>

<pre class="sh_perl">    print html_tag(_A);</pre>

<p>And if you need to get a parameter in your tag that doesn&#39;t have an associated value, supply the <i>undefined</i> value (<i>not</i> the empty string!):</p>

<pre class="sh_perl">    print html_tag(TD, NOWRAP=&#62;undef, ALIGN=&#62;&#39;LEFT&#39;);
    
         &#60;TD NOWRAP ALIGN=LEFT&#62;
    
    print html_tag(IMG, SRC=&#62;&#39;logo.gif&#39;, ALT=&#62;&#39;&#39;);
    
         &#60;IMG SRC=&#34;logo.gif&#34; ALT=&#34;&#34;&#62;</pre>

<p>There are also some routines for reversing the process, like:</p>

<pre class="sh_perl">    $text = &#34;This &#60;i&#62;isn&#39;t&#60;/i&#62; &#38;quot;fun&#38;quot;...&#34;;    
    print html_unmarkup($text);
       
         This isn&#39;t &#38;quot;fun&#38;quot;...
      
    print html_unescape($text);
       
         This isn&#39;t &#34;fun&#34;...</pre>

<p><i>Yeah, yeah, yeah</i>, I hear you cry. <i>We&#39;ve seen this stuff before.</i> But wait! There&#39;s more...</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="OO_interface,_vanilla"
>OO interface, vanilla</a></h2>

<p>Using the function interface can be tedious... so we also provide an <b>&#34;HTML output stream&#34;</b> class. Messages to an instance of that class generally tell that stream to output some HTML. Here&#39;s the above example, rewritten using HTML streams:</p>

<pre class="sh_perl">    use HTML::Stream;
    $HTML = new HTML::Stream \*STDOUT;
    
    $HTML-&#62;tag(A, HREF=&#62;$url);
    $HTML-&#62;ent(&#39;copy&#39;);
    $HTML-&#62;text(&#34; 1996 by $myname!&#34;);
    $HTML-&#62;tag(_A);</pre>

<p>As you&#39;ve probably guessed:</p>

<pre class="sh_perl">    text()   Outputs some text, which will be HTML-escaped.
    
    tag()    Outputs an ordinary tag, like &#60;A&#62;, possibly with parameters.
             The parameters will all be HTML-escaped automatically.
     
    ent()    Outputs an HTML entity, like the &#38;copy; or &#38;lt; .
             You mostly don&#39;t need to use it; you can often just put the 
             Latin-1 representation of the character in the text().</pre>

<p>You might prefer to use <code>t()</code> and <code>e()</code> instead of <code>text()</code> and <code>ent()</code>: they&#39;re absolutely identical, and easier to type:</p>

<pre class="sh_perl">    $HTML -&#62; tag(A, HREF=&#62;$url);
    $HTML -&#62; e(&#39;copy&#39;);
    $HTML -&#62; t(&#34; 1996 by $myname!&#34;);
    $HTML -&#62; tag(_A);</pre>

<p>Now, it wouldn&#39;t be nice to give you those <code>text()</code> and <code>ent()</code> shortcuts without giving you one for <code>tag()</code>, would it? Of course not...</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="OO_interface,_chocolate"
>OO interface, chocolate</a></h2>

<p>The known HTML tags are even given their own <b>tag-methods,</b> compiled on demand. The above code could be written even more compactly as:</p>

<pre class="sh_perl">    $HTML -&#62; A(HREF=&#62;$url);
    $HTML -&#62; e(&#39;copy&#39;);
    $HTML -&#62; t(&#34; 1996 by $myname!&#34;);
    $HTML -&#62; _A;</pre>

<p>As you&#39;ve probably guessed:</p>

<pre class="sh_perl">    A(HREF=&#62;$url)   ==   tag(A, HREF=&#62;$url)   ==   &#60;A HREF=&#34;/the/url&#34;&#62;
    _A              ==   tag(_A)              ==   &#60;/A&#62;</pre>

<p>All of the autoloaded &#34;tag-methods&#34; use the tagname in <i>all-uppercase</i>. A <code>&#34;_&#34;</code> prefix on any tag-method means that an end-tag is desired. The <code>&#34;_&#34;</code> was chosen for several reasons: (1) it&#39;s short and easy to type, (2) it doesn&#39;t produce much visual clutter to look at, (3) <code>_TAG</code> looks a little like <code>/TAG</code> because of the straight line.</p>

<ul>
<li><i>I know, I know... it looks like a private method. You get used to it. Really.</i></li>
</ul>

<p>I should stress that this module will only auto-create tag methods for <b>known</b> HTML tags. So you&#39;re protected from typos like this (which will cause a fatal exception at run-time):</p>

<pre class="sh_perl">    $HTML -&#62; IMGG(SRC=&#62;$src);</pre>

<p>(You&#39;re not yet protected from illegal tag parameters, but it&#39;s a start, ain&#39;t it?)</p>

<p>If you need to make a tag known (sorry, but this is currently a <i>global</i> operation, and not stream-specific), do this:</p>

<pre class="sh_perl">    accept_tag HTML::Stream &#39;MARQUEE&#39;;       # for you MSIE fans...</pre>

<p><b>Note: there is no corresponding &#34;reject_tag&#34;.</b> I thought and thought about it, and could not convince myself that such a method would do anything more useful than cause other people&#39;s modules to suddenly stop working because some bozo function decided to reject the <code>FONT</code> tag.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="OO_interface,_with_whipped_cream"
>OO interface, with whipped cream</a></h2>

<p>In the grand tradition of C++, output method chaining is supported in both the Vanilla Interface and the Chocolate Interface. So you can (and probably should) write the above code as:</p>

<pre class="sh_perl">    $HTML -&#62; A(HREF=&#62;$url) 
          -&#62; e(&#39;copy&#39;) -&#62; t(&#34; 1996 by $myname!&#34;) 
          -&#62; _A;</pre>

<p><i>But wait! Neapolitan ice cream has one more flavor...</i></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="OO_interface,_strawberry"
>OO interface, strawberry</a></h2>

<p>I was jealous of the compact syntax of HTML::AsSubs, but I didn&#39;t want to worry about clogging the namespace with a lot of functions like p(), a(), etc. (especially when markup-functions like tr() conflict with existing Perl functions). So I came up with this:</p>

<pre class="sh_perl">    output $HTML [A, HREF=&#62;$url], &#34;Here&#39;s my $caption&#34;, [_A];</pre>

<p>Conceptually, arrayrefs are sent to <code>html_tag()</code>, and strings to <code>html_escape()</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ADVANCED_TOPICS"
>ADVANCED TOPICS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Auto-formatting_and_inserting_newlines"
>Auto-formatting and inserting newlines</a></h2>

<p><i>Auto-formatting</i> is the name I give to the Chocolate Interface feature whereby newlines (and maybe, in the future, other things) are inserted before or after the tags you output in order to make your HTML more readable. So, by default, this:</p>

<pre class="sh_perl">    $HTML -&#62; HTML 
          -&#62; HEAD  
          -&#62; TITLE -&#62; t(&#34;Hello!&#34;) -&#62; _TITLE 
          -&#62; _HEAD
          -&#62; BODY(BGCOLOR=&#62;&#39;#808080&#39;);</pre>

<p>Actually produces this:</p>

<pre class="sh_perl">    &#60;HTML&#62;&#60;HTML&#62;
    &#60;HEAD&#62;
    &#60;TITLE&#62;Hello!&#60;/TITLE&#62;
    &#60;/HEAD&#62;
    &#60;BODY BGCOLOR=&#34;#808080&#34;&#62;</pre>

<p><b>To turn off autoformatting altogether</b> on a given HTML::Stream object, use the <code>auto_format()</code> method:</p>

<pre class="sh_perl">    $HTML-&#62;auto_format(0);        # stop autoformatting!</pre>

<p><b>To change whether a newline is automatically output</b> before/after the begin/end form of a tag at a <b>global</b> level, use <code>set_tag()</code>:</p>

<pre class="sh_perl">    HTML::Stream-&#62;set_tag(&#39;B&#39;, Newlines=&#62;15);   # 15 means &#34;\n&#60;B&#62;\n \n&#60;/B&#62;\n&#34;
    HTML::Stream-&#62;set_tag(&#39;I&#39;, Newlines=&#62;7);    # 7 means  &#34;\n&#60;I&#62;\n \n&#60;/I&#62;  &#34;</pre>

<p><b>To change whether a newline is automatically output</b> before/after the begin/end form of a tag <b>for a given stream</b> level, give the stream its own private &#34;tag info&#34; table, and then use <code>set_tag()</code>:</p>

<pre class="sh_perl">    $HTML-&#62;private_tags;
    $HTML-&#62;set_tag(&#39;B&#39;, Newlines=&#62;0);     # won&#39;t affect anyone else!</pre>

<p><b>To output newlines explicitly</b>, just use the special <code>nl</code> method in the Chocolate Interface:</p>

<pre class="sh_perl">    $HTML-&#62;nl;     # one newline
    $HTML-&#62;nl(6);  # six newlines</pre>

<p>I am sometimes asked, &#34;why don&#39;t you put more newlines in automatically?&#34; Well, mostly because...</p>

<ul>
<li>Sometimes you&#39;ll be outputting stuff inside a <code>PRE</code> environment.</li>

<li>Sometimes you really do want to jam things (like images, or table cell delimiters and the things they contain) right up against each other.</li>
</ul>

<p>So I&#39;ve stuck to outputting newlines in places where it&#39;s most likely to be harmless.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Entities"
>Entities</a></h2>

<p>As shown above, You can use the <code>ent()</code> (or <code>e()</code>) method to output an entity:</p>

<pre class="sh_perl">    $HTML-&#62;t(&#39;Copyright &#39;)-&#62;e(&#39;copy&#39;)-&#62;t(&#39; 1996 by Me!&#39;);</pre>

<p>But this can be a pain, particularly for generating output with non-ASCII characters:</p>

<pre class="sh_perl">    $HTML -&#62; t(&#39;Copyright &#39;) 
          -&#62; e(&#39;copy&#39;) 
          -&#62; t(&#39; 1996 by Fran&#39;) -&#62; e(&#39;ccedil&#39;) -&#62; t(&#39;ois, Inc.!&#39;);</pre>

<p>Granted, Europeans can always type the 8-bit characters directly in their Perl code, and just have this:</p>

<pre class="sh_perl">    $HTML -&#62; t(&#34;Copyright \251 1996 by Fran\347ois, Inc.!&#39;);</pre>

<p>But folks without 8-bit text editors can find this kind of output cumbersome to generate. Sooooooooo...</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Auto-escaping:_changing_the_way_text_is_escaped"
>Auto-escaping: changing the way text is escaped</a></h2>

<p><i>Auto-escaping</i> is the name I give to the act of taking an &#34;unsafe&#34; string (one with &#34;&#62;&#34;, &#34;&#38;&#34;, etc.), and magically outputting &#34;safe&#34; HTML.</p>

<p>The default &#34;auto-escape&#34; behavior of an HTML stream can be a drag if you&#39;ve got a lot character entities that you want to output, or if you&#39;re using the Latin-1 character set, or some other input encoding. Fortunately, you can use the <code>auto_escape()</code> method to change the way a particular HTML::Stream works at any time.</p>

<p>First, here&#39;s a couple of special invocations:</p>

<pre class="sh_perl">    $HTML-&#62;auto_escape(&#39;ALL&#39;);      # Default; escapes [&#60;&#62;&#34;&#38;] and 8-bit chars.
    $HTML-&#62;auto_escape(&#39;LATIN_1&#39;);  # Like ALL, but uses Latin-1 entities
                                    #   instead of decimal equivalents.
    $HTML-&#62;auto_escape(&#39;NON_ENT&#39;);  # Like ALL, but leaves &#34;&#38;&#34; alone.</pre>

<p>You can also install your own auto-escape function (note that you might very well want to install it for just a little bit only, and then de-install it):</p>

<pre class="sh_perl">    sub my_auto_escape {
        my $text = shift;
        HTML::Entities::encode($text);     # start with default
        $text =~ s/\(c\)/&#38;copy;/ig;        # (C) becomes copyright
        $text =~ s/\\,(c)/\&#38;$1cedil;/ig;   # \,c becomes a cedilla
        $text;
    }
    
    # Start using my auto-escape:
    my $old_esc = $HTML-&#62;auto_escape(\&#38;my_auto_escape);  
    
    # Output some stuff:
    $HTML-&#62; IMG(SRC=&#62;&#39;logo.gif&#39;, ALT=&#62;&#39;Fran\,cois, Inc&#39;);
    output $HTML &#39;Copyright (C) 1996 by Fran\,cois, Inc.!&#39;;
    
    # Stop using my auto-escape:
    $HTML-&#62;auto_escape($old_esc);</pre>

<p>If you find yourself in a situation where you&#39;re doing this a lot, a better way is to create a <b>subclass</b> of HTML::Stream which installs your custom function when constructed. For an example, see the <b>HTML::Stream::Latin1</b> subclass in this module.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Outputting_HTML_to_things_besides_filehandles"
>Outputting HTML to things besides filehandles</a></h2>

<p>As of Revision 1.21, you no longer need to supply <code>new()</code> with a filehandle: <i>any object that responds to a print() method will do</i>. Of course, this includes <b>blessed</b> FileHandles, and IO::Handles.</p>

<p>If you supply a GLOB reference (like <code>\*STDOUT</code>) or a string (like <code>&#34;Module::FH&#34;</code>), HTML::Stream will automatically create an invisible object for talking to that filehandle (I don&#39;t dare bless it into a FileHandle, since the underlying descriptor would get closed when the HTML::Stream is destroyed, and you might not want that).</p>

<p>You say you want to print to a string? For kicks and giggles, try this:</p>

<pre class="sh_perl">    package StringHandle;
    sub new {
        my $self = &#39;&#39;;
        bless \$self, shift;
    }
    sub print {
        my $self = shift;
        $$self .= join(&#39;&#39;, @_);
    }
    
  
    package main;
    use HTML::Stream;
    
    my $SH = new StringHandle;
    my $HTML = new HTML::Stream $SH;
    $HTML -&#62; H1 -&#62; t(&#34;Hello &#38; &#60;&#60;welcome&#62;&#62;!&#34;) -&#62; _H1;
    print &#34;PRINTED STRING: &#34;, $$SH, &#34;\n&#34;;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Subclassing"
>Subclassing</a></h2>

<p>This is where you can make your application-specific HTML-generating code <i>much</i> easier to look at. Consider this:</p>

<pre class="sh_perl">    package MY::HTML;
    @ISA = qw(HTML::Stream);
     
    sub Aside {
        $_[0] -&#62; FONT(SIZE=&#62;-1) -&#62; I;
    }
    sub _Aside {
        $_[0] -&#62; _I -&#62; _FONT;
    }</pre>

<p>Now, you can do this:</p>

<pre class="sh_perl">    my $HTML = new MY::HTML \*STDOUT;
    
    $HTML -&#62; Aside
          -&#62; t(&#34;Don&#39;t drink the milk, it&#39;s spoiled... pass it on...&#34;)
          -&#62; _Aside;</pre>

<p>If you&#39;re defining these markup-like, chocolate-interface-style functions, I recommend using mixed case with a leading capital. You probably shouldn&#39;t use all-uppercase, since that&#39;s what this module uses for real HTML tags.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PUBLIC_INTERFACE"
>PUBLIC INTERFACE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Functions"
>Functions</a></h2>

<dl>
<dt><a name='html_escape'></a><a name="html_escape_TEXT"
>html_escape TEXT</a></dt>

<dd>
<p>Given a TEXT string, turn the text into valid HTML by escaping &#34;unsafe&#34; characters. Currently, the &#34;unsafe&#34; characters are 8-bit characters plus:</p>

<pre class="sh_perl">    &#60;  &#62;  =  &#38;</pre>

<p><b>Note:</b> provided for convenience and backwards-compatibility only. You may want to use the more-powerful <b>HTML::Entities::encode</b> function instead.</p>

<dt><a name='html_tag'></a><a name="html_tag_TAG_[,_PARAM=&#62;VALUE,_...]"
>html_tag TAG [, PARAM=&#62;VALUE, ...]</a></dt>

<dd>
<p>Return the text for a given TAG, possibly with parameters. As an efficiency hack, only the values are HTML-escaped currently: it is assumed that the tag and parameters will already be safe.</p>

<p>For convenience and readability, you can say <code>_A</code> instead of <code>&#34;/A&#34;</code> for the first tag, if you&#39;re into barewords.</p>

<dt><a name='html_unescape'></a><a name="html_unescape_TEXT"
>html_unescape TEXT</a></dt>

<dd>
<p>Remove angle-tag markup, and convert the standard ampersand-escapes (<code>lt</code>, <code>gt</code>, <code>amp</code>, <code>quot</code>, and <code>#ddd</code>) into ASCII characters.</p>

<p><b>Note:</b> provided for convenience and backwards-compatibility only. You may want to use the more-powerful <b>HTML::Entities::decode</b> function instead: unlike this function, it can collapse entities like <code>copy</code> and <code>ccedil</code> into their Latin-1 byte values.</p>

<dt><a name='html_unmarkup'></a><a name="html_unmarkup_TEXT"
>html_unmarkup TEXT</a></dt>

<dd>
<p>Remove angle-tag markup from TEXT, but do not convert ampersand-escapes. Cheesy, but theoretically useful if you want to, say, incorporate externally-provided HTML into a page you&#39;re generating, and are worried that the HTML might contain undesirable markup.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Vanilla"
>Vanilla</a></h2>

<dl>
<dt><a name='new'></a><a name="new_[PRINTABLE]"
>new [PRINTABLE]</a></dt>

<dd>
<p><i>Class method.</i> Create a new HTML output stream.</p>

<p>The PRINTABLE may be a FileHandle, a glob reference, or any object that responds to a <code>print()</code> message. If no PRINTABLE is given, does a select() and uses that.</p>

<dt><a name='auto_escape'></a><a name="auto_escape_[NAME|SUBREF]"
>auto_escape [NAME|SUBREF]</a></dt>

<dd>
<p><i>Instance method.</i> Set the auto-escape function for this HTML stream.</p>

<p>If the argument is a subroutine reference SUBREF, then that subroutine will be used. Declare such subroutines like this:</p>

<pre class="sh_perl">    sub my_escape {
        my $text = shift;     # it&#39;s passed in the first argument
        ...
        $text;
    }</pre>

<p>If a textual NAME is given, then one of the appropriate built-in functions is used. Possible values are:</p>

<dl>
<dt><a name="ALL"
>ALL</a></dt>

<dd>
<p>Default for HTML::Stream objects. This escapes angle brackets, ampersands, double-quotes, and 8-bit characters. 8-bit characters are escaped using decimal entity codes (like <code>#123</code>).</p>

<dt><a name="LATIN_1"
>LATIN_1</a></dt>

<dd>
<p>Like <code>&#34;ALL&#34;</code>, but uses Latin-1 entity names (like <code>ccedil</code>) instead of decimal entity codes to escape characters. This makes the HTML more readable but it is currently not advised, as &#34;older&#34; browsers (like Netscape 2.0) do not recognize many of the ISO-8859-1 entity names (like <code>deg</code>).</p>

<p><b>Warning:</b> If you specify this option, you&#39;ll find that it attempts to &#34;require&#34; <b>HTML::Entities</b> at run time. That&#39;s because I didn&#39;t want to <i>force</i> you to have that module just to use the rest of HTML::Stream. To pick up problems at compile time, you are advised to say:</p>

<pre class="sh_perl">    use HTML::Stream;
    use HTML::Entities;</pre>

<p>in your source code.</p>

<dt><a name="NON_ENT"
>NON_ENT</a></dt>

<dd>
<p>Like <code>&#34;ALL&#34;</code>, except that ampersands (&#38;) are <i>not</i> escaped. This allows you to use &#38;-entities in your text strings, while having everything else safely escaped:</p>

<pre class="sh_perl">    output $HTML &#34;If A is an acute angle, then A &#62; 90&#38;deg;&#34;;</pre>
</dd>
</dl>

<p>Returns the previously-installed function, in the manner of <code>select()</code>. No arguments just returns the currently-installed function.</p>

<dt><a name='auto_format'></a><a name="auto_format_ONOFF"
>auto_format ONOFF</a></dt>

<dd>
<p><i>Instance method.</i> Set the auto-formatting characteristics for this HTML stream. Currently, all you can do is supply a single defined boolean argument, which turns auto-formatting ON (1) or OFF (0). The self object is returned.</p>

<p>Please use no other values; they are reserved for future use.</p>

<dt><a name='comment'></a><a name="comment_COMMENT"
>comment COMMENT</a></dt>

<dd>
<p><i>Instance method.</i> Output an HTML comment. As of 1.29, a newline is automatically appended.</p>

<dt><a name='ent'></a><a name="ent_ENTITY"
>ent ENTITY</a></dt>

<dd>
<p><i>Instance method.</i> Output an HTML entity. For example, here&#39;s how you&#39;d output a non-breaking space:</p>

<pre class="sh_perl">      $html-&#62;ent(&#39;nbsp&#39;);</pre>

<p>You may abbreviate this method name as <code>e</code>:</p>

<pre class="sh_perl">      $html-&#62;e(&#39;nbsp&#39;);</pre>

<p><b>Warning:</b> this function assumes that the entity argument is legal.</p>

<dt><a name="io"
>io</a></dt>

<dd>
<p>Return the underlying output handle for this HTML stream. All you can depend upon is that it is some kind of object which responds to a print() message:</p>

<pre class="sh_perl">    $HTML-&#62;io-&#62;print(&#34;This is not auto-escaped or nuthin!&#34;);</pre>

<dt><a name='nl'></a><a name="nl_[COUNT]"
>nl [COUNT]</a></dt>

<dd>
<p><i>Instance method.</i> Output COUNT newlines. If undefined, COUNT defaults to 1.</p>

<dt><a name='tag'></a><a name="tag_TAGNAME_[,_PARAM=&#62;VALUE,_...]"
>tag TAGNAME [, PARAM=&#62;VALUE, ...]</a></dt>

<dd>
<p><i>Instance method.</i> Output a tag. Returns the self object, to allow method chaining. You can say <code>_A</code> instead of <code>&#34;/A&#34;</code>, if you&#39;re into barewords.</p>

<dt><a name='text'></a><a name="text_TEXT..."
>text TEXT...</a></dt>

<dd>
<p><i>Instance method.</i> Output some text. You may abbreviate this method name as <code>t</code>:</p>

<pre class="sh_perl">      $html-&#62;t(&#39;Hi there, &#39;, $yournamehere, &#39;!&#39;);</pre>

<p>Returns the self object, to allow method chaining.</p>

<dt><a name='text_nbsp'></a><a name="text_nbsp_TEXT..."
>text_nbsp TEXT...</a></dt>

<dd>
<p><i>Instance method.</i> Output some text, but with all spaces output as non-breaking-space characters:</p>

<pre class="sh_perl">      $html-&#62;t(&#34;To list your home directory, type: &#34;)
           -&#62;text_nbsp(&#34;ls -l ~yourname.&#34;)</pre>

<p>Returns the self object, to allow method chaining.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Strawberry"
>Strawberry</a></h2>

<dl>
<dt><a name='output'></a><a name="output_ITEM,...,ITEM"
>output ITEM,...,ITEM</a></dt>

<dd>
<p><i>Instance method.</i> Go through the items. If an item is an arrayref, treat it like the array argument to html_tag() and output the result. If an item is a text string, escape the text and output the result. Like this:</p>

<pre class="sh_perl">     output $HTML [A, HREF=&#62;$url], &#34;Here&#39;s my $caption!&#34;, [_A];</pre>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Chocolate"
>Chocolate</a></h2>

<dl>
<dt><a name='accept_tag'></a><a name="accept_tag_TAG"
>accept_tag TAG</a></dt>

<dd>
<p><i>Class method.</i> Declares that the tag is to be accepted as valid HTML (if it isn&#39;t already). For example, this...</p>

<pre class="sh_perl">     # Make sure methods MARQUEE and _MARQUEE are compiled on demand:
     HTML::Stream-&#62;accept_tag(&#39;MARQUEE&#39;); </pre>

<p>...gives the Chocolate Interface permission to create (via AUTOLOAD) definitions for the MARQUEE and _MARQUEE methods, so you can then say:</p>

<pre class="sh_perl">     $HTML -&#62; MARQUEE -&#62; t(&#34;Hi!&#34;) -&#62; _MARQUEE;</pre>

<p>If you want to set the default attribute of the tag as well, you can do so via the set_tag() method instead; it will effectively do an accept_tag() as well.</p>

<pre class="sh_perl">     # Make sure methods MARQUEE and _MARQUEE are compiled on demand,
     #   *and*, set the characteristics of that tag.
     HTML::Stream-&#62;set_tag(&#39;MARQUEE&#39;, Newlines=&#62;9);</pre>

<dt><a name="private_tags"
>private_tags</a></dt>

<dd>
<p><i>Instance method.</i> Normally, HTML streams use a reference to a global table of tag information to determine how to do such things as auto-formatting, and modifications made to that table by <code>set_tag</code> will affect everyone.</p>

<p>However, if you want an HTML stream to have a private copy of that table to munge with, just send it this message after creating it. Like this:</p>

<pre class="sh_perl">    my $HTML = new HTML::Stream \*STDOUT;
    $HTML-&#62;private_tags;</pre>

<p>Then, you can say stuff like:</p>

<pre class="sh_perl">    $HTML-&#62;set_tag(&#39;PRE&#39;,   Newlines=&#62;0);
    $HTML-&#62;set_tag(&#39;BLINK&#39;, Newlines=&#62;9);</pre>

<p>And it won&#39;t affect anyone else&#39;s <i>auto-formatting</i> (although they will possibly be able to use the BLINK tag method without a fatal exception <code>:-(</code> ).</p>

<p>Returns the self object.</p>

<dt><a name='set_tag'></a><a name="set_tag_TAG,_[TAGINFO...]"
>set_tag TAG, [TAGINFO...]</a></dt>

<dd>
<p><i>Class/instance method.</i> Accept the given TAG in the Chocolate Interface, and (if TAGINFO is given) alter its characteristics when being output.</p>

<ul>
<li><b>If invoked as a class method,</b> this alters the &#34;master tag table&#34;, and allows a new tag to be supported via an autoloaded method:
<pre class="sh_perl">     HTML::Stream-&#62;set_tag(&#39;MARQUEE&#39;, Newlines=&#62;9);</pre>

<p>Once you do this, <i>all</i> HTML streams you open from then on will allow that tag to be output in the chocolate interface.</p>
</li>

<li><b>If invoked as an instance method,</b> this alters the &#34;tag table&#34; referenced by that HTML stream, usually for the purpose of affecting things like the auto-formatting on that HTML stream.
<p><b>Warning:</b> by default, an HTML stream just references the &#34;master tag table&#34; (this makes <code>new()</code> more efficient), so <i>by default, the instance method will behave exactly like the class method.</i></p>

<pre class="sh_perl">     my $HTML = new HTML::Stream \*STDOUT;
     $HTML-&#62;set_tag(&#39;BLINK&#39;, Newlines=&#62;0);  # changes it for others!</pre>

<p>If you want to diddle with <i>one</i> stream&#39;s auto-formatting <i>only,</i> you&#39;ll need to give that stream its own <i>private</i> tag table. Like this:</p>

<pre class="sh_perl">     my $HTML = new HTML::Stream \*STDOUT;
     $HTML-&#62;private_tags;
     $HTML-&#62;set_tag(&#39;BLINK&#39;, Newlines=&#62;0);  # doesn&#39;t affect other streams</pre>

<p><b>Note:</b> this will still force an default entry for BLINK in the <i>master</i> tag table: otherwise, we&#39;d never know that it was legal to AUTOLOAD a BLINK method. However, it will only alter the <i>characteristics</i> of the BLINK tag (like auto-formatting) in the <i>object&#39;s</i> tag table.</p>
</li>
</ul>

<p>The TAGINFO, if given, is a set of key=&#62;value pairs with the following possible keys:</p>

<dl>
<dt><a name="Newlines"
>Newlines</a></dt>

<dd>
<p>Assumed to be a number which encodes how newlines are to be output before/after a tag. The value is the logical OR (or sum) of a set of flags:</p>

<pre class="sh_perl">     0x01    newline before &#60;TAG&#62;         .&#60;TAG&#62;.     .&#60;/TAG&#62;.    
     0x02    newline after &#60;TAG&#62;          |     |     |      |
     0x04    newline before &#60;/TAG&#62;        1     2     4      8
     0x08    newline after &#60;/TAG&#62;    </pre>

<p>Hence, to output BLINK environments which are preceded/followed by newlines:</p>

<pre class="sh_perl">     set_tag HTML::Stream &#39;BLINK&#39;, Newlines=&#62;9;</pre>
</dd>
</dl>

<p>Returns the self object on success.</p>

<dt><a name="tags"
>tags</a></dt>

<dd>
<p><i>Class/instance method.</i> Returns an unsorted list of all tags in the class/instance tag table (see <code>set_tag</code> for class/instance method differences).</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUBCLASSES"
>SUBCLASSES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="HTML::Stream::Latin1"
>HTML::Stream::Latin1</a></h2>

<p>A small, public package for outputting Latin-1 markup. Its default auto-escape function is <code>LATIN_1</code>, which tries to output the mnemonic entity markup (e.g., <code>&#38;ccedil;</code>) for ISO-8859-1 characters.</p>

<p>So using HTML::Stream::Latin1 like this:</p>

<pre class="sh_perl">    use HTML::Stream;
    
    $HTML = new HTML::Stream::Latin1 \*STDOUT;
    output $HTML &#34;\253A right angle is 90\260, \277No?\273\n&#34;;</pre>

<p>Prints this:</p>

<pre class="sh_perl">    &#38;laquo;A right angle is 90&#38;deg;, &#38;iquest;No?&#38;raquo;</pre>

<p>Instead of what HTML::Stream would print, which is this:</p>

<pre class="sh_perl">    &#38;#171;A right angle is 90&#38;#176;, &#38;#191;No?&#38;#187;</pre>

<p><b>Warning:</b> a lot of Latin-1 HTML markup is not recognized by older browsers (e.g., Netscape 2.0). Consider using HTML::Stream; it will output the decimal entities which currently seem to be more &#34;portable&#34;.</p>

<p><b>Note:</b> using this class &#34;requires&#34; that you have HTML::Entities.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PERFORMANCE"
>PERFORMANCE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Slower than I&#39;d like. Both the output() method and the various &#34;tag&#34; methods seem to run about 5 times slower than the old just-hardcode-the-darn stuff approach. That is, in general, this:</p>

<pre class="sh_perl">    ### Approach #1...
    tag  $HTML &#39;A&#39;, HREF=&#62;&#34;$href&#34;;
    tag  $HTML &#39;IMG&#39;, SRC=&#62;&#34;logo.gif&#34;, ALT=&#62;&#34;LOGO&#34;;
    text $HTML $caption;
    tag  $HTML &#39;_A&#39;;
    text $HTML $a_lot_of_text;</pre>

<p>And this:</p>

<pre class="sh_perl">    ### Approach #2...
    output $HTML [A, HREF=&#62;&#34;$href&#34;], 
                 [IMG, SRC=&#62;&#34;logo.gif&#34;, ALT=&#62;&#34;LOGO&#34;],
                 $caption,
                 [_A];
    output $HTML $a_lot_of_text;</pre>

<p>And this:</p>

<pre class="sh_perl">    ### Approach #3...
    $HTML -&#62; A(HREF=&#62;&#34;$href&#34;)
          -&#62; IMG(SRC=&#62;&#34;logo.gif&#34;, ALT=&#62;&#34;LOGO&#34;)
          -&#62; t($caption)
          -&#62; _A
          -&#62; t($a_lot_of_text);</pre>

<p>Each run about 5x slower than this:</p>

<pre class="sh_perl">    ### Approach #4...
    print &#39;&#60;A HREF=&#34;&#39;, html_escape($href), &#39;&#62;&#39;,
          &#39;&#60;IMG SRC=&#34;logo.gif&#34; ALT=&#34;LOGO&#34;&#62;&#39;,
          html_escape($caption),
          &#39;&#60;/A&#62;&#39;;
    print html_escape($a_lot_of_text);</pre>

<p>Of course, I&#39;d much rather use any of first three <i>(especially #3)</i> if I had to get something done right in a hurry. Or did you not notice the typo in approach #4? <code>;-)</code></p>

<p>(BTW, thanks to Benchmark:: for allowing me to... er... benchmark stuff.)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>$Id: Stream.pm,v 1.60 2008/08/06 dstaal Exp $</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CHANGE_LOG"
>CHANGE LOG <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='Version'></a><a name="Version_1.60_(2008/08/06)"
>Version 1.60 (2008/08/06)</a></dt>

<dd>
<p>Fixed up the tests some more, updated changelog. (Which I&#39;d forgotten about...)</p>

<dt><a name='Version'></a><a name="Version_1.59_(2008/06/01)"
>Version 1.59 (2008/06/01)</a></dt>

<dd>
<p>Better tests, better Meta.yml.</p>

<dt><a name='Version'></a><a name="Version_1.58_(2008/05/28)"
>Version 1.58 (2008/05/28)</a></dt>

<dd>
<p>Another attempt at cleanup, as well expanding the Meta.yml file.</p>

<dt><a name='Version'></a><a name="Version_1.57_(2008/05/28)"
>Version 1.57 (2008/05/28)</a></dt>

<dd>
<p>Cleaned up the Mac-specific files that were getting created in the archive.</p>

<dt><a name='Version'></a><a name="Version_1.56_(2008/05/27)"
>Version 1.56 (2008/05/27)</a></dt>

<dd>
<p>Added the start of a testing suite. In the process, I found an error: HTML defines the tag &#39;NOFRAMES&#39;, not &#39;NOFRAME&#39;. Both are currently in the tag list, but consider &#39;NOFRAME&#39; depriciated.</p>

<p>The test suite requires Test::More and Test::Output.</p>

<dt><a name='Version'></a><a name="Version_1.55_(2003/10/28)"
>Version 1.55 (2003/10/28)</a></dt>

<dd>
<p>New maintainer: Daniel T. Staal. No major changes in the code, except to complete the tag list to HTML 4.01 specifications. (With the exception of the &#39;S&#39; tag, which I want to test, and is depreciated anyway. Note that the DOCTYPE is not actually a HTML tag, and is not currently included.)</p>

<dt><a name='Version'></a><a name="Version_1.54_(2001/08/20)"
>Version 1.54 (2001/08/20)</a></dt>

<dd>
<p>The terms-of-use have been placed in the distribution file &#34;COPYING&#34;. Also, small documentation tweaks were made.</p>

<dt><a name='Version'></a><a name="Version_1.51_(2001/08/16)"
>Version 1.51 (2001/08/16)</a></dt>

<dd>
<p>No real changes to code; just improved documentation, and removed HTML::Entities and HTML::Parser from ./etc at CPAN&#39;s request.</p>

<dt><a name='Version'></a><a name="Version_1.47_(2000/06/10)"
>Version 1.47 (2000/06/10)</a></dt>

<dd>
<p>No real changes to code; just improved documentation.</p>

<dt><a name='Version'></a><a name="Version_1.45_(1999/02/09)"
>Version 1.45 (1999/02/09)</a></dt>

<dd>
<p>Cleanup for Perl 5.005: removed duplicate typeglob assignments.</p>

<dt><a name='Version'></a><a name="Version_1.44_(1998/01/14)"
>Version 1.44 (1998/01/14)</a></dt>

<dd>
<p>Win95 install (5.004) now works. Added SYNOPSIS to POD.</p>

<dt><a name='Version'></a><a name="Version_1.41_(1998/01/02)"
>Version 1.41 (1998/01/02)</a></dt>

<dd>
<p>Removed $&#38; for efficiency. <i>Thanks, Andreas!</i></p>

<p>Added support for OPTION, and default now puts newlines after SELECT and /SELECT. Also altered &#34;TELEM&#34; syntax to put newline after end-tags of list element tags (like /OPTION, /LI, etc.). In theory, this change could produce undesireable results for folks who embed lists inside of PRE environments... however, that kind of stuff was done in the days before TABLEs; also, you can always turn it off if you really need to. <i>Thanks to John D Groenveld for these patches.</i></p>

<p>Added text_nbsp(). <i>Thanks to John D Groenveld for the patch.</i> This method may also be invoked as nbsp_text() as in the original patch, but that&#39;s sort of a private tip-of-the-hat to the patch author, and the synonym may go away in the future.</p>

<dt><a name='Version'></a><a name="Version_1.37_(1997/02/09)"
>Version 1.37 (1997/02/09)</a></dt>

<dd>
<p>No real change; just trying to make CPAN.pm happier.</p>

<dt><a name='Version'></a><a name="Version_1.32_(1997/01/12)"
>Version 1.32 (1997/01/12)</a></dt>

<dd>
<p><b>NEW TOOL for generating Perl code which uses HTML::Stream!</b> Check your toolkit for <b>html2perlstream</b>.</p>

<p>Added built-in support for escaping 8-bit characters.</p>

<p>Added <code>LATIN_1</code> auto-escape, which uses HTML::Entities to generate mnemonic entities. This is now the default method for HTML::Stream::Latin1.</p>

<p>Added <code>auto_format(),</code> so you can now turn auto-formatting off/on.</p>

<p>Added <code>private_tags()</code>, so it is now possible for HTML streams to each have their own &#34;private&#34; copy of the %Tags table, for use by <code>set_tag()</code>.</p>

<p>Added <code>set_tag()</code>. The tags tables may now be modified dynamically so as to change how formatting is done on-the-fly. This will hopefully not compromise the efficiency of the chocolate interface (until now, the formatting was compiled into the method itself), and <i>will</i> add greater flexibility for more-complex programs.</p>

<p>Added POD documentation for all subroutines in the public interface.</p>

<dt><a name='Version'></a><a name="Version_1.29_(1996/12/10)"
>Version 1.29 (1996/12/10)</a></dt>

<dd>
<p>Added terminating newline to comment(). <i>Thanks to John D Groenveld for the suggestion and the patch.</i></p>

<dt><a name='Version'></a><a name="Version_1.27_(1996/12/10)"
>Version 1.27 (1996/12/10)</a></dt>

<dd>
<p>Added built-in HTML::Stream::Latin1, which does a very simple encoding of all characters above ASCII 127.</p>

<p>Fixed bug in accept_tag(), where &#39;my&#39; variable was shadowing argument. <i>Thanks to John D Groenveld for the bug report and the patch.</i></p>

<dt><a name='Version'></a><a name="Version_1.26_(1996/09/27)"
>Version 1.26 (1996/09/27)</a></dt>

<dd>
<p>Start of history.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This program is free software. You may copy or redistribute it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACKNOWLEDGEMENTS"
>ACKNOWLEDGEMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Warmest thanks to...</p>

<pre class="sh_perl">    Eryq                   For writing the orginal version of this module.

    John Buckman           For suggesting that I write an &#34;html2perlstream&#34;,
                           and inspiring me to look at supporting Latin-1.
    Tony Cebzanov          For suggesting that I write an &#34;html2perlstream&#34;
    John D Groenveld       Bug reports, patches, and suggestions
    B. K. Oxley (binkley)  For suggesting the support of &#34;writing to strings&#34;
                           which became the &#34;printable&#34; interface.</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Daniel T. Staal (<em>DStaal@usa.net</em>).</p>

<p>Enjoy. Yell if it breaks.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78269 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 22:38:47 2012 GMT (0.322050094604492) @cpansearch1 -->
 </body>
</html>
