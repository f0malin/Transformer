<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Set::Array - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Set-Array",3]);
    _gaq.push(["_setCustomVar",5,"Release","Set-Array-0.26",3]);
    _gaq.push(["_setCustomVar",3,"Module","Set::Array",3]);
    _gaq.push(["_setCustomVar",1,"Author","RSAVAGE",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Set::Array">permalink</a></div>
  <a href="/~rsavage/">Ron Savage</a> &gt;
  <a href="/~rsavage/Set-Array-0.26/">Set-Array-0.26</a> &gt;
  Set::Array
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/6dffb4a7f8901481b1395ebaa4a45edf?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/R/RS/RSAVAGE/Set-Array-0.26.tgz">Set-Array-0.26.tgz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Set%3A%3AArray;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~RSAVAGE/Set-Array-0.26/lib/Set/Array.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Set%3A%3AScalar">Set::Scalar</a><br>
<a href="/perldoc?List%3A%3ACompare">List::Compare</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Tie%3A%3AHash%3A%3ARegex">Tie::Hash::Regex</a><br>
<a href="/perldoc?List%3A%3AUtil">List::Util</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Set%3A%3AArray">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Set-Array">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.26 &nbsp;
<span class="noprint">
  <a href="/src/RSAVAGE/Set-Array-0.26/lib/Set/Array.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#PREREQUISITES'>PREREQUISITES</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#OBJECT_BEHAVIOR'>OBJECT BEHAVIOR</a>
  <li class='indexItem indexItem1'><a href='#BOOLEAN_METHODS'>BOOLEAN METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#exists([val])'>exists([val])</a>
    <li class='indexItem indexItem2'><a href='#is_empty()'>is_empty()</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#STANDARD_METHODS'>STANDARD METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#at(index)'>at(index)</a>
    <li class='indexItem indexItem2'><a href='#clear([1])'>clear([1])</a>
    <li class='indexItem indexItem2'><a href='#compact()'>compact()</a>
    <li class='indexItem indexItem2'><a href='#count([val])'>count([val])</a>
    <li class='indexItem indexItem2'><a href='#cpop()'>cpop()</a>
    <li class='indexItem indexItem2'><a href='#cshift()'>cshift()</a>
    <li class='indexItem indexItem2'><a href='#delete(@list)'>delete(@list)</a>
    <li class='indexItem indexItem2'><a href='#delete_at(index,_[index])'>delete_at(index, [index])</a>
    <li class='indexItem indexItem2'><a href='#difference($one,_$two)'>difference($one, $two)</a>
    <li class='indexItem indexItem2'><a href='#duplicates()'>duplicates()</a>
    <li class='indexItem indexItem2'><a href='#fill(val,_[start],_[length])'>fill(val, [start], [length])</a>
    <li class='indexItem indexItem2'><a href='#first()'>first()</a>
    <li class='indexItem indexItem2'><a href='#flatten()'>flatten()</a>
    <li class='indexItem indexItem2'><a href='#foreach(sub_ref)'>foreach(sub ref)</a>
    <li class='indexItem indexItem2'><a href='#get()'>get()</a>
    <li class='indexItem indexItem2'><a href='#index(val)'>index(val)</a>
    <li class='indexItem indexItem2'><a href='#indices(val1,_[val2],_[valN])'>indices(val1, [val2], [valN])</a>
    <li class='indexItem indexItem2'><a href='#join([string])'>join([string])</a>
    <li class='indexItem indexItem2'><a href='#last()'>last()</a>
    <li class='indexItem indexItem2'><a href='#length()'>length()</a>
    <li class='indexItem indexItem2'><a href='#max()'>max()</a>
    <li class='indexItem indexItem2'><a href='#pack(template)'>pack(template)</a>
    <li class='indexItem indexItem2'><a href='#pop()'>pop()</a>
    <li class='indexItem indexItem2'><a href='#print([1])'>print([1])</a>
    <li class='indexItem indexItem2'><a href='#push(list)'>push(list)</a>
    <li class='indexItem indexItem2'><a href='#reverse()'>reverse()</a>
    <li class='indexItem indexItem2'><a href='#rindex(val)'>rindex(val)</a>
    <li class='indexItem indexItem2'><a href='#set(index,_value)'>set(index, value)</a>
    <li class='indexItem indexItem2'><a href='#shift()'>shift()</a>
    <li class='indexItem indexItem2'><a href='#sort([coderef])'>sort([coderef])</a>
    <li class='indexItem indexItem2'><a href='#splice([offset],_[length],_[list])'>splice([offset], [length], [list])</a>
    <li class='indexItem indexItem2'><a href='#unique()'>unique()</a>
    <li class='indexItem indexItem2'><a href='#unshift(list)'>unshift(list)</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#ODDBALL_METHODS'>ODDBALL METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#as_hash([$option])'>as_hash([$option])</a>
    <li class='indexItem indexItem2'><a href='#impose([append/prepend],_string)'>impose([append/prepend], string)</a>
    <li class='indexItem indexItem2'><a href='#randomize()'>randomize()</a>
    <li class='indexItem indexItem2'><a href='#rotate(direction)'>rotate(direction)</a>
    <li class='indexItem indexItem2'><a href='#to_hash()'>to_hash()</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#OVERLOADED_(COMPARISON)_OPERATORS'>OVERLOADED (COMPARISON) OPERATORS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#General_Notes'>General Notes</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <li class='indexItem indexItem1'><a href='#KNOWN_BUGS'>KNOWN BUGS</a>
  <li class='indexItem indexItem1'><a href='#FUTURE_PLANS'>FUTURE PLANS</a>
  <li class='indexItem indexItem1'><a href='#THANKS'>THANKS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Set::Array - Arrays as objects with lots of handy methods</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>my $sao1 = Set::Array-&#62;new(1,2,4,&#34;hello&#34;,undef);</code></p>

<p><code>my $sao2 = Set::Array-&#62;new(qw(a b c a b c));</code></p>

<p><code>print $sao1-&#62;length; # prints 5</code></p>

<p><code>$sao2-&#62;unique-&#62;length-&#62;print; # prints 3</code></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PREREQUISITES"
>PREREQUISITES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Perl 5.6 or later</p>

<p>The &#39;Want&#39; module by Robin Houston.
Available on CPAN.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Set::Array allows you to create arrays as objects and use OO-style methods on them.
Many convenient methods are provided here that appear in the FAQ&#39;s,
the Perl Cookbook or posts from comp.lang.perl.misc.
In addition,
there are Set methods with corresponding (overloaded) operators for the purpose of Set comparison,
i.e.
<b>+</b>,
<b>==</b>,
etc.</p>

<p>The purpose is to provide built-in methods for operations that people are always asking how to do,
and which already exist in languages like Ruby.
This should (hopefully) improve code readability and/or maintainability.
The other advantage to this module is method-chaining by which any number of methods may be called on a single object in a single statement.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OBJECT_BEHAVIOR"
>OBJECT BEHAVIOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The exact behavior of the methods depends largely on the calling context.</p>

<p><b>Here are the rules</b>:</p>

<p>* If a method is called in void context,
the object itself is modified.</p>

<p>* If the method called is not the last method in a chain (i.e.
it&#39;s called in object context),
the object itself is modified by that method regardless of the &#39;final&#39; context or method call.</p>

<p>* If a method is called in list or scalar context,
a list or list refererence is returned,
respectively.
The object itself is <b>NOT</b> modified.</p>

<p>Here&#39;s a quick example:</p>

<p><code>my $sao = Set::Array-&#62;new(1,2,3,2,3);</code></p>

<p><code>my @uniq = $sao-&#62;unique(); # Object unmodified.
&#39;@uniq&#39; contains 3 values.</code></p>

<p><code>$sao-&#62;unique(); # Object modified,
now contains 3 values</code></p>

<p><b>Here are the exceptions</b>:</p>

<p>* Methods that report a value,
such as boolean methods like <i>exists()</i> or other methods such as <i>at()</i> or <i>as_hash()</i>,
never modify the object.</p>

<p>* The methods <i>clear()</i>,
<i>delete()</i>,
<i>delete_at()</i>,
and <i>splice</i> will <b>always</b> modify the object.
It seemed much too counterintuitive to call these methods in any context without actually deleting/clearing/substituting the items!</p>

<p>* The methods <i>shift()</i> and <i>pop()</i> will modify the object <b>AND</b> return the value that was shifted or popped from the array.
Again,
it seemed much too counterintuitive for something like <code>$val = $sao-&#62;shift</code> to return a value while leaving the object&#39;s list unchanged.
If you really want the first or last value without modifying the object,
you can always use the <i>first()</i> or <i>last()</i> method,
respectively.</p>

<p>* The methods <i>cshift()</i> and <i>cpop()</i> (for chainable-shift and chainable-pop) will modify the object <b>and return the object</b>.
I.e.
the value shifted or popped is discarded.
See the docs below or the code at the end of t/test.t for examples.</p>

<p>* The <i>join()</i> method always returns a string and is really meant for use in conjunction with the <i>print()</i> method.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BOOLEAN_METHODS"
>BOOLEAN METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>In the following sections,
the brackets in [val] indicate that val is a <i>optional</i> parameter.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="exists([val])"
>exists([val])</a></h2>

<p>Returns 1 if <i>val</i> exists within the array,
0 otherwise.</p>

<p>If no value (or <i>undef</i>) is passed,
then this method will test for the existence of undefined values within the array.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="is_empty()"
>is_empty()</a></h2>

<p>Returns 1 if the array is empty,
0 otherwise.
Empty is defined as having a length of 0.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="STANDARD_METHODS"
>STANDARD METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="at(index)"
>at(index)</a></h2>

<p>Returns the item at the given index (or <i>undef</i>).</p>

<p>A negative index may be used to count from the end of the array.</p>

<p>If no value (or <i>undef</i>) is specified,
it will look for the first item that is not defined.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="clear([1])"
>clear([1])</a></h2>

<p>Empties the array (i.e.
length becomes 0).</p>

<p>You may pass a <i>1</i> to this method to set each element of the array to <i>undef</i> rather than truly empty it.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="compact()"
>compact()</a></h2>

<dl>
<dt><a name='o'></a><a name="o_In_scalar_context"
>o In scalar context</a></dt>

<dd>
<p>Returns an array ref of defined items.</p>

<p>The object is not modified.</p>

<dt><a name='o'></a><a name="o_In_list_context"
>o In list context</a></dt>

<dd>
<p>Returns an array of defined items.</p>

<p>The object is not modified.</p>

<dt><a name='o'></a><a name="o_In_chained_context"
>o In chained context</a></dt>

<dd>
<p>Returns the object.</p>

<p>The object <i>is</i> modified if it contains undefined items.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="count([val])"
>count([val])</a></h2>

<p>Returns the number of instances of <i>val</i> within the array.</p>

<p>If <i>val</i> is not specified (or is <i>undef</i>),
the method will return the number of undefined values within the array.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="cpop()"
>cpop()</a></h2>

<p>The &#39;c&#39; stands for &#39;chainable&#39; pop.</p>

<p>Removes <i>and discards</i> the last element of the array.</p>

<p>Returns <i>the object</i>.</p>

<pre class="sh_perl">        Set::Array -&#62; new(1, 2, 3, 4, 5) -&#62; cpop -&#62; join -&#62; print;</pre>

<p>prints 1,2,3,4.</p>

<p>See also cshift(), pop() and shift().</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="cshift()"
>cshift()</a></h2>

<p>The &#39;c&#39; stands for &#39;chainable&#39; shift.</p>

<p>Removes <i>and discards</i> the first element of the array.</p>

<p>Returns <i>the object</i>.</p>

<pre class="sh_perl">        Set::Array -&#62; new(1, 2, 3, 4, 5) -&#62; cshift -&#62; join -&#62; print;</pre>

<p>prints 2,3,4,5.</p>

<p>See also cpop(), pop() and shift().</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="delete(@list)"
>delete(@list)</a></h2>

<p>Deletes all items within the object that match <i>@list</i>.</p>

<p>This method will die if <i>@list</i> is not defined.</p>

<p>If your goal is to delete undefined values from your object, use the <a href="#compact()" class="podlinkpod"
>&#34;compact()&#34;</a> method instead.</p>

<p>This method always modifies the object, if elements in @list match elements in the object.</p>

<dl>
<dt><a name='o'></a><a name="o_In_scalar_context"
>o In scalar context</a></dt>

<dd>
<p>Returns an array ref of unique items.</p>

<dt><a name='o'></a><a name="o_In_list_context"
>o In list context</a></dt>

<dd>
<p>Returns an array of unique items.</p>

<dt><a name='o'></a><a name="o_In_chained_context"
>o In chained context</a></dt>

<dd>
<p>Returns the object.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="delete_at(index,_[index])"
>delete_at(index, [index])</a></h2>

<p>Deletes the item at the specified index.</p>

<p>If a second index is specified, a range of items is deleted.</p>

<p>You may use -1 or the string &#39;end&#39; to refer to the last element of the array.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="difference($one,_$two)"
>difference($one, $two)</a></h2>

<p>Returns all elements in the left set that are not in the right set.</p>

<p>Study the sample code below carefully, since all of $set1, $set8 and $set9 get changed, perhaps when you weren&#39;t expecting them to be.</p>

<p>There is a problem however, with 2 bugs in the Want module (V 0.20), relating to want(&#39;OBJECT&#39;) and wantref() both causing segfaults.</p>

<p>So, I have used Try::Tiny to capture a call to want(&#39;OBJECT&#39;) in sub difference().</p>

<p>If an error is thrown, I just ignore it. This is horribly tacky, but after waiting 7 years (it&#39;s 2012-03-07) I&#39;ve given up on expecting patches to Want.</p>

<p>Sample code:</p>

<pre class="sh_perl">        #!/usr/bin/env perl

        use strict;
        use warnings;

        use Set::Array;

        # -------------

        my($set1) = Set::Array -&#62; new(qw(abc def ghi jkl mno) );
        my($set8) = Set::Array -&#62; new(@$set1);           # Duplicate for later.
        my($set9) = Set::Array -&#62; new(@$set1);           # Duplicate for later.
        my($set2) = Set::Array -&#62; new(qw(def jkl pqr));
        my($set3) = $set1 - $set2;                       # Changes $set1. $set3 is a set.
        my($set4) = Set::Array -&#62; new(@{$set8 - $set2}); # Changes $set8. $set4 is a set.
        my(@set5) = $set9 -&#62; difference($set2);          # Changes $set9. $set5 is an array.

        print &#39;1: &#39;, join(&#39;, &#39;, @$set3), &#34;. \n&#34;;
        print &#39;2: &#39;, join(&#39;, &#39;, @{$set4 -&#62; print}), &#34;. \n&#34;;
        print &#39;3: &#39;, join(&#39;, &#39;, $set4 -&#62; print), &#34;. \n&#34;;
        print &#39;4: &#39;, join(&#39;, &#39;, @set5), &#34;. \n&#34;;</pre>

<p>The last 4 lines all produce the same, correct, output, so any of $set3, $set4 or $set5 is what you want.</p>

<p>See t/difference.pl.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="duplicates()"
>duplicates()</a></h2>

<p>Returns a list of N-1 elements for each element which appears N times in the set.</p>

<p>For example, if you have set &#34;X X Y Y Y&#34;, this method would return the list &#34;X Y Y&#34;.</p>

<p>If you want the output to be &#34;X Y&#34;, see <a href="#unique()" class="podlinkpod"
>&#34;unique()&#34;</a>.</p>

<dl>
<dt><a name='o'></a><a name="o_In_scalar_context"
>o In scalar context</a></dt>

<dd>
<p>Returns an array ref of duplicated items.</p>

<p>The object is not modified.</p>

<dt><a name='o'></a><a name="o_In_list_context"
>o In list context</a></dt>

<dd>
<p>Returns an array of duplicated items.</p>

<p>The object is not modified.</p>

<dt><a name='o'></a><a name="o_In_chained_context"
>o In chained context</a></dt>

<dd>
<p>Returns the object.</p>

<p>The object <i>is</i> modified if it contains duplicated items.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="fill(val,_[start],_[length])"
>fill(val, [start], [length])</a></h2>

<p>Sets the selected elements of the array (which may be the entire array) to <i>val</i>.</p>

<p>The default value for <i>start</i> is 0.</p>

<p>If length is not specified the entire array, however long it may be, will be filled.</p>

<p>A range may also be used for the <i>start</i> parameter. A range must be a quoted string in &#39;0..999&#39; format.</p>

<p>E.g. <code>$sao-&#62;fill(&#39;x&#39;, &#39;3..65535&#39;);</code></p>

<p>The array length/size may not be expanded with this call - it is only meant to fill in already-existing elements.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="first()"
>first()</a></h2>

<p>Returns the first element of the array (or undef).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="flatten()"
>flatten()</a></h2>

<p>Causes a one-dimensional flattening of the array, recursively.</p>

<p>That is, for every element that is an array (or hash, or a ref to either an array or hash), extract its elements into the array.</p>

<p>E.g. <code>my $sa = Set::Array-&#62;new([1,3,2],{one=&#62;&#39;a&#39;,two=&#62;&#39;b&#39;},x,y,z);</code></p>

<p><code>$sao-&#62;flatten-&#62;join(&#39;,&#39;)-&#62;print; # prints &#34;1,3,2,one,a,two,b,x,y,z&#34;</code></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="foreach(sub_ref)"
>foreach(sub ref)</a></h2>

<p>Iterates over an array, executing the subroutine for each element in the array.</p>

<p>If you wish to modify or otherwise act directly on the contents of the array, use <b>$_</b> within your sub reference.</p>

<p>E.g. To increment all elements in the array by one...</p>

<p><code>$sao-&#62;foreach(sub{ ++$_ });</code></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="get()"
>get()</a></h2>

<p>This is an alias for the <b>indices()</b> method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="index(val)"
>index(val)</a></h2>

<p>Returns the index of the first element of the array object that contains <i>val</i>.</p>

<p>Returns <i>undef</i> if no value is found.</p>

<p>Note that there is no dereferencing here so if you&#39;re looking for an item nested within a ref, use the <i>flatten</i> method first.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="indices(val1,_[val2],_[valN])"
>indices(val1, [val2], [valN])</a></h2>

<p>Returns an array consisting of the elements at the specified indices, or <i>undef</i> if the element is out of range.</p>

<p>A range may also be used for each of the &#60;valN&#62; parameters. A range must be a quoted string in &#39;0..999&#39; format.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="join([string])"
>join([string])</a></h2>

<p>Joins the elements of the list into a single string with the elements separated by the value of <i>string</i>.</p>

<p>Useful in conjunction with the <i>print()</i> method.</p>

<p>If no string is specified, then <i>string</i> defaults to a comma.</p>

<p>e.g. <code>$sao-&#62;join(&#39;-&#39;)-&#62;print;</code></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="last()"
>last()</a></h2>

<p>Returns the last element of the array (or <i>undef</i>).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="length()"
>length()</a></h2>

<p>Returns the number of elements within the array.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="max()"
>max()</a></h2>

<p>Returns the maximum value of an array.</p>

<p>No effort is made to check for non-numeric data.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="pack(template)"
>pack(template)</a></h2>

<p>Packs the contents of the array into a string (in scalar context) or a single array element (in object or void context).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="pop()"
>pop()</a></h2>

<p>Removes the last element from the array.</p>

<p>Returns the popped element.</p>

<p>See also cpop(), cshift() and shift().</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="print([1])"
>print([1])</a></h2>

<p>Prints the contents of the array.</p>

<p>If a <i>1</i> is provided as an argument, the output will automatically be terminated with a newline.</p>

<p>This also doubles as a &#39;contents&#39; method, if you just want to make a copy of the array, e.g. my @copy = $sao-&#62;print;</p>

<p>Can be called in void or list context, e.g.</p>

<p><code>$sao-&#62;print(); # or...</code> <code>print &#34;Contents of array are: &#34;, $sao-&#62;print();</code></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="push(list)"
>push(list)</a></h2>

<p>Adds <i>list</i> to the end of the array, where <i>list</i> is either a scalar value or a list.</p>

<p>Returns an array or array reference in list or scalar context, respectively.</p>

<p>Note that it does <b>not</b> return the length in scalar context. Use the <i>length</i> method for that.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="reverse()"
>reverse()</a></h2>

<dl>
<dt><a name='o'></a><a name="o_In_scalar_context"
>o In scalar context</a></dt>

<dd>
<p>Returns an array ref of the object&#39;s items, reversed.</p>

<p>The object is not modified.</p>

<dt><a name='o'></a><a name="o_In_list_context"
>o In list context</a></dt>

<dd>
<p>Returns an array of the object&#39;s items, reversed.</p>

<p>The object is not modified.</p>

<dt><a name='o'></a><a name="o_In_chained_context"
>o In chained context</a></dt>

<dd>
<p>Returns the object.</p>

<p>The object <i>is</i> modified, with its items being reversed.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="rindex(val)"
>rindex(val)</a></h2>

<p>Similar to the <i>index()</i> method, except that it returns the index of the last <i>val</i> found within the array.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="set(index,_value)"
>set(index, value)</a></h2>

<p>Sets the element at <i>index</i> to <i>value</i>, replacing whatever may have already been there.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="shift()"
>shift()</a></h2>

<p>Shifts off the first element of the array and returns the shifted element.</p>

<p>See also cpop(), cshift() and pop().</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="sort([coderef])"
>sort([coderef])</a></h2>

<p>Sorts the contents of the array in alphabetical order, or in the order specified by the optional <i>coderef</i>.</p>

<dl>
<dt><a name='o'></a><a name="o_In_scalar_context"
>o In scalar context</a></dt>

<dd>
<p>Returns an array ref of the object&#39;s items, sorted.</p>

<p>The object is not modified.</p>

<dt><a name='o'></a><a name="o_In_list_context"
>o In list context</a></dt>

<dd>
<p>Returns an array of the object&#39;s items, sorted.</p>

<p>The object is not modified.</p>

<dt><a name='o'></a><a name="o_In_chained_context"
>o In chained context</a></dt>

<dd>
<p>Returns the object.</p>

<p>The object <i>is</i> modified by sorting its items.</p>
</dd>
</dl>

<p>Use your standard <i>$a</i> and <i>$b</i> variables within your sort sub:</p>

<p>Program:</p>

<pre class="sh_perl">        #!/usr/bin/env perl

        use Set::Array;

        # -------------

        my $s = Set::Array-&#62;new(
                { name =&#62; &#39;Berger&#39;, salary =&#62; 15000 },
                { name =&#62; &#39;Berger&#39;, salary =&#62; 20000 },
                { name =&#62; &#39;Vera&#39;, salary =&#62; 25000 },
        );

        my($subref) = sub{ $b-&#62;{name} cmp $a-&#62;{name} || $b-&#62;{salary} &#60;=&#62; $a-&#62;{salary} };
        my(@h)      = $s-&#62;sort($subref);

        for my $h (@h)
        {
                print &#34;Name: $$h{name}. Salary: $$h{salary}. \n&#34;;
        }</pre>

<p>Output (because the sort subref puts $b before $a for name and salary):</p>

<pre class="sh_perl">        Name: Vera. Salary: 25000.
        Name: Berger. Salary: 20000.
        Name: Berger. Salary: 15000.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="splice([offset],_[length],_[list])"
>splice([offset], [length], [list])</a></h2>

<p>Splice the array starting at position <i>offset</i> up to <i>length</i> elements, and replace them with <i>list</i>.</p>

<p>If no list is provided, all elements are deleted.</p>

<p>If length is omitted, everything from <i>offset</i> onward is removed.</p>

<p>Returns an array or array ref in list or scalar context, respectively.</p>

<p>This method <b>always</b> modifies the object, regardless of context.</p>

<p>If your goal was to grab a range of values without modifying the object, use the <i>indices</i> method instead.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="unique()"
>unique()</a></h2>

<p>Returns a list of 1 element for each element which appears N times in the set.</p>

<p>For example, if you have set &#34;X X Y Y Y&#34;, this method would return the list &#34;X Y&#34;.</p>

<p>If you want the output to be &#34;X Y Y&#34;, see <a href="#duplicates()" class="podlinkpod"
>&#34;duplicates()&#34;</a>.</p>

<dl>
<dt><a name='o'></a><a name="o_In_scalar_context"
>o In scalar context</a></dt>

<dd>
<p>Returns an array ref of unique items.</p>

<p>The object is not modified.</p>

<dt><a name='o'></a><a name="o_In_list_context"
>o In list context</a></dt>

<dd>
<p>Returns an array of unique items.</p>

<p>The object is not modified.</p>

<dt><a name='o'></a><a name="o_In_chained_context"
>o In chained context</a></dt>

<dd>
<p>Returns the object.</p>

<p>The object <i>is</i> modified if it contains duplicated items.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="unshift(list)"
>unshift(list)</a></h2>

<p>Prepends a scalar or list to array.</p>

<p>Note that this method returns an array or array reference in list or scalar context, respectively.</p>

<p>It does <b>not</b> return the length of the array in scalar context. Use the <i>length</i> method for that.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ODDBALL_METHODS"
>ODDBALL METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="as_hash([$option])"
>as_hash([$option])</a></h2>

<p>Returns a hash based on the current array, with each even numbered element (including 0) serving as the key, and each odd element serving as the value.</p>

<p>This can be switched by using $option, and setting it to <i>odd</i>, in which case the even values serve as the values, and the odd elements serve as the keys.</p>

<p>The default value of $option is <i>even</i>.</p>

<p>Of course, if you don&#39;t care about insertion order, you could just as well do something like, <code>$sao-&#62;reverse-&#62;as_hash;</code></p>

<p>This method does not actually modify the object itself in any way. It just returns a plain hash in list context or a hash reference in scalar context. The reference is not blessed, therefore if this method is called as part of a chain, it must be the last method called.</p>

<p><i>$option</i> can be specified in various ways:</p>

<dl>
<dt><a name="undef"
>undef</a></dt>

<dd>
<p>When you do not supply a value for this parameter, the default is <i>even</i>.</p>

<dt><a name='odd'></a><a name="&#39;odd&#39;_or_&#39;even&#39;"
>&#39;odd&#39; or &#39;even&#39;</a></dt>

<dd>
<p>The value may be a string.</p>

<p>This possibility was added in V 0.18.</p>

<p>This is now the recommended alternative.</p>

<dt><a name='key_option'></a><a name="{key_option_=&#62;_&#39;odd&#39;}_or_{key_option_=&#62;_&#39;even&#39;}"
>{key_option =&#62; &#39;odd&#39;} or {key_option =&#62; &#39;even&#39;}</a></dt>

<dd>
<p>The value may be a hash ref, with &#39;key_option&#39; as the hash key.</p>

<p>This possibility was added in V 0.18.</p>

<dt><a name='key_option'></a><a name="(key_option_=&#62;_&#39;odd&#39;)_or_(key_option_=&#62;_&#39;even&#39;)"
>(key_option =&#62; &#39;odd&#39;) or (key_option =&#62; &#39;even&#39;)</a></dt>

<dd>
<p>The value may be a hash, with &#39;key_option&#39; as the hash key.</p>

<p>This was the original (badly-documented) alternative to undef, and it still supported in order to make the code backwards-compatible.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="impose([append/prepend],_string)"
>impose([append/prepend], string)</a></h2>

<p>Appends or prepends the specified string to each element in the array.</p>

<p>Specify the method with either &#39;append&#39; or &#39;prepend&#39;.</p>

<p>The default is &#39;append&#39;.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="randomize()"
>randomize()</a></h2>

<p>Randomizes the order of the elements within the array.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="rotate(direction)"
>rotate(direction)</a></h2>

<p>Moves the last item of the list to the front and shifts all other elements one to the right, or vice-versa, depending on what you pass as the direction - &#39;ftol&#39; (first to last) or &#39;ltof&#39; (last to first).</p>

<p>The default is &#39;ltof&#39;.</p>

<p>e.g. my $sao = Set::Array-&#62;new(1,2,3);</p>

<p>$sao-&#62;rotate(); # order is now 3,1,2</p>

<p>$sao-&#62;rotate(&#39;ftol&#39;); # order is back to 1,2,3</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="to_hash()"
>to_hash()</a></h2>

<p>This is an alias for <i>as_hash()</i>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OVERLOADED_(COMPARISON)_OPERATORS"
>OVERLOADED (COMPARISON) OPERATORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="General_Notes"
>General Notes</a></h2>

<p>For overloaded operators you may pass a Set::Array object, or just a normal array reference (blessed or not) in any combination, so long as one is a Set::Array object. You may use either the operator or the equivalent method call.</p>

<p>Examples (using the &#39;==&#39; operator or &#39;is_equal&#39; method):</p>

<p>my $sao1 = Set::Array-&#62;new(1,2,3,4,5);</p>

<p>my $sao2 = Set::Array-&#62;new(1,2,3,4,5);</p>

<p>my $ref1 = [1,2,3,4,5];</p>

<p>if($sao1 == $sao2)... # valid</p>

<p>if($sao1 == $ref1)... # valid</p>

<p>if($ref1 == $sao2)... # valid</p>

<p>if($sao1-&#62;is_equal($sao2))... # valid</p>

<p>if($sao1-&#62;is_equal($ref1))... # valid</p>

<p>All of these operations return either a boolean value (for equality operators) or an array (in list context) or array reference (in scalar context).</p>

<p><b>&#38;</b> or <b>bag</b> - The union of both sets, including duplicates.</p>

<p><b>-</b> or <b>difference</b> - Returns all elements in the left set that are not in the right set. See <a href="#difference($one,_$two)" class="podlinkpod"
>&#34;difference($one, $two)&#34;</a> for details.</p>

<p><b>==</b> or <b>is_equal</b> - This tests for equality of the content of the sets, though ignores order. Thus, comparing (1,2,3) and (3,1,2) will yield a <i>true</i> result.</p>

<p><b>!=</b> or <b>not_equal</b> - Tests for inequality of the content of the sets. Again, order is ignored.</p>

<p><b>*</b> or <b>intersection</b> - Returns all elements that are common to both sets.</p>

<p><b>%</b> or <b>symmetric_difference</b> or <b>symm_diff</b> - Returns all elements that are in one set or the other, but not both. Opposite of intersection.</p>

<p><b>+</b> or <b>union</b> - Returns the union of both sets. Duplicates excluded.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>For our examples, I&#39;ll create 3 different objects</p>

<p>my $sao1 = Set::Array-&#62;new(1,2,3,a,b,c,1,2,3);</p>

<p>my $sao2 = Set::Array-&#62;new(1,undef,2,undef,3,undef);</p>

<p>my $sao3 = Set::Array-&#62;new(1,2,3,[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;],{name=&#62;&#34;Dan&#34;});</p>

<p><b>How do I...</b></p>

<p><i>get the number of unique elements within the array?</i></p>

<p><code>$sao1-&#62;unique()-&#62;length();</code></p>

<p><i>count the number of non-undef elements within the array?</i></p>

<p><code>$sao2-&#62;compact()-&#62;length();</code></p>

<p><i>count the number of unique elements within an array, excluding undef?</i></p>

<p><code>$sao2-&#62;compact()-&#62;unique()-&#62;length();</code></p>

<p><i>print a range of indices?</i></p>

<p><code>$sao1-&#62;indices(&#39;0..2&#39;)-&#62;print();</code></p>

<p><i>test to see if two Set::Array objects are equal?</i></p>

<p><code>if($sao1 == $sao2){ ... }</code></p>

<p><code>if($sao1-&#62;is_equal($sao2){ ... } # Same thing</code></p>

<p><i>fill an array with a value, but only if it&#39;s not empty?</i></p>

<p><code>if(!$sao1-&#62;is_empty()){ $sao1-&#62;fill(&#39;x&#39;) }</code></p>

<p><i>shift an element off the array and return the shifted value?</i></p>

<p><code>my $val = $sao1-&#62;shift())</code></p>

<p><i>shift an element off the array and return the array?</i></p>

<p><code>my @array = $sao1-&#62;delete_at(0)</code></p>

<p><i>flatten an array and return a hash based on now-flattened array?, with odd elements as the key?</i></p>

<p><code>my %hash = $sao3-&#62;flatten()-&#62;reverse-&#62;as_hash();</code></p>

<p><i>delete all elements within an array?</i></p>

<p><code>$sao3-&#62;clear();</code></p>

<p><code>$sao3-&#62;splice();</code></p>

<p><i>modify the object AND assign a value at the same time?</i></p>

<p><code>my @unique = $sao1-&#62;unique-&#62;print;</code></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="KNOWN_BUGS"
>KNOWN BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There is a bug in the <i>Want-0.05</i> module that currently prevents the use of most of the overloaded operators, though you can still use the corresponding method names. The equality operators <b>==</b> and <b>!=</b> should work, however.</p>

<p>There are still bugs in Want V 0.20. See the discussion of <a href="#difference($one,_$two)" class="podlinkpod"
>&#34;difference($one, $two)&#34;</a> for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUTURE_PLANS"
>FUTURE PLANS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Anyone want a built-in &#39;permute()&#39; method?</p>

<p>I&#39;m always on the lookout for faster algorithms. If you&#39;ve looked at the code for a particular method and you know of a faster way, please email me. Be prepared to backup your claims with benchmarks (and the benchmark code you used). Tests on more than one operating system are preferable. No, <i>map</i> is not always faster - <i>foreach</i> loops usually are in my experience.</p>

<p>More flexibility with the foreach method (perhaps with iterators?).</p>

<p>More tests.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="THANKS"
>THANKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Thanks to all the kind (and sometimes grumpy) folks at comp.lang.perl.misc who helped me with problems and ideas I had.</p>

<p>Thanks also to Robin Houston for the &#39;Want&#39; module! Where would method chaining be without it?</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Original author: Daniel Berger djberg96 at hotmail dot com imperator on IRC (freenode)</p>

<p>Maintainer since V 0.12: Ron Savage <i>&#60;ron@savage.net.au&#62;</i> (in 2005).</p>

<p>Home page: <a href="http://savage.net.au/index.html" class="podlinkurl"
>http://savage.net.au/index.html</a></p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78272 Uploads, 24723 Distributions
106001 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 21:43:30 2012 GMT (0.430344104766846) @cpansearch1 -->
 </body>
</html>
