<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Log::Agent - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Log-Agent",3]);
    _gaq.push(["_setCustomVar",5,"Release","Log-Agent-0.307",3]);
    _gaq.push(["_setCustomVar",3,"Module","Log::Agent",3]);
    _gaq.push(["_setCustomVar",1,"Author","MROGASKI",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Log::Agent">permalink</a></div>
  <a href="/~mrogaski/">Mark Rogaski</a> &gt;
  <a href="/~mrogaski/Log-Agent-0.307/">Log-Agent-0.307</a> &gt;
  Log::Agent
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/5fcf094528a3be23a104e272117a9285?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/M/MR/MROGASKI/Log-Agent-0.307.tar.gz">Log-Agent-0.307.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Log%3A%3AAgent;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~MROGASKI/Log-Agent-0.307/Agent.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Log%3A%3ALog4perl">Log::Log4perl</a><br>
<a href="/perldoc?Carp%3A%3ADatum">Carp::Datum</a><br>
<a href="/perldoc?File%3A%3ATail">File::Tail</a><br>
<a href="/perldoc?Test%3A%3AHarness">Test::Harness</a><br>
<a href="/perldoc?Log%3A%3ADispatch">Log::Dispatch</a><br>
<a href="/perldoc?Sys%3A%3ASyslog">Sys::Syslog</a><br>
<a href="/perldoc?Win32%3A%3AProcess">Win32::Process</a><br>
<a href="/perldoc?File%3A%3ABasename">File::Basename</a><br>
<a href="/perldoc?Devel%3A%3ADProf">Devel::DProf</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Log%3A%3AAgent">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 3</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Log-Agent">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.307 &nbsp;
<span class="noprint">
  <a href="/src/MROGASKI/Log-Agent-0.307/Agent.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#PRIORITIES_AND_LEVEL'>PRIORITIES AND LEVEL</a>
  <li class='indexItem indexItem1'><a href='#CHANNELS'>CHANNELS</a>
  <li class='indexItem indexItem1'><a href='#INTERFACE'>INTERFACE</a>
  <li class='indexItem indexItem1'><a href='#KNOWN_LIMITATIONS'>KNOWN LIMITATIONS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Log::Agent - logging agent</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> use Log::Agent;            # in all reusable components
 logerr &#34;error&#34;;
 logtrc &#34;notice:12&#34;, &#34;notice that&#34; if ...;
 logdie &#34;log and die&#34;;

 use Log::Agent;            # in application&#39;s main
 logconfig(-prefix =&#62; $0);  # simplest, uses default driver

 use Log::Agent;                    # another more complex example
 require Log::Agent::Driver::File;  # logging made to file
 logconfig(-driver =&#62;
     Log::Agent::Driver::File-&#62;make(
         -prefix      =&#62; $0,
         -showpid     =&#62; 1,
         -channels    =&#62; {
             &#39;error&#39;  =&#62; &#34;$0.err&#34;,
             &#39;output&#39; =&#62; &#34;$0.out&#34;,
             &#39;debug&#39;  =&#62; &#34;$0.dbg&#34;,
         },
     )
 );</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <code>Log::Agent</code> module provides an abstract layer for logging and tracing, which is independant from the actual method used to physically perform those activities. It acts as an agent (hence the name) that collects the requests and delegates processing to a sublayer: the logging driver.</p>

<p>The <code>Log::Agent</code> module is meant to be used in all reusable components, since they cannot know in advance how the application which ends up using them will perform its logging activities: either by emitting messages on stdout and errors on stderr, or by directing messages to logfiles, or by using syslog(3).</p>

<p>The logging interface is common for all the logging drivers, and is therefore the result of a compromise between many logging schemes: any information given at this level must be either handled by all drivers, or may be ignored depending on the application&#39;s final choice.</p>

<p>WARNING: THIS INTERFACE IS STILL SOMEWHAT ALPHA AND COULD STILL CHANGE DEPENDING ON THE FEEDBACK I SHALL GET FROM USERS AND FROM MY OWN EXPERIENCE USING IT, WITHOUT ANY BACKWARD COMPATIBILITY ASSURANCE.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PRIORITIES_AND_LEVEL"
>PRIORITIES AND LEVEL <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <code>Log::Agent</code> module can use both priorities (as defined by syslog(3)) or logging levels, or either, in which case there is an implicit computation of the missing item (i.e. the level 4, for instance, corresponds to the &#34;warning&#34; priority, and vice-versa). See <a href="/~mrogaski/Log-Agent-0.307/Agent/Priorities.pm" class="podlinkpod"
>Log::Agent::Priorities</a> for more details.</p>

<p>A logging level is defined as being a threshold: any level lesser than or equal to that threshold will be logged.</p>

<p>At the <code>Log::Agent</code> level, it is possible to define a trace level and a debug level. Only the messages below those levels (inclusive) will be handed out to the underlying driver for logging. They are used by the logtrc() and logdbg() routines, respectively.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CHANNELS"
>CHANNELS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <code>Log::Agent</code> class defines three logging channels, which are <code>error</code>, <code>output</code> and <code>debug</code>. Depending on the driver used for logging, those channels are ignored (typically with syslog()) or may be implicitely defined (default logging, i.e. the one achieved by the <code>Log::Agent::Driver::Default</code> driver, remaps <code>error</code> and <code>debug</code> to stderr, <code>output</code> to stdout).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INTERFACE"
>INTERFACE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Anywhere a <i>message</i> is expected, it can be a single string, or a printf()-like format string followed by the required arguments. The special macro <code>%m</code> is handled directly by <code>Log::Agent</code> and is replaced by the string version of $!, which is the last error message returned by the last failing system call.</p>

<p><b>NOTE</b>: There should not be any trailing &#34;\n&#34; in the <i>message</i> strings, nor any embededed one, although this is not enforced. Remember that the main purpose of <code>Log::Agent</code> is to specify logging messages in a standard way! Therefore, most of the time, a &#34;should&#34; should be read as &#34;must&#34; and &#34;should not&#34; as &#34;must not&#34;, which is the strongest interdiction form available in English, as far as I know.</p>

<p>Here are valid <i>message</i> examples:</p>

<pre class="sh_perl">    &#34;started since $time&#34;
    &#34;started since %s&#34;, $time
    &#34;fork: %m&#34;</pre>

<p>The follwing logging interface is made available to modules:</p>

<dl>
<dt><a name='logdbg'></a><a name="logdbg_priority,_message"
>logdbg <i>priority</i>, <i>message</i></a></dt>

<dd>
<p>Debug logging of <i>message</i> to the <code>debug</code> channel.</p>

<p>You may specify any priority you want, i.e. a <code>debug</code> priority is not enforced here. You may even specify <code>&#34;notice:4&#34;</code> if you wish, to have the message logged if the debug level is set to 4 or less. If handed over to syslog(3), the message will nonetheless be logged at the <code>notice</code> priority.</p>

<dt><a name='logtrc'></a><a name="logtrc_priority,_message"
>logtrc <i>priority</i>, <i>message</i></a></dt>

<dd>
<p>Trace logging of <i>message</i> to the <code>output</code> channel.</p>

<p>Like logdbg() above, you are not restricted to the <code>info</code> priority. This routine checks the logging level (either explicit as in <code>&#34;info:14&#34;</code> or implicit as in <code>&#34;notice&#34;</code>) against the trace level.</p>

<dt><a name='logsay'></a><a name="logsay_message"
>logsay <i>message</i></a></dt>

<dd>
<p>Log the message at the <code>notice</code> priority to the <code>output</code> channel. The logging always takes place under the default <code>-trace</code> settings, but only if the routine is called, naturally. This means you can still say:</p>

<pre class="sh_perl">    logsay &#34;some trace message&#34; if $verbose;</pre>

<p>and control whether the message is emitted by using some external configuration for your module (e.g. by adding a -verbose flag to the creation routine of your class).</p>

<dt><a name='logwarn'></a><a name="logwarn_message"
>logwarn <i>message</i></a></dt>

<dd>
<p>Log a warning message at the <code>warning</code> priority to the <code>error</code> channel.</p>

<dt><a name='logcarp'></a><a name="logcarp_message"
>logcarp <i>message</i></a></dt>

<dd>
<p>Same as logwarn(), but issues a Carp::carp(3) call instead, which will warn from the perspective of the routine&#39;s caller.</p>

<dt><a name='logerr'></a><a name="logerr_message"
>logerr <i>message</i></a></dt>

<dd>
<p>Log an error message at the <code>error</code> priority to the <code>error</code> channel.</p>

<dt><a name='logdie'></a><a name="logdie_message"
>logdie <i>message</i></a></dt>

<dd>
<p>Log a fatal message at the <code>critical</code> priority to the <code>error</code> channel, and then dies.</p>

<dt><a name='logconfess'></a><a name="logconfess_message"
>logconfess <i>message</i></a></dt>

<dd>
<p>Same as logdie(), but issues a Carp::confess(3) call instead. It is possible to configure the <code>Log::Agent</code> module via the <code>-confess</code> switch to automatically redirect a logdie() to logconfess(), which is invaluable during unit testing.</p>

<dt><a name='logcroak'></a><a name="logcroak_message"
>logcroak <i>message</i></a></dt>

<dd>
<p>Same as logdie(), but issues a Carp::croak(3) call instead. It is possible to configure the <code>Log::Agent</code> module via the <code>-confess</code> switch to automatically redirect a logcroak() to logconfess(), which is invaluable during unit testing.</p>

<dt><a name='Log'></a><a name="Log::Agent::inited"
>Log::Agent::inited</a></dt>

<dd>
<p>Returns true when <code>Log::Agent</code> was initialized, either explicitely via a logconfig() or implicitely via any logxxx() call.</p>
</dd>
</dl>

<p>Modules sometimes wish to report errors from the perspective of their caller&#39;s caller, not really their caller. The following interface is therefore provided:</p>

<dl>
<dt><a name='logxcarp'></a><a name="logxcarp_offset,_message"
>logxcarp <i>offset</i>, <i>message</i></a></dt>

<dd>
<p>Same a logcarp(), but with an additional offset to be applied on the stack. To warn one level above your caller, set it to 1.</p>

<dt><a name='logxcroak'></a><a name="logxcroak_offset,_message"
>logxcroak <i>offset</i>, <i>message</i></a></dt>

<dd>
<p>Same a logcroak(), but with an additional offset to be applied on the stack. To report an error one level above your caller, set it to 1.</p>
</dd>
</dl>

<p>For applications that wish to implement a debug layer on top of <code>Log::Agent</code>, the following routine is provided. Note that it is not imported by default, i.e. it needs to be explicitely mentionned at <code>use</code> time, since it is not meant to be used directly under regular usage.</p>

<dl>
<dt><a name='logwrite'></a><a name="logwrite_channel,_priority,_message"
>logwrite <i>channel</i>, <i>priority</i>, <i>message</i></a></dt>

<dd>
<p>Unconditionally write the <i>message</i> at the given <i>priority</i> on <i>channel</i>. The channel can be one of <code>debug</code>, <code>error</code> or <code>output</code>.</p>
</dd>
</dl>

<p>At the application level, one needs to commit once and for all about the logging scheme to be used. This is done thanks to the logconfig() routine which takes the following switches, in alphabetical order:</p>

<dl>
<dt><a name='caller'></a><a name="-caller_=&#62;_[_parameters_]"
><code>-caller</code> =&#62; [ <i>parameters</i> ]</a></dt>

<dd>
<p>Request that caller information (relative to the logxxx() call) be part of the log message. The given <i>parameters</i> are handed off to the creation routine of <code>Log::Agent::Tag::Caller</code> and are documented there.</p>

<p>I usually say something like:</p>

<pre class="sh_perl"> -caller =&#62; [ -display =&#62; &#39;($sub/$line)&#39;, -postfix =&#62; 1 ]</pre>

<p>which I find informative enough. On occasion, I found myself using more complex sequences. See <a href="/~mrogaski/Log-Agent-0.307/Agent/Tag/Caller.pm" class="podlinkpod"
>Log::Agent::Tag::Caller</a>.</p>

<dt><a name='confess'></a><a name="-confess_=&#62;_flag"
><code>-confess</code> =&#62; <i>flag</i></a></dt>

<dd>
<p>When true, all logdie() calls will be automatically masqueraded as logconfess().</p>

<dt><a name='debug'></a><a name="-debug_=&#62;_priority_or_level"
><code>-debug</code> =&#62; <i>priority or level</i></a></dt>

<dd>
<p>Sets the priority threshold (can be expressed as a string or a number, the string being mapped to a logging level as described above in <b>PRIORITIES AND LEVEL</b>) for logdbg() calls.</p>

<p>Calls tagged with a level less than or equal to the given threshold will pass through, others will return prematurely without logging anything.</p>

<dt><a name='driver'></a><a name="-driver_=&#62;_driver_object"
><code>-driver</code> =&#62; <i>driver_object</i></a></dt>

<dd>
<p>This switch defines the driver object to be used, which must be an heir of the <code>Log::Agent::Driver</code> class. See <a href="/~mrogaski/Log-Agent-0.307/Agent/Driver.pm" class="podlinkpod"
>Log::Agent::Driver(3)</a> for a list of the available drivers.</p>

<dt><a name='level'></a><a name="-level_=&#62;_priority_or_level"
><code>-level</code> =&#62; <i>priority or level</i></a></dt>

<dd>
<p>Specifies both <code>-debug</code> and <code>-trace</code> levels at the same time, to a common value.</p>

<dt><a name='prefix'></a><a name="-prefix_=&#62;_name"
><code>-prefix</code> =&#62; <i>name</i></a></dt>

<dd>
<p>Defines the application name which will be pre-pended to all messages, followed by <code>&#34;: &#34;</code> (a colon and a space). Using this switch alone will configure the default driver to use that prefix (stripped down to its basename component).</p>

<p>When a driver object is used, the <code>-prefix</code> switch is kept at the <code>Log::Agent</code> level only and is not passed to the driver: it is up to the driver&#39;s creation routine to request the <code>-prefix</code>. Having this information in Log::Agent enables the module to die on critical errors with that error prefix, since it cannot rely on the logging driver for that, obviously.</p>

<dt><a name='priority'></a><a name="-priority_=&#62;_[_parameters_]"
><code>-priority</code> =&#62; [ <i>parameters</i> ]</a></dt>

<dd>
<p>Request that message priority information be part of the log message. The given <i>parameters</i> are handed off to the creation routine of <code>Log::Agent::Tag::Priority</code> and are documented there.</p>

<p>I usually say something like:</p>

<pre class="sh_perl">        -priority =&#62; [ -display =&#62; &#39;[$priority]&#39; ]</pre>

<p>which will display the whole priority name at the beginning of the messages, e.g. &#34;[warning]&#34; for a logwarn() or &#34;[error]&#34; for logerr(). See <a href="/~mrogaski/Log-Agent-0.307/Agent/Tag/Priority.pm" class="podlinkpod"
>Log::Agent::Tag::Priority</a> and <a href="/~mrogaski/Log-Agent-0.307/Agent/Priorities.pm" class="podlinkpod"
>Log::Agent::Priorities</a>.</p>

<p><b>NOTE</b>: Using <code>-priority</code> does not prevent the <code>-duperr</code> flag of the file driver to also add its own hardwired prefixing in front of duplicated error messages. The two options act at a different level.</p>

<dt><a name='tags'></a><a name="-tags_=&#62;_[_list_of_Log::Agent::Tag_objects_]"
><code>-tags</code> =&#62; [ <i>list of <code>Log::Agent::Tag</code> objects</i> ]</a></dt>

<dd>
<p>Specifies user-defined tags to be added to each message. The objects given here must inherit from <code>Log::Agent::Tag</code> and conform to its interface. See <a href="/~mrogaski/Log-Agent-0.307/Agent/Tag.pm" class="podlinkpod"
>Log::Agent::Tag</a> for details.</p>

<p>At runtime, well after logconfig() was issued, it may be desirable to add (or remove) a user tag. Use the <code>logtags()</code> routine for this purpose, and iteract directly with the tag list object.</p>

<p>For instance, a web module might wish to tag all the messages with a session ID, information that might not have been available by the time logconfig() was issued.</p>

<dt><a name='trace'></a><a name="-trace_=&#62;_priority_or_level"
><code>-trace</code> =&#62; <i>priority or level</i></a></dt>

<dd>
<p>Same a <code>-debug</code> but applies to logsay(), logwarn(), logerr() and logtrc().</p>

<p>When unspecified, <code>Log::Agent</code> runs at the &#34;notice&#34; level.</p>
</dd>
</dl>

<p>Additional routines, not exported by default, are:</p>

<dl>
<dt><a name="logtags"
>logtags</a></dt>

<dd>
<p>Returns a <code>Log::Agent::Tag_List</code> object, which holds all user-defined tags that are to be added to each log message.</p>

<p>The initial list of tags is normally supplied by the application at logconfig() time, via the <code>-tags</code> argument. To add or remove tags after configuration time, one needs direct access to the tag list, obtained via this routine. See <a href="/~mrogaski/Log-Agent-0.307/Agent/Tag_List.pm" class="podlinkpod"
>Log::Agent::Tag_List</a> for the operations that can be performed.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="KNOWN_LIMITATIONS"
>KNOWN LIMITATIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following limitations exist in this early version. They might be addressed in future versions if they are perceived as annoying limitatons instead of being just documented ones. :-)</p>

<ul>
<li>A module which calls logdie() may have its die trapped if called from within an eval(), but unfortunately, the value of $@ is unpredictable: it may be prefixed or not depending on the driver used. This is harder to fix as one might think of at first glance.</li>

<li>Some drivers lack customization and hardwire a few things that come from my personal taste, like the prefixing done when <i>duperr</i> is set in Log::Agent::Driver::File, or the fact that the <code>debug</code> and <code>stderr</code> channels are merged as one in the Log::Agent::Driver::Default driver.</li>

<li>When using logcroak() or logconfess(), the place where the call was made can still be visible when -caller is used, since the addition of the caller information to the message is done before calling the logging driver. Is this a problem?</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Raphael Manfredi <em>&#60;Raphael_Manfredi@pobox.com&#62;</em></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~mrogaski/Log-Agent-0.307/Agent/Driver.pm" class="podlinkpod"
>Log::Agent::Driver</a>(3), Carp(3).</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78269 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 22:22:04 2012 GMT (0.313150882720947) @cpansearch1 -->
 </body>
</html>
