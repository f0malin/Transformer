<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Data::Alias - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Data-Alias",3]);
    _gaq.push(["_setCustomVar",5,"Release","Data-Alias-1.16",3]);
    _gaq.push(["_setCustomVar",3,"Module","Data::Alias",3]);
    _gaq.push(["_setCustomVar",1,"Author","ZEFRAM",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Data::Alias">permalink</a></div>
  <a href="/~zefram/">Andrew Main (Zefram)</a> &gt;
  <a href="/~zefram/Data-Alias-1.16/">Data-Alias-1.16</a> &gt;
  Data::Alias
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/aab343bc3a4424dcb7f913920242f051?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/Z/ZE/ZEFRAM/Data-Alias-1.16.tar.gz">Data-Alias-1.16.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Data%3A%3AAlias;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~ZEFRAM/Data-Alias-1.16/lib/Data/Alias.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?DBIx%3A%3ASimple">DBIx::Simple</a><br>
<a href="/perldoc?Config%3A%3AAny">Config::Any</a><br>
<a href="/perldoc?Devel%3A%3ACover">Devel::Cover</a><br>
<a href="/perldoc?Time%3A%3AHiRes">Time::HiRes</a><br>
<a href="/perldoc?Test%3A%3AMore">Test::More</a><br>
<a href="/perldoc?Config%3A%3AGeneral">Config::General</a><br>
<a href="/perldoc?Net%3A%3APing">Net::Ping</a><br>
<a href="/perldoc?IPC%3A%3ARun">IPC::Run</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Data%3A%3AAlias">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Data-Alias">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.16 &nbsp;
<span class="noprint">
  <a href="/src/ZEFRAM/Data-Alias-1.16/lib/Data/Alias.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#SYNTAX'>SYNTAX</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#alias_EXPR_|_alias_BLOCK'>alias EXPR | alias BLOCK</a>
    <li class='indexItem indexItem2'><a href='#copy_EXPR_|_copy_BLOCK'>copy EXPR | copy BLOCK</a>
    <li class='indexItem indexItem2'><a href='#deref_LIST'>deref LIST</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <li class='indexItem indexItem1'><a href='#DETAILS'>DETAILS</a>
  <li class='indexItem indexItem1'><a href='#IMPLEMENTATION'>IMPLEMENTATION</a>
  <li class='indexItem indexItem1'><a href='#KNOWN_ISSUES'>KNOWN ISSUES</a>
  <li class='indexItem indexItem1'><a href='#ACKNOWLEDGEMENTS'>ACKNOWLEDGEMENTS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#LICENSE'>LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Data::Alias - Comprehensive set of aliasing operations</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use Data::Alias;

    alias {
            # aliasing instead of copying whenever possible
    };

    alias $x = $y;              # alias $x to $y
    alias @x = @y;              # alias @x to @y
    alias $x[0] = $y;           # similar for array and hash elements
    alias push @x, $y;          # push alias to $y onto @x
    $x = alias [ $y, $z ];      # construct array of aliases
    alias my ($x, $y) = @_;     # named aliases to arguments
    alias { ($x, $y) = ($y, $x) };              # swap $x and $y
    alias { my @t = @x; @x = @y; @y = @t };     # swap @x and @y

    use Data::Alias qw/ alias copy /;

    alias { copy $x = $y };     # force copying inside alias-BLOCK

    use Data::Alias qw/ deref /;

    my @refs = (\$x, \@y, \%z);
    foo(deref @refs)            # same as foo($x, @y, %z)</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Aliasing is the phenomenon where two different expressions actually refer to the same thing. Modifying one will modify the other, and if you take a reference to both, the two values are the same.</p>

<p>Aliasing occurs in Perl for example in for-loops and sub-calls:</p>

<pre class="sh_perl">    for $var ($x) {
            # here $var is an alias to $x
    }

    foo($y);
    sub foo {
            # here $_[0] is an alias to $y
    }</pre>

<p>Data::Alias is a module that allows you to apply &#34;aliasing semantics&#34; to a section of code, causing aliases to be made whereever Perl would normally make copies instead. You can use this to improve efficiency and readability, when compared to using references.</p>

<p>The exact details of aliasing semantics are below under <a href="#DETAILS" class="podlinkpod"
>&#34;DETAILS&#34;</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNTAX"
>SYNTAX <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="alias_EXPR_|_alias_BLOCK"
>alias <i>EXPR</i> | alias <i>BLOCK</i></a></h2>

<p>Exported by default.</p>

<p>Enables aliasing semantics within the expression or block. Returns an alias to the expression, or the block&#39;s return value.</p>

<p><code>alias</code> is context-transparent, meaning that whichever context it is placed in (list, scalar, void), the expression/block is evaluated in the same context.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="copy_EXPR_|_copy_BLOCK"
>copy <i>EXPR</i> | copy <i>BLOCK</i></a></h2>

<p>Restores normal (copying) semantics within the expression or block, and makes a copy of the result value (unless in void context).</p>

<p>Like <code>alias</code>, <code>copy</code> is context-transparent.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="deref_LIST"
>deref <i>LIST</i></a></h2>

<p>Accepts a list of references to scalars, arrays, or hashes. Applies the applicable dereferencing operator to each. This means that:</p>

<pre class="sh_perl">    deref $scalarref, $arrayref, $hashref</pre>

<p>behaves like:</p>

<pre class="sh_perl">    $$scalarref, @$arrayref, %$hashref</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A common usage of aliasing is to make an abbreviation for an expression, to avoid having to repeat that (possibly verbose or ugly) expression over and over:</p>

<pre class="sh_perl">    alias my $fi = $self-&#62;{FrobnitzIndex};
    $fi = $fi &#62; 0 ? $fi - $adj : $fi + $adj;

    sub rc4 {
            alias my ($i, $j, $S) = @_;
            my $a = $S-&#62;[($i += 1) &#38;= 255];
            my $b = $S-&#62;[($j += $S-&#62;[$i]) &#38;= 255];
            $S-&#62;[(($S-&#62;[$j] = $a) + ($S-&#62;[$i] = $b)) &#38; 255]
    }</pre>

<p>In the second example, the rc4 function updates its first two arguments (two state values) in addition to returning a value.</p>

<p>Aliasing can also be used to avoid copying big strings. This example would work fine without <code>alias</code> but would be much slower when passed a big string:</p>

<pre class="sh_perl">    sub middlesection ($) {
            alias my $s = shift;
            substr $s, length($s)/4, length($s)/2
    }</pre>

<p>You can also apply aliasing semantics to an entire block. Here this is used to swap two arrays in O(1) time:</p>

<pre class="sh_perl">    alias {
            my @temp = @x;
            @x = @y;
            @y = @temp;
    };</pre>

<p>The <code>copy</code> function is typically used to temporarily reinstate normal semantics, but can also be used to explicitly copy a value when perl would normally not do so:</p>

<pre class="sh_perl">    my $ref = \copy $x;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DETAILS"
>DETAILS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This section describes exactly what the aliasing semantics are of operations. Anything not listed below has unaltered behaviour.</p>

<dl>
<dt><a name='scalar'></a><a name="scalar_assignment_to_variable_or_element."
>scalar assignment to variable or element.</a></dt>

<dd>
<p>Makes the left-side of the assignment an alias to the right-side expression, which can be anything.</p>

<pre class="sh_perl">    alias my $lexvar = $foo;
    alias $pkgvar = $foo;
    alias $array[$i] = $foo;
    alias $hash{$k} = $foo;</pre>

<p>An attempt to do alias-assignment to an element of a tied (or &#34;magical&#34;) array or hash will result in a &#34;Can&#39;t put alias into tied array/hash&#34; error.</p>

<dt><a name='scalar'></a><a name="scalar_assignment_to_dereference"
>scalar assignment to dereference</a></dt>

<dd>
<p>If $ref is a reference or undef, this simply does <code>$ref = \$foo</code>. Otherwise, the indicated package variable (via glob or symbolic reference) is made an alias to the right-side expression.</p>

<pre class="sh_perl">    alias $$ref = $foo;</pre>

<dt><a name='scalar'></a><a name="scalar_assignment_to_glob"
>scalar assignment to glob</a></dt>

<dd>
<p>Works mostly the same as normal glob-assignment, however it does not set the import-flag. (If you don&#39;t know what this means, you probably don&#39;t care)</p>

<pre class="sh_perl">    alias *glob = $reference;</pre>

<dt><a name='scalar'></a><a name="scalar_assignment_to_anything_else"
>scalar assignment to anything else</a></dt>

<dd>
<p>Not supported.</p>

<pre class="sh_perl">    alias substr(...) = $foo;   # ERROR!
    alias lvalsub() = $foo;     # ERROR!</pre>

<dt><a name='conditional'></a><a name="conditional_scalar_assignment"
>conditional scalar assignment</a></dt>

<dd>
<p>Here <code>$var</code> (and <code>$var2</code>) are aliased to <code>$foo</code> if the applicable condition is satisfied. <code>$bool</code> and <code>$foo</code> can be any expression. <code>$var</code> and <code>$var2</code> can be anything that is valid on the left-side of an alias-assignment.</p>

<pre class="sh_perl">    alias $bool ? $var : $var2 = $foo;
    alias $var &#38;&#38;= $foo;
    alias $var ||= $foo;
    alias $var //= $foo; # (perl 5.9.x or later)</pre>

<dt><a name='whole'></a><a name="whole_aggregate_assignment"
>whole aggregate assignment</a></dt>

<dd>
<p>These alias entire aggregates (arrays or hashes), not merely their contents. This means for example that <code>\@lexarray == \@foo</code>.</p>

<pre class="sh_perl">    alias my @lexarray = @foo;
    alias my %lexhash = %foo;
    alias @pkgarray = @foo;
    alias %pkghash = %foo;</pre>

<p>Making the left-side a dereference is also supported:</p>

<pre class="sh_perl">    alias @$ref = @foo;
    alias %$ref = %foo;</pre>

<p>and analogously to assignment to scalar dereference, these will change <code>$ref</code> to reference the aggregate, if <code>$ref</code> was undef or already a reference. If <code>$ref</code> is a string or glob, the corresponding package variable is aliased.</p>

<p>If the right-side expression is not an aggregate (of the same type), then a new one is implicitly constructed. This means:</p>

<pre class="sh_perl">    alias my @array = ($x, $y, $z);
    alias my %hash = (x =&#62; $x, y =&#62; $y);</pre>

<p>is translated to:</p>

<pre class="sh_perl">    alias my @array = @{ [$x, $y, $z] };
    alias my %hash = %{ {x =&#62; $x, y =&#62; $y} };</pre>

<p>If you want to merely replace the contents of the aggregate with aliases to the contents of another aggregate, but not alias the aggregates themselves, you can force list-assignment by parenthesizing the left side, see below.</p>

<dt><a name='list'></a><a name="list_assignment"
>list assignment</a></dt>

<dd>
<p>List assignment is any assignment where the left-side is an array-slice, hash-slice, or list in parentheses. This behaves essentially like many scalar assignments in parallel.</p>

<pre class="sh_perl">    alias my (@array) = ($x, $y, $z);
    alias my (%hash) = (x =&#62; $x, y =&#62; $y);
    alias my ($x, $y, @rest) = @_;
    alias @x[0, 1] = @x[1, 0];</pre>

<p>Any scalars that appear on the left side must be valid targets for scalar assignment. When an array or hash appears on the left side, normally as the last item, its contents are replaced by the list of all remaining right-side elements. <code>undef</code> can also appear on the left side to skip one corresponding item in the right-side list.</p>

<p>Beware when putting a parenthesized list on the left side. Just like Perl parses <code>print (1+2)*10</code> as <code>(print(1+2))*10</code>, it would parse <code>alias ($x, $y) = ($y, $x)</code> as <code>(alias($x, $y)) = ($y, $x)</code> which does not do any aliasing, and results in the &#34;Useless use of alias&#34; warning, if warnings are enabled.</p>

<p>To circumvent this issue, you can either one of the following:</p>

<pre class="sh_perl">    alias +($x, $y) = ($y, $x);
    alias { ($x, $y) = ($y, $x) };</pre>

<dt><a name='Anonymous'></a><a name="Anonymous_aggregate_constructors"
>Anonymous aggregate constructors</a></dt>

<dd>
<p>Return a reference to a new anonymous array or hash, populated with aliases. This means that for example <code>\$hashref-&#62;{x} == \$x</code>.</p>

<pre class="sh_perl">    my $arrayref = alias [$x, $y, $z];
    my $hashref = alias {x =&#62; $x, y =&#62; $y};</pre>

<p>Note that this also works:</p>

<pre class="sh_perl">    alias my $arrayref = [$x, $y, $z];
    alias my $hashref = {x =&#62; $x, y =&#62; $y};</pre>

<p>but this makes the lhs an alias to the temporary, and therefore read-only, reference made by <code>[]</code> or <code>{}</code>. Therefore later attempts to assign to <code>$arrayref</code> or <code>$hashref</code> results in an error. The anonymous aggregate that is referenced behaves the same in both cases obviously.</p>

<dt><a name='Array'></a><a name="Array_insertions"
>Array insertions</a></dt>

<dd>
<p>These work as usual, except the inserted elements are aliases.</p>

<pre class="sh_perl">    alias push @array, $foo;
    alias unshift @array, $foo;
    alias splice @array, 1, 2, $foo;</pre>

<p>An attempt to do any of these on tied (or &#34;magical&#34;) array will result in a &#34;Can&#39;t push/unshift/splice alias onto tied array&#34; error.</p>

<dt><a name='Returning'></a><a name="Returning_an_alias"
>Returning an alias</a></dt>

<dd>
<p>Returns aliases from the current <code>sub</code> or <code>eval</code>. Normally this only happens for lvalue subs, but <code>alias return</code> can be used in any sub. Lvalue subs only work for scalar return values, but <code>alias return</code> can handle a list of return values.</p>

<p>A sub call will very often copy the return value(s) immediately after they have been returned. <code>alias return</code> can&#39;t prevent that. To pass an alias through a sub return and into something else, the call site must process the return value using an aliasing operation, or at least a non-copying one. For example, ordinary assignment with the sub call on the right hand side will copy, but if the call site is in the scope of an <code>alias</code> pragma then the assignment will instead alias the return value.</p>

<p>When alias-returning a list of values from a subroutine, each individual value in the list is aliased. The list as a whole is not aliasable; it is not an array. At the call site, a list of aliases can be captured into separate variables or into an array, by an aliasing list assignment.</p>

<dt><a name='Subroutines'></a><a name="Subroutines_and_evaluations"
>Subroutines and evaluations</a></dt>

<dd>
<p>Placing a subroutine or <code>eval STRING</code> inside <code>alias</code> causes it to be compiled with aliasing semantics entirely. Additionally, the return from such a sub or eval, whether explicit using <code>return</code> or implicitly the last statement, will be an alias rather than a copy.</p>

<pre class="sh_perl">    alias { sub foo { $x } };

    my $subref = alias sub { $x };
    
    my $xref1 = \foo;
    my $xref2 = \alias eval &#39;$x&#39;;
    my $xref3 = \$subref-&#62;();</pre>

<p>Explicitly returning an alias can also be done using <code>alias return</code> inside any subroutine or evaluation.</p>

<pre class="sh_perl">    sub foo { alias return $x; }
    my $xref = \foo;</pre>

<dt><a name="Localization"
>Localization</a></dt>

<dd>
<p>Use of local inside <code>alias</code> usually behaves the same as local does in general, however there is a difference if the variable is tied: in this case, Perl doesn&#39;t localize the variable at all but instead preserves the tie by saving a copy of the current value, and restoring this value at end of scope.</p>

<pre class="sh_perl">    alias local $_ = $string;</pre>

<p>The aliasing semantics of <code>local</code> avoids copying by always localizing the variable itself, regardless of whether it is tied.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="IMPLEMENTATION"
>IMPLEMENTATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module does <b>not</b> use a source filter, and is therefore safe to use within eval STRING. Instead, Data::Alias hooks into the Perl parser, and replaces operations within the scope of <code>alias</code> by aliasing variants.</p>

<p>For those familiar with perl&#39;s internals: it triggers on a ck_rv2cv which resolves to the imported <code>alias</code> sub, and does a parser hack to allow the <code>alias BLOCK</code> syntax. When the ck_entersub is triggered that corresponds to it, the op is marked to be found later. The actual work is done in a peep-hook, which processes the marked entersub and its children, replacing the pp_addrs with aliasing replacements. The peep hook will also take care of any subs defined within the lexical (but not dynamical) scope between the ck_rv2cv and the ck_entersub.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="KNOWN_ISSUES"
>KNOWN ISSUES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='Lexical'></a><a name="Lexical_variables"
>Lexical variables</a></dt>

<dd>
<p>When aliasing existing lexical variables, the effect is limited in scope to the current subroutine and any closures create after the aliasing is done, even if the variable itself has wider scope. While partial fixes are possible, it cannot be fixed in any reliable or consistent way, and therefore I&#39;m keeping the current behaviour.</p>

<p>When aliasing a lexical that was declared outside the current subroutine, a compile-time warning is generated &#34;Aliasing of outer lexical variable has limited scope&#34; (warnings category &#34;closure&#34;).</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACKNOWLEDGEMENTS"
>ACKNOWLEDGEMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Specials thanks go to Elizabeth Mattijsen, Juerd Waalboer, and other members of the Amsterdam Perl Mongers, for their valuable feedback.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Matthijs van Duin &#60;xmath@cpan.org&#62; developed the module originally, and maintained it until 2007. Andrew Main (Zefram) &#60;zefram@fysh.org&#62; updated it to work with Perl versions 5.11.0 and later.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE"
>LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (C) 2003-2007 Matthijs van Duin. Copyright (C) 2010, 2011 Andrew Main (Zefram) &#60;zefram@fysh.org&#62;. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78275 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 01:46:58 2012 GMT (0.297796964645386) @cpansearch1 -->
 </body>
</html>
