<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Lingua::Stem - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Lingua-Stem",3]);
    _gaq.push(["_setCustomVar",5,"Release","Lingua-Stem-0.84",3]);
    _gaq.push(["_setCustomVar",3,"Module","Lingua::Stem",3]);
    _gaq.push(["_setCustomVar",1,"Author","SNOWHARE",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Lingua::Stem">permalink</a></div>
  <a href="/~snowhare/">Benjamin Franz</a> &gt;
  <a href="/~snowhare/Lingua-Stem-0.84/">Lingua-Stem-0.84</a> &gt;
  Lingua::Stem
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/7e9bccc3b75748418b22d6f2f9c2e7ae?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/S/SN/SNOWHARE/Lingua-Stem-0.84.tar.gz">Lingua-Stem-0.84.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Lingua%3A%3AStem;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~SNOWHARE/Lingua-Stem-0.84/lib/Lingua/Stem.pod">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?HTML%3A%3AIndex">HTML::Index</a><br>
<a href="/perldoc?Text%3A%3ABalanced">Text::Balanced</a><br>
<a href="/perldoc?String%3A%3AApprox">String::Approx</a><br>
<a href="/perldoc?Compress%3A%3AZlib">Compress::Zlib</a><br>
<a href="/perldoc?HTML%3A%3ATokeParser">HTML::TokeParser</a><br>
<a href="/perldoc?LWP%3A%3ASimple">LWP::Simple</a><br>
<a href="/perldoc?Params%3A%3AValidate">Params::Validate</a><br>
<a href="/perldoc?Test%3A%3ASimple">Test::Simple</a><br>
<a href="/perldoc?IO%3A%3ASelect">IO::Select</a><br>
<a href="/perldoc?Lingua%3A%3AIspell">Lingua::Ispell</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Lingua%3A%3AStem">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 2</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Lingua-Stem">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.84 &nbsp;
<span class="noprint">
  <a href="/src/SNOWHARE/Lingua-Stem-0.84/lib/Lingua/Stem.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Comparision_with_Lingua::Stem::Snowball'>Comparision with Lingua::Stem::Snowball</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CHANGES'>CHANGES</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#NOTES'>NOTES</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#CREDITS'>CREDITS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#TODO'>TODO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Lingua::Stem - Stemming of words</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use Lingua::Stem qw(stem);
    my $stemmmed_words_anon_array   = stem(@words);

    or for the OO inclined,

    use Lingua::Stem;
    my $stemmer = Lingua::Stem-&#62;new(-locale =&#62; &#39;EN-UK&#39;);
    $stemmer-&#62;stem_caching({ -level =&#62; 2 });
    my $stemmmed_words_anon_array   = $stemmer-&#62;stem(@words);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This routine applies stemming algorithms to its parameters, returning the stemmed words as appropriate to the selected locale.</p>

<p>You can import some or all of the class methods.</p>

<p>use Lingua::Stem qw (stem clear_stem_cache stem_caching add_exceptions delete_exceptions get_exceptions set_locale get_locale :all :locale :exceptions :stem :caching);</p>

<pre class="sh_perl"> :all        - imports  stem add_exceptions delete_exceptions get_exceptions
               set_locale get_locale
 :stem       - imports  stem
 :caching    - imports  stem_caching clear_stem_cache
 :locale     - imports  set_locale get_locale
 :exceptions - imports  add_exceptions delete_exceptions get_exceptions</pre>

<p>Currently supported locales are:</p>

<pre class="sh_perl">      DA          - Danish
      DE          - German
      EN          - English (also EN-US and EN-UK)
      FR          - French
      GL          - Galician
      IT          - Italian
      NO          - Norwegian
      PT          - Portuguese
      RU          - Russian (also RU-RU and RU-RU.KOI8-R)
      SV          - Swedish</pre>

<p>If you have the memory and lots of stemming to do, I <b>strongly</b> suggest using cache level 2 and processing lists in &#39;big chunks&#39; (long lists) for best performance.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Comparision_with_Lingua::Stem::Snowball"
>Comparision with Lingua::Stem::Snowball</a></h2>

<p>It functions fairly similarly to the Lingua::Stem::Snowball suite of stemmers, with the most significant differences being</p>

<p>1) Lingua::Stem is a &#39;pure perl&#39; (no compiled XS code is needed) suite. Lingua::Stem::Snowball is XS based (must be compiled).</p>

<p>2) Lingua::Stem works with Perl 5.6 or later Lingua::Stem::Snowball works with Perl 5.8 or later</p>

<p>3) Lingua::Stem has an &#39;exceptions&#39; system allowing you to override stemming on a &#39;case by case&#39; basis. Lingua::Stem::Snowball does not have an &#39;exceptions&#39; system.</p>

<p>4) A somewhat different set of supported languages:</p>

<pre class="sh_perl"> +---------------------------------------------------------------+
 | Language   | ISO code | Lingua::Stem | Lingua::Stem::Snowball |
 |---------------------------------------------------------------|
 | Danish     | da       |      yes     |          yes           |
 | Dutch      | nl       |       no     |          yes           |
 | English    | en       |      yes     |          yes           |
 | Finnish    | fi       |       no     |          yes           |
 | French     | fr       |      yes     |          yes           |
 | Galacian   | gl       |      yes     |           no           |
 | German     | de       |      yes     |          yes           |
 | Italian    | it       |      yes     |          yes           |
 | Norwegian  | no       |      yes     |          yes           |
 | Portuguese | pt       |      yes     |          yes           |
 | Russian    | ru       |      yes     |          yes           |
 | Spanish    | es       |       no     |          yes           |
 | Swedish    | sv       |      yes     |          yes           |
 +---------------------------------------------------------------+</pre>

<p>5) Lingua::Stem is faster for &#39;stem&#39; (circa 30% faster than Lingua::Stem::Snowball)</p>

<p>6) Lingua::Stem::Snowball is faster for &#39;stem_in_place&#39; (circa 30% faster than Lingua::Stem)</p>

<p>7) Lingua::Stem::Snowball is more consistent with regard to character set issues.</p>

<p>8) Lingua::Stem::Snowball is under active development. Lingua::Stem is currently fairly static.</p>

<p>Some benchmarks using Lingua::Stem 0.82 and Lingua::Stem::Snowball 0.94 gives an idea of how various options impact performance. The dataset was The Works of Edgar Allen Poe, volumes 1-5 from the Gutenberg Project processed 10 times in a row as single batch of words (processing a long text one word at a time is very inefficient and drops the performance of Lingua::Stem by about 90%: So &#34;Don&#39;t Do That&#34; ;) )</p>

<p>The benchmarks were run on a 3.06 Ghz P4 with HT on Fedora Core 5 Linux using Perl 5.8.8.</p>

<pre class="sh_perl"> +------------------------------------------------------------------------+
 | source: collected_works_poe.txt | words: 454691 | unique words: 22802  |
 |------------------------------------------------------------------------|
 | module                          | config        | avg secs | words/sec |
 |------------------------------------------------------------------------|
 | Lingua::Stem 0.82               | no cache      | 1.922    |  236560   |
 | Lingua::Stem 0.82               | cache level 2 | 1.235    |  368292   |
 | Lingua::Stem 0.82               | cachelv2, sip | 0.798    |  569494   |
 | Lingua::Stem::Snowball 0.94     | stem          | 1.622    |  280276   |
 | Lingua::Stem::Snowball 0.94     | stem_in_place | 0.627    |  725129   |
 +------------------------------------------------------------------------+</pre>

<p>The script for the benchmark is included in the examples/ directory of this distribution as benchmark_stemmers.plx.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CHANGES"
>CHANGES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> 0.84 2010.04.29 - Documentation fixes to the En stemmer and removal
                   of the accidentally included lib/Lingua/test.pl file
                   Thanks goes to Aaron Naiman for bringing the
                   documentation error to my attention and to
                   Alexandr Ciornii and &#39;kmx&#39; for the pointing out
                   the problem with the test.pl file.

 0.83 2007.06.23 - Disabled Italian locale build tests due to
                   changes in Lingua::Stem::It breaking the tests.

 0.82 2006.07.23 - Added &#39;stem_in_place&#39; to base package.
                   Tweaks to documentation and build tests.

 0.81 2004.07.26 - Minor documentation tweak. No functional change.

 0.80 2004.07.25 - Added &#39;RU&#39;, &#39;RU_RU&#39;, &#39;RU_RU.KOI-8&#39; locale.
                   Added support for Lingua::Stem::Ru to
                   Makefile.PL and autoloader.

                   Added documentation stressing use of caching
                   and batches for performance. Added support
                   for &#39;_&#39; as a seperator in the locale strings.
                   Added example benchmark script. Expanded copyright
                   credits.

 0.70 2004.04.26 - Added FR locale and documentation fixes
                   to Lingua::Stem::Gl

 0.61 2003.09.28 - Documentation fixes. No functional changes.

 0.60 2003.04.05 - Added more locales by wrappering various stemming
                   implementations. Documented currently supported
                   list of locales.

 0.50 2000.09.14 - Fixed major implementation error. Starting with
                   version 0.30 I forgot to include rulesets 2,3 and 4
                   for Porter&#39;s algorithm. The resulting stemming results
                   were very poor. Thanks go to &#60;csyap@netfision.com&#62;
                   for bringing the problem to my attention.

                   Unfortunately, the fix inherently generates *different*
                   stemming results than 0.30 and 0.40 did. If you
                   need identically broken output - use locale &#39;en-broken&#39;.

 0.40 2000.08.25 - Added stem caching support as an option. This
                   can provide a large speedup to the operation
                   of the stemmer. Caching is default turned off
                   to maximize compatibility with previous versions.

 0.30 1999.06.24 - Replaced core of &#39;En&#39; stemmers with code from
                   Jim Richardson &#60;jimr@maths.usyd.edu.au&#62;
                   Aliased &#39;en-us&#39; and &#39;en-uk&#39; to &#39;en&#39;
                   Fixed &#39;SYNOPSIS&#39; to correct return value
                   type for stemmed words (SYNOPIS error spotted
                   by &#60;Arved_37@chebucto.ns.ca&#62;)

 0.20 1999.06.15 - Changed to &#39;.pm&#39; module, moved into Lingua:: namespace,
                   added OO interface, optionalized the export of routines
                   into the caller&#39;s namespace, added named parameter
                   initialization, stemming exceptions, autoloaded
                   locale support and isolated case flattening to
                   localized stemmers prevent i18n problems later.

                   Input and output text are assumed to be in UTF8
                   encoding (no operational impact right now, but
                   will be important when extending the module to
                   non-English).</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='new'></a><a name="new(...);"
>new(...);</a></dt>

<dd>
<p>Returns a new instance of a Lingua::Stem object and, optionally, selection of the locale to be used for stemming.</p>

<p>Examples:</p>

<pre class="sh_perl">  # By default the locale is en
  $us_stemmer = Lingua::Stem-&#62;new;

  # Turn on the cache
  $us_stemmer-&#62;stem_caching({ -level =&#62; 2 });

  # Overriding the default for a specific instance
  $uk_stemmer = Lingua::Stem-&#62;new({ -locale =&#62; &#39;en-uk&#39; });

  # Overriding the default for a specific instance and changing the default
  $uk_stemmer = Lingua::Stem-&#62;new({ -default_locale =&#62; &#39;en-uk&#39; });</pre>
</dd>
</dl>

<dl>
<dt><a name='set_locale'></a><a name="set_locale($locale);"
>set_locale($locale);</a></dt>

<dd>
<p>Sets the locale to one of the recognized locales. locale identifiers are converted to lowercase.</p>

<p>Called as a class method, it changes the default locale for all subseqently generated object instances.</p>

<p>Called as an instance method, it only changes the locale for that particular instance.</p>

<p>&#39;croaks&#39; if passed an unknown locale.</p>

<p>Examples:</p>

<pre class="sh_perl"> # Change default locale
 Lingua::Stem::set_locale(&#39;en-uk&#39;); # UK&#39;s spellings

 # Change instance locale
 $self-&#62;set_locale(&#39;en-us&#39;);  # US&#39;s spellings</pre>
</dd>
</dl>

<dl>
<dt><a name='get_locale'></a><a name="get_locale;"
>get_locale;</a></dt>

<dd>
<p>Called as a class method, returns the current default locale.</p>

<p>Example:</p>

<pre class="sh_perl"> $default_locale = Lingua::Stem::get_locale;</pre>

<p>Called as an instance method, returns the locale for the instance</p>

<pre class="sh_perl"> $instance_locale = $stemmer-&#62;get_locale;</pre>
</dd>
</dl>

<dl>
<dt><a name='add_exceptions'></a><a name="add_exceptions($exceptions_hash_ref);"
>add_exceptions($exceptions_hash_ref);</a></dt>

<dd>
<p>Exceptions allow overriding the stemming algorithm on a case by case basis. It is done on an exact match and substitution basis: If a passed word is identical to the exception it will be replaced by the specified value. No case adjustments are performed.</p>

<p>Called as a class method, adds exceptions to the default exceptions list used for subsequently instantations of Lingua::Stem objects.</p>

<p>Example:</p>

<pre class="sh_perl"> # adding default exceptions
 Lingua::Stem::add_exceptions({ &#39;emily&#39; =&#62; &#39;emily&#39;,
                                &#39;driven&#39; =&#62; &#39;driven&#39;,
                            });</pre>

<p>Called as an instance method, adds exceptions only to the specific instance.</p>

<pre class="sh_perl"> # adding instance exceptions
 $stemmer-&#62;add_exceptions({ &#39;steely&#39; =&#62; &#39;steely&#39; });</pre>

<p>The exceptions shortcut the normal stemming - if an exception matches no further stemming is performed after the substitution.</p>

<p>Adding an exception with the same key value as an already defined exception replaces the pre-existing exception with the new value.</p>
</dd>
</dl>

<dl>
<dt><a name='delete_exceptions'></a><a name="delete_exceptions(@exceptions_list);"
>delete_exceptions(@exceptions_list);</a></dt>

<dd>
<p>The mirror of add_exceptions, this allows the _removal_ of exceptions from either the defaults for the class or from the instance.</p>

<pre class="sh_perl"> # Deletion of exceptions from class default exceptions
 Lingua::Stem::delete_exceptions(&#39;aragorn&#39;,&#39;frodo&#39;,&#39;samwise&#39;);

 # Deletion of exceptions from instance
 $stemmer-&#62;delete_exceptions(&#39;smaug&#39;,&#39;sauron&#39;,&#39;gollum&#39;);

 # Deletion of all class default exceptions
 delete_exceptions;

 # Deletion of all exceptions from instance
 $stemmer-&#62;delete_exceptions;</pre>
</dd>
</dl>

<dl>
<dt><a name='get_exceptions'></a><a name="get_exceptions;"
>get_exceptions;</a></dt>

<dd>
<p>As a class method with no parameters it returns all the default exceptions as an anonymous hash of &#39;exception&#39; =&#62; &#39;replace with&#39; pairs.</p>

<p>Example:</p>

<pre class="sh_perl"> # Returns all class default exceptions
 $exceptions = Lingua::Stem::get_exceptions;</pre>

<p>As a class method with parameters, it returns the default exceptions listed in the parameters as an anonymous hash of &#39;exception&#39; =&#62; &#39;replace with&#39; pairs. If a parameter specifies an undefined &#39;exception&#39;, the value is set to undef.</p>

<pre class="sh_perl"> # Returns class default exceptions for &#39;emily&#39; and &#39;george&#39;
 $exceptions = Lingua::Stem::get_exceptions(&#39;emily&#39;,&#39;george&#39;);</pre>

<p>As an instance method, with no parameters it returns the currently active exceptions for the instance.</p>

<pre class="sh_perl"> # Returns all instance exceptions
 $exceptions = $stemmer-&#62;get_exceptions;</pre>

<p>As an instance method with parameters, it returns the instance exceptions listed in the parameters as an anonymous hash of &#39;exception&#39; =&#62; &#39;replace with&#39; pairs. If a parameter specifies an undefined &#39;exception&#39;, the value is set to undef.</p>

<pre class="sh_perl"> # Returns instance exceptions for &#39;lisa&#39; and &#39;bart&#39;
 $exceptions = $stemmer-&#62;get_exceptions(&#39;lisa&#39;,&#39;bart&#39;);</pre>
</dd>
</dl>

<dl>
<dt><a name='stem'></a><a name="stem(@list);"
>stem(@list);</a></dt>

<dd>
<p>Called as a class method, it applies the default settings and stems the list of passed words, returning an anonymous array with the stemmed words in the same order as the passed list of words.</p>

<p>Example:</p>

<pre class="sh_perl">    # Default settings applied
    my $anon_array_of_stemmed_words = Lingua::Stem::stem(@words);</pre>

<p>Called as an instance method, it applies the instance&#39;s settings and stems the list of passed words, returning an anonymous array with the stemmed words in the same order as the passed list of words.</p>

<pre class="sh_perl">   # Instance&#39;s settings applied
   my $stemmed_words = $stemmer-&#62;stem(@words);</pre>

<p>The stemmer performs best when handed long lists of words rather than one word at a time. The cache also provides a huge speed up if you are processing lots of text.</p>
</dd>
</dl>

<dl>
<dt><a name='stem_in_place'></a><a name="stem_in_place(@list);"
>stem_in_place(@list);</a></dt>

<dd>
<p>Stems the passed list of words &#39;in place&#39;. It returns a reference to the modified list. This is about 60% faster than the &#39;stem&#39; method but modifies the original list. This currently only works for the English locales.</p>

<pre class="sh_perl"> Example:

  my @words = ( &#39;a&#39;, &#39;list&#39;, &#39;of&#39;, &#39;words&#39; );
  my $stemmed_list_of_words = stem_in_place(@words);

  # &#39;$stemmed_list_of_words&#39; refers to the @words list
  # after &#39;stem_in_place&#39; has executed</pre>

<p><b>DO NOT</b> use this method of stemming if you need to keep the original list of words. Its performance gain derives entirely from the fact it <b>does not</b> make a copy the original list but instead overwrites the original list.</p>

<p>If you try something like</p>

<pre class="sh_perl">  my @words_for_stemming = @words;
  my $stemmed_list_of_words = stem_in_place(@words_for_stemming);</pre>

<p>thinking you will get a speed boost while keeping the original list, you won&#39;t: You wipe out the speed gain completely with your copying of the original list. You should just use the &#39;stem&#39; method instead on the original list of words if you need to keep the original list.</p>
</dd>
</dl>

<dl>
<dt><a name='clear_stem_cache'></a><a name="clear_stem_cache;"
>clear_stem_cache;</a></dt>

<dd>
<p>Clears the stemming cache for the current locale. Can be called as either a class method or an instance method.</p>

<pre class="sh_perl">    $stemmer-&#62;clear_stem_cache;

    clear_stem_cache;</pre>
</dd>
</dl>

<dl>
<dt><a name='stem_caching'></a><a name="stem_caching_({_-level_=&#62;_0|1|2_});"
>stem_caching ({ -level =&#62; 0|1|2 });</a></dt>

<dd>
<p>Sets stemming cache level for the current locale. Can be called as either a class method or an instance method.</p>

<pre class="sh_perl">    $stemmer-&#62;stem_caching({ -level =&#62; 1 });

    stem_caching({ -level =&#62; 1 });</pre>

<p>For the sake of maximum compatibility with previous versions, stem caching is set to &#39;-level =&#62; 0&#39; by default.</p>

<p>&#39;-level&#39; definitions</p>

<pre class="sh_perl"> &#39;0&#39; means &#39;no caching&#39;. This is the default level.

 &#39;1&#39; means &#39;cache per run&#39;. This caches stemming results during each
    call to &#39;stem&#39;.

 &#39;2&#39; means &#39;cache indefinitely&#39;. This caches stemming results until
    either the process exits or the &#39;clear_stem_cache&#39; method is called.</pre>

<p>stem caching is global to the locale. If you turn on stem caching for one instance of a locale stemmer, all instances using the same locale will have it turned on as well.</p>

<p>I <b>STRONGLY</b> suggest turning caching on if you have enough memory and are processing a lot of data.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> 0.84 2008.07.27</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTES"
>NOTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>It started with the &#39;Text::Stem&#39; module which has been adapted into a more general framework and moved into the more language oriented &#39;Lingua&#39; namespace and re-organized to support a OOP interface as well as switch core &#39;En&#39; locale stemmers.</p>

<p>Version 0.40 added a cache for stemmed words. This can provide up to a several fold performance improvement.</p>

<p>Organization is such that extending this module to any number of languages should be direct and simple.</p>

<p>Case flattening is a function of the language, so the &#39;exceptions&#39; methods have to be used appropriately to the language. For &#39;En&#39; family stemming, use lower case words, only, for exceptions.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> Benjamin Franz &#60;snowhare@nihongo.org&#62;
 Jim Richardson  &#60;imr@maths.usyd.edu.au&#62;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CREDITS"
>CREDITS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> Jim Richardson             &#60;imr@maths.usyd.edu.au&#62;
 Ulrich Pfeifer             &#60;pfeifer@ls6.informatik.uni-dortmund.de&#62;
 Aldo Calpini               &#60;dada@perl.it&#62;
 xern                       &#60;xern@cpan.org&#62;
 Ask Solem Hoel             &#60;ask@unixmonks.net&#62;
 Dennis Haney               &#60;davh@davh.dk&#62;
 S&#233;bastien Darribere-Pleyt  &#60;sebastien.darribere@lefute.com&#62;
 Aleksandr Guidrevitch      &#60;pillgrim@mail.ru&#62;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> <a href="/~snowhare/Lingua-Stem-0.84/lib/Lingua/Stem/En.pm" class="podlinkpod"
>Lingua::Stem::En</a>            <a href="/~snowhare/Lingua-Stem-0.84/lib/Lingua/Stem/En.pm" class="podlinkpod"
>Lingua::Stem::En</a>            <a href="/~snowhare/Lingua-Stem-0.84/lib/Lingua/Stem/Da.pm" class="podlinkpod"
>Lingua::Stem::Da</a>
 <a href="/~snowhare/Lingua-Stem-0.84/lib/Lingua/Stem/De.pm" class="podlinkpod"
>Lingua::Stem::De</a>            <a href="/~snowhare/Lingua-Stem-0.84/lib/Lingua/Stem/Gl.pm" class="podlinkpod"
>Lingua::Stem::Gl</a>            <a href="/~snowhare/Lingua-Stem-0.84/lib/Lingua/Stem/No.pm" class="podlinkpod"
>Lingua::Stem::No</a>
 <a href="/~snowhare/Lingua-Stem-0.84/lib/Lingua/Stem/Pt.pm" class="podlinkpod"
>Lingua::Stem::Pt</a>            <a href="/~snowhare/Lingua-Stem-0.84/lib/Lingua/Stem/Sv.pm" class="podlinkpod"
>Lingua::Stem::Sv</a>            <a href="/perldoc?Lingua%3A%3AStem%3A%3AIt" class="podlinkpod"
>Lingua::Stem::It</a>
 <a href="/perldoc?Lingua%3A%3AStem%3A%3AFr" class="podlinkpod"
>Lingua::Stem::Fr</a>            <a href="/perldoc?Lingua%3A%3AStem%3A%3ARu" class="podlinkpod"
>Lingua::Stem::Ru</a>            <a href="/perldoc?Text%3A%3AGerman" class="podlinkpod"
>Text::German</a>
 <a href="/perldoc?Lingua%3A%3APT%3A%3AStemmer" class="podlinkpod"
>Lingua::PT::Stemmer</a>         <a href="/perldoc?Lingua%3A%3AGL%3A%3AStemmer" class="podlinkpod"
>Lingua::GL::Stemmer</a>         <a href="/perldoc?Lingua%3A%3AStem%3A%3ASnowball%3A%3ANo" class="podlinkpod"
>Lingua::Stem::Snowball::No</a>
 <a href="/perldoc?Lingua%3A%3AStem%3A%3ASnowball%3A%3ASe" class="podlinkpod"
>Lingua::Stem::Snowball::Se</a>  <a href="/perldoc?Lingua%3A%3AStem%3A%3ASnowball%3A%3ADa" class="podlinkpod"
>Lingua::Stem::Snowball::Da</a>  <a href="/perldoc?Lingua%3A%3AStem%3A%3ASnowball%3A%3ASv" class="podlinkpod"
>Lingua::Stem::Snowball::Sv</a>
 <a href="/perldoc?Lingua%3A%3AStemmer%3A%3AGL" class="podlinkpod"
>Lingua::Stemmer::GL</a>         <a href="/perldoc?Lingua%3A%3AStem%3A%3ASnowball" class="podlinkpod"
>Lingua::Stem::Snowball</a>

 <a href="http://snowball.tartarus.org" class="podlinkurl"
>http://snowball.tartarus.org</a></pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 1999-2004</p>

<p>Freerun Technologies, Inc (Freerun), Jim Richardson, University of Sydney &#60;imr@maths.usyd.edu.au&#62; and Benjamin Franz &#60;snowhare@nihongo.org&#62;. All rights reserved.</p>

<p>Text::German was written and is copyrighted by Ulrich Pfeifer.</p>

<p>Lingua::Stem::Snowball::Da was written and is copyrighted by Dennis Haney and Ask Solem Hoel.</p>

<p>Lingua::Stem::It was written and is copyrighted by Aldo Calpini.</p>

<p>Lingua::Stem::Snowball::No, Lingua::Stem::Snowball::Se, Lingua::Stem::Snowball::Sv were written and are copyrighted by Ask Solem Hoel.</p>

<p>Lingua::Stemmer::GL and Lingua::PT::Stemmer were written and are copyrighted by Xern.</p>

<p>Lingua::Stem::Fr was written and is copyrighted by Aldo Calpini and S&#195;&#169;bastien Darribere-Pley.</p>

<p>Lingua::Stem::Ru was written and is copyrighted by Aleksandr Guidrevitch.</p>

<p>This software may be freely copied and distributed under the same terms and conditions as Perl.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>None known.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TODO"
>TODO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Add more languages. Extend regression tests. Add support for the Lingua::Stem::Snowball family of stemmers as an alternative core stemming engine. Extend &#39;stem_in_place&#39; functionality to non-English stemmers.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78283 Uploads, 24725 Distributions
106015 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 06:59:59 2012 GMT (0.195092916488647) @cpansearch1 -->
 </body>
</html>
