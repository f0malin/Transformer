<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>GnuPG::Interface - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","GnuPG-Interface",3]);
    _gaq.push(["_setCustomVar",5,"Release","GnuPG-Interface-0.44",3]);
    _gaq.push(["_setCustomVar",3,"Module","GnuPG::Interface",3]);
    _gaq.push(["_setCustomVar",1,"Author","JESSE",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?GnuPG::Interface">permalink</a></div>
  <a href="/~jesse/">Jesse Vincent</a> &gt;
  <a href="/~jesse/GnuPG-Interface-0.44/">GnuPG-Interface-0.44</a> &gt;
  GnuPG::Interface
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/a4c33e0bd9522c7902c25a84afca525a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/J/JE/JESSE/GnuPG-Interface-0.44.tar.gz">GnuPG-Interface-0.44.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=GnuPG%3A%3AInterface;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~JESSE/GnuPG-Interface-0.44/lib/GnuPG/Interface.pm">Annotate this POD
(1)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Crypt%3A%3AOpenPGP">Crypt::OpenPGP</a><br>
<a href="/perldoc?Crypt%3A%3AGPG">Crypt::GPG</a><br>
<a href="/perldoc?IPC%3A%3AOpen3">IPC::Open3</a><br>
<a href="/perldoc?IPC%3A%3ARun">IPC::Run</a><br>
<a href="/perldoc?Math%3A%3APari">Math::Pari</a><br>
<a href="/perldoc?IO%3A%3AHandle">IO::Handle</a><br>
<a href="/perldoc?IO%3A%3AFile">IO::File</a><br>
<a href="/perldoc?Data%3A%3AAlias">Data::Alias</a><br>
<a href="/perldoc?CGI%3A%3ACarp">CGI::Carp</a><br>
<a href="/perldoc?Getopt%3A%3ALong">Getopt::Long</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=GnuPG%3A%3AInterface">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 7</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 3</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=GnuPG-Interface">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.44 &nbsp;
<span class="noprint">
  <a href="/src/JESSE/GnuPG-Interface-0.44/lib/GnuPG/Interface.pm">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~alexmv/GnuPG-Interface/lib/GnuPG/Interface.pm">GnuPG-Interface-0.45</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#How_Data_Member_Accessor_Methods_are_Created'>How Data Member Accessor Methods are Created</a>
    <li class='indexItem indexItem2'><a href='#Understanding_Bidirectional_Communication'>Understanding Bidirectional Communication</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#OBJECT_METHODS'>OBJECT METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Initialization_Methods'>Initialization Methods</a>
    <li class='indexItem indexItem2'><a href='#Object_Methods_which_use_a_GnuPG::Handles_Object'>Object Methods which use a GnuPG::Handles Object</a>
    <li class='indexItem indexItem2'><a href='#Other_Methods'>Other Methods</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Invoking_GnuPG_with_a_custom_call'>Invoking GnuPG with a custom call</a>
  <li class='indexItem indexItem1'><a href='#OBJECT_DATA_MEMBERS'>OBJECT DATA MEMBERS</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Encrypting'>Encrypting</a>
    <li class='indexItem indexItem2'><a href='#Signing'>Signing</a>
    <li class='indexItem indexItem2'><a href='#Decryption'>Decryption</a>
    <li class='indexItem indexItem2'><a href='#Printing_Keys'>Printing Keys</a>
    <li class='indexItem indexItem2'><a href='#Creating_GnuPG::PublicKey_Objects'>Creating GnuPG::PublicKey Objects</a>
    <li class='indexItem indexItem2'><a href='#Custom_GnuPG_call'>Custom GnuPG call</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#FAQ'>FAQ</a>
  <li class='indexItem indexItem1'><a href='#NOTES'>NOTES</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>GnuPG::Interface - Perl interface to GnuPG</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  # A simple example
  use IO::Handle;
  use GnuPG::Interface;
  
  # settting up the situation
  my $gnupg = GnuPG::Interface-&#62;new();
  $gnupg-&#62;options-&#62;hash_init( armor   =&#62; 1,
                              homedir =&#62; &#39;/home/foobar&#39; );

  # Note you can set the recipients even if you aren&#39;t encrypting!
  $gnupg-&#62;options-&#62;push_recipients( &#39;ftobin@cpan.org&#39; );
  $gnupg-&#62;options-&#62;meta_interactive( 0 );

  # how we create some handles to interact with GnuPG
  my $input   = IO::Handle-&#62;new();
  my $output  = IO::Handle-&#62;new();
  my $handles = GnuPG::Handles-&#62;new( stdin  =&#62; $input,
                                     stdout =&#62; $output );

  # Now we&#39;ll go about encrypting with the options already set
  my @plaintext = ( &#39;foobar&#39; );
  my $pid = $gnupg-&#62;encrypt( handles =&#62; $handles );
  
  # Now we write to the input of GnuPG
  print $input @plaintext;
  close $input;

  # now we read the output
  my @ciphertext = &#60;$output&#62;;
  close $output;

  waitpid $pid, 0;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>GnuPG::Interface and its associated modules are designed to provide an object-oriented method for interacting with GnuPG, being able to perform functions such as but not limited to encrypting, signing, decryption, verification, and key-listing parsing.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="How_Data_Member_Accessor_Methods_are_Created"
>How Data Member Accessor Methods are Created</a></h2>

<p>Each module in the GnuPG::Interface bundle relies on Any::Moose to generate the get/set methods used to set the object&#39;s data members. <i>This is very important to realize.</i> This means that any data member which is a list has special methods assigned to it for pushing, popping, and clearing the list.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Understanding_Bidirectional_Communication"
>Understanding Bidirectional Communication</a></h2>

<p>It is also imperative to realize that this package uses interprocess communication methods similar to those used in <a href="/perldoc?IPC%3A%3AOpen3" class="podlinkpod"
>IPC::Open3</a> and <a href="/perldoc?perlipc#Bidirectional_Communication_with_Another_Process" class="podlinkpod"
>&#34;Bidirectional Communication with Another Process&#34; in perlipc</a>, and that users of this package need to understand how to use this method because this package does not abstract these methods for the user greatly. This package is not designed to abstract this away entirely (partly for security purposes), but rather to simply help create &#39;proper&#39;, clean calls to GnuPG, and to implement key-listing parsing. Please see <a href="/perldoc?perlipc#Bidirectional_Communication_with_Another_Process" class="podlinkpod"
>&#34;Bidirectional Communication with Another Process&#34; in perlipc</a> to learn how to deal with these methods.</p>

<p>Using this package to do message processing generally invovlves creating a GnuPG::Interface object, creating a GnuPG::Handles object, setting some options in its <b>options</b> data member, and then calling a method which invokes GnuPG, such as <b>clearsign</b>. One then interacts with with the handles appropriately, as described in <a href="/perldoc?perlipc#Bidirectional_Communication_with_Another_Process" class="podlinkpod"
>&#34;Bidirectional Communication with Another Process&#34; in perlipc</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OBJECT_METHODS"
>OBJECT METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Initialization_Methods"
>Initialization Methods</a></h2>

<dl>
<dt><a name='new'></a><a name="new(_%initialization_args_)"
>new( <i>%initialization_args</i> )</a></dt>

<dd>
<p>This methods creates a new object. The optional arguments are initialization of data members.</p>

<dt><a name='hash_init'></a><a name="hash_init(_%args_)."
>hash_init( <i>%args</i> ).</a></dt>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Object_Methods_which_use_a_GnuPG::Handles_Object"
>Object Methods which use a GnuPG::Handles Object</a></h2>

<dl>
<dt><a name='list_public_keys'></a><a name="list_public_keys(_%_)"
>list_public_keys( % )</a></dt>

<dd>
<dt><a name='list_sigs'></a><a name="list_sigs(_%_)"
>list_sigs( % )</a></dt>

<dd>
<dt><a name='list_secret_keys'></a><a name="list_secret_keys(_%_)"
>list_secret_keys( % )</a></dt>

<dd>
<dt><a name='encrypt'></a><a name="encrypt(_%_)"
>encrypt( % )</a></dt>

<dd>
<dt><a name='encrypt_symmetrically'></a><a name="encrypt_symmetrically(_%_)"
>encrypt_symmetrically( % )</a></dt>

<dd>
<dt><a name='sign'></a><a name="sign(_%_)"
>sign( % )</a></dt>

<dd>
<dt><a name='clearsign'></a><a name="clearsign(_%_)"
>clearsign( % )</a></dt>

<dd>
<dt><a name='detach_sign'></a><a name="detach_sign(_%_)"
>detach_sign( % )</a></dt>

<dd>
<dt><a name='sign_and_encrypt'></a><a name="sign_and_encrypt(_%_)"
>sign_and_encrypt( % )</a></dt>

<dd>
<dt><a name='decrypt'></a><a name="decrypt(_%_)"
>decrypt( % )</a></dt>

<dd>
<dt><a name='verify'></a><a name="verify(_%_)"
>verify( % )</a></dt>

<dd>
<dt><a name='import_keys'></a><a name="import_keys(_%_)"
>import_keys( % )</a></dt>

<dd>
<dt><a name='export_keys'></a><a name="export_keys(_%_)"
>export_keys( % )</a></dt>

<dd>
<dt><a name='recv_keys'></a><a name="recv_keys(_%_)"
>recv_keys( % )</a></dt>

<dd>
<dt><a name='send_keys'></a><a name="send_keys(_%_)"
>send_keys( % )</a></dt>

<dd>
<p>These methods each correspond directly to or are very similar to a GnuPG command described in <a href="/perldoc?gpg" class="podlinkpod"
>gpg</a>. Each of these methods takes a hash, which currently must contain a key of <b>handles</b> which has the value of a GnuPG::Handles object. Another optional key is <b>command_args</b> which should have the value of an array reference; these arguments will be passed to GnuPG as command arguments. These command arguments are used for such things as determining the keys to list in the <b>export_keys</b> method. <i>Please note that GnuPG command arguments are not the same as GnuPG options</i>. To understand what are options and what are command arguments please read <a href="/perldoc?gpg#COMMANDS" class="podlinkpod"
>&#34;COMMANDS&#34; in gpg</a> and <a href="/perldoc?gpg#OPTIONS" class="podlinkpod"
>&#34;OPTIONS&#34; in gpg</a>.</p>

<p>Each of these calls returns the PID for the resulting GnuPG process. One can use this PID in a <code>waitpid</code> call instead of a <code>wait</code> call if more precise process reaping is needed.</p>

<p>These methods will attach the handles specified in the <b>handles</b> object to the running GnuPG object, so that bidirectional communication can be established. That is, the optionally-defined <b>stdin</b>, <b>stdout</b>, <b>stderr</b>, <b>status</b>, <b>logger</b>, and <b>passphrase</b> handles will be attached to GnuPG&#39;s input, output, standard error, the handle created by setting <b>status-fd</b>, the handle created by setting <b>logger-fd</b>, and the handle created by setting <b>passphrase-fd</b> respectively. This tying of handles of similar to the process done in <i>IPC::Open3</i>.</p>

<p>If you want the GnuPG process to read or write directly to an already-opened filehandle, you cannot do this via the normal <i>IPC::Open3</i> mechanisms. In order to accomplish this, set the appropriate <b>handles</b> data member to the already-opened filehandle, and then set the option <b>direct</b> to be true for that handle, as described in <a href="/~jesse/GnuPG-Interface-0.44/lib/GnuPG/Handles.pm#options" class="podlinkpod"
>&#34;options&#34; in GnuPG::Handles</a>. For example, to have GnuPG read from the file <em>input.txt</em> and write to <em>output.txt</em>, the following snippet may do:</p>

<pre class="sh_perl">  my $infile  = IO::File-&#62;new( &#39;input.txt&#39; );
  my $outfile = IO::File-&#62;new( &#39;&#62;output.txt&#39; );
  my $handles = GnuPG::Handles-&#62;new( stdin  =&#62; $infile,
                                     stdout =&#62; $outfile,
                                   );
  $handles-&#62;options( &#39;stdin&#39;  )-&#62;{direct} = 1;
  $handles-&#62;options( &#39;stdout&#39; )-&#62;{direct} = 1;</pre>

<p>If any handle in the <b>handles</b> object is not defined, GnuPG&#39;s input, output, and standard error will be tied to the running program&#39;s standard error, standard output, or standard error. If the <b>status</b> or <b>logger</b> handle is not defined, this channel of communication is never established with GnuPG, and so this information is not generated and does not come into play. If the <b>passphrase</b> data member handle of the <b>handles</b> object is not defined, but the the <b>passphrase</b> data member handle of GnuPG::Interface object is, GnuPG::Interface will handle passing this information into GnuPG for the user as a convience. Note that this will result in GnuPG::Interface storing the passphrase in memory, instead of having it simply &#39;pass-through&#39; to GnuPG via a handle.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Other_Methods"
>Other Methods</a></h2>

<dl>
<dt><a name='get_public_keys'></a><a name="get_public_keys(_@search_strings_)"
>get_public_keys( @search_strings )</a></dt>

<dd>
<dt><a name='get_secret_keys'></a><a name="get_secret_keys(_@search_strings_)"
>get_secret_keys( @search_strings )</a></dt>

<dd>
<dt><a name='get_public_keys_with_sigs'></a><a name="get_public_keys_with_sigs(_@search_strings_)"
>get_public_keys_with_sigs( @search_strings )</a></dt>

<dd>
<p>These methods create and return objects of the type GnuPG::PublicKey or GnuPG::SecretKey respectively. This is done by parsing the output of GnuPG with the option <b>with-colons</b> enabled. The objects created do or do not have signature information stored in them, depending if the method ends in <i>_sigs</i>; this separation of functionality is there because of performance hits when listing information with signatures.</p>

<dt><a name='test_default_key_passphrase'></a><a name="test_default_key_passphrase()"
>test_default_key_passphrase()</a></dt>

<dd>
<p>This method will return a true or false value, depending on whether GnuPG reports a good passphrase was entered while signing a short message using the values of the <b>passphrase</b> data member, and the default key specified in the <b>options</b> data member.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Invoking_GnuPG_with_a_custom_call"
>Invoking GnuPG with a custom call <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>GnuPG::Interface attempts to cover a lot of the commands of GnuPG that one would want to perform; however, there may be a lot more calls that GnuPG is and will be capable of, so a generic command interface is provided, <code>wrap_call</code>.</p>

<dl>
<dt><a name='wrap_call'></a><a name="wrap_call(_%args_)"
>wrap_call( %args )</a></dt>

<dd>
<p>Call GnuPG with a custom command. The %args hash must contain at least the following keys:</p>

<dl>
<dt><a name="commands"
>commands</a></dt>

<dd>
<p>The value of this key in the hash must be a reference to a a list of commands for GnuPG, such as <code>[ qw( --encrypt --sign ) ]</code>.</p>

<dt><a name="handles"
>handles</a></dt>

<dd>
<p>As with most other GnuPG::Interface methods, <b>handles</b> must be a GnuPG::Handles object.</p>
</dd>
</dl>

<p>The following keys are optional.</p>

<dl>
<dt><a name="command_args"
>command_args</a></dt>

<dd>
<p>As with other GnuPG::Interface methods, the value in hash for this key must be a reference to a list of arguments to be passed to the GnuPG command, such as which keys to list in a key-listing.</p>
</dd>
</dl>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OBJECT_DATA_MEMBERS"
>OBJECT DATA MEMBERS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name="call"
>call</a></dt>

<dd>
<p>This defines the call made to invoke GnuPG. Defaults to &#39;gpg&#39;; this should be changed if &#39;gpg&#39; is not in your path, or there is a different name for the binary on your system.</p>

<dt><a name="passphrase"
>passphrase</a></dt>

<dd>
<p>In order to lessen the burden of using handles by the user of this package, setting this option to one&#39;s passphrase for a secret key will allow the package to enter the passphrase via a handle to GnuPG by itself instead of leaving this to the user. See also <a href="/~jesse/GnuPG-Interface-0.44/lib/GnuPG/Handles.pm#passphrase" class="podlinkpod"
>&#34;passphrase&#34; in GnuPG::Handles</a>.</p>

<dt><a name="options"
>options</a></dt>

<dd>
<p>This data member, of the type GnuPG::Options; the setting stored in this data member are used to determine the options used when calling GnuPG via <i>any</i> of the object methods described in this package. See <a href="/~jesse/GnuPG-Interface-0.44/lib/GnuPG/Options.pm" class="podlinkpod"
>GnuPG::Options</a> for more information.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following setup can be done before any of the following examples:</p>

<pre class="sh_perl">  use IO::Handle;
  use GnuPG::Interface;

  my @original_plaintext = ( &#34;How do you doo?&#34; );
  my $passphrase = &#34;Three Little Pigs&#34;;

  my $gnupg = GnuPG::Interface-&#62;new();

  $gnupg-&#62;options-&#62;hash_init( armor    =&#62; 1,
                              recipients =&#62; [ &#39;ftobin@uiuc.edu&#39;,
                                              &#39;0xABCD1234&#39; ],
                              meta_interactive( 0 ),
                            );</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Encrypting"
>Encrypting</a></h2>

<pre class="sh_perl">  # We&#39;ll let the standard error of GnuPG pass through
  # to our own standard error, by not creating
  # a stderr-part of the $handles object.
  my ( $input, $output ) = ( IO::Handle-&#62;new(),
                             IO::Handle-&#62;new() );

  my $handles = GnuPG::Handles-&#62;new( stdin    =&#62; $input,
                                     stdout   =&#62; $output );
   
  # this sets up the communication
  # Note that the recipients were specified earlier
  # in the &#39;options&#39; data member of the $gnupg object.
  my $pid = $gnupg-&#62;encrypt( handles =&#62; $handles );

  # this passes in the plaintext
  print $input @original_plaintext;

  # this closes the communication channel,
  # indicating we are done
  close $input;

  my @ciphertext = &#60;$output&#62;;  # reading the output

  waitpid $pid, 0;  # clean up the finished GnuPG process</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Signing"
>Signing</a></h2>

<pre class="sh_perl">  # This time we&#39;ll catch the standard error for our perusing
  my ( $input, $output, $error ) = ( IO::Handle-&#62;new(),
                                     IO::Handle-&#62;new(),
                                     IO::Handle-&#62;new(),
                                   );

  my $handles = GnuPG::Handles-&#62;new( stdin    =&#62; $input,
                                     stdout   =&#62; $output,
                                     stderr   =&#62; $error,
                                   );

  # indicate our pasphrase through the
  # convience method
  $gnupg-&#62;passphrase( $passphrase );

  # this sets up the communication
  my $pid = $gnupg-&#62;sign( handles =&#62; $handles );

  # this passes in the plaintext
  print $input @original_plaintext;

  # this closes the communication channel,
  # indicating we are done
  close $input;

  my @ciphertext   = &#60;$output&#62;;  # reading the output
  my @error_output = &#60;$error&#62;;   # reading the error

  close $output;
  close $error;

  waitpid $pid, 0;  # clean up the finished GnuPG process</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Decryption"
>Decryption</a></h2>

<pre class="sh_perl">  # This time we&#39;ll catch the standard error for our perusing
  # as well as passing in the passphrase manually
  # as well as the status information given by GnuPG
  my ( $input, $output, $error, $passphrase_fh, $status_fh )
    = ( IO::Handle-&#62;new(),
        IO::Handle-&#62;new(),
        IO::Handle-&#62;new(),
        IO::Handle-&#62;new(),
        IO::Handle-&#62;new(),
      );

  my $handles = GnuPG::Handles-&#62;new( stdin      =&#62; $input,
                                     stdout     =&#62; $output,
                                     stderr     =&#62; $error,
                                     passphrase =&#62; $passphrase_fh,
                                     status     =&#62; $status_fh,
                                   );

  # this time we&#39;ll also demonstrate decrypting
  # a file written to disk
  # Make sure you &#34;use IO::File&#34; if you use this module!
  my $cipher_file = IO::File-&#62;new( &#39;encrypted.gpg&#39; );
   
  # this sets up the communication
  my $pid = $gnupg-&#62;decrypt( handles =&#62; $handles );

  # This passes in the passphrase
  print $passphrase_fh $passphrase;
  close $passphrase_fh;

  # this passes in the plaintext
  print $input $_ while &#60;$cipher_file&#62;;

  # this closes the communication channel,
  # indicating we are done
  close $input;
  close $cipher_file;

  my @plaintext    = &#60;$output&#62;;   # reading the output
  my @error_output = &#60;$error&#62;;    # reading the error
  my @status_info  = &#60;$status_fh&#62; # read the status info

  # clean up...
  close $output;
  close $error;
  close $status_fh;

  waitpid $pid, 0;  # clean up the finished GnuPG process</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Printing_Keys"
>Printing Keys</a></h2>

<pre class="sh_perl">  # This time we&#39;ll just let GnuPG print to our own output
  # and read from our input, because no input is needed!
  my $handles = GnuPG::Handles-&#62;new();
  
  my @ids = ( &#39;ftobin&#39;, &#39;0xABCD1234&#39; );

  # this time we need to specify something for
  # command_args because --list-public-keys takes
  # search ids as arguments
  my $pid = $gnupg-&#62;list_public_keys( handles      =&#62; $handles,
                                      command_args =&#62; [ @ids ] );
  
   waitpid $pid, 0;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Creating_GnuPG::PublicKey_Objects"
>Creating GnuPG::PublicKey Objects</a></h2>

<pre class="sh_perl">  my @ids = [ &#39;ftobin&#39;, &#39;0xABCD1234&#39; ];

  my @keys = $gnupg-&#62;get_public_keys( @ids );

  # no wait is required this time; it&#39;s handled internally
  # since the entire call is encapsulated</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Custom_GnuPG_call"
>Custom GnuPG call</a></h2>

<pre class="sh_perl">  # assuming $handles is a GnuPG::Handles object
  my $pid = $gnupg-&#62;wrap_call
    ( commands     =&#62; [ qw( --list-packets ) ],
      command_args =&#62; [ qw( test/key.1.asc ) ],
      handles      =&#62; $handles,
    );
    
    my @out = &#60;$handles-&#62;stdout()&#62;;
    waitpid $pid, 0;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FAQ"
>FAQ <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='How'></a><a name="How_do_I_get_GnuPG::Interface_to_read/write_directly_from_a_filehandle?"
>How do I get GnuPG::Interface to read/write directly from a filehandle?</a></dt>

<dd>
<p>You need to set GnuPG::Handles <b>direct</b> option to be true for the filehandles in concern. See <a href="/~jesse/GnuPG-Interface-0.44/lib/GnuPG/Handles.pm#options" class="podlinkpod"
>&#34;options&#34; in GnuPG::Handles</a> and <a href="#Object_Methods_which_use_a_GnuPG::Handles_Object" class="podlinkpod"
>&#34;Object Methods which use a GnuPG::Handles Object&#34;</a> for more information.</p>

<dt><a 
>Why do you make it so difficult to get GnuPG to write/read from a filehandle? In the shell, I can just call GnuPG with the --outfile option!</a></dt>

<dd>
<p>There are lots of issues when trying to tell GnuPG to read/write directly from a file, such as if the file isn&#39;t there, or there is a file, and you want to write over it! What do you want to happen then? Having the user of this module handle these questions beforehand by opening up filehandles to GnuPG lets the user know fully what is going to happen in these circumstances, and makes the module less error-prone.</p>

<dt><a name='When'></a><a name="When_having_GnuPG_process_a_large_message,_sometimes_it_just_hanges_there."
>When having GnuPG process a large message, sometimes it just hanges there.</a></dt>

<dd>
<p>Your problem may be due to buffering issues; when GnuPG reads/writes to <b>non-direct</b> filehandles (those that are sent to filehandles which you read to from into memory, not that those access the disk), buffering issues can mess things up. I recommend looking into <a href="/~jesse/GnuPG-Interface-0.44/lib/GnuPG/Handles.pm#options" class="podlinkpod"
>&#34;options&#34; in GnuPG::Handles</a>.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTES"
>NOTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This package is the successor to PGP::GPG::MessageProcessor, which I found to be too inextensible to carry on further. A total redesign was needed, and this is the resulting work.</p>

<p>After any call to a GnuPG-command method of GnuPG::Interface in which one passes in the handles, one should all <b>wait</b> to clean up GnuPG from the process table.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Currently there are problems when transmitting large quantities of information over handles; I&#39;m guessing this is due to buffering issues. This bug does not seem specific to this package; IPC::Open3 also appears affected.</p>

<p>I don&#39;t know yet how well this modules handles parsing OpenPGP v3 keys.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~jesse/GnuPG-Interface-0.44/lib/GnuPG/Options.pm" class="podlinkpod"
>GnuPG::Options</a>, <a href="/~jesse/GnuPG-Interface-0.44/lib/GnuPG/Handles.pm" class="podlinkpod"
>GnuPG::Handles</a>, <a href="/~jesse/GnuPG-Interface-0.44/lib/GnuPG/PublicKey.pm" class="podlinkpod"
>GnuPG::PublicKey</a>, <a href="/~jesse/GnuPG-Interface-0.44/lib/GnuPG/SecretKey.pm" class="podlinkpod"
>GnuPG::SecretKey</a>, <a href="/perldoc?gpg" class="podlinkpod"
>gpg</a>, <a href="/perldoc?perlipc#Bidirectional_Communication_with_Another_Process" class="podlinkpod"
>&#34;Bidirectional Communication with Another Process&#34; in perlipc</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>GnuPg::Interface is currently maintained by Jesse Vincent &#60;jesse@cpan.org&#62;.</p>

<p>Frank J. Tobin, ftobin@cpan.org was the original author of the package.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78290 Uploads, 24725 Distributions
106015 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 08:41:42 2012 GMT (0.151131153106689) @cpansearch1 -->
 </body>
</html>
