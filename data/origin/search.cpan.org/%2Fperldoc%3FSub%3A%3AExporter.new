<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Sub::Exporter - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Sub-Exporter",3]);
    _gaq.push(["_setCustomVar",5,"Release","Sub-Exporter-0.982",3]);
    _gaq.push(["_setCustomVar",3,"Module","Sub::Exporter",3]);
    _gaq.push(["_setCustomVar",1,"Author","RJBS",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Sub::Exporter">permalink</a></div>
  <a href="/~rjbs/">Ricardo SIGNES</a> &gt;
  <a href="/~rjbs/Sub-Exporter-0.982/">Sub-Exporter-0.982</a> &gt;
  Sub::Exporter
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/cec6b9b88295ead26c65f8747a76561b?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/R/RJ/RJBS/Sub-Exporter-0.982.tar.gz">Sub-Exporter-0.982.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Sub%3A%3AExporter;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~RJBS/Sub-Exporter-0.982/lib/Sub/Exporter.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Sub-Exporter">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.982 &nbsp;
<span class="noprint">
  <a href="/src/RJBS/Sub-Exporter-0.982/lib/Sub/Exporter.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Why_Generators?'>Why Generators?</a>
    <li class='indexItem indexItem2'><a href='#Other_Customizations'>Other Customizations</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXPORTER_CONFIGURATION'>EXPORTER CONFIGURATION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Export_Configuration'>Export Configuration</a>
    <li class='indexItem indexItem2'><a href='#Group_Configuration'>Group Configuration</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#Default_Groups'>Default Groups</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Collector_Configuration'>Collector Configuration</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CALLING_THE_EXPORTER'>CALLING THE EXPORTER</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Special_Exporter_Arguments'>Special Exporter Arguments</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SUBROUTINES'>SUBROUTINES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#setup_exporter'>setup_exporter</a>
    <li class='indexItem indexItem2'><a href='#build_exporter'>build_exporter</a>
    <li class='indexItem indexItem2'><a href='#default_generator'>default_generator</a>
    <li class='indexItem indexItem2'><a href='#default_installer'>default_installer</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXPORTS'>EXPORTS</a>
  <li class='indexItem indexItem1'><a href='#COMPARISONS'>COMPARISONS</a>
  <li class='indexItem indexItem1'><a href='#TODO'>TODO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#THANKS'>THANKS</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Sub::Exporter - a sophisticated exporter for custom-built routines</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>version 0.982</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Sub::Exporter must be used in two places.
First,
in an exporting module:</p>

<pre class="sh_perl">  # in the exporting module:
  package Text::Tweaker;
  use Sub::Exporter -setup =&#62; {
    exports =&#62; [
      qw(squish titlecase), # always works the same way
      reformat =&#62; \&#38;build_reformatter, # generator to build exported function
      trim     =&#62; \&#38;build_trimmer,
      indent   =&#62; \&#38;build_indenter,
    ],
    collectors =&#62; [ &#39;defaults&#39; ],
  };</pre>

<p>Then, in an importing module:</p>

<pre class="sh_perl">  # in the importing module:
  use Text::Tweaker
    &#39;squish&#39;,
    indent   =&#62; { margin =&#62; 5 },
    reformat =&#62; { width =&#62; 79, justify =&#62; &#39;full&#39;, -as =&#62; &#39;prettify_text&#39; },
    defaults =&#62; { eol =&#62; &#39;CRLF&#39; };</pre>

<p>With this setup, the importing module ends up with three routines: <code>squish</code>, <code>indent</code>, and <code>prettify_text</code>. The latter two have been built to the specifications of the importer -- they are not just copies of the code in the exporting package.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>ACHTUNG!</b> If you&#39;re not familiar with Exporter or exporting, read <a href="/~rjbs/Sub-Exporter-0.982/lib/Sub/Exporter/Tutorial.pod" class="podlinkpod"
>Sub::Exporter::Tutorial</a> first!</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Why_Generators?"
>Why Generators?</a></h2>

<p>The biggest benefit of Sub::Exporter over existing exporters (including the ubiquitous Exporter.pm) is its ability to build new coderefs for export, rather than to simply export code identical to that found in the exporting package.</p>

<p>If your module&#39;s consumers get a routine that works like this:</p>

<pre class="sh_perl">  use Data::Analyze qw(analyze);
  my $value = analyze($data, $tolerance, $passes);</pre>

<p>and they constantly pass only one or two different set of values for the non-<code>$data</code> arguments, your code can benefit from Sub::Exporter. By writing a simple generator, you can let them do this, instead:</p>

<pre class="sh_perl">  use Data::Analyze
    analyze =&#62; { tolerance =&#62; 0.10, passes =&#62; 10, -as =&#62; analyze10 },
    analyze =&#62; { tolerance =&#62; 0.15, passes =&#62; 50, -as =&#62; analyze50 };

  my $value = analyze10($data);</pre>

<p>The generator for that would look something like this:</p>

<pre class="sh_perl">  sub build_analyzer {
    my ($class, $name, $arg) = @_;

    return sub {
      my $data      = shift;
      my $tolerance = shift || $arg-&#62;{tolerance}; 
      my $passes    = shift || $arg-&#62;{passes}; 

      analyze($data, $tolerance, $passes);
    }
  }</pre>

<p>Your module&#39;s user now has to do less work to benefit from it -- and remember, you&#39;re often your own user! Investing in customized subroutines is an investment in future laziness.</p>

<p>This also avoids a common form of ugliness seen in many modules: package-level configuration. That is, you might have seen something like the above implemented like so:</p>

<pre class="sh_perl">  use Data::Analyze qw(analyze);
  $Data::Analyze::default_tolerance = 0.10;
  $Data::Analyze::default_passes    = 10;</pre>

<p>This might save time, until you have multiple modules using Data::Analyze. Because there is only one global configuration, they step on each other&#39;s toes and your code begins to have mysterious errors.</p>

<p>Generators can also allow you to export class methods to be called as subroutines:</p>

<pre class="sh_perl">  package Data::Methodical;
  use Sub::Exporter -setup =&#62; { exports =&#62; { some_method =&#62; \&#38;_curry_class } };

  sub _curry_class {
    my ($class, $name) = @_;
    sub { $class-&#62;$name(@_); };
  }</pre>

<p>Because of the way that exporters and Sub::Exporter work, any package that inherits from Data::Methodical can inherit its exporter and override its <code>some_method</code>. If a user imports <code>some_method</code> from that package, he&#39;ll receive a subroutine that calls the method on the subclass, rather than on Data::Methodical itself.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Other_Customizations"
>Other Customizations</a></h2>

<p>Building custom routines with generators isn&#39;t the only way that Sub::Exporters allows the importing code to refine its use of the exported routines. They may also be renamed to avoid naming collisions.</p>

<p>Consider the following code:</p>

<pre class="sh_perl">  # this program determines to which circle of Hell you will be condemned
  use Morality qw(sin virtue); # for calculating viciousness
  use Math::Trig qw(:all);     # for dealing with circles</pre>

<p>The programmer has inadvertantly imported two <code>sin</code> routines. The solution, in Exporter.pm-based modules, would be to import only one and then call the other by its fully-qualified name. Alternately, the importer could write a routine that did so, or could mess about with typeglobs.</p>

<p>How much easier to write:</p>

<pre class="sh_perl">  # this program determines to which circle of Hell you will be condemned
  use Morality qw(virtue), sin =&#62; { -as =&#62; &#39;offense&#39; };
  use Math::Trig -all =&#62; { -prefix =&#62; &#39;trig_&#39; };</pre>

<p>and to have at one&#39;s disposal <code>offense</code> and <code>trig_sin</code> -- not to mention <code>trig_cos</code> and <code>trig_tan</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORTER_CONFIGURATION"
>EXPORTER CONFIGURATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can configure an exporter for your package by using Sub::Exporter like so:</p>

<pre class="sh_perl">  package Tools;
  use Sub::Exporter
    -setup =&#62; { exports =&#62; [ qw(function1 function2 function3) ] };</pre>

<p>This is the simplest way to use the exporter, and is basically equivalent to this:</p>

<pre class="sh_perl">  package Tools;
  use base qw(Exporter);
  our @EXPORT_OK = qw(function1 function2 function2);</pre>

<p>Any basic use of Sub::Exporter will look like this:</p>

<pre class="sh_perl">  package Tools;
  use Sub::Exporter -setup =&#62; \%config;</pre>

<p>The following keys are valid in <code>%config</code>:</p>

<pre class="sh_perl">  exports - a list of routines to provide for exporting; each routine may be
            followed by generator
  groups  - a list of groups to provide for exporting; each must be followed by
            either (a) a list of exports, possibly with arguments for each
            export, or (b) a generator

  collectors - a list of names into which values are collected for use in
               routine generation; each name may be followed by a validator</pre>

<p>In addition to the basic options above, a few more advanced options may be passed:</p>

<pre class="sh_perl">  into_level - how far up the caller stack to look for a target (default 0)
  into       - an explicit target (package) into which to export routines</pre>

<p>In other words: Sub::Exporter installs a <code>import</code> routine which, when called, exports routines to the calling namespace. The <code>into</code> and <code>into_level</code> options change where those exported routines are installed.</p>

<pre class="sh_perl">  generator  - a callback used to produce the code that will be installed
               default: Sub::Exporter::default_generator

  installer  - a callback used to install the code produced by the generator
               default: Sub::Exporter::default_installer</pre>

<p>For information on how these callbacks are used, see the documentation for <code><a href="#default_generator" class="podlinkpod"
>&#34;default_generator&#34;</a></code> and <code><a href="#default_installer" class="podlinkpod"
>&#34;default_installer&#34;</a></code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Export_Configuration"
>Export Configuration</a></h2>

<p>The <code>exports</code> list may be provided as an array reference or a hash reference. The list is processed in such a way that the following are equivalent:</p>

<pre class="sh_perl">  { exports =&#62; [ qw(foo bar baz), quux =&#62; \&#38;quux_generator ] }

  { exports =&#62;
    { foo =&#62; undef, bar =&#62; undef, baz =&#62; undef, quux =&#62; \&#38;quux_generator } }</pre>

<p>Generators are code that return coderefs. They are called with four parameters:</p>

<pre class="sh_perl">  $class - the class whose exporter has been called (the exporting class)
  $name  - the name of the export for which the routine is being build
 \%arg   - the arguments passed for this export
 \%col   - the collections for this import</pre>

<p>Given the configuration in the <a href="#SYNOPSIS" class="podlinkpod"
>&#34;SYNOPSIS&#34;</a>, the following <code>use</code> statement:</p>

<pre class="sh_perl">  use Text::Tweaker
    reformat =&#62; { -as =&#62; &#39;make_narrow&#39;, width =&#62; 33 },
    defaults =&#62; { eol =&#62; &#39;CR&#39; };</pre>

<p>would result in the following call to <code>&#38;build_reformatter</code>:</p>

<pre class="sh_perl">  my $code = build_reformatter(
    &#39;Text::Tweaker&#39;,
    &#39;reformat&#39;,
    { width =&#62; 33 }, # note that -as is not passed in
    { defaults =&#62; { eol =&#62; &#39;CR&#39; } },
  );</pre>

<p>The returned coderef (<code>$code</code>) would then be installed as <code>make_narrow</code> in the calling package.</p>

<p>Instead of providing a coderef in the configuration, a reference to a method name may be provided. This method will then be called on the invocant of the <code>import</code> method. (In this case, we do not pass the <code>$class</code> parameter, as it would be redundant.)</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Group_Configuration"
>Group Configuration</a></h2>

<p>The <code>groups</code> list can be passed in the same forms as <code>exports</code>. Groups must have values to be meaningful, which may either list exports that make up the group (optionally with arguments) or may provide a way to build the group.</p>

<p>The simpler case is the first: a group definition is a list of exports. Here&#39;s the example that could go in exporter in the <a href="#SYNOPSIS" class="podlinkpod"
>&#34;SYNOPSIS&#34;</a>.</p>

<pre class="sh_perl">  groups  =&#62; {
    default    =&#62; [ qw(reformat) ],
    shorteners =&#62; [ qw(squish trim) ],
    email_safe =&#62; [
      &#39;indent&#39;,
      reformat =&#62; { -as =&#62; &#39;email_format&#39;, width =&#62; 72 }
    ],
  },</pre>

<p>Groups are imported by specifying their name prefixed be either a dash or a colon. This line of code would import the <code>shorteners</code> group:</p>

<pre class="sh_perl">  use Text::Tweaker qw(-shorteners);</pre>

<p>Arguments passed to a group when importing are merged into the groups options and passed to any relevant generators. Groups can contain other groups, but looping group structures are ignored.</p>

<p>The other possible value for a group definition, a coderef, allows one generator to build several exportable routines simultaneously. This is useful when many routines must share enclosed lexical variables. The coderef must return a hash reference. The keys will be used as export names and the values are the subs that will be exported.</p>

<p>This example shows a simple use of the group generator.</p>

<pre class="sh_perl">  package Data::Crypto;
  use Sub::Exporter -setup =&#62; { groups =&#62; { cipher =&#62; \&#38;build_cipher_group } };

  sub build_cipher_group {
    my ($class, $group, $arg) = @_;
    my ($encode, $decode) = build_codec($arg-&#62;{secret});
    return { cipher =&#62; $encode, decipher =&#62; $decode };
  }</pre>

<p>The <code>cipher</code> and <code>decipher</code> routines are built in a group because they are built together by code which encloses their secret in their environment.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Default_Groups"
>Default Groups</a></h3>

<p>If a module that uses Sub::Exporter is <code>use</code>d with no arguments, it will try to export the group named <code>default</code>. If that group has not been specifically configured, it will be empty, and nothing will happen.</p>

<p>Another group is also created if not defined: <code>all</code>. The <code>all</code> group contains all the exports from the exports list.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Collector_Configuration"
>Collector Configuration</a></h2>

<p>The <code>collectors</code> entry in the exporter configuration gives names which, when found in the import call, have their values collected and passed to every generator.</p>

<p>For example, the <code>build_analyzer</code> generator that we saw above could be rewritten as:</p>

<pre class="sh_perl"> sub build_analyzer {
   my ($class, $name, $arg, $col) = @_;

   return sub {
     my $data      = shift;
     my $tolerance = shift || $arg-&#62;{tolerance} || $col-&#62;{defaults}{tolerance}; 
     my $passes    = shift || $arg-&#62;{passes}    || $col-&#62;{defaults}{passes}; 

     analyze($data, $tolerance, $passes);
   }
 }</pre>

<p>That would allow the import to specify global defaults for his imports:</p>

<pre class="sh_perl">  use Data::Analyze
    &#39;analyze&#39;,
    analyze  =&#62; { tolerance =&#62; 0.10, -as =&#62; analyze10 },
    analyze  =&#62; { tolerance =&#62; 0.15, passes =&#62; 50, -as =&#62; analyze50 },
    defaults =&#62; { passes =&#62; 10 };

  my $A = analyze10($data);     # equivalent to analyze($data, 0.10, 10);
  my $C = analyze50($data);     # equivalent to analyze($data, 0.15, 10);
  my $B = analyze($data, 0.20); # equivalent to analyze($data, 0.20, 10);</pre>

<p>If values are provided in the <code>collectors</code> list during exporter setup, they must be code references, and are used to validate the importer&#39;s values. The validator is called when the collection is found, and if it returns false, an exception is thrown. We could ensure that no one tries to set a global data default easily:</p>

<pre class="sh_perl">  collectors =&#62; { defaults =&#62; sub { return (exists $_[0]-&#62;{data}) ? 0 : 1 } }</pre>

<p>Collector coderefs can also be used as hooks to perform arbitrary actions before anything is exported.</p>

<p>When the coderef is called, it is passed the value of the collection and a hashref containing the following entries:</p>

<pre class="sh_perl">  name        - the name of the collector
  config      - the exporter configuration (hashref)
  import_args - the arguments passed to the exporter, sans collections (aref)
  class       - the package on which the importer was called
  into        - the package into which exports will be exported</pre>

<p>Collectors with all-caps names (that is, made up of underscore or capital A through Z) are reserved for special use. The only currently implemented special collector is <code>INIT</code>, whose hook (if present in the exporter configuration) is always run before any other hook.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CALLING_THE_EXPORTER"
>CALLING THE EXPORTER <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Arguments to the exporter (that is, the arguments after the module name in a <code>use</code> statement) are parsed as follows:</p>

<p>First, the collectors gather any collections found in the arguments. Any reference type may be given as the value for a collector. For each collection given in the arguments, its validator (if any) is called.</p>

<p>Next, groups are expanded. If the group is implemented by a group generator, the generator is called. There are two special arguments which, if given to a group, have special meaning:</p>

<pre class="sh_perl">  -prefix - a string to prepend to any export imported from this group
  -suffix - a string to append to any export imported from this group</pre>

<p>Finally, individual export generators are called and all subs, generated or otherwise, are installed in the calling package. There is only one special argument for export generators:</p>

<pre class="sh_perl">  -as     - where to install the exported sub</pre>

<p>Normally, <code>-as</code> will contain an alternate name for the routine. It may, however, contain a reference to a scalar. If that is the case, a reference the generated routine will be placed in the scalar referenced by <code>-as</code>. It will not be installed into the calling package.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Special_Exporter_Arguments"
>Special Exporter Arguments</a></h2>

<p>The generated exporter accept some special options, which may be passed as the first argument, in a hashref.</p>

<p>These options are:</p>

<pre class="sh_perl">  into_level
  into
  generator
  installer</pre>

<p>These override the same-named configuration options described in <a href="#EXPORTER_CONFIGURATION" class="podlinkpod"
>&#34;EXPORTER CONFIGURATION&#34;</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUBROUTINES"
>SUBROUTINES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="setup_exporter"
>setup_exporter</a></h2>

<p>This routine builds and installs an <code>import</code> routine. It is called with one argument, a hashref containing the exporter configuration. Using this, it builds an exporter and installs it into the calling package with the name &#34;import.&#34; In addition to the normal exporter configuration, a few named arguments may be passed in the hashref:</p>

<pre class="sh_perl">  into       - into what package should the exporter be installed
  into_level - into what level up the stack should the exporter be installed
  as         - what name should the installed exporter be given</pre>

<p>By default the exporter is installed with the name <code>import</code> into the immediate caller of <code>setup_exporter</code>. In other words, if your package calls <code>setup_exporter</code> without providing any of the three above arguments, it will have an <code>import</code> routine installed.</p>

<p>Providing both <code>into</code> and <code>into_level</code> will cause an exception to be thrown.</p>

<p>The exporter is built by <code><a href="#build_exporter" class="podlinkpod"
>&#34;build_exporter&#34;</a></code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="build_exporter"
>build_exporter</a></h2>

<p>Given a standard exporter configuration, this routine builds and returns an exporter -- that is, a subroutine that can be installed as a class method to perform exporting on request.</p>

<p>Usually, this method is called by <code><a href="#setup_exporter" class="podlinkpod"
>&#34;setup_exporter&#34;</a></code>, which then installs the exporter as a package&#39;s import routine.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="default_generator"
>default_generator</a></h2>

<p>This is Sub::Exporter&#39;s default generator. It takes bits of configuration that have been gathered during the import and turns them into a coderef that can be installed.</p>

<pre class="sh_perl">  my $code = default_generator(\%arg);</pre>

<p>Passed arguments are:</p>

<pre class="sh_perl">  class - the class on which the import method was called
  name  - the name of the export being generated
  arg   - the arguments to the generator
  col   - the collections

  generator - the generator to be used to build the export (code or scalar ref)</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="default_installer"
>default_installer</a></h2>

<p>This is Sub::Exporter&#39;s default installer. It does what Sub::Exporter promises: it installs code into the target package.</p>

<pre class="sh_perl">  default_installer(\%arg, \@to_export);</pre>

<p>Passed arguments are:</p>

<pre class="sh_perl">  into - the package into which exports should be delivered</pre>

<p><code>@to_export</code> is a list of name/value pairs. The default exporter assigns code (the values) to named slots (the names) in the given package. If the name is a scalar reference, the scalar reference is made to point to the code reference instead.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORTS"
>EXPORTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Sub::Exporter also offers its own exports: the <code>setup_exporter</code> and <code>build_exporter</code> routines described above. It also provides a special &#34;setup&#34; collector, which will set up an exporter using the parameters passed to it.</p>

<p>Note that the &#34;setup&#34; collector (seen in examples like the <a href="#SYNOPSIS" class="podlinkpod"
>&#34;SYNOPSIS&#34;</a> above) uses <code>build_exporter</code>, not <code>setup_exporter</code>. This means that the special arguments like &#34;into&#34; and &#34;as&#34; for <code>setup_exporter</code> are not accepted here. Instead, you may write something like:</p>

<pre class="sh_perl">  use Sub::Exporter
    { into =&#62; &#39;Target::Package&#39; },
    -setup =&#62; {
      -as     =&#62; &#39;do_import&#39;,
      exports =&#62; [ ... ],
    }
  ;</pre>

<p>Finding a good reason for wanting to do this is left as as exercise for the reader.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COMPARISONS"
>COMPARISONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There are a whole mess of exporters on the CPAN. The features included in Sub::Exporter set it apart from any existing Exporter. Here&#39;s a summary of some other exporters and how they compare.</p>

<ul>
<li><a href="/perldoc?Exporter" class="podlinkpod"
>Exporter</a> and co.
<p>This is the standard Perl exporter. Its interface is a little clunky, but it&#39;s fast and ubiquitous. It can do some things that Sub::Exporter can&#39;t: it can export things other than routines, it can import &#34;everything in this group except this symbol,&#34; and some other more esoteric things. These features seem to go nearly entirely unused.</p>

<p>It always exports things exactly as they appear in the exporting module; it can&#39;t rename or customize routines. Its groups (&#34;tags&#34;) can&#39;t be nested.</p>

<p><a href="/perldoc?Exporter%3A%3ALite" class="podlinkpod"
>Exporter::Lite</a> is a whole lot like Exporter, but it does significantly less: it supports exporting symbols, but not groups, pattern matching, or negation.</p>

<p>The fact that Sub::Exporter can&#39;t export symbols other than subroutines is a good idea, not a missing feature.</p>

<p>For simple uses, setting up Sub::Exporter is about as easy as Exporter. For complex uses, Sub::Exporter makes hard things possible, which would not be possible with Exporter.</p>

<p>When using a module that uses Sub::Exporter, users familiar with Exporter will probably see no difference in the basics. These two lines do about the same thing in whether the exporting module uses Exporter or Sub::Exporter.</p>

<pre class="sh_perl">  use Some::Module qw(foo bar baz);
  use Some::Module qw(foo :bar baz);</pre>

<p>The definition for exporting in Exporter.pm might look like this:</p>

<pre class="sh_perl">  package Some::Module;
  use base qw(Exporter);
  our @EXPORT_OK   = qw(foo bar baz quux);
  our %EXPORT_TAGS = (bar =&#62; [ qw(bar baz) ]);</pre>

<p>Using Sub::Exporter, it would look like this:</p>

<pre class="sh_perl">  package Some::Module;
  use Sub::Exporter -setup =&#62; {
    exports =&#62; [ qw(foo bar baz quux) ],
    groups  =&#62; { bar =&#62; [ qw(bar baz) ]}
  };</pre>

<p>Sub::Exporter respects inheritance, so that a package may export inherited routines, and will export the most inherited version. Exporting methods without currying away the invocant is a bad idea, but Sub::Exporter allows you to do just that -- and anyway, there are other uses for this feature, like packages of exported subroutines which use inheritance specifically to allow more specialized, but similar, packages.</p>

<p><a href="/perldoc?Exporter%3A%3AEasy" class="podlinkpod"
>Exporter::Easy</a> provides a wrapper around the standard Exporter. It makes it simpler to build groups, but doesn&#39;t provide any more functionality. Because it is a front-end to Exporter, it will store your exporter&#39;s configuration in global package variables.</p>
</li>

<li>Attribute-Based Exporters
<p>Some exporters use attributes to mark variables to export. <a href="/perldoc?Exporter%3A%3ASimple" class="podlinkpod"
>Exporter::Simple</a> supports exporting any kind of symbol, and supports groups. Using a module like Exporter or Sub::Exporter, it&#39;s easy to look at one place and see what is exported, but it&#39;s impossible to look at a variable definition and see whether it is exported by that alone. Exporter::Simple makes this trade in reverse: each variable&#39;s declaration includes its export definition, but there is no one place to look to find a manifest of exports.</p>

<p>More importantly, Exporter::Simple does not add any new features to those of Exporter. In fact, like Exporter::Easy, it is just a front-end to Exporter, so it ends up storing its configuration in global package variables. (This means that there is one place to look for your exporter&#39;s manifest, actually. You can inspect the <code>@EXPORT</code> package variables, and other related package variables, at runtime.)</p>

<p><a href="/perldoc?Perl6%3A%3AExport" class="podlinkpod"
>Perl6::Export</a> isn&#39;t actually attribute based, but looks similar. Its syntax is borrowed from Perl 6, and implemented by a source filter. It is a prototype of an interface that is still being designed. It should probably be avoided for production work. On the other hand, <a href="/perldoc?Perl6%3A%3AExport%3A%3AAttrs" class="podlinkpod"
>Perl6::Export::Attrs</a> implements Perl 6-like exporting, but translates it into Perl 5 by providing attributes.</p>
</li>

<li>Other Exporters
<p><a href="/perldoc?Exporter%3A%3ARenaming" class="podlinkpod"
>Exporter::Renaming</a> wraps the standard Exporter to allow it to export symbols with changed names.</p>

<p><a href="/perldoc?Class%3A%3AExporter" class="podlinkpod"
>Class::Exporter</a> performs a special kind of routine generation, giving each importing package an instance of your class, and then exporting the instance&#39;s methods as normal routines. (Sub::Exporter, of course, can easily emulate this behavior, as shown above.)</p>

<p><a href="/perldoc?Exporter%3A%3ATidy" class="podlinkpod"
>Exporter::Tidy</a> implements a form of renaming (using its <code>_map</code> argument) and of prefixing, and implements groups. It also avoids using package variables for its configuration.</p>
</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TODO"
>TODO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li>write a set of longer, more demonstrative examples</li>

<li>solidify the &#34;custom exporter&#34; interface (see <code>&#38;default_exporter</code>)</li>

<li>add an &#34;always&#34; group</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Ricardo SIGNES, <code>&#60;rjbs@cpan.org&#62;</code></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="THANKS"
>THANKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Hans Dieter Pearcey provided helpful advice while I was writing Sub::Exporter. Ian Langworth and Shawn Sorichetti asked some good questions and hepled me improve my documentation quite a bit. Yuval Kogman helped me find a bunch of little problems.</p>

<p>Thanks, guys!</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Please report any bugs or feature requests through the web interface at <a href="http://rt.cpan.org" class="podlinkurl"
>http://rt.cpan.org</a>. I will be notified, and then you&#39;ll automatically be notified of progress on your bug as I make changes.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2006-2007, Ricardo SIGNES. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78152 Uploads, 24702 Distributions
105959 Modules, 9642 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Tue Apr 24 14:59:36 2012 GMT (0.072314977645874) @cpansearch1 -->
 </body>
</html>
