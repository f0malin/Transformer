<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>WWW::Robot - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","WWW-Robot",3]);
    _gaq.push(["_setCustomVar",5,"Release","WWW-Robot-0.026",3]);
    _gaq.push(["_setCustomVar",3,"Module","WWW::Robot",3]);
    _gaq.push(["_setCustomVar",1,"Author","KVENTIN",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?WWW::Robot">permalink</a></div>
  <a href="/~kventin/">&#x41A;&#x43E;&#x43D;&#x441;&#x442;&#x430;&#x43D;&#x442;&#x438;&#x43D; &#x41C;&#x430;&#x442;&#x44E;&#x445;&#x438;&#x43D;</a> &gt;
  <a href="/~kventin/WWW-Robot-0.026/">WWW-Robot-0.026</a> &gt;
  WWW::Robot
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/91c409e8066afb77045895b8432c189c?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/K/KV/KVENTIN/WWW-Robot-0.026.tar.gz">WWW-Robot-0.026.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=WWW%3A%3ARobot;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~KVENTIN/WWW-Robot-0.026/lib/WWW/Robot.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?LWP%3A%3ARobotUA">LWP::RobotUA</a><br>
<a href="/perldoc?LWP%3A%3ASimple">LWP::Simple</a><br>
<a href="/perldoc?WWW%3A%3AMechanize">WWW::Mechanize</a><br>
<a href="/perldoc?HTML%3A%3AParser">HTML::Parser</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?LWP%3A%3AUserAgent">LWP::UserAgent</a><br>
<a href="/perldoc?Image%3A%3AMagick">Image::Magick</a><br>
<a href="/perldoc?HTML%3A%3AElement">HTML::Element</a><br>
<a href="/perldoc?HTML%3A%3ATokeParser">HTML::TokeParser</a><br>
<a href="/perldoc?HTTP%3A%3AResponse">HTTP::Response</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=WWW%3A%3ARobot">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 2</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=WWW-Robot">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.026 &nbsp;
<span class="noprint">
  <a href="/src/KVENTIN/WWW-Robot-0.026/lib/WWW/Robot.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#QUESTIONS'>QUESTIONS</a>
  <li class='indexItem indexItem1'><a href='#CONSTRUCTOR'>CONSTRUCTOR</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#run'>run</a>
    <li class='indexItem indexItem2'><a href='#setAttribute'>setAttribute</a>
    <li class='indexItem indexItem2'><a href='#getAttribute'>getAttribute</a>
    <li class='indexItem indexItem2'><a href='#getAgent'>getAgent</a>
    <li class='indexItem indexItem2'><a href='#addUrl'>addUrl</a>
    <li class='indexItem indexItem2'><a href='#unshiftUrl'>unshiftUrl</a>
    <li class='indexItem indexItem2'><a href='#listUrls'>listUrls</a>
    <li class='indexItem indexItem2'><a href='#addHook'>addHook</a>
    <li class='indexItem indexItem2'><a href='#proxy,_no_proxy,_env_proxy'>proxy, no_proxy, env_proxy</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#ROBOT_ATTRIBUTES'>ROBOT ATTRIBUTES</a>
  <li class='indexItem indexItem1'><a href='#SUPPORTED_HOOKS'>SUPPORTED HOOKS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#restore-state'>restore-state</a>
    <li class='indexItem indexItem2'><a href='#invoke-on-all-url'>invoke-on-all-url</a>
    <li class='indexItem indexItem2'><a href='#follow-url-test'>follow-url-test</a>
    <li class='indexItem indexItem2'><a href='#invoke-on-followed-url'>invoke-on-followed-url</a>
    <li class='indexItem indexItem2'><a href='#invoke-on-get-error'>invoke-on-get-error</a>
    <li class='indexItem indexItem2'><a href='#invoke-on-contents'>invoke-on-contents</a>
    <li class='indexItem indexItem2'><a href='#invoke-on-link'>invoke-on-link</a>
    <li class='indexItem indexItem2'><a href='#add-url-test'>add-url-test</a>
    <li class='indexItem indexItem2'><a href='#continue-test'>continue-test</a>
    <li class='indexItem indexItem2'><a href='#save-state'>save-state</a>
    <li class='indexItem indexItem2'><a href='#generate-report'>generate-report</a>
    <li class='indexItem indexItem2'><a href='#modified-since'>modified-since</a>
    <li class='indexItem indexItem2'><a href='#invoke-after-get'>invoke-after-get</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Validating_Robot'>Validating Robot</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#MODULE_DEPENDENCIES'>MODULE DEPENDENCIES</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>WWW::Robot - configurable web traversal engine (for web robots &#38; agents)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use WWW::Robot;
   
    $robot = new WWW::Robot(
        &#39;NAME&#39;     =&#62; &#39;MyRobot&#39;,
        &#39;VERSION&#39;  =&#62; &#39;1.000&#39;,
        &#39;EMAIL&#39;    =&#62; &#39;fred@foobar.com&#39;
    );
   
    # ... configure the robot&#39;s operation ...
       
    $robot-&#62;run( &#39;<a href="http://www.foobar.com/" class="podlinkurl"
>http://www.foobar.com/</a>&#39; );</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module implements a configurable web traversal engine, for a <i>robot</i> or other web agent. Given an initial web page (<i>URL</i>), the Robot will get the contents of that page, and extract all links on the page, adding them to a list of URLs to visit.</p>

<p>Features of the Robot module include:</p>

<ul>
<li>Follows the <i>Robot Exclusion Protocol</i>.</li>

<li>Supports the META element proposed extensions to the Protocol.</li>

<li>Implements many of the <i>Guidelines for Robot Writers</i>.</li>

<li>Configurable.</li>

<li>Builds on standard Perl 5 modules for WWW, HTTP, HTML, etc.</li>
</ul>

<p>A particular application (robot instance) has to configure the engine using <i>hooks</i>, which are perl functions invoked by the Robot engine at specific points in the control loop.</p>

<p>The robot engine obeys the Robot Exclusion protocol, as well as a proposed addition. See <a href="#SEE_ALSO" class="podlinkpod"
>&#34;SEE ALSO&#34;</a> for references to documents describing the Robot Exclusion protocol and web robots.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="QUESTIONS"
>QUESTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This section contains a number of questions. I&#39;m interested in hearing what people think, and what you&#39;ve done faced with similar questions.</p>

<ul>
<li>What style of API is preferable for setting attributes? Maybe something like the following:
<pre class="sh_perl">    $robot-&#62;verbose(1);
    $traversal = $robot-&#62;traversal();</pre>

<p>I.e. a method for setting and getting each attribute, depending on whether you passed an argument?</p>
</li>

<li>Should the robot module support a standard logging mechanism? For example, an LOGFILE attribute, which is set to either a filename, or a filehandle reference. This would need a useful file format.</li>

<li>Should the module also support an ERRLOG attribute, with all warnings and error messages sent there?</li>

<li>At the moment the robot will print warnings and error messages to stderr, as well as returning error status. Should this behaviour be configurable? I.e. the ability to turn off warnings.</li>
</ul>

<p>The basic architecture of the Robot is as follows:</p>

<pre class="sh_perl">    Hook: restore-state
    Get Next URL
        Hook: invoke-on-all-url
        Hook: follow-url-test
        Hook: invoke-on-followed-url
        Get contents of URL
        Hook: invoke-on-contents
        Skip if not HTML
        Foreach link on page:
            Hook: invoke-on-link
            Hook: add-url-test
            Add link to robot&#39;s queue
    Continue? Hook: continue-test
    Hook: save-state
    Hook: generate-report</pre>

<p>Each of the hook procedures and functions is described below. A robot must provide a <code>follow-url-test</code> hook, and at least one of the following:</p>

<ul>
<li><code>invoke-on-all-url</code></li>

<li><code>invoke-on-followed-url</code></li>

<li><code>invoke-on-contents</code></li>

<li><code>invoke-on-link</code></li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTOR"
>CONSTRUCTOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">   $robot = new WWW::Robot( &#60;attribute-value-pairs&#62; );</pre>

<p>Create a new robot engine instance. If the constructor fails for any reason, a warning message will be printed, and <code>undef</code> will be returned.</p>

<p>Having created a new robot, it should be configured using the methods described below. Certain attributes of the Robot can be set during creation; they can be (re)set after creation, using the <code>setAttribute()</code> method.</p>

<p>The attributes of the Robot are described below, in the <i>Robot Attributes</i> section.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="run"
>run</a></h2>

<pre class="sh_perl">    $robot-&#62;run( @url_list );</pre>

<p>Invokes the robot, initially traversing the root URLs provided in <code>@url_list</code>, and any which have been provided with the <code>addUrl()</code> method before invoking <code>run()</code>. If you have not correctly configured the robot, the method will return <code>undef</code>.</p>

<p>The initial set of URLs can either be passed as arguments to the <b>run()</b> method, or with the <b>addUrl()</b> method before you invoke <b>run()</b>. Each URL can be specified either as a string, or as a URI::URL object.</p>

<p>Before invoking this method, you should have provided at least some of the hook functions. See the example given in the EXAMPLES section below.</p>

<p>By default the <b>run()</b> method will iterate until there are no more URLs in the queue. You can override this behavior by providing a <code>continue-test</code> hook function, which checks for the termination conditions. This particular hook function, and use of hook functions in general, are described below.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="setAttribute"
>setAttribute</a></h2>

<pre class="sh_perl">  $robot-&#62;setAttribute( ... attribute-value-pairs ... );</pre>

<p>Change the value of one or more robot attributes. Attributes are identified using a string, and take scalar values. For example, to specify the name of your robot, you set the <code>NAME</code> attribute:</p>

<pre class="sh_perl">   $robot-&#62;setAttribute( &#39;NAME&#39; =&#62; &#39;WebStud&#39; );</pre>

<p>The supported attributes for the Robot module are listed below, in the <i>ROBOT ATTRIBUTES</i> section.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="getAttribute"
>getAttribute</a></h2>

<pre class="sh_perl">  $value = $robot-&#62;getAttribute( &#39;attribute-name&#39; );</pre>

<p>Queries a Robot for the value of an attribute. For example, to query the version number of your robot, you would get the <code>VERSION</code> attribute:</p>

<pre class="sh_perl">   $version = $robot-&#62;getAttribute( &#39;VERSION&#39; );</pre>

<p>The supported attributes for the Robot module are listed below, in the <i>ROBOT ATTRIBUTES</i> section.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="getAgent"
>getAgent</a></h2>

<pre class="sh_perl">  $agent = $robot-&#62;getAgent();</pre>

<p>Returns the agent that is being used by the robot.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="addUrl"
>addUrl</a></h2>

<pre class="sh_perl">  $robot-&#62;addUrl( $url1, ..., $urlN );</pre>

<p>Used to add one or more URLs to the queue for the robot. Each URL can be passed as a simple string, or as a URI::URL object.</p>

<p>Returns True (non-zero) if all URLs were successfully added, False (zero) if at least one of the URLs could not be added.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="unshiftUrl"
>unshiftUrl</a></h2>

<pre class="sh_perl">  $robot-&#62;unshiftUrl( $url1, ..., $urlN );</pre>

<p>Used to add one or more URLs to the queue for the robot. Each URL can be passed as a simple string, or as a URI::URL object.</p>

<p>Returns True (non-zero) if all URLs were successfully added, False (zero) if at least one of the URLs could not be added.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="listUrls"
>listUrls</a></h2>

<pre class="sh_perl">  $robot-&#62;listUrls( );</pre>

<p>Returns a list of the URLs currently in the robots list to be traversed.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="addHook"
>addHook</a></h2>

<pre class="sh_perl">  $robot-&#62;addHook( $hook_name, \&#38;hook_function );
  
  sub hook_function { ... }</pre>

<p>Register a <i>hook</i> function which should be invoked by the robot at a specific point in the control flow. There are a number of <i>hook points</i> in the robot, which are identified by a string. For a list of hook points, see the <b>SUPPORTED HOOKS</b> section below.</p>

<p>If you provide more than one function for a particular hook, then the hook functions will be invoked in the order they were added. I.e. the first hook function called will be the first hook function you added.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="proxy,_no_proxy,_env_proxy"
>proxy, no_proxy, env_proxy</a></h2>

<p>These are convenience functions are setting proxy information on the User agent being used to make the requests.</p>

<pre class="sh_perl">    $robot-&#62;proxy( protocol, proxy );</pre>

<p>Used to specify a proxy for the given scheme. The protocol argument can be a reference to a list of protocols.</p>

<pre class="sh_perl">    $robot-&#62;no_proxy(domain1, ... domainN);</pre>

<p>Specifies that proxies should not be used for the specified domains or hosts.</p>

<pre class="sh_perl">    $robot-&#62;env_proxy();</pre>

<p>Load proxy settings from <i>protocol</i><b>_proxy</b> environment variables: <code>ftp_proxy</code>, <code>http_proxy</code>, <code>no_proxy</code>, etc.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ROBOT_ATTRIBUTES"
>ROBOT ATTRIBUTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This section lists the attributes used to configure a Robot object. Attributes are set using the <code>setAttribute()</code> method, and queried using the <code>getAttribute()</code> method.</p>

<p>Some of the attributes <b>must</b> be set before you start the Robot (with the <code>run()</code> method). These are marked as <b>mandatory</b> in the list below.</p>

<dl>
<dt><a name="NAME"
>NAME</a></dt>

<dd>
<p>The name of the Robot. This should be a sequence of alphanumeric characters, and is used to identify your Robot. This is used to set the <code>User-Agent</code> field of HTTP requests, and so will appear in server logs.</p>

<p><b>mandatory</b></p>

<dt><a name="VERSION"
>VERSION</a></dt>

<dd>
<p>The version number of your Robot. This should be a floating point number, in the format <b>N.NNN</b>.</p>

<p><b>mandatory</b></p>

<dt><a name="EMAIL"
>EMAIL</a></dt>

<dd>
<p>A valid email address which can be used to contact the Robot&#39;s owner, for example by someone who wishes to complain about the behavior of your robot.</p>

<p><b>mandatory</b></p>

<dt><a name="VERBOSE"
>VERBOSE</a></dt>

<dd>
<p>A boolean flag which specifies whether the Robot should display verbose status information as it runs.</p>

<p>Default: 0 (false)</p>

<dt><a name="TRAVERSAL"
>TRAVERSAL</a></dt>

<dd>
<p>Specifies what traversal style should be adopted by the Robot. Valid values are <i>depth</i> and <i>breadth</i>.</p>

<p>Default: depth</p>

<dt><a name="IGNORE_TEXT"
>IGNORE_TEXT</a></dt>

<dd>
<p>Specifies whether the HTML structure passed to the <i>invoke-on-contents</i> hook function should include the textual content of the page, or just the HTML elements.</p>

<p>Default: 1 (true)</p>

<dt><a name="IGNORE_UNKNOWN"
>IGNORE_UNKNOWN</a></dt>

<dd>
<p>Specifies whether the HTML structure passed to the <i>invoke-on-contents</i> hook function should ignore unkonwn HTML elements.</p>

<p>Default: 1 (true)</p>

<dt><a name="CHECK_MIME_TYPES"
>CHECK_MIME_TYPES</a></dt>

<dd>
<p>This tells the robot that if it can&#39;t easily determine the MIME type of a link from its URL, to issue a HEAD request to check the MIME type directly, before adding the link.</p>

<p>Default: 1 (true)</p>

<dt><a name="USERAGENT"
>USERAGENT</a></dt>

<dd>
<p>Allows the caller to specify its own user agent to make the HTTP requests.</p>

<p>Default: LWP::RobotUA object created by the robot</p>

<dt><a name="ACCEPT_LANGUAGE"
>ACCEPT_LANGUAGE</a></dt>

<dd>
<p>Optionally allows the caller to specify the list of languages that the robot accepts. This is added as an &#34;Accept-Language&#34; header field in the HTTP request. Takes an array reference.</p>

<dt><a name="DELAY"
>DELAY</a></dt>

<dd>
<p>Optionally set the delay between requests for the user agent, in minutes. The default for this is 1 (see LWP::RobotUA).</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORTED_HOOKS"
>SUPPORTED HOOKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This section lists the hooks which are supported by the WWW::Robot module. The first two arguments passed to a hook function are always the Robot object followed by the name of the hook being invoked. I.e. the start of a hook function should look something like:</p>

<pre class="sh_perl">    sub my_hook_function
    {
        my $robot = shift;
        my $hook  = shift;
        # ... other, hook-specific, arguments</pre>

<p>Wherever a hook function is passed a <code>$url</code> argument, this will be a URI::URL object, with the URL fully specified. I.e. even if the URL was seen in a relative link, it will be passed as an absolute URL.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="restore-state"
>restore-state</a></h2>

<pre class="sh_perl">   sub hook { my($robot, $hook_name) = @_; }</pre>

<p>This hook is invoked just before entering the main iterative loop of the robot. The intention is that the hook will be used to restore state, if such an operation is required.</p>

<p>This can be helpful if the robot is running in an incremental mode, where state is saved between each run of the robot.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="invoke-on-all-url"
>invoke-on-all-url</a></h2>

<pre class="sh_perl">   sub hook { my($robot, $hook_name, $url) = @_; }</pre>

<p>This hook is invoked on all URLs seen by the robot, regardless of whether the URL is actually traversed. In addition to the standard <code>$robot</code> and <code>$hook</code> arguments, the third argument is <code>$url</code>, which is the URL being travered by the robot.</p>

<p>For a given URL, the hook function will be invoked at most once, regardless of how many times the URL is seen by the Robot. If you are interested in seeing the URL every time, you can use the <b>invoke-on-link</b> hook.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="follow-url-test"
>follow-url-test</a></h2>

<pre class="sh_perl">   sub hook { my($robot, $hook_name, $url) = @_; return $boolean; }</pre>

<p>This hook is invoked to determine whether the robot should traverse the given URL. If the hook function returns 0 (zero), then the robot will do nothing further with the URL. If the hook function returns non-zero, then the robot will get the contents of the URL, invoke further hooks, and extract links if the contents are HTML.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="invoke-on-followed-url"
>invoke-on-followed-url</a></h2>

<pre class="sh_perl">   sub hook { my($robot, $hook_name, $url) = @_; }</pre>

<p>This hook is invoked on URLs which are about to be traversed by the robot; i.e. URLs which have passed the follow-url-test hook.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="invoke-on-get-error"
>invoke-on-get-error</a></h2>

<pre class="sh_perl">   sub hook { my($robot, $hook_name, $url, $response) = @_; }</pre>

<p>This hook is invoked if the Robot ever fails to get the contents of a URL. The <code>$response</code> argument is an object of type HTTP::Response.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="invoke-on-contents"
>invoke-on-contents</a></h2>

<pre class="sh_perl">   sub hook { my($robot, $hook, $url, $response, $structure) = @_; }</pre>

<p>This hook function is invoked for all URLs for which the contents are successfully retrieved.</p>

<p>The <code>$url</code> argument is a URI::URL object for the URL currently being processed by the Robot engine.</p>

<p>The <code>$response</code> argument is an HTTP::Response object, the result of the GET request on the URL.</p>

<p>The <code>$structure</code> argument is an HTML::Element object which is the root of a tree structure constructed from the contents of the URL. You can set the <code>IGNORE_TEXT</code> attribute to specify whether the structure passed includes the textual content of the page, or just the HTML elements. You can set the <code>IGNORE_UNKNOWN</code> attribute to specify whether the structure passed includes unkown HTML elements.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="invoke-on-link"
>invoke-on-link</a></h2>

<pre class="sh_perl">   sub hook { my($robot, $hook_name, $from_url, $to_url) = @_; }</pre>

<p>This hook function is invoked for all links seen as the robot traverses. When the robot is parsing a page (<b>$from_url</b>) for links, for every link seen the <i>invoke-on-link</i> hook is invoked with the URL of the source page, and the destination URL. The destination URL is in canonical form.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="add-url-test"
>add-url-test</a></h2>

<pre class="sh_perl">   sub hook { my($robot, $hook_name, $url) = @_; }</pre>

<p>This hook function is invoked for all links seen as the robot traverses. If the hook function returns non-zero, then the robot will add the URL given by $url to its list of URLs to be traversed.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="continue-test"
>continue-test</a></h2>

<pre class="sh_perl">   sub hook { my($robot) = @_; }</pre>

<p>This hook is invoked at the end of the robot&#39;s main iterative loop. If the hook function returns non-zero, then the robot will continue execution with the next URL. If the hook function returns zero, then the Robot will terminate the main loop, and close down after invoking the following two hooks.</p>

<p>If no <code>continue-test</code> hook function is provided, then the robot will always loop.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="save-state"
>save-state</a></h2>

<pre class="sh_perl">   sub hook { my($robot) = @_; }</pre>

<p>This hook is used to save any state information required by the robot application.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="generate-report"
>generate-report</a></h2>

<pre class="sh_perl">   sub hook { my($robot) = @_; }</pre>

<p>This hook is used to generate a report for the run of the robot, if such is desired.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="modified-since"
>modified-since</a></h2>

<p>If you provide this hook function, it will be invoked for each URL before the robot actually requests it. The function can return a time to use with the If-Modified-Since HTTP header. This can be used by a robot to only process those pages which have changed since the last visit.</p>

<p>Your hook function should be declared as follows:</p>

<pre class="sh_perl">    sub modifed_since_hook
    {
        my $robot = shift;        # instance of Robot module
        my $hook  = shift;        # name of hook invoked
        my $url   = shift;        # URI::URL for the url in question
    
        # ... calculate time ...
        return $time;
    }</pre>

<p>If your function returns anything other than <code>undef</code>, then a <b>If-Modified-Since:</b> field will be added to the request header.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="invoke-after-get"
>invoke-after-get</a></h2>

<p>This hook function is invoked immediately after the robot makes each GET request. This means your hook function will see every type of response, not just successful GETs. The hook function is passed two arguments: the <code>$url</code> we tried to GET, and the <code>$response</code> which resulted.</p>

<p>If you provided a modified-since hook, then provide an invoke-after-get function, and look for error code 304 (or RC_NOT_MODIFIED if you are using HTTP::Status, which you should be :-):</p>

<pre class="sh_perl">    sub after_get_hook
    {
        my($robot, $hook, $url, $response) = @_;
        
        if ($response-&#62;code == RC_NOT_MODIFIED)
        {
        }
    }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This section illustrates use of the Robot module, with code snippets from several sample Robot applications. The code here is not intended to show the right way to code a web robot, but just illustrates the API for using the Robot.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Validating_Robot"
>Validating Robot</a></h2>

<p>This is a simple robot which you could use to validate your web site. The robot uses <b>weblint</b> to check the contents of URLs of type <b>text/html</b></p>

<pre class="sh_perl">   #!/usr/bin/perl
   require 5.002;
   use WWW::Robot;
   
   $rootDocument = $ARGV[0];
   
   $robot = new WWW::Robot(&#39;NAME&#39;     =&#62;  &#39;Validator&#39;,
                           &#39;VERSION&#39;  =&#62;  1.000,
                           &#39;EMAIL&#39;    =&#62;  &#39;fred@foobar.com&#39;);
   
   $robot-&#62;addHook(&#39;follow-url-test&#39;, \&#38;follow_test);
   $robot-&#62;addHook(&#39;invoke-on-contents&#39;, \&#38;validate_contents);
   
   $robot-&#62;run($rootDocument);
   
   #-------------------------------------------------------
   sub follow_test {
      my($robot, $hook, $url) = @_;
   
      return 0 unless $url-&#62;scheme eq &#39;http&#39;;
      return 0 if $url =~ /\.(gif|jpg|png|xbm|au|wav|mpg)$/;
  
      #---- we&#39;re only interested in pages on our site ----
      return $url =~ /^$rootDocument/;
   }
   
   #-------------------------------------------------------
   sub validate_contents {
      my($robot, $hook, $url, $response, $structure) = @_;
   
      return unless $response-&#62;content_type eq &#39;text/html&#39;;

      # some validation on $structure ...
   
   }</pre>

<p>If you are behind a firewall, then you will have to add something like the following, just before calling the <code>run()</code> method:</p>

<pre class="sh_perl">   $robot-&#62;proxy([&#39;ftp&#39;, &#39;http&#39;, &#39;wais&#39;, &#39;gopher&#39;],
                 &#39;<a href="http://firewall:8080/" class="podlinkurl"
>http://firewall:8080/</a>&#39;);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MODULE_DEPENDENCIES"
>MODULE DEPENDENCIES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Robot.pm module builds on a lot of existing Net, WWW and other Perl modules. Some of the modules are part of the core Perl distribution, and the latest versions of all modules are available from the Comprehensive Perl Archive Network (CPAN). The modules used are:</p>

<dl>
<dt><a name='HTTP'></a><a name="HTTP::Request"
>HTTP::Request</a></dt>

<dd>
<p>This module is used to construct HTTP requests, when retrieving the contents of a URL, or using the HEAD request to see if a URL exists.</p>

<dt><a name='HTML'></a><a name="HTML::LinkExtor"
>HTML::LinkExtor</a></dt>

<dd>
<p>This is used to extract the URLs from the links on a page.</p>

<dt><a name='HTML'></a><a name="HTML::TreeBuilder"
>HTML::TreeBuilder</a></dt>

<dd>
<p>This module builds a tree data structure from the contents of an HTML page. This is also used to check for page-specific Robot exclusion commands, using the META element.</p>

<dt><a name='URI'></a><a name="URI::URL"
>URI::URL</a></dt>

<dd>
<p>This module implements a class for URL objects, providing resolution of relative URLs, and access to the different components of a URL.</p>

<dt><a name='LWP'></a><a name="LWP::RobotUA"
>LWP::RobotUA</a></dt>

<dd>
<p>This is a wrapper around the LWP::UserAgent class. A <i>UserAgent</i> is used to connect to servers over the network, and make requests. The RobotUA module provides transparent compliance with the <i>Robot Exclusion Protocol</i>.</p>

<dt><a name='HTTP'></a><a name="HTTP::Status"
>HTTP::Status</a></dt>

<dd>
<p>This has definitions for HTTP response codes, so you can say RC_NOT_MODIFIED instead of 304.</p>
</dd>
</dl>

<p>All of these modules are available as part of the libwww-perl5 distribution, which is also available from CPAN.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='The'></a><a name="The_SAS_Group_Home_Page"
>The SAS Group Home Page</a></dt>

<dd>
<p><a href="http://www.cre.canon.co.uk/sas.html" class="podlinkurl"
>http://www.cre.canon.co.uk/sas.html</a></p>

<p>This is the home page of the Group at Canon Research Centre Europe who are responsible for Robot.pm.</p>

<dt><a name='Robot'></a><a name="Robot_Exclusion_Protocol"
>Robot Exclusion Protocol</a></dt>

<dd>
<p><a href="http://info.webcrawler.com/mak/projects/robots/norobots.html" class="podlinkurl"
>http://info.webcrawler.com/mak/projects/robots/norobots.html</a></p>

<p>This is a <i>de facto</i> standard which defines how a `well behaved&#39; Robot client should interact with web servers and web pages.</p>

<dt><a name='Guidelines'></a><a name="Guidelines_for_Robot_Writers"
>Guidelines for Robot Writers</a></dt>

<dd>
<p><a href="http://info.webcrawler.com/mak/projects/robots/guidelines.html" class="podlinkurl"
>http://info.webcrawler.com/mak/projects/robots/guidelines.html</a></p>

<p>Guidelines and suggestions for those who are (considering) developing a web robot.</p>

<dt><a name='Weblint'></a><a name="Weblint_Home_Page"
>Weblint Home Page</a></dt>

<dd>
<p><a href="http://www.cre.canon.co.uk/~neilb/weblint/" class="podlinkurl"
>http://www.cre.canon.co.uk/~neilb/weblint/</a></p>

<p>Weblint is a perl script which is used to check HTML for syntax errors and stylistic problems, in the same way <b>lint</b> is used to check C.</p>

<dt><a name='Comprehensive'></a><a name="Comprehensive_Perl_Archive_Network_(CPAN)"
>Comprehensive Perl Archive Network (CPAN)</a></dt>

<dd>
<p><a href="http://www.perl.com/perl/CPAN/" class="podlinkurl"
>http://www.perl.com/perl/CPAN/</a></p>

<p>This is a well-organized collection of Perl resources, such as modules, documents, and scripts. CPAN is mirrored at FTP sites around the world.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This documentation describes version 0.021 of the Robot module. The module requires at least version 5.002 of Perl.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    Neil Bowers &#60;neilb@cre.canon.co.uk&#62;
    Ave Wrigley &#60;wrigley@cre.canon.co.uk&#62;

    Web Department, Canon Research Centre Europe</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> Copyright (C) 1997, Canon Research Centre Europe.
 Copyright (C) 2006,2007 Konstantin Matyukhin.</pre>

<p>This module is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78248 Uploads, 24724 Distributions
106031 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 05:36:46 2012 GMT (0.190526962280273) @cpansearch1 -->
 </body>
</html>
