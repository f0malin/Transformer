<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Class::MethodMaker - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Class-MethodMaker",3]);
    _gaq.push(["_setCustomVar",5,"Release","Class-MethodMaker-2.18",3]);
    _gaq.push(["_setCustomVar",3,"Module","Class::MethodMaker",3]);
    _gaq.push(["_setCustomVar",1,"Author","SCHWIGON",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Class::MethodMaker">permalink</a></div>
  <a href="/~schwigon/">Steffen Schwigon</a> &gt;
  <a href="/~schwigon/Class-MethodMaker-2.18/">Class-MethodMaker-2.18</a> &gt;
  Class::MethodMaker
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/0fde94d1e8b1a20c32afbe72fb2efc9e?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/S/SC/SCHWIGON/Class-MethodMaker-2.18.tar.gz">Class-MethodMaker-2.18.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Class%3A%3AMethodMaker;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~SCHWIGON/Class-MethodMaker-2.18/lib/Class/MethodMaker.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Class%3A%3AAccessor">Class::Accessor</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?Crypt%3A%3AOpenPGP">Crypt::OpenPGP</a><br>
<a href="/perldoc?CGI%3A%3ACarp">CGI::Carp</a><br>
<a href="/perldoc?XML%3A%3ASimple">XML::Simple</a><br>
<a href="/perldoc?WWW%3A%3AMechanize">WWW::Mechanize</a><br>
<a href="/perldoc?XML%3A%3AParser">XML::Parser</a><br>
<a href="/perldoc?List%3A%3AUtil">List::Util</a><br>
<a href="/perldoc?Class%3A%3AContract">Class::Contract</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Class%3A%3AMethodMaker">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Class-MethodMaker">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.18 &nbsp;
<span class="noprint">
  <a href="/src/SCHWIGON/Class-MethodMaker-2.18/lib/Class/MethodMaker.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Simple_Use'>Simple Use</a>
    <li class='indexItem indexItem2'><a href='#Detailed_Use'>Detailed Use</a>
    <li class='indexItem indexItem2'><a href='#Interaction_with_Superclasses'>Interaction with Superclasses</a>
    <li class='indexItem indexItem2'><a href='#Option_Syntax'>Option Syntax</a>
    <li class='indexItem indexItem2'><a href='#Method_Renaming'>Method Renaming</a>
    <li class='indexItem indexItem2'><a href='#Default_&#38;_Optional_Methods'>Default &#38; Optional Methods</a>
    <li class='indexItem indexItem2'><a href='#Naming_&#38;_Method-Design_Conventions'>Naming &#38; Method-Design Conventions</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#Naming'>Naming</a>
      <li class='indexItem indexItem3'><a href='#Set/Unset'>Set/Unset</a>
      <li class='indexItem indexItem3'><a href='#Other_Design_Considerations'>Other Design Considerations</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Options_to_use/import'>Options to use/import</a>
    <li class='indexItem indexItem2'><a href='#Standard_Options_for_Data-Structure_Components.'>Standard Options for Data-Structure Components.</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXPERIMENTAL_&#38;_COMPATIBILITY_notes'>EXPERIMENTAL &#38; COMPATIBILITY notes</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Class::MethodMaker - Create generic methods for OO Perl</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; [qw/ foo bar baz /],
      new    =&#62; [qw/ new /]        ,
    ];</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module solves the problem of having to continually write accessor methods for your objects that perform standard tasks.</p>

<p>The argument to &#39;use&#39; is an <b>arrayref</b>, as pairs whose &#34;keys&#34; are the names of types of generic methods generated by MethodMaker and whose &#34;values&#34; tell method maker what methods to make.</p>

<p>To override any generated methods, it is sufficient to ensure that the overriding method is defined when Class::MethodMaker is called. Note that the <code>use</code> keyword introduces a <code>BEGIN</code> block, so you may need to define (or at least declare) your overriding method in a <code>BEGIN</code> block.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Simple_Use"
>Simple Use</a></h2>

<p>A simple class made with <code>Class::MethodMaker</code> looks like this:</p>

<pre class="sh_perl">  package MyClass;

  use Class::MethodMaker
    [ scalar =&#62; [qw/ name /],
      new    =&#62; [qw/ new  /],
    ];</pre>

<p>This creates a class, of which new instances may be created using <code>new</code>, each with a single scalar component called <code>name</code>. Name may be queried and (re)set using the methods <code>name</code>, <code>name_reset</code> and <code>name_isset</code>:</p>

<pre class="sh_perl">  package main;

  my $m = MyClass-&#62;new;
  my $n;
  $\ = &#34;\n&#34;;

  print $m-&#62;name_isset ? &#34;true&#34; : &#34;false&#34;;     # false

  $m-&#62;name(&#34;foo&#34;);
  $n = $m-&#62;name;
  print defined $n ? &#34;-&#62;$n&#60;-&#34; : &#34;*undef*&#34;;     # -&#62;foo&#60;-
  print $m-&#62;name_isset ? &#34;true&#34; : &#34;false&#34;;     # true

  $m-&#62;name(undef);
  $n = $m-&#62;name;
  print defined $n ? &#34;-&#62;$n&#60;-&#34; : &#34;*undef*&#34;;     # *undef*
  print $m-&#62;name_isset ? &#34;true&#34; : &#34;false&#34;;     # true

  $m-&#62;name_reset;
  $n = $m-&#62;name;
  print defined $n ? &#34;-&#62;$n&#60;-&#34; : &#34;*undef*&#34;;     # *undef*
  print $m-&#62;name_isset ? &#34;true&#34; : &#34;false&#34;;     # false</pre>

<p>The available component types are <a href="/perldoc?Class%3A%3AMethodMaker%3A%3Ascalar" class="podlinkpod"
>scalar</a>, <a href="/perldoc?Class%3A%3AMethodMaker%3A%3Aarray" class="podlinkpod"
>array</a>, <a href="/perldoc?Class%3A%3AMethodMaker%3A%3Ahash" class="podlinkpod"
>hash</a>. Certain non-data-type utilities are also provided: <a href="/~schwigon/Class-MethodMaker-2.18/lib/Class/MethodMaker/Engine.pm#new" class="podlinkpod"
>new</a>, for constructors, <a href="/~schwigon/Class-MethodMaker-2.18/lib/Class/MethodMaker/Engine.pm#deep_copy" class="podlinkpod"
>deep_copy</a> and <a href="/~schwigon/Class-MethodMaker-2.18/lib/Class/MethodMaker/Engine.pm#copy" class="podlinkpod"
>copy</a> for object copies, and <a href="/~schwigon/Class-MethodMaker-2.18/lib/Class/MethodMaker/Engine.pm#abstract" class="podlinkpod"
>abstract</a> for creating abstract methods.</p>

<p>Each of the components take common options. These include <a href="/perldoc?-static" class="podlinkpod"
>-static</a>, for per-class rather than per-instance data, <a href="/perldoc?-type" class="podlinkpod"
>-type</a>, to restrict the data stored to certain types (e.g., objects of a certain class), <a href="/perldoc?-forward" class="podlinkpod"
>-forward</a> to forward (proxy) given methods onto components, <a href="/perldoc?-default" class="podlinkpod"
>-default</a>/<a href="/perldoc?-default_ctor" class="podlinkpod"
>-default_ctor</a> to set default values for components, <a href="/perldoc?-tie_class" class="podlinkpod"
>-tie_class</a> to tie the storage of a data type to a given class, <a href="/perldoc?-read_cb" class="podlinkpod"
>-read_cb</a>/<a href="/perldoc?-store_cb" class="podlinkpod"
>-store_cb</a> to call user-defined functions on read/store (without the overhead/complexity of ties; and allowing callbacks on existing tie classes).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Detailed_Use"
>Detailed Use</a></h2>

<p><code>Class::MethodMaker</code> installs <i>components</i> into a class, by means of methods that interrogate and amend those components. A component, sometimes referred in other documentation as a <i>slot</i> is a group of one or more attributes (variables) that are associated with an instance of a class (sometimes called an object), or occasionally a class itself (often referred to as a <i>static</i> component). A component is intended as a cohesive unit of data that should only normally be interrogated or set through the methods provided.</p>

<p>Given an instance of a class where each instance represents a car, examples of components are the <code>make</code> and <code>model</code> (each of which would be a simple scalar, a string), the engine (a simple scalar, an instance of Engine::Combustion), and the wheels (an array of instances of Wheel). Note that the wheels form one component, an array. Of course, the implementor might instead choose to use four components, each being a scalar wheel.</p>

<p>To have the components created, the principle use of Class::MethodMaker is to specify the type (data-structure) and name of each component to the import method of Class::MethodMaker</p>

<pre class="sh_perl">  package MyClass;

  use Class::MethodMaker
    [ scalar =&#62; &#39;name&#39;,
      new    =&#62; [qw/ new /],
    ];</pre>

<p>In this example, the import is called implicitly via the <code>use</code> statement. The components are installed in the package in effect where the import is called. The argument to import is arranged as pairs, where the first of each pair is the type of the data-structure, the second is the arguments for that data-structure; in the most simple case, the name of a component to install using that data-structure. The second of the pair should be an arrayref if not a simple name.</p>

<p>Data-structures may be repeated in the call:</p>

<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; &#39;name1&#39;,
      new    =&#62; [qw/ new /],
      scalar =&#62; &#39;name2&#39;,
    ];</pre>

<p>It is an error to attempt to install a two or more components with the same name twice.</p>

<p>Options may be given to data structures to amend the nature and behaviour of the components created. Some options are common across all data structure (e.g., <code>static</code>) whilst some are specific to their respective data structures. Option syntax is laid out in detail below. In simple, options are provided by way of hashrefs from option name to option value. Options and component names are order-sensitive; options appearing after a component do not affect that component. Options only apply to the data-structure to which they are specified. <b>Boolean</b> options (e.g., static) may be abbreviated to -option to set, !option to unset, without a hashref.</p>

<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; [+{ -type =&#62; &#39;File::stat&#39; }, qw/ -static name /],
      new    =&#62; &#39;new&#39;,
    ];</pre>

<p>There are also non-data-structure methods that may be created by Class::MethodMaker. <code>new</code> is an example of one such value; it instead causes a standard <code>new</code> method to be created for the calling class. The arguments and options syntax remains the same, but many options clearly do not apply (e.g., <code>type</code> for <code>new</code>).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Interaction_with_Superclasses"
>Interaction with Superclasses</a></h2>

<p>Basically, <code>Class::MethodMaker</code> takes no notice of class hierarchies. If you choose to install a component x in a class B that is a subclass of class A that already has a component x, then the methods addressing x in B will simply override those in class A in the usual fashion. <code>Class::MethodMaker</code> takes no special action for this situation. This is a feature.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Option_Syntax"
>Option Syntax</a></h2>

<p>The arguments to Class::MethodMaker are passed in a single arrayref, as pairs, with the first of each pair being the name of the data-structure, and the second being the arguments to that structure.</p>

<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; &#39;name&#39;,
      new    =&#62; [qw/ new /],
    ];</pre>

<p>The second of the pair may in the most simple case be a single scalar that is the name of a component to use.</p>

<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; &#39;bob&#39;, ];</pre>

<p>For anything more complex, the second argument must itself be an arrayreference. Simple names within this arrayreference are again taken as component names to use; in the following example, both <code>foo</code> and <code>bar</code> scalar components are created:</p>

<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; [qw/ foo bar /], ];</pre>

<p>Options to the data-structure, to change the behaviour of the component, or methods available, etc., are specified by the presence of a hash reference in line with the component names. Each key of the hashref is the name of an option; the corresponding value is the option value. Option names are easily recognized by a leading hyphen (<code>-</code>) (or leading exclamation mark, <code>!</code>). The options affect only the components named <i>after</i> the option itself. In the following example, <code>foo</code> is non-static (the default), whilst bar is a static:</p>

<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; [&#39;foo&#39;, { -static =&#62; 1 }, &#39;bar&#39;], ];</pre>

<p>Naturally, options may be altered by later settings overriding earlier ones. The example below has exactly the same effect as the one above:</p>

<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; [{ -static =&#62; 1 }, &#39;bar&#39;, { -static =&#62; 0 }, &#39;foo&#39;], ];</pre>

<p>Options that are boolean (on/off) valued, such as <code>-static</code>, may be specified external to any hashref as <code>-optionname</code> to set them on and <code>!optionname</code> to set them off. The example below has exactly the same effect as the one above:</p>

<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; [ qw/ -static bar !static foo /], ];</pre>

<p>Options that take a value, e.g., <code>-type</code>, must be specified within a hashref:</p>

<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; [ +{ type =&#62; &#39;File::stat&#39; }, &#39;bob&#39; ], ];</pre>

<p>Options affect is limited by the scope of the nearest enclosing arrayref. This particularly means that for multiple invocations of a data structure type, options on earlier invocations do not affect later ones. In the following example, <code>foo</code> is non-static (the default), whilst bar is a static:</p>

<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; [ qw/ -static bar /],
      scalar =&#62; [ &#39;foo&#39; ],
    ];</pre>

<p>This is true even if later invocations do not use an arrayref. The example below has exactly the same effect as the one above:</p>

<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; [ qw/ -static bar /],
      scalar =&#62; &#39;foo&#39;,
    ];</pre>

<p>Arrayrefs may be employed within a set of arguments for a single data-structure to likewise limit scope. The example below has exactly the same effect as the one above:</p>

<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; [ [ qw/ -static bar / ], &#39;foo&#39; ],
    ];</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Method_Renaming"
>Method Renaming</a></h2>

<p>Methods may be renamed, by providing options that map from one generic name to another. These are identified by the presence of a &#39;*&#39; in the option name.</p>

<p>The example below installs component <code>a</code> as a scalar, but the method that would normally be installed as <code>a_get</code> is instead installed as <code>get_a</code>, and likewise <code>set_a</code> is installed in place of <code>a_set</code>.</p>

<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; [ { &#39;*_get&#39; =&#62; &#39;get_*&#39;,
                    &#39;*_set&#39; =&#62; &#39;set_*&#39;, },
                  &#39;a&#39; ],
    ];</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Default_&#38;_Optional_Methods"
>Default &#38; Optional Methods</a></h2>

<p>Class::MethodMaker installs a number of methods by default. Some methods, considered to be useful only to a subset of developers are installed only on request. Each method is marked in the text to state whether it is installed by default or only upon request.</p>

<p>To request that a non-default method is installed, one needs to rename it (even possibly to its normal name). So, to install the <code>*_get</code> method for a scalar attribute (as <code>*_get</code>), the syntax is:</p>

<pre class="sh_perl">  package MyClass;
  use Class::MethodMaker
    [ scalar =&#62; [{&#39;*_get&#39; =&#62; &#39;*_get&#39;}, &#39;a&#39;] ];</pre>

<p>The method may be installed using a non-default name using similar syntax:</p>

<pre class="sh_perl">  package MyClass;
  use Class::MethodMaker
    [ scalar =&#62; [{&#39;*_get&#39; =&#62; &#39;get_*&#39;}, &#39;a&#39;] ];</pre>

<p>The client may choose to not install a default method by renaming it to undef:</p>

<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; [{&#39;*&#39; =&#62; undef }, &#39;a&#39;] ];</pre>

<p>Note Class::MethodMaker will not install a method in place of an existing method, so if the intent is to not install a default method because the client has their own version, an alternative to the above is to define the client version before calling Class::MethodMaker.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Naming_&#38;_Method-Design_Conventions"
>Naming &#38; Method-Design Conventions</a></h2>

<p>The standard method names are designed with predictability and class extendibility in mind.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Naming"
>Naming</a></h3>

<p>For any component <i>x</i> that Class::MethodMaker creates, the method names are always <code>x</code> or <code>x_*</code>. This enables predictability, for you do not need to remember which methods are named <code>x_*</code> and which <code>*_x</code>, and also you can name methods that you create by avoiding prefixing them with <code>x</code>, and so avoid any clash with Class::MethodMaker-generated methods (even if Class::MethodMaker is upgraded with shiny new extra methods). Class::MethodMaker users may rename methods (see <a href="#Method_Renaming" class="podlinkpod"
>&#34;Method Renaming&#34;</a>).</p>

<p>For any <b>data-structure</b> component (scalar, array, hash, etc.) <i>x</i> that Class::MethodMaker creates, the method <code>x</code> <i>sets</i> the value of that component: i.e., overriding any existing value, not amending or modifying. E.g., for array components, <code>x</code> does not push or pull values but all old values are removed, and new ones placed in their stead:</p>

<pre class="sh_perl">  package MyClass;
  use Class::MethodMaker
    [ array =&#62; &#39;a&#39;,
      new   =&#62; &#39;new&#39;,
    ];

  package main;
  my $m = MyClass-&#62;new;
  $m-&#62;a(4,5);
  print join(&#39; &#39;, $m-&#62;a), &#34;\n&#34;; # 4 5
  $m-&#62;a(6,7);
  print join(&#39; &#39;, $m-&#62;a), &#34;\n&#34;; # 6 7</pre>

<p>The method returns the <i>new</i> value of the component:</p>

<pre class="sh_perl">  print join(&#39; &#39;, $m-&#62;a(8,9)), &#34;\n&#34;; # 8 9</pre>

<p>Note that calling the method with an empty list <b>does not</b> reset the value to empty; this is so that normal lookups work on the method (i.e., if</p>

<pre class="sh_perl">  $m-&#62;a</pre>

<p>emptied the component, then</p>

<pre class="sh_perl">  @a = $m-&#62;a</pre>

<p>would always give an empty list: not that useful.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Set/Unset"
>Set/Unset</a></h3>

<p>Each data-structure component has the concept of being set/unset as a whole, independent of individual members being set. Each component starts life unset (unless a default or default option or tie class has been supplied), and is becomes set by any assignment. The component is then reset with the <code>*_reset</code> method. Thus it is possible to distinguish between a component that has been set to an explicitly empty value, and one that has not been set (or been reset). This distinction is analogous to the distinction in hashes between a missing key and a key whose value is undef.</p>

<pre class="sh_perl">  package MyClass;
  use Class::MethodMaker
    [ new    =&#62; &#39;new&#39;,
      scalar =&#62; &#39;x&#39;,
    ];

  package main;
  my $m = MyClass-&#62;new;

  $\ = &#34;\n&#34;;
  print $m-&#62;x_isset ? &#34;true&#34; : &#34;false&#34;;    # false; components start this way

  my $x = $m-&#62;x;
  print defined $n ? &#34;-&#62;$n&#60;-&#34; : &#39;*undef*&#39;; # *undef*
  print $m-&#62;x_isset ? &#34;true&#34; : &#34;false&#34;;    # false; reading doesn&#39;t set

  $m-&#62;x(undef);
  $x = $m-&#62;x;
  print $m-&#62;x_isset ? &#34;true&#34; : &#34;false&#34;;    # true;
  print defined $n ? &#34;-&#62;$n&#60;-&#34; : &#39;*undef*&#39;; # -&#62;foo&#60;-

  $m-&#62;x(&#34;foo&#34;);
  $x = $m-&#62;x;
  print $m-&#62;x_isset ? &#34;true&#34; : &#34;false&#34;;    # true; undef is valid value
  print defined $n ? &#34;-&#62;$n&#60;-&#34; : &#39;*undef*&#39;; # *undef*

  $m-&#62;x_reset;
  $x = $m-&#62;x;
  print defined $n ? &#34;-&#62;$n&#60;-&#34; : &#39;*undef*&#39;; # *undef*
  print $m-&#62;x_isset ? &#34;true&#34; : &#34;false&#34;;    # false</pre>

<p>It is not an error to query the value of an unset component: the value is undef. Querying (any passive command, or pure function) an unset component does not cause it to become set; only assigning (any active command, or procedure) changes the set status of a component.</p>

<p>NOTE THAT lvalues are still experimental (as of perl 5.8.0), and so their implementation may change r disappear in the future. Note that lvalue use defeats type-checking. This may be considered a bug, and so may be fixed if possible at some point in the future.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Other_Design_Considerations"
>Other Design Considerations</a></h3>

<p>Further design goals for Class::MethodMaker version 2:</p>

<dl>
<dt><a name='Consistency'></a><a name="Consistency_of_Options"
>Consistency of Options</a></dt>

<dd>
<p>The options passed to components are now handled in a single place, to try to be phrased consistently. As many options as possible are common to all data-structures.</p>

<dt><a name="Flexibility"
>Flexibility</a></dt>

<dd>
<p>It is intended that all common class-construction options are supported across all data-types, so that e.g., defaults, ties, typing may be used with your data-structure of choice, and combined.</p>

<dt><a name="Speed"
>Speed</a></dt>

<dd>
<p>The methods are intended to be as fast as possible, within other constraints outlined here.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Options_to_use/import"
>Options to <code>use</code>/<code>import</code></a></h2>

<dl>
<dt><a name='target_class'></a><a name="-target_class"
><code>-target_class</code></a></dt>

<dd>
<p>By default, the target class is determined to be the last (latest) class in the call stack that is not a Class::MethodMaker::Engine subtype. This is what is wanted 99% of the time, and typical users need not worry. However, the target class may be set explicitly in the call to <code>use</code>/<code>import</code>:</p>

<pre class="sh_perl">  use Class::MethodMaker
    [ -target_class =&#62; &#39;X&#39;,
      scalar        =&#62; [qw/ a /],
      -target_class =&#62; &#39;Y&#39;,
      scalar        =&#62; [qw/ b /],
    ];</pre>

<p>Note that the <code>-target_class</code> option is order sensitive: it affects only components requested <i>after</i> it in the call to <code>use</code>/<code>import</code>. As shown, the same call may handle specify multiple target classes. Any components requested before the first <code>-target_class</code> are created in the default-determined class, as outlined above.</p>

<p>Setting the target class in this way does <b>not</b> persist over multiple calls to <code>use</code>/<code>import</code>. A subsequent call to either will use the default-determined class as target (unless again overriden by <code>-target_class</code>).</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Standard_Options_for_Data-Structure_Components."
>Standard Options for Data-Structure Components.</a></h2>

<p>The following options are observed by all data structure components (<a href="/perldoc?Class%3A%3AMethodMaker%3A%3Ascalar" class="podlinkpod"
>scalar</a>, <a href="/perldoc?Class%3A%3AMethodMaker%3A%3Aarray" class="podlinkpod"
>array</a>, <a href="/perldoc?Class%3A%3AMethodMaker%3A%3Ahash" class="podlinkpod"
>hash</a>).</p>

<dl>
<dt><a name='static'></a><a name="-static"
>-static</a></dt>

<dd>
<pre class="sh_perl">  package MyClass;
  use Class::MethodMaker
    [ scalar =&#62; [qw/ -static s /], ];</pre>

<p>This option causes components to hold class-specific, rather than instance-specific values. Thus:</p>

<pre class="sh_perl">  package main;
  my $m = MyClass-&#62;new;
  my $n = MyClass-&#62;new;
  $m-&#62;a(4,5);
  print join(&#39; &#39;, $m-&#62;a), &#34;\n&#34;; # 4 5
  print join(&#39; &#39;, $n-&#62;a), &#34;\n&#34;; # 4 5
  $n-&#62;a(6,7);
  print join(&#39; &#39;, $n-&#62;a), &#34;\n&#34;; # 6 7
  print join(&#39; &#39;, $m-&#62;a), &#34;\n&#34;; # 6 7</pre>

<dt><a name='type'></a><a name="-type"
>-type</a></dt>

<dd>
<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; [{ -type =&#62; &#39;File::stat&#39; }, &#39;st&#39; ]];</pre>

<p>Takes the name of a class, and checks that all values assigned to the component are of the appropriate type (uses UNIVERSAL::isa, so subtypes are permissible).</p>

<dt><a name='forward'></a><a name="-forward"
>-forward</a></dt>

<dd>
<p>This option takes as value an arrayref (or a simple scalar). The values specify a list of methods that when called on an instance of the target class, are &#34;forwarded on&#34; to the given component. For example,</p>

<pre class="sh_perl">  package X;

  use Class::MethodMaker
    [scalar =&#62; [{ -type =&#62; &#39;File::stat&#39;,
                  -forward =&#62; [qw/ mode size /], },
                &#39;st1&#39;,
               ],
    ])},</pre>

<p>any call of <code>mode</code> or <code>size</code> on an instance of <code>X</code> wil simply call the method of the same name on the value stored in the component <code>st1</code>, with the same arguments, and returns the value(s) of this call.</p>

<p>Forwarding only applies to the first named component (since the methodname is fixed, without the a componentname part). This is because the components are installed in the order in which they are created, and Class::MethodMaker never overwrites a pre-existing method. So, in the following example, <code>mode</code> and <code>size</code> forward to the <code>st1</code> component, and <code>read</code> forwards to the <code>st2</code> component.</p>

<pre class="sh_perl">  package MyClass;
  Class::MethodMaker-&#62;import([scalar =&#62;
                                [{ -type    =&#62; &#39;File::stat&#39;,
                                   -forward =&#62; [qw/ mode
                                                    size /],
                                 },
                                 qw( st1 ),
                                 { -type    =&#62; &#39;IO::Handle&#39;,
                                   -forward =&#62; &#39;read&#39;, },
                                 qw( st2 ),
                                ]])},</pre>

<p>Forwarding a method to a component of composite data type (e.g., array, hash) causes the method to be mapped over the values of that component. The returned value is appropriate to the component type; so a method forwarded to an array will return a list, like the array that is the component, but with each value being the instead result of applying the forwarded method to the corresponding value of the array.</p>

<p>The following code populates the <code>@sizes</code> array with the sizes of <em>/etc/passwd</em>, <em>/etc/group</em>, in that order.</p>

<pre class="sh_perl">  package main;
  my $m = MyClass-&#62;new;
  $m-&#62;st1(&#34;/etc/passwd&#34;, &#34;/etc/group&#34;);
  my @sizes = $m-&#62;size;</pre>

<p>Calling the forwarding method in a scalar context will get the same results, but as an arrayref:</p>

<pre class="sh_perl">  my $sizes = $m-&#62;size; # [ 921, 598 ] for example</pre>

<p>Likewise, forwarding to a hash component will return a hash from original key to result of method on the corresponding component, or an equivalent hashref in scalar context.</p>

<dt><a name='default'></a><a name="-default"
>-default</a></dt>

<dd>
<pre class="sh_perl">  use Class::MethodMaker
    [ scalar =&#62; [{ -default =&#62; 7 }, &#39;df1&#39; ]];</pre>

<p>Takes a simple value; must be either undef or an instance of the appropriate type if <code>-type</code> has also been specified. Whenever a component is new or reset, its value(s) default to the value given. Hence <code>*_isset</code> will always return true for that component. For compound data-structures, the default applies to the each element of the structure, not the compound itself. So, for array structures, the default applies to each element of the array, not the array itself.</p>

<p>It is an error to specify the <code>-default</code> option and the <code>-default_ctor</code> option simultaneously.</p>

<dt><a name='default_ctor'></a><a name="-default_ctor"
>-default_ctor</a></dt>

<dd>
<pre class="sh_perl">  use Class::MethodMaker
    [scalar =&#62; [{ -default_ctor =&#62; sub {
                    Y-&#62;new(-3);
                  },
                &#39;df2&#39;,

                { -type         =&#62; &#39;Y&#39;,
                  -default_ctor =&#62; &#39;new&#39; },
                &#39;df3&#39;,
               ]
    ];</pre>

<p>Takes a coderef to call to generate the default value. This is called the first time a value is required, and afterwards whenever reset is called. The subr is called with one argument, which is the object upon which the component exists (or the name of the class upon which the component is created, if the call is made on the class).</p>

<p>If the <code>-type</code> option is in effect, then the value may be a simple value, which shall be considered the name of a method to call on the class specified by <code>-type</code>.</p>

<p>It is an error to specify the <code>-default</code> option and the <code>-default_ctor</code> option simultaneously.</p>

<dt><a name='tie_class'></a><a name="-tie_class"
>-tie_class</a></dt>

<dd>
<pre class="sh_perl">  # @z is an audit trail
  my @z;
  package W;
  use Tie::Scalar;
  use base qw( Tie::StdScalar );
  sub TIESCALAR { push @z, [ &#39;TIESCALAR&#39;     ]; $_[0]-&#62;SUPER::TIESCALAR    }
  sub FETCH     { push @z, [ &#39;FETCH&#39;         ]; $_[0]-&#62;SUPER::FETCH        }
  sub STORE     { push @z, [ STORE =&#62; $_[1]  ]; $_[0]-&#62;SUPER::STORE($_[1]) }
  sub DESTROY   { push @z, [ &#39;DESTROY&#39;       ]; $_[0]-&#62;SUPER::DESTROY      }
  sub UNTIE     { push @z, [ UNTIE =&#62; $_[1]  ]; $_[0]-&#62;SUPER::UNTIE($_[1]) }

  package X;
  Class::MethodMaker-&#62;import([scalar =&#62;
                                [{ -type      =&#62; &#39;File::stat&#39;,
                                   -tie_class =&#62; &#39;W&#39;,
                                   -forward   =&#62; [qw/ mode
                                                      size /],
                                 },
                                 qw( tie1 ),
                              new =&#62; &#39;new&#39;,
                             ]]);</pre>

<p>This option takes a simple value as argument, which is taken be the name of a class that is to be tied to the storage for the component, e.g., for an array component, a class that implements the API for tied arrays is needed (see <a href="/perldoc?Tie%3A%3AArray" class="podlinkpod"
>Tie::Array</a> for more information on this). Likewise for scalar components, hash components, etc. Note that it is the component that is tied, not the data items.</p>

<pre class="sh_perl">  package main;
  my $x = X-&#62;new;

  # @z is empty

  my $stat1 = stat &#34;/etc/passwd&#34;;
  my $stat2 = stat &#34;/etc/group&#34;;
  $x-&#62;tie1($stat1);

  # @z is ([&#39;TIESCALAR&#39;], [&#39;STORE&#39;, $stat1])

  my $y = $x-&#62;tie1;

  # $y is $stat1
  # @z is ([&#39;TIESCALAR&#39;], [&#39;STORE&#39;, $stat1], [&#39;FETCH&#39;])

  $x-&#62;tie1($stat2);

  # @z is ([&#39;TIESCALAR&#39;], [&#39;STORE&#39;, $stat1], [&#39;FETCH&#39;], [&#39;STORE&#39;, $stat2])

  $x-&#62;tie1_reset;

  # @z is ([&#39;TIESCALAR&#39;], [&#39;STORE&#39;, $stat1], [&#39;FETCH&#39;], [&#39;STORE&#39;, $stat2],\
  #        [&#39;DESTROY&#39;])</pre>

<dt><a name='tie_args'></a><a name="-tie_args"
>-tie_args</a></dt>

<dd>
<pre class="sh_perl">  package X;
  Class::MethodMaker-&#62;import
    ([scalar =&#62; [{ -tie_class =&#62; &#39;V&#39;,
                   -tie_args  =&#62; [enum    =&#62; [qw/A B C/],
                                  default =&#62; &#39;B&#39;],
                 },
                 qw( tie2 ),
                ]]);</pre>

<p>This option takes an array reference, whose members are passed as arguments to any tie invoked on the component (by virtue <code>-tie_class</code>). If <code>-tie_class</code> is not in force, this is ignored.</p>

<p>As a convenience measure, a single argument may be passed directly, rather than embedding in an array ref --- unless that arg is an array ref itself...</p>

<dt><a name='read_cb'></a><a name="-read_cb"
>-read_cb</a></dt>

<dd>
<p><b>The implementation of this option is incomplete</b></p>

<pre class="sh_perl">  package MyClass;
  use Class::MethodMaker
    [ scalar =&#62; [{ -read_cb =&#62; sub { ($_[1]||0) + 1 } }, &#39;rcb1&#39; ]
      new    =&#62; &#39;new&#39;;
    ];</pre>

<p>This option takes as argument a coderef, which is called whenever a value is read. It is called with two arguments: the instance upon which the method was called, and the value stored in the component. The return value of the given coderef is the value which is passed to the caller of the method as the component value. Thus, the above example adds one to whatever the stored value is. Note that the value is returned to the callee, but not stored in the object</p>

<pre class="sh_perl">  package main;
  my $m = MyClass-&#62;new;
  $m-&#62;rcb1(4);
  my $n = $x-&#62;rcb1; # 5
  my $n = $x-&#62;rcb1; # 5</pre>

<dt><a name='store_cb'></a><a name="-store_cb"
>-store_cb</a></dt>

<dd>
<p><b>The implementation of this option is incomplete</b></p>

<pre class="sh_perl">  package MyClass;
  use Class::MethodMaker
    [ scalar =&#62; [{ -store_cb =&#62; sub { $_[1] + 1 } }, &#39;scb1&#39; ]
      new    =&#62; &#39;new&#39;;
    ];</pre>

<p>This option takes as argument a coderef, which is called whenever a value is stored. It is called with four arguments: the instance upon which the method was called, the value to store in the component, the name of the component, and the previous value of the component (if any; if the given element of the component was previously unset, only three arguments are passed).</p>

<p>The return value of the given coderef is the value which is actually stored in the component. Thus, the above example stores 1 greater than the value passed in.</p>

<pre class="sh_perl">  package main;
  my $m = MyClass-&#62;new;
  $m-&#62;scb1(4);
  my $n = $x-&#62;scb1; # 5</pre>

<p>Generally, store callbacks are cheaper than read callbacks, because values are read more often than they are stored. But that is a generalization. YMMV.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPERIMENTAL_&#38;_COMPATIBILITY_notes"
>EXPERIMENTAL &#38; COMPATIBILITY notes <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Some new facilities may be marked as EXPERIMENTAL in the documentation. These facilities are being trialled, and whilst it is hoped that they will become mainstream code, no promises are made. They may change or disappear at any time. Caveat Emptor. The maintainer would be delighted to hear any feedback particularly regarding such facilities, be it good or bad, so long as it is constructive.</p>

<p>Some old facilities may be marked as COMPATIBILITY in the documentation. These facilities are being maintained purely for compatibility with old versions of this module, but will ultimately disappear. They are normally replaced by alternatives that are considered preferable. Please avoid using them, and consider amending any existing code that does use them not to. If you believe that their removal will cast an unacceptable pall over your life, please contact the maintainer.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~schwigon/Class-MethodMaker-2.18/lib/Class/MethodMaker/Engine.pm" class="podlinkpod"
>Class::MethodMaker::Engine</a>, <a href="/perldoc?Class%3A%3AMethodMaker%3A%3Ascalar" class="podlinkpod"
>Class::MethodMaker::scalar</a>, <a href="/perldoc?Class%3A%3AMethodMaker%3A%3Aarray" class="podlinkpod"
>Class::MethodMaker::array</a>, <a href="/perldoc?Class%3A%3AMethodMaker%3A%3Ahash" class="podlinkpod"
>Class::MethodMaker::hash</a>, <a href="/~schwigon/Class-MethodMaker-2.18/lib/Class/MethodMaker/V1Compat.pm" class="podlinkpod"
>Class::MethodMaker::V1Compat</a></p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78068 Uploads, 24686 Distributions
105902 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sun Apr 22 12:34:54 2012 GMT (0.504410982131958) @cpansearch1 -->
 </body>
</html>
