<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Hash::Util - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","perl",3]);
    _gaq.push(["_setCustomVar",5,"Release","perl-5.14.2",3]);
    _gaq.push(["_setCustomVar",3,"Module","Hash::Util",3]);
    _gaq.push(["_setCustomVar",1,"Author","FLORA",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Hash::Util">permalink</a></div>
  <a href="/~flora/">Florian Ragwitz</a> &gt;
  <a href="/~flora/perl-5.14.2/">perl-5.14.2</a> &gt;
  Hash::Util
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/fd2bdaaefe41908133793d1ddf38f75d?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/F/FL/FLORA/perl-5.14.2.tar.gz">perl-5.14.2.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Hash%3A%3AUtil;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~FLORA/perl-5.14.2/ext/Hash-Util/lib/Hash/Util.pm">Annotate this POD
(1)
</a></p>
     <p style="text-align:right"><a href="http://www.perl.org/">Website</a></p>

<div style="float:right">

</div>
</div>
  Module Version:  0.11 &nbsp;
<span class="noprint">
  <a href="/src/FLORA/perl-5.14.2/ext/Hash-Util/lib/Hash/Util.pm">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~abigail/perl/ext/Hash-Util/lib/Hash/Util.pm">perl-5.15.9</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Restricted_hashes'>Restricted hashes</a>
    <li class='indexItem indexItem2'><a href='#Operating_on_references_to_hashes.'>Operating on references to hashes.</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CAVEATS'>CAVEATS</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Hash::Util - A selection of general-utility hash subroutines</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  # Restricted hashes

  use Hash::Util qw(
                     hash_seed all_keys
                     lock_keys unlock_keys
                     lock_value unlock_value
                     lock_hash unlock_hash
                     lock_keys_plus hash_locked
                     hidden_keys legal_keys
                   );

  %hash = (foo =&#62; 42, bar =&#62; 23);
  # Ways to restrict a hash
  lock_keys(%hash);
  lock_keys(%hash, @keyset);
  lock_keys_plus(%hash, @additional_keys);

  # Ways to inspect the properties of a restricted hash
  my @legal = legal_keys(%hash);
  my @hidden = hidden_keys(%hash);
  my $ref = all_keys(%hash,@keys,@hidden);
  my $is_locked = hash_locked(%hash);

  # Remove restrictions on the hash
  unlock_keys(%hash);

  # Lock individual values in a hash
  lock_value  (%hash, &#39;foo&#39;);
  unlock_value(%hash, &#39;foo&#39;);

  # Ways to change the restrictions on both keys and values
  lock_hash  (%hash);
  unlock_hash(%hash);

  my $hashes_are_randomised = hash_seed() != 0;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>Hash::Util</code> and <code>Hash::Util::FieldHash</code> contain special functions for manipulating hashes that don&#39;t really warrant a keyword.</p>

<p><code>Hash::Util</code> contains a set of functions that support <a href="#Restricted_hashes" class="podlinkpod"
>restricted hashes</a>. These are described in this document. <code>Hash::Util::FieldHash</code> contains an (unrelated) set of functions that support the use of hashes in <i>inside-out classes</i>, described in <a href="/~flora/perl-5.14.2/ext/Hash-Util-FieldHash/lib/Hash/Util/FieldHash.pm" class="podlinkpod"
>Hash::Util::FieldHash</a>.</p>

<p>By default <code>Hash::Util</code> does not export anything.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Restricted_hashes"
>Restricted hashes</a></h2>

<p>5.8.0 introduces the ability to restrict a hash to a certain set of keys. No keys outside of this set can be added. It also introduces the ability to lock an individual key so it cannot be deleted and the ability to ensure that an individual value cannot be changed.</p>

<p>This is intended to largely replace the deprecated pseudo-hashes.</p>

<dl>
<dt><a name="lock_keys"
><b>lock_keys</b></a></dt>

<dd>
<dt><a name="unlock_keys"
><b>unlock_keys</b></a></dt>

<dd>
<pre class="sh_perl">  lock_keys(%hash);
  lock_keys(%hash, @keys);</pre>

<p>Restricts the given %hash&#39;s set of keys to @keys. If @keys is not given it restricts it to its current keyset. No more keys can be added. delete() and exists() will still work, but will not alter the set of allowed keys. <b>Note</b>: the current implementation prevents the hash from being bless()ed while it is in a locked state. Any attempt to do so will raise an exception. Of course you can still bless() the hash before you call lock_keys() so this shouldn&#39;t be a problem.</p>

<pre class="sh_perl">  unlock_keys(%hash);</pre>

<p>Removes the restriction on the %hash&#39;s keyset.</p>

<p><b>Note</b> that if any of the values of the hash have been locked they will not be unlocked after this sub executes.</p>

<p>Both routines return a reference to the hash operated on.</p>

<dt><a name="lock_keys_plus"
><b>lock_keys_plus</b></a></dt>

<dd>
<pre class="sh_perl">  lock_keys_plus(%hash,@additional_keys)</pre>

<p>Similar to <code>lock_keys()</code>, with the difference being that the optional key list specifies keys that may or may not be already in the hash. Essentially this is an easier way to say</p>

<pre class="sh_perl">  lock_keys(%hash,@additional_keys,keys %hash);</pre>

<p>Returns a reference to %hash</p>

<dt><a name="lock_value"
><b>lock_value</b></a></dt>

<dd>
<dt><a name="unlock_value"
><b>unlock_value</b></a></dt>

<dd>
<pre class="sh_perl">  lock_value  (%hash, $key);
  unlock_value(%hash, $key);</pre>

<p>Locks and unlocks the value for an individual key of a hash. The value of a locked key cannot be changed.</p>

<p>Unless %hash has already been locked the key/value could be deleted regardless of this setting.</p>

<p>Returns a reference to the %hash.</p>

<dt><a name="lock_hash"
><b>lock_hash</b></a></dt>

<dd>
<dt><a name="unlock_hash"
><b>unlock_hash</b></a></dt>

<dd>
<pre class="sh_perl">    lock_hash(%hash);</pre>

<p>lock_hash() locks an entire hash, making all keys and values read-only. No value can be changed, no keys can be added or deleted.</p>

<pre class="sh_perl">    unlock_hash(%hash);</pre>

<p>unlock_hash() does the opposite of lock_hash(). All keys and values are made writable. All values can be changed and keys can be added and deleted.</p>

<p>Returns a reference to the %hash.</p>

<dt><a name="lock_hash_recurse"
><b>lock_hash_recurse</b></a></dt>

<dd>
<dt><a name="unlock_hash_recurse"
><b>unlock_hash_recurse</b></a></dt>

<dd>
<pre class="sh_perl">    lock_hash_recurse(%hash);</pre>

<p>lock_hash() locks an entire hash and any hashes it references recursively, making all keys and values read-only. No value can be changed, no keys can be added or deleted.</p>

<p><b>Only</b> recurses into hashes that are referenced by another hash. Thus a Hash of Hashes (HoH) will all be restricted, but a Hash of Arrays of Hashes (HoAoH) will only have the top hash restricted.</p>

<pre class="sh_perl">    unlock_hash_recurse(%hash);</pre>

<p>unlock_hash_recurse() does the opposite of lock_hash_recurse(). All keys and values are made writable. All values can be changed and keys can be added and deleted. Identical recursion restrictions apply as to lock_hash_recurse().</p>

<p>Returns a reference to the %hash.</p>

<dt><a name="hash_unlocked"
><b>hash_unlocked</b></a></dt>

<dd>
<pre class="sh_perl">  hash_unlocked(%hash) and print &#34;Hash is unlocked!\n&#34;;</pre>

<p>Returns true if the hash and its keys are unlocked.</p>

<dt><a name="legal_keys"
><b>legal_keys</b></a></dt>

<dd>
<pre class="sh_perl">  my @keys = legal_keys(%hash);</pre>

<p>Returns the list of the keys that are legal in a restricted hash. In the case of an unrestricted hash this is identical to calling keys(%hash).</p>

<dt><a name="hidden_keys"
><b>hidden_keys</b></a></dt>

<dd>
<pre class="sh_perl">  my @keys = hidden_keys(%hash);</pre>

<p>Returns the list of the keys that are legal in a restricted hash but do not have a value associated to them. Thus if &#39;foo&#39; is a &#34;hidden&#34; key of the %hash it will return false for both <code>defined</code> and <code>exists</code> tests.</p>

<p>In the case of an unrestricted hash this will return an empty list.</p>

<p><b>NOTE</b> this is an experimental feature that is heavily dependent on the current implementation of restricted hashes. Should the implementation change, this routine may become meaningless, in which case it will return an empty list.</p>

<dt><a name="all_keys"
><b>all_keys</b></a></dt>

<dd>
<pre class="sh_perl">  all_keys(%hash,@keys,@hidden);</pre>

<p>Populates the arrays @keys with the all the keys that would pass an <code>exists</code> tests, and populates @hidden with the remaining legal keys that have not been utilized.</p>

<p>Returns a reference to the hash.</p>

<p>In the case of an unrestricted hash this will be equivalent to</p>

<pre class="sh_perl">  $ref = do {
      @keys = keys %hash;
      @hidden = ();
      \%hash
  };</pre>

<p><b>NOTE</b> this is an experimental feature that is heavily dependent on the current implementation of restricted hashes. Should the implementation change this routine may become meaningless in which case it will behave identically to how it would behave on an unrestricted hash.</p>

<dt><a name="hash_seed"
><b>hash_seed</b></a></dt>

<dd>
<pre class="sh_perl">    my $hash_seed = hash_seed();</pre>

<p>hash_seed() returns the seed number used to randomise hash ordering. Zero means the &#34;traditional&#34; random hash ordering, non-zero means the new even more random hash ordering introduced in Perl 5.8.1.</p>

<p><b>Note that the hash seed is sensitive information</b>: by knowing it one can craft a denial-of-service attack against Perl code, even remotely, see <a href="/~flora/perl-5.14.2/pod/perlsec.pod#Algorithmic_Complexity_Attacks" class="podlinkpod"
>&#34;Algorithmic Complexity Attacks&#34; in perlsec</a> for more information. <b>Do not disclose the hash seed</b> to people who don&#39;t need to know it. See also <a href="/~flora/perl-5.14.2/pod/perlrun.pod#PERL_HASH_SEED_DEBUG" class="podlinkpod"
>&#34;PERL_HASH_SEED_DEBUG&#34; in perlrun</a>.</p>

<dt><a name="hv_store"
><b>hv_store</b></a></dt>

<dd>
<pre class="sh_perl">  my $sv = 0;
  hv_store(%hash,$key,$sv) or die &#34;Failed to alias!&#34;;
  $hash{$key} = 1;
  print $sv; # prints 1</pre>

<p>Stores an alias to a variable in a hash instead of copying the value.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Operating_on_references_to_hashes."
>Operating on references to hashes.</a></h2>

<p>Most subroutines documented in this module have equivalent versions that operate on references to hashes instead of native hashes. The following is a list of these subs. They are identical except in name and in that instead of taking a %hash they take a $hashref, and additionally are not prototyped.</p>

<dl>
<dt><a name="lock_ref_keys"
>lock_ref_keys</a></dt>

<dd>
<dt><a name="unlock_ref_keys"
>unlock_ref_keys</a></dt>

<dd>
<dt><a name="lock_ref_keys_plus"
>lock_ref_keys_plus</a></dt>

<dd>
<dt><a name="lock_ref_value"
>lock_ref_value</a></dt>

<dd>
<dt><a name="unlock_ref_value"
>unlock_ref_value</a></dt>

<dd>
<dt><a name="lock_hashref"
>lock_hashref</a></dt>

<dd>
<dt><a name="unlock_hashref"
>unlock_hashref</a></dt>

<dd>
<dt><a name="lock_hashref_recurse"
>lock_hashref_recurse</a></dt>

<dd>
<dt><a name="unlock_hashref_recurse"
>unlock_hashref_recurse</a></dt>

<dd>
<dt><a name="hash_ref_unlocked"
>hash_ref_unlocked</a></dt>

<dd>
<dt><a name="legal_ref_keys"
>legal_ref_keys</a></dt>

<dd>
<dt><a name="hidden_ref_keys"
>hidden_ref_keys</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CAVEATS"
>CAVEATS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Note that the trapping of the restricted operations is not atomic: for example</p>

<pre class="sh_perl">    eval { %hash = (illegal_key =&#62; 1) }</pre>

<p>leaves the <code>%hash</code> empty rather than with its original contents.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The interface exposed by this module is very close to the current implementation of restricted hashes. Over time it is expected that this behavior will be extended and the interface abstracted further.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Michael G Schwern &#60;schwern@pobox.com&#62; on top of code by Nick Ing-Simmons and Jeffrey Friedl.</p>

<p>hv_store() is from Array::RefElem, Copyright 2000 Gisle Aas.</p>

<p>Additional code by Yves Orton.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?Scalar%3A%3AUtil" class="podlinkpod"
>Scalar::Util</a>, <a href="/perldoc?List%3A%3AUtil" class="podlinkpod"
>List::Util</a> and <a href="/~flora/perl-5.14.2/pod/perlsec.pod#Algorithmic_Complexity_Attacks" class="podlinkpod"
>&#34;Algorithmic Complexity Attacks&#34; in perlsec</a>.</p>

<p><a href="/~flora/perl-5.14.2/ext/Hash-Util-FieldHash/lib/Hash/Util/FieldHash.pm" class="podlinkpod"
>Hash::Util::FieldHash</a>.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78269 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 22:55:58 2012 GMT (0.445446014404297) @cpansearch1 -->
 </body>
</html>
