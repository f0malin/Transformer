<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Oracle::Debug - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Oracle-Debug",3]);
    _gaq.push(["_setCustomVar",5,"Release","Oracle-Debug-1.46",3]);
    _gaq.push(["_setCustomVar",3,"Module","Oracle::Debug",3]);
    _gaq.push(["_setCustomVar",1,"Author","RFOLEY",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Oracle::Debug">permalink</a></div>
  <a href="/~rfoley/">Richard Foley</a> &gt;
  <a href="/~rfoley/Oracle-Debug-1.46/">Oracle-Debug-1.46</a> &gt;
  Oracle::Debug
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/b91c91e15fdd777ca3f0b5ee77b03c58?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/R/RF/RFOLEY/Oracle-Debug-1.46.tar.gz">Oracle-Debug-1.46.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Oracle%3A%3ADebug;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~RFOLEY/Oracle-Debug-1.46/Oracle/Debug.pm">Annotate this POD
</a></p>

<div style="float:right">
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Oracle-Debug">View/Report Bugs</a><br/>

</div>
</div>
  Module Version:  1.46 &nbsp;
<span class="noprint">
  <a href="/src/RFOLEY/Oracle-Debug-1.46/Oracle/Debug.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#ABSTRACT'>ABSTRACT</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#NOTES'>NOTES</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Oracle::Debug - A Perl (perldb-like) interface to the Oracle DBMS_DEBUG package for debugging PL/SQL programs.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">        ./oradb</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ABSTRACT"
>ABSTRACT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A perl-debugger-like interface to the Oracle DBMS_DEBUG package for debugging PL/SQL programs.</p>

<p>The initial impetus for creating this was to get a command-line interface, similar in instruction set and feel to the perl debugger. For this reason, it may be beneficial for a user of this module, or at least the intended <b>oradb</b> interface, to be familiar with the perl debugger first.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There are really 2 parts to this exersize:</p>

<dl>
<dt><a name="DB"
>DB</a></dt>

<dd>
<p>The current Oracle chunk is a package which can be used directly to debug PL/SQL without involving perl at all, but which has similar, but very limited, commands to the perl debugger.</p>

<p>Please see the <i>packages/header.sql</i> file for credits for the original <b>db</b> PL/SQL.</p>

<p>Developed against <b>Probe version 2.4</b></p>

<dt><a name="oradb"
>oradb</a></dt>

<dd>
<p>The Perl chunk implements a perl-debugger-like interface to the Oracle debugger itself, partially via the <b>DB</b> library referenced above.</p>
</dd>
</dl>

<p>In both cases much more conveniently from the command line, than the vanilla Oracle packages themselves. In fairness DBMS_DEBUG is probably designed to be used from a GUI of some sort, but this module focuses on it from a command line usage.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTES"
>NOTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Ignore any methods which are prefixed with an underscore (_)</p>

<p>We use a special <b>oradb_table</b> for our own purposes.</p>

<p>Set <b>Oracle_Debug</b>=1 for debugging information.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name="new"
>new</a></dt>

<dd>
<p>Create a new Oracle::Debug object</p>

<pre class="sh_perl">        my $o_debug = Oracle::Debug-&#62;new(\%dbconnectdata);</pre>

<dt><a name="_prime"
>_prime</a></dt>

<dd>
<p>Prime the object and connect to the db</p>

<p>Also ensure we are able to talk to Probe</p>

<pre class="sh_perl">        $o_debug-&#62;_prime;</pre>

<dt><a name="dbh"
>dbh</a></dt>

<dd>
<p>Return the database handle</p>

<pre class="sh_perl">        my $dbh = $o_debug-&#62;dbh;</pre>

<dt><a name="_connect"
>_connect</a></dt>

<dd>
<p>Connect to the database</p>

<dt><a name="getarow"
>getarow</a></dt>

<dd>
<p>Get a row</p>

<pre class="sh_perl">        my ($res) = $o_debug-&#62;getarow($sql);</pre>

<dt><a name="getahash"
>getahash</a></dt>

<dd>
<p>Get a list of hashes</p>

<pre class="sh_perl">        my ($res) = $o_debug-&#62;getahash($sql);</pre>

<dt><a name="help"
>help</a></dt>

<dd>
<p>Print the help listings where <i>levl</i> is one of:</p>

<pre class="sh_perl">        h    (simple)

        h h  (detail)
        
        h b  (help for break command etc.)

        $o_oradb-&#62;help($levl);</pre>

<dt><a name="preparse"
>preparse</a></dt>

<dd>
<p>Return the command via the shortest match possible</p>

<pre class="sh_perl">        my $command = $o_oradb-&#62;preparse($cmd); # (help|he)-&#62;h</pre>

<dt><a name="parse"
>parse</a></dt>

<dd>
<p>Parse the input command to the appropriate method</p>

<pre class="sh_perl">        $o_oradb-&#62;parse($cmd, $input);</pre>

<dt><a name="do"
>do</a></dt>

<dd>
<p>Wrapper for oradb-&#62;dbh-&#62;do() - internally we still use prepare and execute.</p>

<pre class="sh_perl">        $o_oradb-&#62;do($sql);</pre>

<dt><a name="recompile"
>recompile</a></dt>

<dd>
<p>Recompile these procedure|function|package&#39;s for debugging</p>

<pre class="sh_perl">        $oradb-&#62;recompile(&#39;xsource&#39;);</pre>

<dt><a name="synchronize"
>synchronize</a></dt>

<dd>
<p>Synchronize the debug and target sessions</p>

<pre class="sh_perl">        $o_oradb-&#62;synchronize;</pre>

<dt><a name="unitdata"
>unitdata</a></dt>

<dd>
<p>Retrieve data for given unit - expects to recieve <b>single</b> record from db!</p>

<pre class="sh_perl">        %data = $o_oradb-&#62;unitdata(&#39;name&#39;=&#62;$name, &#39;type&#39;=&#62;$type, ...);</pre>

<dt><a name="perl"
>perl</a></dt>

<dd>
<p>Run a chunk of perl</p>

<pre class="sh_perl">        $o_oradb-&#62;perl($perl);</pre>

<dt><a name="shell"
>shell</a></dt>

<dd>
<p>Run a shell command</p>

<pre class="sh_perl">        $o_oradb-&#62;shell($shellcommand);</pre>

<dt><a name="sql"
>sql</a></dt>

<dd>
<p>Run a chunk of SQL (select only)</p>

<pre class="sh_perl">        $o_oradb-&#62;sql($sql);</pre>

<dt><a name="_run"
>_run</a></dt>

<dd>
<p>Run a chunk</p>

<pre class="sh_perl">        $o_oradb-&#62;_run($sql);</pre>

<dt><a name="target"
>target</a></dt>

<dd>
<p>Run the target session</p>

<pre class="sh_perl">        $o_oradb-&#62;target;</pre>

<dt><a name="start_target"
>start_target</a></dt>

<dd>
<p>Get the target session id(given) and stick it in our table (by process_id)</p>

<pre class="sh_perl">        my $dbid = $oradb-&#62;start_target($dbid);</pre>

<pre class="sh_perl">        # should be autonomous transaction
        my $insert = qq#INSERT INTO $self-&#62;{_config}{table} 
           (created, debugpid, targetpid, sessionid, data) 
                VALUES (sysdate, $$, $$, &#39;$dbid&#39;, &#39;xxx&#39;
        )#;
        $x_res = $self-&#62;do($insert);

        $x_res = $self-&#62;do(&#39;COMMIT&#39;);</pre>

<dt><a name="debugger"
>debugger</a></dt>

<dd>
<p>Run the debugger</p>

<pre class="sh_perl">        $o_debug-&#62;debugger;</pre>

<dt><a name="start_debug"
>start_debug</a></dt>

<dd>
<p>Start the debugger session</p>

<pre class="sh_perl">        my $i_res = $oradb-&#62;start_debug($db_session_id, $pid);</pre>

<dt><a name="sync"
>sync</a></dt>

<dd>
<p>Blocks debug session until we exec in target session</p>

<pre class="sh_perl">        my $i_res = $oradb-&#62;sync;</pre>

<dt><a name="execute"
>execute</a></dt>

<dd>
<p>Runs the given statement against the target session</p>

<pre class="sh_perl">        my $i_res = $oradb-&#62;execute($xsql);</pre>

<dt><a name="break"
>break</a></dt>

<dd>
<p>Set a breakpoint</p>

<pre class="sh_perl">        my $i_res = $oradb-&#62;break(&#34;$i_line $procedurename&#34;);</pre>

<dt><a name="continue"
>continue</a></dt>

<dd>
<p>Continue execution until given breakpoints</p>

<pre class="sh_perl">        my $i_res = $oradb-&#62;continue;</pre>

<dt><a name="next"
>next</a></dt>

<dd>
<p>Step over the next line</p>

<pre class="sh_perl">        my $i_res = $oradb-&#62;next;</pre>

<dt><a name="step"
>step</a></dt>

<dd>
<p>Step into the next statement</p>

<pre class="sh_perl">        my $i_res = $oradb-&#62;step;</pre>

<dt><a name="return"
>return</a></dt>

<dd>
<p>Return from the current scope</p>

<pre class="sh_perl">        my $i_res = $oradb-&#62;return;</pre>

<dt><a name="runtime"
>runtime</a></dt>

<dd>
<p>Print runtime_info via dbms_output</p>

<pre class="sh_perl">        $oradb-&#62;runtime;</pre>

<dt><a name="backtrace"
>backtrace</a></dt>

<dd>
<p>Print backtrace from runtime info via dbms_output</p>

<pre class="sh_perl">        $o_oradb-&#62;backtrace();</pre>

<dt><a name="list_source"
>list_source</a></dt>

<dd>
<p>Print source</p>

<pre class="sh_perl">        $oradb-&#62;list_source(&#39;xsource&#39;, [PROC|...]);</pre>

<dt><a name="list_breakpoints"
>list_breakpoints</a></dt>

<dd>
<p>Print breakpoint info</p>

<pre class="sh_perl">        $oradb-&#62;list_breakpoints;</pre>

<dt><a name="history"
>history</a></dt>

<dd>
<p>Display the command history</p>

<pre class="sh_perl">        print $o_oradb-&#62;history;        </pre>

<dt><a name="rerun"
>rerun</a></dt>

<dd>
<p>Rerun a command from the history list</p>

<pre class="sh_perl">        $o_oradb-&#62;rerun($histno);</pre>

<dt><a name="info"
>info</a></dt>

<dd>
<p>Info</p>

<pre class="sh_perl">        print $oradb-&#62;info;</pre>

<dt><a name="context"
>context</a></dt>

<dd>
<p>Get and set context info</p>

<pre class="sh_perl">        my $s_res = $o_oradb-&#62;context($name);         # get

        my $s_res = $o_oradb-&#62;context($name, $value); # set</pre>

<dt><a name="probe_version"
>probe_version</a></dt>

<dd>
<p>Log the Probe version</p>

<pre class="sh_perl">        print $oradb-&#62;probe_version;</pre>

<dt><a name="test"
>test</a></dt>

<dd>
<p>Call self_check, ping and is_running</p>

<pre class="sh_perl">        my $i_ok = $oradb-&#62;test();</pre>

<dt><a name="self_check"
>self_check</a></dt>

<dd>
<p>Self-&#62;check</p>

<pre class="sh_perl">        my $i_ok = $oradb-&#62;self_check; # 9.2</pre>

<dt><a name="ping"
>ping</a></dt>

<dd>
<p>Ping the target process (gives an ORA-error if no target)</p>

<pre class="sh_perl">        my $i_ok = $oradb-&#62;ping; # 9.2</pre>

<dt><a name="is_running"
>is_running</a></dt>

<dd>
<p>Check the target is still running - ???</p>

<pre class="sh_perl">        my $i_ok = $oradb-&#62;is_running; # 9.2</pre>

<dt><a name="plsql_errstr"
>plsql_errstr</a></dt>

<dd>
<p>Get PL/SQL error string</p>

<pre class="sh_perl">        $o_debug-&#62;plsql_errstr;</pre>

<dt><a name="put_msg"
>put_msg</a></dt>

<dd>
<p>Put debug message info</p>

<pre class="sh_perl">        $o_debug-&#62;put_msg($msg);</pre>

<dt><a name="get_msg"
>get_msg</a></dt>

<dd>
<p>Get debug message info</p>

<pre class="sh_perl">        print $o_debug-&#62;get_msg;</pre>

<dt><a name="value"
>value</a></dt>

<dd>
<p>Get and set the value of a variable, in a procedure, or in a package</p>

<pre class="sh_perl">        my $val = $o_oradb-&#62;value($name);

        my $val = $o_oradb-&#62;value($name, $value);</pre>

<dt><a name="_get_val"
>_get_val</a></dt>

<dd>
<p>Get the value of a variable</p>

<pre class="sh_perl">        my $val = $o_debug-&#62;_get_val($varname);</pre>

<dt><a name="_set_val"
>_set_val</a></dt>

<dd>
<p>Set the value of a variable</p>

<pre class="sh_perl">        my $val = $o_debug-&#62;_set_val($xset);</pre>

<dt><a name="audit"
>audit</a></dt>

<dd>
<p>Get auditing info</p>

<pre class="sh_perl">        my ($audsid) = $o_debug-&#62;audit;</pre>

<dt><a name="_check"
>_check</a></dt>

<dd>
<p>Return whether or not the given PLSQL target has a value of some sort</p>

<pre class="sh_perl">        my $i_ok = $o_oradb-&#62;_check(&#39;unit&#39;);</pre>

<dt><a name="_unit"
>_unit</a></dt>

<dd>
<p>Get and set <b>unit</b> name for all consequent actions</p>

<pre class="sh_perl">        $o_oradb-&#62;_unit;        # get

        $o_oradb-&#62;_unit($name); # set</pre>

<dt><a name="_type"
>_type</a></dt>

<dd>
<p>Get and set <b>type</b> for all consequent actions</p>

<pre class="sh_perl">        $o_oradb-&#62;_type;        # get

        $o_oradb-&#62;_type($type); # set</pre>

<dt><a name="_namespace"
>_namespace</a></dt>

<dd>
<p>Get and set <b>unit</b> namespace for all consequent actions</p>

<pre class="sh_perl">        $o_oradb-&#62;_namespace;         # get

        $o_oradb-&#62;_namespace($space); # set</pre>

<dt><a name="_owner"
>_owner</a></dt>

<dd>
<p>Get and set <b>unit</b> owner for all consequent actions</p>

<pre class="sh_perl">        $o_oradb-&#62;_owner;        # get

        $o_oradb-&#62;_owner($user); # set</pre>

<dt><a name="feedback"
>feedback</a></dt>

<dd>
<p>Feedback handler (currently just prints to STDOUT)</p>

<pre class="sh_perl">        $o_debug-&#62;feedback(&#34;this&#34;);</pre>

<dt><a name="log"
>log</a></dt>

<dd>
<p>Log handler (currently just prints to STDERR)</p>

<pre class="sh_perl">        $o_debug-&#62;log(&#34;this&#34;);</pre>

<dt><a name="quit"
>quit</a></dt>

<dd>
<p>Quit the debugger</p>

<pre class="sh_perl">        $o_oradb-&#62;quit;</pre>

<dt><a name="error"
>error</a></dt>

<dd>
<p>Error handler</p>

<dt><a name="fatal"
>fatal</a></dt>

<dd>
<p>Fatal error handler</p>

<dt><a name="abort"
>abort</a></dt>

<dd>
<p>Tell the target session to abort the currently running program</p>

<pre class="sh_perl">        $o_debug-&#62;abort;</pre>

<dt><a name="detach"
>detach</a></dt>

<dd>
<p>Tell the target session to detach itself</p>

<pre class="sh_perl">        $o_debug-&#62;detach;</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?DBD%3A%3AOracle" class="podlinkpod"
>DBD::Oracle</a></p>

<p>perldebug</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Richard Foley, &#60;Oracle_Debug@rfi.net&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2003 by Richard Foley</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78167 Uploads, 24706 Distributions
105970 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Tue Apr 24 23:05:53 2012 GMT (0.155606031417847) @cpansearch1 -->
 </body>
</html>
