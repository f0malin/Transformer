<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Sendmail::Milter - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Sendmail-Milter",3]);
    _gaq.push(["_setCustomVar",5,"Release","Sendmail-Milter-0.18",3]);
    _gaq.push(["_setCustomVar",3,"Module","Sendmail::Milter",3]);
    _gaq.push(["_setCustomVar",1,"Author","CYING",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Sendmail::Milter">permalink</a></div>
  <a href="/~cying/">Charles Ying</a> &gt;
  <a href="/~cying/Sendmail-Milter-0.18/">Sendmail-Milter-0.18</a> &gt;
  Sendmail::Milter
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/af19591183958eda4ce6566b8eca153b?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/C/CY/CYING/Sendmail-Milter-0.18.tar.gz">Sendmail-Milter-0.18.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Sendmail%3A%3AMilter;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~CYING/Sendmail-Milter-0.18/Milter.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?IPC%3A%3ASysV">IPC::SysV</a><br>
<a href="/perldoc?Net%3A%3ATelnet">Net::Telnet</a><br>
<a href="/perldoc?Mail%3A%3APOP3Client">Mail::POP3Client</a><br>
<a href="/perldoc?IO%3A%3ASocket">IO::Socket</a><br>
<a href="/perldoc?Time%3A%3AHiRes">Time::HiRes</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?XML%3A%3ALibXML">XML::LibXML</a><br>
<a href="/perldoc?XML%3A%3AXPath">XML::XPath</a><br>
<a href="/perldoc?Unix%3A%3ASyslog">Unix::Syslog</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Sendmail%3A%3AMilter">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 5</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Sendmail-Milter">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.18 &nbsp;
<span class="noprint">
  <a href="/src/CYING/Sendmail-Milter-0.18/Milter.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Main_Functions'>Main Functions</a>
    <li class='indexItem indexItem2'><a href='#Writing_Milter_Callbacks'>Writing Milter Callbacks</a>
    <li class='indexItem indexItem2'><a href='#Milter_Callback_Interfaces'>Milter Callback Interfaces</a>
    <li class='indexItem indexItem2'><a href='#Milter_Context_Functions'>Milter Context Functions</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#@EXPORT'>@EXPORT</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Callback_Result_Codes'>Callback Result Codes</a>
    <li class='indexItem indexItem2'><a href='#Capability_Flags'>Capability Flags</a>
    <li class='indexItem indexItem2'><a href='#Capability_Flag_Sets'>Capability Flag Sets</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Appending_a_line_to_the_message_body'>Appending a line to the message body</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Sendmail::Milter - Interface to sendmail&#39;s Mail Filter API</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Sendmail::Milter;

  my %my_milter_callbacks =
  (
        &#39;connect&#39; =&#62;    \&#38;my_connect_callback,
        &#39;helo&#39; =&#62;       \&#38;my_helo_callback,
        &#39;envfrom&#39; =&#62;    \&#38;my_envfrom_callback,
        &#39;envrcpt&#39; =&#62;    \&#38;my_envrcpt_callback,
        &#39;header&#39; =&#62;     \&#38;my_header_callback,
        &#39;eoh&#39; =&#62;        \&#38;my_eoh_callback,
        &#39;body&#39; =&#62;       \&#38;my_body_callback,
        &#39;eom&#39; =&#62;        \&#38;my_eom_callback,
        &#39;abort&#39; =&#62;      \&#38;my_abort_callback,
        &#39;close&#39; =&#62;      \&#38;my_close_callback,
  );

  sub my_connect_callback;
  sub my_helo_callback;
  sub my_envfrom_callback;
  sub my_envrcpt_callback;
  sub my_header_callback;
  sub my_eoh_callback;
  sub my_body_callback;
  sub my_eom_callback;
  sub my_abort_callback;
  sub my_close_callback;


  BEGIN:
  {
        # Get myfilter&#39;s connection information
        # from /etc/mail/sendmail.cf

        Sendmail::Milter::auto_setconn(&#34;myfilter&#34;);
        Sendmail::Milter::register(&#34;myfilter&#34;,
                \%my_milter_callbacks, SMFI_CURR_ACTS);

        Sendmail::Milter::main();

        # Never reaches here, callbacks are called from Milter.
  }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>Sendmail::Milter</b> is a Perl extension to sendmail&#39;s Mail Filter API (Milter).</p>

<p><b>Note:</b> You need to have a Perl 5.6 or later interpreter built with <b>-Dusethreads</b>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Portions of this document come from comments in the <b>libmilter/mfapi.h</b> header file.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Main_Functions"
>Main Functions</a></h2>

<p><b>Note:</b> No functions are exported. You must call these functions explicitly from the <b>Sendmail::Milter</b> package.</p>

<dl>
<dt><a name='register'></a><a name="register_NAME,_CALLBACKS_[,_FLAGS]"
>register NAME, CALLBACKS [, FLAGS]</a></dt>

<dd>
<p>Registers a mail filter NAME with hash reference CALLBACKS callbacks, and optional capability flags FLAGS. NAME is the same filter name that you would pass to <b>auto_setconn</b>. CALLBACKS is a hash reference that can contain any of the following keys:</p>

<pre class="sh_perl">  connect
  helo
  envfrom
  envrcpt
  header
  eoh
  body
  eom
  abort
  close</pre>

<p>The values for these keys indicate the callback routine that is associated with each Milter callback. The values must be either function names, code references or closures.</p>

<p>This function returns nonzero upon success, the undefined value otherwise.</p>

<p><b>%Sendmail::Milter::DEFAULT_CALLBACKS</b> is a hash with default function names for all of the Milter callbacks. The default callback function names are:</p>

<p><b>connect_callback</b>, <b>helo_callback</b>, <b>envfrom_callback</b>, <b>envrcpt_callback</b>, <b>header_callback</b>, <b>eoh_callback</b>, <b>body_callback</b>, <b>eom_callback</b>, <b>abort_callback</b>, <b>close_callback</b>.</p>

<p>See the section <b>Writing Milter Callbacks</b> for more information on writing the callbacks themselves.</p>

<p>For more information on capability flags, see the section <b>Capability Flags</b> in the <b>@EXPORT</b> section.</p>

<dt><a name='main'></a><a name="main_[MAX_INTERPRETERS]_[,_MAX_REQUESTS]"
>main [MAX_INTERPRETERS] [, MAX_REQUESTS]</a></dt>

<dd>
<p>Starts the mail filter. If successful, this function never returns. Instead, it launches the Milter engine which will call each of the callback routines as appropriate.</p>

<p>MAX_INTERPRETERS sets the limit on the maximum number of interpreters that <b>Sendmail::Milter</b> is allowed to create. These interpreters will only be created as the need arises and are not all created at startup. The default value is 0. (No maximum limit)</p>

<p>MAX_REQUESTS sets the limit on the maximum number of requests an interpreter will process before being recycled. The default value is 0. (Don&#39;t recycle interpreters)</p>

<p>This function returns nonzero on success (if a kill was signaled or something), the undefined value otherwise.</p>

<p><b>Note:</b> You should have at least registered a callback and set the connection information string before calling this function.</p>

<dt><a name='setconn'></a><a name="setconn_CONNECTION_INFO"
>setconn CONNECTION_INFO</a></dt>

<dd>
<p>Sets the connection information string for the filter. The format of this string is identical to that found in the Milter documentation. Some examples are <code>local:/var/run/f1.sock</code>, <code>inet6:999@localhost</code>, <code>inet:3333@localhost</code>.</p>

<p>This function returns nonzero upon success, the undefined value otherwise.</p>

<dt><a name='auto_setconn'></a><a name="auto_setconn_NAME_[,_SENDMAIL_CF_FILENAME]"
>auto_setconn NAME [, SENDMAIL_CF_FILENAME]</a></dt>

<dd>
<p>This function automatically sets the connection information by parsing the sendmail .cf file for the appropriate X line containing the connection information for the NAME mail filter and calling <b>setconn</b> if it was successful. It is provided as a helper function and does not exist in the current Milter library.</p>

<p><b>Note:</b> This connection information isn&#39;t useful for implementing a Milter that resides on a machine that is remote to the machine running sendmail. In those cases, you will want to set the connection information manually with <b>setconn</b>.</p>

<p>This function returns nonzero upon success, the undefined value otherwise.</p>

<p>SENDMAIL_CF_FILENAME defaults to <code>/etc/mail/sendmail.cf</code> if not specified.</p>

<dt><a name='auto_getconn'></a><a name="auto_getconn_NAME_[,_SENDMAIL_CF_FILENAME]"
>auto_getconn NAME [, SENDMAIL_CF_FILENAME]</a></dt>

<dd>
<p>Similar to <b>auto_setconn</b>, this function parses the sendmail .cf file for the appropriate X line containing the connection information for NAME. It does not, however, call <b>setconn</b>. It only retrieves the connection information.</p>

<p>This function returns the connection information string for NAME, or undef on failure.</p>

<p>SENDMAIL_CF_FILENAME defaults to <code>/etc/mail/sendmail.cf</code> if not specified.</p>

<dt><a name='settimeout'></a><a name="settimeout_TIMEOUT"
>settimeout TIMEOUT</a></dt>

<dd>
<p>Sets the timeout for reads/writes in the Milter engine.</p>

<p>This function returns nonzero upon success, the undefined value otherwise.</p>

<dt><a name='setdbg'></a><a name="setdbg_LEVEL"
>setdbg LEVEL</a></dt>

<dd>
<p>Sets the debug level for the Milter engine.</p>

<p>This function returns nonzero upon success, the undefined value otherwise.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Writing_Milter_Callbacks"
>Writing Milter Callbacks</a></h2>

<p>Writing Milter callbacks is pretty easy when you&#39;re doing simple text processing.</p>

<p>But remember one thing: Each Milter callback could quite possibly run in a different instance of the Perl interpreter.</p>

<p><b>Sendmail::Milter</b> launches multiple persistent Perl interpreters to increase performance (so it doesn&#39;t have to startup and shutdown the interpreters constantly). Thus, you can&#39;t rely on setting external package variables, global variables, or even running other modules which rely on such things. This will continue to be true while interpreter thread support in Perl is experimental. For more information, see <a href="/perldoc?perlfork" class="podlinkpod"
>perlfork</a>. Most of that information applies here.</p>

<p>Remember to return one of the <b>SMFIS_*</b> result codes from the callback routine. Remember there can be multiple message body chunks. And remember that only <b>eom_callback</b> is allowed to manipulate the headers, recipients, message body, etc.</p>

<p>See the <b>@EXPORT</b> section for information on the <b>SMFIS_*</b> result codes.</p>

<p>Here is an example of a <b>connect_callback</b> routine:</p>

<pre class="sh_perl">  # External modules are OK, but note the caveats above.
  use Socket;   

  sub connect_callback
  {
        my $ctx = shift;        # The Milter context object.
        my $hostname = shift;   # The connection&#39;s host name.
        my $sockaddr_in = shift;
        my ($port, $iaddr) = sockaddr_in($sockaddr_in);

        print &#34;Hostname is: &#34; . $hostname . &#34;\n&#34;;

        # Cool, a printable IP address.
        print &#34;IP Address is: &#34; . inet_ntoa($iaddr) . &#34;\n&#34;;

        return SMFIS_CONTINUE;  # Returning a value is important!
  }</pre>

<p><b>Note:</b> The $ctx Milter context object is not a true Perl object. It&#39;s really a blessed reference to an opaque C structure. Only use the Milter context functions (described in a later section) with this object. (Don&#39;t touch it, it&#39;s evil.)</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Milter_Callback_Interfaces"
>Milter Callback Interfaces</a></h2>

<p>These interfaces closely mirror their Milter callback counterparts, however there are some differences that take advantage of Perl&#39;s syntactic sugar.</p>

<p><b>Note:</b> Each callback receives a Milter context object as the first argument. This context object is used in making Milter Context function calls. See <b>Milter Context Functions</b> for more details.</p>

<dl>
<dt><a name='connect_callback'></a><a name="connect_callback_CTX,_HOSTNAME,_SOCKADDR_IN"
><b>connect_callback</b> CTX, HOSTNAME, SOCKADDR_IN</a></dt>

<dd>
<p>Invoked on each connection. HOSTNAME is the host domain name, as determined by a reverse lookup on the host address. SOCKADDR_IN is the AF_INET portion of the host address, as determined by a <b>getpeername(2)</b> syscall on the SMTP socket. You can use <b>Socket::unpack_sockaddr_in()</b> to unpack it into a port and IP address.</p>

<p>This callback should return one of the <b>SMFIS_*</b> result codes.</p>

<dt><a name='helo_callback'></a><a name="helo_callback_CTX,_HELOHOST"
><b>helo_callback</b> CTX, HELOHOST</a></dt>

<dd>
<p>Invoked on SMTP HELO/EHLO command. HELOHOST is the value passed to HELO/EHLO command, which should be the domain name of the sending host (but is, in practice, anything the sending host wants to send).</p>

<p>This callback should return one of the <b>SMFIS_*</b> result codes.</p>

<dt><a name='envfrom_callback'></a><a name="envfrom_callback_CTX,_ARG1,_ARG2,_...,_ARGn"
><b>envfrom_callback</b> CTX, ARG1, ARG2, ..., ARGn</a></dt>

<dd>
<p>Invoked on envelope from. ARG1, ARG2, ... ARGn are SMTP command arguments. ARG1 is guaranteed to be the sender address. Later arguments are the ESMTP arguments.</p>

<p>This callback should return one of the <b>SMFIS_*</b> result codes.</p>

<dt><a name='envrcpt_callback'></a><a name="envrcpt_callback_CTX,_ARG1,_ARG2,_...,_ARGn"
><b>envrcpt_callback</b> CTX, ARG1, ARG2, ..., ARGn</a></dt>

<dd>
<p>Invoked on each envelope recipient. ARG1, ARG2, ... ARGn are SMTP command arguments. ARG1 is guaranteed to be the recipient address. Later arguments are the ESMTP arguments.</p>

<p>This callback should return one of the <b>SMFIS_*</b> result codes.</p>

<dt><a name='header_callback'></a><a name="header_callback_CTX,_FIELD,_VALUE"
><b>header_callback</b> CTX, FIELD, VALUE</a></dt>

<dd>
<p>Invoked on each message header. The content of the header may have folded white space (that is, multiple lines with following white space) included. FIELD is the header field name, VALUE is the header field value.</p>

<p>This callback should return one of the <b>SMFIS_*</b> result codes.</p>

<dt><a name='eoh_callback'></a><a name="eoh_callback_CTX"
><b>eoh_callback</b> CTX</a></dt>

<dd>
<p>Invoked at end of header.</p>

<p>This callback should return one of the <b>SMFIS_*</b> result codes.</p>

<dt><a name='body_callback'></a><a name="body_callback_CTX,_BODY,_LEN"
><b>body_callback</b> CTX, BODY, LEN</a></dt>

<dd>
<p>Invoked for each body chunk. There may be multiple body chunks passed to the filter. End-of-lines are represented as received from SMTP (normally Carriage-Return/Line-Feed). BODY contains the body data, LEN contains the length of the body data.</p>

<p>This callback should return one of the <b>SMFIS_*</b> result codes.</p>

<dt><a name='eom_callback'></a><a name="eom_callback_CTX"
><b>eom_callback</b> CTX</a></dt>

<dd>
<p>Invoked at end of message. This routine can perform special operations such as modifying the message header, body, or envelope. See the section on <b>eom_callback</b> in <b>Milter Context Functions</b>.</p>

<p>This callback should return one of the <b>SMFIS_*</b> result codes.</p>

<dt><a name='abort_callback'></a><a name="abort_callback_CTX"
><b>abort_callback</b> CTX</a></dt>

<dd>
<p>Invoked if message is aborted outside of the control of the filter, for example, if the SMTP sender issues an RSET command. If <b>abort_callback</b> is called, <b>eom_callback</b> will not be called and vice versa.</p>

<p>This callback should return one of the <b>SMFIS_*</b> result codes.</p>

<dt><a name='close_callback'></a><a name="close_callback_CTX"
><b>close_callback</b> CTX</a></dt>

<dd>
<p>Invoked at end of the connection. This is called on close even if the previous mail transaction was aborted.</p>

<p>This callback should return one of the <b>SMFIS_*</b> result codes.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Milter_Context_Functions"
>Milter Context Functions</a></h2>

<p>These routines are object methods that are part of the <b>Sendmail::Milter::Context</b> pseudo-package for use by <b>Sendmail::Milter</b> callback functions. Any attempts to use them without a properly blessed Milter context object will fail miserably. Please see restrictions on when these routines may be called.</p>

<p><b>Context routines available to all Milter callback functions:</b></p>

<p>These functions are available to all types of Milter callback functions. It is worth noting that passing connection-private data by reference is probably more efficient than passing by value.</p>

<dl>
<dt><a name='ctx'></a><a name="$ctx-&#62;setpriv_DATA"
><b>$ctx</b>-&#62;setpriv DATA</a></dt>

<dd>
<p>Each <b>$ctx</b> can contain connection-private data (specific to an SMTP connection). This routine can be used to allocate this private data. Calling this function with DATA set to the undefined value will clear Milter&#39;s pointer to this private data. You should always do this to decrement the private data&#39;s reference count.</p>

<p>This function returns nonzero upon success, the undefined value otherwise.</p>

<dt><a name='ctx'></a><a name="$ctx-&#62;getpriv"
><b>$ctx</b>-&#62;getpriv</a></dt>

<dd>
<p>Each <b>$ctx</b> can contain connection-private data (specific to an SMTP connection). This routine can be used to retrieve this private data.</p>

<p>This function returns a scalar containing <b>$ctx</b>&#39;s private data.</p>

<dt><a name='ctx'></a><a name="$ctx-&#62;getsymval_SYMNAME"
><b>$ctx</b>-&#62;getsymval SYMNAME</a></dt>

<dd>
<p>Additional information is passed in to the vendor filter routines using symbols. Symbols correspond closely to sendmail macros. The symbols defined depend on the context. SYMNAME is the name of the symbol to access.</p>

<p>This function returns the value of the symbol name SYMNAME.</p>

<dt><a name='ctx'></a><a name="$ctx-&#62;setreply_RCODE,_XCODE,_MESSAGE"
><b>$ctx</b>-&#62;setreply RCODE, XCODE, MESSAGE</a></dt>

<dd>
<p>Set the specific reply code to be used in response to the active command. If not specified, a generic reply code is used. RCODE is the three-digit (<b>RFC 821</b>) SMTP reply code to be returned, e.g. <code>551</code>. XCODE is the extended (<b>RFC 2034</b>) reply code, e.g., <code>5.7.6</code>. MESSAGE is the text part of the SMTP reply.</p>

<p>This function returns nonzero upon success, the undefined value otherwise.</p>
</dd>
</dl>

<p><b>Context routines available only to the eom_callback function:</b></p>

<p>The <b>eom_callback</b> Milter callback is called at the end of a message (essentially, after the final DATA dot). This routine can call some special routines to modify the envelope, header, or body of the message before the message is enqueued. These routines must not be called from any vendor routine other than <b>eom_callback</b>.</p>

<dl>
<dt><a name='ctx'></a><a name="$ctx-&#62;addheader_FIELD,_VALUE"
><b>$ctx</b>-&#62;addheader FIELD, VALUE</a></dt>

<dd>
<p>Add a header to the message. FIELD is the header field name. VALUE is the header field value. This header is not passed to other filters. It is not checked for standards compliance; the mail filter must ensure that no protocols are violated as a result of adding this header.</p>

<p>This function returns nonzero upon success, the undefined value otherwise.</p>

<dt><a name='ctx'></a><a name="$ctx-&#62;chgheader_FIELD,_INDEX,_VALUE"
><b>$ctx</b>-&#62;chgheader FIELD, INDEX, VALUE</a></dt>

<dd>
<p>Change/delete a header in the message. FIELD is the header field name. INDEX is the Nth occurence of the header field name. VALUE is the new header field value (empty for delete header). It is not checked for standards compliance; the mail filter must ensure that no protocols are violated as a result of adding this header.</p>

<p>This function returns nonzero upon success, the undefined value otherwise.</p>

<dt><a name='ctx'></a><a name="$ctx-&#62;addrcpt_RCPT"
><b>$ctx</b>-&#62;addrcpt RCPT</a></dt>

<dd>
<p>Add a recipient to the envelope. RCPT is the recipient to be added.</p>

<p>This function returns nonzero upon success, the undefined value otherwise.</p>

<dt><a name='ctx'></a><a name="$ctx-&#62;delrcpt_RCPT"
><b>$ctx</b>-&#62;delrcpt RCPT</a></dt>

<dd>
<p>Delete a recipient from the envelope. RCPT is the envelope recipient to be deleted. This should be in exactly the same form passed to <b>envrcpt_callback</b> or the address may not be deleted.</p>

<p>This function returns nonzero upon success, the undefined value otherwise.</p>

<dt><a name='ctx'></a><a name="$ctx-&#62;replacebody_DATA"
><b>$ctx</b>-&#62;replacebody DATA</a></dt>

<dd>
<p>Replace the body of the message. DATA is the scalar containing the block of message body information to insert. This routine may be called multiple times if the body is longer than convenient to send in one call. End of line should be represented as Carriage-Return/Line Feed.</p>

<p>This function returns nonzero upon success, the undefined value otherwise.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="@EXPORT"
>@EXPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>Sendmail::Milter</b> exports the following constants:</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Callback_Result_Codes"
>Callback Result Codes</a></h2>

<p>These are the possible result codes that may be returned by the Milter callback functions. If you do not specify a return value, <b>Sendmail::Milter</b> will send a default result code of <b>SMFIS_CONTINUE</b> back to Milter.</p>

<dl>
<dt><a name="SMFIS_CONTINUE"
>SMFIS_CONTINUE</a></dt>

<dd>
<p>Continue processing message/connection</p>

<dt><a name="SMFIS_REJECT"
>SMFIS_REJECT</a></dt>

<dd>
<p>Reject the message/connection. No further routines will be called for this message (or connection, if returned from a connection-oriented routine).</p>

<dt><a name="SMFIS_DISCARD"
>SMFIS_DISCARD</a></dt>

<dd>
<p>Accept the message, but silently discard the message. No further routines will be called for this message. This is only meaningful from message-oriented routines.</p>

<dt><a name="SMFIS_ACCEPT"
>SMFIS_ACCEPT</a></dt>

<dd>
<p>Accept the message/connection. No further routines will be called for this message (or connection, if returned from a connection-oriented routine; in this case, it causes all messages on this connection to be accepted without filtering).</p>

<dt><a name="SMFIS_TEMPFAIL"
>SMFIS_TEMPFAIL</a></dt>

<dd>
<p>Return a temporary failure, i.e., the corresponding SMTP command will return a 4xx status code. In some cases this may prevent further routines from being called on this message or connection, although in other cases (e.g., when processing an envelope recipient) processing of the message will continue.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Capability_Flags"
>Capability Flags</a></h2>

<p>These are possible capability flags for what a mail filter can do. Normally, you should specify each capability explicitly as needed.</p>

<dl>
<dt><a name="SMFIF_ADDHDRS"
>SMFIF_ADDHDRS</a></dt>

<dd>
<p>Allows a mail filter to add headers.</p>

<dt><a name="SMFIF_CHGBODY"
>SMFIF_CHGBODY</a></dt>

<dd>
<p>Allows a mail filter to change the message body.</p>

<dt><a name="SMFIF_ADDRCPT"
>SMFIF_ADDRCPT</a></dt>

<dd>
<p>Allows a mail filter to add recipients.</p>

<dt><a name="SMFIF_DELRCPT"
>SMFIF_DELRCPT</a></dt>

<dd>
<p>Allows a mail filter to delete recipients.</p>

<dt><a name="SMFIF_CHGHDRS"
>SMFIF_CHGHDRS</a></dt>

<dd>
<p>Allows a mail filter to change headers.</p>

<dt><a name="SMFIF_MODBODY"
>SMFIF_MODBODY</a></dt>

<dd>
<p>Allows a mail filter to change the message body. (Provided only for backwards compatibility)</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Capability_Flag_Sets"
>Capability Flag Sets</a></h2>

<p>These provide sets of capability flags that indicate all of the capabilities in a particular version of Milter. <b>SMFI_CURR_ACTS</b> is set to the capabilities in the current version of Milter.</p>

<dl>
<dt><a name="SMFI_CURR_ACTS"
>SMFI_CURR_ACTS</a></dt>

<dd>
<p>Enables the set of capabilities available to mail filters in the current version of Milter.</p>

<dt><a name="SMFI_V1_ACTS"
>SMFI_V1_ACTS</a></dt>

<dd>
<p>Enables the set of capabilities available to mail filters in V1 of Milter.</p>

<dt><a name="SMFI_V2_ACTS"
>SMFI_V2_ACTS</a></dt>

<dd>
<p>Enables the set of capabilities available to mail filters in V2 of Milter.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Appending_a_line_to_the_message_body"
>Appending a line to the message body</a></h2>

<pre class="sh_perl">  use Sendmail::Milter;

  my %my_milter_callbacks =
  (
        &#39;eoh&#39; =&#62;        \&#38;my_eoh_callback,
        &#39;body&#39; =&#62;       \&#38;my_body_callback,
        &#39;eom&#39; =&#62;        \&#38;my_eom_callback,
        &#39;abort&#39; =&#62;      \&#38;my_abort_callback,
  );

  sub my_eoh_callback
  {
        my $ctx = shift;
        my $body = &#34;&#34;;

        $ctx-&#62;setpriv(\$body);

        return SMFIS_CONTINUE;
  }

  sub my_body_callback
  {
        my $ctx = shift;
        my $body_chunk = shift;
        my $body_ref = $ctx-&#62;getpriv();

        ${$body_ref} .= $body_chunk;

        # This is crucial, the reference to the body may have
        # changed.

        $ctx-&#62;setpriv($body_ref);

        return SMFIS_CONTINUE;
  }

  sub my_eom_callback
  {
        my $ctx = shift;
        my $body_ref = $ctx-&#62;getpriv();

        # Note: This doesn&#39;t support messages with MIME data.

        ${$body_ref} .= &#34;---&#62; Append me to this message body!\n&#34;;

        $ctx-&#62;replacebody(${$body_ref});

        $ctx-&#62;setpriv(undef);

        return SMFIS_ACCEPT;
  }

  sub my_abort_callback
  {
        my $ctx = shift;

        $ctx-&#62;setpriv(undef);

        return SMFIS_CONTINUE;
  }


  # The following code does not necessarily need to be in a
  # BEGIN block. It just looks funny without it. :)

  BEGIN:
  {
        Sendmail::Milter::auto_setconn(&#34;myfilter&#34;);
        Sendmail::Milter::register(&#34;myfilter&#34;,
                \%my_milter_callbacks, SMFI_CURR_ACTS);

        Sendmail::Milter::main();

        # Never reaches here, callbacks are called from Milter.
  }</pre>

<p>See the <b>test.pl</b> sample test case for more callback examples.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Charles Ying, cying@cpan.org.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2000-2001 Charles Ying. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as sendmail itself.</p>

<p>The interpreter pools portion (found in the intpools.c, intpools.h, and test.pl files) of this code is also available under the same terms as perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perl(1), sendmail(8).</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78068 Uploads, 24686 Distributions
105902 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sun Apr 22 13:03:58 2012 GMT (0.117011070251465) @cpansearch1 -->
 </body>
</html>
