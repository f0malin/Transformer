<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Net::Telnet - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Net-Telnet",3]);
    _gaq.push(["_setCustomVar",5,"Release","Net-Telnet-3.03",3]);
    _gaq.push(["_setCustomVar",3,"Module","Net::Telnet",3]);
    _gaq.push(["_setCustomVar",1,"Author","JROGERS",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Net::Telnet">permalink</a></div>
  <a href="/~jrogers/">Jay Rogers</a> &gt;
  <a href="/~jrogers/Net-Telnet-3.03/">Net-Telnet-3.03</a> &gt;
  Net::Telnet
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/9c895e5c41aa5e1e87e304b23b3534dd?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/J/JR/JROGERS/Net-Telnet-3.03.tar.gz">Net-Telnet-3.03.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Net%3A%3ATelnet;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~JROGERS/Net-Telnet-3.03/lib/Net/Telnet.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Net%3A%3AFTP">Net::FTP</a><br>
<a href="/perldoc?IO%3A%3ASocket">IO::Socket</a><br>
<a href="/perldoc?Net%3A%3ASSH">Net::SSH</a><br>
<a href="/perldoc?Net%3A%3ASSH%3A%3APerl">Net::SSH::Perl</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?IO%3A%3ASelect">IO::Select</a><br>
<a href="/perldoc?LWP%3A%3ASimple">LWP::Simple</a><br>
<a href="/perldoc?File%3A%3AFind">File::Find</a><br>
<a href="/perldoc?Term%3A%3AReadKey">Term::ReadKey</a><br>
<a href="/perldoc?Net%3A%3APing">Net::Ping</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Net%3A%3ATelnet">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 14</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Net-Telnet">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  3.03 &nbsp;
<span class="noprint">
  <a href="/src/JROGERS/Net-Telnet-3.03/lib/Net/Telnet.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#What_To_Know_Before_Using'>What To Know Before Using</a>
    <li class='indexItem indexItem2'><a href='#Debugging'>Debugging</a>
    <li class='indexItem indexItem2'><a href='#Style_of_Named_Parameters'>Style of Named Parameters</a>
    <li class='indexItem indexItem2'><a href='#Connecting_to_a_Remote_MS-Windows_Machine'>Connecting to a Remote MS-Windows Machine</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Net::Telnet - interact with TELNET port or other TCP ports</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>use Net::Telnet ();</code></p>

<p>see METHODS section below</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Net::Telnet allows you to make client connections to a TCP port and do network I/O,
especially to a port using the TELNET protocol.
Simple I/O methods such as print,
get,
and getline are provided.
More sophisticated interactive features are provided because connecting to a TELNET port ultimately means communicating with a program designed for human interaction.
These interactive features include the ability to specify a time-out and to wait for patterns to appear in the input stream,
such as the prompt from a shell.</p>

<p>Other reasons to use this module than strictly with a TELNET port are:</p>

<ul>
<li>You&#39;re not familiar with sockets and you want a simple way to make client connections to TCP services.</li>

<li>You want to be able to specify your own time-out while connecting,
reading,
or writing.</li>

<li>You&#39;re communicating with an interactive program at the other end of some socket or pipe and you want to wait for certain patterns to appear.</li>
</ul>

<p>Here&#39;s an example that prints who&#39;s logged-on to the remote host sparky.
In addition to a username and password,
you must also know the user&#39;s shell prompt,
which for this example is <code>bash$</code></p>

<pre class="sh_perl">    use Net::Telnet ();
    $t = new Net::Telnet (Timeout =&#62; 10,
                          Prompt =&#62; &#39;/bash\$ $/&#39;);
    $t-&#62;open(&#34;sparky&#34;);
    $t-&#62;login($username, $passwd);
    @lines = $t-&#62;cmd(&#34;who&#34;);
    print @lines;</pre>

<p>More examples are in the <b>EXAMPLES</b> section below.</p>

<p>Usage questions should be directed to the Usenet newsgroup comp.lang.perl.modules.</p>

<p>Contact me, Jay Rogers &#60;jay@rgrs.com&#62;, if you find any bugs or have suggestions for improvement.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="What_To_Know_Before_Using"
>What To Know Before Using</a></h2>

<ul>
<li>All output is flushed while all input is buffered. Each object contains its own input buffer.</li>

<li>The output record separator for <code>print()</code> and <code>cmd()</code> is set to <code>&#34;\n&#34;</code> by default, so that you don&#39;t have to append all your commands with a newline. To avoid printing a trailing <code>&#34;\n&#34;</code> use <code>put()</code> or set the <i>output_record_separator</i> to <code>&#34;&#34;</code>.</li>

<li>The methods <code>login()</code> and <code>cmd()</code> use the <i>prompt</i> setting in the object to determine when a login or remote command is complete. Those methods will fail with a time-out if you don&#39;t set the prompt correctly.</li>

<li>Use a combination of <code>print()</code> and <code>waitfor()</code> as an alternative to <code>login()</code> or <code>cmd()</code> when they don&#39;t do what you want.</li>

<li>Errors such as timing-out are handled according to the error mode action. The default action is to print an error message to standard error and have the program die. See the <code>errmode()</code> method for more information.</li>

<li>When constructing the match operator argument for <code>prompt()</code> or <code>waitfor()</code>, always use single quotes instead of double quotes to avoid unexpected backslash interpretation (e.g. <code>&#39;/bash\$ $/&#39;</code>). If you&#39;re constructing a DOS like file path, you&#39;ll need to use four backslashes to represent one (e.g. <code>&#39;/c:\\\\users\\\\bill&#62;$/i&#39;</code>).
<p>Of course don&#39;t forget about regexp metacharacters like <code>.</code>, <code>[</code>, or <code>$</code>. You&#39;ll only need a single backslash to quote them. The anchor metacharacters <code>^</code> and <code>$</code> refer to positions in the input buffer. To avoid matching characters read that look like a prompt, it&#39;s a good idea to end your prompt pattern with the <code>$</code> anchor. That way the prompt will only match if it&#39;s the last thing read.</p>
</li>

<li>In the input stream, each sequence of <i>carriage return</i> and <i>line feed</i> (i.e. <code>&#34;\015\012&#34;</code> or CR LF) is converted to <code>&#34;\n&#34;</code>. In the output stream, each occurrence of <code>&#34;\n&#34;</code> is converted to a sequence of CR LF. See <code>binmode()</code> to change the behavior. TCP protocols typically use the ASCII sequence, carriage return and line feed to designate a newline.</li>

<li>Timing-out while making a connection is disabled for machines that don&#39;t support the <code>alarm()</code> function. Most notably these include MS-Windows machines.</li>

<li>You&#39;ll need to be running at least Perl version 5.002 to use this module. This module does not require any libraries that don&#39;t already come with a standard Perl distribution.
<p>If you have the IO:: libraries installed (they come standard with perl5.004 and later) then IO::Socket::INET is used as a base class, otherwise FileHandle is used.</p>
</li>

<li>Contact me, Jay Rogers &#60;jay@rgrs.com&#62;, if you find any bugs or have suggestions for improvement.</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Debugging"
>Debugging</a></h2>

<p>The typical usage bug causes a time-out error because you&#39;ve made incorrect assumptions about what the remote side actually sends. The easiest way to reconcile what the remote side sends with your expectations is to use <code>input_log()</code> or <code>dump_log()</code>.</p>

<p><code>dump_log()</code> allows you to see the data being sent from the remote side before any translation is done, while <code>input_log()</code> shows you the results after translation. The translation includes converting end of line characters, removing and responding to TELNET protocol commands in the data stream.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Style_of_Named_Parameters"
>Style of Named Parameters</a></h2>

<p>Two different styles of named parameters are supported. This document only shows the IO:: style:</p>

<pre class="sh_perl">    Net::Telnet-&#62;new(Timeout =&#62; 20);</pre>

<p>however the dash-option style is also allowed:</p>

<pre class="sh_perl">    Net::Telnet-&#62;new(-timeout =&#62; 20);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Connecting_to_a_Remote_MS-Windows_Machine"
>Connecting to a Remote MS-Windows Machine</a></h2>

<p>By default MS-Windows doesn&#39;t come with a TELNET server. However third party TELNET servers are available. Unfortunately many of these servers falsely claim to be a TELNET server. This is especially true of the so-called &#34;Microsoft Telnet Server&#34; that comes installed with some newer versions MS-Windows.</p>

<p>When a TELNET server first accepts a connection, it must use the ASCII control characters carriage-return and line-feed to start a new line (see RFC854). A server like the &#34;Microsoft Telnet Server&#34; that doesn&#39;t do this, isn&#39;t a TELNET server. These servers send ANSI terminal escape sequences to position to a column on a subsequent line and to even position while writing characters that are adjacent to each other. Worse, when sending output these servers resend previously sent command output in a misguided attempt to display an entire terminal screen.</p>

<p>Connecting Net::Telnet to one of these false TELNET servers makes your job of parsing command output very difficult. It&#39;s better to replace a false TELNET server with a real TELNET server. The better TELNET servers for MS-Windows allow you to avoid the ANSI escapes by turning off something some of them call <i>console mode</i>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>In the calling sequences below, square brackets <b>[]</b> represent optional parameters.</p>

<dl>
<dt><a name='new'></a><a name="new_-_create_a_new_Net::Telnet_object"
><b>new</b> - create a new Net::Telnet object</a></dt>

<dd>
<pre class="sh_perl">    $obj = new Net::Telnet ([$host]);

    $obj = new Net::Telnet ([Binmode    =&#62; $mode,]
                            [Cmd_remove_mode =&#62; $mode,]
                            [Dump_Log   =&#62; $filename,]
                            [Errmode    =&#62; $errmode,]
                            [Fhopen     =&#62; $filehandle,]
                            [Host       =&#62; $host,]
                            [Input_log  =&#62; $file,]
                            [Input_record_separator =&#62; $chars,]
                            [Option_log =&#62; $file,]
                            [Ors        =&#62; $chars,]
                            [Output_log =&#62; $file,]
                            [Output_record_separator =&#62; $chars,]
                            [Port       =&#62; $port,]
                            [Prompt     =&#62; $matchop,]
                            [Rs         =&#62; $chars,]
                            [Telnetmode =&#62; $mode,]
                            [Timeout    =&#62; $secs,]);</pre>

<p>This is the constructor for Net::Telnet objects. A new object is returned on success, the error mode action is performed on failure - see <code>errmode()</code>. The optional arguments are short-cuts to methods of the same name.</p>

<p>If the <i>$host</i> argument is given then the object is opened by connecting to TCP <i>$port</i> on <i>$host</i>. Also see <code>open()</code>. The new object returned is given the following defaults in the absence of corresponding named parameters:</p>

<ul>
<li>The default <i>Host</i> is <code>&#34;localhost&#34;</code></li>

<li>The default <i>Port</i> is <code>23</code></li>

<li>The default <i>Prompt</i> is <code>&#39;/[\$%#&#62;] $/&#39;</code></li>

<li>The default <i>Timeout</i> is <code>10</code></li>

<li>The default <i>Errmode</i> is <code>&#34;die&#34;</code></li>

<li>The default <i>Output_record_separator</i> is <code>&#34;\n&#34;</code>. Note that <i>Ors</i> is synonymous with <i>Output_record_separator</i>.</li>

<li>The default <i>Input_record_separator</i> is <code>&#34;\n&#34;</code>. Note that <i>Rs</i> is synonymous with <i>Input_record_separator</i>.</li>

<li>The default <i>Binmode</i> is <code>0</code>, which means do newline translation.</li>

<li>The default <i>Telnetmode</i> is <code>1</code>, which means respond to TELNET commands in the data stream.</li>

<li>The default <i>Cmd_remove_mode</i> is <code>&#34;auto&#34;</code></li>

<li>The defaults for <i>Dump_log</i>, <i>Input_log</i>, <i>Option_log</i>, and <i>Output_log</i> are <code>&#34;&#34;</code>, which means that logging is turned-off.</li>
</ul>
</dd>
</dl>

<dl>
<dt><a name='binmode'></a><a name="binmode_-_toggle_newline_translation"
><b>binmode</b> - toggle newline translation</a></dt>

<dd>
<pre class="sh_perl">    $mode = $obj-&#62;binmode;

    $prev = $obj-&#62;binmode($mode);</pre>

<p>This method controls whether or not sequences of carriage returns and line feeds (CR LF or more specifically <code>&#34;\015\012&#34;</code>) are translated. By default they are translated (i.e. binmode is <code>0</code>).</p>

<p>If no argument is given, the current mode is returned.</p>

<p>If <i>$mode</i> is <code>1</code> then binmode is <i>on</i> and newline translation is not done.</p>

<p>If <i>$mode</i> is <code>0</code> then binmode is <i>off</i> and newline translation is done. In the input stream, each sequence of CR LF is converted to <code>&#34;\n&#34;</code> and in the output stream, each occurrence of <code>&#34;\n&#34;</code> is converted to a sequence of CR LF.</p>

<p>Note that input is always buffered. Changing binmode doesn&#39;t effect what&#39;s already been read into the buffer. Output is not buffered and changing binmode will have an immediate effect.</p>
</dd>
</dl>

<dl>
<dt><a name='break'></a><a name="break_-_send_TELNET_break_character"
><b>break</b> - send TELNET break character</a></dt>

<dd>
<pre class="sh_perl">    $ok = $obj-&#62;break;</pre>

<p>This method sends the TELNET break character. This character is provided because it&#39;s a signal outside the ASCII character set which is currently given local meaning within many systems. It&#39;s intended to indicate that the Break Key or the Attention Key was hit.</p>

<p>This method returns <code>1</code> on success, or performs the error mode action on failure.</p>
</dd>
</dl>

<dl>
<dt><a name='buffer'></a><a name="buffer_-_scalar_reference_to_object&#39;s_input_buffer"
><b>buffer</b> - scalar reference to object&#39;s input buffer</a></dt>

<dd>
<pre class="sh_perl">    $ref = $obj-&#62;buffer;</pre>

<p>This method returns a scalar reference to the input buffer for <i>$obj</i>. Data in the input buffer is data that has been read from the remote side but has yet to be read by the user. Modifications to the input buffer are returned by a subsequent read.</p>
</dd>
</dl>

<dl>
<dt><a name='buffer_empty'></a><a name="buffer_empty_-_discard_all_data_in_object&#39;s_input_buffer"
><b>buffer_empty</b> - discard all data in object&#39;s input buffer</a></dt>

<dd>
<pre class="sh_perl">    $obj-&#62;buffer_empty;</pre>

<p>This method removes all data in the input buffer for <i>$obj</i>.</p>
</dd>
</dl>

<dl>
<dt><a name='close'></a><a name="close_-_close_object"
><b>close</b> - close object</a></dt>

<dd>
<pre class="sh_perl">    $ok = $obj-&#62;close;</pre>

<p>This method closes the socket, file, or pipe associated with the object. It always returns a value of <code>1</code>.</p>
</dd>
</dl>

<dl>
<dt><a name='cmd'></a><a name="cmd_-_issue_command_and_retrieve_output"
><b>cmd</b> - issue command and retrieve output</a></dt>

<dd>
<pre class="sh_perl">    $ok = $obj-&#62;cmd($string);
    $ok = $obj-&#62;cmd(String   =&#62; $string,
                    [Output  =&#62; $ref,]
                    [Cmd_remove_mode =&#62; $mode,]
                    [Errmode =&#62; $mode,]
                    [Input_record_separator =&#62; $chars,]
                    [Ors     =&#62; $chars,]
                    [Output_record_separator =&#62; $chars,]
                    [Prompt  =&#62; $match,]
                    [Rs      =&#62; $chars,]
                    [Timeout =&#62; $secs,]);

    @output = $obj-&#62;cmd($string);
    @output = $obj-&#62;cmd(String   =&#62; $string,
                        [Output  =&#62; $ref,]
                        [Cmd_remove_mode =&#62; $mode,]
                        [Errmode =&#62; $mode,]
                        [Input_record_separator =&#62; $chars,]
                        [Ors     =&#62; $chars,]
                        [Output_record_separator =&#62; $chars,]
                        [Prompt  =&#62; $match,]
                        [Rs      =&#62; $chars,]
                        [Timeout =&#62; $secs,]);</pre>

<p>This method sends the command <i>$string</i>, and reads the characters sent back by the command up until and including the matching prompt. It&#39;s assumed that the program to which you&#39;re sending is some kind of command prompting interpreter such as a shell.</p>

<p>The command <i>$string</i> is automatically appended with the output_record_separator, By default that&#39;s <code>&#34;\n&#34;</code>. This is similar to someone typing a command and hitting the return key. Set the output_record_separator to change this behavior.</p>

<p>In a scalar context, the characters read from the remote side are discarded and <code>1</code> is returned on success. On time-out, eof, or other failures, the error mode action is performed. See <code>errmode()</code>.</p>

<p>In a list context, just the output generated by the command is returned, one line per element. In other words, all the characters in between the echoed back command string and the prompt are returned. If the command happens to return no output, a list containing one element, the empty string is returned. This is so the list will indicate true in a boolean context. On time-out, eof, or other failures, the error mode action is performed. See <code>errmode()</code>.</p>

<p>The characters that matched the prompt may be retrieved using <code>last_prompt()</code>.</p>

<p>Many command interpreters echo back the command sent. In most situations, this method removes the first line returned from the remote side (i.e. the echoed back command). See <code>cmd_remove_mode()</code> for more control over this feature.</p>

<p>Use <code>dump_log()</code> to debug when this method keeps timing-out and you don&#39;t think it should.</p>

<p>Consider using a combination of <code>print()</code> and <code>waitfor()</code> as an alternative to this method when it doesn&#39;t do what you want, e.g. the command you send prompts for input.</p>

<p>The <i>Output</i> named parameter provides an alternative method of receiving command output. If you pass a scalar reference, all the output (even if it contains multiple lines) is returned in the referenced scalar. If you pass an array or hash reference, the lines of output are returned in the referenced array or hash. You can use <code>input_record_separator()</code> to change the notion of what separates a line.</p>

<p>Optional named parameters are provided to override the current settings of cmd_remove_mode, errmode, input_record_separator, ors, output_record_separator, prompt, rs, and timeout. Rs is synonymous with input_record_separator and ors is synonymous with output_record_separator.</p>
</dd>
</dl>

<dl>
<dt><a name='cmd_remove_mode'></a><a name="cmd_remove_mode_-_toggle_removal_of_echoed_commands"
><b>cmd_remove_mode</b> - toggle removal of echoed commands</a></dt>

<dd>
<pre class="sh_perl">    $mode = $obj-&#62;cmd_remove_mode;

    $prev = $obj-&#62;cmd_remove_mode($mode);</pre>

<p>This method controls how to deal with echoed back commands in the output returned by cmd(). Typically, when you send a command to the remote side, the first line of output returned is the command echoed back. Use this mode to remove the first line of output normally returned by cmd().</p>

<p>If no argument is given, the current mode is returned.</p>

<p>If <i>$mode</i> is <code>0</code> then the command output returned from cmd() has no lines removed. If <i>$mode</i> is a positive integer, then the first <i>$mode</i> lines of command output are stripped.</p>

<p>By default, <i>$mode</i> is set to <code>&#34;auto&#34;</code>. Auto means that whether or not the first line of command output is stripped, depends on whether or not the remote side offered to echo. By default, Net::Telnet always accepts an offer to echo by the remote side. You can change the default to reject such an offer using <code>option_accept()</code>.</p>

<p>A warning is printed to STDERR when attempting to set this attribute to something that&#39;s not <code>&#34;auto&#34;</code> or a non-negative integer.</p>
</dd>
</dl>

<dl>
<dt><a name='dump_log'></a><a name="dump_log_-_log_all_I/O_in_dump_format"
><b>dump_log</b> - log all I/O in dump format</a></dt>

<dd>
<pre class="sh_perl">    $fh = $obj-&#62;dump_log;

    $fh = $obj-&#62;dump_log($fh);

    $fh = $obj-&#62;dump_log($filename);</pre>

<p>This method starts or stops dump format logging of all the object&#39;s input and output. The dump format shows the blocks read and written in a hexadecimal and printable character format. This method is useful when debugging, however you might want to first try <code>input_log()</code> as it&#39;s more readable.</p>

<p>If no argument is given, the current log filehandle is returned. An empty string indicates logging is off.</p>

<p>To stop logging, use an empty string as an argument.</p>

<p>If an open filehandle is given, it is used for logging and returned. Otherwise, the argument is assumed to be the name of a file, the file is opened and a filehandle to it is returned. If the file can&#39;t be opened for writing, the error mode action is performed.</p>
</dd>
</dl>

<dl>
<dt><a name='eof'></a><a name="eof_-_end_of_file_indicator"
><b>eof</b> - end of file indicator</a></dt>

<dd>
<pre class="sh_perl">    $eof = $obj-&#62;eof;</pre>

<p>This method returns <code>1</code> if end of file has been read, otherwise it returns an empty string. Because the input is buffered this isn&#39;t the same thing as <i>$obj</i> has closed. In other words <i>$obj</i> can be closed but there still can be stuff in the buffer to be read. Under this condition you can still read but you won&#39;t be able to write.</p>
</dd>
</dl>

<dl>
<dt><a name='errmode'></a><a name="errmode_-_define_action_to_be_performed_on_error"
><b>errmode</b> - define action to be performed on error</a></dt>

<dd>
<pre class="sh_perl">    $mode = $obj-&#62;errmode;

    $prev = $obj-&#62;errmode($mode);</pre>

<p>This method gets or sets the action used when errors are encountered using the object. The first calling sequence returns the current error mode. The second calling sequence sets it to <i>$mode</i> and returns the previous mode. Valid values for <i>$mode</i> are <code>&#34;die&#34;</code> (the default), <code>&#34;return&#34;</code>, a <i>coderef</i>, or an <i>arrayref</i>.</p>

<p>When mode is <code>&#34;die&#34;</code> and an error is encountered using the object, then an error message is printed to standard error and the program dies.</p>

<p>When mode is <code>&#34;return&#34;</code> then the method generating the error places an error message in the object and returns an undefined value in a scalar context and an empty list in list context. The error message may be obtained using <code>errmsg()</code>.</p>

<p>When mode is a <i>coderef</i>, then when an error is encountered <i>coderef</i> is called with the error message as its first argument. Using this mode you may have your own subroutine handle errors. If <i>coderef</i> itself returns then the method generating the error returns undefined or an empty list depending on context.</p>

<p>When mode is an <i>arrayref</i>, the first element of the array must be a <i>coderef</i>. Any elements that follow are the arguments to <i>coderef</i>. When an error is encountered, the <i>coderef</i> is called with its arguments. Using this mode you may have your own subroutine handle errors. If the <i>coderef</i> itself returns then the method generating the error returns undefined or an empty list depending on context.</p>

<p>A warning is printed to STDERR when attempting to set this attribute to something that&#39;s not <code>&#34;die&#34;</code>, <code>&#34;return&#34;</code>, a <i>coderef</i>, or an <i>arrayref</i> whose first element isn&#39;t a <i>coderef</i>.</p>
</dd>
</dl>

<dl>
<dt><a name='errmsg'></a><a name="errmsg_-_most_recent_error_message"
><b>errmsg</b> - most recent error message</a></dt>

<dd>
<pre class="sh_perl">    $msg = $obj-&#62;errmsg;

    $prev = $obj-&#62;errmsg(@msgs);</pre>

<p>The first calling sequence returns the error message associated with the object. The empty string is returned if no error has been encountered yet. The second calling sequence sets the error message for the object to the concatenation of <i>@msgs</i> and returns the previous error message. Normally, error messages are set internally by a method when an error is encountered.</p>
</dd>
</dl>

<dl>
<dt><a name='error'></a><a name="error_-_perform_the_error_mode_action"
><b>error</b> - perform the error mode action</a></dt>

<dd>
<pre class="sh_perl">    $obj-&#62;error(@msgs);</pre>

<p>This method concatenates <i>@msgs</i> into a string and places it in the object as the error message. Also see <code>errmsg()</code>. It then performs the error mode action. Also see <code>errmode()</code>.</p>

<p>If the error mode doesn&#39;t cause the program to die, then an undefined value or an empty list is returned depending on the context.</p>

<p>This method is primarily used by this class or a sub-class to perform the user requested action when an error is encountered.</p>
</dd>
</dl>

<dl>
<dt><a name='fhopen'></a><a name="fhopen_-_use_already_open_filehandle_for_I/O"
><b>fhopen</b> - use already open filehandle for I/O</a></dt>

<dd>
<pre class="sh_perl">    $ok = $obj-&#62;fhopen($fh);</pre>

<p>This method associates the open filehandle <i>$fh</i> with <i>$obj</i> for further I/O. Filehandle <i>$fh</i> must already be opened.</p>

<p>Suppose you want to use the features of this module to do I/O to something other than a TCP port, for example STDIN or a filehandle opened to read from a process. Instead of opening the object for I/O to a TCP port by using <code>open()</code> or <code>new()</code>, call this method instead.</p>

<p>The value <code>1</code> is returned success, the error mode action is performed on failure.</p>
</dd>
</dl>

<dl>
<dt><a name='get'></a><a name="get_-_read_block_of_data"
><b>get</b> - read block of data</a></dt>

<dd>
<pre class="sh_perl">    $data = $obj-&#62;get([Binmode    =&#62; $mode,]
                      [Errmode    =&#62; $errmode,]
                      [Telnetmode =&#62; $mode,]
                      [Timeout    =&#62; $secs,]);</pre>

<p>This method reads a block of data from the object and returns it along with any buffered data. If no buffered data is available to return, it will wait for data to read using the timeout specified in the object. You can override that timeout using <i>$secs</i>. Also see <code>timeout()</code>. If buffered data is available to return, it also checks for a block of data that can be immediately read.</p>

<p>On eof an undefined value is returned. On time-out or other failures, the error mode action is performed. To distinguish between eof or an error occurring when the error mode is not set to <code>&#34;die&#34;</code>, use <code>eof()</code>.</p>

<p>Optional named parameters are provided to override the current settings of binmode, errmode, telnetmode, and timeout.</p>
</dd>
</dl>

<dl>
<dt><a name='getline'></a><a name="getline_-_read_next_line"
><b>getline</b> - read next line</a></dt>

<dd>
<pre class="sh_perl">    $line = $obj-&#62;getline([Binmode    =&#62; $mode,]
                          [Errmode    =&#62; $errmode,]
                          [Input_record_separator =&#62; $chars,]
                          [Rs         =&#62; $chars,]
                          [Telnetmode =&#62; $mode,]
                          [Timeout    =&#62; $secs,]);</pre>

<p>This method reads and returns the next line of data from the object. You can use <code>input_record_separator()</code> to change the notion of what separates a line. The default is <code>&#34;\n&#34;</code>. If a line isn&#39;t immediately available, this method blocks waiting for a line or a time-out.</p>

<p>On eof an undefined value is returned. On time-out or other failures, the error mode action is performed. To distinguish between eof or an error occurring when the error mode is not set to <code>&#34;die&#34;</code>, use <code>eof()</code>.</p>

<p>Optional named parameters are provided to override the current settings of binmode, errmode, input_record_separator, rs, telnetmode, and timeout. Rs is synonymous with input_record_separator.</p>
</dd>
</dl>

<dl>
<dt><a name='getlines'></a><a name="getlines_-_read_next_lines"
><b>getlines</b> - read next lines</a></dt>

<dd>
<pre class="sh_perl">    @lines = $obj-&#62;getlines([Binmode    =&#62; $mode,]
                            [Errmode    =&#62; $errmode,]
                            [Input_record_separator =&#62; $chars,]
                            [Rs         =&#62; $chars,]
                            [Telnetmode =&#62; $mode,]
                            [Timeout    =&#62; $secs,]
                            [All        =&#62; $boolean,]);</pre>

<p>This method reads and returns all the lines of data from the object until end of file is read. You can use <code>input_record_separator()</code> to change the notion of what separates a line. The default is <code>&#34;\n&#34;</code>. A time-out error occurs if all the lines can&#39;t be read within the time-out interval. See <code>timeout()</code>.</p>

<p>The behavior of this method was changed in version 3.03. Prior to version 3.03 this method returned just the lines available from the next read. To get that old behavior, use the optional named parameter <i>All</i> and set <i>$boolean</i> to <code>&#34;&#34;</code> or <code>0</code>.</p>

<p>If only eof is read then an empty list is returned. On time-out or other failures, the error mode action is performed. Use <code>eof()</code> to distinguish between reading only eof or an error occurring when the error mode is not set to <code>&#34;die&#34;</code>.</p>

<p>Optional named parameters are provided to override the current settings of binmode, errmode, input_record_separator, rs, telnetmode, and timeout. Rs is synonymous with input_record_separator.</p>
</dd>
</dl>

<dl>
<dt><a name='host'></a><a name="host_-_name_of_remote_host"
><b>host</b> - name of remote host</a></dt>

<dd>
<pre class="sh_perl">    $host = $obj-&#62;host;

    $prev = $obj-&#62;host($host);</pre>

<p>This method designates the remote host for <code>open()</code>. With no argument it returns the current host name set in the object. With an argument it sets the current host name to <i>$host</i> and returns the previous host name. You may indicate the remote host using either a hostname or an IP address.</p>

<p>The default value is <code>&#34;localhost&#34;</code>. It may also be set by <code>open()</code> or <code>new()</code>.</p>
</dd>
</dl>

<dl>
<dt><a name='input_log'></a><a name="input_log_-_log_all_input"
><b>input_log</b> - log all input</a></dt>

<dd>
<pre class="sh_perl">    $fh = $obj-&#62;input_log;

    $fh = $obj-&#62;input_log($fh);

    $fh = $obj-&#62;input_log($filename);</pre>

<p>This method starts or stops logging of input. This is useful when debugging. Also see <code>dump_log()</code>. Because most command interpreters echo back commands received, it&#39;s likely all your output will also be in this log. Note that input logging occurs after newline translation. See <code>binmode()</code> for details on newline translation.</p>

<p>If no argument is given, the log filehandle is returned. An empty string indicates logging is off.</p>

<p>To stop logging, use an empty string as an argument.</p>

<p>If an open filehandle is given, it is used for logging and returned. Otherwise, the argument is assumed to be the name of a file, the file is opened for logging and a filehandle to it is returned. If the file can&#39;t be opened for writing, the error mode action is performed.</p>
</dd>
</dl>

<dl>
<dt><a name='input_record_separator'></a><a name="input_record_separator_-_input_line_delimiter"
><b>input_record_separator</b> - input line delimiter</a></dt>

<dd>
<pre class="sh_perl">    $chars = $obj-&#62;input_record_separator;

    $prev = $obj-&#62;input_record_separator($chars);</pre>

<p>This method designates the line delimiter for input. It&#39;s used with <code>getline()</code>, <code>getlines()</code>, and <code>cmd()</code> to determine lines in the input.</p>

<p>With no argument this method returns the current input record separator set in the object. With an argument it sets the input record separator to <i>$chars</i> and returns the previous value. Note that <i>$chars</i> must have length.</p>

<p>A warning is printed to STDERR when attempting to set this attribute to a string with no length.</p>
</dd>
</dl>

<dl>
<dt><a name='last_prompt'></a><a name="last_prompt_-_last_prompt_read"
><b>last_prompt</b> - last prompt read</a></dt>

<dd>
<pre class="sh_perl">    $string = $obj-&#62;last_prompt;

    $prev = $obj-&#62;last_prompt($string);</pre>

<p>With no argument this method returns the last prompt read by cmd() or login(). See <code>prompt()</code>. With an argument it sets the last prompt read to <i>$string</i> and returns the previous value. Normally, only internal methods set the last prompt.</p>
</dd>
</dl>

<dl>
<dt><a name='lastline'></a><a name="lastline_-_last_line_read"
><b>lastline</b> - last line read</a></dt>

<dd>
<pre class="sh_perl">    $line = $obj-&#62;lastline;

    $prev = $obj-&#62;lastline($line);</pre>

<p>This method retrieves the last line read from the object. This may be a useful error message when the remote side abnormally closes the connection. Typically the remote side will print an error message before closing.</p>

<p>With no argument this method returns the last line read from the object. With an argument it sets the last line read to <i>$line</i> and returns the previous value. Normally, only internal methods set the last line.</p>
</dd>
</dl>

<dl>
<dt><a name='login'></a><a name="login_-_perform_standard_login"
><b>login</b> - perform standard login</a></dt>

<dd>
<pre class="sh_perl">    $ok = $obj-&#62;login($username, $password);

    $ok = $obj-&#62;login(Name     =&#62; $username,
                      Password =&#62; $password,
                      [Errmode =&#62; $mode,]
                      [Prompt  =&#62; $match,]
                      [Timeout =&#62; $secs,]);</pre>

<p>This method performs a standard login by waiting for a login prompt and responding with <i>$username</i>, then waiting for the password prompt and responding with <i>$password</i>, and then waiting for the command interpreter prompt. If any of those prompts sent by the remote side don&#39;t match what&#39;s expected, this method will time-out, unless timeout is turned off.</p>

<p>Login prompt must match either of these case insensitive patterns:</p>

<pre class="sh_perl">    /login[: ]*$/i
    /username[: ]*$/i</pre>

<p>Password prompt must match this case insensitive pattern:</p>

<pre class="sh_perl">    /password[: ]*$/i</pre>

<p>The command interpreter prompt must match the current setting of prompt. See <code>prompt()</code>.</p>

<p>Use <code>dump_log()</code> to debug when this method keeps timing-out and you don&#39;t think it should.</p>

<p>Consider using a combination of <code>print()</code> and <code>waitfor()</code> as an alternative to this method when it doesn&#39;t do what you want, e.g. the remote host doesn&#39;t prompt for a username.</p>

<p>On success, <code>1</code> is returned. On time out, eof, or other failures, the error mode action is performed. See <code>errmode()</code>.</p>

<p>Optional named parameters are provided to override the current settings of errmode, prompt, and timeout.</p>
</dd>
</dl>

<dl>
<dt><a name='max_buffer_length'></a><a name="max_buffer_length_-_maximum_size_of_input_buffer"
><b>max_buffer_length</b> - maximum size of input buffer</a></dt>

<dd>
<pre class="sh_perl">    $len = $obj-&#62;max_buffer_length;

    $prev = $obj-&#62;max_buffer_length($len);</pre>

<p>This method designates the maximum size of the input buffer. An error is generated when a read causes the buffer to exceed this limit. The default value is 1,048,576 bytes (1MB). The input buffer can grow much larger than the block size when you continuously read using <code>getline()</code> or <code>waitfor()</code> and the data stream contains no newlines or matching waitfor patterns.</p>

<p>With no argument, this method returns the current maximum buffer length set in the object. With an argument it sets the maximum buffer length to <i>$len</i> and returns the previous value. Values of <i>$len</i> smaller than 512 will be adjusted to 512.</p>

<p>A warning is printed to STDERR when attempting to set this attribute to something that isn&#39;t a positive integer.</p>
</dd>
</dl>

<dl>
<dt><a name='ofs'></a><a name="ofs_-_field_separator_for_print"
><b>ofs</b> - field separator for print</a></dt>

<dd>
<pre class="sh_perl">    $chars = $obj-&#62;ofs

    $prev = $obj-&#62;ofs($chars);</pre>

<p>This method is synonymous with <code>output_field_separator()</code>.</p>
</dd>
</dl>

<dl>
<dt><a name='open'></a><a name="open_-_connect_to_port_on_remote_host"
><b>open</b> - connect to port on remote host</a></dt>

<dd>
<pre class="sh_perl">    $ok = $obj-&#62;open($host);

    $ok = $obj-&#62;open([Host    =&#62; $host,]
                     [Port    =&#62; $port,]
                     [Errmode =&#62; $mode,]
                     [Timeout =&#62; $secs,]);</pre>

<p>This method opens a TCP connection to <i>$port</i> on <i>$host</i>. If either argument is missing then the current value of <code>host()</code> or <code>port()</code> is used. Optional named parameters are provided to override the current setting of errmode and timeout.</p>

<p>On success <code>1</code> is returned. On time-out or other connection failures, the error mode action is performed. See <code>errmode()</code>.</p>

<p>Time-outs don&#39;t work for this method on machines that don&#39;t implement SIGALRM - most notably MS-Windows machines. For those machines, an error is returned when the system reaches its own time-out while trying to connect.</p>

<p>A side effect of this method is to reset the alarm interval associated with SIGALRM.</p>
</dd>
</dl>

<dl>
<dt><a name='option_accept'></a><a name="option_accept_-_indicate_willingness_to_accept_a_TELNET_option"
><b>option_accept</b> - indicate willingness to accept a TELNET option</a></dt>

<dd>
<pre class="sh_perl">    $fh = $obj-&#62;option_accept([Do   =&#62; $telopt,]
                              [Dont =&#62; $telopt,]
                              [Will =&#62; $telopt,]
                              [Wont =&#62; $telopt,]);</pre>

<p>This method is used to indicate whether to accept or reject an offer to enable a TELNET option made by the remote side. If you&#39;re using <i>Do</i> or <i>Will</i> to indicate a willingness to enable, then a notification callback must have already been defined by a prior call to <code>option_callback()</code>. See <code>option_callback()</code> for details on receiving enable/disable notification of a TELNET option.</p>

<p>You can give multiple <i>Do</i>, <i>Dont</i>, <i>Will</i>, or <i>Wont</i> arguments for different TELNET options in the same call to this method.</p>

<p>The following example describes the meaning of the named parameters. A TELNET option, such as <code>TELOPT_ECHO</code> used below, is an integer constant that you can import from Net::Telnet. See the source in file Telnet.pm for the complete list.</p>

<ul>
<li><i>Do</i> =&#62; <code>TELOPT_ECHO</code>
<ul>
<li>we&#39;ll accept an offer to enable the echo option on the local side</li>
</ul>
</li>

<li><i>Dont</i> =&#62; <code>TELOPT_ECHO</code>
<ul>
<li>we&#39;ll reject an offer to enable the echo option on the local side</li>
</ul>
</li>

<li><i>Will</i> =&#62; <code>TELOPT_ECHO</code>
<ul>
<li>we&#39;ll accept an offer to enable the echo option on the remote side</li>
</ul>
</li>

<li><i>Wont</i> =&#62; <code>TELOPT_ECHO</code>
<ul>
<li>we&#39;ll reject an offer to enable the echo option on the remote side</li>
</ul>
</li>
</ul>

<dt><a name="_"
></a></dt>

<dd>
<p>Use <code>option_send()</code> to send a request to the remote side to enable or disable a particular TELNET option.</p>
</dd>
</dl>

<dl>
<dt><a name='option_callback'></a><a name="option_callback_-_define_the_option_negotiation_callback"
><b>option_callback</b> - define the option negotiation callback</a></dt>

<dd>
<pre class="sh_perl">    $coderef = $obj-&#62;option_callback;

    $prev = $obj-&#62;option_callback($coderef);</pre>

<p>This method defines the callback subroutine that&#39;s called when a TELNET option is enabled or disabled. Once defined, the <i>option_callback</i> may not be undefined. However, calling this method with a different <i>$coderef</i> changes it.</p>

<p>A warning is printed to STDERR when attempting to set this attribute to something that isn&#39;t a coderef.</p>

<p>Here are the circumstances that invoke <i>$coderef</i>:</p>

<ul>
<li>An option becomes enabled because the remote side requested an enable and <code>option_accept()</code> had been used to arrange that it be accepted.</li>

<li>The remote side arbitrarily decides to disable an option that is currently enabled. Note that Net::Telnet always accepts a request to disable from the remote side.</li>

<li><code>option_send()</code> was used to send a request to enable or disable an option and the response from the remote side has just been received. Note, that if a request to enable is rejected then <i>$coderef</i> is still invoked even though the option didn&#39;t change.</li>
</ul>

<dt><a name="_"
></a></dt>

<dd>
<p>Here are the arguments passed to <i>&#38;$coderef</i>:</p>

<pre class="sh_perl">    &#38;$coderef($obj, $option, $is_remote,
              $is_enabled, $was_enabled, $buf_position);</pre>

<ul>
<li>1. <i>$obj</i> is the Net::Telnet object</li>

<li>2. <i>$option</i> is the TELNET option. Net::Telnet exports constants for the various TELNET options which just equate to an integer.</li>

<li>3. <i>$is_remote</i> is a boolean indicating for which side the option applies.</li>

<li>4. <i>$is_enabled</i> is a boolean indicating the option is enabled or disabled</li>

<li>5. <i>$was_enabled</i> is a boolean indicating the option was previously enabled or disabled</li>

<li>6. <i>$buf_position</i> is an integer indicating the position in the object&#39;s input buffer where the option takes effect. See <code>buffer()</code> to access the object&#39;s input buffer.</li>
</ul>
</dd>
</dl>

<dl>
<dt><a name='option_log'></a><a name="option_log_-_log_all_TELNET_options_sent_or_received"
><b>option_log</b> - log all TELNET options sent or received</a></dt>

<dd>
<pre class="sh_perl">    $fh = $obj-&#62;option_log;

    $fh = $obj-&#62;option_log($fh);

    $fh = $obj-&#62;option_log($filename);</pre>

<p>This method starts or stops logging of all TELNET options being sent or received. This is useful for debugging when you send options via <code>option_send()</code> or you arrange to accept option requests from the remote side via <code>option_accept()</code>. Also see <code>dump_log()</code>.</p>

<p>If no argument is given, the log filehandle is returned. An empty string indicates logging is off.</p>

<p>To stop logging, use an empty string as an argument.</p>

<p>If an open filehandle is given, it is used for logging and returned. Otherwise, the argument is assumed to be the name of a file, the file is opened for logging and a filehandle to it is returned. If the file can&#39;t be opened for writing, the error mode action is performed.</p>
</dd>
</dl>

<dl>
<dt><a name='option_send'></a><a name="option_send_-_send_TELNET_option_negotiation_request"
><b>option_send</b> - send TELNET option negotiation request</a></dt>

<dd>
<pre class="sh_perl">    $ok = $obj-&#62;option_send([Do    =&#62; $telopt,]
                            [Dont  =&#62; $telopt,]
                            [Will  =&#62; $telopt,]
                            [Wont  =&#62; $telopt,]
                            [Async =&#62; $boolean,]);</pre>

<p>This method is not yet implemented. Look for it in a future version.</p>
</dd>
</dl>

<dl>
<dt><a name='option_state'></a><a name="option_state_-_get_current_state_of_a_TELNET_option"
><b>option_state</b> - get current state of a TELNET option</a></dt>

<dd>
<pre class="sh_perl">    $hashref = $obj-&#62;option_state($telopt);</pre>

<p>This method returns a hashref containing a copy of the current state of TELNET option <i>$telopt</i>.</p>

<p>Here are the values returned in the hash:</p>

<ul>
<li><i>$hashref</i>-&#62;{remote_enabled}
<ul>
<li>boolean that indicates if the option is enabled on the remote side.</li>
</ul>
</li>

<li><i>$hashref</i>-&#62;{remote_enable_ok}
<ul>
<li>boolean that indicates if it&#39;s ok to accept an offer to enable this option on the remote side.</li>
</ul>
</li>

<li><i>$hashref</i>-&#62;{remote_state}
<ul>
<li>string used to hold the internal state of option negotiation for this option on the remote side.</li>
</ul>
</li>

<li><i>$hashref</i>-&#62;{local_enabled}
<ul>
<li>boolean that indicates if the option is enabled on the local side.</li>
</ul>
</li>

<li><i>$hashref</i>-&#62;{local_enable_ok}
<ul>
<li>boolean that indicates if it&#39;s ok to accept an offer to enable this option on the local side.</li>
</ul>
</li>

<li><i>$hashref</i>-&#62;{local_state}
<ul>
<li>string used to hold the internal state of option negotiation for this option on the local side.</li>
</ul>
</li>
</ul>
</dd>
</dl>

<dl>
<dt><a name='ors'></a><a name="ors_-_output_line_delimiter"
><b>ors</b> - output line delimiter</a></dt>

<dd>
<pre class="sh_perl">    $chars = $obj-&#62;ors;

    $prev = $obj-&#62;ors($chars);</pre>

<p>This method is synonymous with <code>output_record_separator()</code>.</p>
</dd>
</dl>

<dl>
<dt><a name='output_field_separator'></a><a name="output_field_separator_-_field_separator_for_print"
><b>output_field_separator</b> - field separator for print</a></dt>

<dd>
<pre class="sh_perl">    $chars = $obj-&#62;output_field_separator;

    $prev = $obj-&#62;output_field_separator($chars);</pre>

<p>This method designates the output field separator for <code>print()</code>. Ordinarily the print method simply prints out the comma separated fields you specify. Set this to specify what&#39;s printed between fields.</p>

<p>With no argument this method returns the current output field separator set in the object. With an argument it sets the output field separator to <i>$chars</i> and returns the previous value.</p>

<p>By default it&#39;s set to an empty string.</p>
</dd>
</dl>

<dl>
<dt><a name='output_log'></a><a name="output_log_-_log_all_output"
><b>output_log</b> - log all output</a></dt>

<dd>
<pre class="sh_perl">    $fh = $obj-&#62;output_log;

    $fh = $obj-&#62;output_log($fh);

    $fh = $obj-&#62;output_log($filename);</pre>

<p>This method starts or stops logging of output. This is useful when debugging. Also see <code>dump_log()</code>. Because most command interpreters echo back commands received, it&#39;s likely all your output would also be in an input log. See <code>input_log()</code>. Note that output logging occurs before newline translation. See <code>binmode()</code> for details on newline translation.</p>

<p>If no argument is given, the log filehandle is returned. An empty string indicates logging is off.</p>

<p>To stop logging, use an empty string as an argument.</p>

<p>If an open filehandle is given, it is used for logging and returned. Otherwise, the argument is assumed to be the name of a file, the file is opened for logging and a filehandle to it is returned. If the file can&#39;t be opened for writing, the error mode action is performed.</p>
</dd>
</dl>

<dl>
<dt><a name='output_record_separator'></a><a name="output_record_separator_-_output_line_delimiter"
><b>output_record_separator</b> - output line delimiter</a></dt>

<dd>
<pre class="sh_perl">    $chars = $obj-&#62;output_record_separator;

    $prev = $obj-&#62;output_record_separator($chars);</pre>

<p>This method designates the output line delimiter for <code>print()</code> and <code>cmd()</code>. Set this to specify what&#39;s printed at the end of <code>print()</code> and <code>cmd()</code>.</p>

<p>The output record separator is set to <code>&#34;\n&#34;</code> by default, so there&#39;s no need to append all your commands with a newline. To avoid printing the output_record_separator use <code>put()</code> or set the output_record_separator to an empty string.</p>

<p>With no argument this method returns the current output record separator set in the object. With an argument it sets the output record separator to <i>$chars</i> and returns the previous value.</p>
</dd>
</dl>

<dl>
<dt><a name='port'></a><a name="port_-_remote_port"
><b>port</b> - remote port</a></dt>

<dd>
<pre class="sh_perl">    $port = $obj-&#62;port;

    $prev = $obj-&#62;port($port);</pre>

<p>This method designates the remote TCP port. With no argument this method returns the current port number. With an argument it sets the current port number to <i>$port</i> and returns the previous port. If <i>$port</i> is a TCP service name, then it&#39;s first converted to a port number using the perl function <code>getservbyname()</code>.</p>

<p>The default value is <code>23</code>. It may also be set by <code>open()</code> or <code>new()</code>.</p>

<p>A warning is printed to STDERR when attempting to set this attribute to something that&#39;s not a positive integer or a valid TCP service name.</p>
</dd>
</dl>

<dl>
<dt><a name='print'></a><a name="print_-_write_to_object"
><b>print</b> - write to object</a></dt>

<dd>
<pre class="sh_perl">    $ok = $obj-&#62;print(@list);</pre>

<p>This method writes <i>@list</i> followed by the <i>output_record_separator</i> to the open object and returns <code>1</code> if all data was successfully written. On time-out or other failures, the error mode action is performed. See <code>errmode()</code>.</p>

<p>By default, the <code>output_record_separator()</code> is set to <code>&#34;\n&#34;</code> so all your commands automatically end with a newline. In most cases your output is being read by a command interpreter which won&#39;t accept a command until newline is read. This is similar to someone typing a command and hitting the return key. To avoid printing a trailing <code>&#34;\n&#34;</code> use <code>put()</code> instead or set the output_record_separator to an empty string.</p>

<p>On failure, it&#39;s possible that some data was written. If you choose to try and recover from a print timing-out, use <code>print_length()</code> to determine how much was written before the error occurred.</p>

<p>You may also use the output field separator to print a string between the list elements. See <code>output_field_separator()</code>.</p>
</dd>
</dl>

<dl>
<dt><a name='print_length'></a><a name="print_length_-_number_of_bytes_written_by_print"
><b>print_length</b> - number of bytes written by print</a></dt>

<dd>
<pre class="sh_perl">    $num = $obj-&#62;print_length;</pre>

<p>This returns the number of bytes successfully written by the most recent <code>print()</code> or <code>put()</code>.</p>
</dd>
</dl>

<dl>
<dt><a name='prompt'></a><a name="prompt_-_pattern_to_match_a_prompt"
><b>prompt</b> - pattern to match a prompt</a></dt>

<dd>
<pre class="sh_perl">    $matchop = $obj-&#62;prompt;

    $prev = $obj-&#62;prompt($matchop);</pre>

<p>This method sets the pattern used to find a prompt in the input stream. It must be a string representing a valid perl pattern match operator. The methods <code>login()</code> and <code>cmd()</code> try to read until matching the prompt. They will fail with a time-out error if the pattern you&#39;ve chosen doesn&#39;t match what the remote side sends.</p>

<p>With no argument this method returns the prompt set in the object. With an argument it sets the prompt to <i>$matchop</i> and returns the previous value.</p>

<p>The default prompt is <code>&#39;/[\$%#&#62;] $/&#39;</code></p>

<p>Always use single quotes, instead of double quotes, to construct <i>$matchop</i> (e.g. <code>&#39;/bash\$ $/&#39;</code>). If you&#39;re constructing a DOS like file path, you&#39;ll need to use four backslashes to represent one (e.g. <code>&#39;/c:\\\\users\\\\bill&#62;$/i&#39;</code>).</p>

<p>Of course don&#39;t forget about regexp metacharacters like <code>.</code>, <code>[</code>, or <code>$</code>. You&#39;ll only need a single backslash to quote them. The anchor metacharacters <code>^</code> and <code>$</code> refer to positions in the input buffer.</p>

<p>A warning is printed to STDERR when attempting to set this attribute with a match operator missing its opening delimiter.</p>
</dd>
</dl>

<dl>
<dt><a name='put'></a><a name="put_-_write_to_object"
><b>put</b> - write to object</a></dt>

<dd>
<pre class="sh_perl">    $ok = $obj-&#62;put($string);

    $ok = $obj-&#62;put(String      =&#62; $string,
                    [Binmode    =&#62; $mode,]
                    [Errmode    =&#62; $errmode,]
                    [Telnetmode =&#62; $mode,]
                    [Timeout    =&#62; $secs,]);</pre>

<p>This method writes <i>$string</i> to the opened object and returns <code>1</code> if all data was successfully written. This method is like <code>print()</code> except that it doesn&#39;t write the trailing output_record_separator (&#34;\n&#34; by default). On time-out or other failures, the error mode action is performed. See <code>errmode()</code>.</p>

<p>On failure, it&#39;s possible that some data was written. If you choose to try and recover from a put timing-out, use <code>print_length()</code> to determine how much was written before the error occurred.</p>

<p>Optional named parameters are provided to override the current settings of binmode, errmode, telnetmode, and timeout.</p>
</dd>
</dl>

<dl>
<dt><a name='rs'></a><a name="rs_-_input_line_delimiter"
><b>rs</b> - input line delimiter</a></dt>

<dd>
<pre class="sh_perl">    $chars = $obj-&#62;rs;

    $prev = $obj-&#62;rs($chars);</pre>

<p>This method is synonymous with <code>input_record_separator()</code>.</p>
</dd>
</dl>

<dl>
<dt><a name='telnetmode'></a><a name="telnetmode_-_turn_off/on_telnet_command_interpretation"
><b>telnetmode</b> - turn off/on telnet command interpretation</a></dt>

<dd>
<pre class="sh_perl">    $mode = $obj-&#62;telnetmode;

    $prev = $obj-&#62;telnetmode($mode);</pre>

<p>This method controls whether or not TELNET commands in the data stream are recognized and handled. The TELNET protocol uses certain character sequences sent in the data stream to control the session. If the port you&#39;re connecting to isn&#39;t using the TELNET protocol, then you should turn this mode off. The default is <i>on</i>.</p>

<p>If no argument is given, the current mode is returned.</p>

<p>If <i>$mode</i> is <code>0</code> then telnet mode is off. If <i>$mode</i> is <code>1</code> then telnet mode is on.</p>
</dd>
</dl>

<dl>
<dt><a name='timed_out'></a><a name="timed_out_-_time-out_indicator"
><b>timed_out</b> - time-out indicator</a></dt>

<dd>
<pre class="sh_perl">    $boolean = $obj-&#62;timed_out;

    $prev = $obj-&#62;timed_out($boolean);</pre>

<p>This method indicates if a previous read, write, or open method timed-out. Remember that timing-out is itself an error. To be able to invoke <code>timed_out()</code> after a time-out error, you&#39;d have to change the default error mode to something other than <code>&#34;die&#34;</code>. See <code>errmode()</code>.</p>

<p>With no argument this method returns <code>1</code> if the previous method timed-out. With an argument it sets the indicator. Normally, only internal methods set this indicator.</p>
</dd>
</dl>

<dl>
<dt><a name='timeout'></a><a name="timeout_-_I/O_time-out_interval"
><b>timeout</b> - I/O time-out interval</a></dt>

<dd>
<pre class="sh_perl">    $secs = $obj-&#62;timeout;

    $prev = $obj-&#62;timeout($secs);</pre>

<p>This method sets the timeout interval that&#39;s used when performing I/O or connecting to a port. When a method doesn&#39;t complete within the timeout interval then it&#39;s an error and the error mode action is performed.</p>

<p>A timeout may be expressed as a relative or absolute value. If <i>$secs</i> is greater than or equal to the time the program started, as determined by $^T, then it&#39;s an absolute time value for when time-out occurs. The perl function <code>time()</code> may be used to obtain an absolute time value. For a relative time-out value less than $^T, time-out happens <i>$secs</i> from when the method begins.</p>

<p>If <i>$secs</i> is <code>0</code> then time-out occurs if the data cannot be immediately read or written. Use the undefined value to turn off timing-out completely.</p>

<p>With no argument this method returns the timeout set in the object. With an argument it sets the timeout to <i>$secs</i> and returns the previous value. The default timeout value is <code>10</code> seconds.</p>

<p>A warning is printed to STDERR when attempting to set this attribute to something that&#39;s not an <code>undef</code> or a non-negative integer.</p>
</dd>
</dl>

<dl>
<dt><a name='waitfor'></a><a name="waitfor_-_wait_for_pattern_in_the_input"
><b>waitfor</b> - wait for pattern in the input</a></dt>

<dd>
<pre class="sh_perl">    $ok = $obj-&#62;waitfor($matchop);
    $ok = $obj-&#62;waitfor([Match      =&#62; $matchop,]
                        [String     =&#62; $string,]
                        [Binmode    =&#62; $mode,]
                        [Errmode    =&#62; $errmode,]
                        [Telnetmode =&#62; $mode,]
                        [Timeout    =&#62; $secs,]);

    ($prematch, $match) = $obj-&#62;waitfor($matchop);
    ($prematch, $match) = $obj-&#62;waitfor([Match      =&#62; $matchop,]
                                        [String     =&#62; $string,]
                                        [Binmode    =&#62; $mode,]
                                        [Errmode    =&#62; $errmode,]
                                        [Telnetmode =&#62; $mode,]
                                        [Timeout    =&#62; $secs,]);</pre>

<p>This method reads until a pattern match or string is found in the input stream. All the characters before and including the match are removed from the input stream.</p>

<p>In a list context the characters before the match and the matched characters are returned in <i>$prematch</i> and <i>$match</i>. In a scalar context, the matched characters and all characters before it are discarded and <code>1</code> is returned on success. On time-out, eof, or other failures, for both list and scalar context, the error mode action is performed. See <code>errmode()</code>.</p>

<p>You can specify more than one pattern or string by simply providing multiple <i>Match</i> and/or <i>String</i> named parameters. A <i>$matchop</i> must be a string representing a valid Perl pattern match operator. The <i>$string</i> is just a substring to find in the input stream.</p>

<p>Use <code>dump_log()</code> to debug when this method keeps timing-out and you don&#39;t think it should.</p>

<p>An optional named parameter is provided to override the current setting of timeout.</p>

<p>To avoid unexpected backslash interpretation, always use single quotes instead of double quotes to construct a match operator argument for <code>prompt()</code> and <code>waitfor()</code> (e.g. <code>&#39;/bash\$ $/&#39;</code>). If you&#39;re constructing a DOS like file path, you&#39;ll need to use four backslashes to represent one (e.g. <code>&#39;/c:\\\\users\\\\bill&#62;$/i&#39;</code>).</p>

<p>Of course don&#39;t forget about regexp metacharacters like <code>.</code>, <code>[</code>, or <code>$</code>. You&#39;ll only need a single backslash to quote them. The anchor metacharacters <code>^</code> and <code>$</code> refer to positions in the input buffer.</p>

<p>Optional named parameters are provided to override the current settings of binmode, errmode, telnetmode, and timeout.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='RFC'></a><a name="RFC_854"
>RFC 854</a></dt>

<dd>
<p>TELNET&#160;Protocol&#160;Specification</p>

<p><a href="ftp://ftp.isi.edu/in-notes/rfc854.txt" class="podlinkurl"
>ftp://ftp.isi.edu/in-notes/rfc854.txt</a></p>

<dt><a name='RFC'></a><a name="RFC_1143"
>RFC 1143</a></dt>

<dd>
<p>Q&#160;Method&#160;of&#160;Implementing&#160;TELNET&#160;Option&#160;Negotiation</p>

<p><a href="ftp://ftp.isi.edu/in-notes/rfc1143.txt" class="podlinkurl"
>ftp://ftp.isi.edu/in-notes/rfc1143.txt</a></p>

<dt><a name='TELNET'></a><a name="TELNET_Option_Assignments"
>TELNET Option Assignments</a></dt>

<dd>
<p><a href="http://www.iana.org/assignments/telnet-options" class="podlinkurl"
>http://www.iana.org/assignments/telnet-options</a></p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This example gets the current weather forecast for Brainerd, Minnesota.</p>

<pre class="sh_perl">    my ($forecast, $t);

    use Net::Telnet ();
    $t = new Net::Telnet;
    $t-&#62;open(&#34;rainmaker.wunderground.com&#34;);

    ## Wait for first prompt and &#34;hit return&#34;.
    $t-&#62;waitfor(&#39;/continue:.*$/&#39;);
    $t-&#62;print(&#34;&#34;);

    ## Wait for second prompt and respond with city code.
    $t-&#62;waitfor(&#39;/city code.*$/&#39;);
    $t-&#62;print(&#34;BRD&#34;);

    ## Read and print the first page of forecast.
    ($forecast) = $t-&#62;waitfor(&#39;/[ \t]+press return to continue/i&#39;);
    print $forecast;

    exit;</pre>

<p>This example checks a POP server to see if you have mail.</p>

<pre class="sh_perl">    my ($hostname, $line, $passwd, $pop, $username);

    $hostname = &#34;your_destination_host_here&#34;;
    $username = &#34;your_username_here&#34;;
    $passwd = &#34;your_password_here&#34;;

    use Net::Telnet ();
    $pop = new Net::Telnet (Telnetmode =&#62; 0);
    $pop-&#62;open(Host =&#62; $hostname,
               Port =&#62; 110);


    ## Read connection message.
    $line = $pop-&#62;getline;
    die $line unless $line =~ /^\+OK/;

    ## Send user name.
    $pop-&#62;print(&#34;user $username&#34;);
    $line = $pop-&#62;getline;
    die $line unless $line =~ /^\+OK/;

    ## Send password.
    $pop-&#62;print(&#34;pass $passwd&#34;);
    $line = $pop-&#62;getline;
    die $line unless $line =~ /^\+OK/;

    ## Request status of messages.
    $pop-&#62;print(&#34;list&#34;);
    $line = $pop-&#62;getline;
    print $line;

    exit;</pre>

<p>Here&#39;s an example that uses the ssh program to connect to a remote host. Because the ssh program reads and writes to its controlling terminal, the IO::Pty module is used to create a new pseudo terminal for use by ssh. A new Net::Telnet object is then created to read and write to that pseudo terminal. To use the code below, substitute &#34;changeme&#34; with the actual host, user, password, and command prompt.</p>

<pre class="sh_perl">    ## Main program.
    {
        my ($pty, $ssh, @lines);
        my $host = &#34;changeme&#34;;
        my $user = &#34;changeme&#34;;
        my $password = &#34;changeme&#34;;
        my $prompt = &#39;/changeme:~&#62; $/&#39;;

        ## Start ssh program.
        $pty = &#38;spawn(&#34;ssh&#34;, &#34;-l&#34;, $user, $host);  # spawn() defined below

        ## Create a Net::Telnet object to perform I/O on ssh&#39;s tty.
        use Net::Telnet;
        $ssh = new Net::Telnet (-fhopen =&#62; $pty,
                                -prompt =&#62; $prompt,
                                -telnetmode =&#62; 0,
                                -cmd_remove_mode =&#62; 1,
                                -output_record_separator =&#62; &#34;\r&#34;);

        ## Login to remote host.
        $ssh-&#62;waitfor(-match =&#62; &#39;/password: ?$/i&#39;,
                      -errmode =&#62; &#34;return&#34;)
            or die &#34;problem connecting to host: &#34;, $ssh-&#62;lastline;
        $ssh-&#62;print($password);
        $ssh-&#62;waitfor(-match =&#62; $ssh-&#62;prompt,
                      -errmode =&#62; &#34;return&#34;)
            or die &#34;login failed: &#34;, $ssh-&#62;lastline;

        ## Send command, get and print its output.
        @lines = $ssh-&#62;cmd(&#34;who&#34;);
        print @lines;

        exit;
    } # end main program

    sub spawn {
        my(@cmd) = @_;
        my($pid, $pty, $tty, $tty_fd);

        ## Create a new pseudo terminal.
        use IO::Pty ();
        $pty = new IO::Pty
            or die $!;

        ## Execute the program in another process.
        unless ($pid = fork) {  # child process
            die &#34;problem spawning program: $!\n&#34; unless defined $pid;

            ## Disassociate process from existing controlling terminal.
            use POSIX ();
            POSIX::setsid
                or die &#34;setsid failed: $!&#34;;

            ## Associate process with a new controlling terminal.
            $tty = $pty-&#62;slave;
            $tty_fd = $tty-&#62;fileno;
            close $pty;

            ## Make stdio use the new controlling terminal.
            open STDIN, &#34;&#60;&#38;$tty_fd&#34; or die $!;
            open STDOUT, &#34;&#62;&#38;$tty_fd&#34; or die $!;
            open STDERR, &#34;&#62;&#38;STDOUT&#34; or die $!;
            close $tty;

            ## Execute requested program.
            exec @cmd
                or die &#34;problem executing $cmd[0]\n&#34;;
        } # end child process

        $pty;
    } # end sub spawn</pre>

<p>Here&#39;s an example that changes a user&#39;s login password. Because the passwd program always prompts for passwords on its controlling terminal, the IO::Pty module is used to create a new pseudo terminal for use by passwd. A new Net::Telnet object is then created to read and write to that pseudo terminal. To use the code below, substitute &#34;changeme&#34; with the actual old and new passwords.</p>

<pre class="sh_perl">    my ($pty, $passwd);
    my $oldpw = &#34;changeme&#34;;
    my $newpw = &#34;changeme&#34;;

    ## Start passwd program.
    $pty = &#38;spawn(&#34;passwd&#34;);  # spawn() defined above

    ## Create a Net::Telnet object to perform I/O on passwd&#39;s tty.
    use Net::Telnet;
    $passwd = new Net::Telnet (-fhopen =&#62; $pty,
                               -timeout =&#62; 2,
                               -output_record_separator =&#62; &#34;\r&#34;,
                               -telnetmode =&#62; 0,
                               -cmd_remove_mode =&#62; 1);
    $passwd-&#62;errmode(&#34;return&#34;);

    ## Send existing password.
    $passwd-&#62;waitfor(&#39;/password: ?$/i&#39;)
        or die &#34;no old password prompt: &#34;, $passwd-&#62;lastline;
    $passwd-&#62;print($oldpw);

    ## Send new password.
    $passwd-&#62;waitfor(&#39;/new password: ?$/i&#39;)
        or die &#34;bad old password: &#34;, $passwd-&#62;lastline;
    $passwd-&#62;print($newpw);

    ## Send new password verification.
    $passwd-&#62;waitfor(&#39;/new password: ?$/i&#39;)
        or die &#34;bad new password: &#34;, $passwd-&#62;lastline;
    $passwd-&#62;print($newpw);

    ## Display success or failure.
    $passwd-&#62;waitfor(&#39;/changed/&#39;)
        or die &#34;bad new password: &#34;, $passwd-&#62;lastline;
    print $passwd-&#62;lastline;

    $passwd-&#62;close;
    exit;</pre>

<p>Here&#39;s an example you can use to down load a file of any type. The file is read from the remote host&#39;s standard output using cat. To prevent any output processing, the remote host&#39;s standard output is put in raw mode using the Bourne shell. The Bourne shell is used because some shells, notably tcsh, prevent changing tty modes. Upon completion, FTP style statistics are printed to stderr.</p>

<pre class="sh_perl">    my ($block, $filename, $host, $hostname, $k_per_sec, $line,
        $num_read, $passwd, $prevblock, $prompt, $size, $size_bsd,
        $size_sysv, $start_time, $total_time, $username);

    $hostname = &#34;your_destination_host_here&#34;;
    $username = &#34;your_username_here&#34;;
    $passwd = &#34;your_password_here&#34;;
    $filename = &#34;your_download_file_here&#34;;

    ## Connect and login.
    use Net::Telnet ();
    $host = new Net::Telnet (Timeout =&#62; 30,
                             Prompt =&#62; &#39;/[%#&#62;] $/&#39;);
    $host-&#62;open($hostname);
    $host-&#62;login($username, $passwd);

    ## Make sure prompt won&#39;t match anything in send data.
    $prompt = &#34;_funkyPrompt_&#34;;
    $host-&#62;prompt(&#34;/$prompt\$/&#34;);
    $host-&#62;cmd(&#34;set prompt = &#39;$prompt&#39;&#34;);

    ## Get size of file.
    ($line) = $host-&#62;cmd(&#34;/bin/ls -l $filename&#34;);
    ($size_bsd, $size_sysv) = (split &#39; &#39;, $line)[3,4];
    if ($size_sysv =~ /^\d+$/) {
        $size = $size_sysv;
    }
    elsif ($size_bsd =~ /^\d+$/) {
        $size = $size_bsd;
    }
    else {
        die &#34;$filename: no such file on $hostname&#34;;
    }

    ## Start sending the file.
    binmode STDOUT;
    $host-&#62;binmode(1);
    $host-&#62;print(&#34;/bin/sh -c &#39;stty raw; cat $filename&#39;&#34;);
    $host-&#62;getline;    # discard echoed back line

    ## Read file a block at a time.
    $num_read = 0;
    $prevblock = &#34;&#34;;
    $start_time = time;
    while (($block = $host-&#62;get) and ($block !~ /$prompt$/o)) {
        if (length $block &#62;= length $prompt) {
            print $prevblock;
            $num_read += length $prevblock;
            $prevblock = $block;
        }
        else {
            $prevblock .= $block;
        }

    }
    $host-&#62;close;

    ## Print last block without trailing prompt.
    $prevblock .= $block;
    $prevblock =~ s/$prompt$//;
    print $prevblock;
    $num_read += length $prevblock;
    die &#34;error: expected size $size, received size $num_read\n&#34;
        unless $num_read == $size;

    ## Print totals.
    $total_time = (time - $start_time) || 1;
    $k_per_sec = ($size / 1024) / $total_time;
    $k_per_sec = sprintf &#34;%3.1f&#34;, $k_per_sec;
    warn(&#34;$num_read bytes received in $total_time seconds &#34;,
         &#34;($k_per_sec Kbytes/s)\n&#34;);

    exit;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Jay Rogers &#60;jay@rgrs.com&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 1997, 2000, 2002 by Jay Rogers. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78275 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 02:20:08 2012 GMT (0.176172971725464) @cpansearch1 -->
 </body>
</html>
