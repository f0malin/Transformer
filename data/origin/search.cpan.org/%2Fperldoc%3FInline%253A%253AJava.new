<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Inline::Java - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Inline-Java",3]);
    _gaq.push(["_setCustomVar",5,"Release","Inline-Java-0.53",3]);
    _gaq.push(["_setCustomVar",3,"Module","Inline::Java",3]);
    _gaq.push(["_setCustomVar",1,"Author","PATL",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Inline::Java">permalink</a></div>
  <a href="/~patl/">Patrick LeBoutillier</a> &gt;
  <a href="/~patl/Inline-Java-0.53/">Inline-Java-0.53</a> &gt;
  Inline::Java
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/3dc1d0e12959aab06b1ee4e8aa5eb823?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/P/PA/PATL/Inline-Java-0.53.tar.gz">Inline-Java-0.53.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Inline%3A%3AJava;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~PATL/Inline-Java-0.53/Java.pod">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Inline%3A%3AC">Inline::C</a><br>
<a href="/perldoc?XML%3A%3ATwig">XML::Twig</a><br>
<a href="/perldoc?Java%3A%3ASwing">Java::Swing</a><br>
<a href="/perldoc?PDF%3A%3AReuse">PDF::Reuse</a><br>
<a href="/perldoc?HTML%3A%3AParser">HTML::Parser</a><br>
<a href="/perldoc?Tie%3A%3ACycle">Tie::Cycle</a><br>
<a href="/perldoc?HTML%3A%3AElement">HTML::Element</a><br>
<a href="/perldoc?File%3A%3ASpec">File::Spec</a><br>
<a href="/perldoc?Test%3A%3AHarness">Test::Harness</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Inline%3A%3AJava">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 4</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Inline-Java">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.53 &nbsp;
<span class="noprint">
  <a href="/src/PATL/Inline-Java-0.53/Java.pm">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~patl/Inline-Java/Java.pod">Inline-Java-0.53_90</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#USING_THE_Inline::Java_MODULE'>USING THE Inline::Java MODULE</a>
  <li class='indexItem indexItem1'><a href='#DEFAULT_JAVA_2_SDK'>DEFAULT JAVA 2 SDK</a>
  <li class='indexItem indexItem1'><a href='#CONFIGURATION_OPTIONS'>CONFIGURATION OPTIONS</a>
  <li class='indexItem indexItem1'><a href='#ENVIRONMENT_VARIABLES'>ENVIRONMENT VARIABLES</a>
  <li class='indexItem indexItem1'><a href='#CLASSES_AND_OBJECTS'>CLASSES AND OBJECTS</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <li class='indexItem indexItem1'><a href='#MEMBER_VARIABLES'>MEMBER VARIABLES</a>
  <li class='indexItem indexItem1'><a href='#ARRAYS'>ARRAYS</a>
  <li class='indexItem indexItem1'><a href='#EXCEPTIONS'>EXCEPTIONS</a>
  <li class='indexItem indexItem1'><a href='#FILEHANDLES'>FILEHANDLES</a>
  <li class='indexItem indexItem1'><a href='#CALLBACKS'>CALLBACKS</a>
  <li class='indexItem indexItem1'><a href='#STUDYING'>STUDYING</a>
  <li class='indexItem indexItem1'><a href='#TYPE_CASTING'>TYPE CASTING</a>
  <li class='indexItem indexItem1'><a href='#TYPE_COERCING'>TYPE COERCING</a>
  <li class='indexItem indexItem1'><a href='#JNI_vs_CLIENT/SERVER_MODES'>JNI vs CLIENT/SERVER MODES</a>
  <li class='indexItem indexItem1'><a href='#SHARED_JVM'>SHARED_JVM</a>
  <li class='indexItem indexItem1'><a href='#USING_Inline::Java_IN_A_CGI'>USING Inline::Java IN A CGI</a>
  <li class='indexItem indexItem1'><a href='#USING_Inline::Java_UNDER_MOD_PERL'>USING Inline::Java UNDER MOD_PERL</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Preloading_and_PerlChildInitHandler'>Preloading and PerlChildInitHandler</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#BUGS_AND_DEFICIENCIES'>BUGS AND DEFICIENCIES</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Inline::Java - Write Perl classes in Java.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">   use Inline Java =&#62; &#60;&#60;&#39;END_OF_JAVA_CODE&#39; ;
      class Pod_alu {
         public Pod_alu(){
         }

         public int add(int i, int j){
            return i + j ;
         }

         public int subtract(int i, int j){
            return i - j ;
         }
      }
   END_OF_JAVA_CODE

   my $alu = new Pod_alu() ;
   print($alu-&#62;add(9, 16) . &#34;\n&#34;) ; # prints 25
   print($alu-&#62;subtract(9, 16) . &#34;\n&#34;) ; # prints -7</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <code>Inline::Java</code> module allows you to put Java source code directly &#34;inline&#34; in a Perl script or module. A Java compiler is launched and the Java code is compiled. Then Perl asks the Java classes what public methods have been defined. These classes and methods are available to the Perl program as if they had been written in Perl.</p>

<p>The process of interrogating the Java classes for public methods occurs the first time you run your Java code. The namespace is cached, and subsequent calls use the cached version. </p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="USING_THE_Inline::Java_MODULE"
>USING THE Inline::Java MODULE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>Inline::Java</code> is driven by fundamentally the same idea as other <code>Inline</code> language modules, like <code>Inline::C</code> or <code>Inline::CPP</code>. Because Java is both compiled and interpreted, the method of getting your code is different, but overall, using <code>Inline::Java</code> is very similar to any other <code>Inline</code> language module.</p>

<p>This section will explain the different ways to <code>use</code> Inline::Java. For more details on <code>Inline</code>, see &#39;perldoc Inline&#39;.</p>

<p><b>Basic Usage</b></p>

<p>The most basic form for using <code>Inline::Java</code> is:</p>

<pre class="sh_perl">   use Inline Java =&#62; &#39;Java source code&#39; ;</pre>

<p>Of course, you can use Perl&#39;s &#34;here document&#34; style of quoting to make the code slightly easier to read:</p>

<pre class="sh_perl">   use Inline Java =&#62; &#60;&#60;&#39;END&#39;;

      Java source code goes here.

   END</pre>

<p>The source code can also be specified as a filename, a subroutine reference (sub routine should return source code), or an array reference (array contains lines of source code). This information is detailed in &#39;perldoc Inline&#39;.</p>

<p>In order for <code>Inline::Java</code> to function properly, it needs to know where to find a Java 2 SDK on your machine. This is done using one of the following techniques:</p>

<ol>
<li>Set the J2SDK configuration option to the correct directory</li>

<li>Set the PERL_INLINE_JAVA_J2SDK environment variable to the correct directory</li>
</ol>

<p>If none of these are specified, <code>Inline::Java</code> will use the Java 2 SDK that was specified a install time (see below).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DEFAULT_JAVA_2_SDK"
>DEFAULT JAVA 2 SDK <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>When <code>Inline::Java</code> was installed, the path to the Java 2 SDK that was used was stored in a file called default_j2sdk.pl that resides with the <code>Inline::Java</code> module. You can find this file by using the following command:</p>

<pre class="sh_perl">    % perl -MInline::Java=j2sdk</pre>

<p>If you wish to permanently change the default Java 2 SDK that is used by <code>Inline::Java</code>, edit this file and change the value found there. If you wish use a different Java 2 SDK temporarily, see the J2SDK configuration option described below.</p>

<p>Additionally, you can use the following command to get the list of directories that you should put in you shared library path when using the JNI extension:</p>

<pre class="sh_perl">    % perl -MInline::Java=so_dirs</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONFIGURATION_OPTIONS"
>CONFIGURATION OPTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There are a number of configuration options that dictate the behavior of <code>Inline::Java</code>:</p>

<dl>
<dt><a name="J2SDK"
>J2SDK</a></dt>

<dd>
<p>Specifies the path to your Java 2 SDK.</p>

<pre class="sh_perl">   Ex: J2SDK =&#62; &#39;/my/java/2/sdk/path&#39;</pre>

<p>Note: This configuration option only has an effect on the first &#39;use Inline Java&#39; call inside a Perl script, since all other calls make use of the same JVM.</p>

<dt><a name="PORT"
>PORT</a></dt>

<dd>
<p>Specifies the port number for the server. Default is -1 (next available port number), default for SHARED_JVM mode is 7891.</p>

<pre class="sh_perl">   Ex: PORT =&#62; 4567</pre>

<p>Note: This configuration option only has an effect on the first &#39;use Inline Java&#39; call inside a Perl script, since all other calls make use of the same JVM.</p>

<dt><a name="HOST"
>HOST</a></dt>

<dd>
<p>Specifies the host on which the JVM server is running. This option really only makes sense in SHARED_JVM mode when START_JVM is disabled.</p>

<pre class="sh_perl">   Ex: HOST =&#62; &#39;jvm.server.com&#39;</pre>

<p>Note: This configuration option only has an effect on the first &#39;use Inline Java&#39; call inside a Perl script, since all other calls make use of the same JVM.</p>

<dt><a name="BIND"
>BIND</a></dt>

<dd>
<p>Specifies the IP address on which the JVM server will be listening. By default the JVM server listens for connections on &#39;localhost&#39; only.</p>

<pre class="sh_perl">   Ex: BIND =&#62; &#39;192.168.1.1&#39;
   Ex: BIND =&#62; &#39;0.0.0.0&#39;</pre>

<p>Note: This configuration option only has an effect on the first &#39;use Inline Java&#39; call inside a Perl script, since all other calls make use of the same JVM.</p>

<dt><a name="STARTUP_DELAY"
>STARTUP_DELAY</a></dt>

<dd>
<p>Specifies the maximum number of seconds that the Perl script will try to connect to the Java server. In other this is the delay that Perl gives to the Java server to start. Default is 15 seconds.</p>

<pre class="sh_perl">   Ex: STARTUP_DELAY =&#62; 20</pre>

<p>Note: This configuration option only has an effect on the first &#39;use Inline Java&#39; call inside a Perl script, since all other calls make use of the same JVM.</p>

<dt><a name="CLASSPATH"
>CLASSPATH</a></dt>

<dd>
<p>Adds the specified CLASSPATH. This CLASSPATH will only be available through the user classloader. To set the CLASSPATH globally (which is most probably what you want to do anyways), use the CLASSPATH environment variable.</p>

<pre class="sh_perl">   Ex: CLASSPATH =&#62; &#39;/my/other/java/classses&#39;</pre>

<dt><a name="JNI"
>JNI</a></dt>

<dd>
<p>Toggles the execution mode. The default is to use the client/server mode. To use the JNI extension (you must have built it at install time though. See README and README.JNI for more information), set JNI to 1.</p>

<pre class="sh_perl">   Ex: JNI =&#62; 1</pre>

<p>Note: This configuration option only has an effect on the first &#39;use Inline Java&#39; call inside a Perl script, since all other calls make use of the same JVM.</p>

<dt><a name='EXTRA_JAVA_ARGS'></a><a name="EXTRA_JAVA_ARGS,_EXTRA_JAVAC_ARGS"
>EXTRA_JAVA_ARGS, EXTRA_JAVAC_ARGS</a></dt>

<dd>
<p>Specify extra command line parameters to be passed to, respectively, the JVM and the Java compiler. Use with caution as some options may alter normal <code>Inline::Java</code> behavior.</p>

<pre class="sh_perl">   Ex: EXTRA_JAVA_ARGS =&#62; &#39;-Xmx96m&#39;</pre>

<p>Note: EXTRA_JAVA_ARGS only has an effect on the first &#39;use Inline Java&#39; call inside a Perl script, since all other calls make use of the same JVM.</p>

<dt><a name="EMBEDDED_JNI"
>EMBEDDED_JNI</a></dt>

<dd>
<p>Same as JNI, except <code>Inline::Java</code> expects the JVM to already be loaded and to have loaded the Perl interpreter that is running the script. This is an advanced feature that should only be need in very specific circumstances.</p>

<pre class="sh_perl">   Ex: EMBEDDED_JNI =&#62; 1</pre>

<p>Note: This configuration option only has an effect on the first &#39;use Inline Java&#39; call inside a Perl script, since all other calls make use of the same JVM. Also, the EMBEDDED_JNI option automatically sets the JNI option.</p>

<dt><a name="SHARED_JVM"
>SHARED_JVM</a></dt>

<dd>
<p>This mode enables mutiple processes to share the same JVM. It was created mainly in order to be able to use <code>Inline::Java</code> under mod_perl.</p>

<pre class="sh_perl">   Ex: SHARED_JVM =&#62; 1</pre>

<p>Note: This configuration option only has an effect on the first &#39;use Inline Java&#39; call inside a Perl script, since all other calls make use of the same JVM.</p>

<dt><a name="START_JVM"
>START_JVM</a></dt>

<dd>
<p>When used with SHARED_JVM, tells <code>Inline::Java</code> that the JVM should already be running and that it should not attempt to start a new one. This option is useful in combination with command line interface described in the BUGS AND DEFICIENCIES section. Default is 1.</p>

<pre class="sh_perl">   Ex: START_JVM =&#62; 0</pre>

<p>Note: This configuration option only has an effect on the first &#39;use Inline Java&#39; call inside a Perl script, since all other calls make use of the same JVM.</p>

<dt><a name="PRIVATE"
>PRIVATE</a></dt>

<dd>
<p>In SHARED_JVM mode, makes every connection to the JVM use a different classloader so that each connection is isolated from the others.</p>

<pre class="sh_perl">   Ex: PRIVATE =&#62; 1</pre>

<p>Note: This configuration option only has an effect on the first &#39;use Inline Java&#39; call inside a Perl script, since all other calls make use of the same JVM.</p>

<dt><a name="DEBUG"
>DEBUG</a></dt>

<dd>
<p>Enables debugging info. Debugging now uses levels (1 through 5) that (loosely) follow these definitions:</p>

<pre class="sh_perl">   1 = Major program steps
   2 = Object creation/destruction
   3 = Method/member accesses + packet dumps
   4 = Everything else
   5 = Data structure dumps

   Ex: DEBUG =&#62; 2</pre>

<dt><a name="DEBUGGER"
>DEBUGGER</a></dt>

<dd>
<p>Starts jdb, (the Java debugger) instead of the regular Java JVM. This option will also cause the Java code to be compiled using the &#39;-g&#39; switch for extra debugging information. EXTRA_JAVA_ARGS can be used use to pass extra options to the debugger.</p>

<pre class="sh_perl">   Ex: DEBUGGER =&#62; 1</pre>

<dt><a name="WARN_METHOD_SELECT"
>WARN_METHOD_SELECT</a></dt>

<dd>
<p>Throws a warning when <code>Inline::Java</code> has to &#39;choose&#39; between different method signatures. The warning states the possible choices and the signature chosen.</p>

<pre class="sh_perl">   Ex: WARN_METHOD_SELECT =&#62; 1</pre>

<dt><a name="STUDY"
>STUDY</a></dt>

<dd>
<p>Takes an array of Java classes that you wish to have <code>Inline::Java</code> learn about so that you can use them inside Perl.</p>

<pre class="sh_perl">   Ex: STUDY =&#62; [&#39;java.lang.HashMap&#39;, &#39;my.class&#39;]</pre>

<dt><a name="AUTOSTUDY"
>AUTOSTUDY</a></dt>

<dd>
<p>Makes <code>Inline::Java</code> automatically study unknown classes it encounters them.</p>

<pre class="sh_perl">   Ex: AUTOSTUDY =&#62; 1</pre>

<dt><a name="PACKAGE"
>PACKAGE</a></dt>

<dd>
<p>Forces <code>Inline::Java</code> to bind the Java code under the specified package instead of under the current (caller) package.</p>

<pre class="sh_perl">   Ex: PACKAGE =&#62; &#39;main&#39;</pre>

<dt><a name="NATIVE_DOUBLES"
>NATIVE_DOUBLES</a></dt>

<dd>
<p>Normally, <code>Inline::Java</code> stringifies floating point numbers when passing them between Perl and Java. In certain cases, this can lead to loss of precision. When NATIVE_DOUBLES is set, <code>Inline::Java</code> will send the actual double bytes in order to preserve precision. Note: This applies only to doubles, not floats. Note: This option may not be portable and may not work properly on some platforms.</p>

<pre class="sh_perl">   Ex: NATIVE_DOUBLES =&#62; 1</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ENVIRONMENT_VARIABLES"
>ENVIRONMENT VARIABLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Every configuration option listed above, with the exception of STUDY, can be specified using an environment variable named using the following convention:</p>

<pre class="sh_perl">   PERL_INLINE_JAVA_&#60;option name&#62;</pre>

<p>For example, your can specified the JNI option usng the PERL_INLINE_JAVA_JNI environment variable.</p>

<p>Note that environment variables take precedence over options specified in the script itself.</p>

<p>Under Win32, you can also use set the PERL_INLINE_JAVA_COMMAND_COM environment variable to a true value to indicate that you are using the command.com shell. However, <code>Inline::Java</code> should normally be able to determine this on its own.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CLASSES_AND_OBJECTS"
>CLASSES AND OBJECTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Because Java is object oriented, any interface between Perl and Java needs to support Java classes adequately.</p>

<p>Example:</p>

<pre class="sh_perl">   use Inline Java =&#62; &#60;&#60;&#39;END&#39; ;
      class Pod_1 {
         String data = &#34;data&#34; ;
         static String sdata = &#34;static data&#34; ;

         public Pod_1(){
         }

         public String get_data(){
            return data ;
         }

         public static String get_static_data(){
            return sdata ;
         }

         public void set_data(String d){
            data = d ;
         }

         private void priv(){
         }
      }
   END

   my $obj = new Pod_1 ;
   print($obj-&#62;get_data() . &#34;\n&#34;) ; # prints data
   $obj-&#62;set_data(&#34;new data&#34;) ;
   print($obj-&#62;get_data() . &#34;\n&#34;) ; # prints new data</pre>

<p><code>Inline::Java</code> created a new namespace called <code>main::Pod_1</code> and created the following functions:</p>

<pre class="sh_perl">   sub main::Pod_::new { ... }
   sub main::Pod_::Pod_1 { ... }
   sub main::Pod_::get_data { ... }
   sub main::Pod_::get_sdata { ... }
   sub main::Pod_::set_data { ... }
   sub main::Pod_::DESTROY { ... }</pre>

<p>Note that only the public methods are exported to Perl.</p>

<p>Inner classes are also supported, you simply need to supply a reference to an outer class object as the first parameter of the constructor:</p>

<pre class="sh_perl">   use Inline Java =&#62; &#60;&#60;&#39;END&#39; ;
      class Pod_2 {
         public Pod_2(){
         }

         public class Pod_2_Inner {
            public String name = &#34;Pod_2_Inner&#34; ;

            public Pod_2_Inner(){
            }
         }
      }
   END

   my $obj = new Pod_2() ;
   my $obj2 = new Pod_2::Pod_2_Inner($obj) ;
   print($obj2-&#62;{name} . &#34;\n&#34;) ; # prints Pod_2_Inner</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>In the previous example we have seen how to call a method. You can also call static methods in the following manner:</p>

<pre class="sh_perl">   print Pod_1-&#62;get_sdata() . &#34;\n&#34; ; # prints static data
   # or
   my $obj = new Pod_1() ;
   print $obj-&#62;get_sdata() . &#34;\n&#34; ; # prints static data  </pre>

<p>You can pass any kind of Perl scalar or any Java object to a method. It will be automatically converted to the correct type:</p>

<pre class="sh_perl">   use Inline Java =&#62; &#60;&#60;&#39;END&#39; ;
      class Pod_3_arg {
         public Pod_3_arg(){
         }
      }
      class Pod_3 {
         public int n ;

         public Pod_3(int i, String j, Pod_3_arg k) {
            n = i ;
         }
      }
   END

   my $obj = new Pod_3_arg() ;
   my $obj2 = new Pod_3(5, &#34;toto&#34;, $obj) ;
   print($obj2-&#62;{n} . &#34;\n&#34;) ; # prints 5</pre>

<p>will work fine. These objects can be of any type, even if these types are not known to <code>Inline::Java</code>. This is also true for return types:</p>

<pre class="sh_perl">   use Inline Java =&#62; &#60;&#60;&#39;END&#39; ;
      import java.util.* ;

      class Pod_4 {
         public Pod_4(){
         }

         public HashMap get_hash(){
            HashMap h = new HashMap() ;
            h.put(&#34;key&#34;, &#34;value&#34;) ;

            return h ;
         }

         public String do_stuff_to_hash(HashMap h){
           return (String)h.get(&#34;key&#34;) ;
         }
      }
   END

   my $obj = new Pod_4() ;
   my $h = $obj-&#62;get_hash() ;
   print($obj-&#62;do_stuff_to_hash($h) . &#34;\n&#34;) ; # prints value</pre>

<p>Objects of types unknown to Perl can exist in the Perl space, you just can&#39;t call any of their methods. See the STUDYING section for more information on how to tell <code>Inline::Java</code> to learn about these classes. </p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MEMBER_VARIABLES"
>MEMBER VARIABLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can also access all public member variables (static or not) from Perl. As with method arguments, the types of these variables does not need to be known to Perl:</p>

<pre class="sh_perl">   use Inline Java =&#62; &#60;&#60;&#39;END&#39; ;
      import java.util.* ;

      class Pod_5 {
         public int i ;
         public static HashMap hm ;

         public Pod_5(){
         }
     }
   END

   my $obj = new Pod_5() ;
   $obj-&#62;{i} = 2 ;
   print($obj-&#62;{i} . &#34;\n&#34;) ; # prints 2
   my $hm1 = $obj-&#62;{hm} ; # instance way
   my $hm2 = $Pod_4::hm ; # static way   </pre>

<p>Note: Watch out for typos when accessing members in the static fashion, &#39;use strict&#39; will not catch them since they have a package name... </p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ARRAYS"
>ARRAYS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can also send, receive and modify arrays. This is done simply by using Perl lists:</p>

<pre class="sh_perl">   use Inline Java =&#62; &#60;&#60;&#39;END&#39; ;
      import java.util.* ;

      class Pod_6 {
         public int i[] = {5, 6, 7} ;

         public Pod_6(){
         }

         public String [] f(String a[]){
            return a ;
         }

         public String [][] f(String a[][]){
            return a ;
         }
     }
   END

   my $obj = new Pod_6() ;
   my $i_2 = $obj-&#62;{i}-&#62;[2] ; # 7
   print($i_2 . &#34;\n&#34;) ; # prints 7

   my $a1 = $obj-&#62;f([&#34;a&#34;, &#34;b&#34;, &#34;c&#34;]) ; # String []
   my $a2 = $obj-&#62;f([
      [&#34;00&#34;, &#34;01&#34;],
      [&#34;10&#34;, &#34;11&#34;],
   ]) ; # String [][]
   print($a2-&#62;[1]-&#62;[0] . &#34;\n&#34;) ; # prints 10</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXCEPTIONS"
>EXCEPTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>You can now (as of 0.31) catch exceptions as objects when they are thrown from Java. To do this you use the regular Perl exception tools: eval and $@. A helper function named &#39;caught&#39; is provided to help determine the type of the exception. Here is a example of a typical use:</p>

<pre class="sh_perl">   use Inline Java =&#62; &#60;&#60;&#39;END&#39; ;
      import java.util.* ;

      class Pod_9 {
         public Pod_9(boolean t) throws Exception {
            if (t){
               throw new Exception(&#34;ouch!&#34;) ;
            }
         }
      }
   END

   use Inline::Java qw(caught) ;

   eval {
           my $obj = new Pod_9(1) ;
   } ;
   if ($@){
      if (caught(&#34;java.lang.Exception&#34;)){
         my $msg = $@-&#62;getMessage() ;
         print($msg . &#34;\n&#34;) ; # prints ouch!
      }
      else{
         # It wasn&#39;t a Java exception after all...
         die $@ ;
      }
   }</pre>

<p>What&#39;s important to understand is that $@ actually contains a reference to the Throwable object that was thrown by Java. The getMessage() function is really a method of the java.lang.Exception class. So if Java is throwing a custom exception you have in your code, you will have access to that exception object&#39;s public methods just like any other Java object in <code>Inline::Java</code>. Note: <code>Inline::Java</code> uses eval under the hood, so it recommended that you store any exception in a temporary variable before processing it, especially f you will be calling other <code>Inline::Java</code> functions. It is also probably a good idea to undef $@ once you have treated a Java exception, or else the object still has a reference until $@ is reset by the next eval. </p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FILEHANDLES"
>FILEHANDLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Java filehandles (java.io.Reader, java.io.Writer, java.io.InputStream or java.io.OutputStream objects) can be wrapped the <code>Inline::Java::Handle</code> class to allow reading or writing from Perl. Here&#39;s an example:</p>

<pre class="sh_perl">   use Inline Java =&#62; &#60;&#60;&#39;END&#39; ;
      import java.io.* ;

      class Pod_91 {
         public static Reader getReader(String file) throws FileNotFoundException {
           return new FileReader(file) ;
         }
      }
   END

    my $o = Pod_91-&#62;getReader(&#39;data.txt&#39;) ;
    my $h = new Inline::Java::Handle($o) ;
    while (&#60;$h&#62;){
      chomp($_) ;
      print($_ . &#34;\n&#34;) ; # prints data
    }</pre>

<p>What&#39;s important to understand is that $@ actually contains a reference to the Throwable object that was thrown by Java. The getMessage() function is really a method of the java.lang.Exception class. So if Java is throwing a custom exception you have in your code, you will have access to that exception object&#39;s public methods just like any other Java object in <code>Inline::Java</code>. It is also probably a good idea to undef $@ once you have treated a Java exception, or else the object still has a reference until $@ is reset by the next eval. </p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CALLBACKS"
>CALLBACKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>See <a href="/perldoc?Inline%3A%3AJava%3A%3ACallbacks" class="podlinkpod"
>Inline::Java::Callbacks</a> for more information on making callbacks.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="STUDYING"
>STUDYING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>As of version 0.21, <code>Inline::Java</code> can learn about other Java classes and use them just like the Java code you write inside your Perl script. In fact you are not even required to write Java code inside your Perl script anymore. Here&#39;s how to use the &#39;studying&#39; function:</p>

<pre class="sh_perl">   use Inline (
      Java =&#62; &#39;STUDY&#39;,
      STUDY =&#62; [&#39;java.util.HashMap&#39;],
   ) ;

   my $hm = new java::util::HashMap() ;
   $hm-&#62;put(&#34;key&#34;, &#34;value&#34;) ;
   my $val = $hm-&#62;get(&#34;key&#34;) ;
   print($val . &#34;\n&#34;) ; # prints value</pre>

<p>If you do not wish to put any Java code inside you Perl script, you must use the string &#39;STUDY&#39; as your code. This will skip the build section.</p>

<p>You can also use the AUTOSTUDY option to tell <code>Inline::Java</code> that you wish to study all classes that it comes across:</p>

<pre class="sh_perl">   use Inline Java =&#62; &#60;&#60;&#39;END&#39;, AUTOSTUDY =&#62; 1 ;
      import java.util.* ;

      class Pod_10 {
         public Pod_10(){
         }

         public HashMap get_hm(){
            HashMap hm = new HashMap() ;
            return hm ;
         }
      }
   END

   my $obj = new Pod_10() ;
   my $hm = $obj-&#62;get_hm() ;
   $hm-&#62;put(&#34;key&#34;, &#34;value&#34;) ;
   my $val = $hm-&#62;get(&#34;key&#34;) ;
   print($val . &#34;\n&#34;) ; # prints value</pre>

<p>In this case <code>Inline::Java</code> intercepts the return value of the get_hm() method, sees that it&#39;s of a type that it doesn&#39;t know about (java.lang.HashMap), and immediately studies the class. After that call the java::lang::HashMap class is available to use through Perl.</p>

<p>In some cases you may not know which classes to study until runtime. In these cases you can use the study_classes() function:</p>

<pre class="sh_perl">   use Inline (
      Java =&#62; &#39;STUDY&#39;,
      STUDY =&#62; [],
   ) ;
   use Inline::Java qw(study_classes) ;

   study_classes([&#39;java.util.HashMap&#39;], undef) ;
   my $hm = new java::util::HashMap() ;
   $hm-&#62;put(&#34;key&#34;, &#34;value&#34;) ;
   my $val = $hm-&#62;get(&#34;key&#34;) ;
   print($val . &#34;\n&#34;) ; # prints value</pre>

<p>The study_classes() function takes 2 arguments, a reference to an array of class names (like the STUDY configuration option) and the name of the package in which to bind those classes. If the name of the package is undefined, the classes will be bound to the current (caller) package.</p>

<p>Note: You can only specify the names of packages in which you have previously &#34;used&#34; <code>Inline::Java</code>. </p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TYPE_CASTING"
>TYPE CASTING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Sometimes you need to manipulate a Java object using a specific subtype. That&#39;s when type casting is necessary. Here&#39;s an example of this:</p>

<pre class="sh_perl">   use Inline (
      Java =&#62; &#39;STUDY&#39;,
      STUDY =&#62; [&#39;java.util.HashMap&#39;],
      AUTOSTUDY =&#62; 1,
   ) ;
   use Inline::Java qw(cast) ;

   my $hm = new java::util::HashMap() ;
   $hm-&#62;put(&#39;key&#39;, &#39;value&#39;) ;

   my $entries = $hm-&#62;entrySet()-&#62;toArray() ;
   foreach my $e (@{$entries}){
     # print($e-&#62;getKey() . &#34;\n&#34;) ; # No!
     print(cast(&#39;java.util.Map$Entry&#39;, $e)-&#62;getKey() . &#34;\n&#34;) ; # prints key
   }</pre>

<p>In this case, <code>Inline::Java</code> knows that $e is of type java.util.HashMap$Entry. The problem is that this type is not public, and therefore we can&#39;t access the object through that type. We must cast it to a java.util.Map$Entry, which is a public interface and will allow us to access the getKey() method.</p>

<p>You can also use type casting to force the selection of a specific method signature for methods that have multiple signatures. See examples similar to this in the &#34;TYPE COERCING&#34; section below.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TYPE_COERCING"
>TYPE COERCING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Type coercing is the equivalent of casting for primitives types and arrays. It is used to force the selection if a specific method signature when <code>Inline::Java</code> has multiple choices. The coerce function returns a special object that can only be used when calling Java methods or assigning Java members. Here is an example:</p>

<pre class="sh_perl">   use Inline Java =&#62; &#60;&#60;&#39;END&#39; ;
      class Pod_101 {
         public Pod_101(){
         }

         public String f(int i){
            return &#34;int&#34; ;
         }

         public String f(char c){
            return &#34;char&#34; ;
         }
      }
   END

   my $obj = new Pod_101() ;
   print($obj-&#62;f(&#39;5&#39;) . &#34;\n&#34;) ; # prints int</pre>

<p>In this case, <code>Inline::Java</code> will call f(int i), because &#39;5&#39; is an integer. But &#39;5&#39; is a valid char as well. So to force the call of f(char c), do the following:</p>

<pre class="sh_perl">   use Inline::Java qw(coerce) ;
   $obj-&#62;f(coerce(&#39;char&#39;, &#39;5&#39;)) ;
   # or
   $obj-&#62;f(Inline::Java::coerce(&#39;char&#39;, &#39;5&#39;)) ;</pre>

<p>The coerce function forces the selection of the matching signature. Note that the coerce must match the argument type exactly. Coercing to a class that extends the argument type will not work.</p>

<p>Another case where type coercing is needed is when one wants to pass an array as a java.lang.Object:</p>

<pre class="sh_perl">   use Inline Java =&#62; &#60;&#60;&#39;END&#39;;
      class Pod_8 {
         public Object o ;
         int a[] = {1, 2, 3} ;

         public Pod_8() {
         }
      }
   END

   my $obj = new Pod_8() ;
   $obj-&#62;{o} = [1, 2, 3] ;      # No!</pre>

<p>The reason why this will not work is simple. When <code>Inline::Java</code> sees an array, it checks the Java type you are trying to match it against to validate the construction of your Perl list. But in this case, it can&#39;t validate the array because you&#39;re assigning it to an Object. You must use the 3 parameter version of the coerce function to do this:</p>

<pre class="sh_perl">   $obj-&#62;{o} = Inline::Java::coerce(
     &#34;java.lang.Object&#34;, 
     [1, 2, 3],
     &#34;[Ljava.lang.String;&#34;) ;</pre>

<p>This tells <code>Inline::Java</code> to validate your Perl list as a String [], and then coerce it as an Object.</p>

<p>Here is how to construct the array type representations:</p>

<pre class="sh_perl">  [&#60;type&#62;  -&#62; 1 dimensional &#60;type&#62; array
  [[&#60;type&#62; -&#62; 2 dimensional &#60;type&#62; array
  ...

  where &#60;type&#62; is one of:
    B byte     S short     I int     J long  
    F float    D double    C char    Z boolean

    L&#60;class&#62;; array of &#60;class&#62; objects</pre>

<p>This is described in more detail in most Java books that talk about reflection.</p>

<p>But you only need to do this if you have a Perl list. If you already have a Java array reference obtained from elsewhere, you don&#39;t even need to coerce:</p>

<pre class="sh_perl">   $obj-&#62;{o} = $obj-&#62;{a} ;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="JNI_vs_CLIENT/SERVER_MODES"
>JNI vs CLIENT/SERVER MODES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Starting in version 0.20, it is possible to use the JNI (Java Native Interface) extension. This enables <code>Inline::Java</code> to load the Java virtual machine as a shared object instead of running it as a stand-alone server. This brings an improvement in performance.</p>

<p>If you have built the JNI extension, you must enable it explicitely by doing one of the following:</p>

<ol>
<li>Set the JNI configuration option to 1</li>

<li>Set the PERL_INLINE_JAVA_JNI environment variable to 1</li>
</ol>

<p>Note: <code>Inline::Java</code> only creates one virtual machine instance. Therefore you can&#39;t use JNI for some sections and client/server for others. The first section determines the execution mode.</p>

<p>See README.JNI for more information about the JNI extension. </p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SHARED_JVM"
>SHARED_JVM <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Starting with version 0.30, the <code>Inline::Java</code> JVM can now be shared between multiple processes. The first process to start creates the JVM but does not shut it down on exit. All other processes can then connect as needed to the JVM. If any of these other processes where created by forking the parent process, the Inline::Java-&#62;reconnect_JVM() function must be called in the child to get a fresh connection to the JVM. Ex:</p>

<pre class="sh_perl">   use Inline (
      Java =&#62; &#60;&#60;&#39;END&#39;,
         class Pod_11 {
            public static int i = 0 ;
            public Pod_11(){
               i++ ;
            }
         }
   END
      SHARED_JVM =&#62; 1,
   ) ;

   my $nb = 5 ;
   for (my $i = 0 ; $i &#60; $nb ; $i++){
      if (! fork()){
         Inline::Java::reconnect_JVM() ;
         my $f = new Pod_11() ;
         exit ;
      }
   }
   sleep(5) ;

   my $f = new Pod_11() ;
   print($f-&#62;{i} . &#34;\n&#34;) ; # prints 6</pre>

<p>Once this code was run, each of the 6 processes will have created a different instance of the &#39;t&#39; class. Data can be shared between the processes by using static members in the Java code.</p>

<p>Note: The Java System.out stream is closed in SHARED_JVM mode. </p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="USING_Inline::Java_IN_A_CGI"
>USING Inline::Java IN A CGI <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you want to use <code>Inline::Java</code> in a CGI script, do the following:</p>

<pre class="sh_perl">   use CGI ;
   use Inline (
      Java =&#62; &#60;&#60;&#39;END&#39;,
         class Pod_counter {
            public static int cnt = 0 ;
            public Pod_counter(){
               cnt++ ;
            }
         }
   END
      SHARED_JVM =&#62; 1,
      DIRECTORY =&#62; &#39;/somewhere/your/web/server/can/write&#39;,
   ) ;

   my $c = new Pod_counter() ;
   my $q = new CGI() ;
   print 
      $q-&#62;start_html() . 
      &#34;This page has been accessed &#34; . $c-&#62;{cnt} . &#34; times.&#34; .
      $q-&#62;end_html() ;</pre>

<p>In this scenario, the first CGI to execute will start the JVM, but does not shut it down on exit. Subsequent CGI, since they have the SHARED_JVM option enabled, will try to connect to the already existing JVM before trying to start a new one. Therefore if the JVM happens to crash or is killed, the next CGI that runs will start a new one. The JVM will be killed when Apache is shut down.</p>

<p>See the BUGS AND DEFICIENCIES section if you have problems starting the SHARED_JVM server in a CGI. </p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="USING_Inline::Java_UNDER_MOD_PERL"
>USING Inline::Java UNDER MOD_PERL <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Here is an example of how to use <code>Inline::Java</code> under mod_perl:</p>

<pre class="sh_perl">   use Apache2::Const qw(:common) ;
   use Inline (
      Java =&#62; &#60;&#60;&#39;END&#39;,
         class Pod_counter {
            public static int cnt = 0 ;
            public Pod_counter(){
               cnt++ ;
            }
         }
   END
      SHARED_JVM =&#62; 1,
      DIRECTORY =&#62; &#39;/somewhere/your/web/server/can/write&#39;,
   ) ;

   my $c = new Pod_counter() ;

   sub handler {
      my $r = shift ;

      my $q = new CGI ;
      print
         $q-&#62;start_html() .
         &#34;This page has been accessed &#34; . $c-&#62;{cnt} . &#34; times.&#34; .
         $q-&#62;end_html() ;

      return OK ;
   }</pre>

<p>See USING Inline::Java IN A CGI for more details.</p>

<p>If you are using <a href="/perldoc?ModPerl%3A%3ARegistry" class="podlinkpod"
>ModPerl::Registry</a>, make sure to use the <code>PACKAGE</code> configuration option to specifiy the package in which <code>Inline::Java</code> should bind the Java code, since <a href="/perldoc?ModPerl%3A%3ARegistry" class="podlinkpod"
>ModPerl::Registry</a> will place your code in a package with a unpredictable name.</p>

<p>See the BUGS AND DEFICIENCIES section if you have problems starting the SHARED_JVM server under MOD_PERL.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Preloading_and_PerlChildInitHandler"
>Preloading and PerlChildInitHandler</a></h2>

<p>If you are loading <code>Inline::Java</code> during your server startup (common practice to increase shared memory and reduce run time) and you are using <code>SHARED_JVM</code>, then your Apache processes will all share the same socktd connection to that JVM. This will result in garbled communication and strange errors (like &#34;Can&#39;t receive packet from JVM&#34;, &#34;Broken pipe&#34;, etc).</p>

<p>To fix this you need to tell Apache that after each child process has forked they each need to create their own connections to the JVM. This is done during the <code>ChildInit</code> stage.</p>

<p>For Apache 1.3.x this could look like:</p>

<pre class="sh_perl">   # in httpd.conf
   PerlChildInitHandler MyProject::JavaReconnect</pre>

<p>And <code>MyProject::JavaReconnect</code> could be as simple as this:</p>

<pre class="sh_perl">   package MyProject::JavaReconnect;
   sub handler($$) { Inline::Java::reconnect_JVM() }
   1;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS_AND_DEFICIENCIES"
>BUGS AND DEFICIENCIES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>When reporting a bug, please do the following:</p>

<pre class="sh_perl"> - Put &#34;use Inline REPORTBUG;&#34; at the top of your code, or
   use the command line option &#34;perl -MInline=REPORTBUG ...&#34;.
 - Run your code.
 - Follow the printed instructions.</pre>

<p>Here are some things to watch out for:</p>

<ol>
<li>You shouldn&#39;t name any of your classes &#39;B&#39;, &#39;S&#39;, &#39;I&#39;, &#39;J&#39;, &#39;F&#39;, &#39;D&#39;, &#39;C&#39;, &#39;Z&#39; or &#39;L&#39;. These classes seem to be used internally by Java to represent the primitive types.</li>

<li>If you upgrade <code>Inline::Java</code> from a previous version, be sure to delete your _Inline directory so that <code>Inline::Java</code>&#39;s own Java classes get rebuilt to match the Perl code.</li>

<li>Under certain environments, i.e. CGI or mod_perl, the JVM cannot start properly because of the way these environments set up STDIN and STDOUT. In these cases, you may wish to control the JVM (in shared mode) manually using the following commands:
<pre class="sh_perl">    % perl -MInline::Java::Server=status
    % perl -MInline::Java::Server=start 
    % perl -MInline::Java::Server=stop 
    % perl -MInline::Java::Server=restart </pre>

<p>You can specify <code>Inline::Java</code> options by setting the proper environment variables, and you can also set the _Inline directory by using the PERL_INLINE_JAVA_DIRECTORY environment variable.</p>

<p>In addition, you may also wish to set the START_JVM option to 0 in your scripts to prevent them from trying to start their own JVM if they can&#39;t find one, thereby causing problems.</p>
</li>

<li>Because of problems with modules <code>Inline::Java</code> depends on, the usage of paths containing spaces is not fully supported on all platforms. This applies to the installation directory as well as the path for J2SDK and CLASSPATH elements.</li>

<li>Even though it in run through a profiler regularly, <code>Inline::Java</code> is relatively slow compared to native Perl or Java.</li>
</ol>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~patl/Inline-Java-0.53/Java/Callback.pod" class="podlinkpod"
>Inline::Java::Callback</a>, <a href="/~patl/Inline-Java-0.53/Java/PerlNatives/PerlNatives.pod" class="podlinkpod"
>Inline::Java::PerlNatives</a>, <a href="/~patl/Inline-Java-0.53/Java/PerlInterpreter/PerlInterpreter.pod" class="podlinkpod"
>Inline::Java::PerlInterpreter</a>.</p>

<p>For information about using <code>Inline</code>, see <a href="/perldoc?Inline" class="podlinkpod"
>Inline</a>.</p>

<p>For information about other Inline languages, see <a href="/perldoc?Inline-Support" class="podlinkpod"
>Inline-Support</a>.</p>

<p><code><a href="/~patl/Inline-Java-0.53/Java.pod" class="podlinkpod"
>Inline::Java</a></code>&#39;s mailing list is &#60;inline@perl.org&#62;. To subscribe, send an email to &#60;inline-subscribe@perl.org&#62; </p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Patrick LeBoutillier &#60;patl@cpan.org&#62; is the author of Inline::Java.</p>

<p>Brian Ingerson &#60;ingy@cpan.org&#62; is the author of Inline. </p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2001-2005, Patrick LeBoutillier.</p>

<p>All Rights Reserved. This module is free software. It may be used, redistributed and/or modified under the terms of the Perl Artistic License. See <a href="http://www.perl.com/perl/misc/Artistic.html" class="podlinkurl"
>http://www.perl.com/perl/misc/Artistic.html</a> for more details.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78262 Uploads, 24722 Distributions
105996 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 15:58:27 2012 GMT (0.0975589752197266) @cpansearch1 -->
 </body>
</html>
