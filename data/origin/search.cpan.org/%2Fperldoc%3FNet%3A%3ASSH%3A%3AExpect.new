<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Net::SSH::Expect - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Net-SSH-Expect",3]);
    _gaq.push(["_setCustomVar",5,"Release","Net-SSH-Expect-1.09",3]);
    _gaq.push(["_setCustomVar",3,"Module","Net::SSH::Expect",3]);
    _gaq.push(["_setCustomVar",1,"Author","BNEGRAO",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Net::SSH::Expect">permalink</a></div>
  <a href="/~bnegrao/">Bruno Negrao</a> &gt;
  <a href="/~bnegrao/Net-SSH-Expect-1.09/">Net-SSH-Expect-1.09</a> &gt;
  Net::SSH::Expect
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/89cb2e4f840a4352640a4f266d74d7c2?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/B/BN/BNEGRAO/Net-SSH-Expect-1.09.tar.gz">Net-SSH-Expect-1.09.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Net%3A%3ASSH%3A%3AExpect;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~BNEGRAO/Net-SSH-Expect-1.09/lib/Net/SSH/Expect.pod">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Net%3A%3ASSH%3A%3APerl">Net::SSH::Perl</a><br>
<a href="/perldoc?Net%3A%3ASSH2">Net::SSH2</a><br>
<a href="/perldoc?Net%3A%3ASSH">Net::SSH</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Net%3A%3ATelnet">Net::Telnet</a><br>
<a href="/perldoc?Acme%3A%3AEnc">Acme::Enc</a><br>
<a href="/perldoc?Win32%3A%3AOLE">Win32::OLE</a><br>
<a href="/perldoc?Math%3A%3ABigInt%3A%3AGMP">Math::BigInt::GMP</a><br>
<a href="/perldoc?Math%3A%3APari">Math::Pari</a><br>
<a href="/perldoc?Crypt%3A%3ARSA">Crypt::RSA</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Net%3A%3ASSH%3A%3AExpect">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 12</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 5</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Net-SSH-Expect">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.09 &nbsp;
<span class="noprint">
  <a href="/src/BNEGRAO/Net-SSH-Expect-1.09/lib/Net/SSH/Expect.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#IMPORTANT_NOTES_ABOUT_DEALING_WITH_SSH_AND_PSEUDO-TERMINALS'>IMPORTANT NOTES ABOUT DEALING WITH SSH AND PSEUDO-TERMINALS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXPORT'>EXPORT</a>
  <li class='indexItem indexItem1'><a href='#CONSTRUCTOR_ATTRIBUTES'>CONSTRUCTOR ATTRIBUTES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#ATTRIBUTES_TO_CONFIGURE_THE_SSH_CLIENT_PROCESS'>ATTRIBUTES TO CONFIGURE THE SSH CLIENT PROCESS</a>
    <li class='indexItem indexItem2'><a href='#CONSTRUCTOR_OPTIONS_THAT_CONFIGURE_THE_INTERNAL_EXPECT_OBJECT'>CONSTRUCTOR OPTIONS THAT CONFIGURE THE INTERNAL EXPECT OBJECT</a>
    <li class='indexItem indexItem2'><a href='#CONSTRUCTOR_OPTIONS_TO_CONFIGURE_THIS_MODULE'>CONSTRUCTOR OPTIONS TO CONFIGURE THIS MODULE</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#REPORTING_BUGS'>REPORTING BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#THANKS'>THANKS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Net::SSH::Expect - SSH wrapper to execute remote commands</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">        use Net::SSH::Expect;

        #
        # You can do SSH authentication with user-password or without it.
        #

        # Making an ssh connection with user-password authentication
        # 1) construct the object
        my $ssh = Net::SSH::Expect-&#62;new (
            host =&#62; &#34;myserver.com&#34;, 
            password=&#62; &#39;pass87word&#39;, 
            user =&#62; &#39;bnegrao&#39;, 
            raw_pty =&#62; 1
        );

        # 2) logon to the SSH server using those credentials.
        # test the login output to make sure we had success
        my $login_output = $ssh-&#62;login();
        if ($login_output !~ /Welcome/) {
            die &#34;Login has failed. Login output was $login_output&#34;;
        }
        
        # - now you know you&#39;re logged in - #

        # Starting ssh without password
        # 1) run the constructor
        my $ssh = Net::SSH::Expect-&#62;new (
            host =&#62; &#34;myserver.com&#34;, 
            user =&#62; &#39;bnegrao&#39;, 
            raw_pty =&#62; 1
        );
        # 2) now start the ssh process
        $ssh-&#62;run_ssh() or die &#34;SSH process couldn&#39;t start: $!&#34;;
        
        # 3) you should be logged on now. Test if you received the remote prompt:
        ($ssh-&#62;read_all(2) =~ /&#62;\s*\z/) or die &#34;where&#39;s the remote prompt?&#34;

        # - now you know you&#39;re logged in - #

        # disable terminal translations and echo on the SSH server
        # executing on the server the stty command:
        $ssh-&#62;exec(&#34;stty raw -echo&#34;);

        # runs arbitrary commands and print their outputs 
        # (including the remote prompt comming at the end)
        my $ls = $ssh-&#62;exec(&#34;ls -l /&#34;);
        print($ls);
        
        my $who = $ssh-&#62;exec(&#34;who&#34;);
        print ($who);
        
        # When running a command that causes a huge output,
        # lets get the output line by line:
        $ssh-&#62;send(&#34;find /&#34;);   # using send() instead of exec()
        my $line;
        # returns the next line, removing it from the input stream:
        while ( defined ($line = $ssh-&#62;read_line()) ) {
            print $line . &#34;\n&#34;;  
        }

        # take a look in what is immediately available on the input stream
        print $ssh-&#62;peek(0);    # you&#39;ll probably see the remote prompt
 
        # the last read_line() on the previous loop will not include the
        # remote prompt that appears at the end of the output, because the prompt
        # doesn&#39;t end with a &#39;\n&#39; character. So let&#39;s remove the remainder
        # prompt from the input stream:
        $ssh-&#62;eat($ssh-&#62;peek(0));  # removes whatever is on the input stream now

        # We can also iterate over the output in chunks,
        # printing everything that&#39;s available at each 1 second:
        $ssh-&#62;send (&#34;find /home&#34;);
        my $chunk;
        while ($chunk = $ssh-&#62;peek(1)) { # grabs chunks of output each 1 second
            print $ssh-&#62;eat($chunk);
        }

        # Now let&#39;s run an interactive command, like passwd.
        # This is done combining send() and waitfor() methods together:
        $ssh-&#62;send(&#34;passwd&#34;);
        $ssh-&#62;waitfor(&#39;password:\s*\z&#39;, 1) or die &#34;prompt &#39;password&#39; not found after 1 second&#34;;
        $ssh-&#62;send(&#34;curren_password&#34;);
        $ssh-&#62;waitfor(&#39;:\s*\z&#39;, 1) or die &#34;prompt &#39;New password:&#39; not found&#34;;
        $ssh-&#62;send(&#34;new_password&#34;);
        $ssh-&#62;waitfor(&#39;:\s*\z&#39;, 1) or die &#34;prompt &#39;Confirm new password:&#39; not found&#34;;
        $ssh-&#62;send(&#34;new_password&#34;);

        # check that we have the system prompt again.
        my ($before_match, $match) = $ssh-&#62;waitfor(&#39;&#62;\s*\z&#39;, 1);  # waitfor() in a list context
        die &#34;passwd failed. passwd said &#39;$before_match&#39;.&#34; unless ($match);

        # closes the ssh connection
        $ssh-&#62;close();</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is a wrapper to the <i>ssh</i> executable that is available in your system&#39;s <i>$PATH</i>. Use this module to execute commands on the remote SSH server. It authenticates with the user and password you passed in the constructor&#39;s attributes <code>user</code> and <code>password</code>.</p>

<p>Once an ssh connection was started using the <code>connect()</code> method it will remain open until you call the <code>close()</code> method. This allows you execute as many commands as you want with the <code>exec()</code> method using only one connection. This is a better approach over other ssh wrapper implementations, i.e: Net::SCP, Net::SSH and Net::SCP::Expect, that start a new ssh connection each time a remote command is issued or a file is transfered.</p>

<p>It uses <i>Expect.pm</i> module to interact with the SSH server. A <code>get_expect()</code> method is provided so you can obtain the internal <code>Expect</code> object connected to the SSH server. Use this only if you have some special need that you can&#39;t do with the <code>exec()</code> method.</p>

<p>This module was inspired by Net::SCP::Expect <a href="http://search.cpan.org/~djberg/Net-SCP-Expect-0.12/Expect.pm" class="podlinkurl"
>http://search.cpan.org/~djberg/Net-SCP-Expect-0.12/Expect.pm</a> and by Net::Telnet and some of its methods work the same as these two modules.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="IMPORTANT_NOTES_ABOUT_DEALING_WITH_SSH_AND_PSEUDO-TERMINALS"
>IMPORTANT NOTES ABOUT DEALING WITH SSH AND PSEUDO-TERMINALS</a></h2>

<p>This module uses Expect to start the local ssh client process, and Expect will interact with this process through a local pseudo-terminal (ptty). Similarly, the ssh client will connect to the SSH server and there will receive an ssh login process attached to a ptty too.</p>

<p>During my tests I realized that the I/O to and from the ssh server changes drastically from OS to OS if we let the local and remote pttys configured on their defaults. The echo&#39;s and the \r\n translations make a mess that we are never sure what will be sent to the other side and what will be received here.</p>

<p>Many ptty features are system dependent and we can&#39;t rely on them working the same on different OS&#39;s.</p>

<p>To avoid these problems I always recommend you to:</p>

<p>1) enable the &#39;raw_pty&#39; constructor attribute. This disables most (if not all) of the problematic features on the local ptty.</p>

<p>2) Similarly set the ptty on the remote server to &#39;raw -echo&#39; as soon as you login. This can be done with:</p>

<pre class="sh_perl">    $ssh-&#62;exec(&#34;stty raw -echo&#34;);</pre>

<p>Obviously your server must support the &#39;stty&#39; command for that.</p>

<p>3) If you won&#39;t run on the server interactive commands that prompt for input, like &#39;passwd&#39;, you could prevent the ssh server from attributing a ptty for the ssh login process. This is done by enabling the &#39;no_terminal&#39; constructor attribute. What that does is passing the &#39;-T&#39; option to the ssh client process when it is created. From the BSD ssh client manual: -T Disable pseudo-tty allocation.</p>

<p>This will create the cleaner connection possible. You won&#39;t have a ptty on the server, and, weirdly, you won&#39;t receive a remote prompt. Try yourself &#39;ssh -T my.ssh.server&#39; to see how it works. Notice that some system commands that rely on a terminal won&#39;t work, say, &#39;who am i&#39;, &#39;stty&#39;, etc.</p>

<p>Also, interactive commands like &#39;passwd&#39; or &#39;mail&#39; won&#39;t be able to print their prompts.</p>

<p>But other system commands will run better: &#39;ls -l&#39; will be printed without terminal control characters. &#39;ps -ef&#39; will have the command lines printed fully, since there is no &#39;columns&#39; terminal limitation.</p>

<p>Moral of the story: pseudo terminals do many character translations that can bring some unexpected results in some situations. Avoid them if you can.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORT"
>EXPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>None by default.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTOR_ATTRIBUTES"
>CONSTRUCTOR ATTRIBUTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The constructor accepts all the following attributes that can be set in the form of attribute =&#62; &#39;value&#39; pairs. They are presentend in three groups: 1) attributes to configure the ssh client process; 2) attributes to configure the underlying Expect object; 3) attributes to configure this module;</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ATTRIBUTES_TO_CONFIGURE_THE_SSH_CLIENT_PROCESS"
>ATTRIBUTES TO CONFIGURE THE SSH CLIENT PROCESS</a></h2>

<p>Some of the attributes bellow will enable/disable some options of the ssh client. Refer to you ssh client documentation to know what each one does.</p>

<dl>
<dt><a name='string'></a><a name="string_binary"
>string <b>binary</b></a></dt>

<dd>
<p>the complete path to the &#39;ssh&#39; executable in your machine. The default is &#39;ssh&#39; what means the ssh used by default is the first one found in your $PATH environment variable.</p>

<dt><a name='string'></a><a name="string_user"
>string <b>user</b></a></dt>

<dd>
<p>the username to login.</p>

<dt><a name='string'></a><a name="string_password"
>string <b>password</b></a></dt>

<dd>
<p>the password used to login. You won&#39;t need to set this field if you have public-key authentication configured for you ssh user. Read run_ssh() documentation for more info.</p>

<dt><a name='string'></a><a name="string_host"
>string <b>host</b></a></dt>

<dd>
<p>the address(dns name/ip) to the ssh server</p>

<dt><a name='string'></a><a name="string_port"
>string <b>port</b></a></dt>

<dd>
<p>Feeds the -p ssh client option with alternate ssh port. This option is not set by default.</p>

<dt><a name='boolean'></a><a name="boolean_no_terminal"
>boolean <b>no_terminal</b></a></dt>

<dd>
<p>If enabled adds the -T ssh client option to the ssh command line. See the discussion on &#34;IMPORTANT NOTES ABOUT DEALING WITH SSH AND PSEUDO-TERMINALS&#34; to know if you want to enable this.</p>

<dt><a name='char'></a><a name="char_escape_char"
>char <b>escape_char</b></a></dt>

<dd>
<p>Passes a character to the -e ssh client option. This enables ssh escapes. Since this option can cause trouble, it is explicitly turned off by default with a &#39;-e none&#39; option being set on the ssh command line.</p>

<dt><a name='string'></a><a name="string_ssh_option"
>string <b>ssh_option</b></a></dt>

<dd>
<p>This lets you add your own ssh options to the command line. Set this string to the options you want, like &#39;-v -p 2022&#39;, and your options will be added to the ssh command line that will start the ssh process.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTOR_OPTIONS_THAT_CONFIGURE_THE_INTERNAL_EXPECT_OBJECT"
>CONSTRUCTOR OPTIONS THAT CONFIGURE THE INTERNAL EXPECT OBJECT</a></h2>

<p>The following constructor attributes can be used to configure special features of the internal Expect object used to communicate with the ssh server. These options will be passed to the Expect object inside the <code>connect</code> method before it spawns the ssh process.</p>

<dl>
<dt><a name='string'></a><a name="string_log_file"
>string <b>log_file</b></a></dt>

<dd>
<p>Used as argument to the internal Expect-&#62;log_file() method. Default is no logfile.</p>

<dt><a name='boolean'></a><a name="boolean_log_stdout"
>boolean <b>log_stdout</b></a></dt>

<dd>
<p>Used as argument to the internal Expect-&#62;log_sdtout() method. Default is 0, to disable log to stdout.</p>

<dt><a name='boolean'></a><a name="boolean_exp_internal"
>boolean <b>exp_internal</b></a></dt>

<dd>
<p>Argument to be passed to the internal Expect-&#62;exp_internal() method. Default is 0, to disable the internal exposure.</p>

<dt><a name='boolean'></a><a name="boolean_exp_debug"
>boolean <b>exp_debug</b></a></dt>

<dd>
<p>Argument to be passed to the internal Expect-&#62;debug() method. Default is 0, to disable debug.</p>

<dt><a name='boolean'></a><a name="boolean_raw_pty"
>boolean <b>raw_pty</b></a></dt>

<dd>
<p>Argument to be passed to the internal Expect-&#62;raw_pty() method. It&#39;s recommended that you enable this. See the disscussion in &#34;IMPORTANT NOTES ABOUT DEALING WITH SSH AND PSEUDO-TERMINALS&#34; to know why. Default is 0 to let the local ptty as its defaults.</p>

<dt><a name='boolean'></a><a name="boolean_restart_timeout_upon_receive"
>boolean <b>restart_timeout_upon_receive</b></a></dt>

<dd>
<p>If this is enabled the timeout in all reading operations works as an inactivity timeout - it&#39;ll not start counting while there is data arriving on input stream. Default is 0.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTOR_OPTIONS_TO_CONFIGURE_THIS_MODULE"
>CONSTRUCTOR OPTIONS TO CONFIGURE THIS MODULE</a></h2>

<dl>
<dt><a name='string'></a><a name="string_terminator"
>string <b>terminator</b></a></dt>

<dd>
<p>the line terminator in use on the SSH server, this will added at the end of each command passed to the <code>exec()</code> method. The default is <code>\n</code>.</p>

<p>It also affects the read_line() method, it expect each line to be terminated by the &#39;teminator&#39; character. Lines can also be ended with &#34;\r&#34; or &#34;\r\n&#34; in some systems. Remember to adjust this for your system.</p>

<p>You can also use the terminator() method to set this attribute.</p>

<dt><a name='integer'></a><a name="integer_timeout"
>integer <b>timeout</b></a></dt>

<dd>
<p>The maximum time to wait for a pattern to show up on input stream before giving up in a read operation. The default is 1 second.</p>

<p>Timeout must always be an integer &#62;= 0.</p>

<p>This attribute can also be get/set with the <code>timeout()</code> method.</p>

<dt><a name='boolean'></a><a name="boolean_debug"
>boolean <b>debug</b></a></dt>

<dd>
<p>Causes some methods to print debug messages to the STDERR. This feature is not widely implemented yet. (only eat() implements it until this moment)</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='boolean'></a><a name="boolean_run_ssh()_-_forks_the_ssh_client_process"
>boolean <b>run_ssh()</b> - forks the ssh client process</a></dt>

<dd>
<pre class="sh_perl">        # boolean run_ssh() - forks the ssh client process opening an ssh connection to the SSH server.
        #
        #       This method has three roles:
        #       1)      Instantiate a new Expect object configuring it with all the defaults and user-defined
        #               settings.
        #       2)      Define the ssh command line using the defaults and user-defined settings
        #       3)      Fork the ssh process using the spawn() method of the Expect instance we created. 
        #               The SSH connection is established on this step using the user account set in the &#39;user&#39;
        #               constructor attribute. No password is sent here, that happens only in the login() method.
        #
        #       This method is run internally by the login() method so you don&#39;t need to run it yourself
        #       in most of the cases. You&#39;ll run this method alone if you had set up public-key authentication 
        #       between the ssh client and the ssh server. In this case you only need to call this method
        #       to have an authenticated ssh connection, you won&#39;t call login(). Note that when you 
        #       use public-key authentication you won&#39;t need to set the &#39;password&#39; constructor attribute
        #       but you still need to define the &#39;user&#39; attribute.
        #       If you don&#39;t know how to setup public-key authentication there&#39;s a good guide at
        #       <a href="http://sial.org/howto/openssh/publickey-auth/" class="podlinkurl"
>http://sial.org/howto/openssh/publickey-auth/</a>
        #               
        # returns:
        #       boolean: 1 if the ssh ran OK or 0 otherwise. In case of failures, use $! to do get info.</pre>

<dt><a name='string'></a><a name="string_login([$login_prompt,_$password_prompt]_[,$test_success])_-_authenticates_on_the_ssh_server."
>string <b>login([$login_prompt, $password_prompt] [,$test_success])</b> - authenticates on the ssh server.</a></dt>

<dd>
<pre class="sh_perl">        # string login ([$login_prompt, $password_prompt] [,$test_success]) - authenticates on the ssh server. 
        #       This method responds to the authentication prompt sent by the SSH server. 
        #       You can customize the &#34;Login:&#34; and &#34;Password:&#34; prompts that must be expected by passing their
        #       patterns as arguments to this method, although this method has default values that work to most
        #       SSH servers out there.
        #       It runs the run_ssh() method only if it wasn&#39;t run before(), but it&#39;ll die
        #       if run_ssh() returns false.
        #
        # param:
        #       $login_prompt: A pattern string used to match the &#34;Login:&#34; prompt. The default 
        #               pattern is qr/ogin:\s*$/
        #
        #       $password_prompt: A pattern string used to match the &#34;Password:&#34; prompt. The default
        #               pattern is qr/[Pp]assword.*?:|[Pp]assphrase.*?:/
        #
        #       $test_success: 0 | 1. if 1, login will do an extra-test to verify if the password
        #               entered was accepted. The test consists in verifying if, after sending the password,
        #               the &#34;Password&#34; prompt shows up again what would indicate that the password was rejected.
        #               This test is disabled by default.
        #
        #       OBS: the number of paramaters passed to this method will tell it what parameters are being passed:
        #       0 parameters: login() : All the default values will be used.
        #       1 parameter:  login(1) : The $test_success parameter is set.
        #       2 parameters: login(&#34;Login:&#34;, &#34;Password:&#34;) : the $login_prompt and $password_prompt parameters are set.
        #       3 parameters: login(&#34;Login:&#34;, &#34;Password;&#34;, 1) : the three parameters received values on this order.
        #
        # returns:
        #       string: whatever the SSH server wrote in my input stream after loging in. This usually is some
        #               welcome message and/or the remote prompt. You could use this string to do your verification
        #               that the login was successful. The content returned is removed from the input stream.
        # dies:
        #       IllegalState: if any of &#39;host&#39; or &#39;user&#39; or &#39;password&#39; fields are unset.
        #       SSHProccessError: if run_ssh() failed to spawn the ssh process
        #       SSHConnectionError: if the connection failed for some reason, like invalid &#39;host&#39; address or network problems.</pre>

<dt><a name='string'></a><a name="string_exec($cmd_[,$timeout])_-_executes_a_command_in_the_remote_machine_returning_its_output"
>string <b>exec($cmd [,$timeout])</b> - executes a command in the remote machine returning its output</a></dt>

<dd>
<p>exec(&#39;command&#39;) runs &#39;command&#39; in the remote machine and returns all the output generated by &#39;command&#39; into a string.</p>

<dt><a name='boolean'></a><a name="boolean_waitfor($pattern_[,$timeout])"
>boolean <b>waitfor($pattern [,$timeout])</b></a></dt>

<dd>
<pre class="sh_perl">        # boolean waitfor ($string [, $timeout, $match_type])
        # This method reads until a pattern or string is found in the input stream.
        # All the characters before and including the match are removed from the input stream.
        # 
        # After waitfor returns, use the methods before(), match() and after() to get the data
        # &#39;before the match&#39;, &#39;what matched&#39;, and &#39;after the match&#39; respectively.
        #
        # If waitfor returns false, whatever content is on input stream can be accessed with 
        # before(). In this case before() will return the same content as peek(). 
        #
        # params:
        #       $string: a string to be matched. It can be a regular expression or a literal string
        #                        anb its interpretation as one or other depends on $match_type. Default is
        #                        &#39;re&#39;, what treats $string as a regular expression.
        #
        #       $timeout: the timeout in seconds while waiting for $string
        #
        #       $match_type: match_type affects how $string will be matched:
        #               &#39;-re&#39;: means $string is a regular expression.
        #               &#39;-ex&#39;: means $string is an &#34;exact match&#34;, i.e., will be matched literally.
        #
        # returns: 
        #       boolean: 1 is returned if string was found, 0 otherwise. When the match fails
        #                        waitfor() will only return after waiting $timeout seconds.
        #
        # dies:
        #       SSH_CONNECTION_ABORTED if EOF is found (error type 2)
        #       SSH_PROCESS_ERROR if the ssh process has died (error type 3)
        #       SSH_CONNECTION_ERROR if unknown error (type 4) is found</pre>

<dt><a name='string'></a><a name="string_before()_-_returns_the_&#34;before_match&#34;_data_of_the_last_waitfor()_call."
>string <b>before()</b> - returns the &#34;before match&#34; data of the last waitfor() call.</a></dt>

<dd>
<p>When waitfor() matches, if there is any content before the match, this will be returned by before().</p>

<p>If the last waitfor() didn&#39;t match, before() will return all the current content on the input stream, just as if you had called peek() with the same timeout.</p>

<dt><a name='string'></a><a name="string_match()_-_returns_the_&#34;match&#34;_data_of_the_last_waitfor()_call,_or_undef_if_didn&#39;t_match."
>string <b>match()</b> - returns the &#34;match&#34; data of the last waitfor() call, or undef if didn&#39;t match.</a></dt>

<dd>
<dt><a name='string'></a><a name="string_after()_-_returns_the_&#34;after_match&#34;_data_of_the_last_waitfor()_call,_or_undef_if_didn&#39;t_match."
>string <b>after()</b> - returns the &#34;after match&#34; data of the last waitfor() call, or undef if didn&#39;t match.</a></dt>

<dd>
<dt><a name='void'></a><a name="void_close()_-_terminates_the_ssh_connection"
>void <b>close()</b> - terminates the ssh connection</a></dt>

<dd>
<dt><a name='void'></a><a name="void_send($string)_-_sends_$string_to_the_SSH_server,_returns_nothing"
>void <b>send($string)</b> - sends $string to the SSH server, returns nothing</a></dt>

<dd>
<p>Sends the string to the SSH server. If the ssh server process is attached to a pseudo-terminal (this is the default) it is likely that the echo terminal property will be on, what will make the server place the command you just sent in our input stream, i.e., you&#39;ll see the command you sent in your next read operation.</p>

<p>To avoid this, try to disable the echo property on the server-side, using</p>

<pre class="sh_perl"> $ssh-&#62;exec(&#34;stty -echo&#34;);</pre>

<p>It&#39;s also advisable to disable the terminal character convertions on server-side, what will make you sure that every character you sent will be received &#34;as-is&#34; to the other side.</p>

<p>So you&#39;ll probably use this to disable character conversions and echo:</p>

<pre class="sh_perl"> $ssh-&#62;exec(&#34;stty raw -echo&#34;);</pre>

<p>Of course you&#39;re server must support the &#39;stty&#39; command for that work.</p>

<p>To guarantee that your characters are not converted by your local pseudo-terminal before you send them out, set the constructor option:</p>

<pre class="sh_perl">        raw_pty =&#62; 1 </pre>

<p>And if you don&#39;t need a terminal on the server-side at all, set the constructor option bellow to 1:</p>

<pre class="sh_perl">        no_terminal =&#62; 1</pre>

<dt><a name='string'></a><a name="string_peek([$timeout])_-_returns_what_is_in_the_input_stream_without_removing_anything"
>string <b>peek([$timeout])</b> - returns what is in the input stream without removing anything</a></dt>

<dd>
<pre class="sh_perl">        # peek([$timeout]) - returns what is in the input stream without removing anything
        #       peek() returns what is available on the input stream until $timeout seconds.
        #       If there is data continuosly arriving on the input stream, subsequent calls to peek() 
        #       will return a growing amount of data.
        #
        # dies:
        #       SSH_CONNECTION_ABORTED if EOF is found (error type 2)
        #       SSH_PROCESS_ERROR if the ssh process has died (error type 3)
        #       SSH_CONNECTION_ERROR if unknown error (type 4) is found</pre>

<dt><a name='string'></a><a name="string_eat($string)_-_removes_all_the_head_of_the_input_stream_until_$string_inclusive."
>string <b>eat($string)</b> - removes all the head of the input stream until $string inclusive.</a></dt>

<dd>
<pre class="sh_perl">        # string eat($string)- removes all the head of the input stream until $string inclusive.
        #       eat() will only be able to remove the $string if it&#39;s currently present on the 
        #       input stream because eat() will wait 0 seconds before removing it.
        #
        #       Use it associated with peek to eat everything that appears on the input stream:
        #
        #       while ($chunk = $exp-&#62;eat($exp-&#62;peak())) {
        #               print $chunk;
        #       }
        #       
        #       Or use the read_all() method that does the above loop for you returning the accumulated
        #       result.
        #
        # param:
        #       string: a string currently available on the input stream. 
        #               If $string doesn&#39;t start in the head, all the content before $string will also
        #               be removed. 
        #
        #               If $string is undef or empty string it will be returned immediately as it.
        #       
        # returns:
        #       string: the removed content or empty string if there is nothing in the input stream.
        # 
        # dies:
        #       SSH_CONNECTION_ABORTED if EOF is found (error type 2)
        #       SSH_PROCESS_ERROR if the ssh process has died (error type 3)
        #       SSH_CONNECTION_ERROR if unknown error (type 4) is found
        #
        # debbuging features:
        #       The following warnings are printed to STDERR if $exp-&#62;debug() == 1:
        #               eat() prints a warning is $string wasn&#39;t found in the head of the input stream.
        #               eat() prints a warning is $string was empty or undefined.
        #</pre>

<dt><a name='string'></a><a name="string_read_all([$timeout])_-_reads_and_removes_all_the_output_from_the_input_stream."
>string <b>read_all([$timeout])</b> - reads and removes all the output from the input stream.</a></dt>

<dd>
<p>The reading/removing process will be interrupted after $timeout seconds of inactivity on the input stream.</p>

<dt><a name='string'></a><a name="string_read_line([$timeout])_-_reads_the_next_line_from_the_input_stream_and_returns_it."
>string <b>read_line([$timeout])</b> - reads the next line from the input stream and returns it.</a></dt>

<dd>
<pre class="sh_perl">        # string read_line([$timeout]) - reads the next line from the input stream
        # Read a line of text. A line is considered to be terminated by the &#39;teminator&#39;
        # character. Default is &#34;\n&#34;. Lines can also be ended with &#34;\r&#34; or &#34;\r\n&#34;.
        # Remember to adequate this for your system with the terminator() method. 
        # When there are no more lines available, read_line() returns undef. Note that this doen&#39;t mean
        # there is no data left on input stream since there can be a string not terminated with the 
        # &#39;terminator&#39; character, notably the remote prompt could be left there when read_line() returns
        # undef.
        #
        # params:
        #       $timeout: the timeout waiting for a line. Defaults to timeout().
        #
        # returns:
        #       string: a line on the input stream, without the trailing &#39;terminator&#39; character.
        #                       An empty string indicates that the line read only contained the &#39;terminator&#39;
        #                       character (an empty line).
        #       undef: when there are no more lines on the input stream.
        #</pre>

<dt><a name='void'></a><a name="void_restart_timeout_upon_receive(_0_|_1_)_-_changes_the_timeout_counter_behaviour"
>void <b>restart_timeout_upon_receive( 0 | 1 )</b> - changes the timeout counter behaviour</a></dt>

<dd>
<pre class="sh_perl">        # void restart_timeout_upon_receive( 0 | 1 ) - changes the timeout counter behaviour
        # params:
        #       boolean: if true, sets the timeout to &#34;inactivity timeout&#34;, if false
        #                       sets it to &#34;absolute timeout&#34;.
        # dies:
        #       IllegalParamenter if argument is not given.</pre>

<dt><a name='Expect'></a><a name="Expect_get_expect()_-_returns_the_internal_Expect_object"
>Expect <b>get_expect()</b> - returns the internal Expect object</a></dt>

<dd>
<dl>
<dt><a name='params'></a><a name="params:"
>params:</a></dt>

<dd>
<p>none</p>

<dt><a name='returns'></a><a name="returns:"
>returns:</a></dt>

<dd>
<p>an <code>Expect</code> object connected to the SSH server. It will die if you try to run it without being connected.</p>

<dt><a name='dies'></a><a name="dies:"
>dies:</a></dt>

<dd>
<p>IllegalState: if this there is no valid ssh connection established</p>
</dd>
</dl>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?Net%3A%3ASCP%3A%3AExpect" class="podlinkpod"
>Net::SCP::Expect</a>, <a href="/perldoc?Net%3A%3ASCP" class="podlinkpod"
>Net::SCP</a>, <a href="/perldoc?Net%3A%3ASSH%3A%3APerl" class="podlinkpod"
>Net::SSH::Perl</a>, <a href="/perldoc?Expect" class="podlinkpod"
>Expect</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="REPORTING_BUGS"
>REPORTING BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>To report bugs please use the bug reporting tool available on CPAN website, in the module&#39;s page. That way I can keep track of what I need to do and I can also communicate with you through that tool.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Bruno Negrao Guimaraes Zica. &#60;bnegrao@cpan.org&#62;.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="THANKS"
>THANKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Daniel Berger, author of Net::SCP::Expect. Special thanks to the people helping me improve this module by reporting their tests and the bugs they find.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (C) 2007 by Bruno Negrao Guimaraes Zica</p>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself, either Perl version 5.8.3 or, at your option, any later version of Perl 5 you may have available.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78280 Uploads, 24725 Distributions
106010 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 05:46:57 2012 GMT (0.127202987670898) @cpansearch1 -->
 </body>
</html>
