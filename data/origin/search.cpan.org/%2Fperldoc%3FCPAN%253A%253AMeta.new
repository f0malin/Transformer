<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>CPAN::Meta - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","CPAN-Meta",3]);
    _gaq.push(["_setCustomVar",5,"Release","CPAN-Meta-2.120921",3]);
    _gaq.push(["_setCustomVar",3,"Module","CPAN::Meta",3]);
    _gaq.push(["_setCustomVar",1,"Author","DAGOLDEN",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?CPAN::Meta">permalink</a></div>
  <a href="/~dagolden/">David Golden</a> &gt;
  <a href="/~dagolden/CPAN-Meta-2.120921/">CPAN-Meta-2.120921</a> &gt;
  CPAN::Meta
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/bb755c989fcb9897f28a2c6e00df61e2?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DA/DAGOLDEN/CPAN-Meta-2.120921.tar.gz">CPAN-Meta-2.120921.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=CPAN%3A%3AMeta;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DAGOLDEN/CPAN-Meta-2.120921/lib/CPAN/Meta.pm">Annotate this POD
</a></p>
     <p style="text-align:right"><a href="https://github.com/dagolden/cpan-meta">Website</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="http://rt.cpan.org/Public/Dist/Display.html?Name=CPAN-Meta">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.120921 &nbsp;
<span class="noprint">
  <a href="/src/DAGOLDEN/CPAN-Meta-2.120921/lib/CPAN/Meta.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#new'>new</a>
    <li class='indexItem indexItem2'><a href='#create'>create</a>
    <li class='indexItem indexItem2'><a href='#load_file'>load_file</a>
    <li class='indexItem indexItem2'><a href='#load_yaml_string'>load_yaml_string</a>
    <li class='indexItem indexItem2'><a href='#load_json_string'>load_json_string</a>
    <li class='indexItem indexItem2'><a href='#save'>save</a>
    <li class='indexItem indexItem2'><a href='#meta_spec_version'>meta_spec_version</a>
    <li class='indexItem indexItem2'><a href='#effective_prereqs'>effective_prereqs</a>
    <li class='indexItem indexItem2'><a href='#should_index_file'>should_index_file</a>
    <li class='indexItem indexItem2'><a href='#should_index_package'>should_index_package</a>
    <li class='indexItem indexItem2'><a href='#features'>features</a>
    <li class='indexItem indexItem2'><a href='#feature'>feature</a>
    <li class='indexItem indexItem2'><a href='#as_struct'>as_struct</a>
    <li class='indexItem indexItem2'><a href='#as_string'>as_string</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#STRING_DATA'>STRING DATA</a>
  <li class='indexItem indexItem1'><a href='#LIST_DATA'>LIST DATA</a>
  <li class='indexItem indexItem1'><a href='#MAP_DATA'>MAP DATA</a>
  <li class='indexItem indexItem1'><a href='#CUSTOM_DATA'>CUSTOM DATA</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#SUPPORT'>SUPPORT</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Bugs_/_Feature_Requests'>Bugs / Feature Requests</a>
    <li class='indexItem indexItem2'><a href='#Source_Code'>Source Code</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>CPAN::Meta - the distribution metadata for a CPAN dist</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>version 2.120921</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  my $meta = CPAN::Meta-&#62;load_file(&#39;META.json&#39;);

  printf &#34;testing requirements for %s version %s\n&#34;,
    $meta-&#62;name,
    $meta-&#62;version;

  my $prereqs = $meta-&#62;requirements_for(&#39;configure&#39;);

  for my $module ($prereqs-&#62;required_modules) {
    my $version = get_local_version($module);

    die &#34;missing required module $module&#34; unless defined $version;
    die &#34;version for $module not in range&#34;
      unless $prereqs-&#62;accepts_module($module, $version);
  }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Software distributions released to the CPAN include a <em>META.json</em> or, for older distributions, <em>META.yml</em>, which describes the distribution, its contents, and the requirements for building and installing the distribution. The data structure stored in the <em>META.json</em> file is described in <a href="/~dagolden/CPAN-Meta-2.120921/lib/CPAN/Meta/Spec.pm" class="podlinkpod"
>CPAN::Meta::Spec</a>.</p>

<p>CPAN::Meta provides a simple class to represent this distribution metadata (or <i>distmeta</i>), along with some helpful methods for interrogating that data.</p>

<p>The documentation below is only for the methods of the CPAN::Meta object. For information on the meaning of individual fields, consult the spec.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="new"
>new</a></h2>

<pre class="sh_perl">  my $meta = CPAN::Meta-&#62;new($distmeta_struct, \%options);</pre>

<p>Returns a valid CPAN::Meta object or dies if the supplied metadata hash reference fails to validate. Older-format metadata will be up-converted to version 2 if they validate against the original stated specification.</p>

<p>It takes an optional hashref of options. Valid options include:</p>

<ul>
<li>lazy_validation -- if true, new will attempt to convert the given metadata to version 2 before attempting to validate it. This means than any fixable errors will be handled by CPAN::Meta::Converter before validation. (Note that this might result in invalid optional data being silently dropped.) The default is false.</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="create"
>create</a></h2>

<pre class="sh_perl">  my $meta = CPAN::Meta-&#62;create($distmeta_struct, \%options);</pre>

<p>This is same as <code>new()</code>, except that <code>generated_by</code> and <code>meta-spec</code> fields will be generated if not provided. This means the metadata structure is assumed to otherwise follow the latest <a href="/~dagolden/CPAN-Meta-2.120921/lib/CPAN/Meta/Spec.pm" class="podlinkpod"
>CPAN::Meta::Spec</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="load_file"
>load_file</a></h2>

<pre class="sh_perl">  my $meta = CPAN::Meta-&#62;load_file($distmeta_file, \%options);</pre>

<p>Given a pathname to a file containing metadata, this deserializes the file according to its file suffix and constructs a new <code>CPAN::Meta</code> object, just like <code>new()</code>. It will die if the deserialized version fails to validate against its stated specification version.</p>

<p>It takes the same options as <code>new()</code> but <code>lazy_validation</code> defaults to true.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="load_yaml_string"
>load_yaml_string</a></h2>

<pre class="sh_perl">  my $meta = CPAN::Meta-&#62;load_yaml_string($yaml, \%options);</pre>

<p>This method returns a new CPAN::Meta object using the first document in the given YAML string. In other respects it is identical to <code>load_file()</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="load_json_string"
>load_json_string</a></h2>

<pre class="sh_perl">  my $meta = CPAN::Meta-&#62;load_json_string($json, \%options);</pre>

<p>This method returns a new CPAN::Meta object using the structure represented by the given JSON string. In other respects it is identical to <code>load_file()</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="save"
>save</a></h2>

<pre class="sh_perl">  $meta-&#62;save($distmeta_file, \%options);</pre>

<p>Serializes the object as JSON and writes it to the given file. The only valid option is <code>version</code>, which defaults to &#39;2&#39;. On Perl 5.8.1 or later, the file is saved with UTF-8 encoding.</p>

<p>For <code>version</code> 2 (or higher), the filename should end in &#39;.json&#39;. <a href="/perldoc?JSON%3A%3APP" class="podlinkpod"
>JSON::PP</a> is the default JSON backend. Using another JSON backend requires <a href="/perldoc?JSON" class="podlinkpod"
>JSON</a> 2.5 or later and you must set the <code>$ENV{PERL_JSON_BACKEND}</code> to a supported alternate backend like <a href="/perldoc?JSON%3A%3AXS" class="podlinkpod"
>JSON::XS</a>.</p>

<p>For <code>version</code> less than 2, the filename should end in &#39;.yml&#39;. <a href="/~dagolden/CPAN-Meta-2.120921/lib/CPAN/Meta/Converter.pm" class="podlinkpod"
>CPAN::Meta::Converter</a> is used to generate an older metadata structure, which is serialized to YAML. CPAN::Meta::YAML is the default YAML backend. You may set the <code>$ENV{PERL_YAML_BACKEND}</code> to a supported alternative backend, though this is not recommended due to subtle incompatibilities between YAML parsers on CPAN.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="meta_spec_version"
>meta_spec_version</a></h2>

<p>This method returns the version part of the <code>meta_spec</code> entry in the distmeta structure. It is equivalent to:</p>

<pre class="sh_perl">  $meta-&#62;meta_spec-&#62;{version};</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="effective_prereqs"
>effective_prereqs</a></h2>

<pre class="sh_perl">  my $prereqs = $meta-&#62;effective_prereqs;

  my $prereqs = $meta-&#62;effective_prereqs( \@feature_identifiers );</pre>

<p>This method returns a <a href="/~dagolden/CPAN-Meta-2.120921/lib/CPAN/Meta/Prereqs.pm" class="podlinkpod"
>CPAN::Meta::Prereqs</a> object describing all the prereqs for the distribution. If an arrayref of feature identifiers is given, the prereqs for the identified features are merged together with the distribution&#39;s core prereqs before the CPAN::Meta::Prereqs object is returned.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="should_index_file"
>should_index_file</a></h2>

<pre class="sh_perl">  ... if $meta-&#62;should_index_file( $filename );</pre>

<p>This method returns true if the given file should be indexed. It decides this by checking the <code>file</code> and <code>directory</code> keys in the <code>no_index</code> property of the distmeta structure.</p>

<p><code>$filename</code> should be given in unix format.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="should_index_package"
>should_index_package</a></h2>

<pre class="sh_perl">  ... if $meta-&#62;should_index_package( $package );</pre>

<p>This method returns true if the given package should be indexed. It decides this by checking the <code>package</code> and <code>namespace</code> keys in the <code>no_index</code> property of the distmeta structure.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="features"
>features</a></h2>

<pre class="sh_perl">  my @feature_objects = $meta-&#62;features;</pre>

<p>This method returns a list of <a href="/~dagolden/CPAN-Meta-2.120921/lib/CPAN/Meta/Feature.pm" class="podlinkpod"
>CPAN::Meta::Feature</a> objects, one for each optional feature described by the distribution&#39;s metadata.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="feature"
>feature</a></h2>

<pre class="sh_perl">  my $feature_object = $meta-&#62;feature( $identifier );</pre>

<p>This method returns a <a href="/~dagolden/CPAN-Meta-2.120921/lib/CPAN/Meta/Feature.pm" class="podlinkpod"
>CPAN::Meta::Feature</a> object for the optional feature with the given identifier. If no feature with that identifier exists, an exception will be raised.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="as_struct"
>as_struct</a></h2>

<pre class="sh_perl">  my $copy = $meta-&#62;as_struct( \%options );</pre>

<p>This method returns a deep copy of the object&#39;s metadata as an unblessed has reference. It takes an optional hashref of options. If the hashref contains a <code>version</code> argument, the copied metadata will be converted to the version of the specification and returned. For example:</p>

<pre class="sh_perl">  my $old_spec = $meta-&#62;as_struct( {version =&#62; &#34;1.4&#34;} );</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="as_string"
>as_string</a></h2>

<pre class="sh_perl">  my $string = $meta-&#62;as_string( \%options );</pre>

<p>This method returns a serialized copy of the object&#39;s metadata as a character string. (The strings are <b>not</b> UTF-8 encoded.) It takes an optional hashref of options. If the hashref contains a <code>version</code> argument, the copied metadata will be converted to the version of the specification and returned. For example:</p>

<pre class="sh_perl">  my $string = $meta-&#62;as_struct( {version =&#62; &#34;1.4&#34;} );</pre>

<p>For <code>version</code> greater than or equal to 2, the string will be serialized as JSON. For <code>version</code> less than 2, the string will be serialized as YAML. In both cases, the same rules are followed as in the <code>save()</code> method for choosing a serialization backend.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="STRING_DATA"
>STRING DATA <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following methods return a single value, which is the value for the corresponding entry in the distmeta structure. Values should be either undef or strings.</p>

<ul>
<li>abstract</li>

<li>description</li>

<li>dynamic_config</li>

<li>generated_by</li>

<li>name</li>

<li>release_status</li>

<li>version</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LIST_DATA"
>LIST DATA <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>These methods return lists of string values, which might be represented in the distmeta structure as arrayrefs or scalars:</p>

<ul>
<li>authors</li>

<li>keywords</li>

<li>licenses</li>
</ul>

<p>The <code>authors</code> and <code>licenses</code> methods may also be called as <code>author</code> and <code>license</code>, respectively, to match the field name in the distmeta structure.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MAP_DATA"
>MAP DATA <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>These readers return hashrefs of arbitrary unblessed data structures, each described more fully in the specification:</p>

<ul>
<li>meta_spec</li>

<li>resources</li>

<li>provides</li>

<li>no_index</li>

<li>prereqs</li>

<li>optional_features</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CUSTOM_DATA"
>CUSTOM DATA <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A list of custom keys are available from the <code>custom_keys</code> method and particular keys may be retrieved with the <code>custom</code> method.</p>

<pre class="sh_perl">  say $meta-&#62;custom($_) for $meta-&#62;custom_keys;</pre>

<p>If a custom key refers to a data structure, a deep clone is returned.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Please report any bugs or feature using the CPAN Request Tracker. Bugs can be submitted through the web interface at <a href="http://rt.cpan.org/Dist/Display.html?Queue=CPAN-Meta" class="podlinkurl"
>http://rt.cpan.org/Dist/Display.html?Queue=CPAN-Meta</a></p>

<p>When submitting a bug or request, please include a test-file or a patch to an existing test-file that illustrates the bug or desired feature.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li><a href="/~dagolden/CPAN-Meta-2.120921/lib/CPAN/Meta/Converter.pm" class="podlinkpod"
>CPAN::Meta::Converter</a></li>

<li><a href="/~dagolden/CPAN-Meta-2.120921/lib/CPAN/Meta/Validator.pm" class="podlinkpod"
>CPAN::Meta::Validator</a></li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT"
>SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Bugs_/_Feature_Requests"
>Bugs / Feature Requests</a></h2>

<p>Please report any bugs or feature requests through the issue tracker at <a href="http://rt.cpan.org/Public/Dist/Display.html?Name=CPAN-Meta" class="podlinkurl"
>http://rt.cpan.org/Public/Dist/Display.html?Name=CPAN-Meta</a>. You will be notified automatically of any progress on your issue.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Source_Code"
>Source Code</a></h2>

<p>This is open source software. The code repository is available for public review and contribution under the terms of the license.</p>

<p><a href="http://github.com/dagolden/cpan-meta" class="podlinkurl"
>http://github.com/dagolden/cpan-meta</a></p>

<pre class="sh_perl">  git clone <a href="git://github.com/dagolden/cpan-meta.git" class="podlinkurl"
>git://github.com/dagolden/cpan-meta.git</a></pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li>David Golden &#60;dagolden@cpan.org&#62;</li>

<li>Ricardo Signes &#60;rjbs@cpan.org&#62;</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This software is copyright (c) 2010 by David Golden and Ricardo Signes.</p>

<p>This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78052 Uploads, 24684 Distributions
105889 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 21 18:42:41 2012 GMT (0.117836952209473) @cpansearch1 -->
 </body>
</html>
