<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Crypt::GPG - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Crypt-GPG",3]);
    _gaq.push(["_setCustomVar",5,"Release","Crypt-GPG-1.63",3]);
    _gaq.push(["_setCustomVar",3,"Module","Crypt::GPG",3]);
    _gaq.push(["_setCustomVar",1,"Author","AGUL",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Crypt::GPG">permalink</a></div>
  <a href="/~agul/">Ashish Gulhati</a> &gt;
  <a href="/~agul/Crypt-GPG-1.63/">Crypt-GPG-1.63</a> &gt;
  Crypt::GPG
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/8a245112abbb4a122d28969cf710ffc7?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/A/AG/AGUL/Crypt-GPG-1.63.tar.gz">Crypt-GPG-1.63.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Crypt%3A%3AGPG;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~AGUL/Crypt-GPG-1.63/GPG.pm">Annotate this POD
(2)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?GnuPG%3A%3AInterface">GnuPG::Interface</a><br>
<a href="/perldoc?Crypt%3A%3ACBC">Crypt::CBC</a><br>
<a href="/perldoc?Crypt%3A%3AOpenPGP">Crypt::OpenPGP</a><br>
<a href="/perldoc?IPC%3A%3ARun">IPC::Run</a><br>
<a href="/perldoc?IPC%3A%3AOpen3">IPC::Open3</a><br>
<a href="/perldoc?Crypt%3A%3ARC4">Crypt::RC4</a><br>
<a href="/perldoc?Data%3A%3AAlias">Data::Alias</a><br>
<a href="/perldoc?Crypt%3A%3ABlowfish">Crypt::Blowfish</a><br>
<a href="/perldoc?Crypt%3A%3ARijndael">Crypt::Rijndael</a><br>
<a href="/perldoc?Sys%3A%3ASyslog">Sys::Syslog</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Crypt%3A%3AGPG">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 5</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Crypt-GPG">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.63 &nbsp;
<span class="noprint">
  <a href="/src/AGUL/Crypt-GPG-1.63/GPG.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#CONSTRUCTOR'>CONSTRUCTOR</a>
  <li class='indexItem indexItem1'><a href='#DATA_METHODS'>DATA METHODS</a>
  <li class='indexItem indexItem1'><a href='#OBJECT_METHODS'>OBJECT METHODS</a>
  <li class='indexItem indexItem1'><a href='#Crypt::GPG::Signature'>Crypt::GPG::Signature</a>
  <li class='indexItem indexItem1'><a href='#Crypt::GPG::Key'>Crypt::GPG::Key</a>
  <li class='indexItem indexItem1'><a href='#TODO'>TODO</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#CHANGELOG'>CHANGELOG</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#ACKNOWLEDGEMENTS'>ACKNOWLEDGEMENTS</a>
  <li class='indexItem indexItem1'><a href='#LICENSE'>LICENSE</a>
  <li class='indexItem indexItem1'><a href='#BUGS_REPORTS,_PATCHES,_FEATURE_REQUESTS'>BUGS REPORTS, PATCHES, FEATURE REQUESTS</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Crypt::GPG - An Object Oriented Interface to GnuPG.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> $Revision: 1.63 $
 $Date: 2007/04/02 13:34:25 $</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Crypt::GPG;
  my $gpg = new Crypt::GPG;

  $gpg-&#62;gpgbin(&#39;/usr/bin/gpg&#39;);      # The GnuPG executable.
  $gpg-&#62;secretkey(&#39;0x2B59D29E&#39;);     # Set ID of default secret key.
  $gpg-&#62;passphrase(&#39;just testing&#39;);  # Set passphrase.

  # Sign a message:

  my $sign = $gpg-&#62;sign(&#39;testing again&#39;);

  # Encrypt a message:

  my @encrypted = $gpg-&#62;encrypt (&#39;top secret&#39;, &#39;test@bar.com&#39;);

  # Get message info:

  my @recipients = $gpg-&#62;msginfo($encrypted);

  # Decrypt a message.

  my ($plaintext, $signature) = $gpg-&#62;verify($encrypted);

  # Key generation:

  $status = $gpg-&#62;keygen 
    (&#39;Test&#39;, &#39;test@foo.com&#39;, &#39;ELG-E&#39;, 2048, 0, &#39;test passphrase&#39;);
  print while (&#60;$status&#62;); close $status;

  # Key database manipulation:

  $gpg-&#62;addkey($key, @ids);
  @keys = $gpg-&#62;keydb(@ids);

  # Key manipulation:

  $key = $keys[0];
 
  $gpg-&#62;delkey($key);
  $gpg-&#62;disablekey($key);
  $gpg-&#62;enablekey($key);
  $gpg-&#62;keypass($key, $oldpassphrase, $newpassphrase);
  $keystring = $gpg-&#62;export($key);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Crypt::GPG module provides access to the functionality of the GnuPG (www.gnupg.org) encryption tool through an object oriented interface.</p>

<p>It provides methods for encryption, decryption, signing, signature verification, key generation, key certification, export and import. Key-server access is on the todo list.</p>

<p>This release of the module may create compatibility issues with previous versions. If you find any such problems, or any bugs or documentation errors, please do report them to crypt-gpg at neomailbox.com.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTOR"
>CONSTRUCTOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='new'></a><a name="new()"
><b>new()</b></a></dt>

<dd>
<p>Creates and returns a new Crypt::GPG object.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DATA_METHODS"
>DATA METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='gpgbin'></a><a name="gpgbin($path)"
><b>gpgbin($path)</b></a></dt>

<dd>
<p>Sets the <b>GPGBIN</b> instance variable which gives the path to the GnuPG binary.</p>

<dt><a name='gpgopts'></a><a name="gpgopts($opts)"
><b>gpgopts($opts)</b></a></dt>

<dd>
<p>Sets the <b>GPGOPTS</b> instance variable which may be used to pass additional options to the GnuPG binary. For proper functioning of this module, it is advisable to always include &#39;--lock-multiple&#39; in the GPGOPTS string.</p>

<dt><a name='delay'></a><a name="delay($seconds)"
><b>delay($seconds)</b></a></dt>

<dd>
<p>Sets the <b>DELAY</b> instance variable. This is no longer necessary (nor used) in the current version of the module, but remains so existing scripts don&#39;t break.</p>

<dt><a name='secretkey'></a><a name="secretkey($keyid)"
><b>secretkey($keyid)</b></a></dt>

<dd>
<p>Sets the <b>SECRETKEY</b> instance variable which may be a KeyID or a username. This is the ID of the default key to use for signing.</p>

<dt><a name='passphrase'></a><a name="passphrase($passphrase)"
><b>passphrase($passphrase)</b></a></dt>

<dd>
<p>Sets the <b>PASSPHRASE</b> instance variable, required for signing and decryption.</p>

<dt><a name='text'></a><a name="text($boolean)"
><b>text($boolean)</b></a></dt>

<dd>
<p>Sets the <b>TEXT</b> instance variable. If set true, GnuPG will use network-compatible line endings for proper cross-platform compatibility and the plaintext will gain a newline at the end, if it does not already have one.</p>

<dt><a name='armor'></a><a name="armor($boolean)"
><b>armor($boolean)</b></a></dt>

<dd>
<p>Sets the <b>ARMOR</b> instance variable, controlling the ASCII armoring of output. The default is to use ascii-armoring. The module has not been tested with this option turned off, and most likely will not work if you switch this off.</p>

<dt><a name='detach'></a><a name="detach($boolean)"
><b>detach($boolean)</b></a></dt>

<dd>
<p>Sets the <b>DETACH</b> instance variable. If set true, the sign method will produce detached signature certificates, else it won&#39;t. The default is to produce detached signatures.</p>

<dt><a name='encryptsafe'></a><a name="encryptsafe($boolean)"
><b>encryptsafe($boolean)</b></a></dt>

<dd>
<p>Sets the <b>ENCRYPTSAFE</b> instance variable. If set true, encryption will fail if trying to encrypt to a key which is not trusted. This is the default. Turn this off if you want to encrypt to untrusted keys.</p>

<dt><a name='version'></a><a name="version($versionstring)"
><b>version($versionstring)</b></a></dt>

<dd>
<p>Sets the <b>VERSION</b> instance variable which can be used to change the Version: string on the GnuPG output to whatever you like.</p>

<dt><a name='comment'></a><a name="comment($commentstring)"
><b>comment($commentstring)</b></a></dt>

<dd>
<p>Sets the <b>COMMENT</b> instance variable which can be used to change the Comment: string on the GnuPG output to whatever you like.</p>

<dt><a name='nofork'></a><a name="nofork($flag)"
><b>nofork($flag)</b></a></dt>

<dd>
<p>Sets the <b>NOFORK</b> instance variable which if set to a true value will cause keygen() not to fork a separate process for key generation.</p>

<dt><a name='debug'></a><a name="debug($boolean)"
><b>debug($boolean)</b></a></dt>

<dd>
<p>Sets the <b>DEBUG</b> instance variable which causes the raw output of Crypt::GPG&#39;s interaction with the GnuPG binary to be dumped to STDOUT. By default, debugging is off.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OBJECT_METHODS"
>OBJECT METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='sign'></a><a name="sign(@message)"
><b>sign(@message)</b></a></dt>

<dd>
<p>Signs <b>@message</b> with the secret key specified with <b>secretkey()</b> and returns the result as a string.</p>

<dt><a name='decrypt'></a><a name="decrypt(\@message,_[\@signature])"
><b>decrypt(\@message, [\@signature])</b></a></dt>

<dd>
<p>This is just an alias for <b>verify()</b></p>

<dt><a name='verify'></a><a name="verify(\@message,_[\@signature])"
><b>verify(\@message, [\@signature])</b></a></dt>

<dd>
<p>Decrypts and/or verifies the message in <b>@message</b>, optionally using the detached signature in <b>@signature</b>, and returns a list whose first element is plaintext message as a string. If the message was signed, a Crypt::GPG::Signature object is returned as the second element of the list.</p>

<p>The Crypt::GPG::Signature object can be queried with the following methods:</p>

<pre class="sh_perl">   $sig-&#62;validity();    # &#39;GOOD&#39;, &#39;BAD&#39;, or &#39;UNKNOWN&#39;
   $sig-&#62;keyid();       # ID of signing key
   $sig-&#62;time();        # Time the signature was made
   $sig-&#62;trusted();     # Signature trust level</pre>

<dt><a name='msginfo'></a><a name="msginfo(@ciphertext)"
><b>msginfo(@ciphertext)</b></a></dt>

<dd>
<p>Returns a list of the recipient key IDs that <b>@ciphertext</b> is encrypted to.</p>

<dt><a name='encrypt'></a><a name="encrypt($plaintext,_$keylist,_[-sign]_)"
><b>encrypt($plaintext, $keylist, [-sign] )</b></a></dt>

<dd>
<p>Encrypts <b>$plaintext</b> with the public keys of the recipients listed in <b>$keylist</b> and returns the result in a string, or <b>undef</b> if there was an error while processing. Returns undef if any of the keys are not found.</p>

<p>Either $plaintext or $keylist may be specified as either an arrayref or a simple scalar.</p>

<p>If $plaintext is a an arrayref, it will be join()ed without newlines.</p>

<p>If you want to encrypt to multiple recipients, you must use the arrayref version of $keylist. A scalar $keylist works for only a single key ID.</p>

<p>If the -sign option is provided, the message will be signed before encryption. The secret key and passphrase must be set for signing to work. They can be set with the secretkey() and passphrase() methods.</p>

<dt><a name='addkey'></a><a name="addkey($key,_$pretend,_@keyids)"
><b>addkey($key, $pretend, @keyids)</b></a></dt>

<dd>
<p>Adds the keys given in <b>$key</b> to the user&#39;s key ring and returns a list of Crypt::GPG::Key objects corresponding to the keys that were added. $key may be a string or an array reference.</p>

<p>If <b>$pretend</b> is true, it pretends to add the key and creates the key object, but doesn&#39;t actually perform the key addition.</p>

<p>Optionally, a list of key IDs may be specified. If a list of key IDs is specified, only keys that match those IDs will be imported. The rest will be ignored.</p>

<dt><a name='export'></a><a name="export($key)"
><b>export($key)</b></a></dt>

<dd>
<p>Exports the key specified by the Crypt::GPG::Key object <b>$key</b> and returns the result as a string.</p>

<dt><a name='keygen'></a><a name="keygen($name,_$email,_$keytype,_$keysize,_$expire,_$passphrase)"
><b>keygen($name, $email, $keytype, $keysize, $expire, $passphrase)</b></a></dt>

<dd>
<p>Creates a new keypair with the parameters specified. The only supported <b>$keytype</b> currently is &#39;ELG-E&#39;. <b>$keysize</b> can be any of 1024, 2048, 3072 or 4096. Returns undef if there was an error, otherwise returns a filehandle that reports the progress of the key generation process similar to the way GnuPG does. The key generation is not complete till you read an EOF from the returned filehandle.</p>

<dt><a name='certify'></a><a name="certify($keyid,_$local,_@uids)"
><b>certify($keyid, $local, @uids)</b></a></dt>

<dd>
<p>Certifies to the authenticity of UIDs of the key with ID $keyid. If $local is true, the certification will be non-exportable. The @uids parameter should contain the list of UIDs to certify (the first UID of a key is 0).</p>

<dt><a name='keydb'></a><a name="keydb(@keyids)"
><b>keydb(@keyids)</b></a></dt>

<dd>
<p>Returns an array of Crypt::GPG::Key objects corresponding to the Key IDs listed in <b>@keyids</b>. This method used to be called <b>keyinfo</b> and that is still an alias to this method.</p>

<dt><a name='parsekeys'></a><a name="parsekeys(@keylist)"
><b>parsekeys(@keylist)</b></a></dt>

<dd>
<p>Parses a raw GnuPG formatted key listing in <b>@keylist</b> and returns an array of Crypt::GPG::Key objects.</p>

<dt><a name='keypass'></a><a name="keypass($key,_$oldpass,_$newpass)"
><b>keypass($key, $oldpass, $newpass)</b></a></dt>

<dd>
<p>Change the passphrase for a key. Returns true if the passphrase change succeeded, false if not, or undef if there was an error.</p>

<dt><a name='delkey'></a><a name="delkey($keyid)"
><b>delkey($keyid)</b></a></dt>

<dd>
<p>Deletes the key specified by the Crypt::GPG::Key object <b>$key</b> from the user&#39;s key ring. Returns undef if there was an error, or 1 if the key was successfully deleted.</p>

<dt><a name='disablekey'></a><a name="disablekey($keyid)"
><b>disablekey($keyid)</b></a></dt>

<dd>
<p>Disables the key specified by the Crypt::GPG::Key object <b>$key</b>.</p>

<dt><a name='enablekey'></a><a name="enablekey($keyid)"
><b>enablekey($keyid)</b></a></dt>

<dd>
<p>Enables the key specified by the Crypt::GPG::Key object <b>$key</b>.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Crypt::GPG::Signature"
>Crypt::GPG::Signature <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<blockquote>
<pre class="sh_perl">  Documentation coming soon.</pre>
</blockquote>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Crypt::GPG::Key"
>Crypt::GPG::Key <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<blockquote>
<pre class="sh_perl">  Documentation coming soon.</pre>
</blockquote>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TODO"
>TODO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li>Key server access.</li>

<li>More complete key manipulation interface.</li>

<li>Filehandle interface to handle large messages.</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li>Error checking needs work.</li>

<li>Some key manipulation functions are missing.</li>

<li>The method call interface is subject to change in future versions.</li>

<li>The current implementation will probably eat up all your RAM if you try to operate on huge messages. In future versions, this will be addressed by reading from and returning filehandles, rather than using in-core data.</li>

<li>Methods may break if you don&#39;t use ASCII armoring.</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CHANGELOG"
>CHANGELOG <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<blockquote>
<p>$Log: GPG.pm,v $</p>

<p>Revision 1.63 2007/04/02 13:34:25 ashish</p>

<pre class="sh_perl">  - Fixed a bug introduced by the changes in 1.62 wrt default signing key</pre>

<p>Revision 1.62 2007/03/31 11:28:12 ashish</p>

<pre class="sh_perl">  - Fixed debug()

  - Fixed regex for signature line

  - Non-forking version of keygen() (thanks to Greg Hill)

  - Enabled use of default Key ID for signing

  - Allow for GPG returning 8 or 16 bit KeyIDs (thanks to Roberto Jimenoca)

  - Fixed tempfiles being left around after decrypt()

  - Changed exit() to CORE::exit() (suggested by Jonathan R. Baker)</pre>

<p>Revision 1.61 2006/12/21 12:36:28 ashish</p>

<pre class="sh_perl">  - Skip tests if gpg not found.

  - Use File::Spec to determine tmpdir. Suggested by Craig Manley.</pre>

<p>Revision 1.59 2006/12/19 12:51:54 ashish</p>

<pre class="sh_perl">  - Documentation fixes.

  - Removed tests for obsolete 768 bit keys.

  - Bugfixes.

  - Tested with gpg 1.4.6.</pre>

<p>Revision 1.57 2005/12/15 17:09:17 ashish</p>

<pre class="sh_perl">  - Fixed bug in decrypt

  - Fixed small key certification bugs.</pre>

<p>Revision 1.50 2005/02/10 12:32:51 cvs</p>

<pre class="sh_perl"> - Overhauled to use IPC::Run instead of Expect.

 - Test suite split up into multiple scripts.</pre>

<p>Revision 1.42 2002/12/11 03:33:19 cvs</p>

<pre class="sh_perl"> - Fixed bug in certify() when trying to certify revoked a key.

 - Applied dharris\x40drh.net&#39;s patch to allow for varying date formats
   between gpg versions, and fix time parsing and the
   Crypt::GPG::Signature autoloaded accessor functions.</pre>

<p>Revision 1.40 2002/09/23 23:01:53 cvs</p>

<pre class="sh_perl"> - Fixed a bug in keypass()

 - Documentation fixes.</pre>

<p>Revision 1.37 2002/09/21 02:37:49 cvs</p>

<pre class="sh_perl"> - Fixed signing option in encrypt.</pre>

<p>Revision 1.36 2002/09/21 00:03:29 cvs</p>

<pre class="sh_perl"> - Added many tests and fixed a bunch of bugs.</pre>

<p>Revision 1.34 2002/09/20 19:07:11 cvs</p>

<pre class="sh_perl"> - Extensively modified formatting to make the code easier to
   read. All lines are now &#60; 80 chars.

 - Removed all instances of invoking a shell.

 - Misc. other stuff.</pre>

<p>Revision 1.31 2002/09/20 16:38:45 cvs</p>

<pre class="sh_perl"> - Cleaned up export and addkey. Fixed(?) addkey clobbering trustdb
   problem (thanks to jrray\x40spacemeat.com for the patch). Added
   support for signature verification on addkey pretend.

 - No calls to POSIX::tmpnam remain (thanks to radek\x40karnet.pl and
   jrray\x40spacemeat.com for suggesting File::Temp).</pre>

<p>Revision 1.30 2002/09/20 15:25:47 cvs</p>

<pre class="sh_perl"> - Fixed up tempfile handling and eliminated calls to the shell in
   encrypt(), sign() and msginfo(). Passing all currently defined
   tests. 

 - Hopefully also fixed signing during encryption and verification of
   detached signatures. Not tested this yet.</pre>

<p>Revision 1.29 2002/09/20 11:19:02 cvs</p>

<pre class="sh_perl"> - Removed hack to Version: string. Only the Comment: string in GPG
   output is now modified by Crypt::GPG. (Thanks to
   eisen\x40schlund.de for pointing out the bug here)

 - Removed code that incorrectly replaced &#39;PGP MESSAGE&#39; with &#39;PGP
   SIGNATURE&#39; on detached signatures. (Thanks to ddcc\x40mit.edu for
   pointing this out).

 - Fixed up addkey() to properly handle pretend mode and to
   selectively import only requested key IDs from a key block.

 - parsekeys() now also figures out which keyring a key belongs to.

 - Added certify() method, to enable certifying keys.

 - Added Crypt::GPG::Signature methods - validity(), keyid(), time()
   and trusted().</pre>
</blockquote>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Crypt::GPG is Copyright (c) 2000-2007 Ashish Gulhati &#60;crypt-gpg at neomailbox.com&#62;. All Rights Reserved.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACKNOWLEDGEMENTS"
>ACKNOWLEDGEMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Thanks to Barkha, for inspiration; to the GnuPG team; and to everyone who writes free software.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE"
>LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This code is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS_REPORTS,_PATCHES,_FEATURE_REQUESTS"
>BUGS REPORTS, PATCHES, FEATURE REQUESTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Are very welcome. Email crypt-gpg at neomailbox.com.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78269 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 22:08:01 2012 GMT (0.220140933990479) @cpansearch1 -->
 </body>
</html>
