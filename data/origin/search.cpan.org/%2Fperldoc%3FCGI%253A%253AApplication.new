<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>CGI::Application - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","CGI-Application",3]);
    _gaq.push(["_setCustomVar",5,"Release","CGI-Application-4.50",3]);
    _gaq.push(["_setCustomVar",3,"Module","CGI::Application",3]);
    _gaq.push(["_setCustomVar",1,"Author","MARKSTOS",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?CGI::Application">permalink</a></div>
  <a href="/~markstos/">Mark Stosberg</a> &gt;
  <a href="/~markstos/CGI-Application-4.50/">CGI-Application-4.50</a> &gt;
  CGI::Application
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/795623cd5c352aafe2d8f3d3bdd712ce?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/M/MA/MARKSTOS/CGI-Application-4.50.tar.gz">CGI-Application-4.50.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=CGI%3A%3AApplication;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~MARKSTOS/CGI-Application-4.50/lib/CGI/Application.pm">Annotate this POD
(7)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?CGI%3A%3ASession">CGI::Session</a><br>
<a href="/perldoc?CGI%3A%3ACarp">CGI::Carp</a><br>
<a href="/perldoc?HTML%3A%3AMason">HTML::Mason</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?CGI%3A%3AFormBuilder">CGI::FormBuilder</a><br>
<a href="/perldoc?WWW%3A%3AMechanize">WWW::Mechanize</a><br>
<a href="/perldoc?Apache%3A%3ASession">Apache::Session</a><br>
<a href="/perldoc?Apache%3A%3ARegistry">Apache::Registry</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=CGI%3A%3AApplication">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 4</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=CGI-Application">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  4.50 &nbsp;
<span class="noprint">
  <a href="/src/MARKSTOS/CGI-Application-4.50/lib/CGI/Application.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#INTRODUCTION'>INTRODUCTION</a>
  <li class='indexItem indexItem1'><a href='#USAGE_EXAMPLE'>USAGE EXAMPLE</a>
  <li class='indexItem indexItem1'><a href='#ABSTRACT'>ABSTRACT</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Instance_Script_Methods'>Instance Script Methods</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#new()'>new()</a>
      <li class='indexItem indexItem3'><a href='#run()'>run()</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#PSGI_support'>PSGI support</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#psgi_app()'>psgi_app()</a>
      <li class='indexItem indexItem3'><a href='#run_as_psgi()'>run_as_psgi()</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Methods_to_possibly_override'>Methods to possibly override</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#setup()'>setup()</a>
      <li class='indexItem indexItem3'><a href='#teardown()'>teardown()</a>
      <li class='indexItem indexItem3'><a href='#cgiapp_init()'>cgiapp_init()</a>
      <li class='indexItem indexItem3'><a href='#cgiapp_prerun()'>cgiapp_prerun()</a>
      <li class='indexItem indexItem3'><a href='#cgiapp_postrun()'>cgiapp_postrun()</a>
      <li class='indexItem indexItem3'><a href='#cgiapp_get_query()'>cgiapp_get_query()</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Essential_Application_Methods'>Essential Application Methods</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#load_tmpl()'>load_tmpl()</a>
      <li class='indexItem indexItem3'><a href='#param()'>param()</a>
      <li class='indexItem indexItem3'><a href='#query()'>query()</a>
      <li class='indexItem indexItem3'><a href='#run_modes()'>run_modes()</a>
      <li class='indexItem indexItem3'><a href='#start_mode()'>start_mode()</a>
      <li class='indexItem indexItem3'><a href='#tmpl_path()'>tmpl_path()</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#More_Application_Methods'>More Application Methods</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#delete()'>delete()</a>
      <li class='indexItem indexItem3'><a href='#dump()'>dump()</a>
      <li class='indexItem indexItem3'><a href='#dump_html()'>dump_html()</a>
      <li class='indexItem indexItem3'><a href='#error_mode()'>error_mode()</a>
      <li class='indexItem indexItem3'><a href='#get_current_runmode()'>get_current_runmode()</a>
      <li class='indexItem indexItem3'><a href='#header_add()'>header_add()</a>
      <li class='indexItem indexItem3'><a href='#header_props()'>header_props()</a>
      <li class='indexItem indexItem3'><a href='#header_type()'>header_type()</a>
      <li class='indexItem indexItem3'><a href='#mode_param()'>mode_param()</a>
      <li class='indexItem indexItem3'><a href='#prerun_mode()'>prerun_mode()</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Dispatching_Clean_URIs_to_run_modes'>Dispatching Clean URIs to run modes</a>
    <li class='indexItem indexItem2'><a href='#Offline_website_development'>Offline website development</a>
    <li class='indexItem indexItem2'><a href='#Automated_Testing'>Automated Testing</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#PLUG-INS'>PLUG-INS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Recommended_Plug-ins'>Recommended Plug-ins</a>
    <li class='indexItem indexItem2'><a href='#More_plug-ins'>More plug-ins</a>
    <li class='indexItem indexItem2'><a href='#Writing_Plug-ins'>Writing Plug-ins</a>
    <li class='indexItem indexItem2'><a href='#Writing_Advanced_Plug-ins_-_Using_callbacks'>Writing Advanced Plug-ins - Using callbacks</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#add_callback()'>add_callback()</a>
      <li class='indexItem indexItem3'><a href='#new_hook(HOOK)'>new_hook(HOOK)</a>
      <li class='indexItem indexItem3'><a href='#call_hook(HOOK)'>call_hook(HOOK)</a>
    </ul>
  </ul>
  <li class='indexItem indexItem1'><a href='#COMMUNITY'>COMMUNITY</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#MORE_READING'>MORE READING</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#CREDITS'>CREDITS</a>
  <li class='indexItem indexItem1'><a href='#LICENSE'>LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>CGI::Application - Framework for building reusable web-applications</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  # In &#34;WebApp.pm&#34;...
  package WebApp;
  use base &#39;CGI::Application&#39;;

  # ( setup() can even be skipped for common cases. See docs below. )
  sub setup {
        my $self = shift;
        $self-&#62;start_mode(&#39;mode1&#39;);
        $self-&#62;mode_param(&#39;rm&#39;);
        $self-&#62;run_modes(
                &#39;mode1&#39; =&#62; &#39;do_stuff&#39;,
                &#39;mode2&#39; =&#62; &#39;do_more_stuff&#39;,
                &#39;mode3&#39; =&#62; &#39;do_something_else&#39;
        );
  }
  sub do_stuff { ... }
  sub do_more_stuff { ... }
  sub do_something_else { ... }
  1;


  ### In &#34;webapp.cgi&#34;...
  use WebApp;
  my $webapp = WebApp-&#62;new();
  $webapp-&#62;run();

  ### Or, in a PSGI file, webapp.psgi
  use WebApp;
  WebApp-&#62;psgi_app();</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INTRODUCTION"
>INTRODUCTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>CGI::Application makes it easier to create sophisticated, high-performance, reusable web-based applications. CGI::Application helps makes your web applications easier to design, write, and evolve.</p>

<p>CGI::Application judiciously avoids employing technologies and techniques which would bind a developer to any one set of tools, operating system or web server.</p>

<p>It is lightweight in terms of memory usage, making it suitable for common CGI environments, and a high performance choice in persistent environments like FastCGI or mod_perl.</p>

<p>By adding <a href="/perldoc?PLUG-INS" class="podlinkpod"
>PLUG-INS</a> as your needs grow, you can add advanced and complex features when you need them.</p>

<p>First released in 2000 and used and expanded by a number of professional website developers, CGI::Application is a stable, reliable choice.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="USAGE_EXAMPLE"
>USAGE EXAMPLE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Imagine you have to write an application to search through a database of widgets. Your application has three screens:</p>

<pre class="sh_perl">   1. Search form
   2. List of results
   3. Detail of a single record</pre>

<p>To write this application using CGI::Application you will create two files:</p>

<pre class="sh_perl">   1. WidgetView.pm -- Your &#34;Application Module&#34;
   2. widgetview.cgi -- Your &#34;Instance Script&#34;</pre>

<p>The Application Module contains all the code specific to your application functionality, and it exists outside of your web server&#39;s document root, somewhere in the Perl library search path.</p>

<p>The Instance Script is what is actually called by your web server. It is a very small, simple file which simply creates an instance of your application and calls an inherited method, run(). Following is the entirety of &#34;widgetview.cgi&#34;:</p>

<pre class="sh_perl">   #!/usr/bin/perl -w
   use WidgetView;
   my $webapp = WidgetView-&#62;new();
   $webapp-&#62;run();</pre>

<p>As you can see, widgetview.cgi simply &#34;uses&#34; your Application module (which implements a Perl package called &#34;WidgetView&#34;). Your Application Module, &#34;WidgetView.pm&#34;, is somewhat more lengthy:</p>

<pre class="sh_perl">   package WidgetView;
   use base &#39;CGI::Application&#39;;
   use strict;

   # Needed for our database connection
   use CGI::Application::Plugin::DBH;

   sub setup {
        my $self = shift;
        $self-&#62;start_mode(&#39;mode1&#39;);
        $self-&#62;run_modes(
                &#39;mode1&#39; =&#62; &#39;showform&#39;,
                &#39;mode2&#39; =&#62; &#39;showlist&#39;,
                &#39;mode3&#39; =&#62; &#39;showdetail&#39;
        );

        # Connect to DBI database, with the same args as DBI-&#62;connect();
     $self-&#62;dbh_config();
   }

   sub teardown {
        my $self = shift;

        # Disconnect when we&#39;re done, (Although DBI usually does this automatically)
        $self-&#62;dbh-&#62;disconnect();
   }

   sub showform {
        my $self = shift;

        # Get CGI query object
        my $q = $self-&#62;query();

        my $output = &#39;&#39;;
        $output .= $q-&#62;start_html(-title =&#62; &#39;Widget Search Form&#39;);
        $output .= $q-&#62;start_form();
        $output .= $q-&#62;textfield(-name =&#62; &#39;widgetcode&#39;);
        $output .= $q-&#62;hidden(-name =&#62; &#39;rm&#39;, -value =&#62; &#39;mode2&#39;);
        $output .= $q-&#62;submit();
        $output .= $q-&#62;end_form();
        $output .= $q-&#62;end_html();

        return $output;
   }

   sub showlist {
        my $self = shift;

        # Get our database connection
        my $dbh = $self-&#62;dbh();

        # Get CGI query object
        my $q = $self-&#62;query();
        my $widgetcode = $q-&#62;param(&#34;widgetcode&#34;);

        my $output = &#39;&#39;;
        $output .= $q-&#62;start_html(-title =&#62; &#39;List of Matching Widgets&#39;);

        ## Do a bunch of stuff to select &#34;widgets&#34; from a DBI-connected
        ## database which match the user-supplied value of &#34;widgetcode&#34;
        ## which has been supplied from the previous HTML form via a
        ## CGI.pm query object.
        ##
        ## Each row will contain a link to a &#34;Widget Detail&#34; which
        ## provides an anchor tag, as follows:
        ##
        ##   &#34;widgetview.cgi?rm=mode3&#38;widgetid=XXX&#34;
        ##
        ##  ...Where &#34;XXX&#34; is a unique value referencing the ID of
        ## the particular &#34;widget&#34; upon which the user has clicked.

        $output .= $q-&#62;end_html();

        return $output;
   }

   sub showdetail {
        my $self = shift;

        # Get our database connection
        my $dbh = $self-&#62;dbh();

        # Get CGI query object
        my $q = $self-&#62;query();
        my $widgetid = $q-&#62;param(&#34;widgetid&#34;);

        my $output = &#39;&#39;;
        $output .= $q-&#62;start_html(-title =&#62; &#39;Widget Detail&#39;);

        ## Do a bunch of things to select all the properties of
        ## the particular &#34;widget&#34; upon which the user has
        ## clicked.  The key id value of this widget is provided
        ## via the &#34;widgetid&#34; property, accessed via the CGI.pm
        ## query object.

        $output .= $q-&#62;end_html();

        return $output;
   }

   1;  # Perl requires this at the end of all modules</pre>

<p>CGI::Application takes care of implementing the new() and the run() methods. Notice that at no point do you call print() to send any output to STDOUT. Instead, all output is returned as a scalar.</p>

<p>CGI::Application&#39;s most significant contribution is in managing the application state. Notice that all which is needed to push the application forward is to set the value of a HTML form parameter &#39;rm&#39; to the value of the &#34;run mode&#34; you wish to handle the form submission. This is the key to CGI::Application.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ABSTRACT"
>ABSTRACT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The guiding philosophy behind CGI::Application is that a web-based application can be organized into a specific set of &#34;Run Modes.&#34; Each Run Mode is roughly analogous to a single screen (a form, some output, etc.). All the Run Modes are managed by a single &#34;Application Module&#34; which is a Perl module. In your web server&#39;s document space there is an &#34;Instance Script&#34; which is called by the web server as a CGI (or an Apache::Registry script if you&#39;re using Apache + mod_perl).</p>

<p>This methodology is an inversion of the &#34;Embedded&#34; philosophy (ASP, JSP, EmbPerl, Mason, etc.) in which there are &#34;pages&#34; for each state of the application, and the page drives functionality. In CGI::Application, form follows function -- the Application Module drives pages, and the code for a single application is in one place; not spread out over multiple &#34;pages&#34;. If you feel that Embedded architectures are confusing, unorganized, difficult to design and difficult to manage, CGI::Application is the methodology for you!</p>

<p>Apache is NOT a requirement for CGI::Application. Web applications based on CGI::Application will run equally well on NT/IIS or any other CGI-compatible environment. CGI::Application-based projects are, however, ripe for use on Apache/mod_perl servers, as they naturally encourage Good Programming Practices and will often work in persistent environments without modification.</p>

<p>For more information on using CGI::Application with mod_perl, please see our website at <a href="http://www.cgi-app.org/" class="podlinkurl"
>http://www.cgi-app.org/</a>, as well as <a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AApache" class="podlinkpod"
>CGI::Application::Plugin::Apache</a>, which integrates with <a href="/perldoc?Apache%3A%3ARequest" class="podlinkpod"
>Apache::Request</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>It is intended that your Application Module will be implemented as a sub-class of CGI::Application. This is done simply as follows:</p>

<pre class="sh_perl">    package My::App; 
    use base &#39;CGI::Application&#39;;</pre>

<p><b>Notation and Conventions</b></p>

<p>For the purpose of this document, we will refer to the following conventions:</p>

<pre class="sh_perl">  WebApp.pm   The Perl module which implements your Application Module class.
  WebApp      Your Application Module class; a sub-class of CGI::Application.
  webapp.cgi  The Instance Script which implements your Application Module.
  $webapp     An instance (object) of your Application Module class.
  $c          Same as $webapp, used in instance methods to pass around the
              current object. (Sometimes referred as &#34;$self&#34; in other code)</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Instance_Script_Methods"
>Instance Script Methods</a></h2>

<p>By inheriting from CGI::Application you have access to a number of built-in methods. The following are those which are expected to be called from your Instance Script.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="new()"
>new()</a></h3>

<p>The new() method is the constructor for a CGI::Application. It returns a blessed reference to your Application Module package (class). Optionally, new() may take a set of parameters as key =&#62; value pairs:</p>

<pre class="sh_perl">    my $webapp = WebApp-&#62;new(
                TMPL_PATH =&#62; &#39;App/&#39;,
                PARAMS =&#62; {
                        &#39;custom_thing_1&#39; =&#62; &#39;some val&#39;,
                        &#39;another_custom_thing&#39; =&#62; [qw/123 456/]
                }
    );</pre>

<p>This method may take some specific parameters:</p>

<p><b>TMPL_PATH</b> - This optional parameter defines a path to a directory of templates. This is used by the load_tmpl() method (specified below), and may also be used for the same purpose by other template plugins. This run-time parameter allows you to further encapsulate instantiating templates, providing potential for more re-usability. It can be either a scalar or an array reference of multiple paths.</p>

<p><b>QUERY</b> - This optional parameter allows you to specify an already-created CGI.pm query object. Under normal use, CGI::Application will instantiate its own CGI.pm query object. Under certain conditions, it might be useful to be able to use one which has already been created.</p>

<p><b>PARAMS</b> - This parameter, if used, allows you to set a number of custom parameters at run-time. By passing in different values in different instance scripts which use the same application module you can achieve a higher level of re-usability. For instance, imagine an application module, &#34;Mailform.pm&#34;. The application takes the contents of a HTML form and emails it to a specified recipient. You could have multiple instance scripts throughout your site which all use this &#34;Mailform.pm&#34; module, but which set different recipients or different forms.</p>

<p>One common use of instance scripts is to provide a path to a config file. This design allows you to define project wide configuration objects used by many several instance scripts. There are several plugins which simplify the syntax for this and provide lazy loading. Here&#39;s an example using <a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AConfigAuto" class="podlinkpod"
>CGI::Application::Plugin::ConfigAuto</a>, which uses <a href="/perldoc?Config%3A%3AAuto" class="podlinkpod"
>Config::Auto</a> to support many configuration file formats.</p>

<pre class="sh_perl"> my $app = WebApp-&#62;new(PARAMS =&#62; { cfg_file =&#62; &#39;config.pl&#39; });

 # Later in your app:
 my %cfg = $self-&#62;cfg()
 # or ... $self-&#62;cfg(&#39;HTML_ROOT_DIR&#39;);</pre>

<p>See the list of of plugins below for more config file integration solutions.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="run()"
>run()</a></h3>

<p>The run() method is called upon your Application Module object, from your Instance Script. When called, it executes the functionality in your Application Module.</p>

<pre class="sh_perl">    my $webapp = WebApp-&#62;new();
    $webapp-&#62;run();</pre>

<p>This method first determines the application state by looking at the value of the CGI parameter specified by mode_param() (defaults to &#39;rm&#39; for &#34;Run Mode&#34;), which is expected to contain the name of the mode of operation. If not specified, the state defaults to the value of start_mode().</p>

<p>Once the mode has been determined, run() looks at the dispatch table stored in run_modes() and finds the function pointer which is keyed from the mode name. If found, the function is called and the data returned is print()&#39;ed to STDOUT and to the browser. If the specified mode is not found in the run_modes() table, run() will croak().</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="PSGI_support"
>PSGI support</a></h2>

<p>CGI::Application offers native <a href="/perldoc?PSGI" class="podlinkpod"
>PSGI</a> support. The default query object for this is <a href="/perldoc?CGI%3A%3APSGI" class="podlinkpod"
>CGI::PSGI</a>, which simply wrappers CGI.pm to provide PSGI support to it.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="psgi_app()"
>psgi_app()</a></h3>

<pre class="sh_perl"> $psgi_coderef = WebApp-&#62;psgi_app({ ... args to new() ... });</pre>

<p>The simplest way to create and return a PSGI-compatible coderef. Pass in arguments to a hashref just as would to new. This returns a PSGI-compatible coderef, using <a href="/perldoc?CGI%3A%3A%3APSGI" class="podlinkpod"
>CGI:::PSGI</a> as the query object. To use a different query object, construct your own object using <code>run_as_psgi()</code>, as shown below.</p>

<p>It&#39;s possible that we&#39;ll change from CGI::PSGI to a different-but-compatible query object for PSGI support in the future, perhaps if CGI.pm adds native PSGI support.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="run_as_psgi()"
>run_as_psgi()</a></h3>

<pre class="sh_perl"> my $psgi_aref = $webapp-&#62;run_as_psgi;</pre>

<p>Just like <code>run</code>, but prints no output and returns the data structure required by the <a href="/perldoc?PSGI" class="podlinkpod"
>PSGI</a> specification. Use this if you want to run the application on top of a PSGI-compatible handler, such as <a href="/perldoc?Plack" class="podlinkpod"
>Plack</a> provides.</p>

<p>If you are just getting started, just use <code>run()</code>. It&#39;s easy to switch to using <code>run_as_psgi</code> later.</p>

<p>Why use <code>run_as_psgi()</code>? There are already solutions to run CGI::Application-based projects on several web servers with dozens of plugins. Running as a PSGI-compatible application provides the ability to run on additional PSGI-compatible servers, as well as providing access to all of the &#34;Middleware&#34; solutions available through the <a href="/perldoc?Plack" class="podlinkpod"
>Plack</a> project.</p>

<p>The structure returned is an arrayref, containing the status code, an arrayref of header key/values and an arrayref containing the body.</p>

<pre class="sh_perl"> [ 200, [ &#39;Content-Type&#39; =&#62; &#39;text/html&#39; ], [ $body ] ]</pre>

<p>By default the body is a single scalar, but plugins may modify this to return other value PSGI values. See <a href="/perldoc?PSGI#The_Response" class="podlinkpod"
>&#34;The Response&#34; in PSGI</a> for details about the response format.</p>

<p>Note that calling <code>run_as_psgi</code> only handles the <i>output</i> portion of the PSGI spec. to handle the input, you need to use a CGI.pm-like query object that is PSGI-compliant, such as <a href="/perldoc?CGI%3A%3APSGI" class="podlinkpod"
>CGI::PSGI</a>. This query object must provide <a href="/perldoc?psgi_header" class="podlinkpod"
>psgi_header</a> and <a href="/perldoc?psgi_redirect" class="podlinkpod"
>psgi_redirect</a> methods.</p>

<p>The final result might look like this:</p>

<pre class="sh_perl">    use WebApp;
    use CGI::PSGI;

    my $handler = sub {
        my $env = shift;
        my $webapp = WebApp-&#62;new({ QUERY =&#62; CGI::PSGI-&#62;new($env) });
        $webapp-&#62;run_as_psgi;
    };</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Methods_to_possibly_override"
>Methods to possibly override</a></h2>

<p>CGI::Application implements some methods which are expected to be overridden by implementing them in your sub-class module. These methods are as follows:</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="setup()"
>setup()</a></h3>

<p>This method is called by the inherited new() constructor method. The setup() method should be used to define the following property/methods:</p>

<pre class="sh_perl">    mode_param() - set the name of the run mode CGI param.
    start_mode() - text scalar containing the default run mode.
    error_mode() - text scalar containing the error mode.
    run_modes() - hash table containing mode =&#62; function mappings.
    tmpl_path() - text scalar or array reference containing path(s) to template files.</pre>

<p>Your setup() method may call any of the instance methods of your application. This function is a good place to define properties specific to your application via the $webapp-&#62;param() method.</p>

<p>Your setup() method might be implemented something like this:</p>

<pre class="sh_perl">        sub setup {
                my $self = shift;
                $self-&#62;tmpl_path(&#39;/path/to/my/templates/&#39;);
                $self-&#62;start_mode(&#39;putform&#39;);
                $self-&#62;error_mode(&#39;my_error_rm&#39;);
                $self-&#62;run_modes({
                        &#39;putform&#39;  =&#62; &#39;my_putform_func&#39;,
                        &#39;postdata&#39; =&#62; &#39;my_data_func&#39;
                });
                $self-&#62;param(&#39;myprop1&#39;);
                $self-&#62;param(&#39;myprop2&#39;, &#39;prop2value&#39;);
                $self-&#62;param(&#39;myprop3&#39;, [&#39;p3v1&#39;, &#39;p3v2&#39;, &#39;p3v3&#39;]);
        }</pre>

<p>However, often times all that needs to be in setup() is defining your run modes and your start mode. <a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AAutoRunmode" class="podlinkpod"
>CGI::Application::Plugin::AutoRunmode</a> allows you to do this with a simple syntax, using run mode attributes:</p>

<pre class="sh_perl"> use CGI::Application::Plugin::AutoRunmode;

 sub show_first : StartRunmode { ... };
 sub do_next : Runmode { ... }</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="teardown()"
>teardown()</a></h3>

<p>If implemented, this method is called automatically after your application runs. It can be used to clean up after your operations. A typical use of the teardown() function is to disconnect a database connection which was established in the setup() function. You could also use the teardown() method to store state information about the application to the server.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="cgiapp_init()"
>cgiapp_init()</a></h3>

<p>If implemented, this method is called automatically right before the setup() method is called. This method provides an optional initialization hook, which improves the object-oriented characteristics of CGI::Application. The cgiapp_init() method receives, as its parameters, all the arguments which were sent to the new() method.</p>

<p>An example of the benefits provided by utilizing this hook is creating a custom &#34;application super-class&#34; from which all your web applications would inherit, instead of CGI::Application.</p>

<p>Consider the following:</p>

<pre class="sh_perl">  # In MySuperclass.pm:
  package MySuperclass;
  use base &#39;CGI::Application&#39;;
  sub cgiapp_init {
        my $self = shift;
        # Perform some project-specific init behavior
        # such as to load settings from a database or file.
  }


  # In MyApplication.pm:
  package MyApplication;
  use base &#39;MySuperclass&#39;;
  sub setup { ... }
  sub teardown { ... }
  # The rest of your CGI::Application-based follows...</pre>

<p>By using CGI::Application and the cgiapp_init() method as illustrated, a suite of applications could be designed to share certain characteristics. This has the potential for much cleaner code built on object-oriented inheritance.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="cgiapp_prerun()"
>cgiapp_prerun()</a></h3>

<p>If implemented, this method is called automatically right before the selected run mode method is called. This method provides an optional pre-runmode hook, which permits functionality to be added at the point right before the run mode method is called. To further leverage this hook, the value of the run mode is passed into cgiapp_prerun().</p>

<p>Another benefit provided by utilizing this hook is creating a custom &#34;application super-class&#34; from which all your web applications would inherit, instead of CGI::Application.</p>

<p>Consider the following:</p>

<pre class="sh_perl">  # In MySuperclass.pm:
  package MySuperclass;
  use base &#39;CGI::Application&#39;;
  sub cgiapp_prerun {
        my $self = shift;
        # Perform some project-specific init behavior
        # such as to implement run mode specific
        # authorization functions.
  }


  # In MyApplication.pm:
  package MyApplication;
  use base &#39;MySuperclass&#39;;
  sub setup { ... }
  sub teardown { ... }
  # The rest of your CGI::Application-based follows...</pre>

<p>By using CGI::Application and the cgiapp_prerun() method as illustrated, a suite of applications could be designed to share certain characteristics. This has the potential for much cleaner code built on object-oriented inheritance.</p>

<p>It is also possible, within your cgiapp_prerun() method, to change the run mode of your application. This can be done via the prerun_mode() method, which is discussed elsewhere in this POD.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="cgiapp_postrun()"
>cgiapp_postrun()</a></h3>

<p>If implemented, this hook will be called after the run mode method has returned its output, but before HTTP headers are generated. This will give you an opportunity to modify the body and headers before they are returned to the web browser.</p>

<p>A typical use for this hook is pipelining the output of a CGI-Application through a series of &#34;filter&#34; processors. For example:</p>

<pre class="sh_perl">  * You want to enclose the output of all your CGI-Applications in
    an HTML table in a larger page.

  * Your run modes return structured data (such as XML), which you
    want to transform using a standard mechanism (such as XSLT).

  * You want to post-process CGI-App output through another system,
    such as HTML::Mason.

  * You want to modify HTTP headers in a particular way across all
    run modes, based on particular criteria.</pre>

<p>The cgiapp_postrun() hook receives a reference to the output from your run mode method, in addition to the CGI-App object. A typical cgiapp_postrun() method might be implemented as follows:</p>

<pre class="sh_perl">  sub cgiapp_postrun {
    my $self = shift;
    my $output_ref = shift;

    # Enclose output HTML table
    my $new_output = &#34;&#60;table border=1&#62;&#34;;
    $new_output .= &#34;&#60;tr&#62;&#60;td&#62; Hello, World! &#60;/td&#62;&#60;/tr&#62;&#34;;
    $new_output .= &#34;&#60;tr&#62;&#60;td&#62;&#34;. $$output_ref .&#34;&#60;/td&#62;&#60;/tr&#62;&#34;;
    $new_output .= &#34;&#60;/table&#62;&#34;;

    # Replace old output with new output
    $$output_ref = $new_output;
  }</pre>

<p>Obviously, with access to the CGI-App object you have full access to use all the methods normally available in a run mode. You could, for example, use <code>load_tmpl()</code> to replace the static HTML in this example with HTML::Template. You could change the HTTP headers (via <code>header_type()</code> and <code>header_props()</code> methods) to set up a redirect. You could also use the objects properties to apply changes only under certain circumstance, such as a in only certain run modes, and when a <code>param()</code> is a particular value.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="cgiapp_get_query()"
>cgiapp_get_query()</a></h3>

<pre class="sh_perl"> my $q = $webapp-&#62;cgiapp_get_query;</pre>

<p>Override this method to retrieve the query object if you wish to use a different query interface instead of CGI.pm.</p>

<p>CGI.pm is only loaded if it is used on a given request.</p>

<p>If you can use an alternative to CGI.pm, it needs to have some compatibility with the CGI.pm API. For normal use, just having a compatible <code>param</code> method should be sufficient.</p>

<p>If you use the <code>path_info</code> option to the mode_param() method, then we will call the <code>path_info()</code> method on the query object.</p>

<p>If you use the <code>Dump</code> method in CGI::Application, we will call the <code>Dump</code> and <code>escapeHTML</code> methods on the query object.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Essential_Application_Methods"
>Essential Application Methods</a></h2>

<p>The following methods are inherited from CGI::Application, and are available to be called by your application within your Application Module. They are called essential because you will use all are most of them to get any application up and running. These functions are listed in alphabetical order.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="load_tmpl()"
>load_tmpl()</a></h3>

<pre class="sh_perl">    my $tmpl_obj = $webapp-&#62;load_tmpl;
    my $tmpl_obj = $webapp-&#62;load_tmpl(&#39;some.html&#39;);
    my $tmpl_obj = $webapp-&#62;load_tmpl( \$template_content );
    my $tmpl_obj = $webapp-&#62;load_tmpl( FILEHANDLE );</pre>

<p>This method takes the name of a template file, a reference to template data or a FILEHANDLE and returns an HTML::Template object. If the filename is undefined or missing, CGI::Application will default to trying to use the current run mode name, plus the extension &#34;.html&#34;.</p>

<p>If you use the default template naming system, you should also use <a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AForward" class="podlinkpod"
>CGI::Application::Plugin::Forward</a>, which simply helps to keep the current name accurate when you pass control from one run mode to another.</p>

<p>( For integration with other template systems and automated template names, see &#34;Alternatives to load_tmpl() below. )</p>

<p>When you pass in a filename, the HTML::Template-&#62;new_file() constructor is used for create the object. When you pass in a reference to the template content, the HTML::Template-&#62;new_scalar_ref() constructor is used and when you pass in a filehandle, the HTML::Template-&#62;new_filehandle() constructor is used.</p>

<p>Refer to <a href="/perldoc?HTML%3A%3ATemplate" class="podlinkpod"
>HTML::Template</a> for specific usage of HTML::Template.</p>

<p>If tmpl_path() has been specified, load_tmpl() will set the HTML::Template <code>path</code> option to the path(s) provided. This further assists in encapsulating template usage.</p>

<p>The load_tmpl() method will pass any extra parameters sent to it directly to HTML::Template-&#62;new_file() (or new_scalar_ref() or new_filehandle()). This will allow the HTML::Template object to be further customized:</p>

<pre class="sh_perl">    my $tmpl_obj = $webapp-&#62;load_tmpl(&#39;some_other.html&#39;,
         die_on_bad_params =&#62; 0,
         cache =&#62; 1
    );</pre>

<p>Note that if you want to pass extra arguments but use the default template name, you still need to provide a name of <code>undef</code>:</p>

<pre class="sh_perl">    my $tmpl_obj = $webapp-&#62;load_tmpl(undef,
         die_on_bad_params =&#62; 0,
         cache =&#62; 1
    );</pre>

<p><b>Alternatives to load_tmpl()</b></p>

<p>If your application requires more specialized behavior than this, you can always replace it by overriding load_tmpl() by implementing your own load_tmpl() in your CGI::Application sub-class application module.</p>

<p>First, you may want to check out the template related plugins.</p>

<p><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3ATT" class="podlinkpod"
>CGI::Application::Plugin::TT</a> focuses just on Template Toolkit integration, and features pre-and-post features, singleton support and more.</p>

<p><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AStream" class="podlinkpod"
>CGI::Application::Plugin::Stream</a> can help if you want to return a stream and not a file. It features a simple syntax and MIME-type detection.</p>

<p><b>specifying the template class with html_tmpl_class()</b></p>

<p>You may specify an API-compatible alternative to <a href="/perldoc?HTML%3A%3ATemplate" class="podlinkpod"
>HTML::Template</a> by setting a new <code>html_tmpl_class()</code>:</p>

<pre class="sh_perl">  $self-&#62;html_tmpl_class(&#39;HTML::Template::Dumper&#39;);</pre>

<p>The default is &#34;HTML::Template&#34;. The alternate class should provide at least the following parts of the HTML::Template API:</p>

<pre class="sh_perl"> $t = $class-&#62;new( scalarref =&#62; ... );  # If you use scalarref templates
 $t = $class-&#62;new( filehandle =&#62; ... ); # If you use filehandle templates
 $t = $class-&#62;new( filename =&#62; ... );
 $t-&#62;param(...); </pre>

<p>Here&#39;s an example case allowing you to precisely test what&#39;s sent to your templates:</p>

<pre class="sh_perl">    $ENV{CGI_APP_RETURN_ONLY} = 1;
    my $webapp = WebApp-&#62;new;
       $webapp-&#62;html_tmpl_class(&#39;HTML::Template::Dumper&#39;); 
    my $out_str = $webapp-&#62;run;
    my $tmpl_href = eval &#34;$out_str&#34;;

    # Now Precisely test what would be set to the template
    is ($tmpl_href-&#62;{pet_name}, &#39;Daisy&#39;, &#34;Daisy is sent template&#34;);</pre>

<p>This is a powerful technique because HTML::Template::Dumper loads and considers the template file that would actually be used. If the &#39;pet_name&#39; token was missing in the template, the above test would fail. So, you are testing both your code and your templates in a much more precise way than using simple regular expressions to see if the string &#34;Daisy&#34; appeared somewhere on the page.</p>

<p><b>The load_tmpl() callback</b></p>

<p>Plugin authors will be interested to know that you can register a callback that will be executed just before load_tmpl() returns:</p>

<pre class="sh_perl">  $self-&#62;add_callback(&#39;load_tmpl&#39;,\&#38;your_method);</pre>

<p>When <code>your_method()</code> is executed, it will be passed three arguments:</p>

<pre class="sh_perl"> 1. A hash reference of the extra params passed into C&#60;load_tmpl&#62;
 2. Followed by a hash reference to template parameters. 
    With both of these, you can modify them by reference to affect 
    values that are actually passed to the new() and param() methods of the
    template object.
 3. The name of the template file.    </pre>

<p>Here&#39;s an example stub for a load_tmpl() callback:</p>

<pre class="sh_perl">    sub my_load_tmpl_callback {
        my ($c, $ht_params, $tmpl_params, $tmpl_file) = @_
        # modify $ht_params or $tmpl_params by reference...    
    }</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="param()"
>param()</a></h3>

<pre class="sh_perl">    $webapp-&#62;param(&#39;pname&#39;, $somevalue);</pre>

<p>The param() method provides a facility through which you may set application instance properties which are accessible throughout your application.</p>

<p>The param() method may be used in two basic ways. First, you may use it to get or set the value of a parameter:</p>

<pre class="sh_perl">    $webapp-&#62;param(&#39;scalar_param&#39;, &#39;123&#39;);
    my $scalar_param_values = $webapp-&#62;param(&#39;some_param&#39;);</pre>

<p>Second, when called in the context of an array, with no parameter name specified, param() returns an array containing all the parameters which currently exist:</p>

<pre class="sh_perl">    my @all_params = $webapp-&#62;param();</pre>

<p>The param() method also allows you to set a bunch of parameters at once by passing in a hash (or hashref):</p>

<pre class="sh_perl">    $webapp-&#62;param(
        &#39;key1&#39; =&#62; &#39;val1&#39;,
        &#39;key2&#39; =&#62; &#39;val2&#39;,
        &#39;key3&#39; =&#62; &#39;val3&#39;,
    );</pre>

<p>The param() method enables a very valuable system for customizing your applications on a per-instance basis. One Application Module might be instantiated by different Instance Scripts. Each Instance Script might set different values for a set of parameters. This allows similar applications to share a common code-base, but behave differently. For example, imagine a mail form application with a single Application Module, but multiple Instance Scripts. Each Instance Script might specify a different recipient. Another example would be a web bulletin boards system. There could be multiple boards, each with a different topic and set of administrators.</p>

<p>The new() method provides a shortcut for specifying a number of run-time parameters at once. Internally, CGI::Application calls the param() method to set these properties. The param() method is a powerful tool for greatly increasing your application&#39;s re-usability.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="query()"
>query()</a></h3>

<pre class="sh_perl">    my $q = $webapp-&#62;query();
    my $remote_user = $q-&#62;remote_user();</pre>

<p>This method retrieves the CGI.pm query object which has been created by instantiating your Application Module. For details on usage of this query object, refer to <a href="/perldoc?CGI" class="podlinkpod"
>CGI</a>. CGI::Application is built on the CGI module. Generally speaking, you will want to become very familiar with CGI.pm, as you will use the query object whenever you want to interact with form data.</p>

<p>When the new() method is called, a CGI query object is automatically created. If, for some reason, you want to use your own CGI query object, the new() method supports passing in your existing query object on construction using the QUERY attribute.</p>

<p>There are a few rare situations where you want your own query object to be used after your Application Module has already been constructed. In that case you can pass it to c&#60;query()&#62; like this:</p>

<pre class="sh_perl">    $webapp-&#62;query($new_query_object);
    my $q = $webapp-&#62;query(); # now uses $new_query_object</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="run_modes()"
>run_modes()</a></h3>

<pre class="sh_perl">    # The common usage: an arrayref of run mode names that exactly match subroutine names
    $webapp-&#62;run_modes([qw/
        form_display
        form_process
    /]);

   # With a hashref, use a different name or a code ref
   $webapp-&#62;run_modes(
           &#39;mode1&#39; =&#62; &#39;some_sub_by_name&#39;, 
           &#39;mode2&#39; =&#62; \&#38;some_other_sub_by_ref
    );</pre>

<p>This accessor/mutator specifies the dispatch table for the application states, using the syntax examples above. It returns the dispatch table as a hash.</p>

<p>The run_modes() method may be called more than once. Additional values passed into run_modes() will be added to the run modes table. In the case that an existing run mode is re-defined, the new value will override the existing value. This behavior might be useful for applications which are created via inheritance from another application, or some advanced application which modifies its own capabilities based on user input.</p>

<p>The run() method uses the data in this table to send the application to the correct function as determined by reading the CGI parameter specified by mode_param() (defaults to &#39;rm&#39; for &#34;Run Mode&#34;). These functions are referred to as &#34;run mode methods&#34;.</p>

<p>The hash table set by this method is expected to contain the mode name as a key. The value should be either a hard reference (a subref) to the run mode method which you want to be called when the application enters the specified run mode, or the name of the run mode method to be called:</p>

<pre class="sh_perl">    &#39;mode_name_by_ref&#39;  =&#62; \&#38;mode_function
    &#39;mode_name_by_name&#39; =&#62; &#39;mode_function&#39;</pre>

<p>The run mode method specified is expected to return a block of text (e.g.: HTML) which will eventually be sent back to the web browser. The run mode method may return its block of text as a scalar or a scalar-ref.</p>

<p>An advantage of specifying your run mode methods by name instead of by reference is that you can more easily create derivative applications using inheritance. For instance, if you have a new application which is exactly the same as an existing application with the exception of one run mode, you could simply inherit from that other application and override the run mode method which is different. If you specified your run mode method by reference, your child class would still use the function from the parent class.</p>

<p>An advantage of specifying your run mode methods by reference instead of by name is performance. Dereferencing a subref is faster than eval()-ing a code block. If run-time performance is a critical issue, specify your run mode methods by reference and not by name. The speed differences are generally small, however, so specifying by name is preferred.</p>

<p>Specifying the run modes by array reference:</p>

<pre class="sh_perl">    $webapp-&#62;run_modes([ &#39;mode1&#39;, &#39;mode2&#39;, &#39;mode3&#39; ]);</pre>

<p>Is is the same as using a hash, with keys equal to values</p>

<pre class="sh_perl">    $webapp-&#62;run_modes(
        &#39;mode1&#39; =&#62; &#39;mode1&#39;,
        &#39;mode2&#39; =&#62; &#39;mode2&#39;,
        &#39;mode3&#39; =&#62; &#39;mode3&#39;
    );</pre>

<p>Often, it makes good organizational sense to have your run modes map to methods of the same name. The array-ref interface provides a shortcut to that behavior while reducing verbosity of your code.</p>

<p>Note that another importance of specifying your run modes in either a hash or array-ref is to assure that only those Perl methods which are specifically designated may be called via your application. Application environments which don&#39;t specify allowed methods and disallow all others are insecure, potentially opening the door to allowing execution of arbitrary code. CGI::Application maintains a strict &#34;default-deny&#34; stance on all method invocation, thereby allowing secure applications to be built upon it.</p>

<p><b>IMPORTANT NOTE ABOUT RUN MODE METHODS</b></p>

<p>Your application should *NEVER* print() to STDOUT. Using print() to send output to STDOUT (including HTTP headers) is exclusively the domain of the inherited run() method. Breaking this rule is a common source of errors. If your program is erroneously sending content before your HTTP header, you are probably breaking this rule.</p>

<p><b>THE RUN MODE OF LAST RESORT: &#34;AUTOLOAD&#34;</b></p>

<p>If CGI::Application is asked to go to a run mode which doesn&#39;t exist it will usually croak() with errors. If this is not your desired behavior, it is possible to catch this exception by implementing a run mode with the reserved name &#34;AUTOLOAD&#34;:</p>

<pre class="sh_perl">  $self-&#62;run_modes(
        &#34;AUTOLOAD&#34; =&#62; \&#38;catch_my_exception
  );</pre>

<p>Before CGI::Application calls croak() it will check for the existence of a run mode called &#34;AUTOLOAD&#34;. If specified, this run mode will in invoked just like a regular run mode, with one exception: It will receive, as an argument, the name of the run mode which invoked it:</p>

<pre class="sh_perl">  sub catch_my_exception {
        my $self = shift;
        my $intended_runmode = shift;

        my $output = &#34;Looking for &#39;$intended_runmode&#39;, but found &#39;AUTOLOAD&#39; instead&#34;;
        return $output;
  }</pre>

<p>This functionality could be used for a simple human-readable error screen, or for more sophisticated application behaviors.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="start_mode()"
>start_mode()</a></h3>

<pre class="sh_perl">    $webapp-&#62;start_mode(&#39;mode1&#39;);</pre>

<p>The start_mode contains the name of the mode as specified in the run_modes() table. Default mode is &#34;start&#34;. The mode key specified here will be used whenever the value of the CGI form parameter specified by mode_param() is not defined. Generally, this is the first time your application is executed.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="tmpl_path()"
>tmpl_path()</a></h3>

<pre class="sh_perl">    $webapp-&#62;tmpl_path(&#39;/path/to/some/templates/&#39;);</pre>

<p>This access/mutator method sets the file path to the directory (or directories) where the templates are stored. It is used by load_tmpl() to find the template files, using HTML::Template&#39;s <code>path</code> option. To set the path you can either pass in a text scalar or an array reference of multiple paths.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="More_Application_Methods"
>More Application Methods</a></h2>

<p>You can skip this section if you are just getting started.</p>

<p>The following additional methods are inherited from CGI::Application, and are available to be called by your application within your Application Module. These functions are listed in alphabetical order.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="delete()"
>delete()</a></h3>

<pre class="sh_perl">    $webapp-&#62;delete(&#39;my_param&#39;);</pre>

<p>The delete() method is used to delete a parameter that was previously stored inside of your application either by using the PARAMS hash that was passed in your call to new() or by a call to the param() method. This is similar to the delete() method of CGI.pm. It is useful if your application makes decisions based on the existence of certain params that may have been removed in previous sections of your app or simply to clean-up your param()s.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="dump()"
>dump()</a></h3>

<pre class="sh_perl">    print STDERR $webapp-&#62;dump();</pre>

<p>The dump() method is a debugging function which will return a chunk of text which contains all the environment and web form data of the request, formatted nicely for human readability. Useful for outputting to STDERR.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="dump_html()"
>dump_html()</a></h3>

<pre class="sh_perl">    my $output = $webapp-&#62;dump_html();</pre>

<p>The dump_html() method is a debugging function which will return a chunk of text which contains all the environment and web form data of the request, formatted nicely for human readability via a web browser. Useful for outputting to a browser.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="error_mode()"
>error_mode()</a></h3>

<pre class="sh_perl">    $webapp-&#62;error_mode(&#39;my_error_rm&#39;);</pre>

<p>If the runmode dies for whatever reason, <code>run() will</code> see if you have set a value for <code>error_mode()</code>. If you have, <code>run()</code> will call that method as a run mode, passing $@ as the only parameter.</p>

<p>Plugins authors will be interested to know that just before <code>error_mode()</code> is called, the <code>error</code> hook will be executed, with the error message passed in as the only parameter.</p>

<p>No <code>error_mode</code> is defined by default. The death of your <code>error_mode()</code> run mode is not trapped, so you can also use it to die in your own special way.</p>

<p>For a complete integrated logging solution, check out <a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3ALogDispatch" class="podlinkpod"
>CGI::Application::Plugin::LogDispatch</a>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="get_current_runmode()"
>get_current_runmode()</a></h3>

<pre class="sh_perl">    $webapp-&#62;get_current_runmode();</pre>

<p>The <code>get_current_runmode()</code> method will return a text scalar containing the name of the run mode which is currently being executed. If the run mode has not yet been determined, such as during setup(), this method will return undef.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="header_add()"
>header_add()</a></h3>

<pre class="sh_perl">    # add or replace the &#39;type&#39; header
    $webapp-&#62;header_add( -type =&#62; &#39;image/png&#39; );

    - or -

    # add an additional cookie
    $webapp-&#62;header_add(-cookie=&#62;[$extra_cookie]);</pre>

<p>The <code>header_add()</code> method is used to add one or more headers to the outgoing response headers. The parameters will eventually be passed on to the CGI.pm header() method, so refer to the <a href="/perldoc?CGI" class="podlinkpod"
>CGI</a> docs for exact usage details.</p>

<p>Unlike calling <code>header_props()</code>, <code>header_add()</code> will preserve any existing headers. If a scalar value is passed to <code>header_add()</code> it will replace the existing value for that key.</p>

<p>If an array reference is passed as a value to <code>header_add()</code>, values in that array ref will be appended to any existing values values for that key. This is primarily useful for setting an additional cookie after one has already been set.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="header_props()"
>header_props()</a></h3>

<pre class="sh_perl">    # Set a complete set of headers
    %set_headers = $webapp-&#62;header_props(-type=&#62;&#39;image/gif&#39;,-expires=&#62;&#39;+3d&#39;);

    # clobber / reset all headers
    %set_headers = $webapp-&#62;header_props({});

    # Just retrieve the headers 
    %set_headers = $webapp-&#62;header_props(); </pre>

<p>The <code>header_props()</code> method expects a hash of CGI.pm-compatible HTTP header properties. These properties will be passed directly to the <code>header()</code> or <code>redirect()</code> methods of the query() object. Refer to the docs of your query object for details. (Be default, it&#39;s <a href="/perldoc?CGI" class="podlinkpod"
>CGI</a>.pm).</p>

<p>Calling header_props with an empty hashref clobber any existing headers that have previously set.</p>

<p><code>header_props()</code> returns a hash of all the headers that have currently been set. It can be called with no arguments just to get the hash current headers back.</p>

<p>To add additional headers later without clobbering the old ones, see <code>header_add()</code>.</p>

<p><b>IMPORTANT NOTE REGARDING HTTP HEADERS</b></p>

<p>It is through the <code>header_props()</code> and <code>header_add()</code> method that you may modify the outgoing HTTP headers. This is necessary when you want to set a cookie, set the mime type to something other than &#34;text/html&#34;, or perform a redirect. The header_props() method works in conjunction with the header_type() method. The value contained in header_type() determines if we use CGI::header() or CGI::redirect(). The content of header_props() is passed as an argument to whichever CGI.pm function is called.</p>

<p>Understanding this relationship is important if you wish to manipulate the HTTP header properly.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="header_type()"
>header_type()</a></h3>

<pre class="sh_perl">    $webapp-&#62;header_type(&#39;redirect&#39;);
    $webapp-&#62;header_type(&#39;none&#39;);</pre>

<p>This method used to declare that you are setting a redirection header, or that you want no header to be returned by the framework.</p>

<p>The value of &#39;header&#39; is almost never used, as it is the default.</p>

<p><b>Example of redirecting</b>:</p>

<pre class="sh_perl">  sub some_redirect_mode {
    my $self = shift;
    # do stuff here.... 
    $self-&#62;header_type(&#39;redirect&#39;);
    $self-&#62;header_props(-url=&#62;  &#34;<a href="http://site/path/doc.html" class="podlinkurl"
>http://site/path/doc.html</a>&#34; );
  }</pre>

<p>To simplify that further, use <a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3ARedirect" class="podlinkpod"
>CGI::Application::Plugin::Redirect</a>:</p>

<pre class="sh_perl">    return $self-&#62;redirect(&#39;<a href="http://www.example.com/" class="podlinkurl"
>http://www.example.com/</a>&#39;);</pre>

<p>Setting the header to &#39;none&#39; may be useful if you are streaming content. In other contexts, it may be more useful to set <code>$ENV{CGI_APP_RETURN_ONLY} = 1;</code>, which supresses all printing, including headers, and returns the output instead.</p>

<p>That&#39;s commonly used for testing, or when using <a href="/~markstos/CGI-Application-4.50/lib/CGI/Application.pm" class="podlinkpod"
>CGI::Application</a> as a controller for a cron script!</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="mode_param()"
>mode_param()</a></h3>

<pre class="sh_perl"> # Name the CGI form parameter that contains the run mode name.
 # This is the the default behavior, and is often sufficient.
 $webapp-&#62;mode_param(&#39;rm&#39;);

 # Set the run mode name directly from a code ref
 $webapp-&#62;mode_param(\&#38;some_method);

 # Alternate interface, which allows you to set the run
 # mode name directly from $ENV{PATH_INFO}.
 $webapp-&#62;mode_param(
        path_info=&#62; 1,
        param =&#62;&#39;rm&#39;
 );</pre>

<p>This accessor/mutator method is generally called in the setup() method. It is used to help determine the run mode to call. There are three options for calling it.</p>

<pre class="sh_perl"> $webapp-&#62;mode_param(&#39;rm&#39;);</pre>

<p>Here, a CGI form parameter is named that will contain the name of the run mode to use. This is the default behavior, with &#39;rm&#39; being the parameter named used.</p>

<pre class="sh_perl"> $webapp-&#62;mode_param(\&#38;some_method);</pre>

<p>Here a code reference is provided. It will return the name of the run mode to use directly. Example:</p>

<pre class="sh_perl"> sub some_method {
   my $self = shift;
   return &#39;run_mode_x&#39;;
 }</pre>

<p>This would allow you to programmatically set the run mode based on arbitrary logic.</p>

<pre class="sh_perl"> $webapp-&#62;mode_param(
        path_info=&#62; 1,
        param =&#62;&#39;rm&#39;
 );</pre>

<p>This syntax allows you to easily set the run mode from $ENV{PATH_INFO}. It will try to set the run mode from the first part of $ENV{PATH_INFO} (before the first &#34;/&#34;). To specify that you would rather get the run mode name from the 2nd part of $ENV{PATH_INFO}:</p>

<pre class="sh_perl"> $webapp-&#62;mode_param( path_info=&#62; 2 );</pre>

<p>This also demonstrates that you don&#39;t need to pass in the <code>param</code> hash key. It will still default to <code>rm</code>.</p>

<p>You can also set <code>path_info</code> to a negative value. This works just like a negative list index: if it is -1 the run mode name will be taken from the last part of $ENV{PATH_INFO}, if it is -2, the one before that, and so on.</p>

<p>If no run mode is found in $ENV{PATH_INFO}, it will fall back to looking in the value of a the CGI form field defined with &#39;param&#39;, as described above. This allows you to use the convenient $ENV{PATH_INFO} trick most of the time, but also supports the edge cases, such as when you don&#39;t know what the run mode will be ahead of time and want to define it with JavaScript.</p>

<p><b>More about $ENV{PATH_INFO}</b>.</p>

<p>Using $ENV{PATH_INFO} to name your run mode creates a clean separation between the form variables you submit and how you determine the processing run mode. It also creates URLs that are more search engine friendly. Let&#39;s look at an example form submission using this syntax:</p>

<pre class="sh_perl">        &#60;form action=&#34;/cgi-bin/instance.cgi/edit_form&#34; method=post&#62;
                &#60;input type=&#34;hidden&#34; name=&#34;breed_id&#34; value=&#34;4&#34;&#62;</pre>

<p>Here the run mode would be set to &#34;edit_form&#34;. Here&#39;s another example with a query string:</p>

<pre class="sh_perl">        /cgi-bin/instance.cgi/edit_form?breed_id=2</pre>

<p>This demonstrates that you can use $ENV{PATH_INFO} and a query string together without problems. $ENV{PATH_INFO} is defined as part of the CGI specification should be supported by any web server that supports CGI scripts.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="prerun_mode()"
>prerun_mode()</a></h3>

<pre class="sh_perl">    $webapp-&#62;prerun_mode(&#39;new_run_mode&#39;);</pre>

<p>The prerun_mode() method is an accessor/mutator which can be used within your cgiapp_prerun() method to change the run mode which is about to be executed. For example, consider:</p>

<pre class="sh_perl">  # In WebApp.pm:
  package WebApp;
  use base &#39;CGI::Application&#39;;
  sub cgiapp_prerun {
        my $self = shift;

        # Get the web user name, if any
        my $q = $self-&#62;query();
        my $user = $q-&#62;remote_user();

        # Redirect to login, if necessary
        unless ($user) {
                $self-&#62;prerun_mode(&#39;login&#39;);
        }
  }</pre>

<p>In this example, the web user will be forced into the &#34;login&#34; run mode unless they have already logged in. The prerun_mode() method permits a scalar text string to be set which overrides whatever the run mode would otherwise be.</p>

<p>The use of prerun_mode() within cgiapp_prerun() differs from setting mode_param() to use a call-back via subroutine reference. It differs because cgiapp_prerun() allows you to selectively set the run mode based on some logic in your cgiapp_prerun() method. The call-back facility of mode_param() forces you to entirely replace CGI::Application&#39;s mechanism for determining the run mode with your own method. The prerun_mode() method should be used in cases where you want to use CGI::Application&#39;s normal run mode switching facility, but you want to make selective changes to the mode under specific conditions.</p>

<p><b>Note:</b> The prerun_mode() method may ONLY be called in the context of a cgiapp_prerun() method. Your application will die() if you call prerun_mode() elsewhere, such as in setup() or a run mode method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Dispatching_Clean_URIs_to_run_modes"
>Dispatching Clean URIs to run modes</a></h2>

<p>Modern web frameworks dispense with cruft in URIs, providing in clean URIs instead. Instead of:</p>

<pre class="sh_perl"> /cgi-bin/item.cgi?rm=view&#38;id=15</pre>

<p>A clean URI to describe the same resource might be:</p>

<pre class="sh_perl"> /item/15/view</pre>

<p>The process of mapping these URIs to run modes is called dispatching and is handled by <a href="/perldoc?CGI%3A%3AApplication%3A%3ADispatch" class="podlinkpod"
>CGI::Application::Dispatch</a>. Dispatching is not required and is a layer you can fairly easily add to an application later.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Offline_website_development"
>Offline website development</a></h2>

<p>You can work on your CGI::Application project on your desktop or laptop without installing a full-featured web-server like Apache. Instead, install <a href="/perldoc?CGI%3A%3AApplication%3A%3AServer" class="podlinkpod"
>CGI::Application::Server</a> from CPAN. After a few minutes of setup, you&#39;ll have your own private application server up and running.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Automated_Testing"
>Automated Testing</a></h2>

<p>There a couple of testing modules specifically made for CGI::Application.</p>

<p><a href="/perldoc?Test%3A%3AWWW%3A%3AMechanize%3A%3ACGIApp" class="podlinkpod"
>Test::WWW::Mechanize::CGIApp</a> allows functional testing of a CGI::App-based project without starting a web server. <a href="/perldoc?Test%3A%3AWWW%3A%3AMechanize" class="podlinkpod"
>Test::WWW::Mechanize</a> could be used to test the app through a real web server.</p>

<p><a href="/perldoc?Test%3A%3AWWW%3A%3ASelenium%3A%3ACGIApp" class="podlinkpod"
>Test::WWW::Selenium::CGIApp</a> is similar, but uses Selenium for the testing, meaning that a local web-browser would be used, allowing testing of websites that contain JavaScript.</p>

<p>Direct testing is also easy. CGI::Application will normally print the output of it&#39;s run modes directly to STDOUT. This can be suppressed with an enviroment variable, CGI_APP_RETURN_ONLY. For example:</p>

<pre class="sh_perl">  $ENV{CGI_APP_RETURN_ONLY} = 1;
  $output = $webapp-&#62;run();
  like($output, qr/good/, &#34;output is good&#34;);</pre>

<p>Examples of this style can be seen in our own test suite.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PLUG-INS"
>PLUG-INS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>CGI::Application has a plug-in architecture that is easy to use and easy to develop new plug-ins for.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Recommended_Plug-ins"
>Recommended Plug-ins</a></h2>

<p>The following plugins are recommended for general purpose web/db development:</p>

<ul>
<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3ARedirect" class="podlinkpod"
>CGI::Application::Plugin::Redirect</a> - is a simple plugin to provide a shorter syntax for executing a redirect.</li>

<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AConfigAuto" class="podlinkpod"
>CGI::Application::Plugin::ConfigAuto</a> - Keeping your config details in a separate file is recommended for every project. This one integrates with <a href="/perldoc?Config%3A%3AAuto" class="podlinkpod"
>Config::Auto</a>. Several more config plugin options are listed below.</li>

<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3ADBH" class="podlinkpod"
>CGI::Application::Plugin::DBH</a> - Provides easy management of one or more database handles and can delay making the database connection until the moment it is actually used.</li>

<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AFillInForm" class="podlinkpod"
>CGI::Application::Plugin::FillInForm</a> - makes it a breeze to fill in an HTML form from data originating from a CGI query or a database record.</li>

<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3ASession" class="podlinkpod"
>CGI::Application::Plugin::Session</a> - For a project that requires session management, this plugin provides a useful wrapper around <a href="/perldoc?CGI%3A%3ASession" class="podlinkpod"
>CGI::Session</a></li>

<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AValidateRM" class="podlinkpod"
>CGI::Application::Plugin::ValidateRM</a> - Integration with Data::FormValidator and HTML::FillInForm</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="More_plug-ins"
>More plug-ins</a></h2>

<p>Many more plugins are available as alternatives and for specific uses. For a current complete list, please consult CPAN:</p>

<p><a href="http://search.cpan.org/search?m=dist&#38;q=CGI%2DApplication%2DPlugin" class="podlinkurl"
>http://search.cpan.org/search?m=dist&#38;q=CGI%2DApplication%2DPlugin</a></p>

<ul>
<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AAnyTemplate" class="podlinkpod"
>CGI::Application::Plugin::AnyTemplate</a> - Use any templating system from within CGI::Application using a unified interface</li>

<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AApache" class="podlinkpod"
>CGI::Application::Plugin::Apache</a> - Use Apache::* modules without interference</li>

<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AAutoRunmode" class="podlinkpod"
>CGI::Application::Plugin::AutoRunmode</a> - Automatically register runmodes</li>

<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AConfig%3A%3AContext" class="podlinkpod"
>CGI::Application::Plugin::Config::Context</a> - Integration with <a href="/perldoc?Config%3A%3AContext" class="podlinkpod"
>Config::Context</a>.</li>

<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AConfig%3A%3AGeneral" class="podlinkpod"
>CGI::Application::Plugin::Config::General</a> - Integration with <a href="/perldoc?Config%3A%3AGeneral" class="podlinkpod"
>Config::General</a>.</li>

<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AConfig%3A%3ASimple" class="podlinkpod"
>CGI::Application::Plugin::Config::Simple</a> - Integration with <a href="/perldoc?Config%3A%3ASimple" class="podlinkpod"
>Config::Simple</a>.</li>

<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3ACompressGzip" class="podlinkpod"
>CGI::Application::Plugin::CompressGzip</a> - Add Gzip compression</li>

<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3ALogDispatch" class="podlinkpod"
>CGI::Application::Plugin::LogDispatch</a> - Integration with <a href="/perldoc?Log%3A%3ADispatch" class="podlinkpod"
>Log::Dispatch</a></li>

<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AStream" class="podlinkpod"
>CGI::Application::Plugin::Stream</a> - Help stream files to the browser</li>

<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3ATemplateRunner" class="podlinkpod"
>CGI::Application::Plugin::TemplateRunner</a> - Allows for more of an ASP-style code structure, with the difference that code and HTML for each screen are in separate files.</li>

<li><a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3ATT" class="podlinkpod"
>CGI::Application::Plugin::TT</a> - Use <a href="/perldoc?Template%3A%3AToolkit" class="podlinkpod"
>Template::Toolkit</a> as an alternative to HTML::Template.</li>
</ul>

<p>Consult each plug-in for the exact usage syntax.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Writing_Plug-ins"
>Writing Plug-ins</a></h2>

<p>Writing plug-ins is simple. Simply create a new package, and export the methods that you want to become part of a CGI::Application project. See <a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3AValidateRM" class="podlinkpod"
>CGI::Application::Plugin::ValidateRM</a> for an example.</p>

<p>In order to avoid namespace conflicts within a CGI::Application object, plugin developers are recommended to use a unique prefix, such as the name of plugin package, when storing information. For instance:</p>

<pre class="sh_perl"> $app-&#62;{__PARAM} = &#39;foo&#39;; # BAD! Could conflict.
 $app-&#62;{&#39;MyPlugin::Module::__PARAM&#39;} = &#39;foo&#39;; # Good.
 $app-&#62;{&#39;MyPlugin::Module&#39;}{__PARAM} = &#39;foo&#39;; # Good.</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Writing_Advanced_Plug-ins_-_Using_callbacks"
>Writing Advanced Plug-ins - Using callbacks</a></h2>

<p>When writing a plug-in, you may want some action to happen automatically at a particular stage, such as setting up a database connection or initializing a session. By using these &#39;callback&#39; methods, you can register a subroutine to run at a particular phase, accomplishing this goal.</p>

<p><b>Callback Examples</b></p>

<pre class="sh_perl">  # register a callback to the standard CGI::Application hooks
  #   one of &#39;init&#39;, &#39;prerun&#39;, &#39;postrun&#39;, &#39;teardown&#39; or &#39;load_tmpl&#39;
  # As a plug-in author, this is probably the only method you need.

  # Class-based: callback will persist for all runs of the application
  $class-&#62;add_callback(&#39;init&#39;, \&#38;some_other_method);

  # Object-based: callback will only last for lifetime of this object
  $self-&#62;add_callback(&#39;prerun&#39;, \&#38;some_method);

  # If you want to create a new hook location in your application,
  # You&#39;ll need to know about the following two methods to create
  # the hook and call it.

  # Create a new hook
  $self-&#62;new_hook(&#39;pretemplate&#39;);

  # Then later execute all the callbacks registered at this hook
  $self-&#62;call_hook(&#39;pretemplate&#39;);</pre>

<p><b>Callback Methods</b></p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="add_callback()"
>add_callback()</a></h3>

<pre class="sh_perl">        $self-&#62;add_callback (&#39;teardown&#39;, \&#38;callback);
        $class-&#62;add_callback(&#39;teardown&#39;, &#39;method&#39;);</pre>

<p>The add_callback method allows you to register a callback function that is to be called at the given stage of execution. Valid hooks include &#39;init&#39;, &#39;prerun&#39;, &#39;postrun&#39; and &#39;teardown&#39;, &#39;load_tmpl&#39;, and any other hooks defined using the <code>new_hook</code> method.</p>

<p>The callback should be a reference to a subroutine or the name of a method.</p>

<p>If multiple callbacks are added to the same hook, they will all be executed one after the other. The exact order depends on which class installed each callback, as described below under <b>Callback Ordering</b>.</p>

<p>Callbacks can either be <i>object-based</i> or <i>class-based</i>, depending upon whether you call <code>add_callback</code> as an object method or a class method:</p>

<pre class="sh_perl">        # add object-based callback
        $self-&#62;add_callback(&#39;teardown&#39;, \&#38;callback);

        # add class-based callbacks
        $class-&#62;add_callback(&#39;teardown&#39;, \&#38;callback);
        My::Project-&#62;add_callback(&#39;teardown&#39;, \&#38;callback);</pre>

<p>Object-based callbacks are stored in your web application&#39;s <code>$c</code> object; at the end of the request when the <code>$c</code> object goes out of scope, the callbacks are gone too.</p>

<p>Object-based callbacks are useful for one-time tasks that apply only to the current running application. For instance you could install a <code>teardown</code> callback to trigger a long-running process to execute at the end of the current request, after all the HTML has been sent to the browser.</p>

<p>Class-based callbacks survive for the duration of the running Perl process. (In a persistent environment such as <code>mod_perl</code> or <code>PersistentPerl</code>, a single Perl process can serve many web requests.)</p>

<p>Class-based callbacks are useful for plugins to add features to all web applications.</p>

<p>Another feature of class-based callbacks is that your plugin can create hooks and add callbacks at any time - even before the web application&#39;s <code>$c</code> object has been initialized. A good place to do this is in your plugin&#39;s <code>import</code> subroutine:</p>

<pre class="sh_perl">        package CGI::Application::Plugin::MyPlugin;
        use base &#39;Exporter&#39;;
        sub import {
                my $caller = scalar(caller);
                $caller-&#62;add_callback(&#39;init&#39;, &#39;my_setup&#39;);
                goto &#38;Exporter::import;
        }</pre>

<p>Notice that <code>$caller-&#62;add_callback</code> installs the callback on behalf of the module that contained the line:</p>

<pre class="sh_perl">        use CGI::Application::Plugin::MyPlugin;</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="new_hook(HOOK)"
>new_hook(HOOK)</a></h3>

<pre class="sh_perl">    $self-&#62;new_hook(&#39;pretemplate&#39;);</pre>

<p>The <code>new_hook()</code> method can be used to create a new location for developers to register callbacks. It takes one argument, a hook name. The hook location is created if it does not already exist. A true value is always returned.</p>

<p>For an example, <a href="/perldoc?CGI%3A%3AApplication%3A%3APlugin%3A%3ATT" class="podlinkpod"
>CGI::Application::Plugin::TT</a> adds hooks before and after every template is processed.</p>

<p>See <code>call_hook(HOOK)</code> for more details about how hooks are called.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="call_hook(HOOK)"
>call_hook(HOOK)</a></h3>

<pre class="sh_perl">    $self-&#62;call_hook(&#39;pretemplate&#39;, @args);</pre>

<p>The <code>call_hook</code> method is used to executed the callbacks that have been registered at the given hook. It is used in conjunction with the <code>new_hook</code> method which allows you to create a new hook location.</p>

<p>The first argument to <code>call_hook</code> is the hook name. Any remaining arguments are passed to every callback executed at the hook location. So, a stub for a callback at the &#39;pretemplate&#39; hook would look like this:</p>

<pre class="sh_perl"> sub my_hook {
    my ($c,@args) = @_;
    # ....
 }</pre>

<p>Note that hooks are semi-public locations. Calling a hook means executing callbacks that were registered to that hook by the current object and also those registered by any of the current object&#39;s parent classes. See below for the exact ordering.</p>

<p><b>Callback Ordering</b></p>

<p>Object-based callbacks are run before class-based callbacks.</p>

<p>The order of class-based callbacks is determined by the inheritance tree of the running application. The built-in methods of <code>cgiapp_init</code>, <code>cgiapp_prerun</code>, <code>cgiapp_postrun</code>, and <code>teardown</code> are also executed this way, according to the ordering below.</p>

<p>In a persistent environment, there might be a lot of applications in memory at the same time. For instance:</p>

<pre class="sh_perl">        CGI::Application
          Other::Project   # uses CGI::Application::Plugin::Baz
                 Other::App    # uses CGI::Application::Plugin::Bam

          My::Project      # uses CGI::Application::Plugin::Foo
                 My::App       # uses CGI::Application::Plugin::Bar</pre>

<p>Suppose that each of the above plugins each added a callback to be run at the &#39;init&#39; stage:</p>

<pre class="sh_perl">        Plugin                           init callback
        ------                           -------------
        CGI::Application::Plugin::Baz    baz_startup
        CGI::Application::Plugin::Bam    bam_startup

        CGI::Application::Plugin::Foo    foo_startup
        CGI::Application::Plugin::Bar    bar_startup</pre>

<p>When <code>My::App</code> runs, only <code>foo_callback</code> and <code>bar_callback</code> will run. The other callbacks are skipped.</p>

<p>The <code>@ISA</code> list of <code>My::App</code> is:</p>

<pre class="sh_perl">        My::App
        My::Project
        CGI::Application</pre>

<p>This order determines the order of callbacks run.</p>

<p>When <code>call_hook(&#39;init&#39;)</code> is run on a <code>My::App</code> application, callbacks installed by these modules are run in order, resulting in: <code>bar_startup</code>, <code>foo_startup</code>, and then finally <code>cgiapp_init</code>.</p>

<p>If a single class installs more than one callback at the same hook, then these callbacks are run in the order they were registered (FIFO).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COMMUNITY"
>COMMUNITY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Therese are primary resources available for those who wish to learn more about CGI::Application and discuss it with others.</p>

<p><b>Wiki</b></p>

<p>This is a community built and maintained resource that anyone is welcome to contribute to. It contains a number of articles of its own and links to many other CGI::Application related pages:</p>

<p><a href="http://www.cgi-app.org" class="podlinkurl"
>http://www.cgi-app.org</a></p>

<p><b>Support Mailing List</b></p>

<p>If you have any questions, comments, bug reports or feature suggestions, post them to the support mailing list! To join the mailing list, simply send a blank message to &#34;cgiapp-subscribe@lists.erlbaum.net&#34;.</p>

<p><b>IRC</b></p>

<p>You can also drop by <code>#cgiapp</code> on <code>irc.perl.org</code> with a good chance of finding some people involved with the project there.</p>

<p><b>Source Code</b></p>

<p>This project is managed using git and is available on Github:</p>

<pre class="sh_perl">    <a href="https://github.com/markstos/CGI--Application" class="podlinkurl"
>https://github.com/markstos/CGI--Application</a></pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name="o"
>o</a></dt>

<dd>
<p><a href="/perldoc?CGI" class="podlinkpod"
>CGI</a></p>

<dt><a name="o"
>o</a></dt>

<dd>
<p><a href="/perldoc?HTML%3A%3ATemplate" class="podlinkpod"
>HTML::Template</a></p>

<dt><a name="o"
>o</a></dt>

<dd>
<p><b><a href="/perldoc?CGI%3A%3AApplication%3A%3AFramework" class="podlinkpod"
>CGI::Application::Framework</a></b> - A full-featured web application based on <a href="/~markstos/CGI-Application-4.50/lib/CGI/Application.pm" class="podlinkpod"
>CGI::Application</a>. <a href="http://www.cafweb.org/" class="podlinkurl"
>http://www.cafweb.org/</a></p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MORE_READING"
>MORE READING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you&#39;re interested in finding out more about CGI::Application, the following articles are available on Perl.com:</p>

<pre class="sh_perl">    Using CGI::Application
    <a href="http://www.perl.com/pub/a/2001/06/05/cgi.html" class="podlinkurl"
>http://www.perl.com/pub/a/2001/06/05/cgi.html</a>

    Rapid Website Development with CGI::Application
    <a href="http://www.perl.com/pub/a/2006/10/19/cgi_application.html" class="podlinkurl"
>http://www.perl.com/pub/a/2006/10/19/cgi_application.html</a></pre>

<p>Thanks to O&#39;Reilly for publishing these articles, and for the incredible value they provide to the Perl community!</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Jesse Erlbaum &#60;jesse@erlbaum.net&#62;</p>

<p>Mark Stosberg has served as a co-maintainer since version 3.2, with the help of the numerous contributors documented in the Changes file.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CREDITS"
>CREDITS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>CGI::Application was originally developed by The Erlbaum Group, a software engineering and consulting firm in New York City.</p>

<p>Thanks to Vanguard Media (<a href="http://www.vm.com" class="podlinkurl"
>http://www.vm.com</a>) for funding the initial development of this library and for encouraging Jesse Erlbaum to release it to the world.</p>

<p>Many thanks to Sam Tregar (author of the most excellent HTML::Template module!) for his innumerable contributions to this module over the years, and most of all for getting me off my ass to finally get this thing up on CPAN!</p>

<p>Many other people have contributed specific suggestions or patches, which are documented in the <code>Changes</code> file.</p>

<p>Thanks also to all the members of the CGI-App mailing list! Your ideas, suggestions, insights (and criticism!) have helped shape this module immeasurably. (To join the mailing list, simply send a blank message to &#34;cgiapp-subscribe@lists.erlbaum.net&#34;.)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE"
>LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>CGI::Application : Framework for building reusable web-applications Copyright (C) 2000-2003 Jesse Erlbaum &#60;jesse@erlbaum.net&#62;</p>

<p>This module is free software; you can redistribute it and/or modify it under the terms of either:</p>

<p>a) the GNU General Public License as published by the Free Software Foundation; either version 1, or (at your option) any later version,</p>

<p>or</p>

<p>b) the &#34;Artistic License&#34; which comes with this module.</p>

<p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See either the GNU General Public License or the Artistic License for more details.</p>

<p>You should have received a copy of the Artistic License with this module, in the file ARTISTIC. If not, I&#39;ll be glad to provide one.</p>

<p>You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78064 Uploads, 24686 Distributions
105893 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sun Apr 22 01:24:17 2012 GMT (0.205460071563721) @cpansearch1 -->
 </body>
</html>
