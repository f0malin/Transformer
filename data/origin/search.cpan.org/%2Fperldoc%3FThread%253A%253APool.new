<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Thread::Pool - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Thread-Pool",3]);
    _gaq.push(["_setCustomVar",5,"Release","Thread-Pool-0.33",3]);
    _gaq.push(["_setCustomVar",3,"Module","Thread::Pool",3]);
    _gaq.push(["_setCustomVar",1,"Author","ELIZABETH",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Thread::Pool">permalink</a></div>
  <a href="/~elizabeth/">Elizabeth Mattijsen</a> &gt;
  <a href="/~elizabeth/Thread-Pool-0.33/">Thread-Pool-0.33</a> &gt;
  Thread::Pool
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/f6f8083d758244cb1b1df1997adc1791?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/E/EL/ELIZABETH/Thread-Pool-0.33.tar.gz">Thread-Pool-0.33.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Thread%3A%3APool;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~ELIZABETH/Thread-Pool-0.33/lib/Thread/Pool.pm">Annotate this POD
(3)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?LWP%3A%3AUserAgent">LWP::UserAgent</a><br>
<a href="/perldoc?Thread%3A%3AQueue">Thread::Queue</a><br>
<a href="/perldoc?Net%3A%3ASNMP">Net::SNMP</a><br>
<a href="/perldoc?HTML%3A%3ALinkExtor">HTML::LinkExtor</a><br>
<a href="/perldoc?Net%3A%3ASSH%3A%3APerl">Net::SSH::Perl</a><br>
<a href="/perldoc?IPC%3A%3AOpen2">IPC::Open2</a><br>
<a href="/perldoc?Thread%3A%3ASignal">Thread::Signal</a><br>
<a href="/perldoc?Net%3A%3ADNS">Net::DNS</a><br>
<a href="/perldoc?LWP%3A%3AParallel">LWP::Parallel</a><br>
<a href="/perldoc?URI%3A%3AURL">URI::URL</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Thread%3A%3APool">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 2</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Thread-Pool">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.33 &nbsp;
<span class="noprint">
  <a href="/src/ELIZABETH/Thread-Pool-0.33/lib/Thread/Pool.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#CLASS_METHODS'>CLASS METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#new'>new</a>
    <li class='indexItem indexItem2'><a href='#frequency'>frequency</a>
    <li class='indexItem indexItem2'><a href='#optimize'>optimize</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#POOL_METHODS'>POOL METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#job'>job</a>
    <li class='indexItem indexItem2'><a href='#waitfor'>waitfor</a>
    <li class='indexItem indexItem2'><a href='#result'>result</a>
    <li class='indexItem indexItem2'><a href='#result_any'>result_any</a>
    <li class='indexItem indexItem2'><a href='#result_dontwait'>result_dontwait</a>
    <li class='indexItem indexItem2'><a href='#todo'>todo</a>
    <li class='indexItem indexItem2'><a href='#results'>results</a>
    <li class='indexItem indexItem2'><a href='#add'>add</a>
    <li class='indexItem indexItem2'><a href='#remove'>remove</a>
    <li class='indexItem indexItem2'><a href='#workers'>workers</a>
    <li class='indexItem indexItem2'><a href='#frequency'>frequency</a>
    <li class='indexItem indexItem2'><a href='#maxjobs'>maxjobs</a>
    <li class='indexItem indexItem2'><a href='#minjobs'>minjobs</a>
    <li class='indexItem indexItem2'><a href='#join'>join</a>
    <li class='indexItem indexItem2'><a href='#removed'>removed</a>
    <li class='indexItem indexItem2'><a href='#autoshutdown'>autoshutdown</a>
    <li class='indexItem indexItem2'><a href='#shutdown'>shutdown</a>
    <li class='indexItem indexItem2'><a href='#abort'>abort</a>
    <li class='indexItem indexItem2'><a href='#done'>done</a>
    <li class='indexItem indexItem2'><a href='#notused'>notused</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#INSIDE_JOB_METHODS'>INSIDE JOB METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#self'>self</a>
    <li class='indexItem indexItem2'><a href='#monitor'>monitor</a>
    <li class='indexItem indexItem2'><a href='#remove_me'>remove_me</a>
    <li class='indexItem indexItem2'><a href='#jobid'>jobid</a>
    <li class='indexItem indexItem2'><a href='#dont_set_result'>dont_set_result</a>
    <li class='indexItem indexItem2'><a href='#set_result'>set_result</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#REQUIRED_MODULES'>REQUIRED MODULES</a>
  <li class='indexItem indexItem1'><a href='#OPTIMIZATIONS'>OPTIMIZATIONS</a>
  <li class='indexItem indexItem1'><a href='#CAVEATS'>CAVEATS</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#simple_asynchronous_log_file_resolving_filter'>simple asynchronous log file resolving filter</a>
    <li class='indexItem indexItem2'><a href='#another_asynchronous_log_file_resolving_filter'>another asynchronous log file resolving filter</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Thread::Pool - group of threads for performing similar jobs</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This documentation describes version 0.33.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> use Thread::Pool;
 $pool = Thread::Pool-&#62;new(
  {
   optimize =&#62; &#39;cpu&#39;, # default: &#39;memory&#39;

   pre =&#62; sub {shift; print &#34;starting worker with @_\n&#34;,
   do =&#62; sub {shift; print &#34;doing job for @_\n&#34;; reverse @_},
   post =&#62; sub {shift; print &#34;stopping worker with @_\n&#34;,

   stream =&#62; sub {shift; print &#34;streamline with @_\n&#34;,

   monitor =&#62; sub { print &#34;monitor with @_\n&#34;,
   pre_post_monitor_only =&#62; 0, # default: 0 = also for &#34;do&#34;

   checkpoint =&#62; sub { print &#34;checkpointing\n&#34; },
   frequency =&#62; 1000,

   autoshutdown =&#62; 1, # default: 1 = yes

   workers =&#62; 10,     # default: 1
   maxjobs =&#62; 50,     # default: 5 * workers
   minjobs =&#62; 5,      # default: maxjobs / 2
  },
  qw(a b c)           # parameters to &#34;pre&#34; and &#34;post&#34; routine
 );

 $pool-&#62;job( qw(d e f) );              # not interested in result

 $jobid = $pool-&#62;job( qw(g h i) );
 @result = $pool-&#62;result( $jobid );    # wait for result to be ready

 $jobid = $pool-&#62;job( qw(j k l) );
 @result = $pool-&#62;result_dontwait( $jobid ); # do _not_ wait for result

 @result = $pool-&#62;waitfor( qw(m n o) ); # submit and wait for result

 $pool-&#62;add;           # add worker(s)
 $pool-&#62;remove;        # remove worker(s)
 $pool-&#62;workers( 10 ); # adapt number of workers
 $pool-&#62;join;          # wait for all removed worker threads to finish

 $workers = $pool-&#62;workers; 
 $todo    = $pool-&#62;todo;
 $removed = $pool-&#62;removed;

 $pool-&#62;maxjobs( 100 );  # adapt or (de-)activate job throttling
 $pool-&#62;minjobs( 10 );

 $pool-&#62;autoshutdown( 1 ); # shutdown when object is destroyed
 $pool-&#62;shutdown;          # wait until all jobs done
 $pool-&#62;abort;             # finish current job and remove all workers

 $done    = $pool-&#62;done;   # simple thread-use statistics
 $notused = $pool-&#62;notused;

 Thread::Pool-&#62;remove_me;  # inside &#34;do&#34; only</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">                  *** A note of CAUTION ***

 This module only functions on Perl versions 5.8.0 and later.
 And then only when threads are enabled with -Dusethreads.
 It is of no use with any version of Perl before 5.8.0 or
 without threads enabled.

                  *************************</pre>

<p>The Thread::Pool allows you to set up a group of (worker) threads to execute a (large) number of similar jobs that need to be executed asynchronously. The routine that actually performs the job (the &#34;do&#34; routine), must be specified as a name or a reference to a (anonymous) subroutine.</p>

<p>Once a pool is created, <a href="/perldoc?job" class="podlinkpod"
>job</a>s can be executed at will and will be assigned to the next available worker. If the result of the job is important, a job ID is issued. The job ID can then later be used to obtain the <a href="/perldoc?result" class="podlinkpod"
>result</a>.</p>

<p>Initialization parameters can be passed during the creation of the Thread::Pool object. The initialization (&#34;pre&#34;) routine can be specified as a name or as a reference to a (anonymous) subroutine. The &#34;pre&#34; routine can e.g. be used to create a connection to an external source using a non-threadsafe library.</p>

<p>When a worker is told to finish, the &#34;post&#34; routine is executed if available.</p>

<p>Results of jobs must be obtained seperately, unless a &#34;stream&#34; or a &#34;monitor&#34; routine is specified. Then the result of each job will be streamed to the &#34;stream&#34; or &#34;monitor&#34; routine in the order in which the jobs were submitted.</p>

<p>Unless told otherwise, all jobs that are assigned, will be executed before the pool is allowed to be destroyed. If a &#34;stream&#34; or &#34;monitor&#34; routine is specified, then all results will be handled by that routine before the pool is allowed to be destroyed.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CLASS_METHODS"
>CLASS METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following class methods are available.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="new"
>new</a></h2>

<pre class="sh_perl"> $pool = Thread::Pool-&#62;new(
  {
   optimize =&#62; &#39;cpu&#39;,                            # default: memory

   do =&#62; sub { print &#34;doing with @_\n&#34; },        # must have
   pre =&#62; sub { print &#34;starting with @_\n&#34;,      # default: none
   post =&#62; sub { print &#34;stopping with @_\n&#34;,     # default: none

   stream =&#62; sub { print &#34;streamline with @_\n&#34;, # default: none

   monitor =&#62; sub { print &#34;monitor with @_\n&#34;,   # default: none
   pre_post_monitor_only =&#62; 0, # default: 0 = also for &#34;do&#34;
   checkpoint =&#62; \&#38;checkpoint,
   frequency =&#62; 1000,

   autoshutdown =&#62; 1, # default: 1 = yes

   workers =&#62; 10,     # default: 1
   maxjobs =&#62; 50,     # default: 5 * workers
   minjobs =&#62; 5,      # default: maxjobs / 2
  },

  qw(a b c)           # parameters to &#34;pre&#34; and &#34;post&#34; routines

 );</pre>

<p>The &#34;new&#34; method returns the Thread::Pool object.</p>

<p>The first input parameter is a reference to a hash that should at least contain the &#34;do&#34; key with a subroutine reference.</p>

<p>The other input parameters are optional. If specified, they are passed to the the &#34;pre&#34; subroutine whenever a new worker is <a href="/perldoc?add" class="podlinkpod"
>add</a>ed.</p>

<p>Each time a worker thread is added, the &#34;pre&#34; subroutine (if available) will be called inside the thread. Each time a worker thread is <a href="/perldoc?remove" class="podlinkpod"
>remove</a>d, the &#34;post&#34; routine is called. Its return value(s) are saved only if a job ID was requested when removing the thread. Then the <a href="/perldoc?result" class="podlinkpod"
>result</a> method can be called to obtain the results of the &#34;post&#34; subroutine.</p>

<p>The following field <b>must</b> be specified in the hash reference:</p>

<dl>
<dt><a name="optimize"
>optimize</a></dt>

<dd>
<pre class="sh_perl"> optimize =&#62; &#39;cpu&#39;, # default: &#39;memory&#39;</pre>

<p>The &#34;optimize&#34; field specifies which implementation of the belt will be selected. Currently there are two choices: &#39;cpu&#39; and &#39;memory&#39;. By default, the &#34;memory&#34; optimization will be selected if no specific optmization is specified.</p>

<p>You can call the class method <a href="/perldoc?optimize" class="podlinkpod"
>optimize</a> to change the default optimization.</p>

<dt><a name="do"
>do</a></dt>

<dd>
<pre class="sh_perl"> do =&#62; &#39;do_the_job&#39;,            # assume caller&#39;s namespace</pre>

<p>or:</p>

<pre class="sh_perl"> do =&#62; &#39;Package::do_the_job&#39;,</pre>

<p>or:</p>

<pre class="sh_perl"> do =&#62; \&#38;SomeOther::do_the_job,</pre>

<p>or:</p>

<pre class="sh_perl"> do =&#62; sub {print &#34;anonymous sub doing the job\n&#34;},</pre>

<p>The &#34;do&#34; field specifies the subroutine to be executed for each <a href="/perldoc?job" class="podlinkpod"
>job</a>. It must be specified as either the name of a subroutine or as a reference to a (anonymous) subroutine.</p>

<p>The specified subroutine should expect the following parameters to be passed:</p>

<pre class="sh_perl"> 1..N  any parameters that were passed with the call to L&#60;job&#62;.</pre>

<p>Any values that are returned by this subroutine after finishing each job, are accessible with <a href="/perldoc?result" class="podlinkpod"
>result</a> if a job ID was requested when assigning the <a href="/perldoc?job" class="podlinkpod"
>job</a>.</p>
</dd>
</dl>

<p>The following fields are <b>optional</b> in the hash reference:</p>

<dl>
<dt><a name="pre"
>pre</a></dt>

<dd>
<pre class="sh_perl"> pre =&#62; &#39;prepare_jobs&#39;,         # assume caller&#39;s namespace</pre>

<p>or:</p>

<pre class="sh_perl"> pre =&#62; &#39;Package::prepare_jobs&#39;,</pre>

<p>or:</p>

<pre class="sh_perl"> pre =&#62; \&#38;SomeOther::prepare_jobs,</pre>

<p>or:</p>

<pre class="sh_perl"> pre =&#62; sub {print &#34;anonymous sub preparing the jobs\n&#34;},</pre>

<p>The &#34;pre&#34; field specifies the subroutine to be executed <b>each</b> time a new worker thread is <b>started</b> (either when starting the pool, or when new worker threads are added with a call to either <a href="/perldoc?add" class="podlinkpod"
>add</a> or <a href="/perldoc?workers" class="podlinkpod"
>workers</a>) and once when a &#34;monitor&#34; routine is specified. It must be specified as either the name of a subroutine or as a reference to a (anonymous) subroutine.</p>

<p>The specified subroutine should expect the following parameters to be passed:</p>

<pre class="sh_perl"> 1..N  any additional parameters that were passed with the call to L&#60;new&#62;.</pre>

<p>You can determine whether the &#34;pre&#34; routine is called for a new worker thread or for a monitoring thread by checking the <a href="/perldoc?self" class="podlinkpod"
>self</a> or <a href="/perldoc?monitor" class="podlinkpod"
>monitor</a> class method inside the &#34;pre&#34; routine.</p>

<dt><a name="post"
>post</a></dt>

<dd>
<pre class="sh_perl"> post =&#62; &#39;cleanup_after_worker&#39;,        # assume caller&#39;s namespace</pre>

<p>or:</p>

<pre class="sh_perl"> post =&#62; &#39;Package::cleanup_after_worker&#39;,</pre>

<p>or:</p>

<pre class="sh_perl"> post =&#62; \&#38;SomeOther::cleanup_after_worker,</pre>

<p>or:</p>

<pre class="sh_perl"> post =&#62; sub {print &#34;anonymous sub cleaning up after the worker removed\n&#34;},</pre>

<p>The &#34;post&#34; field specifies the subroutine to be executed <b>each</b> time a worker thread is <b>removed</b> (either when being specifically <a href="/perldoc?remove" class="podlinkpod"
>remove</a>d, or when the pool is <a href="/perldoc?shutdown" class="podlinkpod"
>shutdown</a> specifically or implicitely when the Thread::Pool object is destroyed. It must be specified as either the name of a subroutine or as a reference to a (anonymous) subroutine.</p>

<p>The specified subroutine should expect the following parameters to be passed:</p>

<pre class="sh_perl"> 1..N  any additional parameters that were passed with the call to L&#60;new&#62;.</pre>

<p>Any values that are returned by this subroutine after closing down the thread, are accessible with the <a href="/perldoc?result" class="podlinkpod"
>result</a> method, but only if the thread was <a href="/perldoc?removed" class="podlinkpod"
>removed</a> and a job ID was requested.</p>

<p>You can determine whether the &#34;post&#34; routine is called for a new worker thread or for a monitoring thread by checking the <a href="/perldoc?self" class="podlinkpod"
>self</a> or <a href="/perldoc?monitor" class="podlinkpod"
>monitor</a> class method inside the &#34;post&#34; routine.</p>

<dt><a name="stream"
>stream</a></dt>

<dd>
<pre class="sh_perl"> stream =&#62; &#39;in_order_of_submit&#39;,        # assume caller&#39;s namespace</pre>

<p>or:</p>

<pre class="sh_perl"> stream =&#62; &#39;Package::in_order_of_submit&#39;,</pre>

<p>or:</p>

<pre class="sh_perl"> stream =&#62; \&#38;SomeOther::in_order_of_submit,</pre>

<p>or:</p>

<pre class="sh_perl"> stream =&#62; sub {print &#34;anonymous sub called in order of submit\n&#34;},</pre>

<p>The &#34;stream&#34; field specifies the subroutine to be executed for streaming the results of the &#34;do&#34; routine. If specified, the &#34;stream&#34; routine is called once for the result of each &#34;do&#34; subroutine, but in the order in which the <a href="/perldoc?job" class="podlinkpod"
>job</a>s were submitted rather than in the order in which the result were obtained (which is by the very nature of threads, indeterminate).</p>

<p>The specified subroutine should expect the following parameters to be passed:</p>

<pre class="sh_perl"> 1     the Thread::Pool object to which the worker thread belongs.
 2..N  the values that were returned by the &#34;do&#34; subroutine</pre>

<p>The &#34;stream&#34; routine is executed in <b>any</b> of the threads that are created for the Thread::Pool object. The system attempts to call the &#34;stream&#34; routine in the same thread from which the values are obtained, but when things get out of sync, other threads may stream the result of a job. If you want <b>only one</b> thread to stream all results, use the &#34;monitor&#34; routine.</p>

<dt><a name="monitor"
>monitor</a></dt>

<dd>
<pre class="sh_perl"> monitor =&#62; &#39;in_order_of_submit&#39;,       # assume caller&#39;s namespace</pre>

<p>or:</p>

<pre class="sh_perl"> monitor =&#62; &#39;Package::in_order_of_submit&#39;,</pre>

<p>or:</p>

<pre class="sh_perl"> monitor =&#62; \&#38;SomeOther::in_order_of_submit,</pre>

<p>or:</p>

<pre class="sh_perl"> monitor =&#62; sub {print &#34;anonymous sub called in order of submit\n&#34;},</pre>

<p>The &#34;monitor&#34; field specifies the subroutine to be executed for monitoring the results of the &#34;do&#34; routine. If specified, the &#34;monitor&#34; routine is called once for the result of each &#34;do&#34; subroutine, but in the order in which the <a href="/perldoc?job" class="podlinkpod"
>job</a>s were submitted rather than in the order in which the result were obtained (which is by the very nature of threads, indeterminate).</p>

<p>The specified subroutine should expect the following parameters to be passed:</p>

<pre class="sh_perl"> 1..N  the values that were returned by the &#34;do&#34; subroutine</pre>

<p>The &#34;monitor&#34; routine is executed in its own thread. This means that all results have to be passed between threads, and therefore be frozen and thawed with <a href="/perldoc?Storable" class="podlinkpod"
>Storable</a>. If you can handle the streaming from different threads, it is probably wiser to use the &#34;stream&#34; routine feature.</p>

<dt><a name="pre_post_monitor_only"
>pre_post_monitor_only</a></dt>

<dd>
<pre class="sh_perl"> pre_post_monitor_only =&#62; 1, # default 0</pre>

<p>The &#34;pre_post_monitor_only&#34; field only makes sense if a &#34;monitor&#34; routine is specified. If specified with a true value, indicates that the &#34;pre&#34; and &#34;post&#34; routines (if specified) should only be called for the &#34;monitor&#34; routine only and <b>not</b> for the &#34;do&#34; routine. Otherwise, the same &#34;pre&#34; and &#34;post&#34; routine will be called for both the &#34;do&#34; as well as the &#34;monitor&#34; routine.</p>

<p>When the &#34;pre&#34; and &#34;post&#34; routine are called for the &#34;do&#34; subroutine, the <a href="/perldoc?self" class="podlinkpod"
>self</a> class method returns the Thread::Pool object (which it doesn&#39;t do when called in the &#34;monitor&#34; routine).</p>

<dt><a name="checkpoint"
>checkpoint</a></dt>

<dd>
<pre class="sh_perl"> checkpoint =&#62; &#39;checkpointing&#39;,                 # assume caller&#39;s namespace</pre>

<p>or:</p>

<pre class="sh_perl"> checkpoint =&#62; &#39;Package::checkpointing&#39;,</pre>

<p>or:</p>

<pre class="sh_perl"> checkpoint =&#62; \&#38;SomeOther::checkpointing,</pre>

<p>or:</p>

<pre class="sh_perl"> checkpoint =&#62; sub {print &#34;anonymous sub to do checkpointing\n&#34;},</pre>

<p>The &#34;checkpoint&#34; field specifies the subroutine to be executed everytime a checkpoint should be made by a monitoring routine (e.g. for saving or updating status). It must be specified as either the name of a subroutine or as a reference to a (anonymous) subroutine.</p>

<p>It only makes sense to specify a checkpoint routine if there is also a monitoring routine specified. No checkpointing will occur by default if a monitoring routine <b>is</b> specified. The frequency of checkpointing can be specified with the &#34;frequency&#34; field.</p>

<p>The specified subroutine should not expect any parameters to be passed. Any values returned by the checkpointing routine, will be lost.</p>

<dt><a name="frequency"
>frequency</a></dt>

<dd>
<pre class="sh_perl"> frequency =&#62; 100,                             # default = 1000</pre>

<p>The &#34;frequency&#34; field specifies the number of jobs that should have been monitored before the &#34;checkpoint&#34; routine is called. If a checkpoint routine is specified but no frequency field is specified, then a frequency of <b>1000</b> will be assumed.</p>

<p>This field has no meaning if no checkpoint routine is specified with the &#34;checkpoint&#34; field. The default frequency can be changed with the <a href="/perldoc?frequency" class="podlinkpod"
>frequency</a> method.</p>

<dt><a name="autoshutdown"
>autoshutdown</a></dt>

<dd>
<pre class="sh_perl"> autoshutdown =&#62; 0, # default: 1</pre>

<p>The &#34;autoshutdown&#34; field specified whether the <a href="/perldoc?shutdown" class="podlinkpod"
>shutdown</a> method should be called when the object is destroyed. By default, this flag is set to 1 indicating that the shutdown method should be called when the object is being destroyed. Setting the flag to a false value, will cause the shutdown method <b>not</b> to be called, causing potential loss of data and error messages when threads are not finished when the program exits.</p>

<p>The setting of the flag can be later changed by calling the <a href="/perldoc?autoshutdown" class="podlinkpod"
>autoshutdown</a> method.</p>

<dt><a name="workers"
>workers</a></dt>

<dd>
<pre class="sh_perl"> workers =&#62; 5, # default: 1</pre>

<p>The &#34;workers&#34; field specifies the number of worker threads that should be created when the pool is created. If no &#34;workers&#34; field is specified, then only one worker thread will be created. The <a href="/perldoc?workers" class="podlinkpod"
>workers</a> method can be used to change the number of workers later.</p>

<dt><a name="maxjobs"
>maxjobs</a></dt>

<dd>
<pre class="sh_perl"> maxjobs =&#62; 25, # default: 5 * workers</pre>

<p>The &#34;maxjobs&#34; field specifies the <b>maximum</b> number of jobs that can be sitting on the belt to be handled (job throttling). If a new <a href="/perldoc?job" class="podlinkpod"
>job</a> submission would exceed this amount, job submission will be halted until the number of jobs waiting to be handled has become at least as low as the amount specified with the &#34;minjobs&#34; field.</p>

<p>If the &#34;maxjobs&#34; field is not specified, an amount of 5 * the number of worker threads will be assumed. If you do not want to have any job throttling, you can specify the value &#34;undef&#34; for the field. But beware! If you do not have job throttling active, you may wind up using excessive amounts of memory used for storing all of the job submission information.</p>

<p>The <a href="/perldoc?maxjobs" class="podlinkpod"
>maxjobs</a> method can be called to change the job throttling settings during the lifetime of the object.</p>

<dt><a name="minjobs"
>minjobs</a></dt>

<dd>
<pre class="sh_perl"> minjobs =&#62; 10, # default: maxjobs / 2</pre>

<p>The &#34;minjobs&#34; field specified the <b>minimum</b> number of jobs that can be waiting on the belt to be handled before job submission is allowed again (job throttling).</p>

<p>If job throttling is active and the &#34;minjobs&#34; field is not specified, then half of the &#34;maxjobs&#34; value will be assumed.</p>

<p>The <a href="/perldoc?minjobs" class="podlinkpod"
>minjobs</a> method can be called to change the job throttling settings during the lifetime of the object.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="frequency"
>frequency</a></h2>

<pre class="sh_perl"> Thread::Pool-&#62;frequency( 100 );

 $frequency = Thread::Pool-&#62;frequency;</pre>

<p>The &#34;frequency&#34; class method allows you to specify the default frequency that will be used when a checkpoint routine is specified with the &#34;checkpoint&#34; field. The default frequency is set to <b>1000</b> if no other value has been previously specified.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="optimize"
>optimize</a></h2>

<pre class="sh_perl"> Thread::Pool-&#62;optimize( &#39;cpu&#39; );

 $optimize = Thread::Pool-&#62;optimize;</pre>

<p>The &#34;optimize&#34; class method allows you to specify the default optimization type that will be used if no &#34;optimize&#34; field has been explicitely specified with a call to <a href="/perldoc?new" class="podlinkpod"
>new</a>. It returns the current default type of optimization.</p>

<p>Currently two types of optimization can be selected:</p>

<dl>
<dt><a name="memory"
>memory</a></dt>

<dd>
<p>Attempt to use as little memory as possible. Currently, this is achieved by starting a seperate thread which hosts an unshared array. This uses the &#34;Thread::Conveyor::Thread&#34; sub-class.</p>

<dt><a name="cpu"
>cpu</a></dt>

<dd>
<p>Attempt to use as little CPU as possible. Currently, this is achieved by using a shared array (using the &#34;Thread::Conveyor::Array&#34; sub-class), encapsulated in a hash reference if throttling is activated (then also using the &#34;Thread::Conveyor::Throttled&#34; sub-class).</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="POOL_METHODS"
>POOL METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following methods can be executed on the Thread::Pool object.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="job"
>job</a></h2>

<pre class="sh_perl"> $jobid = $pool-&#62;job( @parameter );     # saves result
 $pool-&#62;job( @parameter );              # does not save result</pre>

<p>The &#34;job&#34; method specifies a job to be executed by any of the available <a href="/perldoc?workers" class="podlinkpod"
>workers</a>. Which worker will execute the job, is indeterminate. When it will happen, depends on the number of jobs that still have to be done when this job was submitted.</p>

<p>The input parameters are passed to the &#34;do&#34; subroutine as is.</p>

<p>If a return value is requested, then the return value(s) of the &#34;do&#34; subroutine will be saved. The returned value is a job ID that should be used as the input parameter to <a href="/perldoc?result" class="podlinkpod"
>result</a> or <a href="/perldoc?result_dontwait" class="podlinkpod"
>result_dontwait</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="waitfor"
>waitfor</a></h2>

<pre class="sh_perl"> @result = $pool-&#62;waitfor( @parameter ); # submit job and wait for result</pre>

<p>The &#34;waitfor&#34; method specifies a job to be executed, wait for the result to become ready and return the result. It is in fact a shortcut for using <a href="/perldoc?job" class="podlinkpod"
>job</a> and <a href="/perldoc?result" class="podlinkpod"
>result</a>.</p>

<p>The input parameters are passed to the &#34;do&#34; subroutine as is.</p>

<p>The return value(s) are what was returned by the &#34;do&#34; routine. The meaning of the return value(s) is entirely up to you as the developer.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="result"
>result</a></h2>

<pre class="sh_perl"> @result = $pool-&#62;result( $jobid );</pre>

<p>The &#34;result&#34; method waits for the specified job to be finished and returns the result of that job.</p>

<p>The input parameter is the job id as returned from the <a href="/perldoc?job" class="podlinkpod"
>job</a> assignment.</p>

<p>The return value(s) are what was returned by the &#34;do&#34; routine. The meaning of the return value(s) is entirely up to you as the developer.</p>

<p>If you want to wait for <b>any</b> job to be finished, use the <a href="/perldoc?result_any" class="podlinkpod"
>result_any</a> method.</p>

<p>If you don&#39;t want to wait for the job to be finished, but just want to see if there is a result already, use the <a href="/perldoc?result_dontwait" class="podlinkpod"
>result_dontwait</a> method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="result_any"
>result_any</a></h2>

<pre class="sh_perl"> @result = $pool-&#62;result_any;

 @result = $pool-&#62;result_any( \$jobid );</pre>

<p>The &#34;result_any&#34; method waits for <b>any</b> job to be finished and returns the result of that job.</p>

<p>The optional input parameter is the reference to a scalar variable in which the job id will be stored.</p>

<p>The return value(s) are what was returned by the &#34;do&#34; routine. The meaning of the return value(s) is entirely up to you as the developer.</p>

<p>If you don&#39;t want to wait for a job to be finished, but just want to see if there is a result already, use the <a href="/perldoc?result_dontwait" class="podlinkpod"
>result_dontwait</a> method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="result_dontwait"
>result_dontwait</a></h2>

<pre class="sh_perl"> @result = $pool-&#62;result_dontwait( $jobid );</pre>

<p>The &#34;result_dontwait&#34; method returns the result of the job if it is available. If the job is not finished yet, it will return undef in scalar context or the empty list in list context.</p>

<p>The input parameter is the job id as returned from the <a href="/perldoc?job" class="podlinkpod"
>job</a> assignment.</p>

<p>If the result of the job is available, then the return value(s) are what was returned by the &#34;do&#34; routine. The meaning of the return value(s) is entirely up to you as the developer.</p>

<p>If you want to wait for the job to be finished, use the <a href="/perldoc?result" class="podlinkpod"
>result</a> method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="todo"
>todo</a></h2>

<pre class="sh_perl"> $todo = $pool-&#62;todo;</pre>

<p>The &#34;todo&#34; method returns the number of <a href="/perldoc?job" class="podlinkpod"
>job</a>s that are still left to be done.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="results"
>results</a></h2>

<pre class="sh_perl"> $results = $pool-&#62;results;
 @result = $pool-&#62;results;</pre>

<p>The &#34;results&#34; method returns the jobids of which there are results available and which have not yet been fetched with <a href="/perldoc?result" class="podlinkpod"
>result</a>. Returns the number of results available in scalar context.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="add"
>add</a></h2>

<pre class="sh_perl"> $tid = $pool-&#62;add;             # add 1 worker thread
 @tid = $pool-&#62;add( 5 );</pre>

<p>The &#34;add&#34; method adds the specified number of worker threads to the pool and returns the thread ID&#39;s (tid) of the threads that were created.</p>

<p>The input parameter specifies the number of workers to be added. If no number of workers is specified, then 1 worker thread will be added.</p>

<p>In scalar context, returns the thread ID (tid) of the first worker thread that was added. This usually only makes sense if you&#39;re adding only one worker thread.</p>

<p>In list context, returns the thread ID&#39;s (tid) of the worker threads that were created.</p>

<p>Each time a worker thread is added, the &#34;pre&#34; routine (if available) will be called inside the thread.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="remove"
>remove</a></h2>

<pre class="sh_perl"> $pool-&#62;remove;                 # remove 1 worker thread
 $pool-&#62;remove( 5 );            # remove 5 worker threads

 $jobid = $pool-&#62;remove;        # remove 1 worker thread, save result
 @jobid = $pool-&#62;remove( 5 );   # remove 5 worker threads, save results</pre>

<p>The &#34;remove&#34; method adds the specified number of special &#34;remove&#34; job to the lists of jobs to be done. It will return the job ID&#39;s if called in a non-void context.</p>

<p>The input parameter specifies the number of workers to be removed. If no number of workers is specified, then 1 worker thread will be removed.</p>

<p>In void context, the results of the execution of the &#34;post&#34; subroutine(s) is discarded.</p>

<p>In scalar context, returns the job ID of the result of the first worker thread that was removed. This usually only makes sense if you&#39;re removing only one worker thread.</p>

<p>In list context, returns the job ID&#39;s of the result of all the worker threads that were removed.</p>

<p>Each time a worker thread is <a href="/perldoc?remove" class="podlinkpod"
>remove</a>d, the &#34;post&#34; routine is called. Its return value(s) are saved only if a job ID was requested when removing the thread. Then the <a href="/perldoc?result" class="podlinkpod"
>result</a> method can be called to obtain the results of the &#34;post&#34; subroutine.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="workers"
>workers</a></h2>

<pre class="sh_perl"> $workers = $pool-&#62;workers;     # find out number of worker threads
 $pool-&#62;workers( 10 );          # set number of worker threads</pre>

<p>The &#34;workers&#34; method can be used to find out how many worker threads there are currently available, or it can be used to set the number of worker threads.</p>

<p>The input value, if specified, specifies the number of worker threads that should be available. If there are more worker threads available than the number specified, then superfluous worker threads will be <a href="/perldoc?remove" class="podlinkpod"
>remove</a>d. If there are not enough worker threads available, new worker threads will be <a href="/perldoc?add" class="podlinkpod"
>add</a>ed.</p>

<p>The return value is the current number of worker threads.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="frequency"
>frequency</a></h2>

<pre class="sh_perl"> $frequency = $pool-&#62;frequency;</pre>

<p>The &#34;frequency&#34; instance method returns the frequency with which the checkpoint routine is being called. Returns undef if no checkpointing is being done.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="maxjobs"
>maxjobs</a></h2>

<pre class="sh_perl"> $pool-&#62;maxjobs( 100 );
 $maxjobs = $pool-&#62;maxjobs;</pre>

<p>The &#34;maxjobs&#34; method returns the maximum number of jobs that can be on the belt before job throttling sets in. The input value, if specified, specifies the new maximum number of jobs that may be on the belt. Job throttling will be switched off if the value <b>0</b> is specified.</p>

<p>Specifying the &#34;maxjobs&#34; field when creating the pool object with <a href="/perldoc?new" class="podlinkpod"
>new</a> is equivalent to calling this method.</p>

<p>The <a href="/perldoc?minjobs" class="podlinkpod"
>minjobs</a> method can be called to specify the minimum number of jobs that must be on the belt before job submission is allowed again after reaching the maximum number of jobs. By default, half of the &#34;maxjobs&#34; value is assumed.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="minjobs"
>minjobs</a></h2>

<pre class="sh_perl"> $pool-&#62;minjobs( 50 );
 $minjobs = $pool-&#62;minjobs;</pre>

<p>The &#34;minjobs&#34; method returns the minimum number of jobs that must be on the belt before job submission is allowed again after reaching the maximum number of jobs. The input value, if specified, specifies the new minimum number of jobs that must be on the belt.</p>

<p>Specifying the &#34;minjobs&#34; field when creating the pool object with <a href="/perldoc?new" class="podlinkpod"
>new</a> is equivalent to calling this method.</p>

<p>The <a href="/perldoc?maxjobs" class="podlinkpod"
>maxjobs</a> method can be called to set the maximum number of jobs that may be on the belt before job submission will be halted.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="join"
>join</a></h2>

<pre class="sh_perl"> $pool-&#62;join;</pre>

<p>The &#34;join&#34; method waits until all of the worker threads that have been <a href="/perldoc?remove" class="podlinkpod"
>remove</a>d have finished their jobs. It basically cleans up the threads that are not needed anymore.</p>

<p>The &#34;shutdown&#34; method call the &#34;join&#34; method after removing all the active worker threads. You therefore seldom need to call the &#34;join&#34; method seperately.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="removed"
>removed</a></h2>

<pre class="sh_perl"> $removed = $pool-&#62;removed;</pre>

<p>The &#34;removed&#34; method returns the number of worker threads that were <a href="/perldoc?remove" class="podlinkpod"
>remove</a>d over the lifetime of the object.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="autoshutdown"
>autoshutdown</a></h2>

<pre class="sh_perl"> $pool-&#62;autoshutdown( 1 );
 $autoshutdown = $pool-&#62;autoshutdown;</pre>

<p>The &#34;autoshutdown&#34; method sets and/or returns the flag indicating whether an automatic <a href="/perldoc?shutdown" class="podlinkpod"
>shutdown</a> should be performed when the object is destroyed.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="shutdown"
>shutdown</a></h2>

<pre class="sh_perl"> $pool-&#62;shutdown;</pre>

<p>The &#34;shutdown&#34; method waits for all <a href="/perldoc?job" class="podlinkpod"
>job</a>s to be executed, <a href="/perldoc?remove" class="podlinkpod"
>remove</a>s all worker threads, handles any results that still need to be streamed, before it returns. Call the <a href="/perldoc?abort" class="podlinkpod"
>abort</a> method if you do not want to wait until all jobs have been executed.</p>

<p>It is called automatically when the object is destroyed, unless specifically disabled by providing a false value with the &#34;autoshutdown&#34; field when creating the pool with <a href="/perldoc?new" class="podlinkpod"
>new</a>, or by calling the <a href="/perldoc?autoshutdown" class="podlinkpod"
>autoshutdown</a> method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="abort"
>abort</a></h2>

<p>The &#34;abort&#34; method waits for all worker threads to finish their <b>current</b> job, <a href="/perldoc?remove" class="podlinkpod"
>remove</a>s all worker threads, before it returns. Call the <a href="/perldoc?shutdown" class="podlinkpod"
>shutdown</a> method if you want to wait until all jobs have been done.</p>

<p>You can restart the job handling process after calling &#34;abort&#34; by adding <a href="/perldoc?workers" class="podlinkpod"
>workers</a> again.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="done"
>done</a></h2>

<pre class="sh_perl"> $done = $pool-&#62;done;</pre>

<p>The &#34;done&#34; method returns the number of <a href="/perldoc?job" class="podlinkpod"
>job</a>s that has been performed by the <a href="/perldoc?removed" class="podlinkpod"
>removed</a> worker threads of the pool.</p>

<p>The &#34;done&#34; method is typically called after the <a href="/perldoc?shutdown" class="podlinkpod"
>shutdown</a> method has been called.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="notused"
>notused</a></h2>

<pre class="sh_perl"> $notused = $pool-&#62;notused;</pre>

<p>The &#34;notused&#34; method returns the number of removed threads that have not performed any jobs. It provides a heuristic to determine how many <a href="/perldoc?workers" class="podlinkpod"
>workers</a> you actually need for a specific application: a value &#62; 0 indicates that you have specified too many worker threads for this application.</p>

<p>The &#34;notused&#34; method is typically called after the <a href="/perldoc?shutdown" class="podlinkpod"
>shutdown</a> method has been called.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INSIDE_JOB_METHODS"
>INSIDE JOB METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following methods only make sense inside the &#34;pre&#34;, &#34;do&#34;, &#34;post&#34;, &#34;stream&#34; and &#34;monitor&#34; routines.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="self"
>self</a></h2>

<pre class="sh_perl"> $self = Thread::Pool-&#62;self;</pre>

<p>The class method &#34;self&#34; returns the object to which this thread belongs. It is available within the &#34;pre&#34;, &#34;do&#34;, &#34;post&#34;, &#34;stream&#34; and &#34;monitor&#34; subroutines only.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="monitor"
>monitor</a></h2>

<pre class="sh_perl"> $monitor = Thread::Pool-&#62;monitor;</pre>

<p>The class method &#34;monitor&#34; returns the Thread::Conveyor::Monitored object that is associated with the pool. It is available only if the &#34;monitor&#34; field was specified in <a href="/perldoc?new" class="podlinkpod"
>new</a>. And then only within the &#34;pre&#34;, &#34;do&#34;, &#34;post&#34;, &#34;stream&#34; and &#34;monitor&#34; subroutines only.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="remove_me"
>remove_me</a></h2>

<pre class="sh_perl"> Thread::Pool-&#62;remove_me;</pre>

<p>The &#34;remove_me&#34; class method only makes sense within the &#34;do&#34; subroutine. It indicates to the job dispatcher that this worker thread should be removed from the pool. After the &#34;do&#34; subroutine returns, the worker thread will be removed.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="jobid"
>jobid</a></h2>

<pre class="sh_perl"> $jobid = Thread::Pool-&#62;jobid;</pre>

<p>The &#34;jobid&#34; class method only makes sense within the &#34;do&#34; subroutine in streaming mode. It returns the job ID value of the current job. This can be used connection with the <a href="/perldoc?dont_set_result" class="podlinkpod"
>dont_set_result</a> and the <a href="/perldoc?set_result" class="podlinkpod"
>set_result</a> methods to have another thread set the result of the current job.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="dont_set_result"
>dont_set_result</a></h2>

<pre class="sh_perl"> Thread::Pool-&#62;dont_set_result;</pre>

<p>The &#34;dont_set_result&#34; class method only makes sense within the &#34;do&#34; subroutine. It indicates to the job dispatcher that the result of this job should <b>not</b> be saved. This is for cases where the result of this job will be placed in the result hash at some time in the future by another thread using the <a href="/perldoc?set_result" class="podlinkpod"
>set_result</a> method.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="set_result"
>set_result</a></h2>

<pre class="sh_perl"> Thread::Pool-&#62;self-&#62;set_result( $jobid,@param );</pre>

<p>The &#34;set_result&#34; object method only makes sense within the &#34;do&#34; subroutine. It allows you to set the result of <b>other</b> jobs than the one currently being performed.</p>

<p>This method is only needed in <b>very</b> special situations. Normally, just returning values from the &#34;do&#34; subroutine is enough to have the result saved. This method is exposed to the outside world in those cases where a specific thread becomes responsible for setting the result of other threads (which used the <a href="/perldoc?dont_set_result" class="podlinkpod"
>dont_set_result</a> method to defer saving their result.</p>

<p>The first input parameter specifies the job ID of the job for which to set the result. The rest of the input parameters is considered to be the result to be saved. Whatever is specified in the rest of the input parameters, will be returned with the <a href="/perldoc?result" class="podlinkpod"
>result</a> or <a href="/perldoc?result_dontwait" class="podlinkpod"
>result_dontwait</a> methods.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="REQUIRED_MODULES"
>REQUIRED MODULES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> Thread::Conveyor (0.15)
 Thread::Conveyor::Monitored (0.11)</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OPTIMIZATIONS"
>OPTIMIZATIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module uses <a href="/perldoc?load" class="podlinkpod"
>load</a> to reduce memory and CPU usage. This causes subroutines only to be compiled in a thread when they are actually needed at the expense of more CPU when they need to be compiled. Simple benchmarks however revealed that the overhead of the compiling single routines is not much more (and sometimes a lot less) than the overhead of cloning a Perl interpreter with a lot of subroutines pre-loaded.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CAVEATS"
>CAVEATS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Passing unshared values between threads is accomplished by serializing the specified values using <a href="/perldoc?Thread%3A%3ASerialize" class="podlinkpod"
>Thread::Serialize</a>. Please see the CAVEATS section there for an up-to-date status of what can be passed around between threads.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There are currently two examples.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="simple_asynchronous_log_file_resolving_filter"
>simple asynchronous log file resolving filter</a></h2>

<p>This is an example of a very simple asynchronous log file resolver filter.</p>

<p>Because the IP number to domain name translation is dependent on external DNS servers, it can take quite some (wallclock) time before a response is returned by the <code>gethostbyaddr</code> function. In a single threaded environment, a single bad DNS server can severely slow down the resolving process. In a threaded environment, you can have one thread waiting for a slow DNS server while other threads are able to obtain answers in the mean time.</p>

<p>This example uses a shared hash to keep results from DNS server responses, so that if an IP number was attempted to be resolved once (either successfully or unsuccessfully), it will not be attempted again: instead the value from the hash will be assumed.</p>

<pre class="sh_perl"> # You should always use strict!
 # Using Thread::Pool by itself is enough, no &#34;use threads;&#34; needed
 # Initialize the shared hash with IP numbers and their results

 use strict;
 use Thread::Pool;
 my %resolved : shared;

 # Create the pool of threads

 my $pool = Thread::Pool-&#62;new(
  {
   workers =&#62; 10,
   do =&#62; \&#38;do,
   monitor =&#62; \&#38;monitor,
  }
 );

 # Submit each line as a job to the pool

 $pool-&#62;job( $_ ) while &#60;&#62;;

 #--------------------------------------------------------------------
 # Handle a single job
 #  IN: 1 log line to resolve
 # OUT: 1 resolved log line

 sub do {

 # Substitute the IP number at the start with the name or with the original
 # Return the adapted value

   $_[0] =~ s#^(\d+\.\d+\.\d+\.\d+)#
    $resolved{$1} ||= gethostbyaddr( pack( &#39;C4&#39;,split(/\./,$1)),2 ) || $1#e;
   $_[0];
 } #do

 #--------------------------------------------------------------------
 # Output the results in the order they were submitted
 #  IN: 1 resolved log line

 sub monitor { print $_[0] } #monitor</pre>

<p>This is a very simple filter. The main drawback is that many threads can be looking up the same IP number at the same time.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="another_asynchronous_log_file_resolving_filter"
>another asynchronous log file resolving filter</a></h2>

<p>This is an example of a not so very simple asynchronous log file resolver filter. This is in fact the base code for the <a href="/perldoc?Thread%3A%3APool%3A%3AResolve" class="podlinkpod"
>Thread::Pool::Resolve</a> module.</p>

<p>In this example, the <a href="/perldoc?dont_set_result" class="podlinkpod"
>dont_set_result</a> and <a href="/perldoc?set_result" class="podlinkpod"
>set_result</a> methods are used to put up all lines with the same unresolved IP number in the same thread until the DNS server returns, either with or without a result. Then all the lines with that IP number are handled by that thread: the other threads have long before that already continued attempting to handle other lines.</p>

<p>Because only the &#34;do&#34; subroutine is different from the previous example, we&#39;re only showing that.</p>

<pre class="sh_perl"> #--------------------------------------------------------------------
 # Handle a single job
 #  IN: 1 log line to resolve
 # OUT: 1 resolved log line (if already resolved, else ignored)

 sub do {

 # Obtain the line to work with
 # Return it now if it is already resolved (at least not an IP number there)
 # Save the IP number for later usage, line is now without IP number

   my $line = shift;
   return $line unless $line =~ s#^(\d+\.\d+\.\d+\.\d+)##;
   my $ip = $1;

 # Make sure we&#39;re the only one to access the resolved hash now
 # If there is already information for this IP number
 #  Return what is there with the line if it was resolved already

   {lock( %resolved );
    if (exists( $resolved{$ip} )) {
      return ($resolved{$ip} || $ip).$line unless ref( $resolved{$ip} );

 #  Set the rest of the line in the todo hash, keyed to jobid
 #  Set the flag that this result should not be set in the result hash
 #  And return without anything (thread will continue with next job)

      $resolved{$ip}-&#62;{Thread::Pool-&#62;jobid} = $line;
      Thread::Pool-&#62;dont_set_result;
      return;

 # Else (first time this IP number is encountered)
 #  Create a empty shared hash
 #  Save a reference to the hash in the todo hash as info for this IP number

    } else {
      my %hash : shared;
      $resolved{$ip} = \%hash;
    }
   } #%resolved

 # Do the actual name resolving (may take quite some time) or use IP number
 # Obtain local copy of the Thread::Pool object
 # Obtain local copy of the todo hash

   my $domain = gethostbyaddr( pack( &#39;C4&#39;,split(/\./,$ip)),2 ) || $ip;
   my $pool = Thread::Pool-&#62;self;
   my $todo = $resolved{$ip};

 # Make sure we&#39;re the only one accessing the resolved hash (rest of this sub)
 # For all the lines with this IP number
 #  Set the results
 # Remove the todo hash and replace by domain or blank string if unresolvable
 # Return the result for this job

   lock( %resolved );
   while (my $key = each %{$todo}) {
       $pool-&#62;set_result( $key,$domain.$todo-&#62;{$key} )
   }
   $resolved{$ip} = $domain eq $ip ? undef : $domain;
   $domain.$line;
 } #do</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Elizabeth Mattijsen, &#60;liz@dijkmat.nl&#62;.</p>

<p>Please report bugs to &#60;perlbugs@dijkmat.nl&#62;.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2002, 2003, 2010 Elizabeth Mattijsen &#60;liz@dijkmat.nl&#62;. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?threads" class="podlinkpod"
>threads</a>, <a href="/perldoc?Thread%3A%3AConveyor" class="podlinkpod"
>Thread::Conveyor</a>, <a href="/perldoc?Thread%3A%3AConveyor%3A%3AMonitored" class="podlinkpod"
>Thread::Conveyor::Monitored</a>, <a href="/perldoc?Thread%3A%3ASerialize" class="podlinkpod"
>Thread::Serialize</a>.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78063 Uploads, 24686 Distributions
105893 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sun Apr 22 07:22:50 2012 GMT (0.164928913116455) @cpansearch1 -->
 </body>
</html>
