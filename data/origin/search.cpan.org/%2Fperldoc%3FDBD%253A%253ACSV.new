<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>DBD::CSV - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","DBD-CSV",3]);
    _gaq.push(["_setCustomVar",5,"Release","DBD-CSV-0.33",3]);
    _gaq.push(["_setCustomVar",3,"Module","DBD::CSV",3]);
    _gaq.push(["_setCustomVar",1,"Author","HMBRAND",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?DBD::CSV">permalink</a></div>
  <a href="/~hmbrand/">H.Merijn Brand</a> &gt;
  <a href="/~hmbrand/DBD-CSV-0.33/">DBD-CSV-0.33</a> &gt;
  DBD::CSV
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/a5e0d99fa9567ce0042126931972770a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/H/HM/HMBRAND/DBD-CSV-0.33.tgz">DBD-CSV-0.33.tgz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=DBD%3A%3ACSV;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~HMBRAND/DBD-CSV-0.33/lib/DBD/CSV.pm">Annotate this POD
(9)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Text%3A%3ACSV_XS">Text::CSV_XS</a><br>
<a href="/perldoc?SQL%3A%3AStatement">SQL::Statement</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Text%3A%3ACSV">Text::CSV</a><br>
<a href="/perldoc?DBD%3A%3AAnyData">DBD::AnyData</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?Text%3A%3AxSV">Text::xSV</a><br>
<a href="/perldoc?DBD%3A%3ARAM">DBD::RAM</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?DBD%3A%3AFile">DBD::File</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=DBD%3A%3ACSV">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=DBD-CSV">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.33 &nbsp;
<span class="noprint">
  <a href="/src/HMBRAND/DBD-CSV-0.33/lib/DBD/CSV.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Prerequisites'>Prerequisites</a>
    <li class='indexItem indexItem2'><a href='#Installation'>Installation</a>
    <li class='indexItem indexItem2'><a href='#Supported_SQL_Syntax'>Supported SQL Syntax</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Using_DBD::CSV_with_DBI'>Using DBD::CSV with DBI</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Creating_a_database_handle_(connect)'>Creating a database handle (connect)</a>
    <li class='indexItem indexItem2'><a href='#Creating_and_dropping_tables'>Creating and dropping tables</a>
    <li class='indexItem indexItem2'><a href='#Inserting,_fetching_and_modifying_data'>Inserting, fetching and modifying data</a>
    <li class='indexItem indexItem2'><a href='#Error_handling'>Error handling</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#DBI_database_handle_attributes'>DBI database handle attributes</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Metadata'>Metadata</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#DBD-CSV_specific_database_handle_attributes'>DBD-CSV specific database handle attributes</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Driver_private_methods'>Driver private methods</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#KNOWN_ISSUES'>KNOWN ISSUES</a>
  <li class='indexItem indexItem1'><a href='#TODO'>TODO</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS_and_MAINTAINERS'>AUTHORS and MAINTAINERS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>DBD::CSV - DBI driver for CSV files</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use DBI;
    # See &#34;Creating database handle&#34; below
    $dbh = DBI-&#62;connect (&#34;dbi:CSV:&#34;) or
        die &#34;Cannot connect: $DBI::errstr&#34;;

    # Simple statements
    $dbh-&#62;do (&#34;CREATE TABLE a (id INTEGER, name CHAR (10))&#34;) or
        die &#34;Cannot prepare: &#34; . $dbh-&#62;errstr ();

    # Selecting
    $dbh-&#62;{RaiseError} = 1;
    my $sth = $dbh-&#62;prepare (&#34;select * from foo&#34;);
    $sth-&#62;execute;
    while (my @row = $sth-&#62;fetchrow_array) {
        print &#34;id: $row[0], name: $row[1]\n&#34;;
        }

    # Updates
    my $sth = $dbh-&#62;prepare (&#34;UPDATE a SET name = ? WHERE id = ?&#34;);
    $sth-&#62;execute (&#34;DBI rocks!&#34;, 1);
    $sth-&#62;finish;

    $dbh-&#62;disconnect;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The DBD::CSV module is yet another driver for the DBI (Database independent interface for Perl). This one is based on the SQL &#34;engine&#34; SQL::Statement and the abstract DBI driver DBD::File and implements access to so-called CSV files (Comma Separated Values). Such files are often used for exporting MS Access and MS Excel data.</p>

<p>See <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> for details on DBI, <a href="/perldoc?SQL%3A%3AStatement" class="podlinkpod"
>SQL::Statement</a> for details on SQL::Statement and <a href="/perldoc?DBD%3A%3AFile" class="podlinkpod"
>DBD::File</a> for details on the base class DBD::File.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Prerequisites"
>Prerequisites</a></h2>

<p>The only system dependent feature that DBD::File uses, is the <code>flock ()</code> function. Thus the module should run (in theory) on any system with a working <code>flock ()</code>, in particular on all Unix machines and on Windows NT. Under Windows 95 and MacOS the use of <code>flock ()</code> is disabled, thus the module should still be usable.</p>

<p>Unlike other DBI drivers, you don&#39;t need an external SQL engine or a running server. All you need are the following Perl modules, available from any CPAN mirror, for example</p>

<pre class="sh_perl">  <a href="http://search.cpan.org/" class="podlinkurl"
>http://search.cpan.org/</a></pre>

<dl>
<dt><a name="DBI"
>DBI</a></dt>

<dd>
<p>The DBI (Database independent interface for Perl), version 1.00 or a later release</p>

<dt><a name='DBD'></a><a name="DBD::File"
>DBD::File</a></dt>

<dd>
<p>This is the base class for DBD::CSV, and it is part of the DBI distribution. As DBD::CSV requires version 0.38 or newer for DBD::File it effectively requires DBI version 1.611 or newer.</p>

<dt><a name='SQL'></a><a name="SQL::Statement"
>SQL::Statement</a></dt>

<dd>
<p>A simple SQL engine. This module defines all of the SQL syntax for DBD::CSV, new SQL support is added with each release so you should look for updates to SQL::Statement regularly.</p>

<p>It is possible to run <code>DBD::CSV</code> without this module if you define the environment variable <code>$DBI_SQL_NANO</code> to 1. This will reduce the SQL support a lot though. See <a href="/perldoc?DBI%3A%3ASQL%3A%3ANano" class="podlinkpod"
>DBI::SQL::Nano</a> for more details. Note that the test suite does not test in this mode!</p>

<dt><a name='Text'></a><a name="Text::CSV_XS"
>Text::CSV_XS</a></dt>

<dd>
<p>This module is used for writing rows to or reading rows from CSV files.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Installation"
>Installation</a></h2>

<p>Installing this module (and the prerequisites from above) is quite simple. The simplest way is to install the bundle:</p>

<pre class="sh_perl">    $ cpan Bundle::CSV</pre>

<p>Alternatively, you can name them all</p>

<pre class="sh_perl">    $ cpan Text::CSV_XS DBI DBD::CSV</pre>

<p>or even trust <code>cpan</code> to resolve all dependencies for you:</p>

<pre class="sh_perl">    $ cpan DBD::CSV</pre>

<p>If you cannot, for whatever reason, use cpan, fetch all modules from CPAN, and build with a sequence like:</p>

<pre class="sh_perl">    gzip -d &#60; DBD-CSV-0.28.tgz | tar xf -</pre>

<p>(this is for Unix users, Windows users would prefer WinZip or something similar) and then enter the following:</p>

<pre class="sh_perl">    cd DBD-CSV-0.28
    perl Makefile.PL
    make test</pre>

<p>If any tests fail, let us know. Otherwise go on with</p>

<pre class="sh_perl">    make install UNINST=1</pre>

<p>Note that you almost definitely need root or administrator permissions. If you don&#39;t have them, read the ExtUtils::MakeMaker man page for details on installing in your own directories. <a href="/perldoc?ExtUtils%3A%3AMakeMaker" class="podlinkpod"
>ExtUtils::MakeMaker</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Supported_SQL_Syntax"
>Supported SQL Syntax</a></h2>

<p>All SQL processing for DBD::CSV is done by the <a href="/perldoc?SQL%3A%3AStatement" class="podlinkpod"
>SQL::Statement</a> module. Features include joins, aliases, built-in and user-defined functions, and more. See <a href="/perldoc?SQL%3A%3AStatement%3A%3ASyntax" class="podlinkpod"
>SQL::Statement::Syntax</a> for a description of the SQL syntax supported in DBD::CSV.</p>

<p>Table names are case insensitive unless quoted.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Using_DBD::CSV_with_DBI"
>Using DBD::CSV with DBI <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>For most things, DBD-CSV operates the same as any DBI driver. See <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> for detailed usage.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Creating_a_database_handle_(connect)"
>Creating a database handle (connect)</a></h2>

<p>Creating a database handle usually implies connecting to a database server. Thus this command reads</p>

<pre class="sh_perl">    use DBI;
    my $dbh = DBI-&#62;connect (&#34;dbi:CSV:&#34;, &#34;&#34;, &#34;&#34;, {
        f_dir =&#62; &#34;/home/user/folder&#34;,
        });</pre>

<p>The directory tells the driver where it should create or open tables (a.k.a. files). It defaults to the current directory, so the following are equivalent:</p>

<pre class="sh_perl">    $dbh = DBI-&#62;connect (&#34;dbi:CSV:&#34;);
    $dbh = DBI-&#62;connect (&#34;dbi:CSV:&#34;, undef, undef, { f_dir =&#62; &#34;.&#34; });
    $dbh = DBI-&#62;connect (&#34;dbi:CSV:f_dir=.&#34;);</pre>

<p>We were told, that VMS might - for whatever reason - require:</p>

<pre class="sh_perl">    $dbh = DBI-&#62;connect (&#34;dbi:CSV:f_dir=&#34;);</pre>

<p>The preferred way of passing the arguments is by driver attributes:</p>

<pre class="sh_perl">    # specify most possible flags via driver flags
    $dbh = DBI-&#62;connect (&#34;dbi:CSV:&#34;, undef, undef, {
        f_schema         =&#62; undef,
        f_dir            =&#62; &#34;data&#34;,
        f_ext            =&#62; &#34;.csv/r&#34;,
        f_lock           =&#62; 2,
        f_encoding       =&#62; &#34;utf8&#34;,

        csv_eol          =&#62; &#34;\r\n&#34;,
        csv_sep_char     =&#62; &#34;,&#34;,
        csv_quote_char   =&#62; &#39;&#34;&#39;,
        csv_escape_char  =&#62; &#39;&#34;&#39;,
        csv_class        =&#62; &#34;Text::CSV_XS&#34;,
        csv_null         =&#62; 1,
        csv_tables       =&#62; {
            info =&#62; { file =&#62; &#34;info.csv&#34; }
            },

        RaiseError       =&#62; 1,
        PrintError       =&#62; 1,
        FetchHashKeyName =&#62; &#34;NAME_lc&#34;,
        }) or die $DBI::errstr;</pre>

<p>but you may set these attributes in the DSN as well, separated by semicolons. Pay attention to the semi-colon for <code>csv_sep_char</code> (as seen in many CSV exports from MS Excel) is being escaped in below example, as is would otherwise be seen as attribute separator:</p>

<pre class="sh_perl">    $dbh = DBI-&#62;connect (
        &#34;dbi:CSV:f_dir=$ENV{HOME}/csvdb;f_ext=.csv;f_lock=2;&#34; .
        &#34;f_encoding=utf8;csv_eol=\n;csv_sep_char=\\;;&#34; .
        &#34;csv_quote_char=\&#34;;csv_escape_char=\\;csv_class=Text::CSV_XS;&#34; .
        &#34;csv_null=1&#34;) or die $DBI::errstr;</pre>

<p>Using attributes in the DSN is easier to use when the DSN is derived from an outside source (environment variable, database entry, or configure file), whereas using all entries in the attribute hash is easier to read and to maintain.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Creating_and_dropping_tables"
>Creating and dropping tables</a></h2>

<p>You can create and drop tables with commands like the following:</p>

<pre class="sh_perl">    $dbh-&#62;do (&#34;CREATE TABLE $table (id INTEGER, name CHAR (64))&#34;);
    $dbh-&#62;do (&#34;DROP TABLE $table&#34;);</pre>

<p>Note that currently only the column names will be stored and no other data. Thus all other information including column type (INTEGER or CHAR (x), for example), column attributes (NOT NULL, PRIMARY KEY, ...) will silently be discarded. This may change in a later release.</p>

<p>A drop just removes the file without any warning.</p>

<p>See <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> for more details.</p>

<p>Table names cannot be arbitrary, due to restrictions of the SQL syntax. I recommend that table names are valid SQL identifiers: The first character is alphabetic, followed by an arbitrary number of alphanumeric characters. If you want to use other files, the file names must start with &#34;/&#34;, &#34;./&#34; or &#34;../&#34; and they must not contain white space.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Inserting,_fetching_and_modifying_data"
>Inserting, fetching and modifying data</a></h2>

<p>The following examples insert some data in a table and fetch it back: First all data in the string:</p>

<pre class="sh_perl">    $dbh-&#62;do (&#34;INSERT INTO $table VALUES (1, &#34;.
               $dbh-&#62;quote (&#34;foobar&#34;) . &#34;)&#34;);</pre>

<p>Note the use of the quote method for escaping the word &#34;foobar&#34;. Any string must be escaped, even if it does not contain binary data.</p>

<p>Next an example using parameters:</p>

<pre class="sh_perl">    $dbh-&#62;do (&#34;INSERT INTO $table VALUES (?, ?)&#34;, undef, 2,
              &#34;It&#39;s a string!&#34;);</pre>

<p>Note that you don&#39;t need to use the quote method here, this is done automatically for you. This version is particularly well designed for loops. Whenever performance is an issue, I recommend using this method.</p>

<p>You might wonder about the <code>undef</code>. Don&#39;t wonder, just take it as it is. :-) It&#39;s an attribute argument that I have never ever used and will be parsed to the prepare method as a second argument.</p>

<p>To retrieve data, you can use the following:</p>

<pre class="sh_perl">    my $query = &#34;SELECT * FROM $table WHERE id &#62; 1 ORDER BY id&#34;;
    my $sth   = $dbh-&#62;prepare ($query);
    $sth-&#62;execute ();
    while (my $row = $sth-&#62;fetchrow_hashref) {
        print &#34;Found result row: id = &#34;, $row-&#62;{id},
              &#34;, name = &#34;, $row-&#62;{name};
        }
    $sth-&#62;finish ();</pre>

<p>Again, column binding works: The same example again.</p>

<pre class="sh_perl">    my $sth = $dbh-&#62;prepare (qq;
        SELECT * FROM $table WHERE id &#62; 1 ORDER BY id;
        ;);
    $sth-&#62;execute;
    my ($id, $name);
    $sth-&#62;bind_columns (undef, \$id, \$name);
    while ($sth-&#62;fetch) {
        print &#34;Found result row: id = $id, name = $name\n&#34;;
        }
    $sth-&#62;finish;</pre>

<p>Of course you can even use input parameters. Here&#39;s the same example for the third time:</p>

<pre class="sh_perl">    my $sth = $dbh-&#62;prepare (&#34;SELECT * FROM $table WHERE id = ?&#34;);
    $sth-&#62;bind_columns (undef, \$id, \$name);
    for (my $i = 1; $i &#60;= 2; $i++) {
        $sth-&#62;execute ($id);
        if ($sth-&#62;fetch) {
            print &#34;Found result row: id = $id, name = $name\n&#34;;
            }
        $sth-&#62;finish;
        }</pre>

<p>See <a href="/perldoc?DBI" class="podlinkpod"
>DBI</a> for details on these methods. See <a href="/perldoc?SQL%3A%3AStatement" class="podlinkpod"
>SQL::Statement</a> for details on the WHERE clause.</p>

<p>Data rows are modified with the UPDATE statement:</p>

<pre class="sh_perl">    $dbh-&#62;do (&#34;UPDATE $table SET id = 3 WHERE id = 1&#34;);</pre>

<p>Likewise you use the DELETE statement for removing rows:</p>

<pre class="sh_perl">    $dbh-&#62;do (&#34;DELETE FROM $table WHERE id &#62; 1&#34;);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Error_handling"
>Error handling</a></h2>

<p>In the above examples we have never cared about return codes. Of course, this cannot be recommended. Instead we should have written (for example):</p>

<pre class="sh_perl">    my $sth = $dbh-&#62;prepare (&#34;SELECT * FROM $table WHERE id = ?&#34;) or
        die &#34;prepare: &#34; . $dbh-&#62;errstr ();
    $sth-&#62;bind_columns (undef, \$id, \$name) or
        die &#34;bind_columns: &#34; . $dbh-&#62;errstr ();
    for (my $i = 1; $i &#60;= 2; $i++) {
        $sth-&#62;execute ($id) or
            die &#34;execute: &#34; . $dbh-&#62;errstr ();
        $sth-&#62;fetch and
            print &#34;Found result row: id = $id, name = $name\n&#34;;
        }
    $sth-&#62;finish ($id) or die &#34;finish: &#34; . $dbh-&#62;errstr ();</pre>

<p>Obviously this is tedious. Fortunately we have DBI&#39;s <i>RaiseError</i> attribute:</p>

<pre class="sh_perl">    $dbh-&#62;{RaiseError} = 1;
    $@ = &#34;&#34;;
    eval {
        my $sth = $dbh-&#62;prepare (&#34;SELECT * FROM $table WHERE id = ?&#34;);
        $sth-&#62;bind_columns (undef, \$id, \$name);
        for (my $i = 1; $i &#60;= 2; $i++) {
            $sth-&#62;execute ($id);
            $sth-&#62;fetch and
                print &#34;Found result row: id = $id, name = $name\n&#34;;
            }
        $sth-&#62;finish ($id);
        };
    $@ and die &#34;SQL database error: $@&#34;;</pre>

<p>This is not only shorter, it even works when using DBI methods within subroutines.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DBI_database_handle_attributes"
>DBI database handle attributes <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Metadata"
>Metadata</a></h2>

<p>The following attributes are handled by DBI itself and not by DBD::File, thus they all work as expected:</p>

<pre class="sh_perl">    Active
    ActiveKids
    CachedKids
    CompatMode             (Not used)
    InactiveDestroy
    Kids
    PrintError
    RaiseError
    Warn                   (Not used)</pre>

<p>The following DBI attributes are handled by DBD::File:</p>

<dl>
<dt><a name="AutoCommit"
>AutoCommit</a></dt>

<dd>
<p>Always on</p>

<dt><a name="ChopBlanks"
>ChopBlanks</a></dt>

<dd>
<p>Works</p>

<dt><a name="NUM_OF_FIELDS"
>NUM_OF_FIELDS</a></dt>

<dd>
<p>Valid after <code>$sth-&#62;execute</code></p>

<dt><a name="NUM_OF_PARAMS"
>NUM_OF_PARAMS</a></dt>

<dd>
<p>Valid after <code>$sth-&#62;prepare</code></p>

<dt><a name="NAME"
>NAME</a></dt>

<dd>
<dt><a name="NAME_lc"
>NAME_lc</a></dt>

<dd>
<dt><a name="NAME_uc"
>NAME_uc</a></dt>

<dd>
<p>Valid after <code>$sth-&#62;execute</code>; undef for Non-Select statements.</p>

<dt><a name="NULLABLE"
>NULLABLE</a></dt>

<dd>
<p>Not really working. Always returns an array ref of one&#39;s, as DBD::CSV does not verify input data. Valid after <code>$sth-&#62;execute</code>; undef for non-Select statements.</p>
</dd>
</dl>

<p>These attributes and methods are not supported:</p>

<pre class="sh_perl">    bind_param_inout
    CursorName
    LongReadLen
    LongTruncOk</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DBD-CSV_specific_database_handle_attributes"
>DBD-CSV specific database handle attributes <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>In addition to the DBI attributes, you can use the following dbh attributes:</p>

<dl>
<dt><a name="f_dir"
>f_dir</a></dt>

<dd>
<p>This attribute is used for setting the directory where CSV files are opened. Usually you set it in the dbh, it defaults to the current directory (&#34;.&#34;). However, it is overwritable in the statement handles.</p>

<dt><a name="f_ext"
>f_ext</a></dt>

<dd>
<p>This attribute is used for setting the file extension.</p>

<dt><a name="f_schema"
>f_schema</a></dt>

<dd>
<p>This attribute allows you to set the database schema name. The default is to use the owner of <code>f_dir</code>. <code>undef</code> is allowed, but not in the DSN part.</p>

<pre class="sh_perl">    my $dbh = DBI-&#62;connect (&#34;dbi:CSV:&#34;, &#34;&#34;, &#34;&#34;, {
        f_schema =&#62; undef,
        f_dir    =&#62; &#34;data&#34;,
        f_ext    =&#62; &#34;.csv/r&#34;,
        }) or die $DBI::errstr;</pre>

<dt><a name="f_encoding"
>f_encoding</a></dt>

<dd>
<p>This attribute allows you to set the encoding of the data. With CSV, it is not possible to set (and remember) the encoding on a per-field basis, but DBD::File now allows to set the encoding of the underlying file. If this attribute is not set, or undef is passed, the file will be seen as binary.</p>

<dt><a name="f_lock"
>f_lock</a></dt>

<dd>
<p>With this attribute, you can force locking mode (if locking is supported at all) for opening tables. By default, tables are opened with a shared lock for reading, and with an exclusive lock for writing. The supported modes are:</p>

<dl>
<dt><a name="0"
>0</a></dt>

<dd>
<p>Force no locking at all.</p>

<dt><a name="1"
>1</a></dt>

<dd>
<p>Only shared locks will be used.</p>

<dt><a name="2"
>2</a></dt>

<dd>
<p>Only exclusive locks will be used.</p>
</dd>
</dl>

<p>But see <a href="/perldoc?DBD%3A%3AFile#KNOWN_BUGS" class="podlinkpod"
>&#34;KNOWN BUGS&#34; in DBD::File</a>.</p>

<dt><a name="csv_eol"
>csv_eol</a></dt>

<dd>
<dt><a name="csv_sep_char"
>csv_sep_char</a></dt>

<dd>
<dt><a name="csv_quote_char"
>csv_quote_char</a></dt>

<dd>
<dt><a name="csv_escape_char"
>csv_escape_char</a></dt>

<dd>
<dt><a name="csv_class"
>csv_class</a></dt>

<dd>
<dt><a name="csv_csv"
>csv_csv</a></dt>

<dd>
<p>The attributes <i>csv_eol</i>, <i>csv_sep_char</i>, <i>csv_quote_char</i> and <i>csv_escape_char</i> are corresponding to the respective attributes of the Text::CSV_XS object. You want to set these attributes if you have unusual CSV files like <em>/etc/passwd</em> or MS Excel generated CSV files with a semicolon as separator. Defaults are &#34;\015\012&#34;, &#39;;&#39;, &#39;&#34;&#39; and &#39;&#34;&#39;, respectively.</p>

<p>The <i>csv_eol</i> attribute defines the end-of-line pattern, which is better known as a record separator pattern since it separates records. The default is windows-style end-of-lines &#34;\015\012&#34; for output (writing) and unset for input (reading), so if on unix you may want to set this to newline (&#34;\n&#34;) like this:</p>

<pre class="sh_perl">  $dbh-&#62;{csv_eol} = &#34;\n&#34;;</pre>

<p>It is also possible to use multi-character patterns as record separators. For example this file uses newlines as field separators (sep_char) and the pattern &#34;\n__ENDREC__\n&#34; as the record separators (eol):</p>

<pre class="sh_perl">  name
  city
  __ENDREC__
  joe
  seattle
  __ENDREC__
  sue
  portland
  __ENDREC__</pre>

<p>To handle this file, you&#39;d do this:</p>

<pre class="sh_perl">  $dbh-&#62;{eol}      = &#34;\n__ENDREC__\n&#34; ,
  $dbh-&#62;{sep_char} = &#34;\n&#34;</pre>

<p>The attributes are used to create an instance of the class <i>csv_class</i>, by default Text::CSV_XS. Alternatively you may pass an instance as <i>csv_csv</i>, the latter takes precedence. Note that the <i>binary</i> attribute <i>must</i> be set to a true value in that case.</p>

<p>Additionally you may overwrite these attributes on a per-table base in the <i>csv_tables</i> attribute.</p>

<dt><a name="csv_null"
>csv_null</a></dt>

<dd>
<p>With this option set, all new statement handles will set <code>always_quote</code> and <code>blank_is_undef</code> in the CSV parser and writer, so it knows how to distinguish between the empty string and <code>undef</code> or <code>NULL</code>. You cannot reset it with a false value. You can pass it to connect, or set it later:</p>

<pre class="sh_perl">  $dbh = DBI-&#62;connect (&#34;dbi:CSV:&#34;, &#34;&#34;, &#34;&#34;, { csv_null =&#62; 1 });

  $dbh-&#62;{csv_null} = 1;</pre>

<dt><a name="csv_tables"
>csv_tables</a></dt>

<dd>
<p>This hash ref is used for storing table dependent metadata. For any table it contains an element with the table name as key and another hash ref with the following attributes:</p>

<dt><a name='csv_'></a><a name="csv_*"
>csv_*</a></dt>

<dd>
<p>All other attributes that start with <code>csv_</code> and are not described above will be passed to <code>Text::CSV_XS</code> (without the <code>csv_</code> prefix). these extra options are most likely to be only useful for reading (select) handles. Examples:</p>

<pre class="sh_perl">  $dbh-&#62;{csv_allow_whitespace}    = 1;
  $dbh-&#62;{csv_allow_loose_quotes}  = 1;
  $dbh-&#62;{csv_allow_loose_escapes} = 1;</pre>

<p>See the <code>Text::CSV_XS</code> documentation for the full list and the documentation.</p>

<dl>
<dt><a name="file"
>file</a></dt>

<dd>
<p>The tables file name; defaults to</p>

<pre class="sh_perl">    &#34;$dbh-&#62;{f_dir}/$table&#34;</pre>

<dt><a name="eol"
>eol</a></dt>

<dd>
<dt><a name="sep_char"
>sep_char</a></dt>

<dd>
<dt><a name="quote_char"
>quote_char</a></dt>

<dd>
<dt><a name="escape_char"
>escape_char</a></dt>

<dd>
<dt><a name="class"
>class</a></dt>

<dd>
<dt><a name="csv"
>csv</a></dt>

<dd>
<p>These correspond to the attributes <i>csv_eol</i>, <i>csv_sep_char</i>, <i>csv_quote_char</i>, <i>csv_escape_char</i>, <i>csv_class</i> and <i>csv_csv</i>. The difference is that they work on a per-table base.</p>

<dt><a name="col_names"
>col_names</a></dt>

<dd>
<dt><a name="skip_first_row"
>skip_first_row</a></dt>

<dd>
<p>By default DBD::CSV assumes that column names are stored in the first row of the CSV file and sanitizes them (see <code>raw_header</code> below). If this is not the case, you can supply an array ref of table names with the <i>col_names</i> attribute. In that case the attribute <i>skip_first_row</i> will be set to FALSE.</p>

<p>If you supply an empty array ref, the driver will read the first row for you, count the number of columns and create column names like <code>col0</code>, <code>col1</code>, ...</p>

<dt><a name="raw_header"
>raw_header</a></dt>

<dd>
<p>Due to the SQL standard, field names cannot contain special characters like a dot (<code>.</code>). Following the approach of mdb_tools, all these tokens are translated to an underscore (<code>_</code>) when reading the first line of the CSV file, so all field names are `sanitized&#39;. If you do not want this to happen, set <code>raw_header</code> to a true value. DBD::CSV cannot guarantee that any part in the toolchain will work if field names have those characters, and the chances are high that the SQL statements will fail.</p>
</dd>
</dl>
</dd>
</dl>

<p>It&#39;s strongly recommended to check the attributes supported by <a href="/perldoc?DBD%3A%3AFile#Metadata" class="podlinkpod"
>&#34;Metadata&#34; in DBD::File</a>.</p>

<p>Example: Suggest you want to use <em>/etc/passwd</em> as a CSV file. :-) There simplest way is:</p>

<pre class="sh_perl">    use DBI;
    my $dbh = DBI-&#62;connect (&#34;dbi:CSV:&#34;, undef, undef, {
        f_dir           =&#62; &#34;/etc&#34;,
        csv_sep_char    =&#62; &#34;:&#34;,
        csv_quote_char  =&#62; undef,
        csv_escape_char =&#62; undef,
        });
    $dbh-&#62;{csv_tables}{passwd} = {
        col_names =&#62; [qw( login password uid gid realname
                          directory shell )];
        };
    $sth = $dbh-&#62;prepare (&#34;SELECT * FROM passwd&#34;);</pre>

<p>Another possibility where you leave all the defaults as they are and overwrite them on a per table base:</p>

<pre class="sh_perl">    require DBI;
    my $dbh = DBI-&#62;connect (&#34;dbi:CSV:&#34;);
    $dbh-&#62;{csv_tables}{passwd} = {
        eol         =&#62; &#34;\n&#34;,
        sep_char    =&#62; &#34;:&#34;,
        quote_char  =&#62; undef,
        escape_char =&#62; undef,
        file        =&#62; &#34;/etc/passwd&#34;,
        col_names   =&#62; [qw( login password uid gid
                            realname directory shell )],
        };
    $sth = $dbh-&#62;prepare (&#34;SELECT * FROM passwd&#34;);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Driver_private_methods"
>Driver private methods</a></h2>

<p>These methods are inherited from DBD::File:</p>

<dl>
<dt><a name="data_sources"
>data_sources</a></dt>

<dd>
<p>The <code>data_sources</code> method returns a list of sub-directories of the current directory in the form &#34;dbi:CSV:directory=$dirname&#34;.</p>

<p>If you want to read the sub-directories of another directory, use</p>

<pre class="sh_perl">    my $drh  = DBI-&#62;install_driver (&#34;CSV&#34;);
    my @list = $drh-&#62;data_sources (f_dir =&#62; &#34;/usr/local/csv_data&#34;);</pre>

<dt><a name="list_tables"
>list_tables</a></dt>

<dd>
<p>This method returns a list of file names inside $dbh-&#62;{directory}. Example:</p>

<pre class="sh_perl">    my $dbh  = DBI-&#62;connect (&#34;dbi:CSV:directory=/usr/local/csv_data&#34;);
    my @list = $dbh-&#62;func (&#34;list_tables&#34;);</pre>

<p>Note that the list includes all files contained in the directory, even those that have non-valid table names, from the view of SQL. See <a href="#Creating_and_dropping_tables" class="podlinkpod"
>&#34;Creating and dropping tables&#34;</a> above.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="KNOWN_ISSUES"
>KNOWN ISSUES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li>The module is using flock () internally. However, this function is not available on platforms. Using flock () is disabled on MacOS and Windows 95: There&#39;s no locking at all (perhaps not so important on these operating systems, as they are for single users anyways).</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TODO"
>TODO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name="Tests"
>Tests</a></dt>

<dd>
<p>Aim for a full 100% code coverage</p>

<pre class="sh_perl"> - eol      Make tests for different record separators.
 - csv_xs   Test with a variety of combinations for
            sep_char, quote_char, and escape_char testing
 - quoting  $dbh-&#62;do (&#34;drop table $_&#34;) for DBI-tables ();
 - errors   Make sure that all documented exceptions are tested.
            . write to write-protected file
            . read from badly formatted csv
            . pass bad arguments to csv parser while fetching</pre>

<p>Add tests that specifically test DBD::File functionality where that is useful.</p>

<dt><a name="RT"
>RT</a></dt>

<dd>
<p>Attack all open DBD::CSV bugs in RT</p>

<dt><a name='CPAN'></a><a name="CPAN::Forum"
>CPAN::Forum</a></dt>

<dd>
<p>Attack all items in <a href="http://www.cpanforum.com/dist/DBD-CSV" class="podlinkurl"
>http://www.cpanforum.com/dist/DBD-CSV</a></p>

<dt><a name="Documentation"
>Documentation</a></dt>

<dd>
<p>Expand on error-handling, and document all possible errors. Use Text::CSV_XS::error_diag () wherever possible.</p>

<dt><a name="Debugging"
>Debugging</a></dt>

<dd>
<p>Implement and document dbd_verbose.</p>

<dt><a name='Data'></a><a name="Data_dictionary"
>Data dictionary</a></dt>

<dd>
<p>Investigate the possibility to store the data dictionary in a file like .sys$columns that can store the field attributes (type, key, nullable).</p>

<dt><a name="Examples"
>Examples</a></dt>

<dd>
<p>Make more real-life examples from the docs in examples/</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?DBI" class="podlinkpod"
>DBI</a>, <a href="/perldoc?Text%3A%3ACSV_XS" class="podlinkpod"
>Text::CSV_XS</a>, <a href="/perldoc?SQL%3A%3AStatement" class="podlinkpod"
>SQL::Statement</a>, <a href="/perldoc?DBI%3A%3ASQL%3A%3ANano" class="podlinkpod"
>DBI::SQL::Nano</a></p>

<p>For help on the use of <a href="/~hmbrand/DBD-CSV-0.33/lib/DBD/CSV.pm" class="podlinkpod"
>DBD::CSV</a>, see the DBI users mailing list:</p>

<pre class="sh_perl">  <a href="http://lists.cpan.org/showlist.cgi?name=dbi-users" class="podlinkurl"
>http://lists.cpan.org/showlist.cgi?name=dbi-users</a></pre>

<p>For general information on DBI see</p>

<pre class="sh_perl">  <a href="http://dbi.perl.org/" class="podlinkurl"
>http://dbi.perl.org/</a> and <a href="http://faq.dbi-support.com/" class="podlinkurl"
>http://faq.dbi-support.com/</a></pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS_and_MAINTAINERS"
>AUTHORS and MAINTAINERS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is currently maintained by</p>

<pre class="sh_perl">    H.Merijn Brand &#60;h.m.brand@xs4all.nl&#62;</pre>

<p>in close cooperation with and help from</p>

<pre class="sh_perl">    Jens Rehsack &#60;sno@NetBSD.org&#62;</pre>

<p>The original author is Jochen Wiedmann. Previous maintainer was Jeff Zucker</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (C) 2009-2011 by H.Merijn Brand Copyright (C) 2004-2009 by Jeff Zucker Copyright (C) 1998-2004 by Jochen Wiedmann</p>

<p>All rights reserved.</p>

<p>You may distribute this module under the terms of either the GNU General Public License or the Artistic License, as specified in the Perl README file.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78255 Uploads, 24722 Distributions
105996 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 12:03:43 2012 GMT (0.993639945983887) @cpansearch1 -->
 </body>
</html>
