<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Carp::Assert - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Carp-Assert",3]);
    _gaq.push(["_setCustomVar",5,"Release","Carp-Assert-0.20",3]);
    _gaq.push(["_setCustomVar",3,"Module","Carp::Assert",3]);
    _gaq.push(["_setCustomVar",1,"Author","MSCHWERN",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Carp::Assert">permalink</a></div>
  <a href="/~mschwern/">Michael G Schwern</a> &gt;
  <a href="/~mschwern/Carp-Assert-0.20/">Carp-Assert-0.20</a> &gt;
  Carp::Assert
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/db1a33946e2a8577b8d3377d0715bf61?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/M/MS/MSCHWERN/Carp-Assert-0.20.tar.gz">Carp-Assert-0.20.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Carp%3A%3AAssert;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~MSCHWERN/Carp-Assert-0.20/lib/Carp/Assert.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Log%3A%3ALog4perl">Log::Log4perl</a><br>
<a href="/perldoc?Params%3A%3AValidate">Params::Validate</a><br>
<a href="/perldoc?HTML%3A%3AIndex">HTML::Index</a><br>
<a href="/perldoc?Test%3A%3AMore">Test::More</a><br>
<a href="/perldoc?List%3A%3AUtil">List::Util</a><br>
<a href="/perldoc?Lingua%3A%3AStem">Lingua::Stem</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Class%3A%3AContract">Class::Contract</a><br>
<a href="/perldoc?Test%3A%3AHarness">Test::Harness</a><br>
<a href="/perldoc?Devel%3A%3ACover">Devel::Cover</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Carp%3A%3AAssert">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 2</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Carp-Assert">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.20 &nbsp;
<span class="noprint">
  <a href="/src/MSCHWERN/Carp-Assert-0.20/lib/Carp/Assert.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <li class='indexItem indexItem1'><a href='#Debugging_vs_Production'>Debugging vs Production</a>
  <li class='indexItem indexItem1'><a href='#Differences_from_ANSI_C'>Differences from ANSI C</a>
  <li class='indexItem indexItem1'><a href='#EFFICIENCY'>EFFICIENCY</a>
  <li class='indexItem indexItem1'><a href='#ENVIRONMENT'>ENVIRONMENT</a>
  <li class='indexItem indexItem1'><a href='#BUGS,_CAVETS_and_other_MUSINGS'>BUGS, CAVETS and other MUSINGS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Conflicts_with_POSIX.pm'>Conflicts with POSIX.pm</a>
    <li class='indexItem indexItem2'><a href='#affirm_and_$^S'>affirm and $^S</a>
    <li class='indexItem indexItem2'><a href='#shouldn&#39;t'>shouldn&#39;t</a>
    <li class='indexItem indexItem2'><a href='#missing_if_DEBUG'>missing if DEBUG</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Carp::Assert - executable comments</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    # Assertions are on.
    use Carp::Assert;

    $next_sunrise_time = sunrise();

    # Assert that the sun must rise in the next 24 hours.
    assert(($next_sunrise_time - time) &#60; 24*60*60) if DEBUG;

    # Assert that your customer&#39;s primary credit card is active
    affirm {
        my @cards = @{$customer-&#62;credit_cards};
        $cards[0]-&#62;is_active;
    };


    # Assertions are off.
    no Carp::Assert;

    $next_pres = divine_next_president();

    # Assert that if you predict Dan Quayle will be the next president
    # your crystal ball might need some polishing.  However, since
    # assertions are off, IT COULD HAPPEN!
    shouldnt($next_pres, &#39;Dan Quayle&#39;) if DEBUG;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    &#34;We are ready for any unforseen event that may or may not 
    occur.&#34;
        - Dan Quayle</pre>

<p>Carp::Assert is intended for a purpose like the ANSI C library assert.h. If you&#39;re already familiar with assert.h, then you can probably skip this and go straight to the FUNCTIONS section.</p>

<p>Assertions are the explict expressions of your assumptions about the reality your program is expected to deal with, and a declaration of those which it is not. They are used to prevent your program from blissfully processing garbage inputs (garbage in, garbage out becomes garbage in, error out) and to tell you when you&#39;ve produced garbage output. (If I was going to be a cynic about Perl and the user nature, I&#39;d say there are no user inputs but garbage, and Perl produces nothing but...)</p>

<p>An assertion is used to prevent the impossible from being asked of your code, or at least tell you when it does. For example:</p>

<pre class="sh_perl">    # Take the square root of a number.
    sub my_sqrt {
        my($num) = shift;

        # the square root of a negative number is imaginary.
        assert($num &#62;= 0);

        return sqrt $num;
    }</pre>

<p>The assertion will warn you if a negative number was handed to your subroutine, a reality the routine has no intention of dealing with.</p>

<p>An assertion should also be used as something of a reality check, to make sure what your code just did really did happen:</p>

<pre class="sh_perl">    open(FILE, $filename) || die $!;
    @stuff = &#60;FILE&#62;;
    @stuff = do_something(@stuff);

    # I should have some stuff.
    assert(@stuff &#62; 0);</pre>

<p>The assertion makes sure you have some @stuff at the end. Maybe the file was empty, maybe do_something() returned an empty list... either way, the assert() will give you a clue as to where the problem lies, rather than 50 lines down at when you wonder why your program isn&#39;t printing anything.</p>

<p>Since assertions are designed for debugging and will remove themelves from production code, your assertions should be carefully crafted so as to not have any side-effects, change any variables, or otherwise have any effect on your program. Here is an example of a bad assertation:</p>

<pre class="sh_perl">    assert($error = 1 if $king ne &#39;Henry&#39;);  # Bad!</pre>

<p>It sets an error flag which may then be used somewhere else in your program. When you shut off your assertions with the $DEBUG flag, $error will no longer be set.</p>

<p>Here&#39;s another example of <b>bad</b> use:</p>

<pre class="sh_perl">    assert($next_pres ne &#39;Dan Quayle&#39; or goto Canada);  # Bad!</pre>

<p>This assertion has the side effect of moving to Canada should it fail. This is a very bad assertion since error handling should not be placed in an assertion, nor should it have side-effects.</p>

<p>In short, an assertion is an executable comment. For instance, instead of writing this</p>

<pre class="sh_perl">    # $life ends with a &#39;!&#39;
    $life = begin_life();</pre>

<p>you&#39;d replace the comment with an assertion which <b>enforces</b> the comment.</p>

<pre class="sh_perl">    $life = begin_life();
    assert( $life =~ /!$/ );</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name="assert"
><b>assert</b></a></dt>

<dd>
<pre class="sh_perl">    assert(EXPR) if DEBUG;
    assert(EXPR, $name) if DEBUG;</pre>

<p>assert&#39;s functionality is effected by compile time value of the DEBUG constant, controlled by saying <code>use Carp::Assert</code> or <code>no Carp::Assert</code>. In the former case, assert will function as below. Otherwise, the assert function will compile itself out of the program. See <a href="#Debugging_vs_Production" class="podlinkpod"
>&#34;Debugging vs Production&#34;</a> for details.</p>

<p>Give assert an expression, assert will Carp::confess() if that expression is false, otherwise it does nothing. (DO NOT use the return value of assert for anything, I mean it... really!).</p>

<p>The error from assert will look something like this:</p>

<pre class="sh_perl">    Assertion failed!
            Carp::Assert::assert(0) called at prog line 23
            main::foo called at prog line 50</pre>

<p>Indicating that in the file &#34;prog&#34; an assert failed inside the function main::foo() on line 23 and that foo() was in turn called from line 50 in the same file.</p>

<p>If given a $name, assert() will incorporate this into your error message, giving users something of a better idea what&#39;s going on.</p>

<pre class="sh_perl">    assert( Dogs-&#62;isa(&#39;People&#39;), &#39;Dogs are people, too!&#39; ) if DEBUG;
    # Result - &#34;Assertion (Dogs are people, too!) failed!&#34;</pre>

<dt><a name="affirm"
><b>affirm</b></a></dt>

<dd>
<pre class="sh_perl">    affirm BLOCK if DEBUG;
    affirm BLOCK $name if DEBUG;</pre>

<p>Very similar to assert(), but instead of taking just a simple expression it takes an entire block of code and evaluates it to make sure its true. This can allow more complicated assertions than assert() can without letting the debugging code leak out into production and without having to smash together several statements into one.</p>

<pre class="sh_perl">    affirm {
        my $customer = Customer-&#62;new($customerid);
        my @cards = $customer-&#62;credit_cards;
        grep { $_-&#62;is_active } @cards;
    } &#34;Our customer has an active credit card&#34;;</pre>

<p>affirm() also has the nice side effect that if you forgot the <code>if DEBUG</code> suffix its arguments will not be evaluated at all. This can be nice if you stick affirm()s with expensive checks into hot loops and other time-sensitive parts of your program.</p>

<p>If the $name is left off and your Perl version is 5.6 or higher the affirm() diagnostics will include the code begin affirmed.</p>

<dt><a name="should"
><b>should</b></a></dt>

<dd>
<dt><a name="shouldnt"
><b>shouldnt</b></a></dt>

<dd>
<pre class="sh_perl">    should  ($this, $shouldbe)   if DEBUG;
    shouldnt($this, $shouldntbe) if DEBUG;</pre>

<p>Similar to assert(), it is specially for simple &#34;this should be that&#34; or &#34;this should be anything but that&#34; style of assertions.</p>

<p>Due to Perl&#39;s lack of a good macro system, assert() can only report where something failed, but it can&#39;t report <i>what</i> failed or <i>how</i>. should() and shouldnt() can produce more informative error messages:</p>

<pre class="sh_perl">    Assertion (&#39;this&#39; should be &#39;that&#39;!) failed!
            Carp::Assert::should(&#39;this&#39;, &#39;that&#39;) called at moof line 29
            main::foo() called at moof line 58</pre>

<p>So this:</p>

<pre class="sh_perl">    should($this, $that) if DEBUG;</pre>

<p>is similar to this:</p>

<pre class="sh_perl">    assert($this eq $that) if DEBUG;</pre>

<p>except for the better error message.</p>

<p>Currently, should() and shouldnt() can only do simple eq and ne tests (respectively). Future versions may allow regexes.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Debugging_vs_Production"
>Debugging vs Production <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Because assertions are extra code and because it is sometimes necessary to place them in &#39;hot&#39; portions of your code where speed is paramount, Carp::Assert provides the option to remove its assert() calls from your program.</p>

<p>So, we provide a way to force Perl to inline the switched off assert() routine, thereby removing almost all performance impact on your production code.</p>

<pre class="sh_perl">    no Carp::Assert;  # assertions are off.
    assert(1==1) if DEBUG;</pre>

<p>DEBUG is a constant set to 0. Adding the &#39;if DEBUG&#39; condition on your assert() call gives perl the cue to go ahead and remove assert() call from your program entirely, since the if conditional will always be false.</p>

<pre class="sh_perl">    # With C&#60;no Carp::Assert&#62; the assert() has no impact.
    for (1..100) {
        assert( do_some_really_time_consuming_check ) if DEBUG;
    }</pre>

<p>If <code>if DEBUG</code> gets too annoying, you can always use affirm().</p>

<pre class="sh_perl">    # Once again, affirm() has (almost) no impact with C&#60;no Carp::Assert&#62;
    for (1..100) {
        affirm { do_some_really_time_consuming_check };
    }</pre>

<p>Another way to switch off all asserts, system wide, is to define the NDEBUG or the PERL_NDEBUG environment variable.</p>

<p>You can safely leave out the &#34;if DEBUG&#34; part, but then your assert() function will always execute (and its arguments evaluated and time spent). To get around this, use affirm(). You still have the overhead of calling a function but at least its arguments will not be evaluated.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Differences_from_ANSI_C"
>Differences from ANSI C <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>assert() is intended to act like the function from ANSI C fame. Unfortunately, due to Perl&#39;s lack of macros or strong inlining, it&#39;s not nearly as unobtrusive.</p>

<p>Well, the obvious one is the &#34;if DEBUG&#34; part. This is cleanest way I could think of to cause each assert() call and its arguments to be removed from the program at compile-time, like the ANSI C macro does.</p>

<p>Also, this version of assert does not report the statement which failed, just the line number and call frame via Carp::confess. You can&#39;t do <code>assert(&#39;$a == $b&#39;)</code> because $a and $b will probably be lexical, and thus unavailable to assert(). But with Perl, unlike C, you always have the source to look through, so the need isn&#39;t as great.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EFFICIENCY"
>EFFICIENCY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>With <code>no Carp::Assert</code> (or NDEBUG) and using the <code>if DEBUG</code> suffixes on all your assertions, Carp::Assert has almost no impact on your production code. I say almost because it does still add some load-time to your code (I&#39;ve tried to reduce this as much as possible).</p>

<p>If you forget the <code>if DEBUG</code> on an <code>assert()</code>, <code>should()</code> or <code>shouldnt()</code>, its arguments are still evaluated and thus will impact your code. You&#39;ll also have the extra overhead of calling a subroutine (even if that subroutine does nothing).</p>

<p>Forgetting the <code>if DEBUG</code> on an <code>affirm()</code> is not so bad. While you still have the overhead of calling a subroutine (one that does nothing) it will <b>not</b> evaluate its code block and that can save alot.</p>

<p>Try to remember the <b>if DEBUG</b>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ENVIRONMENT"
>ENVIRONMENT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name="NDEBUG"
>NDEBUG</a></dt>

<dd>
<p>Defining NDEBUG switches off all assertions. It has the same effect as changing &#34;use Carp::Assert&#34; to &#34;no Carp::Assert&#34; but it effects all code.</p>

<dt><a name="PERL_NDEBUG"
>PERL_NDEBUG</a></dt>

<dd>
<p>Same as NDEBUG and will override it. Its provided to give you something which won&#39;t conflict with any C programs you might be working on at the same time.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS,_CAVETS_and_other_MUSINGS"
>BUGS, CAVETS and other MUSINGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Conflicts_with_POSIX.pm"
>Conflicts with <code>POSIX.pm</code></a></h2>

<p>The <code>POSIX</code> module exports an <code>assert</code> routine which will conflict with <code>Carp::Assert</code> if both are used in the same namespace. If you are using both together, prevent <code>POSIX</code> from exporting like so:</p>

<pre class="sh_perl">    use POSIX ();
    use Carp::Assert;</pre>

<p>Since <code>POSIX</code> exports way too much, you should be using it like that anyway.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="affirm_and_$^S"
><code>affirm</code> and <code>$^S</code></a></h2>

<p>affirm() mucks with the expression&#39;s caller and it is run in an eval so anything that checks $^S will be wrong.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="shouldn&#39;t"
><code>shouldn&#39;t</code></a></h2>

<p>Yes, there is a <code>shouldn&#39;t</code> routine. It mostly works, but you <b>must</b> put the <code>if DEBUG</code> after it.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="missing_if_DEBUG"
>missing <code>if DEBUG</code></a></h2>

<p>It would be nice if we could warn about missing <code>if DEBUG</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?assertions" class="podlinkpod"
>assertions</a> is a new module available in 5.9.0 which provides assertions which can be enabled/disabled at compile time for real, no <code>if DEBUG</code> necessary.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2001-2007 by Michael G Schwern &#60;schwern@pobox.com&#62;.</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>See <em><a href="http://dev.perl.org/licenses/" class="podlinkurl"
>http://dev.perl.org/licenses/</a></em></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Michael G Schwern &#60;schwern@pobox.com&#62;</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78283 Uploads, 24725 Distributions
106015 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 07:43:10 2012 GMT (0.120627164840698) @cpansearch1 -->
 </body>
</html>
