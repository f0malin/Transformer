<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Math::FastGF2 - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Math-FastGF2",3]);
    _gaq.push(["_setCustomVar",5,"Release","Math-FastGF2-0.04",3]);
    _gaq.push(["_setCustomVar",3,"Module","Math::FastGF2",3]);
    _gaq.push(["_setCustomVar",1,"Author","DMALONE",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Math::FastGF2">permalink</a></div>
  <a href="/~dmalone/">Declan Malone</a> &gt;
  <a href="/~dmalone/Math-FastGF2-0.04/">Math-FastGF2-0.04</a> &gt;
  Math::FastGF2
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/8845459485d4efaf139f6159d228618a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DM/DMALONE/Math-FastGF2/Math-FastGF2-0.04.tar.gz">Math-FastGF2/Math-FastGF2-0.04.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Math%3A%3AFastGF2;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DMALONE/Math-FastGF2-0.04/lib/Math/FastGF2.pm">Annotate this POD
</a></p>

<div style="float:right">
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Math-FastGF2">View/Report Bugs</a><br/>

</div>
</div>
  Module Version:  0.04 &nbsp;
<span class="noprint">
  <a href="/src/DMALONE/Math-FastGF2-0.04/lib/Math/FastGF2.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#EXPORT'>EXPORT</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#TECHNICAL_INFORMATION'>TECHNICAL INFORMATION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#BACKGROUND'>BACKGROUND</a>
    <li class='indexItem indexItem2'><a href='#ALGORITHMS'>ALGORITHMS</a>
    <li class='indexItem indexItem2'><a href='#PERFORMANCE'>PERFORMANCE</a>
    <li class='indexItem indexItem2'><a href='#FUTURE_DIRECTIONS'>FUTURE DIRECTIONS</a>
    <li class='indexItem indexItem2'><a href='#APPLICATIONS'>APPLICATIONS</a>
    <li class='indexItem indexItem2'><a href='#DIVISION_BY_ZERO_(and_friends)'>DIVISION BY ZERO (and friends)</a>
    <li class='indexItem indexItem2'><a href='#POLYNOMIALS'>POLYNOMIALS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#KNOWN_BUGS'>KNOWN BUGS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
  <li class='indexItem indexItem1'><a href='#DISCLAIMER'>DISCLAIMER</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Math::FastGF2 - Perl extension for fast Galois Field arithmetic</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Math::FastGF2 &#34;:ops&#34;;
  use strict;
  my ($a,$b,$c,$d);

  $a = gf2_mul(8,0x53,0xca);    # GF(2^8) multiplication mod {11B}
  $b = gf2_inv(8,0x53);         # 1 / {53}               mod {11B}
  $c = gf2_div(8,0x53,0xca;     # {53} / {CA}            mod {11B}
  $d = gf2_pow(8,0x53,3);       # {53} * {53} * {53}     mod {11B}
  $a = $b ^ $c ^ $d             # add field elements     mod {11B}</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module provides an interface for performing single modulo arithmetic operations on Galois Field polynomials in GF(2^8), GF(2^16) and GF(2^32). All values to be operated on are simple Perl numeric scalars which are taken to represent polynomials with binary co-efficients. For example, the value 0x53, whose binary representation is 10010011, represents the polynomial:</p>

<pre class="sh_perl">        7       6       5       4       3       2       1       0
    (1)x  + (0)x  + (0)x  + (1)x  + (0)x  + (0)x  + (1)x  + (1)x</pre>

<p>or, simply:</p>

<pre class="sh_perl">     7    4
    x  + x  + x  + 1</pre>

<p>Operations such as multiplication, division and calculating powers operate on the polynomials rather than the binary values. Also, all such calculations are done modulo another polynomial, which is called the irreducible polynomial for the field. For GF(2^8), the irreducible polynomial used here has the hex value 0x11b (decimal 283). In binary this is 100011011, so this represents the polynomial</p>

<pre class="sh_perl">     8    4    3
    x  + x  + x  + x + 1</pre>

<p>The irreducible polynomials used for fields GF(2^16) and GF(2^32) have 16 and 32 as their highest power of x, respectively. It follows that since all calculations in these fields are done modulo the appropriate irreducible polynomial that all field elements in GF(2^8) will fit in a single 8-bit byte, that GF(2^16) elements fit in a single 16-bit word, and so on.</p>

<p>Addition of polynomials in GF(2^n) is accomplished by xoring the binary representation of the two polynomials being operated on. Since field elements are stored as simple Perl scalars, the regular ^ (xor) operator suffices, and hence this module does not provide any gf2_add or gf2_sub methods (there is no difference between addition and subtraction in GF(2^n); the xor operator works for both).</p>

<p>For more detailed descriptions of arithmetic in Galois Fields, and some applications, consult the references listed below.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="EXPORT"
>EXPORT</a></h2>

<p>By default, the module does not export any methods. By adding the &#34;:ops&#34; parameter to the &#34;use&#34; line, it exports the following routines:</p>

<ul>
<li>gf2_mul( $field_size, $op1, $op2 )</li>

<li>gf2_inv( $field_size, $op1 )</li>

<li>gf2_div( $field_size, $op1, $op2 )</li>

<li>gf2_pow( $field_size, $op1, $op2 )</li>
</ul>

<p>Currently, the module implements one other method which is not exported by default. This is the <code>gf2_info</code> method which returns either the irreducible polynomial being used for a particular field size, or (if passed an unsupported field size) the total number of bytes being used by the module for arithmetic lookup tables. To use it, either prefix the method name with the module name as in:</p>

<pre class="sh_perl"> $tablesize = Math::FastGF2::gf2_info(0);   # get table size
 $poly_16   = Math::FastGF2::gf2_info(16);  # get poly for GF(2^16)</pre>

<p>or tell the module to export all symbols at the time you &#34;use&#34; it:</p>

<pre class="sh_perl"> use Math::FastGF2 &#34;:all&#34;;</pre>

<p>after which you can make calls to <code>gf2_info</code> without having to prefix the module name.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TECHNICAL_INFORMATION"
>TECHNICAL INFORMATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="BACKGROUND"
>BACKGROUND</a></h2>

<p>The initial motivation for writing this library was as a means of implementing Michael O. Rabin&#39;s Information Dispersal Algorithm (see below). This module started out as a generic (unoptimised), arbitrary-precision implementation using Bit::Vector to perform all the field operations. While the implementation worked, it was far too slow to be practical, so I began to re-implement the critical sections of the code as a separate C program. As I had no experience of integrating C code with Perl code at the time, I dabbled with using <code>Inline::C</code> and some <code>XS</code> code for a while. Despite some progress, I decided that there were too many problems with developing the interface code in parallel with the other code so I switched back to polishing up the C implementation and left writing a Perl module interface until later.</p>

<p>After implementing and testing several different optimised C routines, I identified a few methods that performed somewhere between quite well and very well on a variety of hardware platforms and that also had the advantage of using very little memory. I had, at that point, worked out most of the architectural problems of my project, so I decided it was time to come back and attack the <code>XS</code> part of the code, the first result of which you see documented here.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ALGORITHMS"
>ALGORITHMS</a></h2>

<p>The module uses lookup tables for performing most operations. The exceptions to this are for performing inverses and powers on fields of size 16 and 32 bits. For inverses in these fields a version of the extended Euclidean algorithm for calculating Greatest Common Divisor is used. Another routine implements powers by rewriting the expression to be calculated into one involving only multiplication by x and squaring of sub-products. Also, multiplication is optimised in these fields, at the expense of division, in which <code>a/b</code> is implemented as <code>a * inv(b)</code>.</p>

<p>For calculations in 8-bit fields, all results are looked up from log and antilog (exponent) tables. These tables are optimised to eliminate the need to check for cases where an operand is zero or, in the case of division, to do bounds checking on exp table lookups. The following identities are used when using log/exp tables:</p>

<ul>
<li><code>a * b = exp[ log [a] + log [b] ]</code></li>

<li><code>1 / a = exp[ 255 - log [a] ]</code></li>

<li><code>a / b = exp[ 255 + log [a] - log [b] ]</code></li>

<li><code>a ^ b = exp[ (log [a] * b) % 255 ]</code></li>
</ul>

<p>As mentioned, multiplication in fields of size 8 and 16 are optimised by using table lookups. The method used is to break up one of the operands into 8-bit blocks and the other into 4-bit blocks and to look up the result in a straight (non-modular) multiplication table. Sub-products are loaded into a temporary variable, starting with the high bytes/nibbles and shifted 8 bits at a time using a shift lookup table. The shift lookup table takes care of the modulo part of the overall operation. The following example illustrates the general approach, multiplying the hex values A0BD and F0CD by breaking both values into 8-bit blocks:</p>

<pre class="sh_perl">             A0 BD
      x      F0 CD
      ------------
           BD x CD    (subproducts can use a 256x256 lookup table)
      CD x A0 &#60;&#60; 8    ( &#34;&#60;&#60;&#34; may be regular shift or modulo shift)
      F0 x BD &#60;&#60; 8
 +   F0 x A0 &#60;&#60; 16
   ---------------
 = ((F0 x A0) &#60;&#60; 8) + (F0 x BD) + (CD x A0)) &#60;&#60; 8 + (BD x CD)</pre>

<p>Obviously, as mentioned, the method used in the module is slightly more complicated since it breaks one value into 4-bit blocks. Also, instead of using just one multiplication table and shifting 4 bits at a time, it uses a &#34;high nibble&#34; multiplication table and a &#34;low nibble&#34; table. The results are then combined before shifting a full 8 bits at a time. A final optimisation of the 32-bit multiply is to use faster regular shifts in two cases, and &#34;safe&#34;, modular shifts for the remaining ones.</p>

<p>The major space saving advantage of the algorithm relies on being able to re-use the same straight (non-modular) multiplication tables for both 16 and 32-bit field sizes. Also, the shift tables are optimised to be only 256 words apiece rather than the full field size, since bits shifted off the end are used to look up a mask to be applied to the sub-product to effect the modulo operation. Although the code for generating the tables is not included, armed with this description it should be easy enough to understand how the multiply code works.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="PERFORMANCE"
>PERFORMANCE</a></h2>

<p>Compared with my original Bit::Vector implementation, these routines achieve a speedup of between 15 and 20 times. Compared with the equivalent stand-alone C functions, however, they are at least 30 times slower. From testing, it&#39;s clear that the difference between the plain C and Perl/XS implementations can be mostly attributed to a combination of function calling overheads introduced in the XS layer and overheads in the Perl benchmarking code, with a much smaller amount attributable to the dispatch code which calls the appropriate C function based on the field size. In fact, it appears that the amount of time spent in the Perl code is more than that actually spent doing computations.</p>

<p>A simple benchmarking program is included in this distribution. It is named <code>benchmark-Math-FastGF2.pl</code>. It tests all operations on all field sizes.</p>

<p>As noted earlier, and can be seen from running the benchmark program, multiplications are generally faster than divisions, which in turn are faster than power operations.</p>

<p>No tests were done to examine performance in a multi-process or multi-threaded program, but the code should be thread-safe. Further, the relatively small size of the lookup tables means less memory that needs to be copied when fork()ing or spawning a new thread. So it is possible that some performance gains could be made by using this module in a multi-process/multi-thread program.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="FUTURE_DIRECTIONS"
>FUTURE DIRECTIONS</a></h2>

<p>While the module does provides all the primitives needed for calculations in selected Galois Fields, it only provides the bare minimum functionality. It is probably sufficient for writing code which only needs to operate on small amounts of data (such as encrypting or decrypting keys rather than full files), or for writing proof-of-concept code. However, there are a few major deficiencies:</p>

<ul>
<li>the choice of polynomial in each field is hard-wired;</li>

<li>the lack of features; and</li>

<li>the overheads involved in the XS function call.</li>
</ul>

<p>Currently I do not have any requirement for using different polynomials, though if it appears that this feature is needed, or there is any demand for it, I will implement it. Likewise, given that the multiplication tables are already available, it would be fairly simple to implement a straight multiplication routine, although I do not foresee any need for it.</p>

<p>As for the other two problems, the natural solution is to provide functions that do more work with each call. Specifically, starting with version 0.02, there is support for matrix-related operations in the <a href="/~dmalone/Math-FastGF2-0.04/lib/Math/FastGF2/Matrix.pm" class="podlinkpod"
>Math::FastGF2::Matrix</a> module to allow efficient operations on large blocks of data from a single call.</p>

<p>I intend future versions to be backward-compatible with this one. In terms of design, I&#39;ve decided that using Perl scalars for storing field elements is perfectly sufficient, so as a consequence of this decision, I will not be implementing any objects to store them or implementing any kind of operator overloading code. Obviously, this also means that field sizes beyond the size of Perl&#39;s scalars will not be possible.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="APPLICATIONS"
>APPLICATIONS</a></h2>

<p>Besides Rabin&#39;s IDA, Galois Fields also have a number of other applications involving codes or cryptography. The main ones are:</p>

<ul>
<li>The Advanced Encryption Standard (Rijndael) algorithm for encrpytion. This operates on 8-bit fields and uses the same irreducible polynomial as implemented in this library.</li>

<li>Error-correcting codes, particularly Reed-Solomon encoding. (RS encoding and Rabin&#39;s IDA are actually versions of the same algorithm)</li>
</ul>

<p>See the SEE ALSO section for links. Also, see the included scripts <code>shamir-split.pl</code> and <code>shamir-combine.pl</code>, which implement Shamir&#39;s threshold system for secret sharing.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="DIVISION_BY_ZERO_(and_friends)"
>DIVISION BY ZERO (and friends)</a></h2>

<p>Although technically an error, these modules allow division by zero and (with one exception, below) return 0 as the result rather than failing or raising an exception. It is up to the user to ensure that their program checks for division by zero wherever it might occur <i>before</i> calling <code>gf2_div</code>.</p>

<p>The other zero-related issue is how the code handles 0^0 (zero to the power of zero). I&#39;m going with Knuth&#39;s advice in defining this to be 1, rather than 0.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="POLYNOMIALS"
>POLYNOMIALS</a></h2>

<p>The polynomials used in this implementation are (in hex) 0x11b, 0x1002b and 0x10000008d for, respectively, fields of size 8, 16 and 32 bits. These represent the irreducible polynomials:</p>

<pre class="sh_perl">     8    4    3
    x  + x  + x  + x + 1     GF(2^8)
 
     16    5    3
    x   + x  + x  + x  + 1   GF(2^16)
  
     32    7    3    2
    x   + x  + x  + x  + 1   GF(2^32)</pre>

<p>These values can be retrieved by using the <code>gf2_info</code> method. Note that the polynomials returned by this method will have the high order bit stripped off, so <code>gf2_info(8)</code> returns 0x1b and not 0x11b.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="KNOWN_BUGS"
>KNOWN BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The result of gf2_div(8,0,0) is 1, and not 0 as it is with other field sizes. There is a trivial fix for this but I do not intend to fix it for the following reasons:</p>

<ul>
<li>technically, division by zero gives an undefined result, so the problem is with the calling program (which shouldn&#39;t have asked to divide by zero) rather than this module; and</li>

<li>while the fix is trivial, the extra test needed would slow down all calls to the division routine to handle a case that should really happen only very rarely.</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><i><a href="http://en.wikipedia.org/wiki/Finite_field_arithmetic" class="podlinkurl"
>http://en.wikipedia.org/wiki/Finite_field_arithmetic</a></i></p>

<p>A (mostly) readable description of arithmetic operations in Galois Fields.</p>

<p><i><a href="http://point-at-infinity.org/ssss/" class="podlinkurl"
>http://point-at-infinity.org/ssss/</a></i></p>

<p>B. Poettering&#39;s implementation of Shamir&#39;s secret sharing scheme. This uses Galois Fields, and my own implementation of <code>gf2_inv</code> is based on this code.</p>

<p><i>&#34;Efficient dispersal of information for security, load balancing, and fault tolerance&#34;</i>, by Michael O. Rabin. JACM Volume 36, Issue 2 (1989).</p>

<p>The initial motivation for writing this module.</p>

<p><i>Introduction to the new AES Standard: Rijndael</i>, by Paul Donis, <i><a href="http://islab.oregonstate.edu/koc/ece575/aes/intro.pdf" class="podlinkurl"
>http://islab.oregonstate.edu/koc/ece575/aes/intro.pdf</a></i></p>

<p>Besides the AES info, this is also a very good introduction to arithmetic in GF(2^m).</p>

<p><i>&#34;Optimizing Galois Field Arithmetic for Diverse Processor Architectures and Applications&#34;</i>, by Kevin M. Greenan, Ethan L. Miller and Thomas J. E. Schwarz, S.J. (MASCOTS 2008)</p>

<p>Paper giving an overview of several optimisation techniques for calculations in Galois Fields. I have used the optimised log/exp technique described therein, and a modified version of the l-r tables described (called &#34;high-nibble&#34; and &#34;low-nibble&#34; above) . Comments in the paper that optimisations may need to be tailored to the particular hardware architecture have been borne out in my testing.</p>

<p><i><a href="http://www.cs.utk.edu/~plank/plank/papers/CS-07-593/" class="podlinkurl"
>http://www.cs.utk.edu/~plank/plank/papers/CS-07-593/</a></i></p>

<p>James S. Plank&#39;s C/C++ implementation of optimised Galois Field calculations. Although I haven&#39;t explored the code in great detail, I have used it as a source of benchmarks. In fact, my benchmarking code is modelled on this code. Plank&#39;s code is much more fully-featured than mine, so if that is what you want, I would recommend using it instead. If, on the other hand, you want something that&#39;s simple, doesn&#39;t use much memory and is usable from Perl, I recommend this module of course.</p>

<p><i>Studies on hardware-assisted implementation of arithmetic operations in Galois Field GF(2^m)</i>, by Katsuki Kobayashi.</p>

<p>Despite being aimed at hardware, this paper also contains a wealth of information on software algorithms including several field inversion algorithms.</p>

<p><i><a href="http://charles.karney.info/misc/secret.html" class="podlinkurl"
>http://charles.karney.info/misc/secret.html</a></i> Original implementation of Shamir&#39;s secret sharing algorithm, on which <code>shamir-split.pl</code> and <code>shamir-combine.pl</code> are based. These new versions replace the integer modulo a prime fields with Galois fields implemented with <a href="/~dmalone/Math-FastGF2-0.04/lib/Math/FastGF2.pm" class="podlinkpod"
>Math::FastGF2</a>.</p>

<p>The <a href="/~dmalone/Math-FastGF2-0.04/lib/Math/FastGF2/Matrix.pm" class="podlinkpod"
>Math::FastGF2::Matrix</a> module has a range of Matrix functions to operate more efficiently on large blocks of data.</p>

<p>This module is part of the GnetRAID project. For project development page, see:</p>

<pre class="sh_perl">  <a href="https://sourceforge.net/projects/gnetraid/develop" class="podlinkurl"
>https://sourceforge.net/projects/gnetraid/develop</a></pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Declan Malone, &#60;idablack@users.sourceforge.net&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (C) 2009 by Declan Malone</p>

<p>This package is free software; you can redistribute it and/or modify it under the terms of the &#34;GNU General Public License&#34; (&#34;GPL&#34;).</p>

<p>The C code at the core of this Perl module can additionally be redistributed and/or modified under the terms of the &#34;GNU Library General Public License&#34; (&#34;LGPL&#34;). For the purpose of that license, the &#34;library&#34; is defined as the unmodified C code in the clib/ directory of this distribution. You are permitted to change the typedefs and function prototypes to match the word sizes on your machine, but any further modification (such as removing the static modifier for non-exported function or data structure names) are not permitted under the LGPL, so the library will revert to being covered by the full version of the GPL.</p>

<p>Please refer to the files &#34;GNU_GPL.txt&#34; and &#34;GNU_LGPL.txt&#34; in this distribution for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DISCLAIMER"
>DISCLAIMER <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This package is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</p>

<p>See the &#34;GNU General Public License&#34; for more details.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78283 Uploads, 24725 Distributions
106015 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 07:33:48 2012 GMT (0.246791124343872) @cpansearch1 -->
 </body>
</html>
