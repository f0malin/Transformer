<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>DBIx::MyParse::Query - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","DBIx-MyParse",3]);
    _gaq.push(["_setCustomVar",5,"Release","DBIx-MyParse-0.88",3]);
    _gaq.push(["_setCustomVar",3,"Module","DBIx::MyParse::Query",3]);
    _gaq.push(["_setCustomVar",1,"Author","PHILIPS",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?DBIx::MyParse::Query">permalink</a></div>
  <a href="/~philips/">Philip Stoev</a> &gt;
  <a href="/~philips/DBIx-MyParse-0.88/">DBIx-MyParse-0.88</a> &gt;
  DBIx::MyParse::Query
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/adf5d77d759b8222548fbcbe50d1a5ca?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/P/PH/PHILIPS/DBIx-MyParse-0.88.tar.gz">DBIx-MyParse-0.88.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=DBIx%3A%3AMyParse%3A%3AQuery;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~PHILIPS/DBIx-MyParse-0.88/lib/DBIx/MyParse/Query.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 4</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=DBIx-MyParse">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.88 &nbsp;
<span class="noprint">
  <a href="/src/PHILIPS/DBIx-MyParse-0.88/lib/DBIx/MyParse/Query.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <li class='indexItem indexItem1'><a href='#ERROR_HANDLING'>ERROR HANDLING</a>
  <li class='indexItem indexItem1'><a href='#COMMANDS'>COMMANDS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#&#34;SQLCOM_SELECT&#34;'>&#34;SQLCOM_SELECT&#34;</a>
    <li class='indexItem indexItem2'><a href='#&#34;SQLCOM_DO&#34;'>&#34;SQLCOM_DO&#34;</a>
    <li class='indexItem indexItem2'><a href='#&#34;SQLCOM_UPDATE&#34;_and_&#34;SQLCOM_UPDATE_MULTI&#34;'>&#34;SQLCOM_UPDATE&#34; and &#34;SQLCOM_UPDATE_MULTI&#34;</a>
    <li class='indexItem indexItem2'><a href='#&#34;SQLCOM_DELETE&#34;_and_&#34;SQLCOM_DELETE_MULTI&#34;'>&#34;SQLCOM_DELETE&#34; and &#34;SQLCOM_DELETE_MULTI&#34;</a>
    <li class='indexItem indexItem2'><a href='#&#34;SQLCOM_INSERT&#34;,_&#34;SQLCOM_INSERT_SELECT&#34;,_&#34;SQLCOM_REPLACE&#34;_and_&#34;SQLCOM_REPLACE_SELECT&#34;'>&#34;SQLCOM_INSERT&#34;, &#34;SQLCOM_INSERT_SELECT&#34;, &#34;SQLCOM_REPLACE&#34; and &#34;SQLCOM_REPLACE_SELECT&#34;</a>
    <li class='indexItem indexItem2'><a href='#&#34;SQLCOM_BEGIN&#34;'>&#34;SQLCOM_BEGIN&#34;</a>
    <li class='indexItem indexItem2'><a href='#&#34;SQLCOM_COMMIT&#34;_and_&#34;SQLCOM_ROLLBACK&#34;'>&#34;SQLCOM_COMMIT&#34; and &#34;SQLCOM_ROLLBACK&#34;</a>
    <li class='indexItem indexItem2'><a href='#&#34;SQLCOM_SAVEPOINT&#34;,_&#34;SQLCOM_ROLLBACK_TO_SAVEPOINT&#34;_and_&#34;SQLCOM_RELEASE_SAVEPOINT&#34;'>&#34;SQLCOM_SAVEPOINT&#34;, &#34;SQLCOM_ROLLBACK_TO_SAVEPOINT&#34; and &#34;SQLCOM_RELEASE_SAVEPOINT&#34;</a>
    <li class='indexItem indexItem2'><a href='#&#34;SQLCOM_LOCK_TABLES&#34;_and_&#34;SQLCOM_UNLOCK_TABLES&#34;'>&#34;SQLCOM_LOCK_TABLES&#34; and &#34;SQLCOM_UNLOCK_TABLES&#34;</a>
    <li class='indexItem indexItem2'><a href='#&#34;SQLCOM_DROP_TABLE&#34;,_&#34;SQLCOM_TRUNCATE&#34;_and_&#34;SQLCOM_RENAME_TABLE&#34;'>&#34;SQLCOM_DROP_TABLE&#34;, &#34;SQLCOM_TRUNCATE&#34; and &#34;SQLCOM_RENAME_TABLE&#34;</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Information_Schema_Queries'>Information Schema Queries</a>
  <li class='indexItem indexItem1'><a href='#Dumping_queries'>Dumping queries</a>
  <li class='indexItem indexItem1'><a href='#Modifying_the_parse_tree'>Modifying the parse tree</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>DBIx::MyParse::Query - Access the parse tree produced by DBIx::MyParse</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">        use DBIx::MyParse;
        my $parser = DBIx::MyParse-&#62;new();
        my $query = $parser-&#62;parse(&#34;INSERT INTO table VALUES (1)&#34;);
        print $query-&#62;getCommand();

        $query-&#62;setCommand(&#34;SQLCOM_REPLACE&#34;);   # Replace INSERT with SELECT
        $query-&#62;print();                        # Print modified query as SQL</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module attempts to provide structured access to the parse tree that is produced by MySQL&#39;s SQL parser. Since the parser itself is not exactly perfectly structured, please make sure you read this entire document before attempting to make sense of <code>DBIx::MyParse::Query</code> objects.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='getCommand'></a><a name="getCommand()"
><code>getCommand()</code></a></dt>

<dd>
<p>Returns, as string, the name of SQL command that was parsed. All possible values can be found in enum enum_sql_command in <em>sql/sql_lex.h</em> from the MySQL source.</p>

<p>The commands that are currently supported (that is, a parse tree is created for them) are as follows:</p>

<pre class="sh_perl">        &#34;SQLCOM_SELECT&#34;,        &#34;SQLCOM_DO&#34;
        &#34;SQLCOM_INSERT&#34;,        &#34;SQLCOM_INSERT_SELECT&#34;
        &#34;SQLCOM_REPLACE&#34;,       &#34;SQLCOM_REPLACE_SELECT&#34;
        &#34;SQLCOM_UPDATE&#34;,        &#34;SQLCOM_UPDATE_MULTI&#34;
        &#34;SQLCOM_DELETE&#34;,        &#34;SQLCOM_DELETE_MULTI&#34;

        &#34;SQLCOM_BEGIN&#34;,         &#34;SQLCOM_COMMIT&#34;,        &#34;SQLCOM_ROLLBACK&#34;,
        &#34;SQLCOM_SAVEPOINT&#34;,     &#34;SQLCOM_ROLLBACK_TO_SAVEPOINT&#34;, &#34;SQLCOM_RELEASE_SAVEPOINT&#34;

        &#34;SQLCOM_DROP_DB&#34;,       &#34;SQLCOM_CREATE_DB&#34;,     &#34;SQLCOM_DROP_TABLE&#34;,    &#34;SQLCOM_RENAME_TABLE&#34;</pre>

<p>Please note that the returned value is a string, and not an integer. Please read the section COMMANDS below for notes on individual commands</p>

<dt><a name='getOrigCommand'></a><a name="getOrigCommand()"
><code>getOrigCommand()</code></a></dt>

<dd>
<p>For <code>DESCRIBE</code>, <code>SHOW TABLES</code>, <code>SHOW TABLE STATUS</code>, <code>SHOW DATABASES</code> and <code>SHOW FIELDS</code>, the MySQL parser will rewrite the original query into a <code>SELECT</code> query. The original query type is preserved in <code>getOrigCommand()</code> and the possible values are as follows:</p>

<pre class="sh_perl">        &#34;SQLCOM_SHOW_FIELDS&#34;, &#34;SQLCOM_SHOW_TABLES&#34;, &#34;SQLCOM_SHOW_TABLE_STATUS&#34;, &#34;SQLCOM_SHOW_DATABASES&#34;</pre>

<p>Please see the section &#34;Information Schema Queries&#34; below for more information.</p>

<dt><a name='getOptions'></a><a name="getOptions()"
><code>getOptions()</code></a></dt>

<dd>
<p>Returns a reference to an array containing, as strings, the various options specified for the query, such as HIGH_PRIORITY, LOW_PRIORITY, DELAYED, IGNORE and the like. Some of the options are not returned with the names you expect, but rather using their internal MySQL names. Some options may be returned more than once.</p>

<p><code>SQL_NO_CACHE</code> may be returned even if not explicitly present in the query, if the query contains uncacheable elements, eg <code>NOW()</code>.</p>

<dt><a name='getOption'></a><a name="getOption($option_name)"
><code>getOption($option_name)</code></a></dt>

<dd>
<p>Returns true if $option_name was specified for the query</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ERROR_HANDLING"
>ERROR HANDLING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If there has been a parse error, <code>getCommand() eq &#34;SQLCOM_ERROR&#34;</code>. From there on, you can:</p>

<dl>
<dt><a name='getError'></a><a name="getError()"
><code>getError()</code></a></dt>

<dd>
<p>Returns the error code as string, in English, as defined in <em>include/mysql_error.h</em>.</p>

<dt><a name='getErrno'></a><a name="getErrno()"
><code>getErrno()</code></a></dt>

<dd>
<p>Returns the error code as integer.</p>

<dt><a name='getErrstr'></a><a name="getErrstr()"
><code>getErrstr()</code></a></dt>

<dd>
<p>Returns the entire error message, in the language of the MySQL installation. This is the same text the <code>mysql</code> client will print for an identical error.</p>

<dt><a name='getSQLState'></a><a name="getSQLState()"
><code>getSQLState()</code></a></dt>

<dd>
<p>Returns a null-terminated string containing the SQLSTATE error code. The error code consists of five characters. &#34;00000&#34; means &#34;no error&#34;. The values are specified by ANSI SQL and ODBC.</p>
</dd>
</dl>

<p>The parser is supposed to only report syntax errors with <code>&#34;ER_PARSE_ERROR&#34;</code>, however due to the way MySQL works, this is not always the case. Sometimes the parser would do things during the actual parsing process that common sense would say should be done after. Therefore, expect other errors as well. For a list of possible values, please see:</p>

<p><a href="http://dev.mysql.com/doc/refman/5.0/en/error-handling.html" class="podlinkurl"
>http://dev.mysql.com/doc/refman/5.0/en/error-handling.html</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COMMANDS"
>COMMANDS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="&#34;SQLCOM_SELECT&#34;"
><code>&#34;SQLCOM_SELECT&#34;</code></a></h2>

<dl>
<dt><a name='getSelectItems'></a><a name="getSelectItems()"
><code>getSelectItems()</code></a></dt>

<dd>
<p>Returns a reference to the array of the items the <code>SELECT</code> query will return, each being a <a href="/~philips/DBIx-MyParse-0.88/lib/DBIx/MyParse/Item.pm" class="podlinkpod"
>Item</a> object.</p>

<p>Valid options are &#34;SELECT_DISTINCT&#34;, &#34;TL_READ_HIGH_PRIORITY&#34;, &#34;SELECT_STRAIGHT_JOIN&#34; &#34;SELECT_SMALL_RESULT&#34;, &#34;SELECT_BIG_RESULT&#34;, &#34;OPTION_BUFFER_RESULT&#34; &#34;OPTION_FOUND_ROWS&#34;, &#34;OPTION_TO_QUERY_CACHE&#34; (force caching), &#34;SQL_NO_CACHE&#34;, &#34;TL_WRITE&#34; (FOR UPDATE), &#34;TL_READ_WITH_SHARED_LOCKS&#34; (LOCK IN SHARE MODE), &#34;WITH_ROLLUP&#34;, &#34;WITH_CUBE&#34;, &#34;SELECT_DESCRIBE&#34;, &#34;DESCRIBE_NORMAL&#34;, &#34;DESCRIBE_EXTENDED&#34;</p>

<dt><a name='getTables'></a><a name="getTables()"
><code>getTables()</code></a></dt>

<dd>
<p>Rreturns a reference to the array of tables specified in the query. Each table is also an <a href="/~philips/DBIx-MyParse-0.88/lib/DBIx/MyParse/Item.pm" class="podlinkpod"
>Item</a> object for which <code>getType() eq &#34;TABLE_ITEM&#34;</code> which contains information on the Join type, join conditions, indexes, etc. See <a href="/~philips/DBIx-MyParse-0.88/lib/DBIx/MyParse/Item.pm" class="podlinkpod"
>DBIx::MyParse::Item</a> for information on how to extract the individual properties.</p>

<dt><a name='getWhere'></a><a name="getWhere()"
><code>getWhere()</code></a></dt>

<dd>
<p>Returns an <a href="/~philips/DBIx-MyParse-0.88/lib/DBIx/MyParse/Item.pm" class="podlinkpod"
>Item</a> object that is the root of the tree containing all the WHERE conditions.</p>

<dt><a name='getHaving'></a><a name="getHaving()"
><code>getHaving()</code></a></dt>

<dd>
<p>Operates the same way as <code>getWhere()</code> but for the HAVING clause.</p>

<dt><a name='getGroup'></a><a name="getGroup()"
><code>getGroup()</code></a></dt>

<dd>
<p>Returns a reference to an array containing one <a href="/~philips/DBIx-MyParse-0.88/lib/DBIx/MyParse/Item.pm" class="podlinkpod"
>Item</a> object for each GROUP BY condition.</p>

<dt><a name='getOrder'></a><a name="getOrder()"
><code>getOrder()</code></a></dt>

<dd>
<p>Returns a reference to an array containing the individual <a href="/~philips/DBIx-MyParse-0.88/lib/DBIx/MyParse/Item.pm" class="podlinkpod"
>Items</a> from the ORDER BY clause.</p>

<dt><a name='getLimit'></a><a name="&#60;getLimit()"
><code>&#60;getLimit()</code></a></dt>

<dd>
<p>Returns a reference to a two-item array containing the two parts of the LIMIT clause as <a href="/~philips/DBIx-MyParse-0.88/lib/DBIx/MyParse/Item.pm" class="podlinkpod"
>Item</a> objects.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="&#34;SQLCOM_DO&#34;"
><code>&#34;SQLCOM_DO&#34;</code></a></h2>

<p><code>getSelectItems()</code> will return the expressions being executed.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="&#34;SQLCOM_UPDATE&#34;_and_&#34;SQLCOM_UPDATE_MULTI&#34;"
><code>&#34;SQLCOM_UPDATE&#34;</code> and <code>&#34;SQLCOM_UPDATE_MULTI&#34;</code></a></h2>

<dl>
<dt><a name='my'></a><a name="my_$array_ref_=_$query-&#62;getUpdateFields()"
><code>my $array_ref = $query-&#62;getUpdateFields()</code></a></dt>

<dd>
<p>Returns a reference to an array containing the fields that the query would update.</p>

<dt><a name='my'></a><a name="my_$array_ref_=_$query-&#62;getUpdateValues()"
><code>my $array_ref = $query-&#62;getUpdateValues()</code></a></dt>

<dd>
<p>Returns a reference to an array containing the values that will be assigned to the fields being updated.</p>
</dd>
</dl>

<p><code>getTables()</code>, <code>getWhere()</code>, <code>getOrder()</code> and <code>getLimit()</code> can also be used for update queries.</p>

<p>For <code>&#34;SQLCOM_UPDATE&#34;</code>, <code>getTables()</code> will return a reference to a one-item array containg a <a href="/~philips/DBIx-MyParse-0.88/lib/DBIx/MyParse/Item.pm" class="podlinkpod"
>TABLE_ITEM</a> object describing the table being updated. For <code>&#34;SQLCOM_UPDATE_MULTI&#34;</code>, the array can include several tables or <code>JOIN_ITEM</code>s.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="&#34;SQLCOM_DELETE&#34;_and_&#34;SQLCOM_DELETE_MULTI&#34;"
><code>&#34;SQLCOM_DELETE&#34;</code> and <code>&#34;SQLCOM_DELETE_MULTI&#34;</code></a></h2>

<p>For a multiple-table delete, <code>getCommand() eq &#34;SQLCOM_DELETE&#34;</code></p>

<dl>
<dt><a name='getDeleteTables'></a><a name="getDeleteTables()"
><code>getDeleteTables()</code></a></dt>

<dd>
<p>Will return a reference to an array contwaining the table(s) we are deleting records from.</p>

<dt><a name='getTables'></a><a name="getTables()"
><code>getTables()</code></a></dt>

<dd>
<p>For a multiple-table delete, <code>getTables()</code> will return the tables listed in the FROM clause, which are used to provide referential integrity. Those may include <code>JOIN_ITEM</code>s.</p>
</dd>
</dl>

<p><code>getWhere()</code>, <code>getOrder()</code> and <code>getLimit()</code> can also be used.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="&#34;SQLCOM_INSERT&#34;,_&#34;SQLCOM_INSERT_SELECT&#34;,_&#34;SQLCOM_REPLACE&#34;_and_&#34;SQLCOM_REPLACE_SELECT&#34;"
><code>&#34;SQLCOM_INSERT&#34;</code>, <code>&#34;SQLCOM_INSERT_SELECT&#34;</code>, <code>&#34;SQLCOM_REPLACE&#34;</code> and <code>&#34;SQLCOM_REPLACE_SELECT&#34;</code></a></h2>

<dl>
<dt><a name='getInsertFields'></a><a name="getInsertFields()"
><code>getInsertFields()</code></a></dt>

<dd>
<p>Returns a list of the fields you are inserting to.</p>

<dt><a name='getInsertValues'></a><a name="getInsertValues()"
><code>getInsertValues()</code></a></dt>

<dd>
<p>For <code>&#34;SQLCOM_INSERT&#34;</code> and <code>&#34;SQLCOM_REPLACE&#34;</code>, <code>getInsertValues()</code> will return a reference to an array, containing one sub-array for each row being inserted or replaced (even if there is only one row).</p>
</dd>
</dl>

<p>For <code>&#34;SQLCOM_INSERT_SELECT&#34;</code> and <code>&#34;SQLCOM_REPLACE_SELECT&#34;</code>, <code>getSelectItems()</code>, <code>getTables()</code>, <code>getWhere()</code> and the other SELECT-related properties will describe the <code>SELECT</code> query used to provide values for the <code>INSERT</code>.</p>

<p>If <code>ON DUPLICATE KEY UPDATE</code> is also specified, then <code>getUpdateFields()</code> and <code>getUpdateValues()</code> will also be defined.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="&#34;SQLCOM_BEGIN&#34;"
><code>&#34;SQLCOM_BEGIN&#34;</code></a></h2>

<p>The <code>&#34;WITH_CONSISTENT_SNAPSHOT&#34;</code> may be present</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="&#34;SQLCOM_COMMIT&#34;_and_&#34;SQLCOM_ROLLBACK&#34;"
><code>&#34;SQLCOM_COMMIT&#34;</code> and <code>&#34;SQLCOM_ROLLBACK&#34;</code></a></h2>

<p>The <code>&#34;CHAIN&#34;</code>, <code>&#34;NO_CHAIN&#34;</code>, <code>&#34;RELEASE&#34;</code> and <code>&#34;NO_RELEASE&#34;</code> options may be present</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="&#34;SQLCOM_SAVEPOINT&#34;,_&#34;SQLCOM_ROLLBACK_TO_SAVEPOINT&#34;_and_&#34;SQLCOM_RELEASE_SAVEPOINT&#34;"
><code>&#34;SQLCOM_SAVEPOINT&#34;</code>, <code>&#34;SQLCOM_ROLLBACK_TO_SAVEPOINT&#34;</code> and <code>&#34;SQLCOM_RELEASE_SAVEPOINT&#34;</code></a></h2>

<dl>
<dt><a name='getSavepoint'></a><a name="getSavepoint()"
><code>getSavepoint()</code></a></dt>

<dd>
<p>Returns the name of the savepoint being referenced</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="&#34;SQLCOM_LOCK_TABLES&#34;_and_&#34;SQLCOM_UNLOCK_TABLES&#34;"
><code>&#34;SQLCOM_LOCK_TABLES&#34;</code> and <code>&#34;SQLCOM_UNLOCK_TABLES&#34;</code></a></h2>

<p>You can use <code>getTables()</code> to get a list of the tables being locked. Calling <code>getOptions()</code> returns a list of lock types so that the first lock type in the list corresponds to the first table and so on in a one-to-one relationship.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="&#34;SQLCOM_DROP_TABLE&#34;,_&#34;SQLCOM_TRUNCATE&#34;_and_&#34;SQLCOM_RENAME_TABLE&#34;"
><code>&#34;SQLCOM_DROP_TABLE&#34;</code>, <code>&#34;SQLCOM_TRUNCATE&#34;</code> and <code>&#34;SQLCOM_RENAME_TABLE&#34;</code></a></h2>

<p>For <code>&#34;SQLCOM_DROP_TABLE&#34;</code> and <code>&#34;SQLOM_TRUNCATE&#34;</code>, use <code>getTables()</code> to obtain a reference to an array of <code>TABLE_ITEM</code> objects for each table being dropped or truncated.</p>

<p>For <code>&#34;SQLCOM_RENAME_TABLE&#34;</code> use <code>getTables()</code> to obtain a reference to an array containing the tables being renamed. The first (index 0) and all even-numbered (2,3,4, etc.) items of the array will be the table names you are renaming FROM and the odd-numbered array items (1,2,3, etc.) will be the table names you are renaming TO. MySQL allows a one-at-a-time table rename between databases. In this case, <code>getDatabaseName()</code> on the <code>TABLE_ITEM</code> objects will return the names of the databases.</p>

<p>The following options may be present: <code>&#34;DROP_IF_EXISTS&#34;</code>, <code>&#34;DROP_TEMPORARY&#34;</code>, <code>&#34;DROP_RESTRICT&#34;</code> and <code>&#34;DROP_CASCADE&#34;</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Information_Schema_Queries"
>Information Schema Queries <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following queries</p>

<pre class="sh_perl">        &#34;SQLCOM_SHOW_FIELDS&#34;, &#34;SQLCOM_SHOW_TABLES&#34;,
        &#34;SQLCOM_SHOW_TABLE_STATUS&#34;, &#34;SQLCOM_SHOW_DATABASES&#34;</pre>

<p>are rewritten internally by the MySQL parser into SELECT queries. To determine the original query, use <code>getOrigCommand()</code>.</p>

<p>To determine the original table or database the query pertains to , use <code>getSchemaSelect()</code> which returns either a <a href="/~philips/DBIx-MyParse-0.88/lib/DBIx/MyParse/Item.pm" class="podlinkpod"
>&#34;DATABASE ITEM&#34;</a>, <a href="/~philips/DBIx-MyParse-0.88/lib/DBIx/MyParse/Item.pm" class="podlinkpod"
>&#34;TABLE_ITEM&#34;</a> or a <a href="/~philips/DBIx-MyParse-0.88/lib/DBIx/MyParse/Item.pm" class="podlinkpod"
>&#34;FIELD_ITEM&#34;</a> object.</p>

<p>To determine the contents of any <code> LIKE </code> operator, use <code>getWild()</code> which will return a string.</p>

<p>If you are actually interested in what result columns are expected from you, you can use <code>getSelectItems()</code> as with any other query for C&#34;&#60;SQLCOM_SHOW_FIELDS&#62;&#34; and <code>&#34;SQLCOM_SHOW_TABLE_STATUS&#34;</code>. <code>&#34;SQLCOM_SHOW_TABLES&#34;</code> and <code>&#34;SQLCOM_SHOW_DATABASES&#34;</code> require that you only return a single column with table/database names. The <code>FULL</code> attribute to <code>&#34;SHOW TABLES&#34;</code> is not supported at this time.</p>

<pre class="sh_perl">        &#34;SQLCOM_CHANGE_DB&#34;</pre>

<p>For <code>&#34;USE database&#34;</code>, no such rewriting takes places, so <code>getCommand() eq &#34;SQLCOM_CHANGE_DB&#34;</code>. However, the actual database being changed to is still found in the object that <code>getSchemaSelect()</code> returns.</p>

<p>Please see <code>t/show.t</code> for more examples on how to parse those queries.</p>

<pre class="sh_perl">        &#34;SQLCOM_DROP_DB&#34; and &#34;SQLCOM_CREATE_DB&#34;</pre>

<p>also uses <code>getSchemaSelect()</code>. A <code>&#34;DROP_IF_EXISTS&#34;</code> or <code>&#34;CREATE_IF_NOT_EXISTS&#34;</code> option may be present.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Dumping_queries"
>Dumping queries <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>print()</code> can be used to convert the parse tree back into SQL. <code>SELECT</code>, <code>INSERT</code>, <code>REPLACE</code>, <code>UPDATE</code> and <code>DELETE</code> statements are supported. Please note that the returned string may be very different from the orginal query due to internal transformations that MySQL applies during parsing. Also, the <code>print()</code>-ed query may have extra <code>AS</code> clauses and an abundance of nested brackets.</p>

<p><code>isPrintable()</code> can be used to test whether calling <code>print()</code> would be meaningful.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Modifying_the_parse_tree"
>Modifying the parse tree <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>For every <code>get</code> method, there is a corresponding <code>set</code> method that updates the parse tree, e.g.</p>

<pre class="sh_perl">        $query-&#62;setCommand(&#34;SQLCOM_UPDATE&#34;);</pre>

<p>Also, any arrayrefs returned from <code>get</code> methods can be modified and (since references are used) the results will be reflected in the original object. If you do not want this to happen, you do need to dereference the arrayref and assign it to a new array, e.g.:</p>

<pre class="sh_perl">        my $items = $query-&#62;getItems();
        my @items_copy = @{$items};</pre>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78068 Uploads, 24686 Distributions
105902 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sun Apr 22 12:15:56 2012 GMT (0.298764944076538) @cpansearch1 -->
 </body>
</html>
