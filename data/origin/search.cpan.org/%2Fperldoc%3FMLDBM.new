<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>MLDBM - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","MLDBM",3]);
    _gaq.push(["_setCustomVar",5,"Release","MLDBM-2.04",3]);
    _gaq.push(["_setCustomVar",3,"Module","MLDBM",3]);
    _gaq.push(["_setCustomVar",1,"Author","CHORNY",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?MLDBM">permalink</a></div>
  <a href="/~chorny/">Alexandr Ciornii</a> &gt;
  <a href="/~chorny/MLDBM-2.04/">MLDBM-2.04</a> &gt;
  MLDBM
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/9982a6d902348d1982dd60235724e63c?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/C/CH/CHORNY/MLDBM-2.04.tar.gz">MLDBM-2.04.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=MLDBM;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~CHORNY/MLDBM-2.04/lib/MLDBM.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=MLDBM">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  2.04 &nbsp;
<span class="noprint">
  <a href="/src/CHORNY/MLDBM-2.04/lib/MLDBM.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Changing_the_Defaults'>Changing the Defaults</a>
    <li class='indexItem indexItem2'><a href='#Controlling_Serializer_Properties'>Controlling Serializer Properties</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#WARNINGS'>WARNINGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>MLDBM - store multi-level Perl hash structure in single level tied hash</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use MLDBM;                          # this gets the default, SDBM
    #use MLDBM qw(DB_File FreezeThaw);  # use FreezeThaw for serializing
    #use MLDBM qw(DB_File Storable);    # use Storable for serializing

    $dbm = tie %o, &#39;MLDBM&#39; [..other DBM args..] or die $!;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module can serve as a transparent interface to any TIEHASH package that is required to store arbitrary perl data, including nested references. Thus, this module can be used for storing references and other arbitrary data within DBM databases.</p>

<p>It works by serializing the references in the hash into a single string. In the underlying TIEHASH package (usually a DBM database), it is this string that gets stored. When the value is fetched again, the string is deserialized to reconstruct the data structure into memory.</p>

<p>For historical and practical reasons, it requires the <b>Data::Dumper</b> package, available at any CPAN site. <b>Data::Dumper</b> gives you really nice-looking dumps of your data structures, in case you wish to look at them on the screen, and it was the only serializing engine before version 2.00. However, as of version 2.00, you can use any of <b>Data::Dumper</b>, <b>FreezeThaw</b> or <b>Storable</b> to perform the underlying serialization, as hinted at by the <a href="/perldoc?SYNOPSIS" class="podlinkpod"
>SYNOPSIS</a> overview above. Using <b>Storable</b> is usually much faster than the other methods.</p>

<p>See the <a href="/perldoc?BUGS" class="podlinkpod"
>BUGS</a> section for important limitations.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Changing_the_Defaults"
>Changing the Defaults</a></h2>

<p><b>MLDBM</b> relies on an underlying TIEHASH implementation (usually a DBM package), and an underlying serialization package. The respective defaults are <b>SDBM_File</b> and <b>Data::Dumper</b>. Both of these defaults can be changed. Changing the <b>SDBM_File</b> default is strongly recommended. See <a href="/perldoc?WARNINGS" class="podlinkpod"
>WARNINGS</a> below.</p>

<p>Three serialization wrappers are currently supported: <b>Data::Dumper</b>, <b>Storable</b>, and <b>FreezeThaw</b>. Additional serializers can be supported by writing a wrapper that implements the interface required by <b>MLDBM::Serializer</b>. See the supported wrappers and the <b>MLDBM::Serializer</b> source for details.</p>

<p>In the following, <i>$OBJ</i> stands for the tied object, as in:</p>

<pre class="sh_perl">        $obj = tie %o, ....
        $obj = tied %o;</pre>

<dl>
<dt><a name='MLDBM'></a><a name="$MLDBM::UseDB_or_$OBJ-&#62;UseDB([TIEDOBJECT])"
>$MLDBM::UseDB <i>or</i> <i>$OBJ</i>-&#62;UseDB(<i>[TIEDOBJECT]</i>)</a></dt>

<dd>
<p>The global <code>$MLDBM::UseDB</code> can be set to default to something other than <code>SDBM_File</code>, in case you have a more efficient DBM, or if you want to use this with some other TIEHASH implementation. Alternatively, you can specify the name of the package at <code>use</code> time, as the first &#34;parameter&#34;. Nested module names can be specified as &#34;Foo::Bar&#34;.</p>

<p>The corresponding method call returns the underlying TIEHASH object when called without arguments. It can be called with any object that implements Perl&#39;s TIEHASH interface, to set that value.</p>

<dt><a name='MLDBM'></a><a name="$MLDBM::Serializer_or_$OBJ-&#62;Serializer([SZROBJECT])"
>$MLDBM::Serializer <i>or</i> <i>$OBJ</i>-&#62;Serializer(<i>[SZROBJECT]</i>)</a></dt>

<dd>
<p>The global <code>$MLDBM::Serializer</code> can be set to the name of the serializing package to be used. Currently can be set to one of <code>Data::Dumper</code>, <code>Storable</code>, or <code>FreezeThaw</code>. Defaults to <code>Data::Dumper</code>. Alternatively, you can specify the name of the serializer package at <code>use</code> time, as the second &#34;parameter&#34;.</p>

<p>The corresponding method call returns the underlying MLDBM serializer object when called without arguments. It can be called with an object that implements the MLDBM serializer interface, to set that value.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Controlling_Serializer_Properties"
>Controlling Serializer Properties</a></h2>

<p>These methods are meant to supply an interface to the properties of the underlying serializer used. Do <b>not</b> call or set them without understanding the consequences in full. The defaults are usually sensible.</p>

<p>Not all of these necessarily apply to all the supplied serializers, so we specify when to apply them. Failure to respect this will usually lead to an exception.</p>

<dl>
<dt><a name='MLDBM'></a><a name="$MLDBM::DumpMeth_or_$OBJ-&#62;DumpMeth([METHNAME])"
>$MLDBM::DumpMeth <i>or</i> <i>$OBJ</i>-&#62;DumpMeth(<i>[METHNAME]</i>)</a></dt>

<dd>
<p>If the serializer provides alternative serialization methods, this can be used to set them.</p>

<p>With <b>Data::Dumper</b> (which offers a pure Perl and an XS verion of its serializing routine), this is set to <code>Dumpxs</code> by default if that is supported in your installation. Otherwise, defaults to the slower <code>Dump</code> method.</p>

<p>With <b>Storable</b>, a value of <code>portable</code> requests that serialization be architecture neutral, i.e. the deserialization can later occur on another platform. Of course, this only makes sense if your database files are themselves architecture neutral. By default, native format is used for greater serializing speed in <b>Storable</b>. Both <b>Data::Dumper</b> and <b>FreezeThaw</b> are always architecture neutral.</p>

<p><b>FreezeThaw</b> does not honor this attribute.</p>

<dt><a name='MLDBM'></a><a name="$MLDBM::Key_or_$OBJ-&#62;Key([KEYSTRING])"
>$MLDBM::Key <i>or</i> <i>$OBJ</i>-&#62;Key(<i>[KEYSTRING]</i>)</a></dt>

<dd>
<p>If the serializer only deals with part of the data (perhaps because the TIEHASH object can natively store some types of data), it may need a unique key string to recognize the data it handles. This can be used to set that string. Best left alone.</p>

<p>Defaults to the magic string used to recognize MLDBM data. It is a six character wide, unique string. This is best left alone, unless you know what you are doing.</p>

<p><b>Storable</b> and <b>FreezeThaw</b> do not honor this attribute.</p>

<dt><a name='MLDBM'></a><a name="$MLDBM::RemoveTaint_or_$OBJ-&#62;RemoveTaint([BOOL])"
>$MLDBM::RemoveTaint <i>or</i> <i>$OBJ</i>-&#62;RemoveTaint(<i>[BOOL]</i>)</a></dt>

<dd>
<p>If the serializer can optionally untaint any retrieved data subject to taint checks in Perl, this can be used to request that feature. Data that comes from external sources (like disk-files) must always be viewed with caution, so use this only when you are sure that that is not an issue.</p>

<p><b>Data::Dumper</b> uses <code>eval()</code> to deserialize and is therefore subject to taint checks. Can be set to a true value to make the <b>Data::Dumper</b> serializer untaint the data retrieved. It is not enabled by default. Use with care.</p>

<p><b>Storable</b> and <b>FreezeThaw</b> do not honor this attribute.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Here is a simple example. Note that does not depend upon the underlying serializing package--most real life examples should not, usually.</p>

<pre class="sh_perl">    use MLDBM;                          # this gets SDBM and Data::Dumper
    #use MLDBM qw(SDBM_File Storable);  # SDBM and Storable
    use Fcntl;                          # to get &#39;em constants

    $dbm = tie %o, &#39;MLDBM&#39;, &#39;testmldbm&#39;, O_CREAT|O_RDWR, 0640 or die $!;

    $c = [\ &#39;c&#39;];
    $b = {};
    $a = [1, $b, $c];
    $b-&#62;{a} = $a;
    $b-&#62;{b} = $a-&#62;[1];
    $b-&#62;{c} = $a-&#62;[2];
    @o{qw(a b c)} = ($a, $b, $c);

    #
    # to see what was stored
    #
    use Data::Dumper;
    print Data::Dumper-&#62;Dump([@o{qw(a b c)}], [qw(a b c)]);

    #
    # to modify data in a substructure
    #
    $tmp = $o{a};
    $tmp-&#62;[0] = &#39;foo&#39;;
    $o{a} = $tmp;

    #
    # can access the underlying DBM methods transparently
    #
    #print $dbm-&#62;fd, &#34;\n&#34;;              # DB_File method</pre>

<p>Here is another small example using Storable, in a portable format:</p>

<pre class="sh_perl">    use MLDBM qw(DB_File Storable);     # DB_File and Storable

    tie %o, &#39;MLDBM&#39;, &#39;testmldbm&#39;, O_CREAT|O_RDWR, 0640 or die $!;

    (tied %o)-&#62;DumpMeth(&#39;portable&#39;);    # Ask for portable binary
    $o{&#39;ENV&#39;} = \%ENV;                  # Stores the whole environment</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ol>
<li>Adding or altering substructures to a hash value is not entirely transparent in current perl. If you want to store a reference or modify an existing reference value in the DBM, it must first be retrieved and stored in a temporary variable for further modifications. In particular, something like this will NOT work properly:
<pre class="sh_perl">        $mldb{key}{subkey}[3] = &#39;stuff&#39;;        # won&#39;t work</pre>

<p>Instead, that must be written as:</p>

<pre class="sh_perl">        $tmp = $mldb{key};                      # retrieve value
        $tmp-&#62;{subkey}[3] = &#39;stuff&#39;;
        $mldb{key} = $tmp;                      # store value</pre>

<p>This limitation exists because the perl TIEHASH interface currently has no support for multidimensional ties.</p>
</li>

<li>The <b>Data::Dumper</b> serializer uses eval(). A lot. Try the <b>Storable</b> serializer, which is generally the most efficient.</li>
</ol>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WARNINGS"
>WARNINGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ol>
<li>Many DBM implementations have arbitrary limits on the size of records that can be stored. For example, SDBM and many ODBM or NDBM implementations have a default limit of 1024 bytes for the size of a record. MLDBM can easily exceed these limits when storing large data structures, leading to mysterious failures. Although SDBM_File is used by MLDBM by default, it is not a good choice if you&#39;re storing large data structures. Berkeley DB and GDBM both do not have these limits, so I recommend using either of those instead.</li>

<li>MLDBM does well with data structures that are not too deep and not too wide. You also need to be careful about how many <code>FETCH</code>es your code actually ends up doing. Meaning, you should get the most mileage out of a <code>FETCH</code> by holding on to the highest level value for as long as you need it. Remember that every toplevel access of the tied hash, for example <code>$mldb{foo}</code>, translates to a MLDBM <code>FETCH()</code> call.
<p>Too often, people end up writing something like this:</p>

<pre class="sh_perl">        tie %h, &#39;MLDBM&#39;, ...;
        for my $k (keys %{$h{something}}) {
            print $h{something}{$k}[0]{foo}{bar};  # FETCH _every_ time!
        }</pre>

<p>when it should be written this for efficiency:</p>

<pre class="sh_perl">        tie %h, &#39;MLDBM&#39;, ...;
        my $root = $h{something};                  # FETCH _once_
        for my $k (keys %$root) {
            print $k-&#62;[0]{foo}{bar};
        }</pre>
</li>
</ol>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Gurusamy Sarathy &#60;<em>gsar@umich.edu</em>&#62;.</p>

<p>Support for multiple serializing packages by Raphael Manfredi &#60;<em>Raphael_Manfredi@grenoble.hp.com</em>&#62;.</p>

<p>Test suite fixes for perl 5.8.0 done by Josh Chamas.</p>

<p>Copyright (c) 1995-98 Gurusamy Sarathy. All rights reserved.</p>

<p>Copyright (c) 1998 Raphael Manfredi.</p>

<p>Copyright (c) 2002 Josh Chamas, Chamas Enterprises Inc.</p>

<p>Copyright (c) 2010 Alexandr Ciornii (alexchorny@gmail.com).</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Version 2.04 08 Mar 2010</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perl(1), perltie(1), perlfunc(1), <a href="/perldoc?Data%3A%3ADumper" class="podlinkpod"
>Data::Dumper</a>(3), FreezeThaw(3), Storable(3), <a href="/perldoc?DBM%3A%3ADeep" class="podlinkpod"
>DBM::Deep</a>.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78252 Uploads, 24722 Distributions
106026 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Thu Apr 26 18:10:51 2012 GMT (0.479247093200684) @cpansearch1 -->
 </body>
</html>
