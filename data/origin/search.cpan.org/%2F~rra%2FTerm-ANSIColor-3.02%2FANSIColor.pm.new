<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Term::ANSIColor - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Term-ANSIColor",3]);
    _gaq.push(["_setCustomVar",5,"Release","Term-ANSIColor-3.02",3]);
    _gaq.push(["_setCustomVar",3,"Module","Term::ANSIColor",3]);
    _gaq.push(["_setCustomVar",1,"Author","RRA",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Term::ANSIColor">permalink</a></div>
  <a href="/~rra/">Russ Allbery</a> &gt;
  <a href="/~rra/Term-ANSIColor-3.02/">Term-ANSIColor-3.02</a> &gt;
  Term::ANSIColor
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/9fec541e013db7174f89895b2070b417?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/R/RR/RRA/Term-ANSIColor-3.02.tar.gz">Term-ANSIColor-3.02.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Term%3A%3AANSIColor;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~RRA/Term-ANSIColor-3.02/ANSIColor.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Term%3A%3AReadLine">Term::ReadLine</a><br>
<a href="/perldoc?Term%3A%3AANSIScreen">Term::ANSIScreen</a><br>
<a href="/perldoc?LWP%3A%3AUserAgent">LWP::UserAgent</a><br>
<a href="/perldoc?Pod%3A%3AUsage">Pod::Usage</a><br>
<a href="/perldoc?HTML%3A%3AParser">HTML::Parser</a><br>
<a href="/perldoc?Time%3A%3Alocaltime">Time::localtime</a><br>
<a href="/perldoc?HTTP%3A%3ACookies">HTTP::Cookies</a><br>
<a href="/perldoc?IO%3A%3ASelect">IO::Select</a><br>
<a href="/perldoc?LWP%3A%3ASimple">LWP::Simple</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Term%3A%3AANSIColor">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Term-ANSIColor">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  3.02 &nbsp;
<span class="noprint">
  <a href="/src/RRA/Term-ANSIColor-3.02/ANSIColor.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Supported_Colors'>Supported Colors</a>
    <li class='indexItem indexItem2'><a href='#Function_Interface'>Function Interface</a>
    <li class='indexItem indexItem2'><a href='#Constant_Interface'>Constant Interface</a>
    <li class='indexItem indexItem2'><a href='#The_Color_Stack'>The Color Stack</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#DIAGNOSTICS'>DIAGNOSTICS</a>
  <li class='indexItem indexItem1'><a href='#ENVIRONMENT'>ENVIRONMENT</a>
  <li class='indexItem indexItem1'><a href='#RESTRICTIONS'>RESTRICTIONS</a>
  <li class='indexItem indexItem1'><a href='#NOTES'>NOTES</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Term::ANSIColor - Color screen output using ANSI escape sequences</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use Term::ANSIColor;
    print color &#39;bold blue&#39;;
    print &#34;This text is bold blue.\n&#34;;
    print color &#39;reset&#39;;
    print &#34;This text is normal.\n&#34;;
    print colored (&#34;Yellow on magenta.&#34;, &#39;yellow on_magenta&#39;), &#34;\n&#34;;
    print &#34;This text is normal.\n&#34;;
    print colored [&#39;yellow on_magenta&#39;], &#39;Yellow on magenta.&#39;, &#34;\n&#34;;
    print colored [&#39;red on_bright_yellow&#39;], &#39;Red on bright yellow.&#39;, &#34;\n&#34;;
    print colored [&#39;bright_red on_black&#39;], &#39;Bright red on black.&#39;, &#34;\n&#34;;
    print &#34;\n&#34;;

    use Term::ANSIColor qw(uncolor);
    print uncolor (&#39;01;31&#39;), &#34;\n&#34;;

    use Term::ANSIColor qw(colorstrip);
    print colorstrip &#39;\e[1mThis is bold\e[0m&#39;, &#34;\n&#34;;

    use Term::ANSIColor qw(colorvalid);
    my $valid = colorvalid (&#39;blue bold&#39;, &#39;on_magenta&#39;);
    print &#34;Color string is &#34;, $valid ? &#34;valid\n&#34; : &#34;invalid\n&#34;;

    use Term::ANSIColor qw(:constants);
    print BOLD, BLUE, &#34;This text is in bold blue.\n&#34;, RESET;

    use Term::ANSIColor qw(:constants);
    {
        local $Term::ANSIColor::AUTORESET = 1;
        print BOLD BLUE &#34;This text is in bold blue.\n&#34;;
        print &#34;This text is normal.\n&#34;;
    }

    use Term::ANSIColor qw(:pushpop);
    print PUSHCOLOR RED ON_GREEN &#34;This text is red on green.\n&#34;;
    print PUSHCOLOR BRIGHT_BLUE &#34;This text is bright blue on green.\n&#34;;
    print RESET BRIGHT_BLUE &#34;This text is just bright blue.\n&#34;;
    print POPCOLOR &#34;Back to red on green.\n&#34;;
    print LOCALCOLOR GREEN ON_BLUE &#34;This text is green on blue.\n&#34;;
    print &#34;This text is red on green.\n&#34;;
    {
        local $Term::ANSIColor::AUTOLOCAL = 1;
        print ON_BLUE &#34;This text is red on blue.\n&#34;;
        print &#34;This text is red on green.\n&#34;;
    }
    print POPCOLOR &#34;Back to whatever we started as.\n&#34;;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module has two interfaces, one through color() and colored() and the other through constants. It also offers the utility functions uncolor(), colorstrip(), and colorvalid(), which have to be explicitly imported to be used (see <a href="#SYNOPSIS" class="podlinkpod"
>&#34;SYNOPSIS&#34;</a>).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Supported_Colors"
>Supported Colors</a></h2>

<p>Terminal emulators that support color divide into two types: ones that support only eight colors, and ones that support sixteen. This module provides both the ANSI escape codes for the &#34;normal&#34; colors, supported by both types, as well as the additional colors supported by sixteen-color emulators. These colors are referred to as ANSI colors 0 through 7 (normal) and 8 through 15.</p>

<p>Unfortunately, interpretation of colors 0 through 7 often depends on whether the emulator supports eight colors or sixteen colors. Emulators that only support eight colors (such as the Linux console) will display colors 0 through 7 with normal brightness and ignore colors 8 through 15, treating them the same as white. Emulators that support 16 colors, such as gnome-terminal, normally display colors 0 through 7 as dim or darker versions and colors 8 through 15 as normal brightness. On such emulators, the &#34;normal&#34; white (color 7) usually is shown as pale grey, requiring bright white (15) to be used to get a real white color. Bright black usually is a dark grey color, although some terminals display it as pure black. Some sixteen-color terminal emulators also treat normal yellow (color 3) as orange or brown, and bright yellow (color 11) as yellow.</p>

<p>Following the normal convention of sixteen-color emulators, this module provides a pair of attributes for each color. For every normal color (0 through 7), the corresponding bright color (8 through 15) is obtained by prepending the string <code>bright_</code> to the normal color name. For example, <code>red</code> is color 1 and <code>bright_red</code> is color 9. The same applies for background colors: <code>on_red</code> is the normal color and <code>on_bright_red</code> is the bright color. Capitalize these strings for the constant interface.</p>

<p>There is unfortunately no way to know whether the current emulator supports sixteen colors or not, which makes the choice of colors difficult. The most conservative choice is to use only the regular colors, which are at least displayed on all emulators. However, they will appear dark in sixteen-color terminal emulators, including most common emulators in UNIX X environments. If you know the display is one of those emulators, you may wish to use the bright variants instead. Even better, offer the user a way to configure the colors for a given application to fit their terminal emulator.</p>

<p>Support for colors 8 through 15 (the <code>bright_</code> variants) was added in Term::ANSIColor 3.0.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Function_Interface"
>Function Interface</a></h2>

<p>The function interface uses attribute strings to describe the colors and text attributes to assign to text. The recognized non-color attributes are clear, reset, bold, dark, faint, italic, underline, underscore, blink, reverse, and concealed. Clear and reset (reset to default attributes), dark and faint (dim and saturated), and underline and underscore are equivalent, so use whichever is the most intuitive to you.</p>

<p>Note that not all attributes are supported by all terminal types, and some terminals may not support any of these sequences. Dark and faint, italic, blink, and concealed in particular are frequently not implemented.</p>

<p>Support for italic was added in Term::ANSIColor 3.02.</p>

<p>The recognized normal foreground color attributes (colors 0 to 7) are:</p>

<pre class="sh_perl">  black  red  green  yellow  blue  magenta  cyan  white</pre>

<p>The corresponding bright foreground color attributes (colors 8 to 15) are:</p>

<pre class="sh_perl">  bright_black  bright_red      bright_green  bright_yellow
  bright_blue   bright_magenta  bright_cyan   bright_white</pre>

<p>The recognized normal background color attributes (colors 0 to 7) are:</p>

<pre class="sh_perl">  on_black  on_red      on_green  on yellow
  on_blue   on_magenta  on_cyan   on_white</pre>

<p>The recognized bright background color attributes (colors 8 to 15) are:</p>

<pre class="sh_perl">  on_bright_black  on_bright_red      on_bright_green  on_bright_yellow
  on_bright_blue   on_bright_magenta  on_bright_cyan   on_bright_white</pre>

<p>For any of the above listed attributes, case is not significant.</p>

<p>Attributes, once set, last until they are unset (by printing the attribute <code>clear</code> or <code>reset</code>). Be careful to do this, or otherwise your attribute will last after your script is done running, and people get very annoyed at having their prompt and typing changed to weird colors.</p>

<dl>
<dt><a name='color'></a><a name="color(ATTR[,_ATTR_...])"
>color(ATTR[, ATTR ...])</a></dt>

<dd>
<p>color() takes any number of strings as arguments and considers them to be space-separated lists of attributes. It then forms and returns the escape sequence to set those attributes. It doesn&#39;t print it out, just returns it, so you&#39;ll have to print it yourself if you want to. This is so that you can save it as a string, pass it to something else, send it to a file handle, or do anything else with it that you might care to. color() throws an exception if given an invalid attribute.</p>

<dt><a name='colored'></a><a name="colored(STRING,_ATTRIBUTES)"
>colored(STRING, ATTRIBUTES)</a></dt>

<dd>
<dt><a name='colored'></a><a name="colored(ATTR-REF,_STRING[,_STRING...])"
>colored(ATTR-REF, STRING[, STRING...])</a></dt>

<dd>
<p>As an aid in resetting colors, colored() takes a scalar as the first argument and any number of attribute strings as the second argument and returns the scalar wrapped in escape codes so that the attributes will be set as requested before the string and reset to normal after the string. Alternately, you can pass a reference to an array as the first argument, and then the contents of that array will be taken as attributes and color codes and the remainder of the arguments as text to colorize.</p>

<p>Normally, colored() just puts attribute codes at the beginning and end of the string, but if you set $Term::ANSIColor::EACHLINE to some string, that string will be considered the line delimiter and the attribute will be set at the beginning of each line of the passed string and reset at the end of each line. This is often desirable if the output contains newlines and you&#39;re using background colors, since a background color that persists across a newline is often interpreted by the terminal as providing the default background color for the next line. Programs like pagers can also be confused by attributes that span lines. Normally you&#39;ll want to set $Term::ANSIColor::EACHLINE to <code>&#34;\n&#34;</code> to use this feature.</p>

<dt><a name='uncolor'></a><a name="uncolor(ESCAPE)"
>uncolor(ESCAPE)</a></dt>

<dd>
<p>uncolor() performs the opposite translation as color(), turning escape sequences into a list of strings corresponding to the attributes being set by those sequences.</p>

<dt><a name='colorstrip'></a><a name="colorstrip(STRING[,_STRING_...])"
>colorstrip(STRING[, STRING ...])</a></dt>

<dd>
<p>colorstrip() removes all color escape sequences from the provided strings, returning the modified strings separately in array context or joined together in scalar context. Its arguments are not modified.</p>

<dt><a name='colorvalid'></a><a name="colorvalid(ATTR[,_ATTR_...])"
>colorvalid(ATTR[, ATTR ...])</a></dt>

<dd>
<p>colorvalid() takes attribute strings the same as color() and returns true if all attributes are known and false otherwise.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Constant_Interface"
>Constant Interface</a></h2>

<p>Alternately, if you import <code>:constants</code>, you can use the following constants directly:</p>

<pre class="sh_perl">  CLEAR           RESET             BOLD            DARK
  FAINT           ITALIC            UNDERLINE       UNDERSCORE
  BLINK           REVERSE           CONCEALED

  BLACK           RED               GREEN           YELLOW
  BLUE            MAGENTA           CYAN            WHITE
  BRIGHT_BLACK    BRIGHT_RED        BRIGHT_GREEN    BRIGHT_YELLOW
  BRIGHT_BLUE     BRIGHT_MAGENTA    BRIGHT_CYAN     BRIGHT_WHITE

  ON_BLACK        ON_RED            ON_GREEN        ON_YELLOW
  ON_BLUE         ON_MAGENTA        ON_CYAN         ON_WHITE
  ON_BRIGHT_BLACK ON_BRIGHT_RED     ON_BRIGHT_GREEN ON_BRIGHT_YELLOW
  ON_BRIGHT_BLUE  ON_BRIGHT_MAGENTA ON_BRIGHT_CYAN  ON_BRIGHT_WHITE</pre>

<p>These are the same as color(&#39;attribute&#39;) and can be used if you prefer typing:</p>

<pre class="sh_perl">    print BOLD BLUE ON_WHITE &#34;Text&#34;, RESET, &#34;\n&#34;;</pre>

<p>to</p>

<pre class="sh_perl">    print colored (&#34;Text&#34;, &#39;bold blue on_white&#39;), &#34;\n&#34;;</pre>

<p>(Note that the newline is kept separate to avoid confusing the terminal as described above since a background color is being used.)</p>

<p>Support for <code>ITALIC</code> was added in Term::ANSIColor 3.02.</p>

<p>When using the constants, if you don&#39;t want to have to remember to add the <code>, RESET</code> at the end of each print line, you can set $Term::ANSIColor::AUTORESET to a true value. Then, the display mode will automatically be reset if there is no comma after the constant. In other words, with that variable set:</p>

<pre class="sh_perl">    print BOLD BLUE &#34;Text\n&#34;;</pre>

<p>will reset the display mode afterward, whereas:</p>

<pre class="sh_perl">    print BOLD, BLUE, &#34;Text\n&#34;;</pre>

<p>will not. If you are using background colors, you will probably want to print the newline with a separate print statement to avoid confusing the terminal.</p>

<p>The subroutine interface has the advantage over the constants interface in that only two subroutines are exported into your namespace, versus thirty-eight in the constants interface. On the flip side, the constants interface has the advantage of better compile time error checking, since misspelled names of colors or attributes in calls to color() and colored() won&#39;t be caught until runtime whereas misspelled names of constants will be caught at compile time. So, pollute your namespace with almost two dozen subroutines that you may not even use that often, or risk a silly bug by mistyping an attribute. Your choice, TMTOWTDI after all.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_Color_Stack"
>The Color Stack</a></h2>

<p>As of Term::ANSIColor 2.0, you can import <code>:pushpop</code> and maintain a stack of colors using PUSHCOLOR, POPCOLOR, and LOCALCOLOR. PUSHCOLOR takes the attribute string that starts its argument and pushes it onto a stack of attributes. POPCOLOR removes the top of the stack and restores the previous attributes set by the argument of a prior PUSHCOLOR. LOCALCOLOR surrounds its argument in a PUSHCOLOR and POPCOLOR so that the color resets afterward.</p>

<p>When using PUSHCOLOR, POPCOLOR, and LOCALCOLOR, it&#39;s particularly important to not put commas between the constants.</p>

<pre class="sh_perl">    print PUSHCOLOR BLUE &#34;Text\n&#34;;</pre>

<p>will correctly push BLUE onto the top of the stack.</p>

<pre class="sh_perl">    print PUSHCOLOR, BLUE, &#34;Text\n&#34;;    # wrong!</pre>

<p>will not, and a subsequent pop won&#39;t restore the correct attributes. PUSHCOLOR pushes the attributes set by its argument, which is normally a string of color constants. It can&#39;t ask the terminal what the current attributes are.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DIAGNOSTICS"
>DIAGNOSTICS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='Bad'></a><a name="Bad_escape_sequence_%s"
>Bad escape sequence %s</a></dt>

<dd>
<p>(F) You passed an invalid ANSI escape sequence to uncolor().</p>

<dt><a name='Bareword'></a><a name="Bareword_&#34;%s&#34;_not_allowed_while_&#34;strict_subs&#34;_in_use"
>Bareword &#34;%s&#34; not allowed while &#34;strict subs&#34; in use</a></dt>

<dd>
<p>(F) You probably mistyped a constant color name such as:</p>

<pre class="sh_perl">    $Foobar = FOOBAR . &#34;This line should be blue\n&#34;;</pre>

<p>or:</p>

<pre class="sh_perl">    @Foobar = FOOBAR, &#34;This line should be blue\n&#34;;</pre>

<p>This will only show up under use strict (another good reason to run under use strict).</p>

<dt><a name='Invalid'></a><a name="Invalid_attribute_name_%s"
>Invalid attribute name %s</a></dt>

<dd>
<p>(F) You passed an invalid attribute name to either color() or colored().</p>

<dt><a name='Name'></a><a name="Name_&#34;%s&#34;_used_only_once:_possible_typo"
>Name &#34;%s&#34; used only once: possible typo</a></dt>

<dd>
<p>(W) You probably mistyped a constant color name such as:</p>

<pre class="sh_perl">    print FOOBAR &#34;This text is color FOOBAR\n&#34;;</pre>

<p>It&#39;s probably better to always use commas after constant names in order to force the next error.</p>

<dt><a name='No'></a><a name="No_comma_allowed_after_filehandle"
>No comma allowed after filehandle</a></dt>

<dd>
<p>(F) You probably mistyped a constant color name such as:</p>

<pre class="sh_perl">    print FOOBAR, &#34;This text is color FOOBAR\n&#34;;</pre>

<p>Generating this fatal compile error is one of the main advantages of using the constants interface, since you&#39;ll immediately know if you mistype a color name.</p>

<dt><a name='No'></a><a name="No_name_for_escape_sequence_%s"
>No name for escape sequence %s</a></dt>

<dd>
<p>(F) The ANSI escape sequence passed to uncolor() contains escapes which aren&#39;t recognized and can&#39;t be translated to names.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ENVIRONMENT"
>ENVIRONMENT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name="ANSI_COLORS_DISABLED"
>ANSI_COLORS_DISABLED</a></dt>

<dd>
<p>If this environment variable is set, all of the functions defined by this module (color(), colored(), and all of the constants not previously used in the program) will not output any escape sequences and instead will just return the empty string or pass through the original text as appropriate. This is intended to support easy use of scripts using this module on platforms that don&#39;t support ANSI escape sequences.</p>

<p>For it to have its proper effect, this environment variable must be set before any color constants are used in the program.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="RESTRICTIONS"
>RESTRICTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>It would be nice if one could leave off the commas around the constants entirely and just say:</p>

<pre class="sh_perl">    print BOLD BLUE ON_WHITE &#34;Text\n&#34; RESET;</pre>

<p>but the syntax of Perl doesn&#39;t allow this. You need a comma after the string. (Of course, you may consider it a bug that commas between all the constants aren&#39;t required, in which case you may feel free to insert commas unless you&#39;re using $Term::ANSIColor::AUTORESET or PUSHCOLOR/POPCOLOR.)</p>

<p>For easier debugging, you may prefer to always use the commas when not setting $Term::ANSIColor::AUTORESET or PUSHCOLOR/POPCOLOR so that you&#39;ll get a fatal compile error rather than a warning.</p>

<p>It&#39;s not possible to use this module to embed formatting and color attributes using Perl formats. They replace the escape character with a space (as documented in <a href="http://man.he.net/man1/perlform" class="podlinkman"
>perlform(1)</a>), resulting in garbled output from the unrecognized attribute. Even if there were a way around that problem, the format doesn&#39;t know that the non-printing escape sequence is zero-length and would incorrectly format the output. For formatted output using color or other attributes, either use sprintf() instead or use formline() and then add the color or other attributes after formatting and before output.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTES"
>NOTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The codes generated by this module are standard terminal control codes, complying with ECMA-048 and ISO 6429 (generally referred to as &#34;ANSI color&#34; for the color codes). The non-color control codes (bold, dark, italic, underline, and reverse) are part of the earlier ANSI X3.64 standard for control sequences for video terminals and peripherals.</p>

<p>Note that not all displays are ISO 6429-compliant, or even X3.64-compliant (or are even attempting to be so). This module will not work as expected on displays that do not honor these escape sequences, such as cmd.exe, 4nt.exe, and command.com under either Windows NT or Windows 2000. They may just be ignored, or they may display as an ESC character followed by some apparent garbage.</p>

<p>Jean Delvare provided the following table of different common terminal emulators and their support for the various attributes and others have helped me flesh it out:</p>

<pre class="sh_perl">              clear    bold     faint   under    blink   reverse  conceal
 ------------------------------------------------------------------------
 xterm         yes      yes      no      yes      yes      yes      yes
 linux         yes      yes      yes    bold      yes      yes      no
 rxvt          yes      yes      no      yes  bold/black   yes      no
 dtterm        yes      yes      yes     yes    reverse    yes      yes
 teraterm      yes    reverse    no      yes    rev/red    yes      no
 aixterm      kinda   normal     no      yes      no       yes      yes
 PuTTY         yes     color     no      yes      no       yes      no
 Windows       yes      no       no      no       no       yes      no
 Cygwin SSH    yes      yes      no     color    color    color     yes
 Mac Terminal  yes      yes      no      yes      yes      yes      yes</pre>

<p>Windows is Windows telnet, Cygwin SSH is the OpenSSH implementation under Cygwin on Windows NT, and Mac Terminal is the Terminal application in Mac OS X. Where the entry is other than yes or no, that emulator displays the given attribute as something else instead. Note that on an aixterm, clear doesn&#39;t reset colors; you have to explicitly set the colors back to what you want. More entries in this table are welcome.</p>

<p>Support for code 3 (italic) is rare and therefore not mentioned in that table. It is not believed to be fully supported by any of the terminals listed, although it&#39;s displayed as green in the Linux console, but it is reportedly supported by urxvt.</p>

<p>Note that codes 6 (rapid blink) and 9 (strike-through) are specified in ANSI X3.64 and ECMA-048 but are not commonly supported by most displays and emulators and therefore aren&#39;t supported by this module at the present time. ECMA-048 also specifies a large number of other attributes, including a sequence of attributes for font changes, Fraktur characters, double-underlining, framing, circling, and overlining. As none of these attributes are widely supported or useful, they also aren&#39;t currently supported by this module.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>ECMA-048 is available on-line (at least at the time of this writing) at <a href="http://www.ecma-international.org/publications/standards/Ecma-048.htm" class="podlinkurl"
>http://www.ecma-international.org/publications/standards/Ecma-048.htm</a>.</p>

<p>ISO 6429 is available from ISO for a charge; the author of this module does not own a copy of it. Since the source material for ISO 6429 was ECMA-048 and the latter is available for free, there seems little reason to obtain the ISO standard.</p>

<p>The current version of this module is always available from its web site at <a href="http://www.eyrie.org/~eagle/software/ansicolor/" class="podlinkurl"
>http://www.eyrie.org/~eagle/software/ansicolor/</a>. It is also part of the Perl core distribution as of 5.6.0.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Original idea (using constants) by Zenin, reimplemented using subs by Russ Allbery &#60;rra@stanford.edu&#62;, and then combined with the original idea by Russ with input from Zenin. Russ Allbery now maintains this module.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 1996, 1997, 1998, 2000, 2001, 2002, 2005, 2006, 2008, 2009, 2010, 2011, 2012 Russ Allbery &#60;rra@stanford.edu&#62; and Zenin. This program is free software; you may redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>PUSHCOLOR, POPCOLOR, and LOCALCOLOR were contributed by openmethods.com voice solutions.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78070 Uploads, 24687 Distributions
105903 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sun Apr 22 13:15:29 2012 GMT (0.341137170791626) @cpansearch1 -->
 </body>
</html>
