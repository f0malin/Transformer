<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Moose::Cookbook::Basics::Recipe1 - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Moose",3]);
    _gaq.push(["_setCustomVar",5,"Release","Moose-2.0403",3]);
    _gaq.push(["_setCustomVar",4,"Document","Moose::Cookbook::Basics::Recipe1",3]);
    _gaq.push(["_setCustomVar",1,"Author","DOY",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Moose::Cookbook::Basics::Recipe1">permalink</a></div>
  <a href="/~doy/">Jesse Luehrs</a> &gt;
  <a href="/~doy/Moose-2.0403/">Moose-2.0403</a> &gt;
  Moose::Cookbook::Basics::Recipe1
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/88766de7a058697d3d0335b8d384fd2a?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/D/DO/DOY/Moose-2.0403.tar.gz">Moose-2.0403.tar.gz</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~DOY/Moose-2.0403/lib/Moose/Cookbook/Basics/Recipe1.pod">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 13</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 27</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 4</td></tr>
</table>
<a href="http://rt.cpan.org/NoAuth/Bugs.html?Dist=Moose">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
<span class="noprint">
  <a href="/src/DOY/Moose-2.0403/lib/Moose/Cookbook/Basics/Recipe1.pod">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Moose_Objects_are_Just_Hashrefs'>Moose Objects are Just Hashrefs</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#CONCLUSION'>CONCLUSION</a>
  <li class='indexItem indexItem1'><a href='#FOOTNOTES'>FOOTNOTES</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose::Cookbook::Basics::Recipe1 - The (always classic) <b>Point</b> example.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>version 2.0403</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  package Point;
  use Moose;

  has &#39;x&#39; =&#62; (isa =&#62; &#39;Int&#39;, is =&#62; &#39;rw&#39;, required =&#62; 1);
  has &#39;y&#39; =&#62; (isa =&#62; &#39;Int&#39;, is =&#62; &#39;rw&#39;, required =&#62; 1);

  sub clear {
      my $self = shift;
      $self-&#62;x(0);
      $self-&#62;y(0);
  }

  package Point3D;
  use Moose;

  extends &#39;Point&#39;;

  has &#39;z&#39; =&#62; (isa =&#62; &#39;Int&#39;, is =&#62; &#39;rw&#39;, required =&#62; 1);

  after &#39;clear&#39; =&#62; sub {
      my $self = shift;
      $self-&#62;z(0);
  };

  package main;

  # hash or hashrefs are ok for the constructor
  my $point1 = Point-&#62;new(x =&#62; 5, y =&#62; 7);
  my $point2 = Point-&#62;new({x =&#62; 5, y =&#62; 7});

  my $point3d = Point3D-&#62;new(x =&#62; 5, y =&#62; 42, z =&#62; -5);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This is the classic Point example. It is taken directly from the Perl 6 Apocalypse 12 document, and is similar to the example found in the classic K&#38;R C book as well.</p>

<p>As with all Perl 5 classes, a Moose class is defined in a package. Moose handles turning on <code>strict</code> and <code>warnings</code> for us, so all we need to do is say <code>use Moose</code>, and no kittens will die.</p>

<p>When Moose is loaded, it exports a set of sugar functions into our package. This means that we import some functions which serve as Moose &#34;keywords&#34;. These aren&#39;t real language keywords, they&#39;re just Perl functions exported into our package.</p>

<p>Moose automatically makes our package a subclass of <a href="/~doy/Moose-2.0403/lib/Moose/Object.pm" class="podlinkpod"
>Moose::Object</a>. The <a href="/~doy/Moose-2.0403/lib/Moose/Object.pm" class="podlinkpod"
>Moose::Object</a> class provides us with a constructor that respects our attributes, as well other features. See <a href="/~doy/Moose-2.0403/lib/Moose/Object.pm" class="podlinkpod"
>Moose::Object</a> for details.</p>

<p>Now, onto the keywords. The first one we see here is <code>has</code>, which defines an instance attribute in our class:</p>

<pre class="sh_perl">  has &#39;x&#39; =&#62; (isa =&#62; &#39;Int&#39;, is =&#62; &#39;rw&#39;, required =&#62; 1);</pre>

<p>This will create an attribute named <code>x</code>. The <code>isa</code> parameter says that we expect the value stored in this attribute to pass the type constraint for <code>Int</code> (1). The accessor generated for this attribute will be read-write.</p>

<p>The <code>required =&#62; 1</code> parameter means that this attribute must be provided when a new object is created. A point object without coordinates doesn&#39;t make much sense, so we don&#39;t allow it.</p>

<p>We have defined our attributes; next we define our methods. In Moose, as with regular Perl 5 OO, a method is just a subroutine defined within the package:</p>

<pre class="sh_perl">  sub clear {
      my $self = shift;
      $self-&#62;x(0);
      $self-&#62;y(0);
  }</pre>

<p>That concludes the <b>Point</b> class.</p>

<p>Next we have a subclass of <b>Point</b>, <b>Point3D</b>. To declare our superclass, we use the Moose keyword <code>extends</code>:</p>

<pre class="sh_perl">  extends &#39;Point&#39;;</pre>

<p>The <code>extends</code> keyword works much like <code>use base</code>. First, it will attempt to load your class if needed. However, unlike <code>base</code>, the <code>extends</code> keyword will <i>overwrite</i> any previous values in your package&#39;s <code>@ISA</code>, where <code>use base</code> will <code>push</code> values onto the package&#39;s <code>@ISA</code>.</p>

<p>It is my opinion that the behavior of <code>extends</code> is more intuitive. (2).</p>

<p>Next we create a new attribute for <b>Point3D</b> called <code>z</code>.</p>

<pre class="sh_perl">  has &#39;z&#39; =&#62; (isa =&#62; &#39;Int&#39;, is =&#62; &#39;rw&#39;, required =&#62; 1);</pre>

<p>This attribute is just like <b>Point</b>&#39;s <code>x</code> and <code>y</code> attributes.</p>

<p>The <code>after</code> keyword demonstrates a Moose feature called &#34;method modifiers&#34; (or &#34;advice&#34; for the AOP inclined):</p>

<pre class="sh_perl">  after &#39;clear&#39; =&#62; sub {
      my $self = shift;
      $self-&#62;z(0);
  };</pre>

<p>When <code>clear</code> is called on a <b>Point3D</b> object, our modifier method gets called as well. Unsurprisingly, the modifier is called <i>after</i> the real method.</p>

<p>In this case, the real <code>clear</code> method is inherited from <b>Point</b>. Our modifier method receives the same arguments as those passed to the modified method (just <code>$self</code> here).</p>

<p>Of course, using the <code>after</code> modifier is not the only way to accomplish this. This <b>is</b> Perl, right? You can get the same results with this code:</p>

<pre class="sh_perl">  sub clear {
      my $self = shift;
      $self-&#62;SUPER::clear();
      $self-&#62;z(0);
  }</pre>

<p>You could also use another Moose method modifier, <code>override</code>:</p>

<pre class="sh_perl">  override &#39;clear&#39; =&#62; sub {
      my $self = shift;
      super();
      $self-&#62;z(0);
  };</pre>

<p>The <code>override</code> modifier allows you to use the <code>super</code> keyword to dispatch to the superclass&#39;s method in a very Ruby-ish style.</p>

<p>The choice of whether to use a method modifier, and which one to use, is often a question of style as much as functionality.</p>

<p>Since <b>Point</b> inherits from <a href="/~doy/Moose-2.0403/lib/Moose/Object.pm" class="podlinkpod"
>Moose::Object</a>, it will also inherit the default <a href="/~doy/Moose-2.0403/lib/Moose/Object.pm" class="podlinkpod"
>Moose::Object</a> constructor:</p>

<pre class="sh_perl">  my $point1 = Point-&#62;new(x =&#62; 5, y =&#62; 7);
  my $point2 = Point-&#62;new({x =&#62; 5, y =&#62; 7});

  my $point3d = Point3D-&#62;new(x =&#62; 5, y =&#62; 42, z =&#62; -5);</pre>

<p>The <code>new</code> constructor accepts a named argument pair for each attribute defined by the class, which you can provide as a hash or hash reference. In this particular example, the attributes are required, and calling <code>new</code> without them will throw an error.</p>

<pre class="sh_perl">  my $point = Point-&#62;new( x =&#62; 5 ); # no y, kaboom!</pre>

<p>From here on, we can use <code>$point</code> and <code>$point3d</code> just as you would any other Perl 5 object. For a more detailed example of what can be done, you can refer to the <em>t/recipes/moose_cookbook_basics_recipe1.t</em> test file.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Moose_Objects_are_Just_Hashrefs"
>Moose Objects are Just Hashrefs</a></h2>

<p>While this all may appear rather magical, it&#39;s important to realize that Moose objects are just hash references under the hood (3). For example, you could pass <code>$self</code> to <code>Data::Dumper</code> and you&#39;d get exactly what you&#39;d expect.</p>

<p>You could even poke around inside the object&#39;s data structure, but that is strongly discouraged.</p>

<p>The fact that Moose objects are hashrefs means it is easy to use Moose to extend non-Moose classes, as long as they too are hash references. If you want to extend a non-hashref class, check out <code>MooseX::InsideOut</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONCLUSION"
>CONCLUSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This recipe demonstrates some basic Moose concepts, attributes, subclassing, and a simple method modifier.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FOOTNOTES"
>FOOTNOTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='1'></a><a name="(1)"
>(1)</a></dt>

<dd>
<p>Moose provides a number of builtin type constraints, of which <code>Int</code> is one. For more information on the type constraint system, see <a href="/~doy/Moose-2.0403/lib/Moose/Util/TypeConstraints.pm" class="podlinkpod"
>Moose::Util::TypeConstraints</a>.</p>

<dt><a name='2'></a><a name="(2)"
>(2)</a></dt>

<dd>
<p>The <code>extends</code> keyword supports multiple inheritance. Simply pass all of your superclasses to <code>extends</code> as a list:</p>

<pre class="sh_perl">  extends &#39;Foo&#39;, &#39;Bar&#39;, &#39;Baz&#39;;</pre>

<dt><a name='3'></a><a name="(3)"
>(3)</a></dt>

<dd>
<p>Moose supports using instance structures other than blessed hash references (such as glob references - see <a href="/perldoc?MooseX%3A%3AGlobRef" class="podlinkpod"
>MooseX::GlobRef</a>).</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='Method'></a><a name="Method_Modifiers"
>Method Modifiers</a></dt>

<dd>
<p>The concept of method modifiers is directly ripped off from CLOS. A great explanation of them can be found by following this link.</p>

<p><a href="http://www.gigamonkeys.com/book/object-reorientation-generic-functions.html" class="podlinkurl"
>http://www.gigamonkeys.com/book/object-reorientation-generic-functions.html</a></p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Moose is maintained by the Moose Cabal, along with the help of many contributors. See <a href="/~doy/Moose-2.0403/lib/Moose.pm#CABAL" class="podlinkpod"
>&#34;CABAL&#34; in Moose</a> and <a href="/~doy/Moose-2.0403/lib/Moose.pm#CONTRIBUTORS" class="podlinkpod"
>&#34;CONTRIBUTORS&#34; in Moose</a> for details.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This software is copyright (c) 2012 by Infinity Interactive, Inc..</p>

<p>This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78191 Uploads, 24710 Distributions
106007 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Document']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Document']);
    });
  });
</script>
<!-- Wed Apr 25 11:50:51 2012 GMT (0.30092191696167) @cpansearch1 -->
 </body>
</html>
