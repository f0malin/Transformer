<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Math::Random - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Math-Random",3]);
    _gaq.push(["_setCustomVar",5,"Release","Math-Random-0.71",3]);
    _gaq.push(["_setCustomVar",3,"Module","Math::Random",3]);
    _gaq.push(["_setCustomVar",1,"Author","GROMMEL",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Math::Random">permalink</a></div>
  <a href="/~grommel/">Geoffrey Rommel</a> &gt;
  <a href="/~grommel/Math-Random-0.71/">Math-Random-0.71</a> &gt;
  Math::Random
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/a0a07d95420c52c45a2577de723c7622?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/G/GR/GROMMEL/Math-Random-0.71.tar.gz">Math-Random-0.71.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Math%3A%3ARandom;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~GROMMEL/Math-Random-0.71/Random.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Math%3A%3ARandom%3A%3AMT">Math::Random::MT</a><br>
<a href="/perldoc?Tie%3A%3AScalar">Tie::Scalar</a><br>
<a href="/perldoc?Data%3A%3ARandom">Data::Random</a><br>
<a href="/perldoc?Math%3A%3ABigInt">Math::BigInt</a><br>
<a href="/perldoc?List%3A%3AUtil">List::Util</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Math%3A%3ATrig">Math::Trig</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Math%3A%3ARandom">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 2</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Math-Random">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.71 &nbsp;
<span class="noprint">
  <a href="/src/GROMMEL/Math-Random-0.71/Random.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Default_Routines'>Default Routines</a>
    <li class='indexItem indexItem2'><a href='#Extended_Routines'>Extended Routines</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#ERROR_HANDLING'>ERROR HANDLING</a>
  <li class='indexItem indexItem1'><a href='#RANDLIB'>RANDLIB</a>
  <li class='indexItem indexItem1'><a href='#SUPPORT'>SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#CODE_MANIPULATION'>CODE MANIPULATION</a>
  <li class='indexItem indexItem1'><a href='#SOURCES'>SOURCES</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#LEGALITIES'>LEGALITIES</a>
  <li class='indexItem indexItem1'><a href='#NO_WARRANTY'>NO WARRANTY</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>Math::Random</b> - Random Number Generators</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li>
<pre class="sh_perl"> use Math::Random;</pre>

<p>Exports the following routines by default (see <a href="#Default_Routines" class="podlinkpod"
>&#34;Default Routines&#34;</a>):</p>

<pre class="sh_perl"> random_set_seed_from_phrase
 random_get_seed
 random_seed_from_phrase
 random_set_seed
 random_uniform
 random_uniform_integer
 random_permutation
 random_permuted_index
 random_normal</pre>

<p>In this case the extended routines (see <a href="#Extended_Routines" class="podlinkpod"
>&#34;Extended Routines&#34;</a>) can be used by qualifying them explicitly with <code>Math::Random::</code>, for example: <code>$stdexp = Math::Random::random_exponential();</code></p>
</li>

<li>
<pre class="sh_perl"> use Math::Random qw(random_beta
                     random_chi_square
                     random_exponential
                     random_f
                     random_gamma
                     random_multivariate_normal
                     random_multinomial
                     random_noncentral_chi_square
                     random_noncentral_f
                     random_normal
                     random_permutation
                     random_permuted_index
                     random_uniform
                     random_poisson
                     random_uniform_integer
                     random_negative_binomial
                     random_binomial
                     random_seed_from_phrase
                     random_get_seed
                     random_set_seed_from_phrase
                     random_set_seed );</pre>

<p>Exports all the routines explicitly. Use a subset of the list for the routines you want.</p>
</li>

<li>
<pre class="sh_perl"> use Math::Random qw(:all);</pre>

<p>Exports all the routines, as well.</p>
</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>Math::Random</b> is a <b>Perl</b> port of the <b>C</b> version of <b>randlib</b>, which is a suite of routines for generating random deviates. See <a href="#RANDLIB" class="podlinkpod"
>&#34;RANDLIB&#34;</a> for more information.</p>

<p>This port supports all of the distributions from which the <b>Fortran</b> and <b>C</b> versions generate deviates. The major functionalities that are excluded are the multiple generators/splitting facility and antithetic random number generation. These facilities, along with some of the distributions which <i>are</i> included, are probably not of interest except to the very sophisticated user. If there is sufficient interest, the excluded facilities will be included in a future release. The code to perform the excluded facilities is available as <b>randlib</b> in <b>Fortran</b> and <b>C</b> source.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Default_Routines"
>Default Routines</a></h2>

<p>The routines which are exported by default are the only ones that the average Perl programmer is likely to need.</p>

<dl>
<dt><a name='random_set_seed_from_phrase'></a><a name="random_set_seed_from_phrase($phrase)"
><code>random_set_seed_from_phrase($phrase)</code></a></dt>

<dd>
<p>Sets the seed of the base generator to a value determined by <i>$phrase</i>. If the module is installed with the default option, the value depends on the machine collating sequence. It should, however, be the same for 7-bit ASCII character strings on all ASCII machines. In the original randlib, the value generated for a given <i>$phrase</i> was consistent from implementation to implementation (it did not rely on the machine collating sequence). Check with your Perl administrator to see if the module was installed with the original seed generator. <b>Note:</b> When the Perl processor loads package <b>Math::Random</b> the seed is set to a value based on the current time. The seed changes each time <b>Math::Random</b> generates something random.</p>

<p>The ability to set the seed is useful for debugging, or for those who like reproducible runs.</p>

<dt><a name='random_get_seed'></a><a name="random_get_seed()"
><code>random_get_seed()</code></a></dt>

<dd>
<p>Returns an array of length two which contains the two integers constituting the seed (assuming a call in array context). An invocation in a scalar context returns the integer 2, which is probably not useful.</p>

<dt><a name='random_seed_from_phrase'></a><a name="random_seed_from_phrase($phrase)"
><code>random_seed_from_phrase($phrase)</code></a></dt>

<dd>
<p>Returns an array of length two which contains the two integers constituting the seed (assuming a call in array context). An invocation in a scalar context returns the integer 2, which is probably not useful. The seed generated is the seed used to set the seed in a call to <code>random_set_seed_from_phrase</code>.</p>

<p><b>Note:</b> the following two calls (for the same <i>$phrase</i>) are equivalent:</p>

<pre class="sh_perl"> random_set_seed(random_seed_from_phrase($phrase));</pre>

<p>and</p>

<pre class="sh_perl"> random_set_seed_from_phrase($phrase);</pre>

<dt><a name='random_set_seed'></a><a name="random_set_seed(@seed)"
><code>random_set_seed(@seed)</code></a></dt>

<dd>
<p>Sets the seed of the base generator to the value <i>@seed</i>[0,1]. Usually, the argument <i>@seed</i> should be the result of a call to <code>random_get_seed</code> or <code>random_seed_from_phrase</code>. <i>@seed</i>[0,1] must be two integers in the range (1,&#160;1) to (2147483562,&#160;2147483398), inclusive.</p>

<dt><a name='random_uniform'></a><a name="random_uniform($n,_$low,_$high)"
><code>random_uniform($n, $low, $high)</code></a></dt>

<dd>
<dt><a name='random_uniform'></a><a name="random_uniform($n)"
><code>random_uniform($n)</code></a></dt>

<dd>
<dt><a name='random_uniform'></a><a name="random_uniform()"
><code>random_uniform()</code></a></dt>

<dd>
<p>When called in an array context, returns an array of <i>$n</i> deviates generated from a <i>uniform($low,</i>&#160;<i>$high)</i> distribution. When called in a scalar context, generates and returns only one such deviate as a scalar, regardless of the value of <i>$n</i>.</p>

<p>Argument restrictions: <i>$low</i> must be less than or equal to <i>$high</i>.</p>

<p>Defaults are (1, 0, 1). <b>Note:</b> <i>$high</i> must be specified if <i>$low</i> is specified.</p>

<dt><a name='random_uniform_integer'></a><a name="random_uniform_integer($n,_$low,_$high)"
><code>random_uniform_integer($n, $low, $high)</code></a></dt>

<dd>
<p>When called in an array context, returns an array of <i>$n</i> integer deviates generated from a <i>uniform($low,</i>&#160;<i>$high)</i> distribution on the integers. When called in a scalar context, generates and returns only one such deviate as a scalar, regardless of the value of <i>$n</i>.</p>

<p>Argument restrictions: <i>$low</i> and <i>$high</i> are first rounded using <code>int()</code>; the resulting <i>$low</i> must be less than or equal to <i>$high</i>, and the resulting range <i>($high - $low)</i> must not be greater than 2147483561.</p>

<p>There are no defaults; all three arguments must be provided.</p>

<dt><a name='random_permutation'></a><a name="random_permutation(@array)"
><code>random_permutation(@array)</code></a></dt>

<dd>
<p>Returns <i>@array</i>, randomly permuted.</p>

<dt><a name='random_permuted_index'></a><a name="random_permuted_index($n)"
><code>random_permuted_index($n)</code></a></dt>

<dd>
<p>Returns an array of array indices, randomly permuted. The indices used are (0,&#160;...&#160;,(<i>$n</i>&#160;-&#160;1)). This produces the indices used by <code>random_permutation</code> for a given seed, without passing arrays.</p>

<p><b>Note:</b> the following are equivalent:</p>

<pre class="sh_perl"> random_set_seed_from_phrase(&#39;jjv&#39;);
 random_permutation(@array);</pre>

<p>and</p>

<pre class="sh_perl"> random_set_seed_from_phrase(&#39;jjv&#39;);
 @array[(random_permuted_index(scalar(@array)))];</pre>

<dt><a name='random_normal'></a><a name="random_normal($n,_$av,_$sd)"
><code>random_normal($n, $av, $sd)</code></a></dt>

<dd>
<dt><a name='random_normal'></a><a name="random_normal($n,_$av)"
><code>random_normal($n, $av)</code></a></dt>

<dd>
<dt><a name='random_normal'></a><a name="random_normal($n)"
><code>random_normal($n)</code></a></dt>

<dd>
<dt><a name='random_normal'></a><a name="random_normal()"
><code>random_normal()</code></a></dt>

<dd>
<p>When called in an array context, returns an array of <i>$n</i> deviates generated from a <i>normal($av, $sd^2)</i> distribution. When called in a scalar context, generates and returns only one such deviate as a scalar, regardless of the value of <i>$n</i>.</p>

<p>Argument restrictions: <i>$sd</i> must be non-negative.</p>

<p>Defaults are (1, 0, 1).</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Extended_Routines"
>Extended Routines</a></h2>

<p>These routines generate deviates from many other distributions.</p>

<p><b>Note:</b> The parameterizations of these deviates are standard (insofar as there <i>is</i> a standard ... ) but particular attention should be paid to the distributions of the <i>beta</i> and <i>gamma</i> deviates (noted in <code>random_beta</code> and <code>random_gamma</code> below).</p>

<dl>
<dt><a name='random_beta'></a><a name="random_beta($n,_$aa,_$bb)"
><code>random_beta($n, $aa, $bb)</code></a></dt>

<dd>
<p>When called in an array context, returns an array of <i>$n</i> deviates generated from the <i>beta</i> distribution with parameters <i>$aa</i> and <i>$bb</i>. The density of the beta is:</p>

<p>X^(<i>$aa</i> - 1) * (1 - X)^(<i>$bb</i> - 1) / B(<i>$aa</i> , <i>$bb</i>) for 0 &#60; X &#60; 1.</p>

<p>When called in a scalar context, generates and returns only one such deviate as a scalar, regardless of the value of <i>$n</i>.</p>

<p>Argument restrictions: Both <i>$aa</i> and <i>$bb</i> must not be less than <code>1.0E-37</code>.</p>

<p>There are no defaults; all three arguments must be provided.</p>

<dt><a name='random_binomial'></a><a name="random_binomial($n,_$nt,_$p)"
><code>random_binomial($n, $nt, $p)</code></a></dt>

<dd>
<p>When called in an array context, returns an array of <i>$n</i> outcomes generated from the <i>binomial</i> distribution with number of trials <i>$nt</i> and probability of an event in each trial <i>$p</i>. When called in a scalar context, generates and returns only one such outcome as a scalar, regardless of the value of <i>$n</i>.</p>

<p>Argument restrictions: <i>$nt</i> is rounded using <code>int()</code>; the result must be non-negative. <i>$p</i> must be between 0 and 1 inclusive.</p>

<p>There are no defaults; both arguments must be provided.</p>

<dt><a name='random_chi_square'></a><a name="random_chi_square($n,_$df)"
><code>random_chi_square($n, $df)</code></a></dt>

<dd>
<p>When called in an array context, returns an array of <i>$n</i> deviates generated from the <i>chi-square</i> distribution with <i>$df</i> degrees of freedom. When called in a scalar context, generates and returns only one such deviate as a scalar, regardless of the value of <i>$n</i>.</p>

<p>Argument restrictions: <i>$df</i> must be positive.</p>

<p>There are no defaults; both arguments must be provided.</p>

<dt><a name='random_exponential'></a><a name="random_exponential($n,_$av)"
><code>random_exponential($n, $av)</code></a></dt>

<dd>
<dt><a name='random_exponential'></a><a name="random_exponential($n)"
><code>random_exponential($n)</code></a></dt>

<dd>
<dt><a name='random_exponential'></a><a name="random_exponential()"
><code>random_exponential()</code></a></dt>

<dd>
<p>When called in an array context, returns an array of <i>$n</i> deviates generated from the <i>exponential</i> distribution with mean <i>$av</i>. When called in a scalar context, generates and returns only one such deviate as a scalar, regardless of the value of <i>$n</i>.</p>

<p>Argument restrictions: <i>$av</i> must be non-negative.</p>

<p>Defaults are (1, 1).</p>

<dt><a name='random_f'></a><a name="random_f($n,_$dfn,_$dfd)"
><code>random_f($n, $dfn, $dfd)</code></a></dt>

<dd>
<p>When called in an array context, returns an array of <i>$n</i> deviates generated from the <i>F</i> (variance ratio) distribution with degrees of freedom <i>$dfn</i> (numerator) and <i>$dfd</i> (denominator). When called in a scalar context, generates and returns only one such deviate as a scalar, regardless of the value of <i>$n</i>.</p>

<p>Argument restrictions: Both <i>$dfn</i> and <i>$dfd</i> must be positive.</p>

<p>There are no defaults; all three arguments must be provided.</p>

<dt><a name='random_gamma'></a><a name="random_gamma($n,_$a,_$r)"
><code>random_gamma($n, $a, $r)</code></a></dt>

<dd>
<p>When called in an array context, returns an array of <i>$n</i> deviates generated from the <i>gamma</i> distribution with parameters <i>$a</i> and <i>$r</i>. The density of the gamma is:</p>

<p>(<i>$a</i>**<i>$r</i>) / Gamma(<i>$r</i>) * X**(<i>$r</i> - 1) * Exp(-<i>$a</i>*X)</p>

<p>When called in a scalar context, generates and returns only one such deviate as a scalar, regardless of the value of <i>$n</i>.</p>

<p>Argument restrictions: Both <i>$a</i> and <i>$r</i> must be positive.</p>

<p>There are no defaults; all three arguments must be provided.</p>

<dt><a name='random_multinomial'></a><a name="random_multinomial($n,_@p)"
><code>random_multinomial($n, @p)</code></a></dt>

<dd>
<p>When called in an array context, returns single observation from the <i>multinomial</i> distribution, with <i>$n</i> events classified into as many categories as the length of <i>@p</i>. The probability of an event being classified into category <i>i</i> is given by the <i>i</i>th element of <i>@p</i>. The observation is an array with length equal to <i>@p</i>, so when called in a scalar context it returns the length of @p. The sum of the elements of the observation is equal to <i>$n</i>.</p>

<p>Argument restrictions: <i>$n</i> is rounded with <code>int()</code> before it is used; the result must be non-negative. <i>@p</i> must have length at least 2. All elements of <i>@p</i> except the last must be between 0 and 1 inclusive, and sum to no more than 0.99999. <b>Note:</b> The last element of <i>@p</i> is a dummy to indicate the number of categories, and it is adjusted to bring the sum of the elements of <i>@p</i> to 1.</p>

<p>There are no defaults; both arguments must be provided.</p>

<dt><a name='random_multivariate_normal'></a><a name="random_multivariate_normal($n,_@mean,_@covar)"
><code>random_multivariate_normal($n, @mean, @covar)</code></a></dt>

<dd>
<p>When called in an array context, returns an array of <i>$n</i> deviates (each deviate being an array reference) generated from the <i>multivariate normal</i> distribution with mean vector <i>@mean</i> and variance-covariance matrix <i>@covar</i>. When called in a scalar context, generates and returns only one such deviate as an array reference, regardless of the value of <i>$n</i>.</p>

<p>Argument restrictions: If the dimension of the deviate to be generated is <i>p</i>, <i>@mean</i> should be a length <i>p</i> array of real numbers. <i>@covar</i> should be a length <i>p</i> array of references to length <i>p</i> arrays of real numbers (i.e. a <i>p</i> by <i>p</i> matrix). Further, <i>@covar</i> should be a symmetric positive-definite matrix, although the <b>Perl</b> code does not check positive-definiteness, and the underlying <b>C</b> code assumes the matrix is symmetric. Given that the variance-covariance matrix is symmetric, it doesn&#39;t matter if the references refer to rows or columns. If a non-positive definite matrix is passed to the function, it will abort with the following message:</p>

<pre class="sh_perl"> COVM not positive definite in SETGMN</pre>

<p>Also, a non-symmetric <i>@covar</i> may produce deviates without complaint, although they may not be from the expected distribution. For these reasons, you are encouraged to <i>verify the arguments passed</i>.</p>

<p>The <b>Perl</b> code <i>does</i> check the dimensionality of <i>@mean</i> and <i>@covar</i> for consistency. It does so by checking that the length of the argument vector passed is odd, that what should be the last element of <i>@mean</i> and the first element of <i>@covar</i> look like they are a number followed by an array reference respectively, and that the arrays referred to in <i>@covar</i> are as long as <i>@mean</i>.</p>

<p>There are no defaults; all three arguments must be provided.</p>

<dt><a name='random_negative_binomial'></a><a name="random_negative_binomial($n,_$ne,_$p)"
><code>random_negative_binomial($n, $ne, $p)</code></a></dt>

<dd>
<p>When called in an array context, returns an array of <i>$n</i> outcomes generated from the <i>negative binomial</i> distribution with number of events <i>$ne</i> and probability of an event in each trial <i>$p</i>. When called in a scalar context, generates and returns only one such outcome as a scalar, regardless of the value of <i>$n</i>.</p>

<p>Argument restrictions: <i>$ne</i> is rounded using <code>int()</code>, the result must be positive. <i>$p</i> must be between 0 and 1 exclusive.</p>

<p>There are no defaults; both arguments must be provided.</p>

<dt><a name='random_noncentral_chi_square'></a><a name="random_noncentral_chi_square($n,_$df,_$nonc)"
><code>random_noncentral_chi_square($n, $df, $nonc)</code></a></dt>

<dd>
<p>When called in an array context, returns an array of <i>$n</i> deviates generated from the <i>noncentral chi-square</i> distribution with <i>$df</i> degrees of freedom and noncentrality parameter <i>$nonc</i>. When called in a scalar context, generates and returns only one such deviate as a scalar, regardless of the value of <i>$n</i>.</p>

<p>Argument restrictions: <i>$df</i> must be at least 1, <i>$nonc</i> must be non-negative.</p>

<p>There are no defaults; all three arguments must be provided.</p>

<dt><a name='random_noncentral_f'></a><a name="random_noncentral_f($n,_$dfn,_$dfd,_$nonc)"
><code>random_noncentral_f($n, $dfn, $dfd, $nonc)</code></a></dt>

<dd>
<p>When called in an array context, returns an array of <i>$n</i> deviates generated from the <i>noncentral F</i> (variance ratio) distribution with degrees of freedom <i>$dfn</i> (numerator) and <i>$dfd</i> (denominator); and noncentrality parameter <i>$nonc</i>. When called in a scalar context, generates and returns only one such deviate as a scalar, regardless of the value of <i>$n</i>.</p>

<p>Argument restrictions: <i>$dfn</i> must be at least 1, <i>$dfd</i> must be positive, and <i>$nonc</i> must be non-negative.</p>

<p>There are no defaults; all four arguments must be provided.</p>

<dt><a name='random_poisson'></a><a name="random_poisson($n,_$mu)"
><code>random_poisson($n, $mu)</code></a></dt>

<dd>
<p>When called in an array context, returns an array of <i>$n</i> outcomes generated from the <i>Poisson</i> distribution with mean <i>$mu</i>. When called in a scalar context, generates and returns only one such outcome as a scalar, regardless of the value of <i>$n</i>.</p>

<p>Argument restrictions: <i>$mu</i> must be non-negative.</p>

<p>There are no defaults; both arguments must be provided.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ERROR_HANDLING"
>ERROR HANDLING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <b>Perl</b> code should <code>croak</code> if bad arguments are passed or if the underlying <b>C</b> code cannot allocate the necessary memory. The only error which should kill the job without <code>croak</code>ing is a non-positive definite variance-covariance matrix passed to <code>random_multivarite_normal</code> (see <a href="#Extended_Routines" class="podlinkpod"
>&#34;Extended Routines&#34;</a>).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="RANDLIB"
>RANDLIB <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>randlib</b> is available in <b>Fortran</b> and <b>C</b> source form, and will soon be available in <b>Fortran90</b> source as well. <b>randlib.c</b> can be obtained from <b>statlib</b>. Send mail whose message is <i>&#39;send randlib.c.shar from general&#39;</i> to:</p>

<pre class="sh_perl">                       statlib@lib.stat.cmu.edu</pre>

<p><b>randlib.c</b> can also be obtained by anonymous <b>ftp</b> to:</p>

<pre class="sh_perl">                  odin.mdacc.tmc.edu (143.111.62.32)</pre>

<p>where it is available as</p>

<pre class="sh_perl">                   /pub/source/randlib.c-1.3.tar.gz</pre>

<p>For obvious reasons, the original <b>randlib</b> (in <b>Fortran</b>) has been renamed to</p>

<pre class="sh_perl">                   /pub/source/randlib.f-1.3.tar.gz</pre>

<p>on the same machine.</p>

<p>Our FTP index is on file <code>./pub/index</code>.</p>

<p>If you have Internet access and a browser you might note the following web site addresses:</p>

<p>University of Texas M. D. Anderson Cancer Center Home Page:</p>

<pre class="sh_perl">                   <a href="http://www.mdanderson.org/" class="podlinkurl"
>http://www.mdanderson.org/</a></pre>

<p>Department of Biomathematics Home Page:</p>

<pre class="sh_perl">                   <a href="http://odin.mdacc.tmc.edu/" class="podlinkurl"
>http://odin.mdacc.tmc.edu/</a></pre>

<p>Available software:</p>

<pre class="sh_perl">       <a href="http://biostatistics.mdanderson.org/SoftwareDownload/" class="podlinkurl"
>http://biostatistics.mdanderson.org/SoftwareDownload/</a></pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SUPPORT"
>SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This work was supported in part by grant CA-16672 from the National Cancer Institute. We are grateful to Larry and Pat McNeil of Corpus Cristi for their generous support. Some equipment used in this effort was provided by IBM as part of a cooperative study agreement; we thank them.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CODE_MANIPULATION"
>CODE MANIPULATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The <b>C</b> version of <b>randlib</b> was obtained by translating the original <b>Fortran</b> <b>randlib</b> using <b>PROMULA.FORTRAN</b>, and performing some hand crafting of the result.</p>

<p>Information on <b>PROMULA.FORTRAN</b> can be obtained from:</p>

<pre class="sh_perl">                   PROMULA Development Corporation
                    3620 N. High Street, Suite 301
                         Columbus, Ohio 43214
                            (614) 263-5454</pre>

<p><em>wrapper.c</em> (now obsolete) was created by using <b>SWIG</b>, and performing some modification of the result. <b>SWIG</b> also produced the skeleton of <em>Random.pm</em>.</p>

<p>Information on <b>SWIG</b> can be obtained from:</p>

<pre class="sh_perl">                   <a href="http://www.swig.org" class="podlinkurl"
>http://www.swig.org</a></pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SOURCES"
>SOURCES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following routines, which were written by others and lightly modified for consistency in packaging, are included in <b>randlib</b>.</p>

<dl>
<dt><a name='Bottom'></a><a name="Bottom_Level_Routines"
>Bottom Level Routines</a></dt>

<dd>
<p>These routines are a transliteration of the <b>Pascal</b> in the reference to <b>Fortran</b>, and thence to <b>C</b>.</p>

<p>L&#39;Ecuyer, P., and Cote, S. &#34;Implementing a Random Number Package with Splitting Facilities.&#34; ACM Transactions on Mathematical Software, 17:98-111 (1991).</p>

<dt><a name="Exponential"
>Exponential</a></dt>

<dd>
<p>This code was obtained from Netlib.</p>

<p>Ahrens, J. H., and Dieter, U. &#34;Computer Methods for Sampling from the Exponential and Normal Distributions.&#34; Comm. ACM, 15,10 (Oct. 1972), 873-882.</p>

<dt><a name="Gamma"
>Gamma</a></dt>

<dd>
<p>(Case R &#62;= 1.0)</p>

<p>Ahrens, J. H., and Dieter, U. &#34;Generating Gamma Variates by a Modified Rejection Technique.&#34; Comm. ACM, 25,1 (Jan. 1982), 47-54. Algorithm GD</p>

<p>(Case 0.0 &#60;= R &#60;= 1.0)</p>

<p>Ahrens, J. H., and Dieter, U. &#34;Computer Methods for Sampling from Gamma, Beta, Poisson and Binomial Distributions.&#34; Computing, 12 (1974), 223-246. Adaptation of algorithm GS.</p>

<dt><a name="Normal"
>Normal</a></dt>

<dd>
<p>This code was obtained from netlib.</p>

<p>Ahrens, J. H., and Dieter, U. &#34;Extensions of Forsythe&#39;s Method for Random Sampling from the Normal Distribution.&#34; Math. Comput., 27,124 (Oct. 1973), 927-937.</p>

<dt><a name="Binomial"
>Binomial</a></dt>

<dd>
<p>This code was kindly sent to Dr. Brown by Dr. Kachitvichyanukul.</p>

<p>Kachitvichyanukul, V., and Schmeiser, B. W. &#34;Binomial Random Variate Generation.&#34; Comm. ACM, 31, 2 (Feb. 1988), 216.</p>

<dt><a name="Poisson"
>Poisson</a></dt>

<dd>
<p>This code was obtained from netlib.</p>

<p>Ahrens, J. H., and Dieter, U. &#34;Computer Generation of Poisson Deviates from Modified Normal Distributions.&#34; ACM Trans. Math. Software, 8, 2 (June 1982), 163-179.</p>

<dt><a name="Beta"
>Beta</a></dt>

<dd>
<p>This code was written by us following the recipe in the following.</p>

<p>Cheng, R. C. H. &#34;Generating Beta Variables with Nonintegral Shape Parameters.&#34; Comm. ACM, 21:317-322 (1978). (Algorithms BB and BC)</p>

<dt><a name="Linpack"
>Linpack</a></dt>

<dd>
<p>Routines <code>SPOFA</code> and <code>SDOT</code> are used to perform the Cholesky decomposition of the covariance matrix in <code>SETGMN</code> (used for the generation of multivariate normal deviates).</p>

<p>Dongarra, J. J., Moler, C. B., Bunch, J. R., and Stewart, G. W. Linpack User&#39;s Guide. SIAM Press, Philadelphia. (1979)</p>

<dt><a name="Multinomial"
>Multinomial</a></dt>

<dd>
<p>The algorithm is from page 559 of Devroye, Luc Non-Uniform Random Variate Generation. New York: Springer-Verlag, 1986.</p>

<dt><a name='Negative'></a><a name="Negative_Binomial"
>Negative Binomial</a></dt>

<dd>
<p>The algorithm is from page 480 of Devroye, Luc Non-Uniform Random Variate Generation. New York: Springer-Verlag, 1986.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This POD documents <b>Math::Random</b> version 0.71.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li><b>Math::Random</b> (the <b>Perl</b> port of <b>Randlib</b>) was put together by John Venier and Barry W. Brown with help from <b>SWIG</b>. For version 0.61, Geoffrey Rommel made various cosmetic changes. Version 0.64 uses plain vanilla XS rather than SWIG.</li>

<li><b>randlib</b> was compiled and written by Barry W. Brown, James Lovato, Kathy Russell, and John Venier.</li>

<li>Correspondence regarding <b>Math::Random</b> or <b>randlib</b> should be addressed to John Venier by email to
<pre class="sh_perl">                      jvenier@mdanderson.org</pre>
</li>

<li>Our address is:
<pre class="sh_perl">                Department of Biomathematics, Box 237
         The University of Texas, M.D. Anderson Cancer Center
                       1515 Holcombe Boulevard
                          Houston, TX 77030</pre>
</li>

<li>Geoffrey Rommel may be reached at grommel [at] cpan [dot] org.</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LEGALITIES"
>LEGALITIES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li>The programs in the <b>Perl</b> code distributed with <b>Math::Random</b> and in the <b>C</b> code <em>helper.c</em>, as well as the documentation, are copyright by John Venier and Barry W. Brown for the University of Texas M. D. Anderson Cancer Center in 1997. They may be distributed and used under the same conditions as <b>Perl</b>.</li>

<li><em>randlib.c</em>, <em>com.c</em>, and <em>randlib.h</em> are from <b>randlib</b> (See <a href="#RANDLIB" class="podlinkpod"
>&#34;RANDLIB&#34;</a>) and are distributed with the following legalities.
<p>Code that appeared in an ACM publication is subject to their algorithms policy:</p>

<p>Submittal of an algorithm for publication in one of the ACM Transactions implies that unrestricted use of the algorithm within a computer is permissible. General permission to copy and distribute the algorithm without fee is granted provided that the copies are not made or distributed for direct commercial advantage. The ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission.</p>

<p>Krogh, F. &#34;Algorithms Policy.&#34; ACM Tran. Math. Softw. 13 (1987), 183-186.</p>

<p>Note, however, that only the particular expression of an algorithm can be copyrighted, not the algorithm per se; see 17 USC 102(b).</p>

<p>We place the Randlib code that we have written in the public domain.</p>
</li>

<li><b>Math::Randlib</b> and <b>randlib</b> are distributed with <b>NO WARRANTY</b>. See <a href="#NO_WARRANTY" class="podlinkpod"
>&#34;NO WARRANTY&#34;</a>.</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NO_WARRANTY"
>NO WARRANTY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>WE PROVIDE ABSOLUTELY NO WARRANTY OF ANY KIND EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THIS PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>

<p>IN NO EVENT SHALL THE UNIVERSITY OF TEXAS OR ANY OF ITS COMPONENT INSTITUTIONS INCLUDING M. D. ANDERSON HOSPITAL BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY LOST PROFITS, LOST MONIES, OR OTHER SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA OR ITS ANALYSIS BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY THIRD PARTIES FROM) THE PROGRAM.</p>

<p>(Above NO WARRANTY modified from the GNU NO WARRANTY statement.)</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78172 Uploads, 24707 Distributions
105971 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Wed Apr 25 01:11:16 2012 GMT (0.118643045425415) @cpansearch1 -->
 </body>
</html>
