<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Math::Trig - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Math-Complex",3]);
    _gaq.push(["_setCustomVar",5,"Release","Math-Complex-1.59",3]);
    _gaq.push(["_setCustomVar",3,"Module","Math::Trig",3]);
    _gaq.push(["_setCustomVar",1,"Author","ZEFRAM",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Math::Trig">permalink</a></div>
  <a href="/~zefram/">Andrew Main (Zefram)</a> &gt;
  <a href="/~zefram/Math-Complex-1.59/">Math-Complex-1.59</a> &gt;
  Math::Trig
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/aab343bc3a4424dcb7f913920242f051?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/Z/ZE/ZEFRAM/Math-Complex-1.59.tar.gz">Math-Complex-1.59.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Math%3A%3ATrig;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~ZEFRAM/Math-Complex-1.59/lib/Math/Trig.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Getopt%3A%3AStd">Getopt::Std</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Image%3A%3AMagick">Image::Magick</a><br>
<a href="/perldoc?GD%3A%3AGraph">GD::Graph</a><br>
<a href="/perldoc?GD%3A%3ASecurityImage">GD::SecurityImage</a><br>
<a href="/perldoc?Math%3A%3ARound">Math::Round</a><br>
<a href="/perldoc?Math%3A%3ABigFloat">Math::BigFloat</a><br>
<a href="/perldoc?Math%3A%3ABigInt">Math::BigInt</a><br>
<a href="/perldoc?Math%3A%3AComplex">Math::Complex</a><br>
<a href="/perldoc?Digest%3A%3AMD5">Digest::MD5</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Math%3A%3ATrig">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Math-Complex">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.23 &nbsp;
<span class="noprint">
  <a href="/src/ZEFRAM/Math-Complex-1.59/lib/Math/Trig.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#TRIGONOMETRIC_FUNCTIONS'>TRIGONOMETRIC FUNCTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#ERRORS_DUE_TO_DIVISION_BY_ZERO'>ERRORS DUE TO DIVISION BY ZERO</a>
    <li class='indexItem indexItem2'><a href='#SIMPLE_(REAL)_ARGUMENTS,_COMPLEX_RESULTS'>SIMPLE (REAL) ARGUMENTS, COMPLEX RESULTS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#PLANE_ANGLE_CONVERSIONS'>PLANE ANGLE CONVERSIONS</a>
  <li class='indexItem indexItem1'><a href='#RADIAL_COORDINATE_CONVERSIONS'>RADIAL COORDINATE CONVERSIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#COORDINATE_SYSTEMS'>COORDINATE SYSTEMS</a>
    <li class='indexItem indexItem2'><a href='#3-D_ANGLE_CONVERSIONS'>3-D ANGLE CONVERSIONS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#GREAT_CIRCLE_DISTANCES_AND_DIRECTIONS'>GREAT CIRCLE DISTANCES AND DIRECTIONS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#great_circle_distance'>great_circle_distance</a>
    <li class='indexItem indexItem2'><a href='#great_circle_direction'>great_circle_direction</a>
    <li class='indexItem indexItem2'><a href='#great_circle_bearing'>great_circle_bearing</a>
    <li class='indexItem indexItem2'><a href='#great_circle_destination'>great_circle_destination</a>
    <li class='indexItem indexItem2'><a href='#great_circle_midpoint'>great_circle_midpoint</a>
    <li class='indexItem indexItem2'><a href='#great_circle_waypoint'>great_circle_waypoint</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#CAVEAT_FOR_GREAT_CIRCLE_FORMULAS'>CAVEAT FOR GREAT CIRCLE FORMULAS</a>
    <li class='indexItem indexItem2'><a href='#Real-valued_asin_and_acos'>Real-valued asin and acos</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#LICENSE'>LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Math::Trig - trigonometric functions</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">    use Math::Trig;

    $x = tan(0.9);
    $y = acos(3.7);
    $z = asin(2.4);

    $halfpi = pi/2;

    $rad = deg2rad(120);

    # Import constants pi2, pip2, pip4 (2*pi, pi/2, pi/4).
    use Math::Trig &#39;:pi&#39;;

    # Import the conversions between cartesian/spherical/cylindrical.
    use Math::Trig &#39;:radial&#39;;

        # Import the great circle formulas.
    use Math::Trig &#39;:great_circle&#39;;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>Math::Trig</code> defines many trigonometric functions not defined by the core Perl which defines only the <code>sin()</code> and <code>cos()</code>. The constant <b>pi</b> is also defined as are a few convenience functions for angle conversions, and <i>great circle formulas</i> for spherical movement.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TRIGONOMETRIC_FUNCTIONS"
>TRIGONOMETRIC FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The tangent</p>

<dl>
<dt><a name="tan"
><b>tan</b></a></dt>
</dl>

<p>The cofunctions of the sine, cosine, and tangent (cosec/csc and cotan/cot are aliases)</p>

<p><b>csc</b>, <b>cosec</b>, <b>sec</b>, <b>sec</b>, <b>cot</b>, <b>cotan</b></p>

<p>The arcus (also known as the inverse) functions of the sine, cosine, and tangent</p>

<p><b>asin</b>, <b>acos</b>, <b>atan</b></p>

<p>The principal value of the arc tangent of y/x</p>

<p><b>atan2</b>(y, x)</p>

<p>The arcus cofunctions of the sine, cosine, and tangent (acosec/acsc and acotan/acot are aliases). Note that atan2(0, 0) is not well-defined.</p>

<p><b>acsc</b>, <b>acosec</b>, <b>asec</b>, <b>acot</b>, <b>acotan</b></p>

<p>The hyperbolic sine, cosine, and tangent</p>

<p><b>sinh</b>, <b>cosh</b>, <b>tanh</b></p>

<p>The cofunctions of the hyperbolic sine, cosine, and tangent (cosech/csch and cotanh/coth are aliases)</p>

<p><b>csch</b>, <b>cosech</b>, <b>sech</b>, <b>coth</b>, <b>cotanh</b></p>

<p>The area (also known as the inverse) functions of the hyperbolic sine, cosine, and tangent</p>

<p><b>asinh</b>, <b>acosh</b>, <b>atanh</b></p>

<p>The area cofunctions of the hyperbolic sine, cosine, and tangent (acsch/acosech and acoth/acotanh are aliases)</p>

<p><b>acsch</b>, <b>acosech</b>, <b>asech</b>, <b>acoth</b>, <b>acotanh</b></p>

<p>The trigonometric constant <b>pi</b> and some of handy multiples of it are also defined.</p>

<p><b>pi, pi2, pi4, pip2, pip4</b></p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ERRORS_DUE_TO_DIVISION_BY_ZERO"
>ERRORS DUE TO DIVISION BY ZERO</a></h2>

<p>The following functions</p>

<pre class="sh_perl">    acoth
    acsc
    acsch
    asec
    asech
    atanh
    cot
    coth
    csc
    csch
    sec
    sech
    tan
    tanh</pre>

<p>cannot be computed for all arguments because that would mean dividing by zero or taking logarithm of zero. These situations cause fatal runtime errors looking like this</p>

<pre class="sh_perl">    cot(0): Division by zero.
    (Because in the definition of cot(0), the divisor sin(0) is 0)
    Died at ...</pre>

<p>or</p>

<pre class="sh_perl">    atanh(-1): Logarithm of zero.
    Died at...</pre>

<p>For the <code>csc</code>, <code>cot</code>, <code>asec</code>, <code>acsc</code>, <code>acot</code>, <code>csch</code>, <code>coth</code>, <code>asech</code>, <code>acsch</code>, the argument cannot be <code>0</code> (zero). For the <code>atanh</code>, <code>acoth</code>, the argument cannot be <code>1</code> (one). For the <code>atanh</code>, <code>acoth</code>, the argument cannot be <code>-1</code> (minus one). For the <code>tan</code>, <code>sec</code>, <code>tanh</code>, <code>sech</code>, the argument cannot be <i>pi/2 + k * pi</i>, where <i>k</i> is any integer.</p>

<p>Note that atan2(0, 0) is not well-defined.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="SIMPLE_(REAL)_ARGUMENTS,_COMPLEX_RESULTS"
>SIMPLE (REAL) ARGUMENTS, COMPLEX RESULTS</a></h2>

<p>Please note that some of the trigonometric functions can break out from the <b>real axis</b> into the <b>complex plane</b>. For example <code>asin(2)</code> has no definition for plain real numbers but it has definition for complex numbers.</p>

<p>In Perl terms this means that supplying the usual Perl numbers (also known as scalars, please see <a href="/perldoc?perldata" class="podlinkpod"
>perldata</a>) as input for the trigonometric functions might produce as output results that no more are simple real numbers: instead they are complex numbers.</p>

<p>The <code>Math::Trig</code> handles this by using the <code>Math::Complex</code> package which knows how to handle complex numbers, please see <a href="/~zefram/Math-Complex-1.59/lib/Math/Complex.pm" class="podlinkpod"
>Math::Complex</a> for more information. In practice you need not to worry about getting complex numbers as results because the <code>Math::Complex</code> takes care of details like for example how to display complex numbers. For example:</p>

<pre class="sh_perl">    print asin(2), &#34;\n&#34;;</pre>

<p>should produce something like this (take or leave few last decimals):</p>

<pre class="sh_perl">    1.5707963267949-1.31695789692482i</pre>

<p>That is, a complex number with the real part of approximately <code>1.571</code> and the imaginary part of approximately <code>-1.317</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PLANE_ANGLE_CONVERSIONS"
>PLANE ANGLE CONVERSIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>(Plane, 2-dimensional) angles may be converted with the following functions.</p>

<dl>
<dt><a name="deg2rad"
>deg2rad</a></dt>

<dd>
<pre class="sh_perl">    $radians  = deg2rad($degrees);</pre>

<dt><a name="grad2rad"
>grad2rad</a></dt>

<dd>
<pre class="sh_perl">    $radians  = grad2rad($gradians);</pre>

<dt><a name="rad2deg"
>rad2deg</a></dt>

<dd>
<pre class="sh_perl">    $degrees  = rad2deg($radians);</pre>

<dt><a name="grad2deg"
>grad2deg</a></dt>

<dd>
<pre class="sh_perl">    $degrees  = grad2deg($gradians);</pre>

<dt><a name="deg2grad"
>deg2grad</a></dt>

<dd>
<pre class="sh_perl">    $gradians = deg2grad($degrees);</pre>

<dt><a name="rad2grad"
>rad2grad</a></dt>

<dd>
<pre class="sh_perl">    $gradians = rad2grad($radians);</pre>
</dd>
</dl>

<p>The full circle is 2 <i>pi</i> radians or <i>360</i> degrees or <i>400</i> gradians. The result is by default wrapped to be inside the [0, {2pi,360,400}[ circle. If you don&#39;t want this, supply a true second argument:</p>

<pre class="sh_perl">    $zillions_of_radians  = deg2rad($zillions_of_degrees, 1);
    $negative_degrees     = rad2deg($negative_radians, 1);</pre>

<p>You can also do the wrapping explicitly by rad2rad(), deg2deg(), and grad2grad().</p>

<dl>
<dt><a name="rad2rad"
>rad2rad</a></dt>

<dd>
<pre class="sh_perl">    $radians_wrapped_by_2pi = rad2rad($radians);</pre>

<dt><a name="deg2deg"
>deg2deg</a></dt>

<dd>
<pre class="sh_perl">    $degrees_wrapped_by_360 = deg2deg($degrees);</pre>

<dt><a name="grad2grad"
>grad2grad</a></dt>

<dd>
<pre class="sh_perl">    $gradians_wrapped_by_400 = grad2grad($gradians);</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="RADIAL_COORDINATE_CONVERSIONS"
>RADIAL COORDINATE CONVERSIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>Radial coordinate systems</b> are the <b>spherical</b> and the <b>cylindrical</b> systems, explained shortly in more detail.</p>

<p>You can import radial coordinate conversion functions by using the <code>:radial</code> tag:</p>

<pre class="sh_perl">    use Math::Trig &#39;:radial&#39;;

    ($rho, $theta, $z)     = cartesian_to_cylindrical($x, $y, $z);
    ($rho, $theta, $phi)   = cartesian_to_spherical($x, $y, $z);
    ($x, $y, $z)           = cylindrical_to_cartesian($rho, $theta, $z);
    ($rho_s, $theta, $phi) = cylindrical_to_spherical($rho_c, $theta, $z);
    ($x, $y, $z)           = spherical_to_cartesian($rho, $theta, $phi);
    ($rho_c, $theta, $z)   = spherical_to_cylindrical($rho_s, $theta, $phi);</pre>

<p><b>All angles are in radians</b>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="COORDINATE_SYSTEMS"
>COORDINATE SYSTEMS</a></h2>

<p><b>Cartesian</b> coordinates are the usual rectangular <i>(x, y, z)</i>-coordinates.</p>

<p>Spherical coordinates, <i>(rho, theta, pi)</i>, are three-dimensional coordinates which define a point in three-dimensional space. They are based on a sphere surface. The radius of the sphere is <b>rho</b>, also known as the <i>radial</i> coordinate. The angle in the <i>xy</i>-plane (around the <i>z</i>-axis) is <b>theta</b>, also known as the <i>azimuthal</i> coordinate. The angle from the <i>z</i>-axis is <b>phi</b>, also known as the <i>polar</i> coordinate. The North Pole is therefore <i>0, 0, rho</i>, and the Gulf of Guinea (think of the missing big chunk of Africa) <i>0, pi/2, rho</i>. In geographical terms <i>phi</i> is latitude (northward positive, southward negative) and <i>theta</i> is longitude (eastward positive, westward negative).</p>

<p><b>BEWARE</b>: some texts define <i>theta</i> and <i>phi</i> the other way round, some texts define the <i>phi</i> to start from the horizontal plane, some texts use <i>r</i> in place of <i>rho</i>.</p>

<p>Cylindrical coordinates, <i>(rho, theta, z)</i>, are three-dimensional coordinates which define a point in three-dimensional space. They are based on a cylinder surface. The radius of the cylinder is <b>rho</b>, also known as the <i>radial</i> coordinate. The angle in the <i>xy</i>-plane (around the <i>z</i>-axis) is <b>theta</b>, also known as the <i>azimuthal</i> coordinate. The third coordinate is the <i>z</i>, pointing up from the <b>theta</b>-plane.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="3-D_ANGLE_CONVERSIONS"
>3-D ANGLE CONVERSIONS</a></h2>

<p>Conversions to and from spherical and cylindrical coordinates are available. Please notice that the conversions are not necessarily reversible because of the equalities like <i>pi</i> angles being equal to <i>-pi</i> angles.</p>

<dl>
<dt><a name="cartesian_to_cylindrical"
>cartesian_to_cylindrical</a></dt>

<dd>
<pre class="sh_perl">    ($rho, $theta, $z) = cartesian_to_cylindrical($x, $y, $z);</pre>

<dt><a name="cartesian_to_spherical"
>cartesian_to_spherical</a></dt>

<dd>
<pre class="sh_perl">    ($rho, $theta, $phi) = cartesian_to_spherical($x, $y, $z);</pre>

<dt><a name="cylindrical_to_cartesian"
>cylindrical_to_cartesian</a></dt>

<dd>
<pre class="sh_perl">    ($x, $y, $z) = cylindrical_to_cartesian($rho, $theta, $z);</pre>

<dt><a name="cylindrical_to_spherical"
>cylindrical_to_spherical</a></dt>

<dd>
<pre class="sh_perl">    ($rho_s, $theta, $phi) = cylindrical_to_spherical($rho_c, $theta, $z);</pre>

<p>Notice that when <code>$z</code> is not 0 <code>$rho_s</code> is not equal to <code>$rho_c</code>.</p>

<dt><a name="spherical_to_cartesian"
>spherical_to_cartesian</a></dt>

<dd>
<pre class="sh_perl">    ($x, $y, $z) = spherical_to_cartesian($rho, $theta, $phi);</pre>

<dt><a name="spherical_to_cylindrical"
>spherical_to_cylindrical</a></dt>

<dd>
<pre class="sh_perl">    ($rho_c, $theta, $z) = spherical_to_cylindrical($rho_s, $theta, $phi);</pre>

<p>Notice that when <code>$z</code> is not 0 <code>$rho_c</code> is not equal to <code>$rho_s</code>.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="GREAT_CIRCLE_DISTANCES_AND_DIRECTIONS"
>GREAT CIRCLE DISTANCES AND DIRECTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A great circle is section of a circle that contains the circle diameter: the shortest distance between two (non-antipodal) points on the spherical surface goes along the great circle connecting those two points.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="great_circle_distance"
>great_circle_distance</a></h2>

<p>You can compute spherical distances, called <b>great circle distances</b>, by importing the great_circle_distance() function:</p>

<pre class="sh_perl">  use Math::Trig &#39;great_circle_distance&#39;;

  $distance = great_circle_distance($theta0, $phi0, $theta1, $phi1, [, $rho]);</pre>

<p>The <i>great circle distance</i> is the shortest distance between two points on a sphere. The distance is in <code>$rho</code> units. The <code>$rho</code> is optional, it defaults to 1 (the unit sphere), therefore the distance defaults to radians.</p>

<p>If you think geographically the <i>theta</i> are longitudes: zero at the Greenwhich meridian, eastward positive, westward negative -- and the <i>phi</i> are latitudes: zero at the North Pole, northward positive, southward negative. <b>NOTE</b>: this formula thinks in mathematics, not geographically: the <i>phi</i> zero is at the North Pole, not at the Equator on the west coast of Africa (Bay of Guinea). You need to subtract your geographical coordinates from <i>pi/2</i> (also known as 90 degrees).</p>

<pre class="sh_perl">  $distance = great_circle_distance($lon0, pi/2 - $lat0,
                                    $lon1, pi/2 - $lat1, $rho);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="great_circle_direction"
>great_circle_direction</a></h2>

<p>The direction you must follow the great circle (also known as <i>bearing</i>) can be computed by the great_circle_direction() function:</p>

<pre class="sh_perl">  use Math::Trig &#39;great_circle_direction&#39;;

  $direction = great_circle_direction($theta0, $phi0, $theta1, $phi1);</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="great_circle_bearing"
>great_circle_bearing</a></h2>

<p>Alias &#39;great_circle_bearing&#39; for &#39;great_circle_direction&#39; is also available.</p>

<pre class="sh_perl">  use Math::Trig &#39;great_circle_bearing&#39;;

  $direction = great_circle_bearing($theta0, $phi0, $theta1, $phi1);</pre>

<p>The result of great_circle_direction is in radians, zero indicating straight north, pi or -pi straight south, pi/2 straight west, and -pi/2 straight east.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="great_circle_destination"
>great_circle_destination</a></h2>

<p>You can inversely compute the destination if you know the starting point, direction, and distance:</p>

<pre class="sh_perl">  use Math::Trig &#39;great_circle_destination&#39;;

  # $diro is the original direction,
  # for example from great_circle_bearing().
  # $distance is the angular distance in radians,
  # for example from great_circle_distance().
  # $thetad and $phid are the destination coordinates,
  # $dird is the final direction at the destination.

  ($thetad, $phid, $dird) =
    great_circle_destination($theta, $phi, $diro, $distance);</pre>

<p>or the midpoint if you know the end points:</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="great_circle_midpoint"
>great_circle_midpoint</a></h2>

<pre class="sh_perl">  use Math::Trig &#39;great_circle_midpoint&#39;;

  ($thetam, $phim) =
    great_circle_midpoint($theta0, $phi0, $theta1, $phi1);</pre>

<p>The great_circle_midpoint() is just a special case of</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="great_circle_waypoint"
>great_circle_waypoint</a></h2>

<pre class="sh_perl">  use Math::Trig &#39;great_circle_waypoint&#39;;

  ($thetai, $phii) =
    great_circle_waypoint($theta0, $phi0, $theta1, $phi1, $way);</pre>

<p>Where the $way is a value from zero ($theta0, $phi0) to one ($theta1, $phi1). Note that antipodal points (where their distance is <i>pi</i> radians) do not have waypoints between them (they would have an an &#34;equator&#34; between them), and therefore <code>undef</code> is returned for antipodal points. If the points are the same and the distance therefore zero and all waypoints therefore identical, the first point (either point) is returned.</p>

<p>The thetas, phis, direction, and distance in the above are all in radians.</p>

<p>You can import all the great circle formulas by</p>

<pre class="sh_perl">  use Math::Trig &#39;:great_circle&#39;;</pre>

<p>Notice that the resulting directions might be somewhat surprising if you are looking at a flat worldmap: in such map projections the great circles quite often do not look like the shortest routes -- but for example the shortest possible routes from Europe or North America to Asia do often cross the polar regions. (The common Mercator projection does <b>not</b> show great circles as straight lines: straight lines in the Mercator projection are lines of constant bearing.)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>To calculate the distance between London (51.3N 0.5W) and Tokyo (35.7N 139.8E) in kilometers:</p>

<pre class="sh_perl">    use Math::Trig qw(great_circle_distance deg2rad);

    # Notice the 90 - latitude: phi zero is at the North Pole.
    sub NESW { deg2rad($_[0]), deg2rad(90 - $_[1]) }
    my @L = NESW( -0.5, 51.3);
    my @T = NESW(139.8, 35.7);
    my $km = great_circle_distance(@L, @T, 6378); # About 9600 km.</pre>

<p>The direction you would have to go from London to Tokyo (in radians, straight north being zero, straight east being pi/2).</p>

<pre class="sh_perl">    use Math::Trig qw(great_circle_direction);

    my $rad = great_circle_direction(@L, @T); # About 0.547 or 0.174 pi.</pre>

<p>The midpoint between London and Tokyo being</p>

<pre class="sh_perl">    use Math::Trig qw(great_circle_midpoint);

    my @M = great_circle_midpoint(@L, @T);</pre>

<p>or about 69 N 89 E, in the frozen wastes of Siberia.</p>

<p><b>NOTE</b>: you <b>cannot</b> get from A to B like this:</p>

<pre class="sh_perl">   Dist = great_circle_distance(A, B)
   Dir  = great_circle_direction(A, B)
   C    = great_circle_destination(A, Dist, Dir)</pre>

<p>and expect C to be B, because the bearing constantly changes when going from A to B (except in some special case like the meridians or the circles of latitudes) and in great_circle_destination() one gives a <b>constant</b> bearing to follow.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CAVEAT_FOR_GREAT_CIRCLE_FORMULAS"
>CAVEAT FOR GREAT CIRCLE FORMULAS</a></h2>

<p>The answers may be off by few percentages because of the irregular (slightly aspherical) form of the Earth. The errors are at worst about 0.55%, but generally below 0.3%.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Real-valued_asin_and_acos"
>Real-valued asin and acos</a></h2>

<p>For small inputs asin() and acos() may return complex numbers even when real numbers would be enough and correct, this happens because of floating-point inaccuracies. You can see these inaccuracies for example by trying theses:</p>

<pre class="sh_perl">  print cos(1e-6)**2+sin(1e-6)**2 - 1,&#34;\n&#34;;
  printf &#34;%.20f&#34;, cos(1e-6)**2+sin(1e-6)**2,&#34;\n&#34;;</pre>

<p>which will print something like this</p>

<pre class="sh_perl">  -1.11022302462516e-16
  0.99999999999999988898</pre>

<p>even though the expected results are of course exactly zero and one. The formulas used to compute asin() and acos() are quite sensitive to this, and therefore they might accidentally slip into the complex plane even when they should not. To counter this there are two interfaces that are guaranteed to return a real-valued output.</p>

<dl>
<dt><a name="asin_real"
>asin_real</a></dt>

<dd>
<pre class="sh_perl">    use Math::Trig qw(asin_real);

    $real_angle = asin_real($input_sin);</pre>

<p>Return a real-valued arcus sine if the input is between [-1, 1], <b>inclusive</b> the endpoints. For inputs greater than one, pi/2 is returned. For inputs less than minus one, -pi/2 is returned.</p>

<dt><a name="acos_real"
>acos_real</a></dt>

<dd>
<pre class="sh_perl">    use Math::Trig qw(acos_real);

    $real_angle = acos_real($input_cos);</pre>

<p>Return a real-valued arcus cosine if the input is between [-1, 1], <b>inclusive</b> the endpoints. For inputs greater than one, zero is returned. For inputs less than minus one, pi is returned.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Saying <code>use Math::Trig;</code> exports many mathematical routines in the caller environment and even overrides some (<code>sin</code>, <code>cos</code>). This is construed as a feature by the Authors, actually... ;-)</p>

<p>The code is not optimized for speed, especially because we use <code>Math::Complex</code> and thus go quite near complex numbers while doing the computations even when the arguments are not. This, however, cannot be completely avoided if we want things like <code>asin(2)</code> to give an answer instead of giving a fatal runtime error.</p>

<p>Do not attempt navigation using these formulas.</p>

<p><a href="/~zefram/Math-Complex-1.59/lib/Math/Complex.pm" class="podlinkpod"
>Math::Complex</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Jarkko Hietaniemi &#60;<em>jhi!at!iki.fi</em>&#62;, Raphael Manfredi &#60;<em>Raphael_Manfredi!at!pobox.com</em>&#62;, Zefram &#60;zefram@fysh.org&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE"
>LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78069 Uploads, 24686 Distributions
105893 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sun Apr 22 06:04:16 2012 GMT (0.196674108505249) @cpansearch1 -->
 </body>
</html>
