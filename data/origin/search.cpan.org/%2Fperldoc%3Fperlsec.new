<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>perlsec - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","perl",3]);
    _gaq.push(["_setCustomVar",5,"Release","perl-5.14.2",3]);
    _gaq.push(["_setCustomVar",4,"Document","perlsec",3]);
    _gaq.push(["_setCustomVar",1,"Author","FLORA",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?perlsec">permalink</a></div>
  <a href="/~flora/">Florian Ragwitz</a> &gt;
  <a href="/~flora/perl-5.14.2/">perl-5.14.2</a> &gt;
  perlsec
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/fd2bdaaefe41908133793d1ddf38f75d?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/F/FL/FLORA/perl-5.14.2.tar.gz">perl-5.14.2.tar.gz</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~FLORA/perl-5.14.2/pod/perlsec.pod">Annotate this POD
(2)
</a></p>
     <p style="text-align:right"><a href="http://www.perl.org/">Website</a></p>

<div style="float:right">

</div>
</div>
<span class="noprint">
  <a href="/src/FLORA/perl-5.14.2/pod/perlsec.pod">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~abigail/perl/pod/perlsec.pod">perl-5.15.9</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#SECURITY_VULNERABILITY_CONTACT_INFORMATION'>SECURITY VULNERABILITY CONTACT INFORMATION</a>
  <li class='indexItem indexItem1'><a href='#SECURITY_MECHANISMS_AND_CONCERNS'>SECURITY MECHANISMS AND CONCERNS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Taint_mode'>Taint mode</a>
    <li class='indexItem indexItem2'><a href='#Laundering_and_Detecting_Tainted_Data'>Laundering and Detecting Tainted Data</a>
    <li class='indexItem indexItem2'><a href='#Switches_On_the_&#34;#!&#34;_Line'>Switches On the &#34;#!&#34; Line</a>
    <li class='indexItem indexItem2'><a href='#Taint_mode_and_@INC'>Taint mode and @INC</a>
    <li class='indexItem indexItem2'><a href='#Cleaning_Up_Your_Path'>Cleaning Up Your Path</a>
    <li class='indexItem indexItem2'><a href='#Security_Bugs'>Security Bugs</a>
    <li class='indexItem indexItem2'><a href='#Protecting_Your_Programs'>Protecting Your Programs</a>
    <li class='indexItem indexItem2'><a href='#Unicode'>Unicode</a>
    <li class='indexItem indexItem2'><a href='#Algorithmic_Complexity_Attacks'>Algorithmic Complexity Attacks</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perlsec - Perl security</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Perl is designed to make it easy to program securely even when running with extra privileges,
like setuid or setgid programs.
Unlike most command line shells,
which are based on multiple substitution passes on each line of the script,
Perl uses a more conventional evaluation scheme with fewer hidden snags.
Additionally,
because the language has more builtin functionality,
it can rely less upon external (and possibly untrustworthy) programs to accomplish its purposes.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SECURITY_VULNERABILITY_CONTACT_INFORMATION"
>SECURITY VULNERABILITY CONTACT INFORMATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>If you believe you have found a security vulnerability in Perl,
please email perl5-security-report@perl.org with details.
This points to a closed subscription,
unarchived mailing list.
Please only use this address for security issues in the Perl core,
not for modules independently distributed on CPAN.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SECURITY_MECHANISMS_AND_CONCERNS"
>SECURITY MECHANISMS AND CONCERNS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Taint_mode"
>Taint mode</a></h2>

<p>Perl automatically enables a set of special security checks,
called <i>taint mode</i>,
when it detects its program running with differing real and effective user or group IDs.
The setuid bit in Unix permissions is mode 04000,
the setgid bit mode 02000; either or both may be set.
You can also enable taint mode explicitly by using the <b>-T</b> command line flag.
This flag is <i>strongly</i> suggested for server programs and any program run on behalf of someone else,
such as a CGI script.
Once taint mode is on,
it&#39;s on for the remainder of your script.</p>

<p>While in this mode,
Perl takes special precautions called <i>taint checks</i> to prevent both obvious and subtle traps.
Some of these checks are reasonably simple,
such as verifying that path directories aren&#39;t writable by others; careful programmers have always used checks like these.
Other checks,
however,
are best supported by the language itself,
and it is these checks especially that contribute to making a set-id Perl program more secure than the corresponding C program.</p>

<p>You may not use data derived from outside your program to affect something else outside your program--at least,
not by accident.
All command line arguments,
environment variables,
locale information (see <a href="/~flora/perl-5.14.2/pod/perllocale.pod" class="podlinkpod"
>perllocale</a>),
results of certain system calls (<code>readdir()</code>,
<code>readlink()</code>,
the variable of <code>shmread()</code>,
the messages returned by <code>msgrcv()</code>,
the password,
gcos and shell fields returned by the <code>getpwxxx()</code> calls),
and all file input are marked as &#34;tainted&#34;.
Tainted data may not be used directly or indirectly in any command that invokes a sub-shell,
nor in any command that modifies files,
directories,
or processes,
<b>with the following exceptions</b>:</p>

<ul>
<li>Arguments to <code>print</code> and <code>syswrite</code> are <b>not</b> checked for taintedness.</li>

<li>Symbolic methods
<pre class="sh_perl">    $obj-&#62;$method(@args);</pre>

<p>and symbolic sub references</p>

<pre class="sh_perl">    &#38;{$foo}(@args);
    $foo-&#62;(@args);</pre>

<p>are not checked for taintedness. This requires extra carefulness unless you want external data to affect your control flow. Unless you carefully limit what these symbolic values are, people are able to call functions <b>outside</b> your Perl code, such as POSIX::system, in which case they are able to run arbitrary external code.</p>
</li>

<li>Hash keys are <b>never</b> tainted.</li>
</ul>

<p>For efficiency reasons, Perl takes a conservative view of whether data is tainted. If an expression contains tainted data, any subexpression may be considered tainted, even if the value of the subexpression is not itself affected by the tainted data.</p>

<p>Because taintedness is associated with each scalar value, some elements of an array or hash can be tainted and others not. The keys of a hash are <b>never</b> tainted.</p>

<p>For example:</p>

<pre class="sh_perl">    $arg = shift;               # $arg is tainted
    $hid = $arg, &#39;bar&#39;;         # $hid is also tainted
    $line = &#60;&#62;;                 # Tainted
    $line = &#60;STDIN&#62;;            # Also tainted
    open FOO, &#34;/home/me/bar&#34; or die $!;
    $line = &#60;FOO&#62;;              # Still tainted
    $path = $ENV{&#39;PATH&#39;};       # Tainted, but see below
    $data = &#39;abc&#39;;              # Not tainted

    system &#34;echo $arg&#34;;         # Insecure
    system &#34;/bin/echo&#34;, $arg;   # Considered insecure
                                # (Perl doesn&#39;t know about /bin/echo)
    system &#34;echo $hid&#34;;         # Insecure
    system &#34;echo $data&#34;;        # Insecure until PATH set

    $path = $ENV{&#39;PATH&#39;};       # $path now tainted

    $ENV{&#39;PATH&#39;} = &#39;/bin:/usr/bin&#39;;
    delete @ENV{&#39;IFS&#39;, &#39;CDPATH&#39;, &#39;ENV&#39;, &#39;BASH_ENV&#39;};

    $path = $ENV{&#39;PATH&#39;};       # $path now NOT tainted
    system &#34;echo $data&#34;;        # Is secure now!

    open(FOO, &#34;&#60; $arg&#34;);        # OK - read-only file
    open(FOO, &#34;&#62; $arg&#34;);        # Not OK - trying to write

    open(FOO,&#34;echo $arg|&#34;);     # Not OK
    open(FOO,&#34;-|&#34;)
        or exec &#39;echo&#39;, $arg;   # Also not OK

    $shout = `echo $arg`;       # Insecure, $shout now tainted

    unlink $data, $arg;         # Insecure
    umask $arg;                 # Insecure

    exec &#34;echo $arg&#34;;           # Insecure
    exec &#34;echo&#34;, $arg;          # Insecure
    exec &#34;sh&#34;, &#39;-c&#39;, $arg;      # Very insecure!

    @files = &#60;*.c&#62;;             # insecure (uses readdir() or similar)
    @files = glob(&#39;*.c&#39;);       # insecure (uses readdir() or similar)

    # In Perl releases older than 5.6.0 the &#60;*.c&#62; and glob(&#39;*.c&#39;) would
    # have used an external program to do the filename expansion; but in
    # either case the result is tainted since the list of filenames comes
    # from outside of the program.

    $bad = ($arg, 23);          # $bad will be tainted
    $arg, `true`;               # Insecure (although it isn&#39;t really)</pre>

<p>If you try to do something insecure, you will get a fatal error saying something like &#34;Insecure dependency&#34; or &#34;Insecure $ENV{PATH}&#34;.</p>

<p>The exception to the principle of &#34;one tainted value taints the whole expression&#34; is with the ternary conditional operator <code>?:</code>. Since code with a ternary conditional</p>

<pre class="sh_perl">    $result = $tainted_value ? &#34;Untainted&#34; : &#34;Also untainted&#34;;</pre>

<p>is effectively</p>

<pre class="sh_perl">    if ( $tainted_value ) {
        $result = &#34;Untainted&#34;;
    } else {
        $result = &#34;Also untainted&#34;;
    }</pre>

<p>it doesn&#39;t make sense for <code>$result</code> to be tainted.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Laundering_and_Detecting_Tainted_Data"
>Laundering and Detecting Tainted Data</a></h2>

<p>To test whether a variable contains tainted data, and whose use would thus trigger an &#34;Insecure dependency&#34; message, you can use the <code>tainted()</code> function of the Scalar::Util module, available in your nearby CPAN mirror, and included in Perl starting from the release 5.8.0. Or you may be able to use the following <code>is_tainted()</code> function.</p>

<pre class="sh_perl">    sub is_tainted {
        return ! eval { eval(&#34;#&#34; . substr(join(&#34;&#34;, @_), 0, 0)); 1 };
    }</pre>

<p>This function makes use of the fact that the presence of tainted data anywhere within an expression renders the entire expression tainted. It would be inefficient for every operator to test every argument for taintedness. Instead, the slightly more efficient and conservative approach is used that if any tainted value has been accessed within the same expression, the whole expression is considered tainted.</p>

<p>But testing for taintedness gets you only so far. Sometimes you have just to clear your data&#39;s taintedness. Values may be untainted by using them as keys in a hash; otherwise the only way to bypass the tainting mechanism is by referencing subpatterns from a regular expression match. Perl presumes that if you reference a substring using $1, $2, etc., that you knew what you were doing when you wrote the pattern. That means using a bit of thought--don&#39;t just blindly untaint anything, or you defeat the entire mechanism. It&#39;s better to verify that the variable has only good characters (for certain values of &#34;good&#34;) rather than checking whether it has any bad characters. That&#39;s because it&#39;s far too easy to miss bad characters that you never thought of.</p>

<p>Here&#39;s a test to make sure that the data contains nothing but &#34;word&#34; characters (alphabetics, numerics, and underscores), a hyphen, an at sign, or a dot.</p>

<pre class="sh_perl">    if ($data =~ /^([-\@\w.]+)$/) {
        $data = $1;                     # $data now untainted
    } else {
        die &#34;Bad data in &#39;$data&#39;&#34;;      # log this somewhere
    }</pre>

<p>This is fairly secure because <code>/\w+/</code> doesn&#39;t normally match shell metacharacters, nor are dot, dash, or at going to mean something special to the shell. Use of <code>/.+/</code> would have been insecure in theory because it lets everything through, but Perl doesn&#39;t check for that. The lesson is that when untainting, you must be exceedingly careful with your patterns. Laundering data using regular expression is the <i>only</i> mechanism for untainting dirty data, unless you use the strategy detailed below to fork a child of lesser privilege.</p>

<p>The example does not untaint <code>$data</code> if <code>use locale</code> is in effect, because the characters matched by <code>\w</code> are determined by the locale. Perl considers that locale definitions are untrustworthy because they contain data from outside the program. If you are writing a locale-aware program, and want to launder data with a regular expression containing <code>\w</code>, put <code>no locale</code> ahead of the expression in the same block. See <a href="/~flora/perl-5.14.2/pod/perllocale.pod#SECURITY" class="podlinkpod"
>&#34;SECURITY&#34; in perllocale</a> for further discussion and examples.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Switches_On_the_&#34;#!&#34;_Line"
>Switches On the &#34;#!&#34; Line</a></h2>

<p>When you make a script executable, in order to make it usable as a command, the system will pass switches to perl from the script&#39;s #! line. Perl checks that any command line switches given to a setuid (or setgid) script actually match the ones set on the #! line. Some Unix and Unix-like environments impose a one-switch limit on the #! line, so you may need to use something like <code>-wU</code> instead of <code>-w -U</code> under such systems. (This issue should arise only in Unix or Unix-like environments that support #! and setuid or setgid scripts.)</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Taint_mode_and_@INC"
>Taint mode and @INC</a></h2>

<p>When the taint mode (<code>-T</code>) is in effect, the &#34;.&#34; directory is removed from <code>@INC</code>, and the environment variables <code>PERL5LIB</code> and <code>PERLLIB</code> are ignored by Perl. You can still adjust <code>@INC</code> from outside the program by using the <code>-I</code> command line option as explained in <a href="/~flora/perl-5.14.2/pod/perlrun.pod" class="podlinkpod"
>perlrun</a>. The two environment variables are ignored because they are obscured, and a user running a program could be unaware that they are set, whereas the <code>-I</code> option is clearly visible and therefore permitted.</p>

<p>Another way to modify <code>@INC</code> without modifying the program, is to use the <code>lib</code> pragma, e.g.:</p>

<pre class="sh_perl">  perl -Mlib=/foo program</pre>

<p>The benefit of using <code>-Mlib=/foo</code> over <code>-I/foo</code>, is that the former will automagically remove any duplicated directories, while the later will not.</p>

<p>Note that if a tainted string is added to <code>@INC</code>, the following problem will be reported:</p>

<pre class="sh_perl">  Insecure dependency in require while running with -T switch</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Cleaning_Up_Your_Path"
>Cleaning Up Your Path</a></h2>

<p>For &#34;Insecure <code>$ENV{PATH}</code>&#34; messages, you need to set <code>$ENV{&#39;PATH&#39;}</code> to a known value, and each directory in the path must be absolute and non-writable by others than its owner and group. You may be surprised to get this message even if the pathname to your executable is fully qualified. This is <i>not</i> generated because you didn&#39;t supply a full path to the program; instead, it&#39;s generated because you never set your PATH environment variable, or you didn&#39;t set it to something that was safe. Because Perl can&#39;t guarantee that the executable in question isn&#39;t itself going to turn around and execute some other program that is dependent on your PATH, it makes sure you set the PATH.</p>

<p>The PATH isn&#39;t the only environment variable which can cause problems. Because some shells may use the variables IFS, CDPATH, ENV, and BASH_ENV, Perl checks that those are either empty or untainted when starting subprocesses. You may wish to add something like this to your setid and taint-checking scripts.</p>

<pre class="sh_perl">    delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};   # Make %ENV safer</pre>

<p>It&#39;s also possible to get into trouble with other operations that don&#39;t care whether they use tainted values. Make judicious use of the file tests in dealing with any user-supplied filenames. When possible, do opens and such <b>after</b> properly dropping any special user (or group!) privileges. Perl doesn&#39;t prevent you from opening tainted filenames for reading, so be careful what you print out. The tainting mechanism is intended to prevent stupid mistakes, not to remove the need for thought.</p>

<p>Perl does not call the shell to expand wild cards when you pass <code>system</code> and <code>exec</code> explicit parameter lists instead of strings with possible shell wildcards in them. Unfortunately, the <code>open</code>, <code>glob</code>, and backtick functions provide no such alternate calling convention, so more subterfuge will be required.</p>

<p>Perl provides a reasonably safe way to open a file or pipe from a setuid or setgid program: just create a child process with reduced privilege who does the dirty work for you. First, fork a child using the special <code>open</code> syntax that connects the parent and child by a pipe. Now the child resets its ID set and any other per-process attributes, like environment variables, umasks, current working directories, back to the originals or known safe values. Then the child process, which no longer has any special permissions, does the <code>open</code> or other system call. Finally, the child passes the data it managed to access back to the parent. Because the file or pipe was opened in the child while running under less privilege than the parent, it&#39;s not apt to be tricked into doing something it shouldn&#39;t.</p>

<p>Here&#39;s a way to do backticks reasonably safely. Notice how the <code>exec</code> is not called with a string that the shell could expand. This is by far the best way to call something that might be subjected to shell escapes: just never call the shell at all.</p>

<pre class="sh_perl">        use English &#39;-no_match_vars&#39;;
        die &#34;Can&#39;t fork: $!&#34; unless defined($pid = open(KID, &#34;-|&#34;));
        if ($pid) {           # parent
            while (&#60;KID&#62;) {
                # do something
            }
            close KID;
        } else {
            my @temp     = ($EUID, $EGID);
            my $orig_uid = $UID;
            my $orig_gid = $GID;
            $EUID = $UID;
            $EGID = $GID;
            # Drop privileges
            $UID  = $orig_uid;
            $GID  = $orig_gid;
            # Make sure privs are really gone
            ($EUID, $EGID) = @temp;
            die &#34;Can&#39;t drop privileges&#34;
                unless $UID == $EUID  &#38;&#38; $GID eq $EGID;
            $ENV{PATH} = &#34;/bin:/usr/bin&#34;; # Minimal PATH.
            # Consider sanitizing the environment even more.
            exec &#39;myprog&#39;, &#39;arg1&#39;, &#39;arg2&#39;
                or die &#34;can&#39;t exec myprog: $!&#34;;
        }</pre>

<p>A similar strategy would work for wildcard expansion via <code>glob</code>, although you can use <code>readdir</code> instead.</p>

<p>Taint checking is most useful when although you trust yourself not to have written a program to give away the farm, you don&#39;t necessarily trust those who end up using it not to try to trick it into doing something bad. This is the kind of security checking that&#39;s useful for set-id programs and programs launched on someone else&#39;s behalf, like CGI programs.</p>

<p>This is quite different, however, from not even trusting the writer of the code not to try to do something evil. That&#39;s the kind of trust needed when someone hands you a program you&#39;ve never seen before and says, &#34;Here, run this.&#34; For that kind of safety, you might want to check out the Safe module, included standard in the Perl distribution. This module allows the programmer to set up special compartments in which all system operations are trapped and namespace access is carefully controlled. Safe should not be considered bullet-proof, though: it will not prevent the foreign code to set up infinite loops, allocate gigabytes of memory, or even abusing perl bugs to make the host interpreter crash or behave in unpredictable ways. In any case it&#39;s better avoided completely if you&#39;re really concerned about security.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Security_Bugs"
>Security Bugs</a></h2>

<p>Beyond the obvious problems that stem from giving special privileges to systems as flexible as scripts, on many versions of Unix, set-id scripts are inherently insecure right from the start. The problem is a race condition in the kernel. Between the time the kernel opens the file to see which interpreter to run and when the (now-set-id) interpreter turns around and reopens the file to interpret it, the file in question may have changed, especially if you have symbolic links on your system.</p>

<p>Fortunately, sometimes this kernel &#34;feature&#34; can be disabled. Unfortunately, there are two ways to disable it. The system can simply outlaw scripts with any set-id bit set, which doesn&#39;t help much. Alternately, it can simply ignore the set-id bits on scripts.</p>

<p>However, if the kernel set-id script feature isn&#39;t disabled, Perl will complain loudly that your set-id script is insecure. You&#39;ll need to either disable the kernel set-id script feature, or put a C wrapper around the script. A C wrapper is just a compiled program that does nothing except call your Perl program. Compiled programs are not subject to the kernel bug that plagues set-id scripts. Here&#39;s a simple wrapper, written in C:</p>

<pre class="sh_perl">    #define REAL_PATH &#34;/path/to/script&#34;
    main(ac, av)
        char **av;
    {
        execv(REAL_PATH, av);
    }</pre>

<p>Compile this wrapper into a binary executable and then make <i>it</i> rather than your script setuid or setgid.</p>

<p>In recent years, vendors have begun to supply systems free of this inherent security bug. On such systems, when the kernel passes the name of the set-id script to open to the interpreter, rather than using a pathname subject to meddling, it instead passes <i>/dev/fd/3</i>. This is a special file already opened on the script, so that there can be no race condition for evil scripts to exploit. On these systems, Perl should be compiled with <code>-DSETUID_SCRIPTS_ARE_SECURE_NOW</code>. The <em>Configure</em> program that builds Perl tries to figure this out for itself, so you should never have to specify this yourself. Most modern releases of SysVr4 and BSD 4.4 use this approach to avoid the kernel race condition.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Protecting_Your_Programs"
>Protecting Your Programs</a></h2>

<p>There are a number of ways to hide the source to your Perl programs, with varying levels of &#34;security&#34;.</p>

<p>First of all, however, you <i>can&#39;t</i> take away read permission, because the source code has to be readable in order to be compiled and interpreted. (That doesn&#39;t mean that a CGI script&#39;s source is readable by people on the web, though.) So you have to leave the permissions at the socially friendly 0755 level. This lets people on your local system only see your source.</p>

<p>Some people mistakenly regard this as a security problem. If your program does insecure things, and relies on people not knowing how to exploit those insecurities, it is not secure. It is often possible for someone to determine the insecure things and exploit them without viewing the source. Security through obscurity, the name for hiding your bugs instead of fixing them, is little security indeed.</p>

<p>You can try using encryption via source filters (Filter::* from CPAN, or Filter::Util::Call and Filter::Simple since Perl 5.8). But crackers might be able to decrypt it. You can try using the byte code compiler and interpreter described below, but crackers might be able to de-compile it. You can try using the native-code compiler described below, but crackers might be able to disassemble it. These pose varying degrees of difficulty to people wanting to get at your code, but none can definitively conceal it (this is true of every language, not just Perl).</p>

<p>If you&#39;re concerned about people profiting from your code, then the bottom line is that nothing but a restrictive license will give you legal security. License your software and pepper it with threatening statements like &#34;This is unpublished proprietary software of XYZ Corp. Your access to it does not give you permission to use it blah blah blah.&#34; You should see a lawyer to be sure your license&#39;s wording will stand up in court.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Unicode"
>Unicode</a></h2>

<p>Unicode is a new and complex technology and one may easily overlook certain security pitfalls. See <a href="/~flora/perl-5.14.2/pod/perluniintro.pod" class="podlinkpod"
>perluniintro</a> for an overview and <a href="/~flora/perl-5.14.2/pod/perlunicode.pod" class="podlinkpod"
>perlunicode</a> for details, and <a href="/~flora/perl-5.14.2/pod/perlunicode.pod#Security_Implications_of_Unicode" class="podlinkpod"
>&#34;Security Implications of Unicode&#34; in perlunicode</a> for security implications in particular.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Algorithmic_Complexity_Attacks"
>Algorithmic Complexity Attacks</a></h2>

<p>Certain internal algorithms used in the implementation of Perl can be attacked by choosing the input carefully to consume large amounts of either time or space or both. This can lead into the so-called <i>Denial of Service</i> (DoS) attacks.</p>

<ul>
<li>Hash Function - the algorithm used to &#34;order&#34; hash elements has been changed several times during the development of Perl, mainly to be reasonably fast. In Perl 5.8.1 also the security aspect was taken into account.
<p>In Perls before 5.8.1 one could rather easily generate data that as hash keys would cause Perl to consume large amounts of time because internal structure of hashes would badly degenerate. In Perl 5.8.1 the hash function is randomly perturbed by a pseudorandom seed which makes generating such naughty hash keys harder. See <a href="/~flora/perl-5.14.2/pod/perlrun.pod#PERL_HASH_SEED" class="podlinkpod"
>&#34;PERL_HASH_SEED&#34; in perlrun</a> for more information.</p>

<p>In Perl 5.8.1 the random perturbation was done by default, but as of 5.8.2 it is only used on individual hashes if the internals detect the insertion of pathological data. If one wants for some reason emulate the old behaviour (and expose oneself to DoS attacks) one can set the environment variable PERL_HASH_SEED to zero to disable the protection (or any other integer to force a known perturbation, rather than random). One possible reason for wanting to emulate the old behaviour is that in the new behaviour consecutive runs of Perl will order hash keys differently, which may confuse some applications (like Data::Dumper: the outputs of two different runs are no longer identical).</p>

<p><b>Perl has never guaranteed any ordering of the hash keys</b>, and the ordering has already changed several times during the lifetime of Perl 5. Also, the ordering of hash keys has always been, and continues to be, affected by the insertion order.</p>

<p>Also note that while the order of the hash elements might be randomised, this &#34;pseudoordering&#34; should <b>not</b> be used for applications like shuffling a list randomly (use List::Util::shuffle() for that, see <a href="/perldoc?List%3A%3AUtil" class="podlinkpod"
>List::Util</a>, a standard core module since Perl 5.8.0; or the CPAN module Algorithm::Numerical::Shuffle), or for generating permutations (use e.g. the CPAN modules Algorithm::Permute or Algorithm::FastPermute), or for any cryptographic applications.</p>
</li>

<li>Regular expressions - Perl&#39;s regular expression engine is so called NFA (Non-deterministic Finite Automaton), which among other things means that it can rather easily consume large amounts of both time and space if the regular expression may match in several ways. Careful crafting of the regular expressions can help but quite often there really isn&#39;t much one can do (the book &#34;Mastering Regular Expressions&#34; is required reading, see <a href="/~flora/perl-5.14.2/pod/perlfaq2.pod" class="podlinkpod"
>perlfaq2</a>). Running out of space manifests itself by Perl running out of memory.</li>

<li>Sorting - the quicksort algorithm used in Perls before 5.8.0 to implement the sort() function is very easy to trick into misbehaving so that it consumes a lot of time. Starting from Perl 5.8.0 a different sorting algorithm, mergesort, is used by default. Mergesort cannot misbehave on any input.</li>
</ul>

<p>See <a href="http://www.cs.rice.edu/~scrosby/hash/" class="podlinkurl"
>http://www.cs.rice.edu/~scrosby/hash/</a> for more information, and any computer science textbook on algorithmic complexity.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~flora/perl-5.14.2/pod/perlrun.pod" class="podlinkpod"
>perlrun</a> for its description of cleaning up environment variables.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78231 Uploads, 24723 Distributions
106029 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Document']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Document']);
    });
  });
</script>
<!-- Thu Apr 26 22:15:32 2012 GMT (0.162150144577026) @cpansearch1 -->
 </body>
</html>
