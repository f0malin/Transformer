<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Tie::Persistent - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Tie-Persistent",3]);
    _gaq.push(["_setCustomVar",5,"Release","Tie-Persistent-1.00",3]);
    _gaq.push(["_setCustomVar",3,"Module","Tie::Persistent",3]);
    _gaq.push(["_setCustomVar",1,"Author","RGIERSIG",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Tie::Persistent">permalink</a></div>
  <a href="/~rgiersig/">Roland Giersig</a> &gt;
  <a href="/~rgiersig/Tie-Persistent-1.00/">Tie-Persistent-1.00</a> &gt;
  Tie::Persistent
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/2c59cbd332368e1df0ff0ca6c212913e?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/R/RG/RGIERSIG/Tie-Persistent-1.00.tar.gz">Tie-Persistent-1.00.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Tie%3A%3APersistent;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~RGIERSIG/Tie-Persistent-1.00/Persistent.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Apache%3A%3ASession">Apache::Session</a><br>
<a href="/perldoc?CGI%3A%3AApplication">CGI::Application</a><br>
<a href="/perldoc?Log%3A%3AAgent">Log::Agent</a><br>
<a href="/perldoc?Persistent%3A%3AMySQL">Persistent::MySQL</a><br>
<a href="/perldoc?Class%3A%3APrototyped">Class::Prototyped</a><br>
<a href="/perldoc?Tie%3A%3AHash">Tie::Hash</a><br>
<a href="/perldoc?Cache%3A%3ACache">Cache::Cache</a><br>
<a href="/perldoc?Test%3A%3AMore">Test::More</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Tie%3A%3APersistent">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Tie-Persistent">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.00 &nbsp;
<span class="noprint">
  <a href="/src/RGIERSIG/Tie-Persistent-1.00/Persistent.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#VERSION'>VERSION</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#PARAMETERS'>PARAMETERS</a>
  <li class='indexItem indexItem1'><a href='#LOCKING'>LOCKING</a>
  <li class='indexItem indexItem1'><a href='#KEEPING_DATA_SYCHRONIZED'>KEEPING DATA SYCHRONIZED</a>
  <li class='indexItem indexItem1'><a href='#CONFIGURATION_VARIABLES'>CONFIGURATION VARIABLES</a>
  <li class='indexItem indexItem1'><a href='#NOTES'>NOTES</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Tie::Persistent - persistent data structures via tie made easy</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION"
>VERSION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>1.00</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> use Tie::Persistent;

 tie %DB, &#39;Tie::Persistent&#39;, &#39;file&#39;, &#39;rw&#39;; # read data from &#39;file&#39;

 (tied %DB)-&#62;autosync(1);       # turn on write back on every modify

 # now create/add/modify datastruct
 $DB{key} = &#34;value&#34;;
 (tied %DB)-&#62;sync();            # can be called manually

 untie %DB;                     # stores data back into &#39;file&#39;

 # read stored data, no modification of file data
 tie %ReadOnly, &#39;Tie::Persistent&#39;, &#39;file&#39;;
 foreach (keys %ReadOnly) {
   print &#34;$_ =&#62; $ReadOnly{$_}\n&#34;;
 }
 untie %ReadOnly;               # modifications not stored back</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The Tie::Persistent package makes working with persistent data real easy by using the <code>tie</code> interface.</p>

<p>It works by storing data contained in a variable into a file (not unlike a database). The primary advantage is speed, as the whole datastructure is kept in memory (which is also a limitation), and, of course, that you can use arbitrary data structures inside the variable (unlike DB_File).</p>

<p>Note that it is most useful if the data structure fits into memory. For larger data structures I recommend MLDBM.</p>

<p>If you want to make an arbitrary object persistent, just store its ref in a scalar tied to &#39;Tie::Persistent&#39;.</p>

<p><b>Beware</b>: not every data structure or object can be made persistent. For example, it may not contain GLOB or CODE refs, as these are not really dumpable (yet?).</p>

<p>Also, it works only for variables, you cannot use it for file handles.</p>

<p>[A persistent file handle? Hmmm... Hmmm! I&#39;ve got an idea: I could start a server and send the file descriptor to it via ioctl(FD_SEND) or sendmsg. Later, I could retrieve it back, so it&#39;s persistent as long as the server process keeps running. But the whole file handle may contain more than just the file descriptor. There may be an output routine associated with it that I&#39;d somehow have to dump. Now let&#39;s see, there was some way to get the bytecode converted back into perl code... &#60;wanders off into the darkness mumbling&#62; ... ]</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PARAMETERS"
>PARAMETERS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>tie</code> %Hash, &#39;Tie::Persistent&#39;, <b>file</b>, <b>mode</b>, <i>other...</i>;</p>

<p><code>tie</code> @Array, &#39;Tie::Persistent&#39;, <b>file</b>, <b>mode</b>, <i>other...</i>;</p>

<p><code>tie</code> $Scalar, &#39;Tie::Persistent&#39;, <b>file</b>, <b>mode</b>, <i>other...</i>;</p>

<dl>
<dt><a name="file"
><b>file</b></a></dt>

<dd>
<p>Filename to store the data in. No naming convention is enforced, but I personally use the suffix &#39;pd&#39; for &#34;Perl Data&#34; (or &#34;Persistent Data&#34;?). No file locking is done; see the section on locking below.</p>

<dt><a name='mode'></a><a name="mode_(optional)"
><b>mode</b> (optional)</a></dt>

<dd>
<p>Same as mode for POSIX fopen() or IO::File::open. Basically a combination of &#39;r&#39;, &#39;w&#39;, &#39;a&#39; and &#39;+&#39;. Semantics:</p>

<pre class="sh_perl"> &#39;r&#39; .... read only. Modifications in the data are not stored back
          into the file. A non-existing file gives an error. This is
          the default if no mode is given.

 &#39;rw&#39; ... read/write. Modifications are stored back, if the file does
          not exist, it is created.

 &#39;w&#39; .... write only. The file is not read, the variable starts out empty.

 &#39;a&#39;, &#39;+&#39; ... append. Same as &#39;w&#39;, but creates numbered backup files.

 &#39;ra&#39;, &#39;r+&#39; ... Same as &#39;rw&#39;, but creates numbered backup files.</pre>

<p>When some kind of write access is specified, a backup file of the old dataset is always created. [You&#39;ll thank me for that, believe me.] The reason is simple: when you tie a variable read-write (the contents get restored from the file), and your program isn&#39;t fully debugged yet, it may die in the middle of some modifications, but the data will still be written back to the file, possibly leaving them inconsistent. Then you always have at least the previous version that you can restore from.</p>

<p>The default backup filenames follow the Emacs notation, i.e. a &#39;~&#39; is appended; for numbered backup files (specified as &#39;a&#39; or &#39;+&#39;), an additional number and a &#39;~&#39; is appended.</p>

<p>For a file &#39;data.pd&#39;, the normal backup file would be &#39;data.pd~&#39; and the numbered backup files would be &#39;data.pd~1~&#39;, &#39;data.pd~2~&#39; and so on. The latest backup file is the one with the highest number. The backup filename format can be overridden, see below.</p>

<dt><a name='other'></a><a name="other_(optional,_experimental)"
><i>other</i> (optional, experimental)</a></dt>

<dd>
<p>This can be a reference to another (possibly tied) variable or a name of another tieable package.</p>

<p>If a ref is given, it is used internally to store the variable data instead of an anonymous variable ref. This allows to make other tied datastructures persistent, e.g. you could first tie a hash to Tie::IxHash to make it order-preserving and then give it to Tie::Persistent to make it persistent.</p>

<p>A plain name is used to create this tied variable internally. Trailing arguments are passed to the other tieable package.</p>

<p>Example:</p>

<pre class="sh_perl"> tie %h, &#39;Tie::Persistent&#39;, &#39;file&#39;, &#39;rw&#39;, &#39;Tie::IxHash&#39;;</pre>

<p>or</p>

<pre class="sh_perl"> tie %ixh, &#39;Tie::IxHash&#39;;
 tie %ph,  &#39;Tie::Persistent&#39;, &#39;file&#39;, &#39;w&#39;, \%ixh;
 # you can now use %ixh as an alias for %ph</pre>

<p><b>NOTE</b>: This is an experimental feature. It may or may not work with other Tie:: packages. I have only tested it with &#39;Tie::IxHash&#39;. Please report success or failure.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LOCKING"
>LOCKING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The data file is not automatically locked. Locking has to be done outside of the package. I recommend using a module like &#39;Lockfile::Simple&#39; for that.</p>

<p>There are typical two scenarios for locking: you either lock just the &#39;tie&#39; and/or &#39;untie&#39; calls, but not the data manipulation, or you lock the whole &#39;tie&#39; - modify data - &#39;untie&#39; sequence.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="KEEPING_DATA_SYCHRONIZED"
>KEEPING DATA SYCHRONIZED <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>It often is useful to store snapshots of the tied data struct back to the file, e.g. to safeguard against program crashes. You have two possibilities to do that:</p>

<ul>
<li>use sync() to do it manually or</li>

<li>set autosync() to do it on every modification.</li>
</ul>

<p>Note that sync() and autosync() are methods of the tied object, so you have to call them like this:</p>

<pre class="sh_perl"> (tied %hash)-&#62;sync();</pre>

<p>and</p>

<pre class="sh_perl"> (tied @array)-&#62;autosync(1);  # or &#39;0&#39; to turn off autosync</pre>

<p>There is a global variable $Autosync (see there) that you can set to change the behaviour on a global level for all subsequent ties.</p>

<p>Enabling autosync of course means a quite hefty performance penalty, so think carefully if and how you need it. Maybe there are natural synchronisation points in your application where a manual sync is good enough. Alternatively use MLDBM (if your top-level struct is a hash).</p>

<p>Note: autosync only works if the top-level element of the data structure is modified. If you have more complex data structures and modify elements somewhere deep down, you have to synchronize manually. I therefore recommend the following approach, especially if the topmost structure is a hash:</p>

<ul>
<li>fetch the top-level element into a temporary variable</li>

<li>modify the datastructure</li>

<li>store back the top-level element, thus triggering a sync.</li>
</ul>

<p>E.g.</p>

<pre class="sh_perl">  my $ref = $Hash{$key};      # fetch substructure
  $ref-&#62;{$subkey} = $newval;  # modify somewhere down under
  $Hash{$key} = $ref;         # store back</pre>

<p>This programming style has the added advantage that you can switch over to other database packages (for example the MLDBM package, in case your data structures outgrow your memory) quite easily by just changing the &#39;tie&#39; line!</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONFIGURATION_VARIABLES"
>CONFIGURATION VARIABLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b><code>$Tie::Persistent::Readable</code></b> controls which format to use to store the data inside the file. &#39;false&#39; means to use &#39;Storable&#39;, which is faster (and the default), &#39;true&#39; means to use &#39;Data::Dumper&#39;, which is slower but much more readable and thus meant for debugging. This only influences the way the datastructure is <i>written</i>, format detection on read is automatic.</p>

<p><b><code>$Tie::Persistent::Autosync</code></b> gives the default for all tied vars, so modifying it affects all subsequent ties. It&#39;s set to &#39;false&#39; by default.</p>

<p><b><code>$Tie::Persistent::BackupFile</code></b> points to a sub that determines the backup filename format. It gets the filename as $_[0] and returns the backup filename. The default is</p>

<pre class="sh_perl"> sub { &#34;$_[0]~&#34;; }</pre>

<p>which is the Emacs backup format. For NT, you might want to change this to</p>

<pre class="sh_perl"> sub { &#34;$_[0].bak&#34;; }</pre>

<p>or something.</p>

<p><b><code>$Tie::Persistent::NumberedBackupFile</code></b> points to a sub that determines the numbered backup filename format. It gets the filename and a number as $_[0] and $_[1] respectively and returns the backup filename. The default is</p>

<pre class="sh_perl"> sub { &#34;$_[0]~$_[1]~&#34;; }</pre>

<p>which is the extended Emacs backup format.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NOTES"
>NOTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li>&#39;Tie::Persistent&#39; uses &#39;Storable&#39; and &#39;Data::Dumper&#39; internally, so these must be installed (the CPAN module will do this for you automatically). Actually, &#39;Storable&#39; is optional but recommended for speed.</li>

<li>For testing, I use &#39;Tie::IxHash&#39;, but &#39;make test&#39; still does some tests if it is not installed.</li>

<li>There are two mailing lists at SourceForge.net:
<p><a href="http://lists.sourceforge.net/mailman/listinfo/persistent-announce" class="podlinkurl"
>http://lists.sourceforge.net/mailman/listinfo/persistent-announce</a> for announcements of new releases.</p>

<p><a href="http://lists.sourceforge.net/mailman/listinfo/persistent-discuss" class="podlinkurl"
>http://lists.sourceforge.net/mailman/listinfo/persistent-discuss</a> for user feedback and feature discussions.</p>
</li>

<li>The package is available through CPAN and SourceForge.net <a href="http://sourceforge.net/projects/persistent/" class="podlinkurl"
>http://sourceforge.net/projects/persistent/</a></li>

<li>There is an initiative at SourceForge.net to get authors of persistence-packages of any kind to talk to one another. See <a href="http://sourceforge.net/projects/POOP/" class="podlinkurl"
>http://sourceforge.net/projects/POOP/</a></li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Numbered backupfile creation might have problems if the filename (not the backup number) contains the first six digits of the speed of light (in m/s).</p>

<p>All other bugs, please tell me!</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Original version by Roland Giersig &#60;RGiersig@cpan.org&#62;</p>

<p>Benjamin Liberman &#60;beanjamman@yahoo.com&#62; added autosyncing and fixed splice.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 1999-2002 Roland Giersig. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?Storable" class="podlinkpod"
>Storable</a>, <a href="/perldoc?Data%3A%3ADumper" class="podlinkpod"
>Data::Dumper</a>, <a href="/perldoc?MLDBM" class="podlinkpod"
>MLDBM</a>.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78275 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 02:21:27 2012 GMT (0.108567953109741) @cpansearch1 -->
 </body>
</html>
