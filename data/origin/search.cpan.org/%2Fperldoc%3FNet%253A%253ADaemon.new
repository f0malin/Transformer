<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Net::Daemon - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Net-Daemon",3]);
    _gaq.push(["_setCustomVar",5,"Release","Net-Daemon-0.48",3]);
    _gaq.push(["_setCustomVar",3,"Module","Net::Daemon",3]);
    _gaq.push(["_setCustomVar",1,"Author","MNOONING",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Net::Daemon">permalink</a></div>
  <a href="/~mnooning/">Malcolm H. Nooning</a> &gt;
  <a href="/~mnooning/Net-Daemon-0.48/">Net-Daemon-0.48</a> &gt;
  Net::Daemon
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/96a0248dd39ca7d11353e1684b875450?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/M/MN/MNOONING/Net-Daemon-0.48.tar.gz">Net-Daemon-0.48.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Net%3A%3ADaemon;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~MNOONING/Net-Daemon-0.48/lib/Net/Daemon.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?IO%3A%3ASocket">IO::Socket</a><br>
<a href="/perldoc?Net%3A%3AServer">Net::Server</a><br>
<a href="/perldoc?Net%3A%3ASFTP">Net::SFTP</a><br>
<a href="/perldoc?IO%3A%3ASelect">IO::Select</a><br>
<a href="/perldoc?RPC%3A%3APlServer">RPC::PlServer</a><br>
<a href="/perldoc?Net%3A%3ASSH%3A%3APerl">Net::SSH::Perl</a><br>
<a href="/perldoc?RPC%3A%3APlClient">RPC::PlClient</a><br>
<a href="/perldoc?HTTP%3A%3ADaemon">HTTP::Daemon</a><br>
<a href="/perldoc?DBD%3A%3AOracle">DBD::Oracle</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Net%3A%3ADaemon">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 4</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 7</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Net-Daemon">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.48 &nbsp;
<span class="noprint">
  <a href="/src/MNOONING/Net-Daemon-0.48/lib/Net/Daemon.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Constructors'>Constructors</a>
    <li class='indexItem indexItem2'><a href='#Command_Line_Parsing'>Command Line Parsing</a>
    <li class='indexItem indexItem2'><a href='#Config_File'>Config File</a>
    <li class='indexItem indexItem2'><a href='#Access_control'>Access control</a>
    <li class='indexItem indexItem2'><a href='#Event_logging'>Event logging</a>
    <li class='indexItem indexItem2'><a href='#Flow_of_control'>Flow of control</a>
    <li class='indexItem indexItem2'><a href='#Error_Handling'>Error Handling</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#MULTITHREADING_CONSIDERATIONS'>MULTITHREADING CONSIDERATIONS</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLE'>EXAMPLE</a>
  <li class='indexItem indexItem1'><a href='#KNOWN_PROBLEMS'>KNOWN PROBLEMS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR_AND_COPYRIGHT'>AUTHOR AND COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Net::Daemon - Perl extension for portable daemons</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  # Create a subclass of Net::Daemon
  require Net::Daemon;
  package MyDaemon;
  @MyDaemon::ISA = qw(Net::Daemon);

  sub Run ($) {
    # This function does the real work; it is invoked whenever a
    # new connection is made.
  }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Net::Daemon is an abstract base class for implementing portable server applications in a very simple way. The module is designed for Perl 5.005 and threads, but can work with fork() and Perl 5.004.</p>

<p>The Net::Daemon class offers methods for the most common tasks a daemon needs: Starting up, logging, accepting clients, authorization, restricting its own environment for security and doing the true work. You only have to override those methods that aren&#39;t appropriate for you, but typically inheriting will safe you a lot of work anyways.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Constructors"
>Constructors</a></h2>

<pre class="sh_perl">  $server = Net::Daemon-&#62;new($attr, $options);

  $connection = $server-&#62;Clone($socket);</pre>

<p>Two constructors are available: The <b>new</b> method is called upon startup and creates an object that will basically act as an anchor over the complete program. It supports command line parsing via <a href="#Getopt::Long_(3)" class="podlinkpod"
>&#34;Getopt::Long (3)&#34;</a>.</p>

<p>Arguments of <b>new</b> are <i>$attr</i>, an hash ref of attributes (see below) and <i>$options</i> an array ref of options, typically command line arguments (for example <b>\@ARGV</b>) that will be passed to <b>Getopt::Long::GetOptions</b>.</p>

<p>The second constructor is <b>Clone</b>: It is called whenever a client connects. It receives the main server object as input and returns a new object. This new object will be passed to the methods that finally do the true work of communicating with the client. Communication occurs over the socket <b>$socket</b>, <b>Clone</b>&#39;s argument.</p>

<p>Possible object attributes and the corresponding command line arguments are:</p>

<dl>
<dt><a name='catchint'></a><a name="catchint_(--nocatchint)"
><i>catchint</i> (<b>--nocatchint</b>)</a></dt>

<dd>
<p>On some systems, in particular Solaris, the functions accept(), read() and so on are not safe against interrupts by signals. For example, if the user raises a USR1 signal (as typically used to reread config files), then the function returns an error EINTR. If the <i>catchint</i> option is on (by default it is, use <b>--nocatchint</b> to turn this off), then the package will ignore EINTR errors whereever possible.</p>

<dt><a name='chroot'></a><a name="chroot_(--chroot=dir)"
><i>chroot</i> (<b>--chroot=dir</b>)</a></dt>

<dd>
<p>(UNIX only) After doing a bind(), change root directory to the given directory by doing a chroot(). This is usefull for security operations, but it restricts programming a lot. For example, you typically have to load external Perl extensions before doing a chroot(), or you need to create hard links to Unix sockets. This is typically done in the config file, see the --configfile option. See also the --group and --user options.</p>

<p>If you don&#39;t know chroot(), think of an FTP server where you can see a certain directory tree only after logging in.</p>

<dt><a name="clients"
><i>clients</i></a></dt>

<dd>
<p>An array ref with a list of clients. Clients are hash refs, the attributes <i>accept</i> (0 for denying access and 1 for permitting) and <i>mask</i>, a Perl regular expression for the clients IP number or its host name. See <a href="#Access_control" class="podlinkpod"
>&#34;Access control&#34;</a> below.</p>

<dt><a name='configfile'></a><a name="configfile_(--configfile=file)"
><i>configfile</i> (<b>--configfile=file</b>)</a></dt>

<dd>
<p>Net::Daemon supports the use of config files. These files are assumed to contain a single hash ref that overrides the arguments of the new method. However, command line arguments in turn take precedence over the config file. See the <a href="#Config_File" class="podlinkpod"
>&#34;Config File&#34;</a> section below for details on the config file.</p>

<dt><a name='debug'></a><a name="debug_(--debug)"
><i>debug</i> (<b>--debug</b>)</a></dt>

<dd>
<p>Turn debugging mode on. Mainly this asserts that logging messages of level &#34;debug&#34; are created.</p>

<dt><a name='facility'></a><a name="facility_(--facility=mode)"
><i>facility</i> (<b>--facility=mode</b>)</a></dt>

<dd>
<p>(UNIX only) Facility to use for <a href="#Sys::Syslog_(3)" class="podlinkpod"
>&#34;Sys::Syslog (3)&#34;</a>. The default is <b>daemon</b>.</p>

<dt><a name='group'></a><a name="group_(--group=gid)"
><i>group</i> (<b>--group=gid</b>)</a></dt>

<dd>
<p>After doing a bind(), change the real and effective GID to the given. This is usefull, if you want your server to bind to a privileged port (&#60;1024), but don&#39;t want the server to execute as root. See also the --user option.</p>

<p>GID&#39;s can be passed as group names or numeric values.</p>

<dt><a name='localaddr'></a><a name="localaddr_(--localaddr=ip)"
><i>localaddr</i> (<b>--localaddr=ip</b>)</a></dt>

<dd>
<p>By default a daemon is listening to any IP number that a machine has. This attribute allows to restrict the server to the given IP number.</p>

<dt><a name='localpath'></a><a name="localpath_(--localpath=path)"
><i>localpath</i> (<b>--localpath=path</b>)</a></dt>

<dd>
<p>If you want to restrict your server to local services only, you&#39;ll prefer using Unix sockets, if available. In that case you can use this option for setting the path of the Unix socket being created. This option implies <b>--proto=unix</b>.</p>

<dt><a name='localport'></a><a name="localport_(--localport=port)"
><i>localport</i> (<b>--localport=port</b>)</a></dt>

<dd>
<p>This attribute sets the port on which the daemon is listening. It must be given somehow, as there&#39;s no default.</p>

<dt><a name='logfile'></a><a name="logfile_(--logfile=file)"
><i>logfile</i> (<b>--logfile=file</b>)</a></dt>

<dd>
<p>By default logging messages will be written to the syslog (Unix) or to the event log (Windows NT). On other operating systems you need to specify a log file. The special value &#34;STDERR&#34; forces logging to stderr.</p>

<dt><a name='loop'></a><a name="loop-child_(--loop-child)"
><i>loop-child</i> (<b>--loop-child</b>)</a></dt>

<dd>
<p>This option forces creation of a new child for loops. (See the <i>loop-timeout</i> option.) By default the loops are serialized.</p>

<dt><a name='loop'></a><a name="loop-timeout_(--loop-timeout=secs)"
><i>loop-timeout</i> (<b>--loop-timeout=secs</b>)</a></dt>

<dd>
<p>Some servers need to take an action from time to time. For example the Net::Daemon::Spooler attempts to empty its spooling queue every 5 minutes. If this option is set to a positive value (zero being the default), then the server will call its Loop method every &#34;loop-timeout&#34; seconds.</p>

<p>Don&#39;t trust too much on the precision of the interval: It depends on a number of factors, in particular the execution time of the Loop() method. The loop is implemented by using the <i>select</i> function. If you need an exact interval, you should better try to use the alarm() function and a signal handler. (And don&#39;t forget to look at the <i>catchint</i> option!)</p>

<p>It is recommended to use the <i>loop-child</i> option in conjunction with <i>loop-timeout</i>.</p>

<dt><a name='mode'></a><a name="mode_(--mode=modename)"
><i>mode</i> (<b>--mode=modename</b>)</a></dt>

<dd>
<p>The Net::Daemon server can run in three different modes, depending on the environment.</p>

<p>If you are running Perl 5.005 and did compile it for threads, then the server will create a new thread for each connection. The thread will execute the server&#39;s Run() method and then terminate. This mode is the default, you can force it with &#34;--mode=ithreads&#34; or &#34;--mode=threads&#34;.</p>

<p>If threads are not available, but you have a working fork(), then the server will behave similar by creating a new process for each connection. This mode will be used automatically in the absence of threads or if you use the &#34;--mode=fork&#34; option.</p>

<p>Finally there&#39;s a single-connection mode: If the server has accepted a connection, he will enter the Run() method. No other connections are accepted until the Run() method returns. This operation mode is useful if you have neither threads nor fork(), for example on the Macintosh. For debugging purposes you can force this mode with &#34;--mode=single&#34;.</p>

<p>When running in mode single, you can still handle multiple clients at a time by preforking multiple child processes. The number of childs is configured with the option &#34;--childs&#34;.</p>

<dt><a name="childs"
><i>childs</i></a></dt>

<dd>
<p>Use this parameter to let Net::Daemon run in prefork mode, which means it forks the number of childs processes you give with this parameter, and all child handle connections concurrently. The difference to fork mode is, that the child processes continue to run after a connection has terminated and are able to accept a new connection. This is useful for caching inside the childs process (e.g. DBI::ProxyServer connect_cached attribute)</p>

<dt><a name="options"
><i>options</i></a></dt>

<dd>
<p>Array ref of Command line options that have been passed to the server object via the <b>new</b> method.</p>

<dt><a name="parent"
><i>parent</i></a></dt>

<dd>
<p>When creating an object with <b>Clone</b> the original object becomes the parent of the new object. Objects created with <b>new</b> usually don&#39;t have a parent, thus this attribute is not set.</p>

<dt><a name='pidfile'></a><a name="pidfile_(--pidfile=file)"
><i>pidfile</i> (<b>--pidfile=file</b>)</a></dt>

<dd>
<p>(UNIX only) If this option is present, a PID file will be created at the given location.</p>

<dt><a name='proto'></a><a name="proto_(--proto=proto)"
><i>proto</i> (<b>--proto=proto</b>)</a></dt>

<dd>
<p>The transport layer to use, by default <i>tcp</i> or <i>unix</i> for a Unix socket. It is not yet possible to combine both.</p>

<dt><a name="socket"
><i>socket</i></a></dt>

<dd>
<p>The socket that is connected to the client; passed as <b>$client</b> argument to the <b>Clone</b> method. If the server object was created with <b>new</b>, this attribute can be undef, as long as the <b>Bind</b> method isn&#39;t called. Sockets are assumed to be IO::Socket objects.</p>

<dt><a name='user'></a><a name="user_(--user=uid)"
><i>user</i> (<b>--user=uid</b>)</a></dt>

<dd>
<p>After doing a bind(), change the real and effective UID to the given. This is usefull, if you want your server to bind to a privileged port (&#60;1024), but don&#39;t want the server to execute as root. See also the --group and the --chroot options.</p>

<p>UID&#39;s can be passed as group names or numeric values.</p>

<dt><a name='version'></a><a name="version_(--version)"
><i>version</i> (<b>--version</b>)</a></dt>

<dd>
<p>Supresses startup of the server; instead the version string will be printed and the program exits immediately.</p>
</dd>
</dl>

<p>Note that most of these attributes (facility, mode, localaddr, localport, pidfile, version) are meaningfull only at startup. If you set them later, they will be simply ignored. As almost all attributes have appropriate defaults, you will typically use the <b>localport</b> attribute only.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Command_Line_Parsing"
>Command Line Parsing</a></h2>

<pre class="sh_perl">  my $optionsAvailable = Net::Daemon-&#62;Options();

  print Net::Daemon-&#62;Version(), &#34;\n&#34;;

  Net::Daemon-&#62;Usage();</pre>

<p>The <b>Options</b> method returns a hash ref of possible command line options. The keys are option names, the values are again hash refs with the following keys:</p>

<dl>
<dt><a name="template"
>template</a></dt>

<dd>
<p>An option template that can be passed to <b>Getopt::Long::GetOptions</b>.</p>

<dt><a name="description"
>description</a></dt>

<dd>
<p>A description of this option, as used in <b>Usage</b></p>
</dd>
</dl>

<p>The <b>Usage</b> method prints a list of all possible options and returns. It uses the <b>Version</b> method for printing program name and version.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Config_File"
>Config File</a></h2>

<p>If the config file option is set in the command line options or in the in the &#34;new&#34; args, then the method</p>

<pre class="sh_perl">  $server-&#62;ReadConfigFile($file, $options, $args)</pre>

<p>is invoked. By default the config file is expected to contain Perl source that returns a hash ref of options. These options override the &#34;new&#34; args and will in turn be overwritten by the command line options, as present in the $options hash ref.</p>

<p>A typical config file might look as follows, we use the DBI::ProxyServer as an example:</p>

<pre class="sh_perl">    # Load external modules; this is not required unless you use
    # the chroot() option.
    #require DBD::mysql;
    #require DBD::CSV;

    {
        # &#39;chroot&#39; =&#62; &#39;/var/dbiproxy&#39;,
        &#39;facility&#39; =&#62; &#39;daemon&#39;,
        &#39;pidfile&#39; =&#62; &#39;/var/dbiproxy/dbiproxy.pid&#39;,
        &#39;user&#39; =&#62; &#39;nobody&#39;,
        &#39;group&#39; =&#62; &#39;nobody&#39;,
        &#39;localport&#39; =&#62; &#39;1003&#39;,
        &#39;mode&#39; =&#62; &#39;fork&#39;

        # Access control
        &#39;clients&#39; =&#62; [
            # Accept the local
            {
                &#39;mask&#39; =&#62; &#39;^192\.168\.1\.\d+$&#39;,
                &#39;accept&#39; =&#62; 1
            },
            # Accept myhost.company.com
            {
                &#39;mask&#39; =&#62; &#39;^myhost\.company\.com$&#39;,
                &#39;accept&#39; =&#62; 1
            }
            # Deny everything else
            {
                &#39;mask&#39; =&#62; &#39;.*&#39;,
                &#39;accept&#39; =&#62; 0
            }
        ]
    }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Access_control"
>Access control</a></h2>

<p>The Net::Daemon package supports a host based access control scheme. By default access is open for anyone. However, if you create an attribute $self-&#62;{&#39;clients&#39;}, typically in the config file, then access control is disabled by default. For any connection the client list is processed: The clients attribute is an array ref to a list of hash refs. Any of the hash refs may contain arbitrary attributes, including the following:</p>

<dl>
<dt><a name="mask"
>mask</a></dt>

<dd>
<p>A Perl regular expression that has to match the clients IP number or its host name. The list is processed from the left to the right, whenever a &#39;mask&#39; attribute matches, then the related hash ref is choosen as client and processing the client list stops.</p>

<dt><a name="accept"
>accept</a></dt>

<dd>
<p>This may be set to true or false (default when omitting the attribute), the former means accepting the client.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Event_logging"
>Event logging</a></h2>

<pre class="sh_perl">  $server-&#62;Log($level, $format, @args);
  $server-&#62;Debug($format, @args);
  $server-&#62;Error($format, @args);
  $server-&#62;Fatal($format, @args);</pre>

<p>The <b>Log</b> method is an interface to <a href="#Sys::Syslog_(3)" class="podlinkpod"
>&#34;Sys::Syslog (3)&#34;</a> or <a href="#Win32::EventLog_(3)" class="podlinkpod"
>&#34;Win32::EventLog (3)&#34;</a>. It&#39;s arguments are <i>$level</i>, a syslog level like <b>debug</b>, <b>notice</b> or <b>err</b>, a format string in the style of printf and the format strings arguments.</p>

<p>The <b>Debug</b> and <b>Error</b> methods are shorthands for calling <b>Log</b> with a level of debug and err, respectively. The <b>Fatal</b> method is like <b>Error</b>, except it additionally throws the given message as exception.</p>

<p>See <a href="/~mnooning/Net-Daemon-0.48/lib/Net/Daemon/Log.pm" class="podlinkpod"
>Net::Daemon::Log(3)</a> for details.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Flow_of_control"
>Flow of control</a></h2>

<pre class="sh_perl">  $server-&#62;Bind();
  # The following inside Bind():
  if ($connection-&#62;Accept()) {
      $connection-&#62;Run();
  } else {
      $connection-&#62;Log(&#39;err&#39;, &#39;Connection refused&#39;);
  }</pre>

<p>The <b>Bind</b> method is called by the application when the server should start. Typically this can be done right after creating the server object <b>$server</b>. <b>Bind</b> usually never returns, except in case of errors.</p>

<p>When a client connects, the server uses <b>Clone</b> to derive a connection object <b>$connection</b> from the server object. A new thread or process is created that uses the connection object to call your classes <b>Accept</b> method. This method is intended for host authorization and should return either FALSE (refuse the client) or TRUE (accept the client).</p>

<p>If the client is accepted, the <b>Run</b> method is called which does the true work. The connection is closed when <b>Run</b> returns and the corresponding thread or process exits.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Error_Handling"
>Error Handling</a></h2>

<p>All methods are supposed to throw Perl exceptions in case of errors.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MULTITHREADING_CONSIDERATIONS"
>MULTITHREADING CONSIDERATIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>All methods are working with lexically scoped data and handle data only, the exception being the OpenLog method which is invoked before threading starts. Thus you are safe as long as you don&#39;t share handles between threads. I strongly recommend that your application behaves similar. (This doesn&#39;t apply to mode &#39;ithreads&#39;.)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLE"
>EXAMPLE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>As an example we&#39;ll write a simple calculator server. After connecting to this server you may type expressions, one per line. The server evaluates the expressions and prints the result. (Note this is an example, in real life we&#39;d never implement such a security hole. :-)</p>

<p>For the purpose of example we add a command line option <i>--base</i> that takes &#39;hex&#39;, &#39;oct&#39; or &#39;dec&#39; as values: The servers output will use the given base.</p>

<pre class="sh_perl">  # -*- perl -*-
  #
  # Calculator server
  #
  require 5.004;
  use strict;

  require Net::Daemon;


  package Calculator;

  use vars qw($VERSION @ISA);
  $VERSION = &#39;0.01&#39;;
  @ISA = qw(Net::Daemon); # to inherit from Net::Daemon

  sub Version ($) { &#39;Calculator Example Server, 0.01&#39;; }

  # Add a command line option &#34;--base&#34;
  sub Options ($) {
      my($self) = @_;
      my($options) = $self-&#62;SUPER::Options();
      $options-&#62;{&#39;base&#39;} = { &#39;template&#39; =&#62; &#39;base=s&#39;,
                             &#39;description&#39; =&#62; &#39;--base                  &#39;
                                    . &#39;dec (default), hex or oct&#39;
                              };
      $options;
  }

  # Treat command line option in the constructor
  sub new ($$;$) {
      my($class, $attr, $args) = @_;
      my($self) = $class-&#62;SUPER::new($attr, $args);
      if ($self-&#62;{&#39;parent&#39;}) {
          # Called via Clone()
          $self-&#62;{&#39;base&#39;} = $self-&#62;{&#39;parent&#39;}-&#62;{&#39;base&#39;};
      } else {
          # Initial call
          if ($self-&#62;{&#39;options&#39;}  &#38;&#38;  $self-&#62;{&#39;options&#39;}-&#62;{&#39;base&#39;}) {
              $self-&#62;{&#39;base&#39;} = $self-&#62;{&#39;options&#39;}-&#62;{&#39;base&#39;}
          }
      }
      if (!$self-&#62;{&#39;base&#39;}) {
          $self-&#62;{&#39;base&#39;} = &#39;dec&#39;;
      }
      $self;
  }

  sub Run ($) {
      my($self) = @_;
      my($line, $sock);
      $sock = $self-&#62;{&#39;socket&#39;};
      while (1) {
          if (!defined($line = $sock-&#62;getline())) {
              if ($sock-&#62;error()) {
                  $self-&#62;Error(&#34;Client connection error %s&#34;,
                               $sock-&#62;error());
              }
              $sock-&#62;close();
              return;
          }
          $line =~ s/\s+$//; # Remove CRLF
          my($result) = eval $line;
          my($rc);
          if ($self-&#62;{&#39;base&#39;} eq &#39;hex&#39;) {
              $rc = printf $sock (&#34;%x\n&#34;, $result);
          } elsif ($self-&#62;{&#39;base&#39;} eq &#39;oct&#39;) {
              $rc = printf $sock (&#34;%o\n&#34;, $result);
          } else {
              $rc = printf $sock (&#34;%d\n&#34;, $result);
          }
          if (!$rc) {
              $self-&#62;Error(&#34;Client connection error %s&#34;,
                           $sock-&#62;error());
              $sock-&#62;close();
              return;
          }
      }
  }

  package main;

  my $server = Calculator-&#62;new({&#39;pidfile&#39; =&#62; &#39;none&#39;,
                                &#39;localport&#39; =&#62; 2000}, \@ARGV);
  $server-&#62;Bind();</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="KNOWN_PROBLEMS"
>KNOWN PROBLEMS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Most, or even any, known problems are related to the Sys::Syslog module which is by default used for logging events under Unix. I&#39;ll quote some examples:</p>

<dl>
<dt><a name='Usage'></a><a name="Usage:_Sys::Syslog::_PATH_LOG_at_..."
>Usage: Sys::Syslog::_PATH_LOG at ...</a></dt>

<dd>
<p>This problem is treated in perl bug 20000712.003. A workaround is changing line 277 of Syslog.pm to</p>

<pre class="sh_perl">  my $syslog = &#38;_PATH_LOG() || croak &#34;_PATH_LOG not found in syslog.ph&#34;;</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR_AND_COPYRIGHT"
>AUTHOR AND COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  Net::Daemon is Copyright (C) 1998, Jochen Wiedmann
                                     Am Eisteich 9
                                     72555 Metzingen
                                     Germany

                                     Phone: +49 7123 14887
                                     Email: joe@ispsoft.de

  All rights reserved.

  You may distribute this package under the terms of either the GNU
  General Public License or the Artistic License, as specified in the
  Perl README file.</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?RPC%3A%3ApServer" class="podlinkpod"
>RPC::pServer(3)</a>, <a href="/perldoc?Netserver%3A%3AGeneric" class="podlinkpod"
>Netserver::Generic(3)</a>, <a href="/~mnooning/Net-Daemon-0.48/lib/Net/Daemon/Log.pm" class="podlinkpod"
>Net::Daemon::Log(3)</a>, <a href="/~mnooning/Net-Daemon-0.48/lib/Net/Daemon/Test.pm" class="podlinkpod"
>Net::Daemon::Test(3)</a></p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78276 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 03:10:35 2012 GMT (0.117142915725708) @cpansearch1 -->
 </body>
</html>
