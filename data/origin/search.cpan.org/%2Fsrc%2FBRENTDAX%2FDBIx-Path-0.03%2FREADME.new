DBIx::Path version 0.03
=======================

DBIx::Path is used to navigate through trees or directed graphs 
described by self-referential SQL database tables.  It can be 
used to browse most trees where each row contains a unique ID 
and the ID of its parent, as well as graphs structured similarly 
but with multiple parents for a given node.

DBIx::Path is a pure-Perl module, which will likely not parse 
correctly on anything before Perl 5.6.  It uses Perl's standard
DBI database interface.

IN THIS VERSION

This version includes two new methods, C<parents> and C<reverse>.
The first retrieves all parents and names of the current node;
the second returns all paths leading to the current node.  This
version also adds hooks to lock tables before and after all
queries.

INSTALLATION

This module uses Module::Build for installation.  To install this 
module type the following:

   perl Build.PL
   ./Build
   ./Build test
   ./Build install

On Windows, substitute "perl " for "./".  If you do not have 
Module::Build, you may use the included Makefile.PL, which will 
install it for you.

TESTING

To obtain a temporary database for testing, the test suite uses
the DBD::AnyData module to build an in-memory database.  You may
also use an existing database and DBD by:

  - Setting the TESTCONN environment variable to a full DBI
    connection string,
  - Setting the TESTUSER environment variable to an appropriate
    username, and
  - Setting the TESTPASS environment variable to an appropriate
    password.

The user must be able to create, drop, select, insert, and delete
from a table called "dbix_path_test".

This module treats DBD::AnyData and AnyData.pm as recommendations,
not requirements.

DEPENDENCIES

This module requires these other modules:

    DBI

For testing, you may want:

    DBD::AnyData
    AnyData

COPYRIGHT AND LICENCE

Copyright 2005 by Brent Dax <brentdax@cpan.org>.  All rights
reserved

This library is free software; it can be used, redistributed
and/or modified under the same terms as Perl itself.
