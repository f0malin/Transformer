<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>URI - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","URI",3]);
    _gaq.push(["_setCustomVar",5,"Release","URI-1.60",3]);
    _gaq.push(["_setCustomVar",3,"Module","URI",3]);
    _gaq.push(["_setCustomVar",1,"Author","GAAS",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?URI">permalink</a></div>
  <a href="/~gaas/">Gisle Aas</a> &gt;
  <a href="/~gaas/URI-1.60/">URI-1.60</a> &gt;
  URI
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/80ccd89a65d9faf08c2fb6be2991ba57?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/G/GA/GAAS/URI-1.60.tar.gz">URI-1.60.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=URI;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~GAAS/URI-1.60/URI.pm">Annotate this POD
(1)
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 15</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 10</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=URI">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.60 &nbsp;
<span class="noprint">
  <a href="/src/GAAS/URI-1.60/URI.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#CONSTRUCTORS'>CONSTRUCTORS</a>
  <li class='indexItem indexItem1'><a href='#COMMON_METHODS'>COMMON METHODS</a>
  <li class='indexItem indexItem1'><a href='#GENERIC_METHODS'>GENERIC METHODS</a>
  <li class='indexItem indexItem1'><a href='#SERVER_METHODS'>SERVER METHODS</a>
  <li class='indexItem indexItem1'><a href='#SCHEME-SPECIFIC_SUPPORT'>SCHEME-SPECIFIC SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#CONFIGURATION_VARIABLES'>CONFIGURATION VARIABLES</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#PARSING_URIs_WITH_REGEXP'>PARSING URIs WITH REGEXP</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS_/_ACKNOWLEDGMENTS'>AUTHORS / ACKNOWLEDGMENTS</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>URI - Uniform Resource Identifiers (absolute and relative)</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> $u1 = URI-&#62;new(&#34;<a href="http://www.perl.com" class="podlinkurl"
>http://www.perl.com</a>&#34;);
 $u2 = URI-&#62;new(&#34;foo&#34;, &#34;http&#34;);
 $u3 = $u2-&#62;abs($u1);
 $u4 = $u3-&#62;clone;
 $u5 = URI-&#62;new(&#34;HTTP://WWW.perl.com:80&#34;)-&#62;canonical;

 $str = $u-&#62;as_string;
 $str = &#34;$u&#34;;

 $scheme = $u-&#62;scheme;
 $opaque = $u-&#62;opaque;
 $path   = $u-&#62;path;
 $frag   = $u-&#62;fragment;

 $u-&#62;scheme(&#34;ftp&#34;);
 $u-&#62;host(&#34;ftp.perl.com&#34;);
 $u-&#62;path(&#34;cpan/&#34;);</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module implements the <code>URI</code> class. Objects of this class represent &#34;Uniform Resource Identifier references&#34; as specified in RFC 2396 (and updated by RFC 2732).</p>

<p>A Uniform Resource Identifier is a compact string of characters that identifies an abstract or physical resource. A Uniform Resource Identifier can be further classified as either a Uniform Resource Locator (URL) or a Uniform Resource Name (URN). The distinction between URL and URN does not matter to the <code>URI</code> class interface. A &#34;URI-reference&#34; is a URI that may have additional information attached in the form of a fragment identifier.</p>

<p>An absolute URI reference consists of three parts: a <i>scheme</i>, a <i>scheme-specific part</i> and a <i>fragment</i> identifier. A subset of URI references share a common syntax for hierarchical namespaces. For these, the scheme-specific part is further broken down into <i>authority</i>, <i>path</i> and <i>query</i> components. These URIs can also take the form of relative URI references, where the scheme (and usually also the authority) component is missing, but implied by the context of the URI reference. The three forms of URI reference syntax are summarized as follows:</p>

<pre class="sh_perl">  &#60;scheme&#62;:&#60;scheme-specific-part&#62;#&#60;fragment&#62;
  &#60;scheme&#62;://&#60;authority&#62;&#60;path&#62;?&#60;query&#62;#&#60;fragment&#62;
  &#60;path&#62;?&#60;query&#62;#&#60;fragment&#62;</pre>

<p>The components into which a URI reference can be divided depend on the <i>scheme</i>. The <code>URI</code> class provides methods to get and set the individual components. The methods available for a specific <code>URI</code> object depend on the scheme.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTORS"
>CONSTRUCTORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following methods construct new <code>URI</code> objects:</p>

<dl>
<dt><a name='uri'></a><a name="$uri_=_URI-&#62;new(_$str_)"
>$uri = URI-&#62;new( $str )</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri_=_URI-&#62;new(_$str,_$scheme_)"
>$uri = URI-&#62;new( $str, $scheme )</a></dt>

<dd>
<p>Constructs a new URI object. The string representation of a URI is given as argument, together with an optional scheme specification. Common URI wrappers like &#34;&#34; and &#60;&#62;, as well as leading and trailing white space, are automatically removed from the $str argument before it is processed further.</p>

<p>The constructor determines the scheme, maps this to an appropriate URI subclass, constructs a new object of that class and returns it.</p>

<p>The $scheme argument is only used when $str is a relative URI. It can be either a simple string that denotes the scheme, a string containing an absolute URI reference, or an absolute <code>URI</code> object. If no $scheme is specified for a relative URI $str, then $str is simply treated as a generic URI (no scheme-specific methods available).</p>

<p>The set of characters available for building URI references is restricted (see <a href="/~gaas/URI-1.60/URI/Escape.pm" class="podlinkpod"
>URI::Escape</a>). Characters outside this set are automatically escaped by the URI constructor.</p>

<dt><a name='uri'></a><a name="$uri_=_URI-&#62;new_abs(_$str,_$base_uri_)"
>$uri = URI-&#62;new_abs( $str, $base_uri )</a></dt>

<dd>
<p>Constructs a new absolute URI object. The $str argument can denote a relative or absolute URI. If relative, then it is absolutized using $base_uri as base. The $base_uri must be an absolute URI.</p>

<dt><a name='uri'></a><a name="$uri_=_URI::file-&#62;new(_$filename_)"
>$uri = URI::file-&#62;new( $filename )</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri_=_URI::file-&#62;new(_$filename,_$os_)"
>$uri = URI::file-&#62;new( $filename, $os )</a></dt>

<dd>
<p>Constructs a new <i>file</i> URI from a file name. See <a href="/~gaas/URI-1.60/URI/file.pm" class="podlinkpod"
>URI::file</a>.</p>

<dt><a name='uri'></a><a name="$uri_=_URI::file-&#62;new_abs(_$filename_)"
>$uri = URI::file-&#62;new_abs( $filename )</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri_=_URI::file-&#62;new_abs(_$filename,_$os_)"
>$uri = URI::file-&#62;new_abs( $filename, $os )</a></dt>

<dd>
<p>Constructs a new absolute <i>file</i> URI from a file name. See <a href="/~gaas/URI-1.60/URI/file.pm" class="podlinkpod"
>URI::file</a>.</p>

<dt><a name='uri'></a><a name="$uri_=_URI::file-&#62;cwd"
>$uri = URI::file-&#62;cwd</a></dt>

<dd>
<p>Returns the current working directory as a <i>file</i> URI. See <a href="/~gaas/URI-1.60/URI/file.pm" class="podlinkpod"
>URI::file</a>.</p>

<dt><a name='uri'></a><a name="$uri-&#62;clone"
>$uri-&#62;clone</a></dt>

<dd>
<p>Returns a copy of the $uri.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COMMON_METHODS"
>COMMON METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The methods described in this section are available for all <code>URI</code> objects.</p>

<p>Methods that give access to components of a URI always return the old value of the component. The value returned is <code>undef</code> if the component was not present. There is generally a difference between a component that is empty (represented as <code>&#34;&#34;</code>) and a component that is missing (represented as <code>undef</code>). If an accessor method is given an argument, it updates the corresponding component in addition to returning the old value of the component. Passing an undefined argument removes the component (if possible). The description of each accessor method indicates whether the component is passed as an escaped (percent-encoded) or an unescaped string. A component that can be further divided into sub-parts are usually passed escaped, as unescaping might change its semantics.</p>

<p>The common methods available for all URI are:</p>

<dl>
<dt><a name='uri'></a><a name="$uri-&#62;scheme"
>$uri-&#62;scheme</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;scheme(_$new_scheme_)"
>$uri-&#62;scheme( $new_scheme )</a></dt>

<dd>
<p>Sets and returns the scheme part of the $uri. If the $uri is relative, then $uri-&#62;scheme returns <code>undef</code>. If called with an argument, it updates the scheme of $uri, possibly changing the class of $uri, and returns the old scheme value. The method croaks if the new scheme name is illegal; a scheme name must begin with a letter and must consist of only US-ASCII letters, numbers, and a few special marks: &#34;.&#34;, &#34;+&#34;, &#34;-&#34;. This restriction effectively means that the scheme must be passed unescaped. Passing an undefined argument to the scheme method makes the URI relative (if possible).</p>

<p>Letter case does not matter for scheme names. The string returned by $uri-&#62;scheme is always lowercase. If you want the scheme just as it was written in the URI in its original case, you can use the $uri-&#62;_scheme method instead.</p>

<dt><a name='uri'></a><a name="$uri-&#62;opaque"
>$uri-&#62;opaque</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;opaque(_$new_opaque_)"
>$uri-&#62;opaque( $new_opaque )</a></dt>

<dd>
<p>Sets and returns the scheme-specific part of the $uri (everything between the scheme and the fragment) as an escaped string.</p>

<dt><a name='uri'></a><a name="$uri-&#62;path"
>$uri-&#62;path</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;path(_$new_path_)"
>$uri-&#62;path( $new_path )</a></dt>

<dd>
<p>Sets and returns the same value as $uri-&#62;opaque unless the URI supports the generic syntax for hierarchical namespaces. In that case the generic method is overridden to set and return the part of the URI between the <i>host name</i> and the <i>fragment</i>.</p>

<dt><a name='uri'></a><a name="$uri-&#62;fragment"
>$uri-&#62;fragment</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;fragment(_$new_frag_)"
>$uri-&#62;fragment( $new_frag )</a></dt>

<dd>
<p>Returns the fragment identifier of a URI reference as an escaped string.</p>

<dt><a name='uri'></a><a name="$uri-&#62;as_string"
>$uri-&#62;as_string</a></dt>

<dd>
<p>Returns a URI object to a plain ASCII string. URI objects are also converted to plain strings automatically by overloading. This means that $uri objects can be used as plain strings in most Perl constructs.</p>

<dt><a name='uri'></a><a name="$uri-&#62;as_iri"
>$uri-&#62;as_iri</a></dt>

<dd>
<p>Returns a Unicode string representing the URI. Escaped UTF-8 sequences representing non-ASCII characters are turned into their corresponding Unicode code point.</p>

<dt><a name='uri'></a><a name="$uri-&#62;canonical"
>$uri-&#62;canonical</a></dt>

<dd>
<p>Returns a normalized version of the URI. The rules for normalization are scheme-dependent. They usually involve lowercasing the scheme and Internet host name components, removing the explicit port specification if it matches the default port, uppercasing all escape sequences, and unescaping octets that can be better represented as plain characters.</p>

<p>For efficiency reasons, if the $uri is already in normalized form, then a reference to it is returned instead of a copy.</p>

<dt><a name='uri'></a><a name="$uri-&#62;eq(_$other_uri_)"
>$uri-&#62;eq( $other_uri )</a></dt>

<dd>
<dt><a name='URI'></a><a name="URI::eq(_$first_uri,_$other_uri_)"
>URI::eq( $first_uri, $other_uri )</a></dt>

<dd>
<p>Tests whether two URI references are equal. URI references that normalize to the same string are considered equal. The method can also be used as a plain function which can also test two string arguments.</p>

<p>If you need to test whether two <code>URI</code> object references denote the same object, use the &#39;==&#39; operator.</p>

<dt><a name='uri'></a><a name="$uri-&#62;abs(_$base_uri_)"
>$uri-&#62;abs( $base_uri )</a></dt>

<dd>
<p>Returns an absolute URI reference. If $uri is already absolute, then a reference to it is simply returned. If the $uri is relative, then a new absolute URI is constructed by combining the $uri and the $base_uri, and returned.</p>

<dt><a name='uri'></a><a name="$uri-&#62;rel(_$base_uri_)"
>$uri-&#62;rel( $base_uri )</a></dt>

<dd>
<p>Returns a relative URI reference if it is possible to make one that denotes the same resource relative to $base_uri. If not, then $uri is simply returned.</p>

<dt><a name='uri'></a><a name="$uri-&#62;secure"
>$uri-&#62;secure</a></dt>

<dd>
<p>Returns a TRUE value if the URI is considered to point to a resource on a secure channel, such as an SSL or TLS encrypted one.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="GENERIC_METHODS"
>GENERIC METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following methods are available to schemes that use the common/generic syntax for hierarchical namespaces. The descriptions of schemes below indicate which these are. Unknown schemes are assumed to support the generic syntax, and therefore the following methods:</p>

<dl>
<dt><a name='uri'></a><a name="$uri-&#62;authority"
>$uri-&#62;authority</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;authority(_$new_authority_)"
>$uri-&#62;authority( $new_authority )</a></dt>

<dd>
<p>Sets and returns the escaped authority component of the $uri.</p>

<dt><a name='uri'></a><a name="$uri-&#62;path"
>$uri-&#62;path</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;path(_$new_path_)"
>$uri-&#62;path( $new_path )</a></dt>

<dd>
<p>Sets and returns the escaped path component of the $uri (the part between the host name and the query or fragment). The path can never be undefined, but it can be the empty string.</p>

<dt><a name='uri'></a><a name="$uri-&#62;path_query"
>$uri-&#62;path_query</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;path_query(_$new_path_query_)"
>$uri-&#62;path_query( $new_path_query )</a></dt>

<dd>
<p>Sets and returns the escaped path and query components as a single entity. The path and the query are separated by a &#34;?&#34; character, but the query can itself contain &#34;?&#34;.</p>

<dt><a name='uri'></a><a name="$uri-&#62;path_segments"
>$uri-&#62;path_segments</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;path_segments(_$segment,_..._)"
>$uri-&#62;path_segments( $segment, ... )</a></dt>

<dd>
<p>Sets and returns the path. In a scalar context, it returns the same value as $uri-&#62;path. In a list context, it returns the unescaped path segments that make up the path. Path segments that have parameters are returned as an anonymous array. The first element is the unescaped path segment proper; subsequent elements are escaped parameter strings. Such an anonymous array uses overloading so it can be treated as a string too, but this string does not include the parameters.</p>

<p>Note that absolute paths have the empty string as their first <i>path_segment</i>, i.e. the <i>path</i> <code>/foo/bar</code> have 3 <i>path_segments</i>; &#34;&#34;, &#34;foo&#34; and &#34;bar&#34;.</p>

<dt><a name='uri'></a><a name="$uri-&#62;query"
>$uri-&#62;query</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;query(_$new_query_)"
>$uri-&#62;query( $new_query )</a></dt>

<dd>
<p>Sets and returns the escaped query component of the $uri.</p>

<dt><a name='uri'></a><a name="$uri-&#62;query_form"
>$uri-&#62;query_form</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;query_form(_$key1_=&#62;_$val1,_$key2_=&#62;_$val2,_..._)"
>$uri-&#62;query_form( $key1 =&#62; $val1, $key2 =&#62; $val2, ... )</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;query_form(_$key1_=&#62;_$val1,_$key2_=&#62;_$val2,_...,_$delim_)"
>$uri-&#62;query_form( $key1 =&#62; $val1, $key2 =&#62; $val2, ..., $delim )</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;query_form(_\@key_value_pairs_)"
>$uri-&#62;query_form( \@key_value_pairs )</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;query_form(_\@key_value_pairs,_$delim_)"
>$uri-&#62;query_form( \@key_value_pairs, $delim )</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;query_form(_\%hash_)"
>$uri-&#62;query_form( \%hash )</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;query_form(_\%hash,_$delim_)"
>$uri-&#62;query_form( \%hash, $delim )</a></dt>

<dd>
<p>Sets and returns query components that use the <i>application/x-www-form-urlencoded</i> format. Key/value pairs are separated by &#34;&#38;&#34;, and the key is separated from the value by a &#34;=&#34; character.</p>

<p>The form can be set either by passing separate key/value pairs, or via an array or hash reference. Passing an empty array or an empty hash removes the query component, whereas passing no arguments at all leaves the component unchanged. The order of keys is undefined if a hash reference is passed. The old value is always returned as a list of separate key/value pairs. Assigning this list to a hash is unwise as the keys returned might repeat.</p>

<p>The values passed when setting the form can be plain strings or references to arrays of strings. Passing an array of values has the same effect as passing the key repeatedly with one value at a time. All the following statements have the same effect:</p>

<pre class="sh_perl">    $uri-&#62;query_form(foo =&#62; 1, foo =&#62; 2);
    $uri-&#62;query_form(foo =&#62; [1, 2]);
    $uri-&#62;query_form([ foo =&#62; 1, foo =&#62; 2 ]);
    $uri-&#62;query_form([ foo =&#62; [1, 2] ]);
    $uri-&#62;query_form({ foo =&#62; [1, 2] });</pre>

<p>The $delim parameter can be passed as &#34;;&#34; to force the key/value pairs to be delimited by &#34;;&#34; instead of &#34;&#38;&#34; in the query string. This practice is often recommended for URLs embedded in HTML or XML documents as this avoids the trouble of escaping the &#34;&#38;&#34; character. You might also set the $URI::DEFAULT_QUERY_FORM_DELIMITER variable to &#34;;&#34; for the same global effect.</p>

<p>The <code>URI::QueryParam</code> module can be loaded to add further methods to manipulate the form of a URI. See <a href="/~gaas/URI-1.60/URI/QueryParam.pm" class="podlinkpod"
>URI::QueryParam</a> for details.</p>

<dt><a name='uri'></a><a name="$uri-&#62;query_keywords"
>$uri-&#62;query_keywords</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;query_keywords(_$keywords,_..._)"
>$uri-&#62;query_keywords( $keywords, ... )</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;query_keywords(_\@keywords_)"
>$uri-&#62;query_keywords( \@keywords )</a></dt>

<dd>
<p>Sets and returns query components that use the keywords separated by &#34;+&#34; format.</p>

<p>The keywords can be set either by passing separate keywords directly or by passing a reference to an array of keywords. Passing an empty array removes the query component, whereas passing no arguments at all leaves the component unchanged. The old value is always returned as a list of separate words.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SERVER_METHODS"
>SERVER METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>For schemes where the <i>authority</i> component denotes an Internet host, the following methods are available in addition to the generic methods.</p>

<dl>
<dt><a name='uri'></a><a name="$uri-&#62;userinfo"
>$uri-&#62;userinfo</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;userinfo(_$new_userinfo_)"
>$uri-&#62;userinfo( $new_userinfo )</a></dt>

<dd>
<p>Sets and returns the escaped userinfo part of the authority component.</p>

<p>For some schemes this is a user name and a password separated by a colon. This practice is not recommended. Embedding passwords in clear text (such as URI) has proven to be a security risk in almost every case where it has been used.</p>

<dt><a name='uri'></a><a name="$uri-&#62;host"
>$uri-&#62;host</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;host(_$new_host_)"
>$uri-&#62;host( $new_host )</a></dt>

<dd>
<p>Sets and returns the unescaped hostname.</p>

<p>If the $new_host string ends with a colon and a number, then this number also sets the port.</p>

<p>For IPv6 addresses the brackets around the raw address is removed in the return value from $uri-&#62;host. When setting the host attribute to an IPv6 address you can use a raw address or one enclosed in brackets. The address needs to be enclosed in brackets if you want to pass in a new port value as well.</p>

<dt><a name='uri'></a><a name="$uri-&#62;ihost"
>$uri-&#62;ihost</a></dt>

<dd>
<p>Returns the host in Unicode form. Any IDNA A-labels are turned into U-labels.</p>

<dt><a name='uri'></a><a name="$uri-&#62;port"
>$uri-&#62;port</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;port(_$new_port_)"
>$uri-&#62;port( $new_port )</a></dt>

<dd>
<p>Sets and returns the port. The port is a simple integer that should be greater than 0.</p>

<p>If a port is not specified explicitly in the URI, then the URI scheme&#39;s default port is returned. If you don&#39;t want the default port substituted, then you can use the $uri-&#62;_port method instead.</p>

<dt><a name='uri'></a><a name="$uri-&#62;host_port"
>$uri-&#62;host_port</a></dt>

<dd>
<dt><a name='uri'></a><a name="$uri-&#62;host_port(_$new_host_port_)"
>$uri-&#62;host_port( $new_host_port )</a></dt>

<dd>
<p>Sets and returns the host and port as a single unit. The returned value includes a port, even if it matches the default port. The host part and the port part are separated by a colon: &#34;:&#34;.</p>

<p>For IPv6 addresses the bracketing is preserved; thus URI-&#62;new(&#34;<a href="http://[::1]/" class="podlinkurl"
>http://[::1]/</a>&#34;)-&#62;host_port returns &#34;[::1]:80&#34;. Contrast this with $uri-&#62;host which will remove the brackets.</p>

<dt><a name='uri'></a><a name="$uri-&#62;default_port"
>$uri-&#62;default_port</a></dt>

<dd>
<p>Returns the default port of the URI scheme to which $uri belongs. For <i>http</i> this is the number 80, for <i>ftp</i> this is the number 21, etc. The default port for a scheme can not be changed.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SCHEME-SPECIFIC_SUPPORT"
>SCHEME-SPECIFIC SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Scheme-specific support is provided for the following URI schemes. For <code>URI</code> objects that do not belong to one of these, you can only use the common and generic methods.</p>

<dl>
<dt><a name='data'></a><a name="data:"
><b>data</b>:</a></dt>

<dd>
<p>The <i>data</i> URI scheme is specified in RFC 2397. It allows inclusion of small data items as &#34;immediate&#34; data, as if it had been included externally.</p>

<p><code>URI</code> objects belonging to the data scheme support the common methods and two new methods to access their scheme-specific components: $uri-&#62;media_type and $uri-&#62;data. See <a href="/~gaas/URI-1.60/URI/data.pm" class="podlinkpod"
>URI::data</a> for details.</p>

<dt><a name='file'></a><a name="file:"
><b>file</b>:</a></dt>

<dd>
<p>An old specification of the <i>file</i> URI scheme is found in RFC 1738. A new RFC 2396 based specification in not available yet, but file URI references are in common use.</p>

<p><code>URI</code> objects belonging to the file scheme support the common and generic methods. In addition, they provide two methods for mapping file URIs back to local file names; $uri-&#62;file and $uri-&#62;dir. See <a href="/~gaas/URI-1.60/URI/file.pm" class="podlinkpod"
>URI::file</a> for details.</p>

<dt><a name='ftp'></a><a name="ftp:"
><b>ftp</b>:</a></dt>

<dd>
<p>An old specification of the <i>ftp</i> URI scheme is found in RFC 1738. A new RFC 2396 based specification in not available yet, but ftp URI references are in common use.</p>

<p><code>URI</code> objects belonging to the ftp scheme support the common, generic and server methods. In addition, they provide two methods for accessing the userinfo sub-components: $uri-&#62;user and $uri-&#62;password.</p>

<dt><a name='gopher'></a><a name="gopher:"
><b>gopher</b>:</a></dt>

<dd>
<p>The <i>gopher</i> URI scheme is specified in &#60;draft-murali-url-gopher-1996-12-04&#62; and will hopefully be available as a RFC 2396 based specification.</p>

<p><code>URI</code> objects belonging to the gopher scheme support the common, generic and server methods. In addition, they support some methods for accessing gopher-specific path components: $uri-&#62;gopher_type, $uri-&#62;selector, $uri-&#62;search, $uri-&#62;string.</p>

<dt><a name='http'></a><a name="http:"
><b>http</b>:</a></dt>

<dd>
<p>The <i>http</i> URI scheme is specified in RFC 2616. The scheme is used to reference resources hosted by HTTP servers.</p>

<p><code>URI</code> objects belonging to the http scheme support the common, generic and server methods.</p>

<dt><a name='https'></a><a name="https:"
><b>https</b>:</a></dt>

<dd>
<p>The <i>https</i> URI scheme is a Netscape invention which is commonly implemented. The scheme is used to reference HTTP servers through SSL connections. Its syntax is the same as http, but the default port is different.</p>

<dt><a name='ldap'></a><a name="ldap:"
><b>ldap</b>:</a></dt>

<dd>
<p>The <i>ldap</i> URI scheme is specified in RFC 2255. LDAP is the Lightweight Directory Access Protocol. An ldap URI describes an LDAP search operation to perform to retrieve information from an LDAP directory.</p>

<p><code>URI</code> objects belonging to the ldap scheme support the common, generic and server methods as well as ldap-specific methods: $uri-&#62;dn, $uri-&#62;attributes, $uri-&#62;scope, $uri-&#62;filter, $uri-&#62;extensions. See <a href="/~gaas/URI-1.60/URI/ldap.pm" class="podlinkpod"
>URI::ldap</a> for details.</p>

<dt><a name='ldapi'></a><a name="ldapi:"
><b>ldapi</b>:</a></dt>

<dd>
<p>Like the <i>ldap</i> URI scheme, but uses a UNIX domain socket. The server methods are not supported, and the local socket path is available as $uri-&#62;un_path. The <i>ldapi</i> scheme is used by the OpenLDAP package. There is no real specification for it, but it is mentioned in various OpenLDAP manual pages.</p>

<dt><a name='ldaps'></a><a name="ldaps:"
><b>ldaps</b>:</a></dt>

<dd>
<p>Like the <i>ldap</i> URI scheme, but uses an SSL connection. This scheme is deprecated, as the preferred way is to use the <i>start_tls</i> mechanism.</p>

<dt><a name='mailto'></a><a name="mailto:"
><b>mailto</b>:</a></dt>

<dd>
<p>The <i>mailto</i> URI scheme is specified in RFC 2368. The scheme was originally used to designate the Internet mailing address of an individual or service. It has (in RFC 2368) been extended to allow setting of other mail header fields and the message body.</p>

<p><code>URI</code> objects belonging to the mailto scheme support the common methods and the generic query methods. In addition, they support the following mailto-specific methods: $uri-&#62;to, $uri-&#62;headers.</p>

<p>Note that the &#34;foo@example.com&#34; part of a mailto is <i>not</i> the <code>userinfo</code> and <code>host</code> but instead the <code>path</code>. This allows a mailto URI to contain multiple comma separated email addresses.</p>

<dt><a name='mms'></a><a name="mms:"
><b>mms</b>:</a></dt>

<dd>
<p>The <i>mms</i> URL specification can be found at <a href="http://sdp.ppona.com/" class="podlinkurl"
>http://sdp.ppona.com/</a>. <code>URI</code> objects belonging to the mms scheme support the common, generic, and server methods, with the exception of userinfo and query-related sub-components.</p>

<dt><a name='news'></a><a name="news:"
><b>news</b>:</a></dt>

<dd>
<p>The <i>news</i>, <i>nntp</i> and <i>snews</i> URI schemes are specified in &#60;draft-gilman-news-url-01&#62; and will hopefully be available as an RFC 2396 based specification soon.</p>

<p><code>URI</code> objects belonging to the news scheme support the common, generic and server methods. In addition, they provide some methods to access the path: $uri-&#62;group and $uri-&#62;message.</p>

<dt><a name='nntp'></a><a name="nntp:"
><b>nntp</b>:</a></dt>

<dd>
<p>See <i>news</i> scheme.</p>

<dt><a name='pop'></a><a name="pop:"
><b>pop</b>:</a></dt>

<dd>
<p>The <i>pop</i> URI scheme is specified in RFC 2384. The scheme is used to reference a POP3 mailbox.</p>

<p><code>URI</code> objects belonging to the pop scheme support the common, generic and server methods. In addition, they provide two methods to access the userinfo components: $uri-&#62;user and $uri-&#62;auth</p>

<dt><a name='rlogin'></a><a name="rlogin:"
><b>rlogin</b>:</a></dt>

<dd>
<p>An old specification of the <i>rlogin</i> URI scheme is found in RFC 1738. <code>URI</code> objects belonging to the rlogin scheme support the common, generic and server methods.</p>

<dt><a name='rtsp'></a><a name="rtsp:"
><b>rtsp</b>:</a></dt>

<dd>
<p>The <i>rtsp</i> URL specification can be found in section 3.2 of RFC 2326. <code>URI</code> objects belonging to the rtsp scheme support the common, generic, and server methods, with the exception of userinfo and query-related sub-components.</p>

<dt><a name='rtspu'></a><a name="rtspu:"
><b>rtspu</b>:</a></dt>

<dd>
<p>The <i>rtspu</i> URI scheme is used to talk to RTSP servers over UDP instead of TCP. The syntax is the same as rtsp.</p>

<dt><a name='rsync'></a><a name="rsync:"
><b>rsync</b>:</a></dt>

<dd>
<p>Information about rsync is available from <a href="http://rsync.samba.org/" class="podlinkurl"
>http://rsync.samba.org/</a>. <code>URI</code> objects belonging to the rsync scheme support the common, generic and server methods. In addition, they provide methods to access the userinfo sub-components: $uri-&#62;user and $uri-&#62;password.</p>

<dt><a name='sip'></a><a name="sip:"
><b>sip</b>:</a></dt>

<dd>
<p>The <i>sip</i> URI specification is described in sections 19.1 and 25 of RFC 3261. <code>URI</code> objects belonging to the sip scheme support the common, generic, and server methods with the exception of path related sub-components. In addition, they provide two methods to get and set <i>sip</i> parameters: $uri-&#62;params_form and $uri-&#62;params.</p>

<dt><a name='sips'></a><a name="sips:"
><b>sips</b>:</a></dt>

<dd>
<p>See <i>sip</i> scheme. Its syntax is the same as sip, but the default port is different.</p>

<dt><a name='snews'></a><a name="snews:"
><b>snews</b>:</a></dt>

<dd>
<p>See <i>news</i> scheme. Its syntax is the same as news, but the default port is different.</p>

<dt><a name='telnet'></a><a name="telnet:"
><b>telnet</b>:</a></dt>

<dd>
<p>An old specification of the <i>telnet</i> URI scheme is found in RFC 1738. <code>URI</code> objects belonging to the telnet scheme support the common, generic and server methods.</p>

<dt><a name='tn3270'></a><a name="tn3270:"
><b>tn3270</b>:</a></dt>

<dd>
<p>These URIs are used like <i>telnet</i> URIs but for connections to IBM mainframes. <code>URI</code> objects belonging to the tn3270 scheme support the common, generic and server methods.</p>

<dt><a name='ssh'></a><a name="ssh:"
><b>ssh</b>:</a></dt>

<dd>
<p>Information about ssh is available at <a href="http://www.openssh.com/" class="podlinkurl"
>http://www.openssh.com/</a>. <code>URI</code> objects belonging to the ssh scheme support the common, generic and server methods. In addition, they provide methods to access the userinfo sub-components: $uri-&#62;user and $uri-&#62;password.</p>

<dt><a name='urn'></a><a name="urn:"
><b>urn</b>:</a></dt>

<dd>
<p>The syntax of Uniform Resource Names is specified in RFC 2141. <code>URI</code> objects belonging to the urn scheme provide the common methods, and also the methods $uri-&#62;nid and $uri-&#62;nss, which return the Namespace Identifier and the Namespace-Specific String respectively.</p>

<p>The Namespace Identifier basically works like the Scheme identifier of URIs, and further divides the URN namespace. Namespace Identifier assignments are maintained at <a href="http://www.iana.org/assignments/urn-namespaces" class="podlinkurl"
>http://www.iana.org/assignments/urn-namespaces</a>.</p>

<p>Letter case is not significant for the Namespace Identifier. It is always returned in lower case by the $uri-&#62;nid method. The $uri-&#62;_nid method can be used if you want it in its original case.</p>

<dt><a name='urn'></a><a name="urn:isbn:"
><b>urn</b>:<b>isbn</b>:</a></dt>

<dd>
<p>The <code>urn:isbn:</code> namespace contains International Standard Book Numbers (ISBNs) and is described in RFC 3187. A <code>URI</code> object belonging to this namespace has the following extra methods (if the Business::ISBN module is available): $uri-&#62;isbn, $uri-&#62;isbn_publisher_code, $uri-&#62;isbn_group_code (formerly isbn_country_code, which is still supported by issues a deprecation warning), $uri-&#62;isbn_as_ean.</p>

<dt><a name='urn'></a><a name="urn:oid:"
><b>urn</b>:<b>oid</b>:</a></dt>

<dd>
<p>The <code>urn:oid:</code> namespace contains Object Identifiers (OIDs) and is described in RFC 3061. An object identifier consists of sequences of digits separated by dots. A <code>URI</code> object belonging to this namespace has an additional method called $uri-&#62;oid that can be used to get/set the oid value. In a list context, oid numbers are returned as separate elements.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONFIGURATION_VARIABLES"
>CONFIGURATION VARIABLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following configuration variables influence how the class and its methods behave:</p>

<dl>
<dt><a name='URI'></a><a name="$URI::ABS_ALLOW_RELATIVE_SCHEME"
>$URI::ABS_ALLOW_RELATIVE_SCHEME</a></dt>

<dd>
<p>Some older parsers used to allow the scheme name to be present in the relative URL if it was the same as the base URL scheme. RFC 2396 says that this should be avoided, but you can enable this old behaviour by setting the $URI::ABS_ALLOW_RELATIVE_SCHEME variable to a TRUE value. The difference is demonstrated by the following examples:</p>

<pre class="sh_perl">  URI-&#62;new(&#34;http:foo&#34;)-&#62;abs(&#34;<a href="http://host/a/b" class="podlinkurl"
>http://host/a/b</a>&#34;)
      ==&#62;  &#34;http:foo&#34;

  local $URI::ABS_ALLOW_RELATIVE_SCHEME = 1;
  URI-&#62;new(&#34;http:foo&#34;)-&#62;abs(&#34;<a href="http://host/a/b" class="podlinkurl"
>http://host/a/b</a>&#34;)
      ==&#62;  &#34;http:/host/a/foo&#34;</pre>

<dt><a name='URI'></a><a name="$URI::ABS_REMOTE_LEADING_DOTS"
>$URI::ABS_REMOTE_LEADING_DOTS</a></dt>

<dd>
<p>You can also have the abs() method ignore excess &#34;..&#34; segments in the relative URI by setting $URI::ABS_REMOTE_LEADING_DOTS to a TRUE value. The difference is demonstrated by the following examples:</p>

<pre class="sh_perl">  URI-&#62;new(&#34;../../../foo&#34;)-&#62;abs(&#34;<a href="http://host/a/b" class="podlinkurl"
>http://host/a/b</a>&#34;)
      ==&#62; &#34;<a href="http://host/../../foo" class="podlinkurl"
>http://host/../../foo</a>&#34;

  local $URI::ABS_REMOTE_LEADING_DOTS = 1;
  URI-&#62;new(&#34;../../../foo&#34;)-&#62;abs(&#34;<a href="http://host/a/b" class="podlinkurl"
>http://host/a/b</a>&#34;)
      ==&#62; &#34;<a href="http://host/foo" class="podlinkurl"
>http://host/foo</a>&#34;</pre>

<dt><a name='URI'></a><a name="$URI::DEFAULT_QUERY_FORM_DELIMITER"
>$URI::DEFAULT_QUERY_FORM_DELIMITER</a></dt>

<dd>
<p>This value can be set to &#34;;&#34; to have the query form <code>key=value</code> pairs delimited by &#34;;&#34; instead of &#34;&#38;&#34; which is the default.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>There are some things that are not quite right:</p>

<ul>
<li>Using regexp variables like $1 directly as arguments to the URI accessor methods does not work too well with current perl implementations. I would argue that this is actually a bug in perl. The workaround is to quote them. Example:
<pre class="sh_perl">   /(...)/ || die;
   $u-&#62;query(&#34;$1&#34;);</pre>
</li>

<li>The escaping (percent encoding) of chars in the 128 .. 255 range passed to the URI constructor or when setting URI parts using the accessor methods depend on the state of the internal UTF8 flag (see utf8::is_utf8) of the string passed. If the UTF8 flag is set the UTF-8 encoded version of the character is percent encoded. If the UTF8 flag isn&#39;t set the Latin-1 version (byte) of the character is percent encoded. This basically exposes the internal encoding of Perl strings.</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PARSING_URIs_WITH_REGEXP"
>PARSING URIs WITH REGEXP <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>As an alternative to this module, the following (official) regular expression can be used to decode a URI:</p>

<pre class="sh_perl">  my($scheme, $authority, $path, $query, $fragment) =
  $uri =~ m|(?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?|;</pre>

<p>The <code>URI::Split</code> module provides the function uri_split() as a readable alternative.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~gaas/URI-1.60/URI/file.pm" class="podlinkpod"
>URI::file</a>, <a href="/~gaas/URI-1.60/URI/WithBase.pm" class="podlinkpod"
>URI::WithBase</a>, <a href="/~gaas/URI-1.60/URI/QueryParam.pm" class="podlinkpod"
>URI::QueryParam</a>, <a href="/~gaas/URI-1.60/URI/Escape.pm" class="podlinkpod"
>URI::Escape</a>, <a href="/~gaas/URI-1.60/URI/Split.pm" class="podlinkpod"
>URI::Split</a>, <a href="/~gaas/URI-1.60/URI/Heuristic.pm" class="podlinkpod"
>URI::Heuristic</a></p>

<p>RFC 2396: &#34;Uniform Resource Identifiers (URI): Generic Syntax&#34;, Berners-Lee, Fielding, Masinter, August 1998.</p>

<p><a href="http://www.iana.org/assignments/uri-schemes" class="podlinkurl"
>http://www.iana.org/assignments/uri-schemes</a></p>

<p><a href="http://www.iana.org/assignments/urn-namespaces" class="podlinkurl"
>http://www.iana.org/assignments/urn-namespaces</a></p>

<p><a href="http://www.w3.org/Addressing/" class="podlinkurl"
>http://www.w3.org/Addressing/</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 1995-2009 Gisle Aas.</p>

<p>Copyright 1995 Martijn Koster.</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS_/_ACKNOWLEDGMENTS"
>AUTHORS / ACKNOWLEDGMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is based on the <code>URI::URL</code> module, which in turn was (distantly) based on the <code>wwwurl.pl</code> code in the libwww-perl for perl4 developed by Roy Fielding, as part of the Arcadia project at the University of California, Irvine, with contributions from Brooks Cutter.</p>

<p><code>URI::URL</code> was developed by Gisle Aas, Tim Bunce, Roy Fielding and Martijn Koster with input from other people on the libwww-perl mailing list.</p>

<p><code>URI</code> and related subclasses was developed by Gisle Aas.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78111 Uploads, 24694 Distributions
105940 Modules, 9641 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Mon Apr 23 21:24:04 2012 GMT (0.104346036911011) @cpansearch1 -->
 </body>
</html>
