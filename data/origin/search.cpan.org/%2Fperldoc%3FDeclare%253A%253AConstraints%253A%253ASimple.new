<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Declare::Constraints::Simple - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Declare-Constraints-Simple",3]);
    _gaq.push(["_setCustomVar",5,"Release","Declare-Constraints-Simple-0.03",3]);
    _gaq.push(["_setCustomVar",3,"Module","Declare::Constraints::Simple",3]);
    _gaq.push(["_setCustomVar",1,"Author","PHAYLON",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Declare::Constraints::Simple">permalink</a></div>
  <a href="/~phaylon/">Robert 'phaylon' Sedlacek</a> &gt;
  <a href="/~phaylon/Declare-Constraints-Simple-0.03/">Declare-Constraints-Simple-0.03</a> &gt;
  Declare::Constraints::Simple
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/32ab988963e09ce6fbda10b86b030470?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/P/PH/PHAYLON/Declare-Constraints-Simple-0.03.tar.gz">Declare-Constraints-Simple-0.03.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Declare%3A%3AConstraints%3A%3ASimple;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~PHAYLON/Declare-Constraints-Simple-0.03/lib/Declare/Constraints/Simple.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Declare-Constraints-Simple">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.03 &nbsp;
<span class="noprint">
  <a href="/src/PHAYLON/Declare-Constraints-Simple-0.03/lib/Declare/Constraints/Simple.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#USAGE'>USAGE</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Constraint_Import'>Constraint Import</a>
    <li class='indexItem indexItem2'><a href='#Building_a_Profile'>Building a Profile</a>
    <li class='indexItem indexItem2'><a href='#Applying_a_Profile_to_a_Data_Structure'>Applying a Profile to a Data Structure</a>
    <li class='indexItem indexItem2'><a href='#Creating_your_own_Libraries'>Creating your own Libraries</a>
    <li class='indexItem indexItem2'><a href='#Scoping'>Scoping</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#REQUIRES'>REQUIRES</a>
  <li class='indexItem indexItem1'><a href='#TODO'>TODO</a>
  <li class='indexItem indexItem1'><a href='#INSTALLATION'>INSTALLATION</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#LICENSE_AND_COPYRIGHT'>LICENSE AND COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Declare::Constraints::Simple - Declarative Validation of Data Structures</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Declare::Constraints::Simple-All;

  my $profile = IsHashRef(
                    -keys   =&#62; HasLength,
                    -values =&#62; IsArrayRef( IsObject ));

  my $result1 = $profile-&#62;(undef);
  print $result1-&#62;message, &#34;\n&#34;;    # &#39;Not a HashRef&#39;

  my $result2 = $profile-&#62;({foo =&#62; [23]});

  print $result2-&#62;message, &#34;\n&#34;;    # &#39;Not an Object&#39;

  print $result2-&#62;path, &#34;\n&#34;;       
                    # &#39;IsHashRef[val foo].IsArrayRef[0].IsObject&#39;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The main purpose of this module is to provide an easy way to build a profile to validate a data structure. It does this by giving you a set of declarative keywords in the importing namespace.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="USAGE"
>USAGE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This is just a brief intro. For details read the documents mentioned in <a href="#SEE_ALSO" class="podlinkpod"
>&#34;SEE ALSO&#34;</a>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Constraint_Import"
>Constraint Import</a></h2>

<pre class="sh_perl">  use Declare::Constraints::Simple-All;</pre>

<p>The above command imports all constraint generators in the library into the current namespace. If you want only a selection, use <code>only</code>:</p>

<pre class="sh_perl">  use Declare::Constraints::Simple
      Only =&#62; qw(IsInt Matches And);</pre>

<p>You can find all constraints (and constraint-like generators, like operators. In fact, <code>And</code> above is an operator. They&#39;re both implemented equally, so the distinction is a merely philosophical one) documented in the <a href="/~phaylon/Declare-Constraints-Simple-0.03/lib/Declare/Constraints/Simple/Library.pm" class="podlinkpod"
>Declare::Constraints::Simple::Library</a> pod. In that document you will also find the exact parameters for their usage, so this here is just a brief Intro and not a coverage of all possibilities.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Building_a_Profile"
>Building a Profile</a></h2>

<p>You can use these constraints by building a tree that describes what data structure you expect. Every constraint can be used as sub-constraint, as parent, if it accepts other constraints, or stand-alone. If you&#39;d just say</p>

<pre class="sh_perl">  my $check = IsInt;
  print &#34;yes!\n&#34; if $check-&#62;(23);</pre>

<p>it will work too. This also allows predefining tree segments, and nesting them:</p>

<pre class="sh_perl">  my $id_to_objects = IsArrayRef(IsObject);</pre>

<p>Here <code>$id_to_objects</code> would give it&#39;s OK on an array reference containing a list of objects. But what if we now decide that we actually want a hashref containing two lists of objects? Behold:</p>

<pre class="sh_perl">  my $object_lists = 
    IsHashRef( HasAllKeys( qw(good bad) ),
               OnHashKeys( good =&#62; $id_to_objects,
                           bad  =&#62; $id_to_objects ));</pre>

<p>As you can see, constraints like <code>IsArrayRef</code> and <code>IsHashRef</code> allow you to apply constraints to their keys and values. With this, you can step down in the data structure.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Applying_a_Profile_to_a_Data_Structure"
>Applying a Profile to a Data Structure</a></h2>

<p>Constraints return just code references that can be applied to one value (and only one value) like this:</p>

<pre class="sh_perl">  my $result = $object_lists-&#62;($value);</pre>

<p>After this call <code>$result</code> contains a <a href="/~phaylon/Declare-Constraints-Simple-0.03/lib/Declare/Constraints/Simple/Result.pm" class="podlinkpod"
>Declare::Constraints::Simple::Result</a> object. The first think one wants to know is if the validation succeeded:</p>

<pre class="sh_perl">  if ($result-&#62;is_valid) { ... }</pre>

<p>This is pretty straight forward. To shorten things the result object also <a href="/perldoc?overload" class="podlinkpod"
>overload</a>s it&#39;s <code>bool</code>ean context. This means you can alternatively just say</p>

<pre class="sh_perl">  if ($result) { ... }</pre>

<p>However, if the result indicates a invalid data structure, we have a few options to find out what went wrong. There&#39;s a human parsable message in the <code>message</code> accessor. You can override these by forcing it to a message in a subtree with the <code>Message</code> declaration. The <code>stack</code> contains the name of the chain of constraints up to the point of failure.</p>

<p>You can use the <code>path</code> accessor for a joined string path representing the stack.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Creating_your_own_Libraries"
>Creating your own Libraries</a></h2>

<p>You can declare a package as a library with</p>

<pre class="sh_perl">  use Declare::Constraints::Simple-Library;</pre>

<p>which will install the base class and helper methods to define constraints. For a complete list read the documentation in <a href="/~phaylon/Declare-Constraints-Simple-0.03/lib/Declare/Constraints/Simple/Library/Base.pm" class="podlinkpod"
>Declare::Constraints::Simple::Library::Base</a>. You can use other libraries as base classes to include their constraints in your export possibilities. This means that with a package setup like</p>

<pre class="sh_perl">  package MyLibrary;
  use warnings;
  use strict;

  use Declare::Constraints::Simple-Library;
  use base &#39;Declare::Constraints::Simple::Library&#39;;

  constraint &#39;MyConstraint&#39;,
    sub { return _result(($_[0] &#62;= 12), &#39;Value too small&#39;) };

  1;</pre>

<p>you can do</p>

<pre class="sh_perl">  use MyLibrary-All;</pre>

<p>and have all constraints, from the default library and yours from above, installed into your requesting namespace. You can override a constraint just by redeclaring it in a subclass.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Scoping"
>Scoping</a></h2>

<p>Sometimes you want to validate parts of a data structure depending on another part of it. As of version 2.0 you can declare scopes and store results in them. Here is a complete example:</p>

<pre class="sh_perl">  my $constraint =
    Scope(&#39;foo&#39;,
      And(
        HasAllKeys( qw(cmd data) ),
        OnHashKeys( 
          cmd =&#62; Or( SetResult(&#39;foo&#39;, &#39;cmd_a&#39;,
                       IsEq(&#39;FOO_A&#39;)),
                     SetResult(&#39;foo&#39;, &#39;cmd_b&#39;,
                       IsEq(&#39;FOO_B&#39;)) ),
          data =&#62; Or( And( IsValid(&#39;foo&#39;, &#39;cmd_a&#39;),
                           IsArrayRef( IsInt )),
                      And( IsValid(&#39;foo&#39;, &#39;cmd_b&#39;),
                           IsRegex )) )));</pre>

<p>This profile would accept a hash references with the keys <code>cmd</code> and <code>data</code>. If <code>cmd</code> is set to <code>FOO_A</code>, then <code>data</code> has to be an array ref of integers. But if <code>cmd</code> is set to <code>FOO_B</code>, a regular expression is expected.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~phaylon/Declare-Constraints-Simple-0.03/lib/Declare/Constraints/Simple/Library.pm" class="podlinkpod"
>Declare::Constraints::Simple::Library</a>, <a href="/~phaylon/Declare-Constraints-Simple-0.03/lib/Declare/Constraints/Simple/Result.pm" class="podlinkpod"
>Declare::Constraints::Simple::Result</a>, <a href="/perldoc?Declare%3A%3AConstraints%3A%3ASimple%3A%3ABase" class="podlinkpod"
>Declare::Constraints::Simple::Base</a>, <a href="/perldoc?Module%3A%3AInstall" class="podlinkpod"
>Module::Install</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="REQUIRES"
>REQUIRES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?Carp%3A%3AClan" class="podlinkpod"
>Carp::Clan</a>, <a href="/perldoc?aliased" class="podlinkpod"
>aliased</a>, <a href="/perldoc?Class%3A%3AInspector" class="podlinkpod"
>Class::Inspector</a>, <a href="/perldoc?Scalar%3A%3AUtil" class="podlinkpod"
>Scalar::Util</a>, <a href="/perldoc?overload" class="podlinkpod"
>overload</a> and <a href="/perldoc?Test%3A%3AMore" class="podlinkpod"
>Test::More</a> (for build).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TODO"
>TODO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li>Examples.</li>

<li>A list of questions that might come up, together with their answers.</li>

<li>A <code>Custom</code> constraint that takes a code reference.</li>

<li>Create stack objects that stringify to the current form, but can hold more data.</li>

<li>Give the <code>Message</code> constraint the ability to get the generated constraint inserted in the message. A possibility would be to replace __Value__ and __Message__. It might also accept code references, which return strings.</li>

<li>Allow the <code>IsCodeRef</code> constraint to accept further constraints. One might like to check, for example, the refaddr of a closure.</li>

<li>A <code>Captures</code> constraint that takes a regex and can apply other constraints to the matches.</li>

<li>???</li>

<li>Profit.</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INSTALLATION"
>INSTALLATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  perl Makefile.PL
  make
  make test
  make install</pre>

<p>For details read <a href="/perldoc?Module%3A%3AInstall" class="podlinkpod"
>Module::Install</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Robert &#39;phaylon&#39; Sedlacek <code>&#60;phaylon@dunkelheit.at&#62;</code></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENSE_AND_COPYRIGHT"
>LICENSE AND COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is free software, you can redistribute it and/or modify it under the same terms as perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78183 Uploads, 24710 Distributions
106004 Modules, 9645 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Wed Apr 25 09:29:51 2012 GMT (0.0672388076782227) @cpansearch1 -->
 </body>
</html>
