<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Net::SMPP - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Net-SMPP",3]);
    _gaq.push(["_setCustomVar",5,"Release","Net-SMPP-1.19",3]);
    _gaq.push(["_setCustomVar",3,"Module","Net::SMPP",3]);
    _gaq.push(["_setCustomVar",1,"Author","SAMPO",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Net::SMPP">permalink</a></div>
  <a href="/~sampo/">Sampo Kellomaki</a> &gt;
  <a href="/~sampo/Net-SMPP-1.19/">Net-SMPP-1.19</a> &gt;
  Net::SMPP
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/059c6968c220fe1273ef8c31146d06a2?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/S/SA/SAMPO/Net-SMPP-1.19.tar.gz">Net-SMPP-1.19.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Net%3A%3ASMPP;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~SAMPO/Net-SMPP-1.19/SMPP.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?IO%3A%3ASocket">IO::Socket</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Net%3A%3ASMPP">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 11</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 5</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Net-SMPP">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.19 &nbsp;
<span class="noprint">
  <a href="/src/SAMPO/Net-SMPP-1.19/SMPP.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#CONSTRUCTORS'>CONSTRUCTORS</a>
  <li class='indexItem indexItem1'><a href='#REQUEST_PDU_METHODS'>REQUEST PDU METHODS</a>
  <li class='indexItem indexItem1'><a href='#RESPONSE_PDU_METHODS'>RESPONSE PDU METHODS</a>
  <li class='indexItem indexItem1'><a href='#MESSAGE_ENCODING_AND_LENGTH'>MESSAGE ENCODING AND LENGTH</a>
  <li class='indexItem indexItem1'><a href='#OTHER_METHODS'>OTHER METHODS</a>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <li class='indexItem indexItem1'><a href='#MULTIPART_MESSAGE'>MULTIPART MESSAGE</a>
  <li class='indexItem indexItem1'><a href='#MISC._NOTES'>MISC. NOTES</a>
  <li class='indexItem indexItem1'><a href='#ERRORS'>ERRORS</a>
  <li class='indexItem indexItem1'><a href='#EXPORT'>EXPORT</a>
  <li class='indexItem indexItem1'><a href='#TESTS_/_WHAT_IS_KNOWN_TO_WORK'>TESTS / WHAT IS KNOWN TO WORK</a>
  <li class='indexItem indexItem1'><a href='#TO_DO_AND_BUGS'>TO DO AND BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR_AND_COPYRIGHT'>AUTHOR AND COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#PLUG'>PLUG</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Net::SMPP - pure Perl implementation of SMPP 3.4 over TCP</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Net::SMPP;
  $smpp = Net::SMPP-&#62;new_transceiver($host, port=&#62;$port,
                        system_id =&#62; &#39;yourusername&#39;,
                        password  =&#62; &#39;secret&#39;,
                        ) or die;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Implements Short Message Peer to Peer protocol, which is frequently used to pass short messages between mobile operators implementing short message service (SMS). This is applicable to both european GSM and american CDMA/TDMA systems.</p>

<p>This documentation is not intended to be complete reference to SMPP protocol - use the SMPP specification documents (see references section) to obtain exact operation and parameter names and their meaning. You may also need to obtain site specific documentation about the remote end and any protocol extensions that it supports or demands before you start a project. This document follows the convention of spelling parameter names exactly as they appear in the SMPP v3.4 documentation. SMPP v4.0 support also follows the respective documentation, except where v4.0 usage is in conflict with v3.4 usage, in which case the latter prevails (in practise I believe no such conflicts remain in the madule at present). For a complete list of error code and optional parameter enumerations, the reader is encouraged to consult the source code or SMPP speciofications.</p>

<p>Despite its name, SMPP protocol defines a client (ESME) and a server (often called SMSC in the mobile operator world). Client usually initiates the TCP connection and does <i>bind</i> to log in. After binding, a series of request response pairs, called PDUs (protocol data units) is exchanged. Request can be initiated by either end (hence &#34;peer-to-peer&#34;?) and the other end reponds. Requests are numbered with a sequence number and each response has corresponding sequence number. This allows several requests to be pending at the same time. Conceptually this is similar to IMAP or LDAP message IDs. Usually the $smpp object maintains the sequence numbers by itself and the programmer need not concern himself with their exact values, but should a need to override them arise, the seq argument can be supplied to any request or response method.</p>

<p>Normally this module operates in synchronous mode, meaning that a method that sends a request will also block until it gets the corresponding response. Internal command used for waiting for response is</p>

<pre class="sh_perl">    $resp_pdu = $smpp-&#62;wait_pdu($cmd_id, $seq);</pre>

<p>If, while waiting for a particular response, other PDUs are received they are either handled by handlers (set up by constructor) or discarded. Both command code and sequence number must match. Typically a handler for enquire command is set up while all other commands are silently dropped. This practise may not be very suitable for transceiver mode of operation and certainly is not suitable for implementing a SMSC.</p>

<p>Synchronous operation makes it impossible to interleave SMPP operations, thus it should be regarded as a simplified programming model for simple tasks. Anyone requiring more advanced control has to use the asynchronous mode and take up the burden of understanding and implementing more of the message flow logic in his own application.</p>

<p>In synchronous mode request PDU methods return a Net::SMPP::PDU object representing the response, if all went well protocolwise, or undef if there was a protocol level error. If undef was returned, the reason for the failure can be extracted from ${*$smpp}{smpperror} and ${*$smpp}{smpperrorcode} (actual codes are undocumented at the moment, but are guaranteed not to change) variables and the global variable $!. These variables are meaningless if anything else than undef was returned. The response itself may be an error response if there was an application level error in the remote end. In this case the application level error can be determined from $pdu-&#62;{status} field. Some responses also have optional parameters that further clarify the failure, see documentation for each operation.</p>

<p>If a protocol level error happens, probably the only safe action is to destroy the connection object (e.g. undef $smpp). If an application level error happens, then depending on how the remote end has been implemented it may be possible to continue operation.</p>

<p>Module can also be used asynchronously by specifying async=&#62;1 to the constructor. In this mode command methods return immediately with the sequence number of the PDU and user should poll for any responses using</p>

<pre class="sh_perl">    $pdu = $smpp-&#62;wait_pdu($cmd_id, $seq);</pre>

<p>Typically wait_pdu() is used to wait for a response, but if wait_pdu() is used to wait for a command, the caller should generate appropriate response.</p>

<p>If caller wants to receive next available PDU, he can call</p>

<pre class="sh_perl">    $pdu = $smpp-&#62;read_pdu();</pre>

<p>which will block until a PDU is received from the stream. The caller would then have to check if the PDU is a response or a request and take appropriate action. The smsc.pl example program supplied with this distribution demonstrates a possible framework for handling both requests and responses.</p>

<p>If the caller does not want to block on wait_pdu() or read_pdu(), he must use select() to determine if the socket is readable (*** what if SSL layer gets inserted?). Even if the socket selects for reading, there may not be enough data to complete the PDU, so the call may still block. Currently there is no reliable mechanism for avoiding this. If this bothers you, you may consider allocating a separate process for each connection so that blocking does not matter, or you may set up some sort of timeout (see perlipc(1) man page) or you may rewrite this module and contribute patches.</p>

<p>Response methods always return the sequence number, irrespective of synchronous or asynchronous mode, or undef if an error happened.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTORS"
>CONSTRUCTORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='new'></a><a name="new()"
>new()</a></dt>

<dd>
<p>Do not call. Has special internal meaning during accepting connections from listening socket.</p>

<dt><a name='new_connect'></a><a name="new_connect()"
>new_connect()</a></dt>

<dd>
<p>Create a new SMPP client object and open conncetion to SMSC host</p>

<pre class="sh_perl">    $smpp = Net::SMPP-&#62;new_connect($host,
       system_id =&#62; &#39;username&#39;,   # usually needed (default &#39;&#39;)
       password =&#62; &#39;secret&#39;,      # usually needed (default &#39;&#39;)
       system_type =&#62; &#39;&#39;,         # default ok, often not needed
       interface_version =&#62; 0x34, # default ok, almost never needed
       addr_ton =&#62; 0x00,          # default ok, type of number unknwn
       addr_npi =&#62; 0x00,          # default ok, number plan indicator
       address_range =&#62; &#39;&#39;,       # default ok, regex matching nmbrs
       ) or die;</pre>

<p>Usually this constructor is not called directly. Use new_transceiver(), new_transmitter(), and new_receiver() instead.</p>

<dt><a name='new_transceiver'></a><a name="new_transceiver()"
>new_transceiver()</a></dt>

<dd>
<dt><a name='new_transmitter'></a><a name="new_transmitter()"
>new_transmitter()</a></dt>

<dd>
<dt><a name='new_receiver'></a><a name="new_receiver()"
>new_receiver()</a></dt>

<dd>
<p>These constructors first construct the object using new_connect() and then bind using given type of bind request. See bind family of methods, below. These constructors are usually used to implement ESME type functionality.</p>

<dt><a name='new_listen'></a><a name="new_listen(&#39;localhost&#39;,_port=&#62;2251)"
>new_listen(&#39;localhost&#39;, port=&#62;2251)</a></dt>

<dd>
<p>Create new SMPP server object and open socket to listen on given port. This constructor is usually used to implement a SMSC.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="REQUEST_PDU_METHODS"
>REQUEST PDU METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Each request PDU method constructs a PDU from list of arguments supplied and sends it to the wire.</p>

<p>If async mode has been enabled (by specifying &#34;async=&#62;1&#34; in the constructor or as an argument to the method), the methods return sequence number of the PDU just sent. This number can be later used to match up the response, like this:</p>

<pre class="sh_perl">    $seq = $smpp-&#62;query_sm(message_id =&#62; $msg_id) or die;
    ...
    $resp_pdu = $smpp-&#62;wait_pdu(Net::SMPP::CMD_query_sm_resp, $seq)
       or die;
    die &#34;Response indicated error: &#34; . $resp_pdu-&#62;explain_status()
       if $resp_pdu-&#62;status;</pre>

<p>If async mode is not enabled (i.e. &#34;async=&#62;1&#34; was not specified neither in constructor nor the method), the method will wait for the corresponding response and return Net::SMPP::PDU object representing that response. The application should check the outcome of the operation from the status field of the response PDU, like this:</p>

<pre class="sh_perl">    $resp_pdu = $smpp-&#62;query_sm(message_id =&#62; $msg_id) or die;
    die &#34;Response indicated error: &#34; . $resp_pdu-&#62;explain_status()
       if $resp_pdu-&#62;status;</pre>

<p>All request PDU methods optionally take &#34;seq=&#62;123&#34; argument that allows explicit specification of the sequence number. The default is to increment internally stored sequence number by one and use that.</p>

<p>Most PDUs have mandatory parameters and optional parameters. If mandatory parameter is not supplied, it is inherited from the smpp object. This means that the parameter can either be set as an argument to the constructor or it is inherited from built-in defaults in the innards of Net::SMPP (see <code>Default</code> table from line 217 onwards). Some mandatory parameters can not be defaulted - if they are missing a die results. In descriptions below, defaultable mandatory parameters are show with the default value and comment indicating that its defaultable.</p>

<p>Optional parameters can be supplied to all PDUs (although the SMPP spec does not allow optional parameters for some PDUs, the module does not check for this) by listing them in the order that they should be appended to the end of the PDU. Optional parameters can not be defaulted - if the parameter is not supplied, it simply is not included in the PDU. Optional parameters are not supported by previous versions of the SMPP protocol (up to and including 3.3). Applications wishing to be downwards compatible should not make use of optional parameters.</p>

<p>Standard optional parameters can be supplied by their name (see <code>param_tab</code> in the Net::SMPP source code, around line 345, for list of known optional parameters), but the programmer still needs to supply the value of the parameter in the expected format (one often has to use pack to construct the value). Consult SMPP specifications for the correct format.</p>

<p>It is possible to supply arbitrary unsupported optional parameters by simply supplying the parameter tag as a decimal number. Consult your site dependent documentation to figure out the correct tags and to determine the correct format for the value.</p>

<p>When optional parameters are returned in response PDUs, they are decoded and made available under both numeric tag and symbolic tag, if known. For example the delivery_failure_reson of data_sm_resp can be accessed both as $resp-&#62;{delivery_failure_reson} and $resp-&#62;{1061}. The application needs to interpret the formatting of optional parameters itself. The module always assumes they are strings, while often they actually are interpretted as integers. Consult SMPP specifications and site dependent documentation for correct format and use unpack to obtain the numbers.</p>

<p>If an unknown nonnumeric parameter tags are supplied a warning is issued and parameter is skipped.</p>

<p>In general the Net::SMPP module does not enforce SMPP specifications. This means that it will happily accept too long or too short values for manatory or optional parameters. Also the internal formatting of the parameter values is not checked in any way. The programmer should consult the SMPP specifications to learn the correct length and format of each mandatory and optional parameter.</p>

<p>Similarily, if the remote end returns incorrect PDUs and Net::SMPP is able to parse them (usually because length fields match), then Net::SMPP will not perform any further checks. This means that some fields may be longer than allowed for in the specifications.</p>

<p>I opted to leave the checks out at this stage because I needed a flexible module that allowed me to explore even nonconformant SMSC implementations. If the lack of sanity checks bothers you, formulate such checks and submit me a patch. Ideally one could at construction time supply an argument like &#34;strict=&#62;1&#34; to enable the sanity checks.</p>

<dl>
<dt><a name='alert_notification'></a><a name="alert_notification()_(4.12.1,_p.108)"
>alert_notification() (4.12.1, p.108)</a></dt>

<dd>
<p>Sent by SMSC to ESME when particular mobile subscriber has become available. source_addr specifies which mobile subscriber. esme_addr specifies which esme the message is destined to. Alert notifications can arise if delivery pending flag had been set for the subscriber from previous data_sm operation.</p>

<p>There is no response PDU.</p>

<pre class="sh_perl">    $smpp-&#62;alert_notification(
                              source_addr_ton =&#62; 0x00, # default ok
                              source_addr_npi =&#62; 0x00, # default ok
                              source_addr =&#62; &#39;&#39;,       # default ok
                              esme_addr_ton =&#62; 0x00,   # default ok
                              esme_addr_npi =&#62; 0x00,   # default ok
                              esme_addr =&#62; $esme_addr, # mandatory
                              ) or die;</pre>

<dt><a name='bind_transceiver'></a><a name="bind_transceiver()_(4.1.5,_p.51)"
>bind_transceiver() (4.1.5, p.51)</a></dt>

<dd>
<dt><a name='bind_transmitter'></a><a name="bind_transmitter()_(4.1.1,_p.46)"
>bind_transmitter() (4.1.1, p.46)</a></dt>

<dd>
<dt><a name='bind_receiver'></a><a name="bind_receiver()_(4.1.3,_p.48)"
>bind_receiver() (4.1.3, p.48)</a></dt>

<dd>
<p>Bind family of methods is used to authenticate the client (ESME) to the server (SMSC). Usually bind happens as part of corresponding constructor <code>new_transceiver()</code>, <code>new_transmitter()</code>, or <code>new_receiver()</code> so these methods are rarely called directly. These methods take a plethora of options, which are largely the same as the options taken by the constructors and can safely be defaulted.</p>

<pre class="sh_perl">    $smpp-&#62;bind_transceiver(
       system_id =&#62; &#39;username&#39;,   # usually needed (default &#39;&#39;)
       password =&#62; &#39;secret&#39;,      # usually needed (default &#39;&#39;)
       system_type =&#62; &#39;&#39;,         # default ok, often not needed
       interface_version =&#62; 0x34, # default ok, almost never needed
       addr_ton =&#62; 0x00,          # default ok, type of number unkwn
       addr_npi =&#62; 0x00,          # default ok, number plan indic.
       address_range =&#62; &#39;&#39;,       # default ok, regex matching tels
       ) or die;</pre>

<p>Typically it would be called like:</p>

<pre class="sh_perl">    $resp_pdu = $smpp-&#62;bind_transceiver(system_id =&#62; &#39;username&#39;,
                                        password =&#62; &#39;secret&#39;) or die;
    die &#34;Response indicated error: &#34; . $resp_pdu-&#62;explain_status()
       if $resp_pdu-&#62;status;</pre>

<p>or to inform SMSC that you can handle all Spanish numbers:</p>

<pre class="sh_perl">    $resp_pdu = $smpp-&#62;bind_transceiver(system_id =&#62; &#39;username&#39;,
                                        password =&#62; &#39;secret&#39;,
                                        address_range =&#62; &#39;^\+?34&#39;)
       or die;
    die &#34;Response indicated error: &#34; . $resp_pdu-&#62;explain_status()
       if $resp_pdu-&#62;status;</pre>

<dt><a name='cancel_sm'></a><a name="cancel_sm()_(4.9.1,_p.98)"
>cancel_sm() (4.9.1, p.98)</a></dt>

<dd>
<p>Issued by ESME to cancel one or more short messages. Two principal modes of operation are:</p>

<p>1. if message_id is supplied, other fields can be left at defaults. This mode deletes just one message.</p>

<p>2. if message_id is not supplied (or is empty string), then the other fields must be supplied and all messages matching the criteria reflected by the other fields are deleted.</p>

<pre class="sh_perl">    $smpp-&#62;cancel_sm(
                     service_type =&#62; &#39;&#39;,      # default ok
                     message_id =&#62; &#39;&#39;, # default ok, but often given
                     source_addr_ton =&#62; 0x00, # default ok
                     source_addr_npi =&#62; 0x00, # default ok
                     source_addr =&#62; &#39;&#39;,       # default ok
                     dest_addr_ton =&#62; 0x00,   # default ok
                     dest_addr_npi =&#62; 0x00,   # default ok
                     destination_addr =&#62; &#39;&#39;,  # default ok
                   ) or die;</pre>

<p>For example</p>

<pre class="sh_perl">   $resp_pdu = $smpp-&#62;submit_sm(destination_addr =&#62; &#39;+447799658372&#39;,
                                 short_message =&#62; &#39;test message&#39;)
      or die;
   die &#34;Response indicated error: &#34; . $resp_pdu-&#62;explain_status()
       if $resp_pdu-&#62;status;
   $msg_id = $resp_pdu-&#62;{message_id};

   $resp_pdu = $smpp-&#62;query_sm(message_id =&#62; $msg_id) or die;
   die &#34;Response indicated error: &#34; . $resp_pdu-&#62;explain_status()
       if $resp_pdu-&#62;status;
   print &#34;Message state is $resp_pdu-&#62;{message_state}\n&#34;;

   $resp_pdu = $smpp-&#62;replace_sm(message_id =&#62; $msg_id,
                                 short_message =&#62; &#39;another test&#39;)
      or die;
   die &#34;Response indicated error: &#34; . $resp_pdu-&#62;explain_status()
       if $resp_pdu-&#62;status;

   $resp_pdu = $smpp-&#62;cancel_sm(message_id =&#62; $msg_id) or die;
   die &#34;Response indicated error: &#34; . $resp_pdu-&#62;explain_status()
       if $resp_pdu-&#62;status;</pre>

<dt><a name='data_sm'></a><a name="data_sm()_(4.7.1,_p.87)"
>data_sm() (4.7.1, p.87)</a></dt>

<dd>
<p>Newer alternative to submit_sm and deliver_sm. In addition to that data_sm can be used to pass special messages such as SMSC Delivery Receipt, SME Delivery Acknowledgement, SME Manual/User Acknowledgement, Intermediate notification.</p>

<p>Unlike submit_sm and deliver_sm, the short_message parameter is not mandatory. Never-the-less, the optional parameter message_payload must be supplied for things to work correctly.</p>

<pre class="sh_perl">    $smpp-&#62;data_sm(
                   service_type =&#62; &#39;&#39;,      # default ok
                   source_addr_ton =&#62; 0x00, # default ok
                   source_addr_npi =&#62; 0x00, # default ok
                   source_addr =&#62; &#39;&#39;,       # default ok
                   dest_addr_ton =&#62; 0x00,   # default ok
                   dest_addr_npi =&#62; 0x00,   # default ok
                   destination_addr =&#62; $tel,  # mandatory
                   esm_class =&#62; 0x00,       # default ok
                   registered_delivery =&#62; 0x00, #default ok
                   data_coding =&#62; 0x00,     # default ok
                   message_payload =&#62; &#39;test msg&#39;, # opt, but needed
                   ) or die;</pre>

<p>For example</p>

<pre class="sh_perl">   $resp_pdu = $smpp-&#62;data_sm(destination_addr =&#62; &#39;+447799658372&#39;,
                              message_payload =&#62; &#39;test message&#39;)
      or die;
   die &#34;Response indicated error: &#34; . $resp_pdu-&#62;explain_status()
       if $resp_pdu-&#62;status;</pre>

<dt><a name='deliver_sm'></a><a name="deliver_sm()_(4.6.1,_p.79)"
>deliver_sm() (4.6.1, p.79)</a></dt>

<dd>
<p>Issued by SMSC to send message to an ESME. Further more SMSC can transfer following special messages: 1. SMSC delivery receipt, 2. SME delivery acknowledgement, 3. SME Manual/User Acknowledgement, 4. Intermediate notification. These messages are sent in response to SMS message whose registered_delivery parameter requested them.</p>

<p>If message data is longer than 254 bytes, the optional parameter <code>message_payload</code> should be used to store the message and <code>short_message</code> should be set to empty string. N.B. although protocol has mechanism for sending fairly large messages, the underlying mobile network usually does not support very large messages. GSM supports only up to 160 characters, other systems 128 or even just 100 characters.</p>

<pre class="sh_perl">    $smpp-&#62;deliver_sm(
                   service_type =&#62; &#39;&#39;,      # default ok
                   source_addr_ton =&#62; 0x00, # default ok
                   source_addr_npi =&#62; 0x00, # default ok
                   source_addr =&#62; &#39;&#39;,       # default ok
                   dest_addr_ton =&#62; 0x00,   # default ok
                   dest_addr_npi =&#62; 0x00,   # default ok
                   destination_addr =&#62; $t,  # mandatory
                   esm_class =&#62; 0x00,       # default ok
                   protocol_id =&#62; 0x00,     # default ok on CDMA,TDMA
                                            #   on GSM value needed
                   priority_flag =&#62; 0x00,   # default ok
                   schedule_delivery_time =&#62; &#39;&#39;, # default ok
                   validity_period =&#62; &#39;&#39;,        # default ok
                   registered_delivery =&#62; 0x00,  # default ok
                   replace_if_present_flag =&#62; 0x00, # default ok
                   data_coding =&#62; 0x00,     # default ok
                   sm_default_msg_id =&#62; 0x00,    # default ok
                   short_message =&#62; &#39;&#39;,     # default ok, but
                                            #   usually supplied
                   ) or die;</pre>

<p>For example</p>

<pre class="sh_perl">   $resp_pdu = $smpp-&#62;deliver_sm(destination_addr =&#62; &#39;+447799658372&#39;,
                                 short_message =&#62; &#39;test message&#39;)
      or die;
   die &#34;Response indicated error: &#34; . $resp_pdu-&#62;explain_status()
       if $resp_pdu-&#62;status;</pre>

<dt><a name='enquire_link'></a><a name="enquire_link()_(4.11.1,_p.106)"
>enquire_link() (4.11.1, p.106)</a></dt>

<dd>
<p>Used by either ESME or SMSC to &#34;ping&#34; the other side. Takes no parameters.</p>

<pre class="sh_perl">    $smpp-&#62;enquire_link() or die;</pre>

<dt><a name='outbind'></a><a name="outbind()_(4.1.7,_p.54,_2.2.1,_p.16)"
>outbind() (4.1.7, p.54, 2.2.1, p.16)</a></dt>

<dd>
<p>Used by SMSC to signal ESME to originate a <code>bind_receiver</code> request to the SMSC. <code>system_id</code> and <code>password</code> authenticate the SMSC to the ESME. The <code>outbind</code> is used when SMSC initiates the TCP session and needs to trigger ESME to perform a <code>bind_receiver</code>. It is not needed if the ESME initiates the TCP connection (e.g. sec 2.7.1, p.27).</p>

<p>There is not response PDU for <code>outbind</code>, instead the ESME is expected to issue <code>bind_receiver</code>.</p>

<pre class="sh_perl">    $smpp-&#62;outbind(
                   system_id =&#62; &#39;&#39;,  # default ok, but usually given
                   password =&#62; &#39;&#39;,   # default ok, but usually given
                   ) or die;</pre>

<dt><a name='query_sm'></a><a name="query_sm()_(4.8.1,_p.95)"
>query_sm() (4.8.1, p.95)</a></dt>

<dd>
<p>Used by ESME to query status of a submitted short message. Both message_id and source_addr must match (if source_addr was defaulted to NULL during submit, it must be NULL here, too). See example near <code>cancel_sm</code>.</p>

<pre class="sh_perl">    $smpp-&#62;query_sm(
                   message_id =&#62; $msg_id,   # mandatory
                   source_addr_ton =&#62; 0x00, # default ok
                   source_addr_npi =&#62; 0x00, # default ok
                   source_addr =&#62; &#39;&#39;,       # default ok
                   ) or die;</pre>

<dt><a name='replace_sm'></a><a name="replace_sm()_(4.10.1,_p.102)"
>replace_sm() (4.10.1, p.102)</a></dt>

<dd>
<p>Used by ESME to replace a previously submitted short message, provided it is still pending delivery. Both message_id and source_addr must match (if source_addr was defaulted to NULL during submit, it must be NULL here, too). See example near <code>cancel_sm</code>.</p>

<pre class="sh_perl">    $smpp-&#62;replace_sm(
                   message_id =&#62; $msg_id,   # mandatory
                   source_addr_ton =&#62; 0x00, # default ok
                   source_addr_npi =&#62; 0x00, # default ok
                   source_addr =&#62; &#39;&#39;,       # default ok
                   schedule_delivery_time =&#62; &#39;&#39;, # default ok
                   validity_period =&#62; &#39;&#39;,        # default ok
                   registered_delivery =&#62; 0x00,  # default ok
                   sm_default_msg_id =&#62; 0x00,    # default ok
                   short_message =&#62; &#39;&#39;,     # default ok, but
                                            #   usually supplied                   
                   ) or die;</pre>

<dt><a name='submit_sm'></a><a name="submit_sm()_(4.4.1,_p.59)"
>submit_sm() (4.4.1, p.59)</a></dt>

<dd>
<p>Used by ESME to submit short message to the SMSC for onward transmission to the specified short message entity (SME). The submit_sm does not support the transaction message mode.</p>

<p>If message data is longer than 254 bytes, the optional parameter <code>message_payload</code> should be used to store the message and <code>short_message</code> should be set to empty string. N.B. although protocol has mechanism for sending fairly large messages, the underlying mobile network usually does not support very large messages. GSM supports only up to 160 characters.</p>

<pre class="sh_perl">    $smpp-&#62;submit_sm(
                   service_type =&#62; &#39;&#39;,      # default ok
                   source_addr_ton =&#62; 0x00, # default ok
                   source_addr_npi =&#62; 0x00, # default ok
                   source_addr =&#62; &#39;&#39;,       # default ok
                   dest_addr_ton =&#62; 0x00,   # default ok
                   dest_addr_npi =&#62; 0x00,   # default ok
                   destination_addr =&#62; $t,  # mandatory
                   esm_class =&#62; 0x00,       # default ok
                   protocol_id =&#62; 0x00,     # default ok on CDMA,TDMA
                                            #   on GSM value needed
                   priority_flag =&#62; 0x00,   # default ok
                   schedule_delivery_time =&#62; &#39;&#39;, # default ok
                   validity_period =&#62; &#39;&#39;,        # default ok
                   registered_delivery =&#62; 0x00,  # default ok
                   replace_if_present_flag =&#62; 0x00, # default ok
                   data_coding =&#62; 0x00,     # default ok
                   sm_default_msg_id =&#62; 0x00,    # default ok
                   short_message =&#62; &#39;&#39;,     # default ok, but
                                            #   usually supplied
                   ) or die;</pre>

<p>For example</p>

<pre class="sh_perl">   $resp_pdu = $smpp-&#62;submit_sm(destination_addr =&#62; &#39;+447799658372&#39;,
                                 short_message =&#62; &#39;test message&#39;)
      or die;
   die &#34;Response indicated error: &#34; . $resp_pdu-&#62;explain_status()
       if $resp_pdu-&#62;status;</pre>

<p>Or</p>

<pre class="sh_perl">   $resp_pdu = $smpp-&#62;submit_sm(destination_addr =&#62; &#39;+447799658372&#39;,
                                short_message =&#62; &#39;&#39;,
                                message_payload =&#62; &#39;a&#39;x500) or die;
   die &#34;Response indicated error: &#34; . $resp_pdu-&#62;explain_status()
       if $resp_pdu-&#62;status;</pre>

<dt><a name='submit_multi'></a><a name="submit_multi()_(4.5.1,_p.69)"
>submit_multi() (4.5.1, p.69)</a></dt>

<dd>
<p>Used by ESME to submit short message to the SMSC for onward transmission to the specified short message entities (SMEs). This command is especially destined for multiple recepients.</p>

<p>If message data is longer than 254 bytes, the optional parameter <code>message_payload</code> should be used to store the message and <code>short_message</code> should be set to empty string. N.B. although protocol has mechanism for sending fairly large messages, the underlying mobile network usually does not support very large messages. GSM supports only up to 160 characters.</p>

<pre class="sh_perl">    $smpp-&#62;submit_multi(
                   service_type =&#62; &#39;&#39;,      # default ok
                   source_addr_ton =&#62; 0x00, # default ok
                   source_addr_npi =&#62; 0x00, # default ok
                   source_addr =&#62; &#39;&#39;,       # default ok
                   dest_flag =&#62;             # default ok
                        [ MULTIDESTFLAG_SME_Address,
                          MULTIDESTFLAG_dist_list, ... ],
                   dest_addr_ton =&#62;         # default ok
                        [ 0x00, 0x00, ... ],
                   dest_addr_npi =&#62;         # default ok
                        [ 0x00, 0x00, ... ],
                   destination_addr =&#62;      # mandatory
                        [ $t1, $t2, ... ],
                   esm_class =&#62; 0x00,       # default ok
                   protocol_id =&#62; 0x00,     # default ok on CDMA,TDMA
                                            #   on GSM value needed
                   priority_flag =&#62; 0x00,   # default ok
                   schedule_delivery_time =&#62; &#39;&#39;, # default ok
                   validity_period =&#62; &#39;&#39;,        # default ok
                   registered_delivery =&#62; 0x00,  # default ok
                   replace_if_present_flag =&#62; 0x00, # default ok
                   data_coding =&#62; 0x00,     # default ok
                   sm_default_msg_id =&#62; 0x00,    # default ok
                   short_message =&#62; &#39;&#39;,     # default ok, but
                                            #   usually supplied
                   ) or die;</pre>

<p>For example</p>

<pre class="sh_perl">   $resp_pdu = $smpp-&#62;submit_multi(destination_addr =&#62;
                                   [ &#39;+447799658372&#39;, &#39;+447799658373&#39; ],
                                   short_message =&#62; &#39;test message&#39;)
      or die;
   die &#34;Response indicated error: &#34; . $resp_pdu-&#62;explain_status()
       if $resp_pdu-&#62;status;</pre>

<p>The destinations are specified as an array reference. dest_flag, dest_addr_ton, and dest_addr_npi must have same cardinality as destination_addr if they are present. Default for dest_flag is MULTIDESTFLAG_SME_Address, i.e. normal phone number.</p>

<dt><a name='unbind'></a><a name="unbind()_(4.2,_p.56)"
>unbind() (4.2, p.56)</a></dt>

<dd>
<p>Used by ESME to unregisters ESME from SMSC. Does not take any parameters.</p>

<pre class="sh_perl">    $smpp-&#62;unbind() or die;</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="RESPONSE_PDU_METHODS"
>RESPONSE PDU METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Response PDU methods are used to indicate outcome of requested commands. Typically these methods would be used by someone implementing a server (SMSC).</p>

<p>Response PDUs do not have separate asynchronous behaviour pattern.</p>

<dl>
<dt><a name='bind_receiver_resp'></a><a name="bind_receiver_resp()"
>bind_receiver_resp()</a></dt>

<dd>
<dt><a name='bind_transmitter_resp'></a><a name="bind_transmitter_resp()"
>bind_transmitter_resp()</a></dt>

<dd>
<dt><a name='bind_transceiver_resp'></a><a name="bind_transceiver_resp()"
>bind_transceiver_resp()</a></dt>

<dd>
<pre class="sh_perl">    $smpp-&#62;bind_transceiver_resp(
                                 system_id =&#62; &#39;&#39;, # default ok
                                 ) or die;</pre>

<dt><a name='cancel_sm_resp'></a><a name="cancel_sm_resp()_(4.9.2,_p.100)"
>cancel_sm_resp() (4.9.2, p.100)</a></dt>

<dd>
<pre class="sh_perl">    $smpp-&#62;cancel_sm_resp() or die;</pre>

<dt><a name='data_sm_resp'></a><a name="data_sm_resp()"
>data_sm_resp()</a></dt>

<dd>
<pre class="sh_perl">    $smpp-&#62;data_sm_resp(message_id =&#62; $msg_id) or die;</pre>

<dt><a name='deliver_sm_resp'></a><a name="deliver_sm_resp()"
>deliver_sm_resp()</a></dt>

<dd>
<pre class="sh_perl">    $smpp-&#62;deliver_sm_resp(message_id =&#62; $msg_id) or die;</pre>

<dt><a name='enquire_link_resp'></a><a name="enquire_link_resp()_(4.11.2,_p.106)"
>enquire_link_resp() (4.11.2, p.106)</a></dt>

<dd>
<pre class="sh_perl">    $smpp-&#62;enquire_link_resp() or die;</pre>

<dt><a name='generic_nack'></a><a name="generic_nack()_(4.3.1,_p.57)"
>generic_nack() (4.3.1, p.57)</a></dt>

<dd>
<pre class="sh_perl">    $smpp-&#62;generic_nack() or die;</pre>

<dt><a name='query_sm_resp'></a><a name="query_sm_resp()_(4.6.2,_p.96)"
>query_sm_resp() (4.6.2, p.96)</a></dt>

<dd>
<pre class="sh_perl">    $smpp-&#62;query_sm_resp(
                         message_id =&#62; $msg_id,   # mandatory
                         final_date =&#62; &#39;&#39;,        # default ok
                         message_state =&#62; $state, # mandatory
                         error_code =&#62; 0x00,      # default ok
                   ) or die;</pre>

<dt><a name='replace_sm_resp'></a><a name="replace_sm_resp()_(4.10.2,_p.104)"
>replace_sm_resp() (4.10.2, p.104)</a></dt>

<dd>
<pre class="sh_perl">    $smpp-&#62;replace_sm_resp() or die;</pre>

<dt><a name='submit_sm_resp'></a><a name="submit_sm_resp()_(4.4.2,_p.67)"
>submit_sm_resp() (4.4.2, p.67)</a></dt>

<dd>
<pre class="sh_perl">    $smpp-&#62;submit_sm_resp(message_id =&#62; $msg_id) or die;</pre>

<dt><a name='submit_multi_resp'></a><a name="submit_multi_resp()_(4.5.2,_p.76)"
>submit_multi_resp() (4.5.2, p.76)</a></dt>

<dd>
<pre class="sh_perl">    $smpp-&#62;submit_multi_resp(message_id =&#62; $msg_id
                             dest_addr_ton =&#62; [], # default ok
                             dest_addr_npi =&#62; [], # default ok
                             destination_addr =&#62; [],  # mandatory
                             error_status_code =&#62; [], # mandatory
                             ) or die;</pre>

<dt><a name='unbind_resp'></a><a name="unbind_resp()_(4.2.2,_p.56)"
>unbind_resp() (4.2.2, p.56)</a></dt>

<dd>
<pre class="sh_perl">    $smpp-&#62;unbind_resp() or die;</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MESSAGE_ENCODING_AND_LENGTH"
>MESSAGE ENCODING AND LENGTH <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<blockquote>
<p>Many SMS technologies have inherent message length limits. For example GSM specifies length to be 140 bytes. Using 7 bit encoding, this holds the 160 characters that people are familiar with. Net::SMPP does not enforce this limit in any way, i.e. if you create too long message, then it is your problem. You should at application layer make sure you stay within limits.</p>

<p>Net::SMPP also does not automatically perform the encoding, not even if you set data_encoding parameter. Application layer is responsible for performing the encoding and setting the data_encoding parameter accordingly.</p>

<p>To assist in performing the usual 7 bit encoding, following functions are provided (but you have to call them explicitly):</p>

<dl>
<dt><a name='pack_7bit'></a><a name="pack_7bit()"
>pack_7bit()</a></dt>

<dd>
<dt><a name='unpack_7bit'></a><a name="unpack_7bit()"
>unpack_7bit()</a></dt>

<dd>
<p>Example</p>

<pre class="sh_perl">   $resp_pdu = $smpp-&#62;submit_sm(destination_addr =&#62; &#39;+447799658372&#39;,
                                data_encoding =&#62; 0x00,
                                short_message =&#62; pack_7bit(&#39;test message&#39;))
      or die;</pre>
</dd>
</dl>

<p>The rationale for leaving encoding and length issues at application layer is two fold: 1. often the data is just copied through to another message or protocol, thus we do not really care how it is encoded or how long it is. Presumably it was valid at origin. 2. This policy avoids underlying technology dependencies in the module. Often local deployments have all the manner of hacks that make this area very difficult to chart. So I leave it to local application developer to find out what is locally needed.</p>
</blockquote>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="OTHER_METHODS"
>OTHER METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='read_pdu'></a><a name="read_pdu()"
>read_pdu()</a></dt>

<dd>
<p>Reads a PDU from stream and analyzes it into Net::SMPP::PDU object (if PDU is of known type). Blocks until PDU is available. If you do not want it to block, do select on the socket to make sure some data is available (unfortunately some data may be available, but not enough, so it can still block).</p>

<p>read_pdu() is very useful for implementing main loop of SMSC where unknown PDUs must be received in random order and processed.</p>

<pre class="sh_perl">    $pdu = $smpp-&#62;read_pdu() or die;</pre>

<dt><a name='wait_pdu'></a><a name="wait_pdu()"
>wait_pdu()</a></dt>

<dd>
<p>Reads PDUs from stream and handles or discards them until matching PDU is found. Blocks until success. Typically wait_pdu() is used internally by request methods when operating in synchronous mode. The PDUs to handle are specified by <code>${*$me}{handlers}-</code>{$command_id}&#62;. The handlers table is initially populated to handle enquire_link PDUs automatically, but this can be altered using <code>handlers</code> argument to constructor.</p>

<pre class="sh_perl">    $pdu = $smpp-&#62;wait_pdu($cmd_id_to_wait, $seq_to_wait) or die;</pre>

<dt><a name='set_version'></a><a name="set_version($vers)"
>set_version($vers)</a></dt>

<dd>
<p>Sets the protocol version of the object either to 0x40 or 0x34. Its important to use this method instead of altering $smpp-&#62;{smpp_version} field directly because there are several other fields that have to be set in tandem.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Typical client:</p>

<pre class="sh_perl">  use Net::SMPP;
  $smpp = Net::SMPP-&#62;new_transceiver(&#39;smsc.foo.net&#39;, port=&#62;2552) or die;
  $resp_pdu = $smpp-&#62;submit_sm(destination_addr =&#62; &#39;447799658372&#39;,
                               data =&#62; &#39;test message&#39;) or die;
  ***</pre>

<p>Typical server, run from inetd:</p>

<pre class="sh_perl">  ***</pre>

<p>See test.pl for good templates with all official parameters, but beware that the actual parameter values are ficticious as is the flow of the dialog.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MULTIPART_MESSAGE"
>MULTIPART MESSAGE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Reportedly (Zeus Panchenko) multipart messages can be gotten to work with</p>

<pre class="sh_perl">  while (length ($msgtext)) {
    if ($multimsg_maxparts) {
      @udh_ar = map { sprintf &#34;%x&#34;, $_ } $origref, $multimsg_maxparts, $multimsg_curpart;
      $udh = pack(&#34;hhhhhh&#34;,0x05, 0x00, 0x03 , @udh_ar);
      $resp_pdu = $smpp-&#62;submit_sm(destination_addr =&#62; $phone,
                           ...
                           short_message =&#62; $udh . $msgtext,
                         );
      ...
    }
  }</pre>

<p>#4#cut =head1 VERSION 4.0 SUPPORT</p>

<p>Net::SMPP was originally written for version 3.4 of SMPP protocol. I have since then gotten specifications for an earlier protocol, the version 4.0 (Logical, eh? (pun intended)). In my understanding the relevant differences are as follows (n.b. (ok) marks difference that has already been implemented):</p>

<p>1. A reserved (always 0x00000000) field in message header (v4 p. 21) (ok)</p>

<p>2. Connection can not be opened in transceiver mode (this module will not enforce this restriction) (ok)</p>

<p>3. Command versioning. Version 0x01 == V4 (v4 p. 22) (ok)</p>

<p>4. Support for extended facilities has to be requested during bind (ok)</p>

<p>5. bind_* PDUs have facilities_mask field (v4 p. 25) (ok)</p>

<p>6. bind_*_resp PDUs have facilities_mask field (v4 p. 27) (ok)</p>

<p>7. outbind lacks system ID field (v4 p.30, v3.4 p. 54) (ok)</p>

<p>8. submit_sm lacks service_type and adds message_class (v4 p. 34, v3.4 p. 59) (ok)</p>

<p>9. submit_sm: telematic_interworking == protocol_id (ok)</p>

<p>10. submit_sm: starting from number of destinations and destination address the message format is substantially different. Actually the message format is somewhat similar to v3.4 submit_multi. (ok)</p>

<p>11. submit_sm: validity period encoded as an integer relative offset (was absolute time as C string) (ok)</p>

<p>12. submit_sm: replace_if_present flag missing (ok)</p>

<p>13. submit_sm: sm_length field is 2 octets (was one) (ok)</p>

<p>14. submit_sm_resp is completely different, but actually equal to v3.4 submit_multi_resp (v4 p. 37, v3.4 pp. 67,75) (ok)</p>

<p>15. submit_sm vs submit_multi: lacks service_type, adds message_class (ok)</p>

<p>16. submit_sm vs submit_multi: number_of_dests increased from 1 byte to 4 (ok)</p>

<p>17. submit_sm vs submit_multi: esm_class lacking, adds messaging_mode and msg_reference (ok)</p>

<p>18. submit_sm vs submit_multi: telematic_interworking == protocol_id (ok)</p>

<p>19. submit_sm vs submit_multi: replace_if_present missing (ok)</p>

<p>20. submit_sm vs submit_multi: sm_length is 2 bytes (was one) (ok)</p>

<p>21. submit_sm vs submit_multi: lacks dest_flag and distribution_list_name (ok)</p>

<p>22. deliver_sm: lacks service_type (ok)</p>

<p>23. deliver_sm: lacks esm_class, adds msg_reference and message_class (ok)</p>

<p>24. deliver_sm: telematic_interworking == protocol_id (ok)</p>

<p>25. deliver_sm: priority_level == priority_flag (ok)</p>

<p>26. deliver_sm: submit_time_stamp == schedule_delivery_time (ok)</p>

<p>27. deliver_sm: lacks validity_period, registered_delivery, and replace_if_present_flag (ok)</p>

<p>28. deliver_sm: lacks sm_default_msg_id (ok)</p>

<p>29. deliver_sm: sm_length is now 2 bytes (was one) (ok)</p>

<p>30. deliver_sm_resp: lacks message_id (v3.4 has the field, but its unused) (ok)</p>

<p>31. New command: delivery_receipt (ok)</p>

<p>32. New response: delivery_receipt_resp (ok)</p>

<p>33. query_sm: dest_addr_* fields added (v4 p. 46, v3.4 p. 95) (ok)</p>

<p>34. query_sm_resp: error_code renamed to network_error_code and increased in size from one to 4 bytes (ok)</p>

<p>35. cancel_sm: service_type renamed to message_class, also type changed (ok)</p>

<p>36. replace_sm: added dest_addr_* fields (ok)</p>

<p>37. replace_sm: data type of validity_period changed (ok)</p>

<p>38. replace_sm: added data_coding field (ok)</p>

<p>39. replace_sm: sm_length field increased from one to two bytes (ok)</p>

<p>40. In v3.4 command code 0x0009 means bind_transceiver, in v4.0 this very same code means delivery_receipt (bummer) (ok)</p>

<p>41. In v3.4 enquire_link is 0x0015 where as in v4 it is 0x000a (ok)</p>

<p>To create version 4 connection, you must specify smpp_version =&#62; 0x40 and you should not bind as transceiver as that is not supported by the specification.</p>

<p>As v3.4 specification seems more mature, I recommend that where attributes have been renamed between v4 and v3.4 you stick to using v3.4 names. I have tried to provide compatibility code whenever possible.</p>

<p>#4#end</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MISC._NOTES"
>MISC. NOTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Unless you wrote your program to be multithreaded or multiprocess, everything will happen in one thread of execution. Thus if you get unbind while doing something else (e.g. checking your spool directory), it stays in operating system level buffers until you actually call read_pdu(). Knowing about unbind or not is of little use. You can write your program to assume the network traffic arrives only exactly when you call read_pdu().</p>

<p>Regarding the unbind, it is normally handled by a dispatch table automatically if you use wait_pdu() to receive your traffic. But if you created your own dispatch table, you will have to add it there yourself. If you are calling read_pdu() then you have to handle it yourslef. Even if you are using the supplied table, you may want to double check - there could be a bug.</p>

<p>One more thing: if your problem is knowing whether wait_pdu() or read_pdu() would block, then you have two possible solutions:</p>

<pre class="sh_perl">        1. use select(2) systemcall to determine for the socket
           is ready for reading
        2. structure your program as several processes (e.g. one
           for sending and one for receiving) so that you
           can afford to block</pre>

<p>The above two tricks are not specific to this module. Consult any standard text book on TCP/IP network programming.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ERRORS"
>ERRORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Please consult <code>status_code</code> table in the beginning of the source code or SMPP specification section 5.1.3, table 5-2, pp.112-114.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORT"
>EXPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>None by default.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TESTS_/_WHAT_IS_KNOWN_TO_WORK"
>TESTS / WHAT IS KNOWN TO WORK <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Interoperates with itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TO_DO_AND_BUGS"
>TO DO AND BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='read_pdu'></a><a name="read_pdu()_can_block_even_if_socket_selects_for_reading."
>read_pdu() can block even if socket selects for reading.</a></dt>

<dd>
<dt><a name='The'></a><a name="The_submit_multi_command_has_not_been_implemented."
>The submit_multi command has not been implemented.</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR_AND_COPYRIGHT"
>AUTHOR AND COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Sampo Kellomaki &#60;sampo@symlabs.com&#62;</p>

<p>Net::SMPP is copyright (c) 2001-2010 by Sampo Kellomaki, All rights reserved. Portions copyright (c) 2001-2005 by Symlabs, All rights reserved. You may use and distribute Net::SMPP under same terms as perl itself.</p>

<p>NET::SMPP COMES WITH ABSOLUTELY NO WARRANTY.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PLUG"
>PLUG <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This work was sponsored by Symlabs, the LDAP and directory experts (www.symlabs.com).</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='test'></a><a name="test.pl_from_this_package"
>test.pl from this package</a></dt>

<dd>
<dt><a name='Short'></a><a name="Short_Message_Peer_to_Peer_Protocol_Specification_v3.4,_12-Oct-1999,_Issue_1.2"
>Short Message Peer to Peer Protocol Specification v3.4, 12-Oct-1999, Issue 1.2</a></dt>

<dd>
<dt><a name='www'></a><a name="www.etsi.fr"
>www.etsi.fr</a></dt>

<dd>
<dt><a name='GSM'></a><a name="GSM_03.40,_v5.7.1"
>GSM 03.40, v5.7.1</a></dt>

<dd>
<dt><a name='www'></a><a name="www.wapforum.org"
>www.wapforum.org</a></dt>

<dd>
<dt><a name='Short'></a><a name="Short_Message_Peer_to_Peer_(SMPP)_V4_Protocol_Specification,_29-Apr-1997,_Version_1.1_(from_Aldiscon/Logica)_#4"
>Short Message Peer to Peer (SMPP) V4 Protocol Specification, 29-Apr-1997, Version 1.1 (from Aldiscon/Logica) #4</a></dt>

<dd>
<dt><a name='http'></a><a name="http://www.hsl.uk.com/documents/advserv-sms-smpp.pdf"
><a href="http://www.hsl.uk.com/documents/advserv-sms-smpp.pdf" class="podlinkurl"
>http://www.hsl.uk.com/documents/advserv-sms-smpp.pdf</a></a></dt>

<dd>
<dt><a name='http'></a><a name="http://www.mobilesms.com/developers.asp"
><a href="http://www.mobilesms.com/developers.asp" class="podlinkurl"
>http://www.mobilesms.com/developers.asp</a></a></dt>

<dd>
<dt><a name='http'></a><a name="http://opensmpp.logica.com"
><a href="http://opensmpp.logica.com" class="podlinkurl"
>http://opensmpp.logica.com</a></a></dt>

<dd>
<dt><a name='www'></a><a name="www.smpp.org_(it_appears_as_of_July_2007_domain_squatters_have_taken_over_the_site_and_it_is_no_longer_useful)"
>www.smpp.org (it appears as of July 2007 domain squatters have taken over the site and it is no longer useful)</a></dt>

<dd>
<dt><a 
><a href="http://www.smsforum.net/" class="podlinkurl"
>http://www.smsforum.net/</a> -- New place for info (as of 20081214). However, this page announces the death of itself as of July 27, 2007. Great. The SMS folks really do not want anyone to implement their protocols from specifications.</a></dt>

<dd>
<dt><a 
>&#34;Short Message Peer to Peer Protocol Specification v5.0 19-February-2003&#34;, <a href="http://www.csoft.co.uk/documents/smppv50.pdf" class="podlinkurl"
>http://www.csoft.co.uk/documents/smppv50.pdf</a> (good as of 20081214)</a></dt>

<dd>
<dt><a name='http'></a><a name="http://freshmeat.net/projects/netsmpp/_(announcements_about_Net::SMPP)"
><a href="http://freshmeat.net/projects/netsmpp/" class="podlinkurl"
>http://freshmeat.net/projects/netsmpp/</a> (announcements about <a href="/~sampo/Net-SMPP-1.19/SMPP.pm" class="podlinkpod"
>Net::SMPP</a>)</a></dt>

<dd>
<dt><a name='http'></a><a name="http://zxid.org/smpp/net-smpp.html_(home_page)"
><a href="http://zxid.org/smpp/net-smpp.html" class="podlinkurl"
>http://zxid.org/smpp/net-smpp.html</a> (home page)</a></dt>

<dd>
<dt><a name='http'></a><a name="http://cpan.org/modules/by-module/Net/Net-SMPP-1.12.tar.gz_(download_from_CPAN)"
><a href="http://cpan.org/modules/by-module/Net/Net-SMPP-1.12.tar.gz" class="podlinkurl"
>http://cpan.org/modules/by-module/Net/Net-SMPP-1.12.tar.gz</a> (download from CPAN)</a></dt>

<dd>
<dt><a name='perl'></a><a name="perl(1)"
>perl(1)</a></dt>
</dl>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78245 Uploads, 24724 Distributions
106031 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 03:50:31 2012 GMT (0.586562871932983) @cpansearch1 -->
 </body>
</html>
