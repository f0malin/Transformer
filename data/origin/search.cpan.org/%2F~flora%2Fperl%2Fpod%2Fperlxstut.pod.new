<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>perlXStut - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","perl",3]);
    _gaq.push(["_setCustomVar",5,"Release","perl-5.14.2",3]);
    _gaq.push(["_setCustomVar",4,"Document","perlXStut",3]);
    _gaq.push(["_setCustomVar",1,"Author","FLORA",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?perlXStut">permalink</a></div>
  <a href="/~flora/">Florian Ragwitz</a> &gt;
  <a href="/~flora/perl/">perl</a> &gt;
  perlXStut
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/fd2bdaaefe41908133793d1ddf38f75d?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/F/FL/FLORA/perl-5.14.2.tar.gz">perl-5.14.2.tar.gz</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~FLORA/perl-5.14.2/pod/perlxstut.pod">Annotate this POD
(2)
</a></p>
     <p style="text-align:right"><a href="http://www.perl.org/">Website</a></p>

<div style="float:right">

</div>
</div>
<span class="noprint">
  <a href="/src/FLORA/perl-5.14.2/pod/perlxstut.pod">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#SPECIAL_NOTES'>SPECIAL NOTES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#make'>make</a>
    <li class='indexItem indexItem2'><a href='#Version_caveat'>Version caveat</a>
    <li class='indexItem indexItem2'><a href='#Dynamic_Loading_versus_Static_Loading'>Dynamic Loading versus Static Loading</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#TUTORIAL'>TUTORIAL</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#EXAMPLE_1'>EXAMPLE 1</a>
    <li class='indexItem indexItem2'><a href='#EXAMPLE_2'>EXAMPLE 2</a>
    <li class='indexItem indexItem2'><a href='#What_has_gone_on?'>What has gone on?</a>
    <li class='indexItem indexItem2'><a href='#Writing_good_test_scripts'>Writing good test scripts</a>
    <li class='indexItem indexItem2'><a href='#EXAMPLE_3'>EXAMPLE 3</a>
    <li class='indexItem indexItem2'><a href='#What&#39;s_new_here?'>What&#39;s new here?</a>
    <li class='indexItem indexItem2'><a href='#Input_and_Output_Parameters'>Input and Output Parameters</a>
    <li class='indexItem indexItem2'><a href='#The_XSUBPP_Program'>The XSUBPP Program</a>
    <li class='indexItem indexItem2'><a href='#The_TYPEMAP_file'>The TYPEMAP file</a>
    <li class='indexItem indexItem2'><a href='#Warning_about_Output_Arguments'>Warning about Output Arguments</a>
    <li class='indexItem indexItem2'><a href='#EXAMPLE_4'>EXAMPLE 4</a>
    <li class='indexItem indexItem2'><a href='#What_has_happened_here?'>What has happened here?</a>
    <li class='indexItem indexItem2'><a href='#Anatomy_of_.xs_file'>Anatomy of .xs file</a>
    <li class='indexItem indexItem2'><a href='#Getting_the_fat_out_of_XSUBs'>Getting the fat out of XSUBs</a>
    <li class='indexItem indexItem2'><a href='#More_about_XSUB_arguments'>More about XSUB arguments</a>
    <li class='indexItem indexItem2'><a href='#The_Argument_Stack'>The Argument Stack</a>
    <li class='indexItem indexItem2'><a href='#Extending_your_Extension'>Extending your Extension</a>
    <li class='indexItem indexItem2'><a href='#Documenting_your_Extension'>Documenting your Extension</a>
    <li class='indexItem indexItem2'><a href='#Installing_your_Extension'>Installing your Extension</a>
    <li class='indexItem indexItem2'><a href='#EXAMPLE_5'>EXAMPLE 5</a>
    <li class='indexItem indexItem2'><a href='#New_Things_in_this_Example'>New Things in this Example</a>
    <li class='indexItem indexItem2'><a href='#EXAMPLE_6'>EXAMPLE 6</a>
    <li class='indexItem indexItem2'><a href='#New_Things_in_this_Example'>New Things in this Example</a>
    <li class='indexItem indexItem2'><a href='#EXAMPLE_7_(Coming_Soon)'>EXAMPLE 7 (Coming Soon)</a>
    <li class='indexItem indexItem2'><a href='#EXAMPLE_8_(Coming_Soon)'>EXAMPLE 8 (Coming Soon)</a>
    <li class='indexItem indexItem2'><a href='#EXAMPLE_9_Passing_open_files_to_XSes'>EXAMPLE 9 Passing open files to XSes</a>
    <li class='indexItem indexItem2'><a href='#Troubleshooting_these_Examples'>Troubleshooting these Examples</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#See_also'>See also</a>
  <li class='indexItem indexItem1'><a href='#Author'>Author</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Last_Changed'>Last Changed</a>
  </ul>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perlXStut - Tutorial for writing XSUBs</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This tutorial will educate the reader on the steps involved in creating a Perl extension.
The reader is assumed to have access to <a href="/~flora/perl-5.14.2/pod/perlguts.pod" class="podlinkpod"
>perlguts</a>,
<a href="/~flora/perl-5.14.2/autodoc.pl" class="podlinkpod"
>perlapi</a> and <a href="/~flora/perl-5.14.2/pod/perlxs.pod" class="podlinkpod"
>perlxs</a>.</p>

<p>This tutorial starts with very simple examples and becomes more complex,
with each new example adding new features.
Certain concepts may not be completely explained until later in the tutorial in order to slowly ease the reader into building extensions.</p>

<p>This tutorial was written from a Unix point of view.
Where I know them to be otherwise different for other platforms (e.g.
Win32),
I will list them.
If you find something that was missed,
please let me know.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SPECIAL_NOTES"
>SPECIAL NOTES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="make"
>make</a></h2>

<p>This tutorial assumes that the make program that Perl is configured to use is called <code>make</code>.
Instead of running &#34;make&#34; in the examples that follow,
you may have to substitute whatever make program Perl has been configured to use.
Running <b>perl -V:make</b> should tell you what it is.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Version_caveat"
>Version caveat</a></h2>

<p>When writing a Perl extension for general consumption,
one should expect that the extension will be used with versions of Perl different from the version available on your machine.
Since you are reading this document,
the version of Perl on your machine is probably 5.005 or later,
but the users of your extension may have more ancient versions.</p>

<p>To understand what kinds of incompatibilities one may expect,
and in the rare case that the version of Perl on your machine is older than this document,
see the section on &#34;Troubleshooting these Examples&#34; for more information.</p>

<p>If your extension uses some features of Perl which are not available on older releases of Perl,
your users would appreciate an early meaningful warning.
You would probably put this information into the <em>README</em> file,
but nowadays installation of extensions may be performed automatically,
guided by <em>CPAN.pm</em> module or other tools.</p>

<p>In MakeMaker-based installations,
<em>Makefile.PL</em> provides the earliest opportunity to perform version checks.
One can put something like this in <em>Makefile.PL</em> for this purpose:</p>

<pre class="sh_perl">    eval { require 5.007 }
        or die &#60;&#60;EOD;
    ############
    ### This module uses frobnication framework which is not available before
    ### version 5.007 of Perl.  Upgrade your Perl before installing Kara::Mba.
    ############
    EOD</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Dynamic_Loading_versus_Static_Loading"
>Dynamic Loading versus Static Loading</a></h2>

<p>It is commonly thought that if a system does not have the capability to dynamically load a library, you cannot build XSUBs. This is incorrect. You <i>can</i> build them, but you must link the XSUBs subroutines with the rest of Perl, creating a new executable. This situation is similar to Perl 4.</p>

<p>This tutorial can still be used on such a system. The XSUB build mechanism will check the system and build a dynamically-loadable library if possible, or else a static library and then, optionally, a new statically-linked executable with that static library linked in.</p>

<p>Should you wish to build a statically-linked executable on a system which can dynamically load libraries, you may, in all the following examples, where the command &#34;<code>make</code>&#34; with no arguments is executed, run the command &#34;<code>make perl</code>&#34; instead.</p>

<p>If you have generated such a statically-linked executable by choice, then instead of saying &#34;<code>make test</code>&#34;, you should say &#34;<code>make test_static</code>&#34;. On systems that cannot build dynamically-loadable libraries at all, simply saying &#34;<code>make test</code>&#34; is sufficient.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TUTORIAL"
>TUTORIAL <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Now let&#39;s go on with the show!</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLE_1"
>EXAMPLE 1</a></h2>

<p>Our first extension will be very simple. When we call the routine in the extension, it will print out a well-known message and return.</p>

<p>Run &#34;<code>h2xs -A -n Mytest</code>&#34;. This creates a directory named Mytest, possibly under ext/ if that directory exists in the current working directory. Several files will be created under the Mytest dir, including MANIFEST, Makefile.PL, lib/Mytest.pm, Mytest.xs, t/Mytest.t, and Changes.</p>

<p>The MANIFEST file contains the names of all the files just created in the Mytest directory.</p>

<p>The file Makefile.PL should look something like this:</p>

<pre class="sh_perl">    use ExtUtils::MakeMaker;
    # See lib/ExtUtils/MakeMaker.pm for details of how to influence
    # the contents of the Makefile that is written.
    WriteMakefile(
        NAME         =&#62; &#39;Mytest&#39;,
        VERSION_FROM =&#62; &#39;Mytest.pm&#39;, # finds $VERSION
        LIBS         =&#62; [&#39;&#39;],   # e.g., &#39;-lm&#39;
        DEFINE       =&#62; &#39;&#39;,     # e.g., &#39;-DHAVE_SOMETHING&#39;
        INC          =&#62; &#39;&#39;,     # e.g., &#39;-I/usr/include/other&#39;
    );</pre>

<p>The file Mytest.pm should start with something like this:</p>

<pre class="sh_perl">    package Mytest;

    use 5.008008;
    use strict;
    use warnings;

    require Exporter;

    our @ISA = qw(Exporter);
    our %EXPORT_TAGS = ( &#39;all&#39; =&#62; [ qw(

    ) ] );

    our @EXPORT_OK = ( @{ $EXPORT_TAGS{&#39;all&#39;} } );

    our @EXPORT = qw(

    );

    our $VERSION = &#39;0.01&#39;;

    require XSLoader;
    XSLoader::load(&#39;Mytest&#39;, $VERSION);

    # Preloaded methods go here.

    1;
    __END__
    # Below is the stub of documentation for your module. You better edit it!</pre>

<p>The rest of the .pm file contains sample code for providing documentation for the extension.</p>

<p>Finally, the Mytest.xs file should look something like this:</p>

<pre class="sh_perl">    #include &#34;EXTERN.h&#34;
    #include &#34;perl.h&#34;
    #include &#34;XSUB.h&#34;

    #include &#34;ppport.h&#34;

    MODULE = Mytest             PACKAGE = Mytest</pre>

<p>Let&#39;s edit the .xs file by adding this to the end of the file:</p>

<pre class="sh_perl">    void
    hello()
        CODE:
            printf(&#34;Hello, world!\n&#34;);</pre>

<p>It is okay for the lines starting at the &#34;CODE:&#34; line to not be indented. However, for readability purposes, it is suggested that you indent CODE: one level and the lines following one more level.</p>

<p>Now we&#39;ll run &#34;<code>perl Makefile.PL</code>&#34;. This will create a real Makefile, which make needs. Its output looks something like:</p>

<pre class="sh_perl">    % perl Makefile.PL
    Checking if your kit is complete...
    Looks good
    Writing Makefile for Mytest
    %</pre>

<p>Now, running make will produce output that looks something like this (some long lines have been shortened for clarity and some extraneous lines have been deleted):</p>

<pre class="sh_perl">    % make
    cp lib/Mytest.pm blib/lib/Mytest.pm
    perl xsubpp  -typemap typemap  Mytest.xs &#62; Mytest.xsc &#38;&#38; mv Mytest.xsc Mytest.c
    Please specify prototyping behavior for Mytest.xs (see perlxs manual)
    cc -c     Mytest.c
    Running Mkbootstrap for Mytest ()
    chmod 644 Mytest.bs
    rm -f blib/arch/auto/Mytest/Mytest.so
    cc  -shared -L/usr/local/lib Mytest.o  -o blib/arch/auto/Mytest/Mytest.so   \
                \

    chmod 755 blib/arch/auto/Mytest/Mytest.so
    cp Mytest.bs blib/arch/auto/Mytest/Mytest.bs
    chmod 644 blib/arch/auto/Mytest/Mytest.bs
    Manifying blib/man3/Mytest.3pm
    %</pre>

<p>You can safely ignore the line about &#34;prototyping behavior&#34; - it is explained in <a href="/~flora/perl-5.14.2/pod/perlxs.pod#The_PROTOTYPES:_Keyword" class="podlinkpod"
>&#34;The PROTOTYPES: Keyword&#34; in perlxs</a>.</p>

<p>Perl has its own special way of easily writing test scripts, but for this example only, we&#39;ll create our own test script. Create a file called hello that looks like this:</p>

<pre class="sh_perl">    #! /opt/perl5/bin/perl

    use ExtUtils::testlib;

    use Mytest;

    Mytest::hello();</pre>

<p>Now we make the script executable (<code>chmod +x hello</code>), run the script and we should see the following output:</p>

<pre class="sh_perl">    % ./hello
    Hello, world!
    %</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLE_2"
>EXAMPLE 2</a></h2>

<p>Now let&#39;s add to our extension a subroutine that will take a single numeric argument as input and return 1 if the number is even or 0 if the number is odd.</p>

<p>Add the following to the end of Mytest.xs:</p>

<pre class="sh_perl">    int
    is_even(input)
            int input
        CODE:
            RETVAL = (input % 2 == 0);
        OUTPUT:
            RETVAL</pre>

<p>There does not need to be whitespace at the start of the &#34;<code>int input</code>&#34; line, but it is useful for improving readability. Placing a semi-colon at the end of that line is also optional. Any amount and kind of whitespace may be placed between the &#34;<code>int</code>&#34; and &#34;<code>input</code>&#34;.</p>

<p>Now re-run make to rebuild our new shared library.</p>

<p>Now perform the same steps as before, generating a Makefile from the Makefile.PL file, and running make.</p>

<p>In order to test that our extension works, we now need to look at the file Mytest.t. This file is set up to imitate the same kind of testing structure that Perl itself has. Within the test script, you perform a number of tests to confirm the behavior of the extension, printing &#34;ok&#34; when the test is correct, &#34;not ok&#34; when it is not.</p>

<pre class="sh_perl">    use Test::More tests =&#62; 4;
    BEGIN { use_ok(&#39;Mytest&#39;) };

    #########################

    # Insert your test code below, the Test::More module is use()ed here so read
    # its man page ( perldoc Test::More ) for help writing this test script.

    is(&#38;Mytest::is_even(0), 1);
    is(&#38;Mytest::is_even(1), 0);
    is(&#38;Mytest::is_even(2), 1);</pre>

<p>We will be calling the test script through the command &#34;<code>make test</code>&#34;. You should see output that looks something like this:</p>

<pre class="sh_perl">    %make test
    PERL_DL_NONLAZY=1 /usr/bin/perl &#34;-MExtUtils::Command::MM&#34; &#34;-e&#34; &#34;test_harness(0, &#39;blib/lib&#39;, &#39;blib/arch&#39;)&#34; t/*.t
    t/Mytest....ok
    All tests successful.
    Files=1, Tests=4,  0 wallclock secs ( 0.03 cusr +  0.00 csys =  0.03 CPU)
    %</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="What_has_gone_on?"
>What has gone on?</a></h2>

<p>The program h2xs is the starting point for creating extensions. In later examples we&#39;ll see how we can use h2xs to read header files and generate templates to connect to C routines.</p>

<p>h2xs creates a number of files in the extension directory. The file Makefile.PL is a perl script which will generate a true Makefile to build the extension. We&#39;ll take a closer look at it later.</p>

<p>The .pm and .xs files contain the meat of the extension. The .xs file holds the C routines that make up the extension. The .pm file contains routines that tell Perl how to load your extension.</p>

<p>Generating the Makefile and running <code>make</code> created a directory called blib (which stands for &#34;build library&#34;) in the current working directory. This directory will contain the shared library that we will build. Once we have tested it, we can install it into its final location.</p>

<p>Invoking the test script via &#34;<code>make test</code>&#34; did something very important. It invoked perl with all those <code>-I</code> arguments so that it could find the various files that are part of the extension. It is <i>very</i> important that while you are still testing extensions that you use &#34;<code>make test</code>&#34;. If you try to run the test script all by itself, you will get a fatal error. Another reason it is important to use &#34;<code>make test</code>&#34; to run your test script is that if you are testing an upgrade to an already-existing version, using &#34;<code>make test</code>&#34; ensures that you will test your new extension, not the already-existing version.</p>

<p>When Perl sees a <code>use extension;</code>, it searches for a file with the same name as the <code>use</code>&#39;d extension that has a .pm suffix. If that file cannot be found, Perl dies with a fatal error. The default search path is contained in the <code>@INC</code> array.</p>

<p>In our case, Mytest.pm tells perl that it will need the Exporter and Dynamic Loader extensions. It then sets the <code>@ISA</code> and <code>@EXPORT</code> arrays and the <code>$VERSION</code> scalar; finally it tells perl to bootstrap the module. Perl will call its dynamic loader routine (if there is one) and load the shared library.</p>

<p>The two arrays <code>@ISA</code> and <code>@EXPORT</code> are very important. The <code>@ISA</code> array contains a list of other packages in which to search for methods (or subroutines) that do not exist in the current package. This is usually only important for object-oriented extensions (which we will talk about much later), and so usually doesn&#39;t need to be modified.</p>

<p>The <code>@EXPORT</code> array tells Perl which of the extension&#39;s variables and subroutines should be placed into the calling package&#39;s namespace. Because you don&#39;t know if the user has already used your variable and subroutine names, it&#39;s vitally important to carefully select what to export. Do <i>not</i> export method or variable names <i>by default</i> without a good reason.</p>

<p>As a general rule, if the module is trying to be object-oriented then don&#39;t export anything. If it&#39;s just a collection of functions and variables, then you can export them via another array, called <code>@EXPORT_OK</code>. This array does not automatically place its subroutine and variable names into the namespace unless the user specifically requests that this be done.</p>

<p>See <a href="/~flora/perl-5.14.2/pod/perlmod.pod" class="podlinkpod"
>perlmod</a> for more information.</p>

<p>The <code>$VERSION</code> variable is used to ensure that the .pm file and the shared library are &#34;in sync&#34; with each other. Any time you make changes to the .pm or .xs files, you should increment the value of this variable.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Writing_good_test_scripts"
>Writing good test scripts</a></h2>

<p>The importance of writing good test scripts cannot be over-emphasized. You should closely follow the &#34;ok/not ok&#34; style that Perl itself uses, so that it is very easy and unambiguous to determine the outcome of each test case. When you find and fix a bug, make sure you add a test case for it.</p>

<p>By running &#34;<code>make test</code>&#34;, you ensure that your Mytest.t script runs and uses the correct version of your extension. If you have many test cases, save your test files in the &#34;t&#34; directory and use the suffix &#34;.t&#34;. When you run &#34;<code>make test</code>&#34;, all of these test files will be executed.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLE_3"
>EXAMPLE 3</a></h2>

<p>Our third extension will take one argument as its input, round off that value, and set the <i>argument</i> to the rounded value.</p>

<p>Add the following to the end of Mytest.xs:</p>

<pre class="sh_perl">        void
        round(arg)
                double  arg
            CODE:
                if (arg &#62; 0.0) {
                        arg = floor(arg + 0.5);
                } else if (arg &#60; 0.0) {
                        arg = ceil(arg - 0.5);
                } else {
                        arg = 0.0;
                }
            OUTPUT:
                arg</pre>

<p>Edit the Makefile.PL file so that the corresponding line looks like this:</p>

<pre class="sh_perl">        &#39;LIBS&#39;      =&#62; [&#39;-lm&#39;],   # e.g., &#39;-lm&#39;</pre>

<p>Generate the Makefile and run make. Change the test number in Mytest.t to &#34;9&#34; and add the following tests:</p>

<pre class="sh_perl">        $i = -1.5; &#38;Mytest::round($i); is( $i, -2.0 );
        $i = -1.1; &#38;Mytest::round($i); is( $i, -1.0 );
        $i = 0.0; &#38;Mytest::round($i);  is( $i,  0.0 );
        $i = 0.5; &#38;Mytest::round($i);  is( $i,  1.0 );
        $i = 1.2; &#38;Mytest::round($i);  is( $i,  1.0 );</pre>

<p>Running &#34;<code>make test</code>&#34; should now print out that all nine tests are okay.</p>

<p>Notice that in these new test cases, the argument passed to round was a scalar variable. You might be wondering if you can round a constant or literal. To see what happens, temporarily add the following line to Mytest.t:</p>

<pre class="sh_perl">        &#38;Mytest::round(3);</pre>

<p>Run &#34;<code>make test</code>&#34; and notice that Perl dies with a fatal error. Perl won&#39;t let you change the value of constants!</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="What&#39;s_new_here?"
>What&#39;s new here?</a></h2>

<ul>
<li>We&#39;ve made some changes to Makefile.PL. In this case, we&#39;ve specified an extra library to be linked into the extension&#39;s shared library, the math library libm in this case. We&#39;ll talk later about how to write XSUBs that can call every routine in a library.</li>

<li>The value of the function is not being passed back as the function&#39;s return value, but by changing the value of the variable that was passed into the function. You might have guessed that when you saw that the return value of round is of type &#34;void&#34;.</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Input_and_Output_Parameters"
>Input and Output Parameters</a></h2>

<p>You specify the parameters that will be passed into the XSUB on the line(s) after you declare the function&#39;s return value and name. Each input parameter line starts with optional whitespace, and may have an optional terminating semicolon.</p>

<p>The list of output parameters occurs at the very end of the function, just after the OUTPUT: directive. The use of RETVAL tells Perl that you wish to send this value back as the return value of the XSUB function. In Example 3, we wanted the &#34;return value&#34; placed in the original variable which we passed in, so we listed it (and not RETVAL) in the OUTPUT: section.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_XSUBPP_Program"
>The XSUBPP Program</a></h2>

<p>The <b>xsubpp</b> program takes the XS code in the .xs file and translates it into C code, placing it in a file whose suffix is .c. The C code created makes heavy use of the C functions within Perl.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_TYPEMAP_file"
>The TYPEMAP file</a></h2>

<p>The <b>xsubpp</b> program uses rules to convert from Perl&#39;s data types (scalar, array, etc.) to C&#39;s data types (int, char, etc.). These rules are stored in the typemap file ($PERLLIB/ExtUtils/typemap). This file is split into three parts.</p>

<p>The first section maps various C data types to a name, which corresponds somewhat with the various Perl types. The second section contains C code which <b>xsubpp</b> uses to handle input parameters. The third section contains C code which <b>xsubpp</b> uses to handle output parameters.</p>

<p>Let&#39;s take a look at a portion of the .c file created for our extension. The file name is Mytest.c:</p>

<pre class="sh_perl">        XS(XS_Mytest_round)
        {
            dXSARGS;
            if (items != 1)
                Perl_croak(aTHX_ &#34;Usage: Mytest::round(arg)&#34;);
        PERL_UNUSED_VAR(cv); /* -W */
            {
                double  arg = (double)SvNV(ST(0));      /* XXXXX */
                if (arg &#62; 0.0) {
                        arg = floor(arg + 0.5);
                } else if (arg &#60; 0.0) {
                        arg = ceil(arg - 0.5);
                } else {
                        arg = 0.0;
                }
                sv_setnv(ST(0), (double)arg);   /* XXXXX */
        SvSETMAGIC(ST(0));
            }
            XSRETURN_EMPTY;
        }</pre>

<p>Notice the two lines commented with &#34;XXXXX&#34;. If you check the first section of the typemap file, you&#39;ll see that doubles are of type T_DOUBLE. In the INPUT section, an argument that is T_DOUBLE is assigned to the variable arg by calling the routine SvNV on something, then casting it to double, then assigned to the variable arg. Similarly, in the OUTPUT section, once arg has its final value, it is passed to the sv_setnv function to be passed back to the calling subroutine. These two functions are explained in <a href="/~flora/perl-5.14.2/pod/perlguts.pod" class="podlinkpod"
>perlguts</a>; we&#39;ll talk more later about what that &#34;ST(0)&#34; means in the section on the argument stack.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Warning_about_Output_Arguments"
>Warning about Output Arguments</a></h2>

<p>In general, it&#39;s not a good idea to write extensions that modify their input parameters, as in Example 3. Instead, you should probably return multiple values in an array and let the caller handle them (we&#39;ll do this in a later example). However, in order to better accommodate calling pre-existing C routines, which often do modify their input parameters, this behavior is tolerated.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLE_4"
>EXAMPLE 4</a></h2>

<p>In this example, we&#39;ll now begin to write XSUBs that will interact with pre-defined C libraries. To begin with, we will build a small library of our own, then let h2xs write our .pm and .xs files for us.</p>

<p>Create a new directory called Mytest2 at the same level as the directory Mytest. In the Mytest2 directory, create another directory called mylib, and cd into that directory.</p>

<p>Here we&#39;ll create some files that will generate a test library. These will include a C source file and a header file. We&#39;ll also create a Makefile.PL in this directory. Then we&#39;ll make sure that running make at the Mytest2 level will automatically run this Makefile.PL file and the resulting Makefile.</p>

<p>In the mylib directory, create a file mylib.h that looks like this:</p>

<pre class="sh_perl">        #define TESTVAL 4

        extern double   foo(int, long, const char*);</pre>

<p>Also create a file mylib.c that looks like this:</p>

<pre class="sh_perl">        #include &#60;stdlib.h&#62;
        #include &#34;./mylib.h&#34;

        double
        foo(int a, long b, const char *c)
        {
                return (a + b + atof(c) + TESTVAL);
        }</pre>

<p>And finally create a file Makefile.PL that looks like this:</p>

<pre class="sh_perl">        use ExtUtils::MakeMaker;
        $Verbose = 1;
        WriteMakefile(
            NAME   =&#62; &#39;Mytest2::mylib&#39;,
            SKIP   =&#62; [qw(all static static_lib dynamic dynamic_lib)],
            clean  =&#62; {&#39;FILES&#39; =&#62; &#39;libmylib$(LIB_EXT)&#39;},
        );


        sub MY::top_targets {
                &#39;
        all :: static

        pure_all :: static

        static ::       libmylib$(LIB_EXT)

        libmylib$(LIB_EXT): $(O_FILES)
                $(AR) cr libmylib$(LIB_EXT) $(O_FILES)
                $(RANLIB) libmylib$(LIB_EXT)

        &#39;;
        }</pre>

<p>Make sure you use a tab and not spaces on the lines beginning with &#34;$(AR)&#34; and &#34;$(RANLIB)&#34;. Make will not function properly if you use spaces. It has also been reported that the &#34;cr&#34; argument to $(AR) is unnecessary on Win32 systems.</p>

<p>We will now create the main top-level Mytest2 files. Change to the directory above Mytest2 and run the following command:</p>

<pre class="sh_perl">        % h2xs -O -n Mytest2 ./Mytest2/mylib/mylib.h</pre>

<p>This will print out a warning about overwriting Mytest2, but that&#39;s okay. Our files are stored in Mytest2/mylib, and will be untouched.</p>

<p>The normal Makefile.PL that h2xs generates doesn&#39;t know about the mylib directory. We need to tell it that there is a subdirectory and that we will be generating a library in it. Let&#39;s add the argument MYEXTLIB to the WriteMakefile call so that it looks like this:</p>

<pre class="sh_perl">        WriteMakefile(
            &#39;NAME&#39;      =&#62; &#39;Mytest2&#39;,
            &#39;VERSION_FROM&#39; =&#62; &#39;Mytest2.pm&#39;, # finds $VERSION
            &#39;LIBS&#39;      =&#62; [&#39;&#39;],   # e.g., &#39;-lm&#39;
            &#39;DEFINE&#39;    =&#62; &#39;&#39;,     # e.g., &#39;-DHAVE_SOMETHING&#39;
            &#39;INC&#39;       =&#62; &#39;&#39;,     # e.g., &#39;-I/usr/include/other&#39;
            &#39;MYEXTLIB&#39; =&#62; &#39;mylib/libmylib$(LIB_EXT)&#39;,
        );</pre>

<p>and then at the end add a subroutine (which will override the pre-existing subroutine). Remember to use a tab character to indent the line beginning with &#34;cd&#34;!</p>

<pre class="sh_perl">        sub MY::postamble {
        &#39;
        $(MYEXTLIB): mylib/Makefile
                cd mylib &#38;&#38; $(MAKE) $(PASSTHRU)
        &#39;;
        }</pre>

<p>Let&#39;s also fix the MANIFEST file so that it accurately reflects the contents of our extension. The single line that says &#34;mylib&#34; should be replaced by the following three lines:</p>

<pre class="sh_perl">        mylib/Makefile.PL
        mylib/mylib.c
        mylib/mylib.h</pre>

<p>To keep our namespace nice and unpolluted, edit the .pm file and change the variable <code>@EXPORT</code> to <code>@EXPORT_OK</code>. Finally, in the .xs file, edit the #include line to read:</p>

<pre class="sh_perl">        #include &#34;mylib/mylib.h&#34;</pre>

<p>And also add the following function definition to the end of the .xs file:</p>

<pre class="sh_perl">        double
        foo(a,b,c)
                int             a
                long            b
                const char *    c
            OUTPUT:
                RETVAL</pre>

<p>Now we also need to create a typemap file because the default Perl doesn&#39;t currently support the const char * type. Create a file called typemap in the Mytest2 directory and place the following in it:</p>

<pre class="sh_perl">        const char *    T_PV</pre>

<p>Now run perl on the top-level Makefile.PL. Notice that it also created a Makefile in the mylib directory. Run make and watch that it does cd into the mylib directory and run make in there as well.</p>

<p>Now edit the Mytest2.t script and change the number of tests to &#34;4&#34;, and add the following lines to the end of the script:</p>

<pre class="sh_perl">        is( &#38;Mytest2::foo(1, 2, &#34;Hello, world!&#34;), 7 );
        is( &#38;Mytest2::foo(1, 2, &#34;0.0&#34;), 7 );
        ok( abs(&#38;Mytest2::foo(0, 0, &#34;-3.4&#34;) - 0.6) &#60;= 0.01 );</pre>

<p>(When dealing with floating-point comparisons, it is best to not check for equality, but rather that the difference between the expected and actual result is below a certain amount (called epsilon) which is 0.01 in this case)</p>

<p>Run &#34;<code>make test</code>&#34; and all should be well. There are some warnings on missing tests for the Mytest2::mylib extension, but you can ignore them.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="What_has_happened_here?"
>What has happened here?</a></h2>

<p>Unlike previous examples, we&#39;ve now run h2xs on a real include file. This has caused some extra goodies to appear in both the .pm and .xs files.</p>

<ul>
<li>In the .xs file, there&#39;s now a #include directive with the absolute path to the mylib.h header file. We changed this to a relative path so that we could move the extension directory if we wanted to.</li>

<li>There&#39;s now some new C code that&#39;s been added to the .xs file. The purpose of the <code>constant</code> routine is to make the values that are #define&#39;d in the header file accessible by the Perl script (by calling either <code>TESTVAL</code> or <code>&#38;Mytest2::TESTVAL</code>). There&#39;s also some XS code to allow calls to the <code>constant</code> routine.</li>

<li>The .pm file originally exported the name <code>TESTVAL</code> in the <code>@EXPORT</code> array. This could lead to name clashes. A good rule of thumb is that if the #define is only going to be used by the C routines themselves, and not by the user, they should be removed from the <code>@EXPORT</code> array. Alternately, if you don&#39;t mind using the &#34;fully qualified name&#34; of a variable, you could move most or all of the items from the <code>@EXPORT</code> array into the <code>@EXPORT_OK</code> array.</li>

<li>If our include file had contained #include directives, these would not have been processed by h2xs. There is no good solution to this right now.</li>

<li>We&#39;ve also told Perl about the library that we built in the mylib subdirectory. That required only the addition of the <code>MYEXTLIB</code> variable to the WriteMakefile call and the replacement of the postamble subroutine to cd into the subdirectory and run make. The Makefile.PL for the library is a bit more complicated, but not excessively so. Again we replaced the postamble subroutine to insert our own code. This code simply specified that the library to be created here was a static archive library (as opposed to a dynamically loadable library) and provided the commands to build it.</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Anatomy_of_.xs_file"
>Anatomy of .xs file</a></h2>

<p>The .xs file of <a href="#EXAMPLE_4" class="podlinkpod"
>&#34;EXAMPLE 4&#34;</a> contained some new elements. To understand the meaning of these elements, pay attention to the line which reads</p>

<pre class="sh_perl">        MODULE = Mytest2                PACKAGE = Mytest2</pre>

<p>Anything before this line is plain C code which describes which headers to include, and defines some convenience functions. No translations are performed on this part, apart from having embedded POD documentation skipped over (see <a href="/~flora/perl-5.14.2/pod/perlpod.pod" class="podlinkpod"
>perlpod</a>) it goes into the generated output C file as is.</p>

<p>Anything after this line is the description of XSUB functions. These descriptions are translated by <b>xsubpp</b> into C code which implements these functions using Perl calling conventions, and which makes these functions visible from Perl interpreter.</p>

<p>Pay a special attention to the function <code>constant</code>. This name appears twice in the generated .xs file: once in the first part, as a static C function, then another time in the second part, when an XSUB interface to this static C function is defined.</p>

<p>This is quite typical for .xs files: usually the .xs file provides an interface to an existing C function. Then this C function is defined somewhere (either in an external library, or in the first part of .xs file), and a Perl interface to this function (i.e. &#34;Perl glue&#34;) is described in the second part of .xs file. The situation in <a href="#EXAMPLE_1" class="podlinkpod"
>&#34;EXAMPLE 1&#34;</a>, <a href="#EXAMPLE_2" class="podlinkpod"
>&#34;EXAMPLE 2&#34;</a>, and <a href="#EXAMPLE_3" class="podlinkpod"
>&#34;EXAMPLE 3&#34;</a>, when all the work is done inside the &#34;Perl glue&#34;, is somewhat of an exception rather than the rule.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Getting_the_fat_out_of_XSUBs"
>Getting the fat out of XSUBs</a></h2>

<p>In <a href="#EXAMPLE_4" class="podlinkpod"
>&#34;EXAMPLE 4&#34;</a> the second part of .xs file contained the following description of an XSUB:</p>

<pre class="sh_perl">        double
        foo(a,b,c)
                int             a
                long            b
                const char *    c
            OUTPUT:
                RETVAL</pre>

<p>Note that in contrast with <a href="#EXAMPLE_1" class="podlinkpod"
>&#34;EXAMPLE 1&#34;</a>, <a href="#EXAMPLE_2" class="podlinkpod"
>&#34;EXAMPLE 2&#34;</a> and <a href="#EXAMPLE_3" class="podlinkpod"
>&#34;EXAMPLE 3&#34;</a>, this description does not contain the actual <i>code</i> for what is done during a call to Perl function foo(). To understand what is going on here, one can add a CODE section to this XSUB:</p>

<pre class="sh_perl">        double
        foo(a,b,c)
                int             a
                long            b
                const char *    c
            CODE:
                RETVAL = foo(a,b,c);
            OUTPUT:
                RETVAL</pre>

<p>However, these two XSUBs provide almost identical generated C code: <b>xsubpp</b> compiler is smart enough to figure out the <code>CODE:</code> section from the first two lines of the description of XSUB. What about <code>OUTPUT:</code> section? In fact, that is absolutely the same! The <code>OUTPUT:</code> section can be removed as well, <i>as far as <code>CODE:</code> section or <code>PPCODE:</code> section</i> is not specified: <b>xsubpp</b> can see that it needs to generate a function call section, and will autogenerate the OUTPUT section too. Thus one can shortcut the XSUB to become:</p>

<pre class="sh_perl">        double
        foo(a,b,c)
                int             a
                long            b
                const char *    c</pre>

<p>Can we do the same with an XSUB</p>

<pre class="sh_perl">        int
        is_even(input)
                int     input
            CODE:
                RETVAL = (input % 2 == 0);
            OUTPUT:
                RETVAL</pre>

<p>of <a href="#EXAMPLE_2" class="podlinkpod"
>&#34;EXAMPLE 2&#34;</a>? To do this, one needs to define a C function <code>int is_even(int input)</code>. As we saw in <a href="#Anatomy_of_.xs_file" class="podlinkpod"
>&#34;Anatomy of .xs file&#34;</a>, a proper place for this definition is in the first part of .xs file. In fact a C function</p>

<pre class="sh_perl">        int
        is_even(int arg)
        {
                return (arg % 2 == 0);
        }</pre>

<p>is probably overkill for this. Something as simple as a <code>#define</code> will do too:</p>

<pre class="sh_perl">        #define is_even(arg)    ((arg) % 2 == 0)</pre>

<p>After having this in the first part of .xs file, the &#34;Perl glue&#34; part becomes as simple as</p>

<pre class="sh_perl">        int
        is_even(input)
                int     input</pre>

<p>This technique of separation of the glue part from the workhorse part has obvious tradeoffs: if you want to change a Perl interface, you need to change two places in your code. However, it removes a lot of clutter, and makes the workhorse part independent from idiosyncrasies of Perl calling convention. (In fact, there is nothing Perl-specific in the above description, a different version of <b>xsubpp</b> might have translated this to TCL glue or Python glue as well.)</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="More_about_XSUB_arguments"
>More about XSUB arguments</a></h2>

<p>With the completion of Example 4, we now have an easy way to simulate some real-life libraries whose interfaces may not be the cleanest in the world. We shall now continue with a discussion of the arguments passed to the <b>xsubpp</b> compiler.</p>

<p>When you specify arguments to routines in the .xs file, you are really passing three pieces of information for each argument listed. The first piece is the order of that argument relative to the others (first, second, etc). The second is the type of argument, and consists of the type declaration of the argument (e.g., int, char*, etc). The third piece is the calling convention for the argument in the call to the library function.</p>

<p>While Perl passes arguments to functions by reference, C passes arguments by value; to implement a C function which modifies data of one of the &#34;arguments&#34;, the actual argument of this C function would be a pointer to the data. Thus two C functions with declarations</p>

<pre class="sh_perl">        int string_length(char *s);
        int upper_case_char(char *cp);</pre>

<p>may have completely different semantics: the first one may inspect an array of chars pointed by s, and the second one may immediately dereference <code>cp</code> and manipulate <code>*cp</code> only (using the return value as, say, a success indicator). From Perl one would use these functions in a completely different manner.</p>

<p>One conveys this info to <b>xsubpp</b> by replacing <code>*</code> before the argument by <code>&#38;</code>. <code>&#38;</code> means that the argument should be passed to a library function by its address. The above two function may be XSUB-ified as</p>

<pre class="sh_perl">        int
        string_length(s)
                char *  s

        int
        upper_case_char(cp)
                char    &#38;cp</pre>

<p>For example, consider:</p>

<pre class="sh_perl">        int
        foo(a,b)
                char    &#38;a
                char *  b</pre>

<p>The first Perl argument to this function would be treated as a char and assigned to the variable a, and its address would be passed into the function foo. The second Perl argument would be treated as a string pointer and assigned to the variable b. The <i>value</i> of b would be passed into the function foo. The actual call to the function foo that <b>xsubpp</b> generates would look like this:</p>

<pre class="sh_perl">        foo(&#38;a, b);</pre>

<p><b>xsubpp</b> will parse the following function argument lists identically:</p>

<pre class="sh_perl">        char    &#38;a
        char&#38;a
        char    &#38; a</pre>

<p>However, to help ease understanding, it is suggested that you place a &#34;&#38;&#34; next to the variable name and away from the variable type), and place a &#34;*&#34; near the variable type, but away from the variable name (as in the call to foo above). By doing so, it is easy to understand exactly what will be passed to the C function; it will be whatever is in the &#34;last column&#34;.</p>

<p>You should take great pains to try to pass the function the type of variable it wants, when possible. It will save you a lot of trouble in the long run.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_Argument_Stack"
>The Argument Stack</a></h2>

<p>If we look at any of the C code generated by any of the examples except example 1, you will notice a number of references to ST(n), where n is usually 0. &#34;ST&#34; is actually a macro that points to the n&#39;th argument on the argument stack. ST(0) is thus the first argument on the stack and therefore the first argument passed to the XSUB, ST(1) is the second argument, and so on.</p>

<p>When you list the arguments to the XSUB in the .xs file, that tells <b>xsubpp</b> which argument corresponds to which of the argument stack (i.e., the first one listed is the first argument, and so on). You invite disaster if you do not list them in the same order as the function expects them.</p>

<p>The actual values on the argument stack are pointers to the values passed in. When an argument is listed as being an OUTPUT value, its corresponding value on the stack (i.e., ST(0) if it was the first argument) is changed. You can verify this by looking at the C code generated for Example 3. The code for the round() XSUB routine contains lines that look like this:</p>

<pre class="sh_perl">        double  arg = (double)SvNV(ST(0));
        /* Round the contents of the variable arg */
        sv_setnv(ST(0), (double)arg);</pre>

<p>The arg variable is initially set by taking the value from ST(0), then is stored back into ST(0) at the end of the routine.</p>

<p>XSUBs are also allowed to return lists, not just scalars. This must be done by manipulating stack values ST(0), ST(1), etc, in a subtly different way. See <a href="/~flora/perl-5.14.2/pod/perlxs.pod" class="podlinkpod"
>perlxs</a> for details.</p>

<p>XSUBs are also allowed to avoid automatic conversion of Perl function arguments to C function arguments. See <a href="/~flora/perl-5.14.2/pod/perlxs.pod" class="podlinkpod"
>perlxs</a> for details. Some people prefer manual conversion by inspecting <code>ST(i)</code> even in the cases when automatic conversion will do, arguing that this makes the logic of an XSUB call clearer. Compare with <a href="#Getting_the_fat_out_of_XSUBs" class="podlinkpod"
>&#34;Getting the fat out of XSUBs&#34;</a> for a similar tradeoff of a complete separation of &#34;Perl glue&#34; and &#34;workhorse&#34; parts of an XSUB.</p>

<p>While experts may argue about these idioms, a novice to Perl guts may prefer a way which is as little Perl-guts-specific as possible, meaning automatic conversion and automatic call generation, as in <a href="#Getting_the_fat_out_of_XSUBs" class="podlinkpod"
>&#34;Getting the fat out of XSUBs&#34;</a>. This approach has the additional benefit of protecting the XSUB writer from future changes to the Perl API.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Extending_your_Extension"
>Extending your Extension</a></h2>

<p>Sometimes you might want to provide some extra methods or subroutines to assist in making the interface between Perl and your extension simpler or easier to understand. These routines should live in the .pm file. Whether they are automatically loaded when the extension itself is loaded or only loaded when called depends on where in the .pm file the subroutine definition is placed. You can also consult <a href="/perldoc?AutoLoader" class="podlinkpod"
>AutoLoader</a> for an alternate way to store and load your extra subroutines.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Documenting_your_Extension"
>Documenting your Extension</a></h2>

<p>There is absolutely no excuse for not documenting your extension. Documentation belongs in the .pm file. This file will be fed to pod2man, and the embedded documentation will be converted to the manpage format, then placed in the blib directory. It will be copied to Perl&#39;s manpage directory when the extension is installed.</p>

<p>You may intersperse documentation and Perl code within the .pm file. In fact, if you want to use method autoloading, you must do this, as the comment inside the .pm file explains.</p>

<p>See <a href="/~flora/perl-5.14.2/pod/perlpod.pod" class="podlinkpod"
>perlpod</a> for more information about the pod format.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Installing_your_Extension"
>Installing your Extension</a></h2>

<p>Once your extension is complete and passes all its tests, installing it is quite simple: you simply run &#34;make install&#34;. You will either need to have write permission into the directories where Perl is installed, or ask your system administrator to run the make for you.</p>

<p>Alternately, you can specify the exact directory to place the extension&#39;s files by placing a &#34;PREFIX=/destination/directory&#34; after the make install. (or in between the make and install if you have a brain-dead version of make). This can be very useful if you are building an extension that will eventually be distributed to multiple systems. You can then just archive the files in the destination directory and distribute them to your destination systems.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLE_5"
>EXAMPLE 5</a></h2>

<p>In this example, we&#39;ll do some more work with the argument stack. The previous examples have all returned only a single value. We&#39;ll now create an extension that returns an array.</p>

<p>This extension is very Unix-oriented (struct statfs and the statfs system call). If you are not running on a Unix system, you can substitute for statfs any other function that returns multiple values, you can hard-code values to be returned to the caller (although this will be a bit harder to test the error case), or you can simply not do this example. If you change the XSUB, be sure to fix the test cases to match the changes.</p>

<p>Return to the Mytest directory and add the following code to the end of Mytest.xs:</p>

<pre class="sh_perl">        void
        statfs(path)
                char *  path
            INIT:
                int i;
                struct statfs buf;

            PPCODE:
                i = statfs(path, &#38;buf);
                if (i == 0) {
                        XPUSHs(sv_2mortal(newSVnv(buf.f_bavail)));
                        XPUSHs(sv_2mortal(newSVnv(buf.f_bfree)));
                        XPUSHs(sv_2mortal(newSVnv(buf.f_blocks)));
                        XPUSHs(sv_2mortal(newSVnv(buf.f_bsize)));
                        XPUSHs(sv_2mortal(newSVnv(buf.f_ffree)));
                        XPUSHs(sv_2mortal(newSVnv(buf.f_files)));
                        XPUSHs(sv_2mortal(newSVnv(buf.f_type)));
                } else {
                        XPUSHs(sv_2mortal(newSVnv(errno)));
                }</pre>

<p>You&#39;ll also need to add the following code to the top of the .xs file, just after the include of &#34;XSUB.h&#34;:</p>

<pre class="sh_perl">        #include &#60;sys/vfs.h&#62;</pre>

<p>Also add the following code segment to Mytest.t while incrementing the &#34;9&#34; tests to &#34;11&#34;:</p>

<pre class="sh_perl">        @a = &#38;Mytest::statfs(&#34;/blech&#34;);
        ok( scalar(@a) == 1 &#38;&#38; $a[0] == 2 );
        @a = &#38;Mytest::statfs(&#34;/&#34;);
        is( scalar(@a), 7 );</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="New_Things_in_this_Example"
>New Things in this Example</a></h2>

<p>This example added quite a few new concepts. We&#39;ll take them one at a time.</p>

<ul>
<li>The INIT: directive contains code that will be placed immediately after the argument stack is decoded. C does not allow variable declarations at arbitrary locations inside a function, so this is usually the best way to declare local variables needed by the XSUB. (Alternatively, one could put the whole <code>PPCODE:</code> section into braces, and put these declarations on top.)</li>

<li>This routine also returns a different number of arguments depending on the success or failure of the call to statfs. If there is an error, the error number is returned as a single-element array. If the call is successful, then a 7-element array is returned. Since only one argument is passed into this function, we need room on the stack to hold the 7 values which may be returned.
<p>We do this by using the PPCODE: directive, rather than the CODE: directive. This tells <b>xsubpp</b> that we will be managing the return values that will be put on the argument stack by ourselves.</p>
</li>

<li>When we want to place values to be returned to the caller onto the stack, we use the series of macros that begin with &#34;XPUSH&#34;. There are five different versions, for placing integers, unsigned integers, doubles, strings, and Perl scalars on the stack. In our example, we placed a Perl scalar onto the stack. (In fact this is the only macro which can be used to return multiple values.)
<p>The XPUSH* macros will automatically extend the return stack to prevent it from being overrun. You push values onto the stack in the order you want them seen by the calling program.</p>
</li>

<li>The values pushed onto the return stack of the XSUB are actually mortal SV&#39;s. They are made mortal so that once the values are copied by the calling program, the SV&#39;s that held the returned values can be deallocated. If they were not mortal, then they would continue to exist after the XSUB routine returned, but would not be accessible. This is a memory leak.</li>

<li>If we were interested in performance, not in code compactness, in the success branch we would not use <code>XPUSHs</code> macros, but <code>PUSHs</code> macros, and would pre-extend the stack before pushing the return values:
<pre class="sh_perl">        EXTEND(SP, 7);</pre>

<p>The tradeoff is that one needs to calculate the number of return values in advance (though overextending the stack will not typically hurt anything but memory consumption).</p>

<p>Similarly, in the failure branch we could use <code>PUSHs</code> <i>without</i> extending the stack: the Perl function reference comes to an XSUB on the stack, thus the stack is <i>always</i> large enough to take one return value.</p>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLE_6"
>EXAMPLE 6</a></h2>

<p>In this example, we will accept a reference to an array as an input parameter, and return a reference to an array of hashes. This will demonstrate manipulation of complex Perl data types from an XSUB.</p>

<p>This extension is somewhat contrived. It is based on the code in the previous example. It calls the statfs function multiple times, accepting a reference to an array of filenames as input, and returning a reference to an array of hashes containing the data for each of the filesystems.</p>

<p>Return to the Mytest directory and add the following code to the end of Mytest.xs:</p>

<pre class="sh_perl">    SV *
    multi_statfs(paths)
            SV * paths
        INIT:
            AV * results;
            I32 numpaths = 0;
            int i, n;
            struct statfs buf;

            if ((!SvROK(paths))
                || (SvTYPE(SvRV(paths)) != SVt_PVAV)
                || ((numpaths = av_len((AV *)SvRV(paths))) &#60; 0))
            {
                XSRETURN_UNDEF;
            }
            results = (AV *)sv_2mortal((SV *)newAV());
        CODE:
            for (n = 0; n &#60;= numpaths; n++) {
                HV * rh;
                STRLEN l;
                char * fn = SvPV(*av_fetch((AV *)SvRV(paths), n, 0), l);

                i = statfs(fn, &#38;buf);
                if (i != 0) {
                    av_push(results, newSVnv(errno));
                    continue;
                }

                rh = (HV *)sv_2mortal((SV *)newHV());

                hv_store(rh, &#34;f_bavail&#34;, 8, newSVnv(buf.f_bavail), 0);
                hv_store(rh, &#34;f_bfree&#34;,  7, newSVnv(buf.f_bfree),  0);
                hv_store(rh, &#34;f_blocks&#34;, 8, newSVnv(buf.f_blocks), 0);
                hv_store(rh, &#34;f_bsize&#34;,  7, newSVnv(buf.f_bsize),  0);
                hv_store(rh, &#34;f_ffree&#34;,  7, newSVnv(buf.f_ffree),  0);
                hv_store(rh, &#34;f_files&#34;,  7, newSVnv(buf.f_files),  0);
                hv_store(rh, &#34;f_type&#34;,   6, newSVnv(buf.f_type),   0);

                av_push(results, newRV((SV *)rh));
            }
            RETVAL = newRV((SV *)results);
        OUTPUT:
            RETVAL</pre>

<p>And add the following code to Mytest.t, while incrementing the &#34;11&#34; tests to &#34;13&#34;:</p>

<pre class="sh_perl">        $results = Mytest::multi_statfs([ &#39;/&#39;, &#39;/blech&#39; ]);
        ok( ref $results-&#62;[0] );
        ok( ! ref $results-&#62;[1] );</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="New_Things_in_this_Example"
>New Things in this Example</a></h2>

<p>There are a number of new concepts introduced here, described below:</p>

<ul>
<li>This function does not use a typemap. Instead, we declare it as accepting one SV* (scalar) parameter, and returning an SV* value, and we take care of populating these scalars within the code. Because we are only returning one value, we don&#39;t need a <code>PPCODE:</code> directive - instead, we use <code>CODE:</code> and <code>OUTPUT:</code> directives.</li>

<li>When dealing with references, it is important to handle them with caution. The <code>INIT:</code> block first checks that <code>SvROK</code> returns true, which indicates that paths is a valid reference. It then verifies that the object referenced by paths is an array, using <code>SvRV</code> to dereference paths, and <code>SvTYPE</code> to discover its type. As an added test, it checks that the array referenced by paths is non-empty, using the <code>av_len</code> function (which returns -1 if the array is empty). The XSRETURN_UNDEF macro is used to abort the XSUB and return the undefined value whenever all three of these conditions are not met.</li>

<li>We manipulate several arrays in this XSUB. Note that an array is represented internally by an AV* pointer. The functions and macros for manipulating arrays are similar to the functions in Perl: <code>av_len</code> returns the highest index in an AV*, much like $#array; <code>av_fetch</code> fetches a single scalar value from an array, given its index; <code>av_push</code> pushes a scalar value onto the end of the array, automatically extending the array as necessary.
<p>Specifically, we read pathnames one at a time from the input array, and store the results in an output array (results) in the same order. If statfs fails, the element pushed onto the return array is the value of errno after the failure. If statfs succeeds, though, the value pushed onto the return array is a reference to a hash containing some of the information in the statfs structure.</p>

<p>As with the return stack, it would be possible (and a small performance win) to pre-extend the return array before pushing data into it, since we know how many elements we will return:</p>

<pre class="sh_perl">        av_extend(results, numpaths);</pre>
</li>

<li>We are performing only one hash operation in this function, which is storing a new scalar under a key using <code>hv_store</code>. A hash is represented by an HV* pointer. Like arrays, the functions for manipulating hashes from an XSUB mirror the functionality available from Perl. See <a href="/~flora/perl-5.14.2/pod/perlguts.pod" class="podlinkpod"
>perlguts</a> and <a href="/~flora/perl-5.14.2/autodoc.pl" class="podlinkpod"
>perlapi</a> for details.</li>

<li>To create a reference, we use the <code>newRV</code> function. Note that you can cast an AV* or an HV* to type SV* in this case (and many others). This allows you to take references to arrays, hashes and scalars with the same function. Conversely, the <code>SvRV</code> function always returns an SV*, which may need to be cast to the appropriate type if it is something other than a scalar (check with <code>SvTYPE</code>).</li>

<li>At this point, xsubpp is doing very little work - the differences between Mytest.xs and Mytest.c are minimal.</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLE_7_(Coming_Soon)"
>EXAMPLE 7 (Coming Soon)</a></h2>

<p>XPUSH args AND set RETVAL AND assign return value to array</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLE_8_(Coming_Soon)"
>EXAMPLE 8 (Coming Soon)</a></h2>

<p>Setting $!</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLE_9_Passing_open_files_to_XSes"
>EXAMPLE 9 Passing open files to XSes</a></h2>

<p>You would think passing files to an XS is difficult, with all the typeglobs and stuff. Well, it isn&#39;t.</p>

<p>Suppose that for some strange reason we need a wrapper around the standard C library function <code>fputs()</code>. This is all we need:</p>

<pre class="sh_perl">        #define PERLIO_NOT_STDIO 0
        #include &#34;EXTERN.h&#34;
        #include &#34;perl.h&#34;
        #include &#34;XSUB.h&#34;

        #include &#60;stdio.h&#62;

        int
        fputs(s, stream)
                char *          s
                FILE *          stream</pre>

<p>The real work is done in the standard typemap.</p>

<p><b>But</b> you loose all the fine stuff done by the perlio layers. This calls the stdio function <code>fputs()</code>, which knows nothing about them.</p>

<p>The standard typemap offers three variants of PerlIO *: <code>InputStream</code> (T_IN), <code>InOutStream</code> (T_INOUT) and <code>OutputStream</code> (T_OUT). A bare <code>PerlIO *</code> is considered a T_INOUT. If it matters in your code (see below for why it might) #define or typedef one of the specific names and use that as the argument or result type in your XS file.</p>

<p>The standard typemap does not contain PerlIO * before perl 5.7, but it has the three stream variants. Using a PerlIO * directly is not backwards compatible unless you provide your own typemap.</p>

<p>For streams coming <i>from</i> perl the main difference is that <code>OutputStream</code> will get the output PerlIO * - which may make a difference on a socket. Like in our example...</p>

<p>For streams being handed <i>to</i> perl a new file handle is created (i.e. a reference to a new glob) and associated with the PerlIO * provided. If the read/write state of the PerlIO * is not correct then you may get errors or warnings from when the file handle is used. So if you opened the PerlIO * as &#34;w&#34; it should really be an <code>OutputStream</code> if open as &#34;r&#34; it should be an <code>InputStream</code>.</p>

<p>Now, suppose you want to use perlio layers in your XS. We&#39;ll use the perlio <code>PerlIO_puts()</code> function as an example.</p>

<p>In the C part of the XS file (above the first MODULE line) you have</p>

<pre class="sh_perl">        #define OutputStream    PerlIO *
    or
        typedef PerlIO *        OutputStream;</pre>

<p>And this is the XS code:</p>

<pre class="sh_perl">        int
        perlioputs(s, stream)
                char *          s
                OutputStream    stream
        CODE:
                RETVAL = PerlIO_puts(stream, s);
        OUTPUT:
                RETVAL</pre>

<p>We have to use a <code>CODE</code> section because <code>PerlIO_puts()</code> has the arguments reversed compared to <code>fputs()</code>, and we want to keep the arguments the same.</p>

<p>Wanting to explore this thoroughly, we want to use the stdio <code>fputs()</code> on a PerlIO *. This means we have to ask the perlio system for a stdio <code>FILE *</code>:</p>

<pre class="sh_perl">        int
        perliofputs(s, stream)
                char *          s
                OutputStream    stream
        PREINIT:
                FILE *fp = PerlIO_findFILE(stream);
        CODE:
                if (fp != (FILE*) 0) {
                        RETVAL = fputs(s, fp);
                } else {
                        RETVAL = -1;
                }
        OUTPUT:
                RETVAL</pre>

<p>Note: <code>PerlIO_findFILE()</code> will search the layers for a stdio layer. If it can&#39;t find one, it will call <code>PerlIO_exportFILE()</code> to generate a new stdio <code>FILE</code>. Please only call <code>PerlIO_exportFILE()</code> if you want a <i>new</i> <code>FILE</code>. It will generate one on each call and push a new stdio layer. So don&#39;t call it repeatedly on the same file. <code>PerlIO_findFILE()</code> will retrieve the stdio layer once it has been generated by <code>PerlIO_exportFILE()</code>.</p>

<p>This applies to the perlio system only. For versions before 5.7, <code>PerlIO_exportFILE()</code> is equivalent to <code>PerlIO_findFILE()</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Troubleshooting_these_Examples"
>Troubleshooting these Examples</a></h2>

<p>As mentioned at the top of this document, if you are having problems with these example extensions, you might see if any of these help you.</p>

<ul>
<li>In versions of 5.002 prior to the gamma version, the test script in Example 1 will not function properly. You need to change the &#34;use lib&#34; line to read:
<pre class="sh_perl">        use lib &#39;./blib&#39;;</pre>
</li>

<li>In versions of 5.002 prior to version 5.002b1h, the test.pl file was not automatically created by h2xs. This means that you cannot say &#34;make test&#34; to run the test script. You will need to add the following line before the &#34;use extension&#34; statement:
<pre class="sh_perl">        use lib &#39;./blib&#39;;</pre>
</li>

<li>In versions 5.000 and 5.001, instead of using the above line, you will need to use the following line:
<pre class="sh_perl">        BEGIN { unshift(@INC, &#34;./blib&#34;) }</pre>
</li>

<li>This document assumes that the executable named &#34;perl&#34; is Perl version 5. Some systems may have installed Perl version 5 as &#34;perl5&#34;.</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="See_also"
>See also <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>For more information, consult <a href="/~flora/perl-5.14.2/pod/perlguts.pod" class="podlinkpod"
>perlguts</a>, <a href="/~flora/perl-5.14.2/autodoc.pl" class="podlinkpod"
>perlapi</a>, <a href="/~flora/perl-5.14.2/pod/perlxs.pod" class="podlinkpod"
>perlxs</a>, <a href="/~flora/perl-5.14.2/pod/perlmod.pod" class="podlinkpod"
>perlmod</a>, and <a href="/~flora/perl-5.14.2/pod/perlpod.pod" class="podlinkpod"
>perlpod</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Author"
>Author <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Jeff Okamoto &#60;<em>okamoto@corp.hp.com</em>&#62;</p>

<p>Reviewed and assisted by Dean Roehrich, Ilya Zakharevich, Andreas Koenig, and Tim Bunce.</p>

<p>PerlIO material contributed by Lupe Christoph, with some clarification by Nick Ing-Simmons.</p>

<p>Changes for h2xs as of Perl 5.8.x by Renee Baecker</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Last_Changed"
>Last Changed</a></h2>

<p>2007/10/11</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78109 Uploads, 24692 Distributions
105913 Modules, 9639 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Document']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Document']);
    });
  });
</script>
<!-- Mon Apr 23 08:05:32 2012 GMT (0.211058855056763) @cpansearch1 -->
 </body>
</html>
