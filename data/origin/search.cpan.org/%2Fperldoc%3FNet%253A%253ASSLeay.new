<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Net::SSLeay - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Net-SSLeay",3]);
    _gaq.push(["_setCustomVar",5,"Release","Net-SSLeay-1.48",3]);
    _gaq.push(["_setCustomVar",3,"Module","Net::SSLeay",3]);
    _gaq.push(["_setCustomVar",1,"Author","MIKEM",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Net::SSLeay">permalink</a></div>
  <a href="/~mikem/">Mike McCauley</a> &gt;
  <a href="/~mikem/Net-SSLeay-1.48/">Net-SSLeay-1.48</a> &gt;
  Net::SSLeay
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/9bb03ed4704f442eb594a1a469f70b53?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/M/MI/MIKEM/Net-SSLeay-1.48.tar.gz">Net-SSLeay-1.48.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Net%3A%3ASSLeay;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~MIKEM/Net-SSLeay-1.48/lib/Net/SSLeay.pod">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Crypt%3A%3ASSLeay">Crypt::SSLeay</a><br>
<a href="/perldoc?LWP%3A%3AUserAgent">LWP::UserAgent</a><br>
<a href="/perldoc?HTTP%3A%3ARequest">HTTP::Request</a><br>
<a href="/perldoc?XML%3A%3AParser">XML::Parser</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?LWP%3A%3ASimple">LWP::Simple</a><br>
<a href="/perldoc?HTTP%3A%3ADaemon">HTTP::Daemon</a><br>
<a href="/perldoc?IO%3A%3ASocket">IO::Socket</a><br>
<a href="/perldoc?Net%3A%3ASSL">Net::SSL</a><br>
<a href="/perldoc?DBD%3A%3Amysql">DBD::mysql</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Net%3A%3ASSLeay">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 2</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 12</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=net-ssleay">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.48 &nbsp;
<span class="noprint">
  <a href="/src/MIKEM/Net-SSLeay-1.48/lib/Net/SSLeay.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#High_level_functions_for_accessing_web_servers'>High level functions for accessing web servers</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#Basic_set_of_functions'>Basic set of functions</a>
      <li class='indexItem indexItem3'><a href='#Alternate_versions_of_high-level_API'>Alternate versions of high-level API</a>
      <li class='indexItem indexItem3'><a href='#Using_client_certificates'>Using client certificates</a>
      <li class='indexItem indexItem3'><a href='#Working_through_a_web_proxy'>Working through a web proxy</a>
      <li class='indexItem indexItem3'><a href='#HTTP_(without_S)_API'>HTTP (without S) API</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Certificate_verification_and_Certificate_Revocation_Lists_(CRLs)'>Certificate verification and Certificate Revocation Lists (CRLs)</a>
    <li class='indexItem indexItem2'><a href='#Using_Net::SSLeay_in_multi-threaded_applications'>Using Net::SSLeay in multi-threaded applications</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#Initialization'>Initialization</a>
      <li class='indexItem indexItem3'><a href='#Using_callbacks'>Using callbacks</a>
      <li class='indexItem indexItem3'><a href='#Using_openssl_elements'>Using openssl elements</a>
      <li class='indexItem indexItem3'><a href='#Using_other_perl_modules_based_on_Net::SSLeay'>Using other perl modules based on Net::SSLeay</a>
      <li class='indexItem indexItem3'><a href='#Combining_Net::SSLeay_with_other_modules_linked_with_openssl'>Combining Net::SSLeay with other modules linked with openssl</a>
      <li class='indexItem indexItem3'><a href='#Threading_with_get_https_and_friends'>Threading with get_https and friends</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Convenience_routines'>Convenience routines</a>
    <li class='indexItem indexItem2'><a href='#Initialization'>Initialization</a>
    <li class='indexItem indexItem2'><a href='#Error_handling_functions'>Error handling functions</a>
    <li class='indexItem indexItem2'><a href='#Sockets'>Sockets</a>
    <li class='indexItem indexItem2'><a href='#Callbacks'>Callbacks</a>
    <li class='indexItem indexItem2'><a href='#Low_level_API'>Low level API</a>
    <ul   class='indexList indexList3'>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_Version_related_functions'>Low level API: Version related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_Initialization_related_functions'>Low level API: Initialization related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_ERR_*_and_SSL_alert_*_related_functions'>Low level API: ERR_* and SSL_alert_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_SSL_METHOD_*_related_functions'>Low level API: SSL_METHOD_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_ENGINE_*_related_functions'>Low level API: ENGINE_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_EVP_PKEY_*_related_functions'>Low level API: EVP_PKEY_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_PEM_*_related_functions'>Low level API: PEM_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_d2i_*_(DER_format)_related_functions'>Low level API: d2i_* (DER format) related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_PKCS12_related_functions'>Low level API: PKCS12 related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_SESSION_*_related_functions'>Low level API: SESSION_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_SSL_CTX_*_related_functions'>Low level API: SSL_CTX_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_SSL_*_related_functions'>Low level API: SSL_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_RAND_*_related_functions'>Low level API: RAND_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_OBJ_*_related_functions'>Low level API: OBJ_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_ASN1_INTEGER_*_related_functions'>Low level API: ASN1_INTEGER_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_ASN1_STRING_*_related_functions'>Low level API: ASN1_STRING_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_ASN1_TIME_*_related_functions'>Low level API: ASN1_TIME_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_X509_*_related_functions'>Low level API: X509_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_X509_REQ_*_related_functions'>Low level API: X509_REQ_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_X509_CRL_*_related_functions'>Low level API: X509_CRL_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_X509_EXTENSION_*_related_functions'>Low level API: X509_EXTENSION_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_X509_NAME_*_related_functions'>Low level API: X509_NAME_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_X509_STORE_*_related_functions'>Low level API: X509_STORE_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_X509_VERIFY_PARAM_*_related_functions'>Low level API: X509_VERIFY_PARAM_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_Cipher_(EVP_CIPHER_*)_related_functions'>Low level API: Cipher (EVP_CIPHER_*) related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_Digest_(EVP_MD_*)_related_functions'>Low level API: Digest (EVP_MD_*) related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_CIPHER_*_related_functions'>Low level API: CIPHER_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_RSA_*_related_functions'>Low level API: RSA_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_BIO_*_related_functions'>Low level API: BIO_* related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_NPN_(next_protocol_negotiation)_related_functions'>Low level API: NPN (next protocol negotiation) related functions</a>
      <li class='indexItem indexItem3'><a href='#Low_level_API:_Other_functions'>Low level API: Other functions</a>
    </ul>
    <li class='indexItem indexItem2'><a href='#Constants'>Constants</a>
    <li class='indexItem indexItem2'><a href='#INTERNAL_ONLY_functions_(do_not_use_these)'>INTERNAL ONLY functions (do not use these)</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXAMPLES'>EXAMPLES</a>
  <li class='indexItem indexItem1'><a href='#LIMITATIONS'>LIMITATIONS</a>
  <li class='indexItem indexItem1'><a href='#KNOWN_BUGS_AND_CAVEATS'>KNOWN BUGS AND CAVEATS</a>
  <li class='indexItem indexItem1'><a href='#DIAGNOSTICS'>DIAGNOSTICS</a>
  <li class='indexItem indexItem1'><a href='#BUGS_AND_SUPPORT'>BUGS AND SUPPORT</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Net::SSLeay - Perl extension for using OpenSSL</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Net::SSLeay qw(get_https post_https sslcat make_headers make_form);

  ($page) = get_https(&#39;www.bacus.pt&#39;, 443, &#39;/&#39;);                 # Case 1

  ($page, $response, %reply_headers)
         = get_https(&#39;www.bacus.pt&#39;, 443, &#39;/&#39;,                   # Case 2
                make_headers(User-Agent =&#62; &#39;Cryptozilla/5.0b1&#39;,
                             Referer    =&#62; &#39;<a href="https://www.bacus.pt" class="podlinkurl"
>https://www.bacus.pt</a>&#39;
                ));

  ($page, $result, %headers) =                                   # Case 2b
         = get_https(&#39;www.bacus.pt&#39;, 443, &#39;/protected.html&#39;,
              make_headers(Authorization =&#62;
                           &#39;Basic &#39; . MIME::Base64::encode(&#34;$user:$pass&#34;,&#39;&#39;))
              );

  ($page, $response, %reply_headers)
         = post_https(&#39;www.bacus.pt&#39;, 443, &#39;/foo.cgi&#39;, &#39;&#39;,       # Case 3
                make_form(OK   =&#62; &#39;1&#39;,
                          name =&#62; &#39;Sampo&#39;
                ));

  $reply = sslcat($host, $port, $request);                       # Case 4

  ($reply, $err, $server_cert) = sslcat($host, $port, $request); # Case 5

  $Net::SSLeay::trace = 2;  # 0=no debugging, 1=ciphers, 2=trace, 3=dump data

  Net::SSLeay::initialize(); # Initialize ssl library once</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~mikem/Net-SSLeay-1.48/lib/Net/SSLeay.pod" class="podlinkpod"
>Net::SSLeay</a> module contains perl bindings to openssl (<a href="http://www.openssl.org" class="podlinkurl"
>http://www.openssl.org</a>) library.</p>

<p><b>COMPATIBILITY NOTE:</b> <a href="/~mikem/Net-SSLeay-1.48/lib/Net/SSLeay.pod" class="podlinkpod"
>Net::SSLeay</a> cannot be built with pre-0.9.3 openssl. It is strongly recommended to use at least 0.9.7 (as older versions are not tested during development). Some low level API functions may be available with certain openssl versions.</p>

<p><a href="/~mikem/Net-SSLeay-1.48/lib/Net/SSLeay.pod" class="podlinkpod"
>Net::SSLeay</a> module basically comprise of:</p>

<ul>
<li>High level functions for accessing web servers (by using HTTP/HTTPS)</li>

<li>Low level API (mostly mapped 1:1 to openssl&#39;s C functions)</li>

<li>Convenience functions (related to low level API but with more perl friendly interface)</li>
</ul>

<p>There is also a related module called <a href="/~mikem/Net-SSLeay-1.48/lib/Net/SSLeay/Handle.pm" class="podlinkpod"
>Net::SSLeay::Handle</a> included in this distribution that you might want to use instead. It has its own pod documentation.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="High_level_functions_for_accessing_web_servers"
>High level functions for accessing web servers</a></h2>

<p>This module offers some high level convenience functions for accessing web pages on SSL servers (for symmetry, the same API is offered for accessing http servers, too), an <code>sslcat()</code> function for writing your own clients, and finally access to the SSL api of the SSLeay/OpenSSL package so you can write servers or clients for more complicated applications.</p>

<p>For high level functions it is most convenient to import them into your main namespace as indicated in the synopsis.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Basic_set_of_functions"
>Basic set of functions</a></h3>

<ul>
<li>get_https</li>

<li>post_https</li>

<li>put_https</li>

<li>head_https</li>

<li>do_https</li>

<li>sslcat</li>

<li>https_cat</li>

<li>make_form</li>

<li>make_headers</li>
</ul>

<p><b>Case 1 (in SYNOPSIS)</b> demonstrates the typical invocation of get_https() to fetch an HTML page from secure server. The first argument provides the hostname or IP in dotted decimal notation of the remote server to contact. The second argument is the TCP port at the remote end (your own port is picked arbitrarily from high numbered ports as usual for TCP). The third argument is the URL of the page without the host name part. If in doubt consult the HTTP specifications at <a href="http://www.w3c.org" class="podlinkurl"
>http://www.w3c.org</a>.</p>

<p><b>Case 2 (in SYNOPSIS)</b> demonstrates full fledged use of <code>get_https()</code>. As can be seen, <code>get_https()</code> parses the response and response headers and returns them as a list, which can be captured in a hash for later reference. Also a fourth argument to <code>get_https()</code> is used to insert some additional headers in the request. <code>make_headers()</code> is a function that will convert a list or hash to such headers. By default <code>get_https()</code> supplies <code>Host</code> (to make virtual hosting easy) and <code>Accept</code> (reportedly needed by IIS) headers.</p>

<p><b>Case 2b (in SYNOPSIS)</b> demonstrates how to get a password protected page. Refer to the HTTP protocol specifications for further details (e.g. RFC-2617).</p>

<p><b>Case 3 (in SYNOPSIS)</b> invokes <code>post_https()</code> to submit a HTML/CGI form to a secure server. The first four arguments are equal to <code>get_https()</code> (note that the empty string (<code>&#39;&#39;</code>) is passed as header argument). The fifth argument is the contents of the form formatted according to CGI specification. In this case the helper function <code>make_https()</code> is used to do the formatting, but you could pass any string. <code>post_https()</code> automatically adds <code>Content-Type</code> and <code>Content-Length</code> headers to the request.</p>

<p><b>Case 4 (in SYNOPSIS)</b> shows the fundamental <code>sslcat()</code> function (inspired in spirit by the <code>netcat</code> utility :-). It&#39;s your swiss army knife that allows you to easily contact servers, send some data, and then get the response. You are responsible for formatting the data and parsing the response - <code>sslcat()</code> is just a transport.</p>

<p><b>Case 5 (in SYNOPSIS)</b> is a full invocation of <code>sslcat()</code> which allows the return of errors as well as the server (peer) certificate.</p>

<p>The <code>$trace</code> global variable can be used to control the verbosity of the high level functions. Level 0 guarantees silence, level 1 (the default) only emits error messages.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Alternate_versions_of_high-level_API"
>Alternate versions of high-level API</a></h3>

<ul>
<li>get_https3</li>

<li>post_https3</li>

<li>put_https3</li>

<li>get_https4</li>

<li>post_https4</li>

<li>put_https4</li>
</ul>

<p>The above mentioned functions actually return the response headers as a list, which only gets converted to hash upon assignment (this assignment looses information if the same header occurs twice, as may be the case with cookies). There are also other variants of the functions that return unprocessed headers and that return a reference to a hash.</p>

<pre class="sh_perl">  ($page, $response, @headers) = get_https(&#39;www.bacus.pt&#39;, 443, &#39;/&#39;);
  for ($i = 0; $i &#60; $#headers; $i+=2) {
      print &#34;$headers[$i] = &#34; . $headers[$i+1] . &#34;\n&#34;;
  }

  ($page, $response, $headers, $server_cert)
    = get_https3(&#39;www.bacus.pt&#39;, 443, &#39;/&#39;);
  print &#34;$headers\n&#34;;

  ($page, $response, %headers_ref, $server_cert)
    = get_https4(&#39;www.bacus.pt&#39;, 443, &#39;/&#39;);
  for $k (sort keys %{headers_ref}) {
      for $v (@{$headers_ref{$k}}) {
          print &#34;$k = $v\n&#34;;
      }
  }</pre>

<p>All of the above code fragments accomplish the same thing: display all values of all headers. The API functions ending in &#34;3&#34; return the headers simply as a scalar string and it is up to the application to split them up. The functions ending in &#34;4&#34; return a reference to a hash of arrays (see <a href="/perldoc?perlref" class="podlinkpod"
>perlref</a> and <a href="/perldoc?perllol" class="podlinkpod"
>perllol</a> if you are not familiar with complex perl data structures). To access a single value of such a header hash you would do something like</p>

<pre class="sh_perl">  print $headers_ref{COOKIE}[0];</pre>

<p>Variants 3 and 4 also allow you to discover the server certificate in case you would like to store or display it, e.g.</p>

<pre class="sh_perl">  ($p, $resp, $hdrs, $server_cert) = get_https3(&#39;www.bacus.pt&#39;, 443, &#39;/&#39;);
  if (!defined($server_cert) || ($server_cert == 0)) {
      warn &#34;Subject Name: undefined, Issuer  Name: undefined&#34;;
  } else {
      warn &#39;Subject Name: &#39;
          . Net::SSLeay::X509_NAME_oneline(
                 Net::SSLeay::X509_get_subject_name($server_cert))
              . &#39;Issuer  Name: &#39;
                  . Net::SSLeay::X509_NAME_oneline(
                         Net::SSLeay::X509_get_issuer_name($server_cert));
  }</pre>

<p>Beware that this method only allows after the fact verification of the certificate: by the time <code>get_https3()</code> has returned the https request has already been sent to the server, whether you decide to trust it or not. To do the verification correctly you must either employ the OpenSSL certificate verification framework or use the lower level API to first connect and verify the certificate and only then send the http data. See the implementation of <code>ds_https3()</code> for guidance on how to do this.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Using_client_certificates"
>Using client certificates</a></h3>

<p>Secure web communications are encrypted using symmetric crypto keys exchanged using encryption based on the certificate of the server. Therefore in all SSL connections the server must have a certificate. This serves both to authenticate the server to the clients and to perform the key exchange.</p>

<p>Sometimes it is necessary to authenticate the client as well. Two options are available: HTTP basic authentication and a client side certificate. The basic authentication over HTTPS is actually quite safe because HTTPS guarantees that the password will not travel in the clear. Never-the-less, problems like easily guessable passwords remain. The client certificate method involves authentication of the client at the SSL level using a certificate. For this to work, both the client and the server have certificates (which typically are different) and private keys.</p>

<p>The API functions outlined above accept additional arguments that allow one to supply the client side certificate and key files. The format of these files is the same as used for server certificates and the caveat about encrypting private keys applies.</p>

<pre class="sh_perl">  ($page, $result, %headers) =                                   # 2c
         = get_https(&#39;www.bacus.pt&#39;, 443, &#39;/protected.html&#39;,
              make_headers(Authorization =&#62;
                           &#39;Basic &#39; . MIME::Base64::encode(&#34;$user:$pass&#34;,&#39;&#39;)),
              &#39;&#39;, $mime_type6, $path_to_crt7, $path_to_key8);

  ($page, $response, %reply_headers)
         = post_https(&#39;www.bacus.pt&#39;, 443, &#39;/foo.cgi&#39;,           # 3b
              make_headers(&#39;Authorization&#39; =&#62;
                           &#39;Basic &#39; . MIME::Base64::encode(&#34;$user:$pass&#34;,&#39;&#39;)),
              make_form(OK   =&#62; &#39;1&#39;, name =&#62; &#39;Sampo&#39;),
              $mime_type6, $path_to_crt7, $path_to_key8);</pre>

<p><b>Case 2c (in SYNOPSIS)</b> demonstrates getting a password protected page that also requires a client certificate, i.e. it is possible to use both authentication methods simultaneously.</p>

<p><b>Case 3b (in SYNOPSIS)</b> is a full blown POST to a secure server that requires both password authentication and a client certificate, just like in case 2c.</p>

<p>Note: The client will not send a certificate unless the server requests one. This is typically achieved by setting the verify mode to <code>VERIFY_PEER</code> on the server:</p>

<pre class="sh_perl">  Net::SSLeay::set_verify(ssl, Net::SSLeay::VERIFY_PEER, 0);</pre>

<p>See <code>perldoc ~openssl/doc/ssl/SSL_CTX_set_verify.pod</code> for a full description.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Working_through_a_web_proxy"
>Working through a web proxy</a></h3>

<ul>
<li>set_proxy</li>
</ul>

<p><code>Net::SSLeay</code> can use a web proxy to make its connections. You need to first set the proxy host and port using <code>set_proxy()</code> and then just use the normal API functions, e.g:</p>

<pre class="sh_perl">  Net::SSLeay::set_proxy(&#39;gateway.myorg.com&#39;, 8080);
  ($page) = get_https(&#39;www.bacus.pt&#39;, 443, &#39;/&#39;);</pre>

<p>If your proxy requires authentication, you can supply a username and password as well</p>

<pre class="sh_perl">  Net::SSLeay::set_proxy(&#39;gateway.myorg.com&#39;, 8080, &#39;joe&#39;, &#39;salainen&#39;);
  ($page, $result, %headers) =
         = get_https(&#39;www.bacus.pt&#39;, 443, &#39;/protected.html&#39;,
              make_headers(Authorization =&#62;
                           &#39;Basic &#39; . MIME::Base64::encode(&#34;susie:pass&#34;,&#39;&#39;))
              );</pre>

<p>This example demonstrates the case where we authenticate to the proxy as <code>&#34;joe&#34;</code> and to the final web server as <code>&#34;susie&#34;</code>. Proxy authentication requires the <code>MIME::Base64</code> module to work.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="HTTP_(without_S)_API"
>HTTP (without S) API</a></h3>

<ul>
<li>get_http</li>

<li>post_http</li>

<li>tcpcat</li>

<li>get_httpx</li>

<li>post_httpx</li>

<li>tcpxcat</li>
</ul>

<p>Over the years it has become clear that it would be convenient to use the light-weight flavour API of <code>Net::SSLeay</code> for normal HTTP as well (see <code>LWP</code> for the heavy-weight object-oriented approach). In fact it would be nice to be able to flip https on and off on the fly. Thus regular HTTP support was evolved.</p>

<pre class="sh_perl">  use Net::SSLeay qw(get_http post_http tcpcat
                      get_httpx post_httpx tcpxcat
                      make_headers make_form);

  ($page, $result, %headers)
         = get_http(&#39;www.bacus.pt&#39;, 443, &#39;/protected.html&#39;,
              make_headers(Authorization =&#62;
                           &#39;Basic &#39; . MIME::Base64::encode(&#34;$user:$pass&#34;,&#39;&#39;))
              );

  ($page, $response, %reply_headers)
         = post_http(&#39;www.bacus.pt&#39;, 443, &#39;/foo.cgi&#39;, &#39;&#39;,
                make_form(OK   =&#62; &#39;1&#39;,
                          name =&#62; &#39;Sampo&#39;
                ));

  ($reply, $err) = tcpcat($host, $port, $request);

  ($page, $result, %headers)
         = get_httpx($usessl, &#39;www.bacus.pt&#39;, 443, &#39;/protected.html&#39;,
              make_headers(Authorization =&#62;
                           &#39;Basic &#39; . MIME::Base64::encode(&#34;$user:$pass&#34;,&#39;&#39;))
              );

  ($page, $response, %reply_headers)
         = post_httpx($usessl, &#39;www.bacus.pt&#39;, 443, &#39;/foo.cgi&#39;, &#39;&#39;,
                make_form(OK   =&#62; &#39;1&#39;,  name =&#62; &#39;Sampo&#39; ));

  ($reply, $err, $server_cert) = tcpxcat($usessl, $host, $port, $request);</pre>

<p>As can be seen, the <code>&#34;x&#34;</code> family of APIs takes as the first argument a flag which indicates whether SSL is used or not.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Certificate_verification_and_Certificate_Revocation_Lists_(CRLs)"
>Certificate verification and Certificate Revocation Lists (CRLs)</a></h2>

<p>OpenSSL supports the ability to verify peer certificates. It can also optionally check the peer certificate against a Certificate Revocation List (CRL) from the certificates issuer. A CRL is a file, created by the certificate issuer that lists all the certificates that it previously signed, but which it now revokes. CRLs are in PEM format.</p>

<p>You can enable <code>Net::SSLeay CRL</code> checking like this:</p>

<pre class="sh_perl">            &#38;Net::SSLeay::X509_STORE_set_flags
                (&#38;Net::SSLeay::CTX_get_cert_store($ssl),
                 &#38;Net::SSLeay::X509_V_FLAG_CRL_CHECK);</pre>

<p>After setting this flag, if OpenSSL checks a peer&#39;s certificate, then it will attempt to find a CRL for the issuer. It does this by looking for a specially named file in the search directory specified by CTX_load_verify_locations. CRL files are named with the hash of the issuer&#39;s subject name, followed by <code>.r0</code>, <code>.r1</code> etc. For example <code>ab1331b2.r0</code>, <code>ab1331b2.r1</code>. It will read all the .r files for the issuer, and then check for a revocation of the peer certificate in all of them. (You can also force it to look in a specific named CRL file., see below). You can find out the hash of the issuer subject name in a CRL with</p>

<pre class="sh_perl">        openssl crl -in crl.pem -hash -noout</pre>

<p>If the peer certificate does not pass the revocation list, or if no CRL is found, then the handshaking fails with an error.</p>

<p>You can also force OpenSSL to look for CRLs in one or more arbitrarily named files.</p>

<pre class="sh_perl">    my $bio = Net::SSLeay::BIO_new_file($crlfilename, &#39;r&#39;);
    my $crl = Net::SSLeay::PEM_read_bio_X509_CRL($bio);
    if ($crl) {
        Net::SSLeay::X509_STORE_add_crl(
             Net::SSLeay::CTX_get_cert_store($ssl, $crl)
        );
    } else {
        error reading CRL....
    }</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Using_Net::SSLeay_in_multi-threaded_applications"
>Using Net::SSLeay in multi-threaded applications</a></h2>

<p><b>IMPORTANT: versions 1.42 or earlier are not thread-safe!</b></p>

<p>Net::SSLeay module implements all necessary stuff to be ready for multi-threaded environment - it requires openssl-0.9.7 or newer. The implementation fully follows thread safety related requirements of openssl library(see <a href="http://www.openssl.org/docs/crypto/threads.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/threads.html</a>).</p>

<p>If you are about to use Net::SSLeay (or any other module based on Net::SSLeay) in multi-threaded perl application it is recommended to follow this best-practice:</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Initialization"
>Initialization</a></h3>

<p>Load and initialize Net::SSLeay module in the main thread:</p>

<pre class="sh_perl">    use threads;
    use Net::SSLeay;

    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();

    sub do_master_job {
      #... call whatever from Net::SSLeay
    }

    sub do_worker_job {
      #... call whatever from Net::SSLeay
    }

    #start threads
    my $master  = threads-&#62;new(\&#38;do_master_job, &#39;param1&#39;, &#39;param2&#39;);
    my @workers = threads-&#62;new(\&#38;do_worker_job, &#39;arg1&#39;, &#39;arg2&#39;) for (1..10);

    #waiting for all threads to finish
    $_-&#62;join() for (threads-&#62;list);</pre>

<p>NOTE: Openssl&#39;s <code>int SSL_library_init(void)</code> function (which is also aliased as <code>SSLeay_add_ssl_algorithms</code>, <code>OpenSSL_add_ssl_algorithms</code> and <code>add_ssl_algorithms</code>) is not re-entrant and multiple calls can cause a crash in threaded application. Net::SSLeay implements flags preventing repeated calls to this function, therefore even multiple initialization via Net::SSLeay::SSLeay_add_ssl_algorithms() should work without trouble.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Using_callbacks"
>Using callbacks</a></h3>

<p>Do not use callbacks across threads (the module blocks cross-thread callback operations and throws a warning). Allways do the callback setup, callback use and callback destruction within the same thread.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Using_openssl_elements"
>Using openssl elements</a></h3>

<p>All openssl elements (X509, SSL_CTX, ...) can be directly passed between threads.</p>

<pre class="sh_perl">    use threads;
    use Net::SSLeay;

    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();

    sub do_job {
      my $context = shift;
      Net::SSLeay::CTX_set_default_passwd_cb($context, sub { &#34;secret&#34; });
      #...
    }

    my $c = Net::SSLeay::CTX_new();
    threads-&#62;create(\&#38;do_job, $c);</pre>

<p>Or:</p>

<pre class="sh_perl">    use threads;
    use Net::SSLeay;

    my $context; #does not need to be &#39;shared&#39;

    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();

    sub do_job {
      Net::SSLeay::CTX_set_default_passwd_cb($context, sub { &#34;secret&#34; });
      #...
    }

    $context = Net::SSLeay::CTX_new();
    threads-&#62;create(\&#38;do_job);</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Using_other_perl_modules_based_on_Net::SSLeay"
>Using other perl modules based on Net::SSLeay</a></h3>

<p>It should be fine to use any other module based on <a href="/~mikem/Net-SSLeay-1.48/lib/Net/SSLeay.pod" class="podlinkpod"
>Net::SSLeay</a> (like <a href="/perldoc?IO%3A%3ASocket%3A%3ASSL" class="podlinkpod"
>IO::Socket::SSL</a>) in multi-threaded applications. It is generally recommended to do any global initialization of such a module in the main thread before calling <code>threads-&#62;new(..)</code> or <code>threads-&#62;create(..)</code> but it might differ module by module.</p>

<p>To be play safe you can load and init Net::SSLeay explicitly in the main thread:</p>

<pre class="sh_perl">    use Net::SSLeay;
    use Other::SSLeay::Based::Module;

    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();Net::SSLeay::initialize();
    Net::SSLeay::initialize();</pre>

<p>Or even safer:</p>

<pre class="sh_perl">    use Net::SSLeay;
    use Other::SSLeay::Based::Module;

    BEGIN {
      Net::SSLeay::load_error_strings();
      Net::SSLeay::SSLeay_add_ssl_algorithms();
      Net::SSLeay::randomize();Net::SSLeay::initialize();
    }</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Combining_Net::SSLeay_with_other_modules_linked_with_openssl"
>Combining Net::SSLeay with other modules linked with openssl</a></h3>

<p><b>BEWARE: This might be a big trouble! This is not guaranteed be thread-safe!</b></p>

<p>There are many other (XS) modules linked directly to openssl library (like <a href="/perldoc?Crypt%3A%3ASSLeay" class="podlinkpod"
>Crypt::SSLeay</a>).</p>

<p>As it is expected that also &#34;another&#34; module will call <code>SSLeay_add_ssl_algorithms</code> at some point we have again a trouble with multiple openssl initialization by Net::SSLeay and &#34;another&#34; module.</p>

<p>As you can expect Net::SSLeay is not able to avoid multiple initialization of openssl library called by &#34;another&#34; module, thus you have to handle this on your own (in some cases it might not be possible at all to avoid this).</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Threading_with_get_https_and_friends"
>Threading with get_https and friends</a></h3>

<p>The convenience functions get_https, post_https etc all initialize the SSL library by calling Net::SSLeay::initialize which does the conventional library initialization:</p>

<pre class="sh_perl">    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();</pre>

<p>Net::SSLeay::initialize initializes the SSL library at most once. You can override the Net::SSLeay::initialize function if you desire some other type of initialization behaviour by get_https and friends. You can call Net::SSLeay::initialize from your own code if you desire this conventional library initialization.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Convenience_routines"
>Convenience routines</a></h2>

<p>To be used with Low level API</p>

<pre class="sh_perl">    Net::SSLeay::randomize($rn_seed_file,$additional_seed);
    Net::SSLeay::set_cert_and_key($ctx, $cert_path, $key_path);
    $cert = Net::SSLeay::dump_peer_certificate($ssl);
    Net::SSLeay::ssl_write_all($ssl, $message) or die &#34;ssl write failure&#34;;
    $got = Net::SSLeay::ssl_read_all($ssl) or die &#34;ssl read failure&#34;;

    $got = Net::SSLeay::ssl_read_CRLF($ssl [, $max_length]);
    $got = Net::SSLeay::ssl_read_until($ssl [, $delimit [, $max_length]]);
    Net::SSLeay::ssl_write_CRLF($ssl, $message);</pre>

<ul>
<li>randomize
<p>seeds the openssl PRNG with <code>/dev/urandom</code> (see the top of <code>SSLeay.pm</code> for how to change or configure this) and optionally with user provided data. It is very important to properly seed your random numbers, so do not forget to call this. The high level API functions automatically call <code>randomize()</code> so it is not needed with them. See also caveats.</p>
</li>

<li>set_cert_and_key
<p>takes two file names as arguments and sets the certificate and private key to those. This can be used to set either server certificates or client certificates.</p>
</li>

<li>dump_peer_certificate
<p>allows you to get a plaintext description of the certificate the peer (usually the server) presented to us.</p>
</li>

<li>ssl_read_all
<p>see ssl_write_all (below)</p>
</li>

<li>ssl_write_all
<p><code>ssl_read_all()</code> and <code>ssl_write_all()</code> provide true blocking semantics for these operations (see limitation, below, for explanation). These are much preferred to the low level API equivalents (which implement BSD blocking semantics). The message argument to <code>ssl_write_all()</code> can be a reference. This is helpful to avoid unnecessary copying when writing something big, e.g:</p>

<pre class="sh_perl">    $data = &#39;A&#39; x 1000000000;
    Net::SSLeay::ssl_write_all($ssl, \$data) or die &#34;ssl write failed&#34;;</pre>
</li>

<li>ssl_read_CRLF
<p>uses <code>ssl_read_all()</code> to read in a line terminated with a carriage return followed by a linefeed (CRLF). The CRLF is included in the returned scalar.</p>
</li>

<li>ssl_read_until
<p>uses <code>ssl_read_all()</code> to read from the SSL input stream until it encounters a programmer specified delimiter. If the delimiter is undefined, <code>$/</code> is used. If <code>$/</code> is undefined, <code>\n</code> is used. One can optionally set a maximum length of bytes to read from the SSL input stream.</p>
</li>

<li>ssl_write_CRLF
<p>writes <code>$message</code> and appends CRLF to the SSL output stream.</p>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Initialization"
>Initialization</a></h2>

<p>In order to use the low level API you should start your programs with the following incantation:</p>

<pre class="sh_perl">        use Net::SSLeay qw(die_now die_if_ssl_error);
        Net::SSLeay::load_error_strings();
        Net::SSLeay::SSLeay_add_ssl_algorithms();    # Important!
        Net::SSLeay::ENGINE_load_builtin_engines();  # If you want built-in engines
        Net::SSLeay::ENGINE_register_all_complete(); # If you want built-in engines
        Net::SSLeay::randomize();</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Error_handling_functions"
>Error handling functions</a></h2>

<p>I can not emphasize the need to check for error enough. Use these functions even in the most simple programs, they will reduce debugging time greatly. Do not ask questions on the mailing list without having first sprinkled these in your code.</p>

<ul>
<li>die_now</li>

<li>die_if_ssl_error
<p><code>die_now()</code> and <code>die_if_ssl_error()</code> are used to conveniently print the SSLeay error stack when something goes wrong:</p>

<pre class="sh_perl">        Net::SSLeay::connect($ssl) or die_now(&#34;Failed SSL connect ($!)&#34;);


        Net::SSLeay::write($ssl, &#34;foo&#34;) or die_if_ssl_error(&#34;SSL write ($!)&#34;);</pre>
</li>

<li>print_errs
<p>You can also use <code>Net::SSLeay::print_errs()</code> to dump the error stack without exiting the program. As can be seen, your code becomes much more readable if you import the error reporting functions into your main name space.</p>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Sockets"
>Sockets</a></h2>

<p>Perl uses file handles for all I/O. While SSLeay has a quite flexible BIO mechanism and perl has an evolved PerlIO mechanism, this module still sticks to using file descriptors. Thus to attach SSLeay to a socket you should use <code>fileno()</code> to extract the underlying file descriptor:</p>

<pre class="sh_perl">    Net::SSLeay::set_fd($ssl, fileno(S));   # Must use fileno</pre>

<p>You should also set <code>$|</code> to 1 to eliminate STDIO buffering so you do not get confused if you use perl I/O functions to manipulate your socket handle.</p>

<p>If you need to <code>select(2)</code> on the socket, go right ahead, but be warned that OpenSSL does some internal buffering so SSL_read does not always return data even if the socket selected for reading (just keep on selecting and trying to read). <code>Net::SSLeay</code> is no different from the C language OpenSSL in this respect.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Callbacks"
>Callbacks</a></h2>

<p>You can establish a per-context verify callback function something like this:</p>

<pre class="sh_perl">        sub verify {
            my ($ok, $x509_store_ctx) = @_;
            print &#34;Verifying certificate...\n&#34;;
                ...
            return $ok;
        }</pre>

<p>It is used like this:</p>

<pre class="sh_perl">        Net::SSLeay::set_verify ($ssl, Net::SSLeay::VERIFY_PEER, \&#38;verify);</pre>

<p>Per-context callbacks for decrypting private keys are implemented.</p>

<pre class="sh_perl">        Net::SSLeay::CTX_set_default_passwd_cb($ctx, sub { &#34;top-secret&#34; });
        Net::SSLeay::CTX_use_PrivateKey_file($ctx, &#34;key.pem&#34;,
                                             Net::SSLeay::FILETYPE_PEM)
            or die &#34;Error reading private key&#34;;
        Net::SSLeay::CTX_set_default_passwd_cb($ctx, undef);</pre>

<p>If Hello Extensions are supported by your OpenSSL, a session secret callback can be set up to be called when a session secret is set by openssl.</p>

<p>Establish it like this: Net::SSLeay::set_session_secret_cb($ssl, \&#38;session_secret_cb, $somedata);</p>

<p>It will be called like this:</p>

<pre class="sh_perl">    sub session_secret_cb
    {
        my ($secret, \@cipherlist, \$preferredcipher, $somedata) = @_;
    }</pre>

<p>No other callbacks are implemented. You do not need to use any callback for simple (i.e. normal) cases where the SSLeay built-in verify mechanism satisfies your needs.</p>

<p>It is required to reset these callbacks to undef immediately after use to prevent memory leaks, thread safety problems and crashes on exit that can occur if different threads set different callbacks.</p>

<p>If you want to use callback stuff, see examples/callback.pl! It&#39;s the only one I am able to make work reliably.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API"
>Low level API</a></h2>

<p>In addition to the high level functions outlined above, this module contains straight-forward access to CRYPTO and SSL parts of OpenSSL C API.</p>

<p>See the <code>*.h</code> headers from OpenSSL C distribution for a list of low level SSLeay functions to call (check SSLeay.xs to see if some function has been implemented). The module strips the initial <code>&#34;SSL_&#34;</code> off of the SSLeay names. Generally you should use <code>Net::SSLeay::</code> in its place.</p>

<p>Note that some functions are prefixed with <code>&#34;P_&#34;</code> - these are very close to the original API however contain some kind of a wrapper making its interface more perl friendly.</p>

<p>For example:</p>

<p>In C:</p>

<pre class="sh_perl">        #include &#60;ssl.h&#62;

        err = SSL_set_verify (ssl, SSL_VERIFY_CLIENT_ONCE,
                                   &#38;your_call_back_here);</pre>

<p>In Perl:</p>

<pre class="sh_perl">        use Net::SSLeay;

        $err = Net::SSLeay::set_verify ($ssl,
                                        Net::SSLeay::VERIFY_CLIENT_ONCE,
                                        \&#38;your_call_back_here);</pre>

<p>If the function does not start with <code>SSL_</code> you should use the full function name, e.g.:</p>

<pre class="sh_perl">        $err = Net::SSLeay::ERR_get_error;</pre>

<p>The following new functions behave in perlish way:</p>

<pre class="sh_perl">        $got = Net::SSLeay::read($ssl);
                                    # Performs SSL_read, but returns $got
                                    # resized according to data received.
                                    # Returns undef on failure.

        Net::SSLeay::write($ssl, $foo) || die;
                                    # Performs SSL_write, but automatically
                                    # figures out the size of $foo</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_Version_related_functions"
>Low level API: Version related functions</a></h3>

<ul>
<li>SSLeay
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before</p>

<p>Gives version number (numeric) of underlaying openssl library.</p>

<pre class="sh_perl"> my $ver_number = Net::SSLeay::SSLeay();
 # returns: the number identifying the openssl release
 #
 # 0x00903100 =&#62; openssl-0.9.3
 # 0x00904100 =&#62; openssl-0.9.4
 # 0x00905100 =&#62; openssl-0.9.5
 # 0x0090600f =&#62; openssl-0.9.6
 # 0x0090601f =&#62; openssl-0.9.6a
 # 0x0090602f =&#62; openssl-0.9.6b
 # ...
 # 0x009060df =&#62; openssl-0.9.6m
 # 0x0090700f =&#62; openssl-0.9.7
 # 0x0090701f =&#62; openssl-0.9.7a
 # 0x0090702f =&#62; openssl-0.9.7b
 # ...
 # 0x009070df =&#62; openssl-0.9.7m
 # 0x0090800f =&#62; openssl-0.9.8
 # 0x0090801f =&#62; openssl-0.9.8a
 # 0x0090802f =&#62; openssl-0.9.8b
 # ...
 # 0x0090814f =&#62; openssl-0.9.8t
 # 0x1000000f =&#62; openssl-1.0.0
 # 0x1000004f =&#62; openssl-1.0.0d
 # 0x1000007f =&#62; openssl-1.0.0g</pre>

<p>You can use it like this:</p>

<pre class="sh_perl">  if (Net::SSLeay::SSLeay() &#60; 0x0090800f) {
    die &#34;you need openssl-0.9.8 or higher&#34;;
  }</pre>
</li>

<li>SSLeay_version
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before</p>

<p>Gives version number (string) of underlaying openssl library.</p>

<pre class="sh_perl"> my $ver_string = Net::SSLeay::SSLeay_version($type);
 # $type
 #   0 (=SSLEAY_VERSION) - e.g. &#39;OpenSSL 1.0.0d 8 Feb 2011&#39;
 #   2 (=SSLEAY_CFLAGS)  - e.g. &#39;compiler: gcc -D_WINDLL -DOPENSSL_USE_APPLINK .....&#39;
 #   3 (=SSLEAY_BUILT_ON)- e.g. &#39;built on: Fri May  6 00:00:46 GMT 2011&#39;
 #   4 (=SSLEAY_PLATFORM)- e.g. &#39;platform: mingw&#39;
 #
 # returns: string

 Net::SSLeay::SSLeay_version();
 #is equivalent to
 Net::SSLeay::SSLeay_version(0);</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/SSLeay_version.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/SSLeay_version.html</a></p>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_Initialization_related_functions"
>Low level API: Initialization related functions</a></h3>

<ul>
<li>library_init
<p>Initialize SSL library by registering algorithms.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::library_init();
 #
 # returns: always 1</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_library_init.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_library_init.html</a></p>
</li>

<li>add_ssl_algorithms
<p>The alias for <a href="#library_init" class="podlinkpod"
>&#34;library_init&#34;</a></p>

<pre class="sh_perl"> Net::SSLeay::add_ssl_algorithms();</pre>
</li>

<li>OpenSSL_add_ssl_algorithms
<p>The alias for <a href="#library_init" class="podlinkpod"
>&#34;library_init&#34;</a></p>

<pre class="sh_perl"> Net::SSLeay::OpenSSL_add_ssl_algorithms();</pre>
</li>

<li>SSLeay_add_ssl_algorithms
<p>The alias for <a href="#library_init" class="podlinkpod"
>&#34;library_init&#34;</a></p>

<pre class="sh_perl"> Net::SSLeay::SSLeay_add_ssl_algorithms();</pre>
</li>

<li>load_error_strings
<p>Registers the error strings for all libcrypto + libssl related functions.</p>

<pre class="sh_perl"> Net::SSLeay::load_error_strings();
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html</a></p>
</li>

<li>ERR_load_crypto_strings
<p>Registers the error strings for all libcrypto functions. No need to call this function if you have already called <a href="#load_error_strings" class="podlinkpod"
>&#34;load_error_strings&#34;</a>.</p>

<pre class="sh_perl"> Net::SSLeay::ERR_load_crypto_strings();
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html</a></p>
</li>

<li>ERR_load_RAND_strings
<p>Registers the error strings for RAND related functions. No need to call this function if you have already called <a href="#load_error_strings" class="podlinkpod"
>&#34;load_error_strings&#34;</a>.</p>

<pre class="sh_perl"> Net::SSLeay::ERR_load_RAND_strings();
 #
 # returns: no return value</pre>
</li>

<li>ERR_load_SSL_strings
<p>Registers the error strings for SSL related functions. No need to call this function if you have already called <a href="#load_error_strings" class="podlinkpod"
>&#34;load_error_strings&#34;</a>.</p>

<pre class="sh_perl"> Net::SSLeay::ERR_load_SSL_strings();
 #
 # returns: no return value</pre>
</li>

<li>OpenSSL_add_all_algorithms
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Add algorithms to internal table.</p>

<pre class="sh_perl"> Net::SSLeay::OpenSSL_add_all_algorithms();
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/OpenSSL_add_all_algorithms.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/OpenSSL_add_all_algorithms.html</a></p>
</li>

<li>OPENSSL_add_all_algorithms_conf
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Similar to <a href="#OpenSSL_add_all_algorithms" class="podlinkpod"
>&#34;OpenSSL_add_all_algorithms&#34;</a> - will ALWAYS load the config file</p>

<pre class="sh_perl"> Net::SSLeay::OPENSSL_add_all_algorithms_conf();
 #
 # returns: no return value</pre>
</li>

<li>OPENSSL_add_all_algorithms_noconf
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Similar to <a href="#OpenSSL_add_all_algorithms" class="podlinkpod"
>&#34;OpenSSL_add_all_algorithms&#34;</a> - will NEVER load the config file</p>

<pre class="sh_perl"> Net::SSLeay::OPENSSL_add_all_algorithms_noconf();
 #
 # returns: no return value</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_ERR_*_and_SSL_alert_*_related_functions"
>Low level API: ERR_* and SSL_alert_* related functions</a></h3>

<p><b>NOTE:</b> Please note that SSL_alert_* function have &#34;SSL_&#34; part stripped from their names.</p>

<ul>
<li>ERR_clear_error
<p>Clear the error queue.</p>

<pre class="sh_perl"> Net::SSLeay::ERR_clear_error();
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/ERR_clear_error.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/ERR_clear_error.html</a></p>
</li>

<li>ERR_error_string
<p>Generates a human-readable string representing the error code $error.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::ERR_error_string($error);
 # $error - (unsigned integer) error code
 #
 # returns: string</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/ERR_error_string.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/ERR_error_string.html</a></p>
</li>

<li>ERR_get_error
<p>Returns the earliest error code from the thread&#39;s error queue and removes the entry. This function can be called repeatedly until there are no more error codes to return.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::ERR_get_error();
 #
 # returns: (unsigned integer) error code</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/ERR_get_error.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/ERR_get_error.html</a></p>
</li>

<li>ERR_peek_error
<p>Returns the earliest error code from the thread&#39;s error queue without modifying it.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::ERR_peek_error();
 #
 # returns: (unsigned integer) error code</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/ERR_get_error.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/ERR_get_error.html</a></p>
</li>

<li>ERR_put_error
<p>Adds an error code to the thread&#39;s error queue. It signals that the error of $reason code reason occurred in function $func of library $lib, in line number $line of $file.</p>

<pre class="sh_perl"> Net::SSLeay::ERR_put_error($lib, $func, $reason, $file, $line);
 # $lib - (integer) library id (check openssl/err.h for constants e.g. ERR_LIB_SSL)
 # $func - (integer) function id (check openssl/ssl.h for constants e.g. SSL_F_SSL23_READ)
 # $reason - (integer) reason id (check openssl/ssl.h for constants e.g. SSL_R_SSL_HANDSHAKE_FAILURE)
 # $file - (string) file name
 # $line - (integer) line number in $file
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/ERR_put_error.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/ERR_put_error.html</a> and <a href="http://www.openssl.org/docs/crypto/err.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/err.html</a></p>
</li>

<li>alert_desc_string
<p>Returns a two letter string as a short form describing the reason of the alert specified by value.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::alert_desc_string($value);
 # $value - (integer) allert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
 #
 # returns: description string (2 letters)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_alert_type_string.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_alert_type_string.html</a></p>
</li>

<li>alert_desc_string_long
<p>Returns a string describing the reason of the alert specified by value.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::alert_desc_string_long($value);
 # $value - (integer) allert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
 #
 # returns: description string</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_alert_type_string.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_alert_type_string.html</a></p>
</li>

<li>alert_type_string
<p>Returns a one letter string indicating the type of the alert specified by value.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::alert_type_string($value);
 # $value - (integer) allert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
 #
 # returns: string (1 letter)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_alert_type_string.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_alert_type_string.html</a></p>
</li>

<li>alert_type_string_long
<p>Returns a string indicating the type of the alert specified by value.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::alert_type_string_long($value);
 # $value - (integer) allert id (check openssl/ssl.h for SSL3_AD_* and TLS1_AD_* constants)
 #
 # returns: string</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_alert_type_string.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_alert_type_string.html</a></p>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_SSL_METHOD_*_related_functions"
>Low level API: SSL_METHOD_* related functions</a></h3>

<ul>
<li>SSLv2_method
<p>Returns SSL_METHOD structure corresponding to SSLv2 method, the return value can be later used as a param of <a href="#CTX_new_with_method" class="podlinkpod"
>&#34;CTX_new_with_method&#34;</a>.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SSLv2_method();
 #
 # returns: value corresponding to openssl&#39;s SSL_METHOD structure (0 on failure)</pre>
</li>

<li>SSLv3_method
<p>Returns SSL_METHOD structure corresponding to SSLv3 method, the return value can be later used as a param of <a href="#CTX_new_with_method" class="podlinkpod"
>&#34;CTX_new_with_method&#34;</a>.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SSLv3_method();
 #
 # returns: value corresponding to openssl&#39;s SSL_METHOD structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_new.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_new.html</a></p>
</li>

<li>TLSv1_method
<p>Returns SSL_METHOD structure corresponding to TLSv1 method, the return value can be later used as a param of <a href="#CTX_new_with_method" class="podlinkpod"
>&#34;CTX_new_with_method&#34;</a>.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::TLSv1_method();
 #
 # returns: value corresponding to openssl&#39;s SSL_METHOD structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_new.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_new.html</a></p>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_ENGINE_*_related_functions"
>Low level API: ENGINE_* related functions</a></h3>

<ul>
<li>ENGINE_load_builtin_engines
<p>Load all bundled ENGINEs into memory and make them visible.</p>

<pre class="sh_perl"> Net::SSLeay::ENGINE_load_builtin_engines();
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/engine.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/engine.html</a></p>
</li>

<li>ENGINE_register_all_complete
<p>Register all loaded ENGINEs for every algorithm they collectively implement.</p>

<pre class="sh_perl"> Net::SSLeay::ENGINE_register_all_complete();
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/engine.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/engine.html</a></p>
</li>

<li>ENGINE_set_default
<p>Set default engine to $e + set its flags to $flags.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::ENGINE_set_default($e, $flags);
 # $e - value corresponding to openssl&#39;s ENGINE structure
 # $flags - (integer) engine flags
 #          flags value can be made by bitwise &#34;OR&#34;ing:
 #          0x0001 - ENGINE_METHOD_RSA
 #          0x0002 - ENGINE_METHOD_DSA
 #          0x0004 - ENGINE_METHOD_DH
 #          0x0008 - ENGINE_METHOD_RAND
 #          0x0010 - ENGINE_METHOD_ECDH
 #          0x0020 - ENGINE_METHOD_ECDSA
 #          0x0040 - ENGINE_METHOD_CIPHERS
 #          0x0080 - ENGINE_METHOD_DIGESTS
 #          0x0100 - ENGINE_METHOD_STORE
 #          0x0200 - ENGINE_METHOD_PKEY_METHS
 #          0x0400 - ENGINE_METHOD_PKEY_ASN1_METHS
 #          Obvious all-or-nothing cases:
 #          0xFFFF - ENGINE_METHOD_ALL
 #          0x0000 - ENGINE_METHOD_NONE
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/engine.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/engine.html</a></p>
</li>

<li>ENGINE_by_id
<p>Get ENGINE by its identification $id.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::ENGINE_by_id($id);
 # $id - (string) engine identification e.g. &#34;dynamic&#34;
 #
 # returns: value corresponding to openssl&#39;s ENGINE structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/engine.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/engine.html</a></p>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_EVP_PKEY_*_related_functions"
>Low level API: EVP_PKEY_* related functions</a></h3>

<ul>
<li>EVP_PKEY_copy_parameters
<p>Copies the parameters from key $from to key $to.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_PKEY_copy_parameters($to, $from);
 # $to - value corresponding to openssl&#39;s EVP_PKEY structure
 # $from - value corresponding to openssl&#39;s EVP_PKEY structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/EVP_PKEY_cmp.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/EVP_PKEY_cmp.html</a></p>
</li>

<li>EVP_PKEY_new
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Creates a new EVP_PKEY structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_PKEY_new();
 #
 # returns: value corresponding to openssl&#39;s EVP_PKEY structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/EVP_PKEY_new.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/EVP_PKEY_new.html</a></p>
</li>

<li>EVP_PKEY_free
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Free an allocated EVP_PKEY structure.</p>

<pre class="sh_perl"> Net::SSLeay::EVP_PKEY_free($pkey);
 # $pkey - value corresponding to openssl&#39;s EVP_PKEY structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/EVP_PKEY_new.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/EVP_PKEY_new.html</a></p>
</li>

<li>EVP_PKEY_assign_RSA
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Set the key referenced by $pkey to $key</p>

<p><b>NOTE:</b> In accordance with the OpenSSL naming convention the $key assigned to the $pkey using the &#34;1&#34; functions must be freed as well as $pkey.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_PKEY_assign_RSA($pkey, $key);
 # $pkey - value corresponding to openssl&#39;s EVP_PKEY structure
 # $key - value corresponding to openssl&#39;s RSA structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/EVP_PKEY_set1_RSA.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/EVP_PKEY_set1_RSA.html</a></p>
</li>

<li>EVP_PKEY_bits
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns the size of the key $pkey in bits.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_PKEY_bits($pkey);
 # $pkey - value corresponding to openssl&#39;s EVP_PKEY structure
 #
 # returns: size in bits</pre>
</li>

<li>EVP_PKEY_size
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns the maximum size of a signature in bytes. The actual signature may be smaller.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_PKEY_size($pkey);
 # $pkey - value corresponding to openssl&#39;s EVP_PKEY structure
 #
 # returns: the maximum size in bytes</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/EVP_SignInit.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/EVP_SignInit.html</a></p>
</li>

<li>EVP_PKEY_id
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-1.0.0</p>

<p>Returns $pkey type (integer value of corresponding NID).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_PKEY_id($pkey);
 # $pkey - value corresponding to openssl&#39;s EVP_PKEY structure
 #
 # returns: (integer) key type</pre>

<p>Example:</p>

<pre class="sh_perl"> my $pubkey = Net::SSLeay::X509_get_pubkey($x509);
 my $type = Net::SSLeay::EVP_PKEY_id($pubkey);
 print Net::SSLeay::OBJ_nid2sn($type);             #prints e.g. &#39;rsaEncryption&#39;</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_PEM_*_related_functions"
>Low level API: PEM_* related functions</a></h3>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/pem.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/pem.html</a></p>

<ul>
<li>PEM_read_bio_X509
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Loads PEM formated X509 certificate via given BIO structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::PEM_read_bio_X509($bio);
 # $bio - value corresponding to openssl&#39;s BIO structure
 #
 # returns: value corresponding to openssl&#39;s X509 structure (0 on failure)</pre>

<p>Example:</p>

<pre class="sh_perl"> my $bio = Net::SSLeay::BIO_new_file($filename, &#39;r&#39;);
 my $x509 = Net::SSLeay::PEM_read_bio_X509($bio);
 Net::SSLeay::BIO_free($bio);</pre>
</li>

<li>PEM_read_bio_X509_REQ
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Loads PEM formated X509_REQ object via given BIO structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::PEM_read_bio_X509_REQ($bio, $x=NULL, $cb=NULL, $u=NULL);
 # $bio - value corresponding to openssl&#39;s BIO structure
 #
 # returns: value corresponding to openssl&#39;s X509_REQ structure (0 on failure)</pre>

<p>Example:</p>

<pre class="sh_perl"> my $bio = Net::SSLeay::BIO_new_file($filename, &#39;r&#39;);
 my $x509_req = Net::SSLeay::PEM_read_bio_X509_REQ($bio);
 Net::SSLeay::BIO_free($bio);</pre>
</li>

<li>PEM_read_bio_DHparams
<p>Reads DH structure from BIO.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::PEM_read_bio_DHparams($bio);
 # $bio - value corresponding to openssl&#39;s BIO structure
 #
 # returns: value corresponding to openssl&#39;s DH structure (0 on failure)</pre>
</li>

<li>PEM_read_bio_X509_CRL
<p>Reads X509_CRL structure from BIO.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::PEM_read_bio_X509_CRL($bio);
 # $bio - value corresponding to openssl&#39;s BIO structure
 #
 # returns: value corresponding to openssl&#39;s X509_CRL structure (0 on failure)</pre>
</li>

<li>PEM_read_bio_PrivateKey
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Loads PEM formated private key via given BIO structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::PEM_read_bio_PrivateKey($bio, $cb, $data);
 # $bio - value corresponding to openssl&#39;s BIO structure
 # $cb - reference to perl callback function
 # $data - data that will be passed to callback function (see examples below)
 #
 # returns: value corresponding to openssl&#39;s EVP_PKEY structure (0 on failure)</pre>

<p>Example:</p>

<pre class="sh_perl"> my $bio = Net::SSLeay::BIO_new_file($filename, &#39;r&#39;);
 my $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio); #ask for password if needed
 Net::SSLeay::BIO_free($bio);</pre>

<p>To use password you have the following options:</p>

<pre class="sh_perl"> $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, \&#38;callback_func); # use callback func for getting password
 $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, \&#38;callback_func, $data); # use callback_func + pass $data to callback_func
 $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, undef, &#34;secret&#34;); # use password &#34;secret&#34;
 $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, undef, &#34;&#34;);       # use empty password</pre>

<p>Callback function signature:</p>

<pre class="sh_perl"> sub callback_func {
   my ($max_passwd_size, $rwflag, $data) = @_;
   # $max_passwd_size - maximum size of returned password (longer values will be discarded)
   # $rwflag - indicates whether we are loading (0) or storing (1) - for PEM_read_bio_PrivateKey always 0
   # $data - the data passed to PEM_read_bio_PrivateKey as 3rd parameter

   return &#34;secret&#34;;
 }</pre>
</li>

<li>PEM_get_string_X509
<p><b>NOTE:</b> Does not exactly correspond to any low level API function</p>

<p>Converts/exports X509 certificate to string (PEM format).</p>

<pre class="sh_perl"> Net::SSLeay::PEM_get_string_X509($x509);
 # $x509 - value corresponding to openssl&#39;s X509 structure
 #
 # returns: string with $x509 in PEM format</pre>
</li>

<li>PEM_get_string_PrivateKey
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Converts public key $pk into PEM formated string (optionally protected with password).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::PEM_get_string_PrivateKey($pk, $passwd, $enc_alg);
 # $pk - value corresponding to openssl&#39;s EVP_PKEY structure
 # $passwd - [optional] (string) password to use for key encryption
 # $enc_alg - [optional] algorithm to use for key encryption (default: DES_CBC) - value corresponding to openssl&#39;s EVP_CIPHER structure
 #
 # returns: PEM formated string</pre>

<p>Examples:</p>

<pre class="sh_perl"> $pem_privkey = Net::SSLeay::PEM_get_string_PrivateKey($pk);
 $pem_privkey = Net::SSLeay::PEM_get_string_PrivateKey($pk, &#34;secret&#34;);
 $pem_privkey = Net::SSLeay::PEM_get_string_PrivateKey($pk, &#34;secret&#34;, Net::SSLeay::EVP_get_cipherbyname(&#34;DES-EDE3-CBC&#34;));</pre>
</li>

<li>PEM_get_string_X509_CRL
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Converts X509_CRL object $x509_crl into PEM formated string.</p>

<pre class="sh_perl"> Net::SSLeay::PEM_get_string_X509_CRL($x509_crl);
 # $x509_crl - value corresponding to openssl&#39;s X509_CRL structure
 #
 # returns: no return value</pre>
</li>

<li>PEM_get_string_X509_REQ
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Converts X509_REQ object $x509_crl into PEM formated string.</p>

<pre class="sh_perl"> Net::SSLeay::PEM_get_string_X509_REQ($x509_req);
 # $x509_req - value corresponding to openssl&#39;s X509_REQ structure
 #
 # returns: no return value</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_d2i_*_(DER_format)_related_functions"
>Low level API: d2i_* (DER format) related functions</a></h3>

<ul>
<li>d2i_X509_bio
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Loads DER formated X509 certificate via given BIO structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::d2i_X509_bio($bp);
 # $bp - value corresponding to openssl&#39;s BIO structure
 #
 # returns: value corresponding to openssl&#39;s X509 structure (0 on failure)</pre>

<p>Example:</p>

<pre class="sh_perl"> my $bio = Net::SSLeay::BIO_new_file($filename, &#39;rb&#39;);
 my $x509 = Net::SSLeay::d2i_X509_bio($bio);
 Net::SSLeay::BIO_free($bio);</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/d2i_X509.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/d2i_X509.html</a></p>
</li>

<li>d2i_X509_CRL_bio
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Loads DER formated X509_CRL object via given BIO structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::d2i_X509_CRL_bio($bp);
 # $bp - value corresponding to openssl&#39;s BIO structure
 #
 # returns: value corresponding to openssl&#39;s X509_CRL structure (0 on failure)</pre>

<p>Example:</p>

<pre class="sh_perl"> my $bio = Net::SSLeay::BIO_new_file($filename, &#39;rb&#39;);
 my $x509_crl = Net::SSLeay::d2i_X509_CRL_bio($bio);
 Net::SSLeay::BIO_free($bio);</pre>
</li>

<li>d2i_X509_REQ_bio
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Loads DER formated X509_REQ object via given BIO structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::d2i_X509_REQ_bio($bp);
 # $bp - value corresponding to openssl&#39;s BIO structure
 #
 # returns: value corresponding to openssl&#39;s X509_REQ structure (0 on failure)</pre>

<p>Example:</p>

<pre class="sh_perl"> my $bio = Net::SSLeay::BIO_new_file($filename, &#39;rb&#39;);
 my $x509_req = Net::SSLeay::d2i_X509_REQ_bio($bio);
 Net::SSLeay::BIO_free($bio);</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_PKCS12_related_functions"
>Low level API: PKCS12 related functions</a></h3>

<ul>
<li>P_PKCS12_load_file
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Loads X509 certificate + private key + certificates of CA chain (if present in PKCS12 file).</p>

<pre class="sh_perl"> my ($privkey, $cert, @cachain) = Net::SSLeay::P_PKCS12_load_file($filename, $load_chain, $password);
 # $filename - name of PKCS12 file
 # $load_chain - [optional] whether load (1) or not(0) CA chain (default: 0)
 # $password - [optional] password for private key
 #
 # returns: triplet ($privkey, $cert, @cachain)
 #          $privkey - value corresponding to openssl&#39;s EVP_PKEY structure
 #          $cert - value corresponding to openssl&#39;s X509 structure
 #          @cachain - array of values corresponding to openssl&#39;s X509 structure (empty if no CA chain in PKCS12)</pre>

<p><b>IMPORTANT NOTE:</b> after you do the job you need to call X509_free() on $privkey + all members of @cachain and EVP_PKEY_free() on $privkey.</p>

<p>Examples:</p>

<pre class="sh_perl"> my ($privkey, $cert) = Net::SSLeay::P_PKCS12_load_file($filename);
 #or
 my ($privkey, $cert) = Net::SSLeay::P_PKCS12_load_file($filename, 0, $password);
 #or
 my ($privkey, $cert, @cachain) = Net::SSLeay::P_PKCS12_load_file($filename, 1);
 #or
 my ($privkey, $cert, @cachain) = Net::SSLeay::P_PKCS12_load_file($filename, 1, $password);

 #BEWARE: THIS IS WRONG - MEMORY LEAKS! (you cannot free @cachain items)
 my ($privkey, $cert) = Net::SSLeay::P_PKCS12_load_file($filename, 1, $password);</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_SESSION_*_related_functions"
>Low level API: SESSION_* related functions</a></h3>

<ul>
<li>d2i_SSL_SESSION
<p>Transforms the external ASN1 representation of an SSL/TLS session, stored as binary data at location pp with length length, into an SSL_SESSION object.</p>

<p>??? (does this function really work?)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::d2i_SSL_SESSION($a, $pp, $length);
 # $a - value corresponding to openssl&#39;s SSL_SESSION structure
 # $pp - pointer/buffer ???
 # $length - ???
 #
 # returns: ???</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/d2i_SSL_SESSION.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/d2i_SSL_SESSION.html</a></p>
</li>

<li>i2d_SSL_SESSION
<p>Transforms the SSL_SESSION object in into the ASN1 representation and stores it into the memory location pointed to by pp. The length of the resulting ASN1 representation is returned.</p>

<p>??? (does this function really work?)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::i2d_SSL_SESSION($in, $pp);
 # $in - value corresponding to openssl&#39;s SSL_SESSION structure
 # $pp - pointer/data ???
 #
 # returns: 1 on success, 0</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/d2i_SSL_SESSION.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/d2i_SSL_SESSION.html</a></p>
</li>

<li>SESSION_new
<p>Creates a new SSL_SESSION structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SESSION_new();
 #
 # returns: value corresponding to openssl&#39;s SSL_SESSION structure (0 on failure)</pre>
</li>

<li>SESSION_free
<p>Free an allocated SSL_SESSION structure.</p>

<pre class="sh_perl"> Net::SSLeay::SESSION_free($ses);
 # $ses - value corresponding to openssl&#39;s SSL_SESSION structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_SESSION_free.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_SESSION_free.html</a></p>
</li>

<li>SESSION_cmp
<p>Compare two SSL_SESSION structures.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SESSION_cmp($sesa, $sesb);
 # $sesa - value corresponding to openssl&#39;s SSL_SESSION structure
 # $sesb - value corresponding to openssl&#39;s SSL_SESSION structure
 #
 # returns: 0 if the two structures are the same</pre>

<p><b>NOTE:</b> Not available in openssl 1.0 or later</p>
</li>

<li>SESSION_get_app_data
<p>Can be used to get application defined value/data.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SESSION_get_app_data($ses);
 # $ses - value corresponding to openssl&#39;s SSL_SESSION structure
 #
 # returns: string/buffer/pointer ???</pre>
</li>

<li>SESSION_set_app_data
<p>Can be used to set some application defined value/data.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SESSION_set_app_data($s, $a);
 # $s - value corresponding to openssl&#39;s SSL_SESSION structure
 # $a - (string/buffer/pointer ???) data
 #
 # returns: ???</pre>
</li>

<li>SESSION_get_ex_data
<p>Is used to retrieve the information for $idx from session $ses.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SESSION_get_ex_data($ses, $idx);
 # $ses - value corresponding to openssl&#39;s SSL_SESSION structure
 # $idx - (integer) index for application specific data
 #
 # returns: pointer to ???</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html</a></p>
</li>

<li>SESSION_set_ex_data
<p>Is used to store application data at arg for idx into the session object.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SESSION_set_ex_data($ss, $idx, $data);
 # $ss - value corresponding to openssl&#39;s SSL_SESSION structure
 # $idx - (integer) ???
 # $data - (pointer) ???
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html</a></p>
</li>

<li>SESSION_get_ex_new_index
<p>Is used to register a new index for application specific data.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SESSION_get_ex_new_index($argl, $argp, $new_func, $dup_func, $free_func);
 # $argl - (long) ???
 # $argp - (pointer) ???
 # $new_func - function pointer ??? (CRYPTO_EX_new *)
 # $dup_func - function pointer ??? (CRYPTO_EX_dup *)
 # $free_func - function pointer ??? (CRYPTO_EX_free *)
 #
 # returns: (integer) ???</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html</a></p>
</li>

<li>SESSION_get_master_key
<p><b>NOTE:</b> Does not exactly correspond to any low level API function</p>

<p>Returns &#39;master_key&#39; value from SSL_SESSION structure $s</p>

<pre class="sh_perl"> Net::SSLeay::SESSION_get_master_key($s);
 # $s - value corresponding to openssl&#39;s SSL_SESSION structure
 #
 # returns: master key (binary data)</pre>
</li>

<li>SESSION_set_master_key
<p>Sets &#39;master_key&#39; value for SSL_SESSION structure $s</p>

<pre class="sh_perl"> Net::SSLeay::SESSION_set_master_key($s, $key);
 # $s - value corresponding to openssl&#39;s SSL_SESSION structure
 # $key - master key (binary data)
 #
 # returns: no return value</pre>
</li>

<li>SESSION_get_time
<p>Returns the time at which the session s was established. The time is given in seconds since 1.1.1970.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SESSION_get_time($s);
 # $s - value corresponding to openssl&#39;s SSL_SESSION structure
 #
 # returns: timestamp (seconds since 1.1.1970)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html</a></p>
</li>

<li>get_time
<p>Technically the same functionality as <a href="#SESSION_get_time" class="podlinkpod"
>&#34;SESSION_get_time&#34;</a>.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_time($s);</pre>
</li>

<li>SESSION_get_timeout
<p>Returns the timeout value set for session $s in seconds.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SESSION_get_timeout($s);
 # $s - value corresponding to openssl&#39;s SSL_SESSION structure
 #
 # returns: timeout (in seconds)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html</a></p>
</li>

<li>get_timeout
<p>Technically the same functionality as <a href="#SESSION_get_timeout" class="podlinkpod"
>&#34;SESSION_get_timeout&#34;</a>.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_timeout($s);</pre>
</li>

<li>SESSION_print
<p><b>NOTE:</b> Does not exactly correspond to any low level API function</p>

<p>Prints session details (e.g. protocol version, ciprher, session-id ...) to BIO.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SESSION_print($fp, $ses);
 # $fp - value corresponding to openssl&#39;s BIO structure
 # $ses - value corresponding to openssl&#39;s SSL_SESSION structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>You have to use necessary BIO functions like this:</p>

<pre class="sh_perl"> # let us have $ssl corresponding to openssl&#39;s SSL structure
 my $ses = Net::SSLeay::get_session($ssl);
 my $bio = Net::SSLeay::BIO_new(&#38;Net::SSLeay::BIO_s_mem);
 Net::SSLeay::SESSION_print($bio, $ses);
 print Net::SSLeay::BIO_read($bio);</pre>
</li>

<li>SESSION_print_fp
<p>Prints session details (e.g. protocol version, ciprher, session-id ...) to file handle.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SESSION_print_fp($fp, $ses);
 # $fp - perl file handle
 # $ses - value corresponding to openssl&#39;s SSL_SESSION structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Example:</p>

<pre class="sh_perl"> # let us have $ssl corresponding to openssl&#39;s SSL structure
 my $ses = Net::SSLeay::get_session($ssl);
 open my $fh, &#34;&#62;&#34;, &#34;output.txt&#34;;
 Net::SSLeay::SESSION_print_fp($fh,$ses);</pre>
</li>

<li>SESSION_set_time
<p>Replaces the creation time of the session s with the chosen value $t (seconds since 1.1.1970).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SESSION_set_time($ses, $t);
 # $ses - value corresponding to openssl&#39;s SSL_SESSION structure
 # $t - time value
 #
 # returns: 1 on success</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html</a></p>
</li>

<li>set_time
<p>Technically the same functionality as <a href="#SESSION_set_time" class="podlinkpod"
>&#34;SESSION_set_time&#34;</a>.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set_time($ses, $t);</pre>
</li>

<li>SESSION_set_timeout
<p>Sets the timeout value for session s in seconds to $t.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SESSION_set_timeout($s, $t);
 # $s - value corresponding to openssl&#39;s SSL_SESSION structure
 # $t - timeout (in seconds)
 #
 # returns: 1 on success</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html</a></p>
</li>

<li>set_timeout
<p>Technically the same functionality as <a href="#SESSION_set_timeout" class="podlinkpod"
>&#34;SESSION_set_timeout&#34;</a>.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set_timeout($ses, $t);</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_SSL_CTX_*_related_functions"
>Low level API: SSL_CTX_* related functions</a></h3>

<p><b>NOTE:</b> Please note that the function described in this chapter have &#34;SSL_&#34; part stripped from their original openssl names.</p>

<ul>
<li>CTX_add_client_CA
<p>Adds the CA name extracted from $cacert to the list of CAs sent to the client when requesting a client certificate for $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_add_client_CA($ctx, $cacert);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $cacert - value corresponding to openssl&#39;s X509 structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html</a></p>
</li>

<li>CTX_add_extra_chain_cert
<p>Adds the certificate $x509 to the certificate chain presented together with the certificate. Several certificates can be added one after the other.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_add_extra_chain_cert($ctx, $x509);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $x509 - value corresponding to openssl&#39;s X509 structure
 #
 # returns: 1 on success, check out the error stack to find out the reason for failure otherwise</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_add_extra_chain_cert.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_add_extra_chain_cert.html</a></p>
</li>

<li>CTX_add_session
<p>Adds the session $ses to the context $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_add_session($ctx, $ses);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $ses - value corresponding to openssl&#39;s SSL_SESSION structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html</a></p>
</li>

<li>CTX_callback_ctrl
<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_callback_ctrl($ctx, $cmd, $fp);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $cmd - (integer) command id
 # $fp - (function pointer) ???
 #
 # returns: ???</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html</a></p>
</li>

<li>CTX_check_private_key
<p>Checks the consistency of a private key with the corresponding certificate loaded into $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_check_private_key($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>CTX_ctrl
<p>Internal handling function for SSL_CTX objects.</p>

<p><b>BEWARE:</b> openssl doc says: This function should never be called directly!</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_ctrl($ctx, $cmd, $larg, $parg);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $cmd - (integer) command id
 # $larg - (integer) long ???
 # $parg - (string/pointer) ???
 #
 # returns: (long) result of given command ???

 #valid $cmd values
  1 - SSL_CTRL_NEED_TMP_RSA
  2 - SSL_CTRL_SET_TMP_RSA
  3 - SSL_CTRL_SET_TMP_DH
  4 - SSL_CTRL_SET_TMP_ECDH
  5 - SSL_CTRL_SET_TMP_RSA_CB
  6 - SSL_CTRL_SET_TMP_DH_CB
  7 - SSL_CTRL_SET_TMP_ECDH_CB
  8 - SSL_CTRL_GET_SESSION_REUSED
  9 - SSL_CTRL_GET_CLIENT_CERT_REQUEST
 10 - SSL_CTRL_GET_NUM_RENEGOTIATIONS
 11 - SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 12 - SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 13 - SSL_CTRL_GET_FLAGS
 14 - SSL_CTRL_EXTRA_CHAIN_CERT
 15 - SSL_CTRL_SET_MSG_CALLBACK
 16 - SSL_CTRL_SET_MSG_CALLBACK_ARG
 17 - SSL_CTRL_SET_MTU
 20 - SSL_CTRL_SESS_NUMBER
 21 - SSL_CTRL_SESS_CONNECT
 22 - SSL_CTRL_SESS_CONNECT_GOOD
 23 - SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 24 - SSL_CTRL_SESS_ACCEPT
 25 - SSL_CTRL_SESS_ACCEPT_GOOD
 26 - SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 27 - SSL_CTRL_SESS_HIT
 28 - SSL_CTRL_SESS_CB_HIT
 29 - SSL_CTRL_SESS_MISSES
 30 - SSL_CTRL_SESS_TIMEOUTS
 31 - SSL_CTRL_SESS_CACHE_FULL
 32 - SSL_CTRL_OPTIONS
 33 - SSL_CTRL_MODE
 40 - SSL_CTRL_GET_READ_AHEAD
 41 - SSL_CTRL_SET_READ_AHEAD
 42 - SSL_CTRL_SET_SESS_CACHE_SIZE
 43 - SSL_CTRL_GET_SESS_CACHE_SIZE
 44 - SSL_CTRL_SET_SESS_CACHE_MODE
 45 - SSL_CTRL_GET_SESS_CACHE_MODE
 50 - SSL_CTRL_GET_MAX_CERT_LIST
 51 - SSL_CTRL_SET_MAX_CERT_LIST
 52 - SSL_CTRL_SET_MAX_SEND_FRAGMENT
 53 - SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 54 - SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 55 - SSL_CTRL_SET_TLSEXT_HOSTNAME
 56 - SSL_CTRL_SET_TLSEXT_DEBUG_CB
 57 - SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 58 - SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 59 - SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 60 - SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
 61 - SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
 62 - SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
 63 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
 64 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
 65 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
 66 - SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
 67 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
 68 - SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
 69 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
 70 - SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
 71 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
 72 - SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
 73 - DTLS_CTRL_GET_TIMEOUT
 74 - DTLS_CTRL_HANDLE_TIMEOUT
 75 - DTLS_CTRL_LISTEN
 76 - SSL_CTRL_GET_RI_SUPPORT
 77 - SSL_CTRL_CLEAR_OPTIONS
 78 - SSL_CTRL_CLEAR_MODE</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html</a></p>
</li>

<li>CTX_flush_sessions
<p>Causes a run through the session cache of $ctx to remove sessions expired at time $tm.</p>

<pre class="sh_perl"> Net::SSLeay::CTX_flush_sessions($ctx, $tm);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $tm - specifies the time which should be used for the expiration test (seconds since 1.1.1970)
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_flush_sessions.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_flush_sessions.html</a></p>
</li>

<li>CTX_free
<p>Free an allocated SSL_CTX object.</p>

<pre class="sh_perl"> Net::SSLeay::CTX_free($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_free.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_free.html</a></p>
</li>

<li>CTX_get_app_data
<p>Can be used to get application defined value/data.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_get_app_data($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: string/buffer/pointer ???</pre>
</li>

<li>CTX_set_app_data
<p>Can be used to set some application defined value/data.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_set_app_data($ctx, $arg);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $arg - (string/buffer/pointer ???) data
 #
 # returns: ???</pre>
</li>

<li>CTX_get_cert_store
<p>Returns the current certificate verification storage.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_get_cert_store($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: value corresponding to openssl&#39;s X509_STORE structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html</a></p>
</li>

<li>CTX_get_client_CA_list
<p>Returns the list of client CAs explicitly set for $ctx using <a href="#CTX_set_client_CA_list" class="podlinkpod"
>&#34;CTX_set_client_CA_list&#34;</a>.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_get_client_CA_list($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: value corresponding to openssl&#39;s X509_NAME_STACK structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html</a></p>
</li>

<li>CTX_get_ex_data
<p>Is used to retrieve the information for index $idx from $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_get_ex_data($ssl, $idx);
 # $ssl - value corresponding to openssl&#39;s SSL_CTX structure
 # $idx - (integer) index for application specific data
 #
 # returns: pointer to ???</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html</a></p>
</li>

<li>CTX_get_ex_new_index
<p>Is used to register a new index for application specific data.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_get_ex_new_index($argl, $argp, $new_func, $dup_func, $free_func);
 # $argl - (long) ???
 # $argp - (pointer) ???
 # $new_func - function pointer ??? (CRYPTO_EX_new *)
 # $dup_func - function pointer ??? (CRYPTO_EX_dup *)
 # $free_func - function pointer ??? (CRYPTO_EX_free *)
 #
 # returns: (integer) ???</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html</a></p>
</li>

<li>CTX_get_mode
<p>Returns the mode set for ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_get_mode($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: mode (bitmask)

 #to decode the return value (bitmask) use:
 0x00000001 corresponds to SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000002 corresponds to SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000004 corresponds to SSL_MODE_AUTO_RETRY
 0x00000008 corresponds to SSL_MODE_NO_AUTO_CHAIN
 0x00000010 corresponds to SSL_MODE_RELEASE_BUFFERS
 (note: some of the bits might not be supported by older openssl versions)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html</a></p>
</li>

<li>CTX_set_mode
<p>Adds the mode set via bitmask in $mode to $ctx. Options already set before are not cleared.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_set_mode($ctx, $mode);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $mode - mode bitmask
 #
 # returns: the new mode bitmask after adding $mode</pre>

<p>For bitmask details see <a href="#CTX_get_mode" class="podlinkpod"
>&#34;CTX_get_mode&#34;</a> (above).</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html</a></p>
</li>

<li>CTX_get_options
<p>Returns the options (bitmask) set for $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_get_options($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: options (bitmask)

 #to decode the return value (bitmask) use:
 0x00000001 corresponds to SSL_OP_MICROSOFT_SESS_ID_BUG
 0x00000002 corresponds to SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x00000004 corresponds to SSL_OP_LEGACY_SERVER_CONNECT
 0x00000008 corresponds to SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x00000010 corresponds to SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x00000020 corresponds to SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x00000040 corresponds to SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x00000080 corresponds to SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x00000100 corresponds to SSL_OP_TLS_D5_BUG
 0x00000200 corresponds to SSL_OP_TLS_BLOCK_PADDING_BUG
 0x00000800 corresponds to SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 0x80000FFF corresponds to SSL_OP_ALL
 0x00001000 corresponds to SSL_OP_NO_QUERY_MTU
 0x00002000 corresponds to SSL_OP_COOKIE_EXCHANGE
 0x00004000 corresponds to SSL_OP_NO_TICKET
 0x00008000 corresponds to SSL_OP_CISCO_ANYCONNECT
 0x00010000 corresponds to SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 0x00020000 corresponds to SSL_OP_NO_COMPRESSION
 0x00040000 corresponds to SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
 0x00080000 corresponds to SSL_OP_SINGLE_ECDH_USE
 0x00100000 corresponds to SSL_OP_SINGLE_DH_USE
 0x00200000 corresponds to SSL_OP_EPHEMERAL_RSA
 0x00400000 corresponds to SSL_OP_CIPHER_SERVER_PREFERENCE
 0x00800000 corresponds to SSL_OP_TLS_ROLLBACK_BUG
 0x01000000 corresponds to SSL_OP_NO_SSLv2
 0x02000000 corresponds to SSL_OP_NO_SSLv3
 0x04000000 corresponds to SSL_OP_NO_TLSv1
 0x08000000 corresponds to SSL_OP_PKCS1_CHECK_1
 0x10000000 corresponds to SSL_OP_PKCS1_CHECK_2
 0x20000000 corresponds to SSL_OP_NETSCAPE_CA_DN_BUG
 0x40000000 corresponds to SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x80000000 corresponds to SSL_OP_CRYPTOPRO_TLSEXT_BUG
 (note: some of the bits might not be supported by older openssl versions)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html</a></p>
</li>

<li>CTX_set_options
<p>Adds the options set via bitmask in $options to ctx. Options already set before are not cleared.</p>

<pre class="sh_perl"> Net::SSLeay::CTX_set_options($ctx, $options);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $options - options bitmask
 #
 # returns: the new options bitmask after adding $options</pre>

<p>For bitmask details see <a href="#CTX_get_options" class="podlinkpod"
>&#34;CTX_get_options&#34;</a> (above).</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html</a></p>
</li>

<li>CTX_get_quiet_shutdown
<p>Returns the &#39;quiet shutdown&#39; setting of $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_get_quiet_shutdown($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: (integer) the current setting</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html</a></p>
</li>

<li>CTX_get_read_ahead
<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_get_read_ahead($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: (integer) read_ahead value</pre>
</li>

<li>CTX_get_session_cache_mode
<p>Returns the currently used cache mode (bitmask).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_get_session_cache_mode($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: mode (bitmask)

 #to decode the return value (bitmask) use:
 0x0000 corresponds to SSL_SESS_CACHE_OFF
 0x0001 corresponds to SSL_SESS_CACHE_CLIENT
 0x0002 corresponds to SSL_SESS_CACHE_SERVER
 0x0080 corresponds to SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0100 corresponds to SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0200 corresponds to SSL_SESS_CACHE_NO_INTERNAL_STORE
 (note: some of the bits might not be supported by older openssl versions)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html</a></p>
</li>

<li>CTX_set_session_cache_mode
<p>Enables/disables session caching by setting the operational mode for $ctx to $mode.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_set_session_cache_mode($ctx, $mode);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $mode - mode (bitmask)
 #
 # returns: previously set cache mode</pre>

<p>For bitmask details see <a href="#CTX_get_session_cache_mode" class="podlinkpod"
>&#34;CTX_get_session_cache_mode&#34;</a> (above).</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html</a></p>
</li>

<li>CTX_get_timeout
<p>Returns the currently set timeout value for $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_get_timeout($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: timeout in seconds</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html</a></p>
</li>

<li>CTX_get_verify_depth
<p>Returns the verification depth limit currently set in $ctx. If no limit has been explicitly set, -1 is returned and the default value will be used.&#34;,</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_get_verify_depth($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: depth limit currently set in $ctx, -1 if no limit has been explicitly set</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html</a></p>
</li>

<li>CTX_get_verify_mode
<p>Returns the verification mode (bitmask) currently set in $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_get_verify_mode($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: mode (bitmask)

 #to decode the return value (bitmask) use:
 0x00 corresponds to SSL_VERIFY_NONE
 0x01 corresponds to SSL_VERIFY_PEER
 0x02 corresponds to SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x04 corresponds to SSL_VERIFY_CLIENT_ONCE
 (note: some of the bits might not be supported by older openssl versions)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html</a></p>
</li>

<li>CTX_set_verify
<p>Sets the verification flags for $ctx to be $mode and specifies the verify_callback function to be used.</p>

<pre class="sh_perl"> Net::SSLeay::CTX_set_verify($ctx, $mode, $callback);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $mode - mode (bitmask)
 # $callback - [optional] reference to perl callback function
 #
 # returns: no return value</pre>

<p>For bitmask details see <a href="#CTX_get_verify_mode" class="podlinkpod"
>&#34;CTX_get_verify_mode&#34;</a> (above).</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html</a></p>
</li>

<li>CTX_load_verify_locations
<p>Specifies the locations for $ctx, at which CA certificates for verification purposes are located. The certificates available via $CAfile and $CApath are trusted.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_load_verify_locations($ctx, $CAfile, $CApath);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $CAfile - (string) file of CA certificates in PEM format, the file can contain several CA certificates (or &#39;&#39;)
 # $CApath - (string) directory containing CA certificates in PEM format (or &#39;&#39;)
 #
 # returns: 1 on success, 0 on failure (check the error stack to find out the reason)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html</a></p>
</li>

<li>CTX_need_tmp_RSA
<p>Return the result of <code>SSL_CTX_ctrl(ctx,SSL_CTRL_NEED_TMP_RSA,0,NULL)</code></p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_need_tmp_RSA($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: result of SSL_CTRL_NEED_TMP_RSA command</pre>
</li>

<li>CTX_new
<p>The same as <a href="#CTX_v23_new" class="podlinkpod"
>&#34;CTX_v23_new&#34;</a></p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_new();
 #
 # returns: value corresponding to openssl&#39;s SSL_CTX structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_new.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_new.html</a></p>
</li>

<li>CTX_v2_new
<p>Creates a new SSL_CTX object - based on SSLv2_method() - as framework to establish TLS/SSL enabled connections.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_v2_new();
 #
 # returns: value corresponding to openssl&#39;s SSL_CTX structure (0 on failure)</pre>
</li>

<li>CTX_v23_new
<p>Creates a new SSL_CTX object - based on SSLv23_method() - as framework to establish TLS/SSL enabled connections.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_v23_new();
 #
 # returns: value corresponding to openssl&#39;s SSL_CTX structure (0 on failure)</pre>
</li>

<li>CTX_v3_new
<p>Creates a new SSL_CTX object - based on SSLv3_method() - as framework to establish TLS/SSL enabled connections.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_v3_new();
 #
 # returns: value corresponding to openssl&#39;s SSL_CTX structure (0 on failure)</pre>
</li>

<li>CTX_tlsv1_new
<p>Creates a new SSL_CTX object - based on TLSv1_method() - as framework to establish TLS/SSL enabled connections.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_tlsv1_new();
 #
 # returns: value corresponding to openssl&#39;s SSL_CTX structure (0 on failure)</pre>
</li>

<li>CTX_new_with_method
<p>Creates a new SSL_CTX object based on $meth method</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_new_with_method($meth);
 # $meth - value corresponding to openssl&#39;s SSL_METHOD structure
 #
 # returns: value corresponding to openssl&#39;s SSL_CTX structure (0 on failure)

 #example
 my $ctx = Net::SSLeay::CTX_new_with_method(&#38;Net::SSLeay::TLSv1_method);</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_new.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_new.html</a></p>
</li>

<li>CTX_remove_session
<p>Removes the session $ses from the context $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_remove_session($ctx, $ses);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $ses - value corresponding to openssl&#39;s SSL_SESSION structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html</a></p>
</li>

<li>CTX_sess_accept
<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_sess_accept($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: number of started SSL/TLS handshakes in server mode</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html</a></p>
</li>

<li>CTX_sess_accept_good
<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_sess_accept_good($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: number of successfully established SSL/TLS sessions in server mode</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html</a></p>
</li>

<li>CTX_sess_accept_renegotiate
<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_sess_accept_renegotiate($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: number of start renegotiations in server mode</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html</a></p>
</li>

<li>CTX_sess_cache_full
<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_sess_cache_full($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: number of sessions that were removed because the maximum session cache size was exceeded</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html</a></p>
</li>

<li>CTX_sess_cb_hits
<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_sess_cb_hits($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: number of successfully retrieved sessions from the external session cache in server mode</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html</a></p>
</li>

<li>CTX_sess_connect
<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_sess_connect($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: number of started SSL/TLS handshakes in client mode</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html</a></p>
</li>

<li>CTX_sess_connect_good
<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_sess_connect_good($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: number of successfully established SSL/TLS sessions in client mode</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html</a></p>
</li>

<li>CTX_sess_connect_renegotiate
<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_sess_connect_renegotiate($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: number of start renegotiations in client mode</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html</a></p>
</li>

<li>CTX_sess_get_cache_size
<p>Returns the currently valid session cache size.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_sess_get_cache_size($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: current size</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html</a></p>
</li>

<li>CTX_sess_hits
<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_sess_hits($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: number of successfully reused sessions</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html</a></p>
</li>

<li>CTX_sess_misses
<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_sess_misses($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: number of sessions proposed by clients that were not found in the internal session cache in server mode</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html</a></p>
</li>

<li>CTX_sess_number
<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_sess_number($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: current number of sessions in the internal session cache</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html</a></p>
</li>

<li>CTX_sess_set_cache_size
<p>Sets the size of the internal session cache of context $ctx to $size.</p>

<pre class="sh_perl"> Net::SSLeay::CTX_sess_set_cache_size($ctx, $size);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $size - cache size (0 = unlimited)
 #
 # returns: previously valid size</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html</a></p>
</li>

<li>CTX_sess_timeouts
<p>Returns the number of sessions proposed by clients and either found in the internal or external session cache in server mode, but that were invalid due to timeout. These sessions are not included in the SSL_CTX_sess_hits count.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_sess_timeouts($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: number of sessions</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html</a></p>
</li>

<li>CTX_sessions
<p>Returns a pointer to the lhash databases containing the internal session cache for ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_sessions($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: value corresponding to openssl&#39;s LHASH structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_sessions.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_sessions.html</a></p>
</li>

<li>CTX_set1_param
<p>Applies X509 verification parameters $vpm on $ctx</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_set1_param($ctx, $vpm);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $vpm - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>CTX_set_cert_store
<p>Sets/replaces the certificate verification storage of $ctx to/with $store.</p>

<pre class="sh_perl"> Net::SSLeay::CTX_set_cert_store($ctx, $store);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $store - value corresponding to openssl&#39;s X509_STORE structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html</a></p>
</li>

<li>CTX_set_cert_verify_callback
<p>Sets the verification callback function for $ctx. SSL objects that are created from $ctx inherit the setting valid at the time when <code>Net::SSLeay::new($ctx)</code> is called.</p>

<pre class="sh_perl"> Net::SSLeay::CTX_set_cert_verify_callback($ctx, $func, $data);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $func - perl reference to callback function
 # $data - [optional] data that will be passed to callback function when invoked
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_verify_callback.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_verify_callback.html</a></p>
</li>

<li>CTX_set_cipher_list
<p>Sets the list of available ciphers for $ctx using the control string $str. The list of ciphers is inherited by all ssl objects created from $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_set_cipher_list($s, $str);
 # $s - value corresponding to openssl&#39;s SSL_CTX structure
 # $str - (string) cipher list e.g. &#39;3DES:+RSA&#39;
 #
 # returns: 1 if any cipher could be selected and 0 on complete failure</pre>

<p>The format of $str is described in <a href="http://www.openssl.org/docs/apps/ciphers.html" class="podlinkurl"
>http://www.openssl.org/docs/apps/ciphers.html</a></p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html</a></p>
</li>

<li>CTX_set_client_CA_list
<p>Sets the list of CAs sent to the client when requesting a client certificate for $ctx.</p>

<pre class="sh_perl"> Net::SSLeay::CTX_set_client_CA_list($ctx, $list);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $list - value corresponding to openssl&#39;s X509_NAME_STACK structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html</a></p>
</li>

<li>CTX_set_default_passwd_cb
<p>Sets the default password callback called when loading/storing a PEM certificate with encryption.</p>

<pre class="sh_perl"> Net::SSLeay::CTX_set_default_passwd_cb($ctx, $func);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $func - perl reference to callback function
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html</a></p>
</li>

<li>CTX_set_default_passwd_cb_userdata
<p>Sets a pointer to userdata which will be provided to the password callback on invocation.</p>

<pre class="sh_perl"> Net::SSLeay::CTX_set_default_passwd_cb_userdata($ctx, $userdata);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $userdata - data that will be passed to callback function when invoked
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html</a></p>
</li>

<li>CTX_set_default_verify_paths
<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_set_default_verify_paths($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>CTX_set_ex_data
<p>Is used to store application data at $data for $idx into the $ctx object.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_set_ex_data($ssl, $idx, $data);
 # $ssl - value corresponding to openssl&#39;s SSL_CTX structure
 # $idx - (integer) ???
 # $data - (pointer) ???
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html</a></p>
</li>

<li>CTX_set_purpose
<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_set_purpose($s, $purpose);
 # $s - value corresponding to openssl&#39;s SSL_CTX structure
 # $purpose - (integer) purpose identifier
 #
 # returns: 1 on success, 0 on failure

 #avainable purpose identifier
 1 - X509_PURPOSE_SSL_CLIENT
 2 - X509_PURPOSE_SSL_SERVER
 3 - X509_PURPOSE_NS_SSL_SERVER
 4 - X509_PURPOSE_SMIME_SIGN
 5 - X509_PURPOSE_SMIME_ENCRYPT
 6 - X509_PURPOSE_CRL_SIGN
 7 - X509_PURPOSE_ANY
 8 - X509_PURPOSE_OCSP_HELPER
 9 - X509_PURPOSE_TIMESTAMP_SIGN

 #or use corresponding constants
 $purpose = &#38;Net::SSLeay::X509_PURPOSE_SSL_CLIENT;
 ...
 $purpose = &#38;Net::SSLeay::X509_PURPOSE_TIMESTAMP_SIGN;</pre>
</li>

<li>CTX_set_quiet_shutdown
<p>Sets the &#39;quiet shutdown&#39; flag for $ctx to be mode. SSL objects created from $ctx inherit the mode valid at the time <code>Net::SSLeay::new($ctx)</code> is called.</p>

<pre class="sh_perl"> Net::SSLeay::CTX_set_quiet_shutdown($ctx, $mode);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $mode - 0 or 1
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html</a></p>
</li>

<li>CTX_set_read_ahead
<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_set_read_ahead($ctx, $val);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $val - read_ahead value to be set
 #
 # returns: the original read_ahead value</pre>
</li>

<li>CTX_set_session_id_context
<p>Sets the context $sid_ctx of length $sid_ctx_len within which a session can be reused for the $ctx object.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_set_session_id_context($ctx, $sid_ctx, $sid_ctx_len);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $sid_ctx - data buffer
 # $sid_ctx_len - length of data in $sid_ctx
 #
 # returns: 1 on success, 0 on failure (the error is logged to the error stack)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html</a></p>
</li>

<li>CTX_set_ssl_version
<p>Sets a new default TLS/SSL method for SSL objects newly created from this $ctx. SSL objects already created with <code>Net::SSLeay::new($ctx)</code> are not affected, except when <code>Net::SSLeay:clear($ssl)</code> is being called.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_set_ssl_version($ctx, $meth);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $meth - value corresponding to openssl&#39;s SSL_METHOD structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html</a></p>
</li>

<li>CTX_set_timeout
<p>Sets the timeout for newly created sessions for $ctx to $t. The timeout value $t must be given in seconds.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_set_timeout($ctx, $t);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $t - timeout in seconds
 #
 # returns: previously set timeout value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html</a></p>
</li>

<li>CTX_set_tmp_dh
<p>Sets DH parameters to be used to be $dh. The key is inherited by all ssl objects created from $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_set_tmp_dh($ctx, $dh);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $dh - value corresponding to openssl&#39;s DH structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html</a></p>
</li>

<li>CTX_set_tmp_dh_callback
<p>Sets the callback function for $ctx to be used when a DH parameters are required to $tmp_dh_callback.</p>

<pre class="sh_perl"> Net::SSLeay::CTX_set_tmp_dh_callback($ctx, $tmp_dh_callback);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # tmp_dh_callback - (function pointer) ???
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html</a></p>
</li>

<li>CTX_set_tmp_rsa
<p>Sets the temporary/ephemeral RSA key to be used to be $rsa.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_set_tmp_rsa($ctx, $rsa);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $rsa - value corresponding to openssl&#39;s RSA structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html</a></p>
</li>

<li>CTX_set_tmp_rsa_callback
<p>Sets the callback function for ctx to be used when a temporary/ephemeral RSA key is required to $tmp_rsa_callback.</p>

<p>??? (does this function really work?)</p>

<pre class="sh_perl"> Net::SSLeay::CTX_set_tmp_rsa_callback($ctx, $tmp_rsa_callback);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $tmp_rsa_callback - (function pointer) ???
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html</a></p>
</li>

<li>CTX_set_trust
<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_set_trust($s, $trust);
 # $s - value corresponding to openssl&#39;s SSL_CTX structure
 # $trust - (integer) trust identifier
 #
 # returns: the original value

 #available trust identifiers
 1 - X509_TRUST_COMPAT
 2 - X509_TRUST_SSL_CLIENT
 3 - X509_TRUST_SSL_SERVER
 4 - X509_TRUST_EMAIL
 5 - X509_TRUST_OBJECT_SIGN
 6 - X509_TRUST_OCSP_SIGN
 7 - X509_TRUST_OCSP_REQUEST
 8 - X509_TRUST_TSA

 #or use corresponding constants
 $trust = &#38;Net::SSLeay::X509_TRUST_COMPAT;
 ...
 $trust = &#38;Net::SSLeay::X509_TRUST_TSA;</pre>
</li>

<li>CTX_set_verify_depth
<p>Sets the maximum depth for the certificate chain verification that shall be allowed for ctx.</p>

<pre class="sh_perl"> Net::SSLeay::CTX_set_verify_depth($ctx, $depth);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $depth - max. depth
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html</a></p>
</li>

<li>CTX_use_PKCS12_file
<p>Adds the certificate and private key from PKCS12 file $p12filename to $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_use_PKCS12_file($ctx, $p12filename, $password);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $p12filename - (string) filename
 # $password - (string) password to decrypt private key
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>CTX_use_PrivateKey
<p>Adds the private key $pkey to $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_use_PrivateKey($ctx, $pkey);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $pkey - value corresponding to openssl&#39;s EVP_PKEY structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>CTX_use_PrivateKey_file
<p>Adds the first private key found in $file to $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_use_PrivateKey_file($ctx, $file, $type);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $file - (string) file name
 # $type - (integer) type - use constants &#38;Net::SSLeay::FILETYPE_PEM or &#38;Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>CTX_use_RSAPrivateKey
<p>Adds the RSA private key $rsa to $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_use_RSAPrivateKey($ctx, $rsa);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $rsa - value corresponding to openssl&#39;s RSA structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>CTX_use_RSAPrivateKey_file
<p>Adds the first RSA private key found in $file to $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_use_RSAPrivateKey_file($ctx, $file, $type);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $file - (string) file name
 # $type - (integer) type - use constants &#38;Net::SSLeay::FILETYPE_PEM or &#38;Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>
</li>

<li>CTX_use_certificate
<p>Loads the certificate $x into $ctx</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_use_certificate($ctx, $x);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $x - value corresponding to openssl&#39;s X509 structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>CTX_use_certificate_chain_file
<p>Loads a certificate chain from $file into $ctx. The certificates must be in PEM format and must be sorted starting with the subject&#39;s certificate (actual client or server certificate), followed by intermediate CA certificates if applicable, and ending at the highest level (root) CA.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_use_certificate_chain_file($ctx, $file);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $file - (string) file name
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>CTX_use_certificate_file
<p>Loads the first certificate stored in $file into $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CTX_use_certificate_file($ctx, $file, $type);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $file - (string) file name
 # $type - (integer) type - use constants &#38;Net::SSLeay::FILETYPE_PEM or &#38;Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_SSL_*_related_functions"
>Low level API: SSL_* related functions</a></h3>

<p><b>NOTE:</b> Please note that the function described in this chapter have &#34;SSL_&#34; part stripped from their original openssl names.</p>

<ul>
<li>new
<p>Creates a new SSL structure which is needed to hold the data for a TLS/SSL connection. The new structure inherits the settings of the underlying context $ctx: connection method (SSLv2/v3/TLSv1), options, verification settings, timeout settings.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::new($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: value corresponding to openssl&#39;s SSL structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_new.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_new.html</a></p>
</li>

<li>accept
<p>Waits for a TLS/SSL client to initiate the TLS/SSL handshake. The communication channel must already have been set and assigned to the ssl by setting an underlying BIO.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::accept($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: 1 = success, 0 = handshake not successfull, &#60;0 = fatal error during handshake</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_accept.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_accept.html</a></p>
</li>

<li>add_client_CA
<p>Adds the CA name extracted from cacert to the list of CAs sent to the client when requesting a client certificate for the chosen ssl, overriding the setting valid for ssl&#39;s SSL_CTX object.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::add_client_CA($ssl, $x);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $x - value corresponding to openssl&#39;s X509 structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html</a></p>
</li>

<li>callback_ctrl
<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::callback_ctrl($ssl, $cmd, $fp);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $cmd - (integer) command id
 # $fp - (function pointer) ???
 #
 # returns: ???</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html</a></p>
</li>

<li>check_private_key
<p>Checks the consistency of a private key with the corresponding certificate loaded into $ssl</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::check_private_key($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>clear
<p>Reset SSL object to allow another connection.</p>

<pre class="sh_perl"> Net::SSLeay::clear($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_clear.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_clear.html</a></p>
</li>

<li>connect
<p>Initiate the TLS/SSL handshake with an TLS/SSL server.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::connect($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: 1 = success, 0 = handshake not successfull, &#60;0 = fatal error during handshake</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_connect.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_connect.html</a></p>
</li>

<li>copy_session_id
<p>Copies the session structure fro $from to $to (+ also the private key and certificate associated with $from).</p>

<pre class="sh_perl"> Net::SSLeay::copy_session_id($to, $from);
 # $to - value corresponding to openssl&#39;s SSL structure
 # $from - value corresponding to openssl&#39;s SSL structure
 #
 # returns: no return value</pre>
</li>

<li>ctrl
<p>Internal handling function for SSL objects.</p>

<p><b>BEWARE:</b> openssl doc says: This function should never be called directly!</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::ctrl($ssl, $cmd, $larg, $parg);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $cmd - (integer) command id
 # $larg - (integer) long ???
 # $parg - (string/pointer) ???
 #
 # returns: (long) result of given command ???</pre>

<p>For more details about valid $cmd values check <a href="#CTX_ctrl" class="podlinkpod"
>&#34;CTX_ctrl&#34;</a>.</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html</a></p>
</li>

<li>do_handshake
<p>Will wait for a SSL/TLS handshake to take place. If the connection is in client mode, the handshake will be started. The handshake routines may have to be explicitly set in advance using either SSL_set_connect_state or SSL_set_accept_state(3).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::do_handshake($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: 1 = success, 0 = handshake not successfull, &#60;0 = fatal error during handshake</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_do_handshake.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_do_handshake.html</a></p>
</li>

<li>dup
<p>Returns a duplicate of $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::dup($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: value corresponding to openssl&#39;s SSL structure (0 on failure)</pre>
</li>

<li>free
<p>Free an allocated SSL structure.</p>

<pre class="sh_perl"> Net::SSLeay::free($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_free.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_free.html</a></p>
</li>

<li>get_SSL_CTX
<p>Returns a pointer to the SSL_CTX object, from which $ssl was created with Net::SSLeay::new.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_SSL_CTX($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: value corresponding to openssl&#39;s SSL_CTX structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_SSL_CTX.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_SSL_CTX.html</a></p>
</li>

<li>get_app_data
<p>Can be used to get application defined value/data.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_app_data($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: string/buffer/pointer ???</pre>
</li>

<li>set_app_data
<p>Can be used to set some application defined value/data.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set_app_data($ssl, $arg);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $arg - (string/buffer/pointer ???) data
 #
 # returns: ???</pre>
</li>

<li>get_certificate
<p>Gets X509 certificate from an established SSL connection.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_certificate($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: value corresponding to openssl&#39;s X509 structure (0 on failure)</pre>
</li>

<li>get_cipher
<p>Obtains the name of the currently used cipher.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_cipher($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: (string) cipher name e.g. &#39;DHE-RSA-AES256-SHA&#39; or &#39;&#39;, when no session has been established.</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html</a></p>
</li>

<li>get_cipher_bits
<p>Obtain the number of secret/algorithm bits used.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_cipher_bits($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: number of secret bits used by current cipher</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html</a> and <a href="http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html</a></p>
</li>

<li>get_cipher_list
<p>Returns the name (string) of the SSL_CIPHER listed for $ssl with priority $n.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_cipher_list($ssl, $n);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $n - (integer) priority
 #
 # returns: (string) cipher name e.g. &#39;EDH-DSS-DES-CBC3-SHA&#39; or &#39;&#39; in case of error</pre>

<p>Call Net::SSLeay::get_cipher_list with priority starting from 0 to obtain the sorted list of available ciphers, until &#39;&#39; is returned:</p>

<pre class="sh_perl"> my $priority = 0;
 while (my $c = Net::SSLeay::get_cipher_list($ssl, $priority)) {
   print &#34;cipher[$priority] = $c\n&#34;;
   $priority++;
 }</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_ciphers.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_ciphers.html</a></p>
</li>

<li>get_client_CA_list
<p>Returns the list of client CAs explicitly set for $ssl using <code>Net::SSleay::set_client_CA_list</code> or $ssl&#39;s SSL_CTX object with <code>Net::SSLeay::CTX_set_client_CA_list</code>, when in server mode.</p>

<p>In client mode, returns the list of client CAs sent from the server, if any.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_client_CA_list($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: value corresponding to openssl&#39;s STACK_OF(X509_NAME) structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html</a></p>
</li>

<li>get_current_cipher
<p>Returns the cipher actually used.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_current_cipher($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: value corresponding to openssl&#39;s SSL_CIPHER structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html</a></p>
</li>

<li>get_default_timeout
<p>Returns the default timeout value assigned to SSL_SESSION objects negotiated for the protocol valid for $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_default_timeout($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: (long) timeout in seconds</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_default_timeout.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_default_timeout.html</a></p>
</li>

<li>get_error
<p>Returns a result code for a preceding call to <code>connect</code>, <code>accept</code>, <code>do_handshake</code>, <code>read</code>, <code>peek</code> or <code>write</code> on $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_error($ssl, $ret);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $ret - return value of preceding TLS/SSL I/O operation
 #
 # returns: result code, which is one of the following values:
 #  0 - SSL_ERROR_NONE
 #  1 - SSL_ERROR_SSL
 #  2 - SSL_ERROR_WANT_READ
 #  3 - SSL_ERROR_WANT_WRITE
 #  4 - SSL_ERROR_WANT_X509_LOOKUP
 #  5 - SSL_ERROR_SYSCALL
 #  6 - SSL_ERROR_ZERO_RETURN
 #  7 - SSL_ERROR_WANT_CONNECT
 #  8 - SSL_ERROR_WANT_ACCEPT</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_error.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_error.html</a></p>
</li>

<li>get_ex_data
<p>Is used to retrieve the information for $idx from $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_ex_data($ssl, $idx);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $idx - (integer) index for application specific data
 #
 # returns: pointer to ???</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html</a></p>
</li>

<li>set_ex_data
<p>Is used to store application data at $data for $idx into the $ssl object.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set_ex_data($ssl, $idx, $data);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $idx - (integer) ???
 # $data - (pointer) ???
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html</a></p>
</li>

<li>get_ex_new_index
<p>Is used to register a new index for application specific data.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_ex_new_index($argl, $argp, $new_func, $dup_func, $free_func);
 # $argl - (long) ???
 # $argp - (pointer) ???
 # $new_func - function pointer ??? (CRYPTO_EX_new *)
 # $dup_func - function pointer ??? (CRYPTO_EX_dup *)
 # $free_func - function pointer ??? (CRYPTO_EX_free *)
 #
 # returns: (integer) ???</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html</a></p>
</li>

<li>get_fd
<p>Returns the file descriptor which is linked to $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_fd($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: file descriptor (&#62;=0) or -1 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_fd.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_fd.html</a></p>
</li>

<li>get_finished
<p>Obtains the latest &#39;Finished&#39; message sent to the peer.</p>

<p>??? (does this function really work?)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_finished($ssl, $buf, $count);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $buf - buffer where the returned data will be stored (pointer ???, pre-allocated ???)
 # $count - max. size of return data
 #
 # returns: actual size of the returned data in $buf</pre>
</li>

<li>get_peer_finished
<p>Obtains the latest &#39;Finished&#39; message expected from the peer.</p>

<p>??? (does this function really work?)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_peer_finished($ssl, $buf, $count);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $buf - buffer where the returned data will be stored (pointer ???, pre-allocated ???)
 # $count - max. size of the return data
 #
 # returns: actual size of the returned data in $buf</pre>
</li>

<li>get_keyblock_size
<p><b>NOTE:</b> Does not exactly correspond to any low level API function.</p>

<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_keyblock_size($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: keyblock size, -1 on error</pre>
</li>

<li>get_mode
<p>Returns the mode (bitmask) set for $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_mode($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: mode (bitmask)</pre>

<p>To decode the return value (bitmask) see documentation for <a href="#CTX_get_mode" class="podlinkpod"
>&#34;CTX_get_mode&#34;</a>.</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html</a></p>
</li>

<li>set_mode
<p>Adds the mode set via bitmask in $mode to $ssl. Options already set before are not cleared.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set_mode($ssl, $mode);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $mode - mode (bitmask)
 #
 # returns: the new mode bitmask after adding $mode</pre>

<p>For $mode bitmask details see <a href="#CTX_get_mode" class="podlinkpod"
>&#34;CTX_get_mode&#34;</a>.</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html</a></p>
</li>

<li>get_options
<p>Returns the options (bitmask) set for $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_options($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: options (bitmask)</pre>

<p>To decode the return value (bitmask) see documentation for <a href="#CTX_get_options" class="podlinkpod"
>&#34;CTX_get_options&#34;</a>.</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html</a></p>
</li>

<li>set_options
<p>Adds the options set via bitmask in $options to $ssl. Options already set before are not cleared!</p>

<pre class="sh_perl"> Net::SSLeay::set_options($ssl, $options);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $options - options (bitmask)
 #
 # returns: the new options bitmask after adding $options</pre>

<p>For $options bitmask details see <a href="#CTX_get_options" class="podlinkpod"
>&#34;CTX_get_options&#34;</a>.</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html</a></p>
</li>

<li>get_peer_certificate
<p>Get the X509 certificate of the peer.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_peer_certificate($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: value corresponding to openssl&#39;s X509 structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_peer_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_peer_certificate.html</a></p>
</li>

<li>get_quiet_shutdown
<p>Returns the &#39;quiet shutdown&#39; setting of ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_quiet_shutdown($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: (integer) current &#39;quiet shutdown&#39; value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html</a></p>
</li>

<li>get_rbio
<p>Get &#39;read&#39; BIO linked to an SSL object $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_rbio($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: value corresponding to openssl&#39;s BIO structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_rbio.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_rbio.html</a></p>
</li>

<li>get_read_ahead
<pre class="sh_perl"> my $rv = Net::SSLeay::get_read_ahead($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: (integer) read_ahead value</pre>
</li>

<li>set_read_ahead
<pre class="sh_perl"> Net::SSLeay::set_read_ahead($ssl, $val);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $val - read_ahead value to be set
 #
 # returns: the original read_ahead value</pre>
</li>

<li>get_server_random
<p>Returns internal SSLv3 server_random value.</p>

<pre class="sh_perl"> Net::SSLeay::get_server_random($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: server_random value (binary data)</pre>
</li>

<li>get_client_random
<p><b>NOTE:</b> Does not exactly correspond to any low level API function</p>

<p>Returns internal SSLv3 client_random value.</p>

<pre class="sh_perl"> Net::SSLeay::get_client_random($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: client_random value (binary data)</pre>
</li>

<li>get_session
<p>Retrieve TLS/SSL session data used in $ssl. The reference count of the SSL_SESSION is NOT incremented.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_session($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: value corresponding to openssl&#39;s SSL_SESSION structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_session.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_session.html</a></p>
</li>

<li>SSL_get0_session
<p>The alias for <a href="#get_session" class="podlinkpod"
>&#34;get_session&#34;</a> (note that the name is <code>SSL_get0_session</code> NOT <code>get0_session</code>).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::SSL_get0_session();</pre>
</li>

<li>get1_session
<p>Returns a pointer to the SSL_SESSION actually used in $ssl. The reference count of the SSL_SESSION is incremented by 1.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get1_session($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: value corresponding to openssl&#39;s SSL_SESSION structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_session.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_session.html</a></p>
</li>

<li>get_shared_ciphers
<p>Returns string with a list (colon &#39;:&#39; separated) of ciphers shared between client and server within SSL session $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_shared_ciphers()
 #
 # returns: string like &#39;ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES256-SHA:DHE-DSS-AES256-SHA:...&#39;</pre>
</li>

<li>get_shutdown
<p>Returns the shutdown mode of $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_shutdown($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: shutdown mode (bitmask) of ssl

 #to decode the return value (bitmask) use:
 0 - No shutdown setting, yet
 1 - SSL_SENT_SHUTDOWN
 2 - SSL_RECEIVED_SHUTDOWN</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_set_shutdown.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_set_shutdown.html</a></p>
</li>

<li>get_ssl_method
<p>Returns a function pointer to the TLS/SSL method set in $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_ssl_method($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: value corresponding to openssl&#39;s SSL_METHOD structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html</a></p>
</li>

<li>get_state
<p>Returns the SSL connection state.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_state($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: (integer) state value
 #          to decode the returned state check:
 #          SSL_ST_* constants in openssl/ssl.h
 #          SSL2_ST_* constants in openssl/ssl2.h
 #          SSL23_ST_* constants in openssl/ssl23.h
 #          SSL3_ST_* + DTLS1_ST_* constants in openssl/ssl3.h</pre>
</li>

<li>state
<p>Exactly the same as <a href="#get_state" class="podlinkpod"
>&#34;get_state&#34;</a>.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::state($ssl);</pre>
</li>

<li>get_verify_depth
<p>Returns the verification depth limit currently set in $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_verify_depth($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: current depth or -1 if no limit has been explicitly set</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html</a></p>
</li>

<li>set_verify_depth
<p>Sets the maximum depth for the certificate chain verification that shall be allowed for $ssl.</p>

<pre class="sh_perl"> Net::SSLeay::set_verify_depth($ssl, $depth);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $depth - (integer) depth
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html</a></p>
</li>

<li>get_verify_mode
<p>Returns the verification mode (bitmask) currently set in $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_verify_mode($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: mode (bitmask)</pre>

<p>To decode the return value (bitmask) see documentation for <a href="#CTX_get_verify_mode" class="podlinkpod"
>&#34;CTX_get_verify_mode&#34;</a>.</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html</a></p>
</li>

<li>set_verify
<p>Sets the verification flags for $ssl to be $mode and specifies the $verify_callback function to be used.</p>

<pre class="sh_perl"> Net::SSLeay::set_verify($ssl, $mode, $callback);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $mode - mode (bitmask)
 # $callback - [optional] reference to perl callback function
 #
 # returns: no return value</pre>

<p>For $mode bitmask details see <a href="#CTX_get_verify_mode" class="podlinkpod"
>&#34;CTX_get_verify_mode&#34;</a>.</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html</a></p>
</li>

<li>get_verify_result
<p>Returns the result of the verification of the X509 certificate presented by the peer, if any.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_verify_result($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: (integer)
 #      0 - X509_V_OK: ok
 #      2 - X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: unable to get issuer certificate
 #      3 - X509_V_ERR_UNABLE_TO_GET_CRL: unable to get certificate CRL
 #      4 - X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: unable to decrypt certificate&#39;s signature
 #      5 - X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: unable to decrypt CRL&#39;s signature
 #      6 - X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: unable to decode issuer public key
 #      7 - X509_V_ERR_CERT_SIGNATURE_FAILURE: certificate signature failure
 #      8 - X509_V_ERR_CRL_SIGNATURE_FAILURE: CRL signature failure
 #      9 - X509_V_ERR_CERT_NOT_YET_VALID: certificate is not yet valid
 #     10 - X509_V_ERR_CERT_HAS_EXPIRED: certificate has expired
 #     11 - X509_V_ERR_CRL_NOT_YET_VALID: CRL is not yet valid
 #     12 - X509_V_ERR_CRL_HAS_EXPIRED: CRL has expired
 #     13 - X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: format error in certificate&#39;s notBefore field
 #     14 - X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: format error in certificate&#39;s notAfter field
 #     15 - X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: format error in CRL&#39;s lastUpdate field
 #     16 - X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: format error in CRL&#39;s nextUpdate field
 #     17 - X509_V_ERR_OUT_OF_MEM: out of memory
 #     18 - X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: self signed certificate
 #     19 - X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: self signed certificate in certificate chain
 #     20 - X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: unable to get local issuer certificate
 #     21 - X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: unable to verify the first certificate
 #     22 - X509_V_ERR_CERT_CHAIN_TOO_LONG: certificate chain too long
 #     23 - X509_V_ERR_CERT_REVOKED: certificate revoked
 #     24 - X509_V_ERR_INVALID_CA: invalid CA certificate
 #     25 - X509_V_ERR_PATH_LENGTH_EXCEEDED: path length constraint exceeded
 #     26 - X509_V_ERR_INVALID_PURPOSE: unsupported certificate purpose
 #     27 - X509_V_ERR_CERT_UNTRUSTED: certificate not trusted
 #     28 - X509_V_ERR_CERT_REJECTED: certificate rejected
 #     29 - X509_V_ERR_SUBJECT_ISSUER_MISMATCH: subject issuer mismatch
 #     30 - X509_V_ERR_AKID_SKID_MISMATCH: authority and subject key identifier mismatch
 #     31 - X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: authority and issuer serial number mismatch
 #     32 - X509_V_ERR_KEYUSAGE_NO_CERTSIGN:key usage does not include certificate signing
 #     50 - X509_V_ERR_APPLICATION_VERIFICATION: application verification failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_verify_result.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_verify_result.html</a></p>
</li>

<li>set_verify_result
<p>Override result of peer certificate verification.</p>

<pre class="sh_perl"> Net::SSLeay::set_verify_result($ssl, $v);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $v - (integer) result value
 #
 # returns: no return value</pre>

<p>For more info about valid return values see <a href="#get_verify_result" class="podlinkpod"
>&#34;get_verify_result&#34;</a></p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_set_verify_result.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_set_verify_result.html</a></p>
</li>

<li>get_wbio
<p>Get &#39;write&#39; BIO linked to an SSL object $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::get_wbio($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: value corresponding to openssl&#39;s BIO structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_get_rbio.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_get_rbio.html</a></p>
</li>

<li>load_client_CA_file
<p>Load X509 certificates from file (PEM formated).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::load_client_CA_file($file);
 # $file - (string) file name
 #
 # returns: value corresponding to openssl&#39;s STACK_OF(X509_NAME) structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_load_client_CA_file.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_load_client_CA_file.html</a></p>
</li>

<li>clear_num_renegotiations
<p>Executes SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS command on $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::clear_num_renegotiations($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: command result</pre>
</li>

<li>need_tmp_RSA
<p>Executes SSL_CTRL_NEED_TMP_RSA command on $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::need_tmp_RSA($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: command result</pre>
</li>

<li>num_renegotiations
<p>Executes SSL_CTRL_GET_NUM_RENEGOTIATIONS command on $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::num_renegotiations($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: command result</pre>
</li>

<li>total_renegotiations
<p>Executes SSL_CTRL_GET_TOTAL_RENEGOTIATIONS command on $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::total_renegotiations($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: command result</pre>
</li>

<li>peek
<p>Copies $max bytes from the specified $ssl into the returned value. In constrast to the <code>Net::SSLeay::read()</code> function, the data in the SSL buffer is unmodified after the SSL_peek() operation.</p>

<pre class="sh_perl"> Net::SSLeay::peek($ssl, $max);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $max - [optional] max bytes to peek (integer) - default is 32768
 #
 # returns: read data, undef on error</pre>
</li>

<li>pending
<p>Obtain number of readable bytes buffered in $ssl object.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::pending($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: the number of bytes pending</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_pending.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_pending.html</a></p>
</li>

<li>read
<p>Tries to read $max bytes from the specified $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::read($ssl, $max);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $max - [optional] max bytes to read (integer) - default is 32768
 #
 # returns: data read from a TLS/SSL connection, undef on error</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_read.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_read.html</a></p>
</li>

<li>renegotiate
<p>Turn on flags for renegotiation so that renegotiation will happen</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::renegotiate($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>rstate_string
<p>Returns a 2 letter string indicating the current read state of the SSL object $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::rstate_string($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: 2-letter string</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_rstate_string.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_rstate_string.html</a></p>
</li>

<li>rstate_string_long
<p>Returns a string indicating the current read state of the SSL object ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::rstate_string_long($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: string with current state</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_rstate_string.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_rstate_string.html</a></p>
</li>

<li>session_reused
<p>Query whether a reused session was negotiated during handshake.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::session_reused($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: 0 - new session was negotiated; 1 - session was reused.</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_session_reused.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_session_reused.html</a></p>
</li>

<li>set1_param
<p>Applies X509 verification parameters $vpm on $ssl</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set1_param($ssl, $vpm);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $vpm - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>set_accept_state
<p>Sets $ssl to work in server mode.</p>

<pre class="sh_perl"> Net::SSLeay::set_accept_state($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_set_connect_state.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_set_connect_state.html</a></p>
</li>

<li>set_bio
<p>Connects the BIOs $rbio and $wbio for the read and write operations of the TLS/SSL (encrypted) side of $ssl.</p>

<pre class="sh_perl"> Net::SSLeay::set_bio($ssl, $rbio, $wbio);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $rbio - value corresponding to openssl&#39;s BIO structure
 # $wbio - value corresponding to openssl&#39;s BIO structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_set_bio.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_set_bio.html</a></p>
</li>

<li>set_cipher_list
<p>Sets the list of ciphers only for ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set_cipher_list($ssl, $str);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $str - (string) cipher list e.g. &#39;3DES:+RSA&#39;
 #
 # returns: 1 if any cipher could be selected and 0 on complete failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html</a></p>
</li>

<li>set_client_CA_list
<p>Sets the list of CAs sent to the client when requesting a client certificate for the chosen $ssl, overriding the setting valid for $ssl&#39;s SSL_CTX object.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set_client_CA_list($ssl, $list);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $list - value corresponding to openssl&#39;s STACK_OF(X509_NAME) structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html</a></p>
</li>

<li>set_connect_state
<p>Sets $ssl to work in client mode.</p>

<pre class="sh_perl"> Net::SSLeay::set_connect_state($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_set_connect_state.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_set_connect_state.html</a></p>
</li>

<li>set_fd
<p>Sets the file descriptor $fd as the input/output facility for the TLS/SSL (encrypted) side of $ssl, $fd will typically be the socket file descriptor of a network connection.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set_fd($ssl, $fd);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $fd - (integer) file handle (got via perl&#39;s fileno)
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_set_fd.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_set_fd.html</a></p>
</li>

<li>set_rfd
<p>Sets the file descriptor $fd as the input (read) facility for the TLS/SSL (encrypted) side of $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set_rfd($ssl, $fd);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $fd - (integer) file handle (got via perl&#39;s fileno)
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_set_fd.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_set_fd.html</a></p>
</li>

<li>set_wfd
<pre class="sh_perl"> my $rv = Net::SSLeay::set_wfd($ssl, $fd);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $fd - (integer) file handle (got via perl&#39;s fileno)
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_set_fd.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_set_fd.html</a></p>
</li>

<li>set_info_callback
<p>Sets the callback function, that can be used to obtain state information for $ssl during connection setup and use. When callback is 0 (NULL), the callback setting currently valid for ctx is used.</p>

<p>??? (does this function really work?)</p>

<pre class="sh_perl"> Net::SSLeay::set_info_callback($ssl, $cb);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $cb - pointer to function ???
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_info_callback.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_info_callback.html</a></p>
</li>

<li>set_pref_cipher
<p>Sets the list of available ciphers for $ssl using the control string $str.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set_pref_cipher($ssl, $str);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $str - (string) cipher list e.g. &#39;3DES:+RSA&#39;
 #
 # returns: 1 if any cipher could be selected and 0 on complete failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html</a></p>
</li>

<li>set_purpose
<pre class="sh_perl"> my $rv = Net::SSLeay::set_purpose($ssl, $purpose);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $purpose - (integer) purpose identifier
 #
 # returns: 1 on success, 0 on failure</pre>

<p>For more info about available $purpose identifiers see <a href="#CTX_set_purpose" class="podlinkpod"
>&#34;CTX_set_purpose&#34;</a>.</p>
</li>

<li>set_quiet_shutdown
<p>Sets the &#39;quiet shutdown&#39; flag for $ssl to be $mode.</p>

<pre class="sh_perl"> Net::SSLeay::set_quiet_shutdown($ssl, $mode);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $mode - 0 or 1
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html</a></p>
</li>

<li>set_session
<p>Set a TLS/SSL session to be used during TLS/SSL connect.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set_session($to, $ses);
 # $to - value corresponding to openssl&#39;s SSL structure
 # $ses - value corresponding to openssl&#39;s SSL_SESSION structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_set_session.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_set_session.html</a></p>
</li>

<li>set_session_id_context
<p>Sets the context $sid_ctx of length $sid_ctx_len within which a session can be reused for the $ssl object.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set_session_id_context($ssl, $sid_ctx, $sid_ctx_len);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $sid_ctx - data buffer
 # $sid_ctx_len - length of data in $sid_ctx
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html</a></p>
</li>

<li>set_session_secret_cb
<p>Setup pre-shared secret session resumption function.</p>

<pre class="sh_perl"> Net::SSLeay::set_session_secret_cb($ssl, $func, $data);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $func - perl reference to callback function
 # $data - [optional] data that will be passed to callback function when invoked
 #
 # returns: no return value</pre>
</li>

<li>set_shutdown
<p>Sets the shutdown state of $ssl to $mode.</p>

<pre class="sh_perl"> Net::SSLeay::set_shutdown($ssl, $mode);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $mode - (integer) shutdown mode:
 #         0 - No shutdown
 #         1 - SSL_SENT_SHUTDOWN
 #         2 - SSL_RECEIVED_SHUTDOWN
 #         3 - SSL_RECEIVED_SHUTDOWN+SSL_SENT_SHUTDOWN
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_set_shutdown.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_set_shutdown.html</a></p>
</li>

<li>set_ssl_method
<p>Sets a new TLS/SSL method for a particular $ssl object.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set_ssl_method($ssl, $method);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $method - value corresponding to openssl&#39;s SSL_METHOD structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html</a></p>
</li>

<li>set_tmp_dh
<p>Sets DH parameters to be used to be $dh.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set_tmp_dh($ssl, $dh);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $dh - value corresponding to openssl&#39;s DH structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html</a></p>
</li>

<li>set_tmp_dh_callback
<p>Sets the callback function for $ssl to be used when a DH parameters are required to $dh_cb.</p>

<p>??? (does this function really work?)</p>

<pre class="sh_perl"> Net::SSLeay::set_tmp_dh_callback($ssl, $dh);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $dh_cb - pointer to function ???
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html</a></p>
</li>

<li>set_tmp_rsa
<p>Sets the temporary/ephemeral RSA key to be used in $ssl to be $rsa.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::set_tmp_rsa($ssl, $rsa);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $rsa - value corresponding to openssl&#39;s RSA structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Example:</p>

<pre class="sh_perl"> $rsakey = Net::SSLeay::RSA_generate_key();
 Net::SSLeay::set_tmp_rsa($ssl, $rsakey);
 Net::SSLeay::RSA_free($rsakey);</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html</a></p>
</li>

<li>set_tmp_rsa_callback
<p>Sets the callback function for $ssl to be used when a temporary/ephemeral RSA key is required to $tmp_rsa_callback.</p>

<p>??? (does this function really work?)</p>

<pre class="sh_perl"> Net::SSLeay::set_tmp_rsa_callback($ssl, $tmp_rsa_callback);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $tmp_rsa_callback - (function pointer) ???
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html</a></p>
</li>

<li>set_trust
<pre class="sh_perl"> my $rv = Net::SSLeay::set_trust($ssl, $trust);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $trust - (integer) trust identifier
 #
 # returns: the original value</pre>

<p>For more details about $trust values see <a href="#CTX_set_trust" class="podlinkpod"
>&#34;CTX_set_trust&#34;</a>.</p>
</li>

<li>shutdown
<p>Shuts down an active TLS/SSL connection. It sends the &#39;close notify&#39; shutdown alert to the peer.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::shutdown($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: 1 - shutdown was successfully completed
 #          0 - shutdown is not yet finished,
 #         -1 - shutdown was not successful</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_shutdown.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_shutdown.html</a></p>
</li>

<li>state_string
<p>Returns a 6 letter string indicating the current state of the SSL object $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::state_string($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: 6-letter string</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_state_string.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_state_string.html</a></p>
</li>

<li>state_string_long
<p>Returns a string indicating the current state of the SSL object $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::state_string_long($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: state strings</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_state_string.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_state_string.html</a></p>
</li>

<li>use_PrivateKey
<p>Adds $pkey as private key to $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::use_PrivateKey($ssl, $pkey);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $pkey - value corresponding to openssl&#39;s EVP_PKEY structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>use_PrivateKey_ASN1
<p>Adds the private key of type $pk stored in $data to $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::use_PrivateKey_ASN1($pk, $ssl, $d, $len);
 # $pk - (integer) key type, NID of corresponding algorithm
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $data - key data (binary)
 # $len - length of $data
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>use_PrivateKey_file
<p>Adds the first private key found in $file to $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::use_PrivateKey_file($ssl, $file, $type);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $file - (string) file name
 # $type - (integer) type - use constants &#38;Net::SSLeay::FILETYPE_PEM or &#38;Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>use_RSAPrivateKey
<p>Adds $rsa as RSA private key to $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::use_RSAPrivateKey($ssl, $rsa);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $rsa - value corresponding to openssl&#39;s RSA structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>use_RSAPrivateKey_ASN1
<p>Adds RSA private key stored in $data to $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::use_RSAPrivateKey_ASN1($ssl, $data, $len);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $data - key data (binary)
 # $len - length of $data
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>use_RSAPrivateKey_file
<p>Adds the first RSA private key found in $file to $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::use_RSAPrivateKey_file($ssl, $file, $type);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $file - (string) file name
 # $type - (integer) type - use constants &#38;Net::SSLeay::FILETYPE_PEM or &#38;Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>use_certificate
<p>Loads the certificate $x into $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::use_certificate($ssl, $x);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $x - value corresponding to openssl&#39;s X509 structure
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>use_certificate_ASN1
<p>Loads the ASN1 encoded certificate from $data to $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::use_certificate_ASN1($ssl, $data, $len);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $data - certificate data (binary)
 # $len - length of $data
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>use_certificate_file
<p>Loads the first certificate stored in $file into $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::use_certificate_file($ssl, $file, $type);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $file - (string) file name
 # $type - (integer) type - use constants &#38;Net::SSLeay::FILETYPE_PEM or &#38;Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, otherwise check out the error stack to find out the reason</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html</a></p>
</li>

<li>version
<p>Returns SSL/TLS protocol version</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::version($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: (integer) protocol version
 #          0x0002 - SSL2_VERSION  (SSLv2)
 #          0x0300 - SSL3_VERSION  (SSLv3)
 #          0x0301 - TLS1_VERSION  (TLSv1)
 #          0xFEFF - DTLS1_VERSION (DTLSv1)</pre>
</li>

<li>want
<p>Returns state information for the SSL object $ssl.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::want($ssl);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: state
 #          1 - SSL_NOTHING
 #          2 - SSL_WRITING
 #          3 - SSL_READING
 #          4 - SSL_X509_LOOKUP</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_want.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_want.html</a></p>
</li>

<li>write
<p>Writes data from the buffer $data into the specified $ssl connection.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::write($ssl, $data);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $data - data to be written
 #
 # returns: &#62;0 - (success) number of bytes actually written to the TLS/SSL connection
 #           0 - write not successful, probably the underlying connection was closed
 #          &#60;0 - error</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_write.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_write.html</a></p>
</li>

<li>write_partial
<p><b>NOTE:</b> Does not exactly correspond to any low level API function</p>

<p>Writes a fragment of data data from the buffer $data into the specified $ssl connection.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::write_partial($ssl, $from, $count, $data);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $from - (integer) offset from the beginning of $data
 # $count - (integer) length of data to be written
 # $data - data buffer
 #
 # returns: &#62;0 - (success) number of bytes actually written to the TLS/SSL connection
 #           0 - write not successful, probably the underlying connection was closed
 #          &#60;0 - error</pre>
</li>

<li>set_tlsext_host_name
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.8f</p>

<p>Sets TLS servername extension on SLL object $ssl to value $name.</p>

<pre class="sh_perl"> my $rv = set_tlsext_host_name($ssl, $name);
 # $ssl - value corresponding to openssl&#39;s SSL structure
 # $name - (string) name to be set
 #
 # returns: 1 on success, 0 on failure</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_RAND_*_related_functions"
>Low level API: RAND_* related functions</a></h3>

<p>Check openssl doc related to RAND stuff <a href="http://www.openssl.org/docs/crypto/rand.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/rand.html</a></p>

<ul>
<li>RAND_add
<p>Mixes the $num bytes at $buf into the PRNG state.</p>

<pre class="sh_perl"> Net::SSLeay::RAND_add($buf, $num, $entropy);
 # $buf - buffer with data to be mixed into the PRNG state
 # $num - number of bytes in $buf
 # $entropy - estimate of how much randomness is contained in $buf (in bytes)
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/RAND_add.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/RAND_add.html</a></p>
</li>

<li>RAND_seed
<p>Equivalent to <a href="#RAND_add" class="podlinkpod"
>&#34;RAND_add&#34;</a> when $num == $entropy.</p>

<pre class="sh_perl"> Net::SSLeay::RAND_seed($buf);   # Perlishly figures out buf size
 # $buf - buffer with data to be mixed into the PRNG state
 # $num - number of bytes in $buf
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/RAND_add.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/RAND_add.html</a></p>
</li>

<li>RAND_status
<p>Gives PRNG status (seeded enough or not).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::RAND_status();
 #returns: 1 if the PRNG has been seeded with enough data, 0 otherwise</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/RAND_add.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/RAND_add.html</a></p>
</li>

<li>RAND_bytes
<p>Puts $num cryptographically strong pseudo-random bytes into $buf.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::RAND_bytes($buf, $num);
 # $buf - buffer where the random data will be stored
 # $num - the size (in bytes) of requested random data
 #
 # returns: 1 on success, 0 otherwise</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/RAND_bytes.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/RAND_bytes.html</a></p>
</li>

<li>RAND_pseudo_bytes
<p>Puts $num pseudo-random (not necessarily unpredictable) bytes into $buf.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::RAND_pseudo_bytes($buf, $num);
 # $buf - buffer where the random data will be stored
 # $num - the size (in bytes) of requested random data
 #
 # returns: 1 if the bytes generated are cryptographically strong, 0 otherwise</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/RAND_bytes.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/RAND_bytes.html</a></p>
</li>

<li>RAND_cleanup
<p>Erase the PRNG state.</p>

<pre class="sh_perl"> Net::SSLeay::RAND_cleanup();
 # no args, no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/RAND_cleanup.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/RAND_cleanup.html</a></p>
</li>

<li>RAND_egd
<p>Queries the entropy gathering daemon EGD on socket $path for 255 bytes.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::RAND_egd($path);
 # $path - path to a socket of entropy gathering daemon EGD
 #
 # returns: the number of bytes read from the daemon on success, and -1 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/RAND_egd.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/RAND_egd.html</a></p>
</li>

<li>RAND_egd_bytes
<p>Queries the entropy gathering daemon EGD on socket $path for $bytes bytes.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::RAND_egd_bytes($path, $bytes);
 # $path - path to a socket of entropy gathering daemon EGD
 # $bytes - number of bytes we want from EGD
 #
 # returns: the number of bytes read from the daemon on success, and -1 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/RAND_egd.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/RAND_egd.html</a></p>
</li>

<li>RAND_file_name
<p>Generates a default path for the random seed file.</p>

<pre class="sh_perl"> my $file = Net::SSLeay::RAND_file_name($num);
 # $num - maximum size of returned file name
 #
 # returns: string with file name on success, &#39;&#39; (empty string) on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/RAND_load_file.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/RAND_load_file.html</a></p>
</li>

<li>RAND_load_file
<p>Reads $max_bytes of bytes from $file_name and adds them to the PRNG.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::RAND_load_file($file_name, $max_bytes);
 # $file_name - the name of file
 # $max_bytes - bytes to read from $file_name; -1 =&#62; the complete file is read
 #
 # returns: the number of bytes read</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/RAND_load_file.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/RAND_load_file.html</a></p>
</li>

<li>RAND_write_file
<p>Writes 1024 random bytes to $file_name which can be used to initialize the PRNG by calling <a href="#RAND_load_file" class="podlinkpod"
>&#34;RAND_load_file&#34;</a> in a later session.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::RAND_write_file($file_name);
 # $file_name - the name of file
 #
 # returns: the number of bytes written, and -1 if the bytes written were generated without appropriate seed</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/RAND_load_file.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/RAND_load_file.html</a></p>
</li>

<li>RAND_poll
<p>Collects some entropy from operating system and adds it to the PRNG.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::RAND_poll();
 # returns: 1 on success, 0 on failure (unable to gather reasonable entropy)</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_OBJ_*_related_functions"
>Low level API: OBJ_* related functions</a></h3>

<ul>
<li>OBJ_cmp
<p>Compares ASN1_OBJECT $a to ASN1_OBJECT $b.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::OBJ_cmp($a, $b);
 # $a - value corresponding to openssl&#39;s ASN1_OBJECT structure
 # $b - value corresponding to openssl&#39;s ASN1_OBJECT structure
 #
 # returns: if the two are identical 0 is returned</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/OBJ_nid2obj.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/OBJ_nid2obj.html</a></p>
</li>

<li>OBJ_dup
<p>Returns a copy/duplicate of $o.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::OBJ_dup($o);
 # $o - value corresponding to openssl&#39;s ASN1_OBJECT structure
 #
 # returns: value corresponding to openssl&#39;s ASN1_OBJECT structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/OBJ_nid2obj.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/OBJ_nid2obj.html</a></p>
</li>

<li>OBJ_nid2ln
<p>Returns long name for given NID $n.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::OBJ_nid2ln($n);
 # $n - (integer) NID
 #
 # returns: (string) long name e.g. &#39;commonName&#39;</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/OBJ_nid2obj.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/OBJ_nid2obj.html</a></p>
</li>

<li>OBJ_ln2nid
<p>Returns NID corresponding to given long name $n.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::OBJ_ln2nid($s);
 # $s - (string) long name e.g. &#39;commonName&#39;
 #
 # returns: (integer) NID</pre>
</li>

<li>OBJ_nid2sn
<p>Returns short name for given NID $n.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::OBJ_nid2sn($n);
 # $n - (integer) NID
 #
 # returns: (string) short name e.g. &#39;CN&#39;</pre>

<p>Example:</p>

<pre class="sh_perl"> print Net::SSLeay::OBJ_nid2sn(&#38;Net::SSLeay::NID_commonName);</pre>
</li>

<li>OBJ_sn2nid
<p>Returns NID corresponding to given short name $s.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::OBJ_sn2nid($s);
 # $s - (string) short name e.g. &#39;CN&#39;
 #
 # returns: (integer) NID</pre>

<p>Example:</p>

<pre class="sh_perl"> print &#34;NID_commonName constant=&#34;, &#38;Net::SSLeay::NID_commonName;
 print &#34;OBJ_sn2nid(&#39;CN&#39;)=&#34;, Net::SSLeay::OBJ_sn2nid(&#39;CN&#39;);</pre>
</li>

<li>OBJ_nid2obj
<p>Returns ASN1_OBJECT for given NID $n.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::OBJ_nid2obj($n);
 # $n - (integer) NID
 #
 # returns: value corresponding to openssl&#39;s ASN1_OBJECT structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/OBJ_nid2obj.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/OBJ_nid2obj.html</a></p>
</li>

<li>OBJ_obj2nid
<p>Returns NID corresponding to given ASN1_OBJECT $o.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::OBJ_obj2nid($o);
 # $o - value corresponding to openssl&#39;s ASN1_OBJECT structure
 #
 # returns: (integer) NID</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/OBJ_nid2obj.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/OBJ_nid2obj.html</a></p>
</li>

<li>OBJ_txt2obj
<p>Converts the text string s into an ASN1_OBJECT structure. If $no_name is 0 then long names (e.g. &#39;commonName&#39;) and short names (e.g. &#39;CN&#39;) will be interpreted as well as numerical forms (e.g. &#39;2.5.4.3&#39;). If $no_name is 1 only the numerical form is acceptable.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::OBJ_txt2obj($s, $no_name);
 # $s - text string to be converted
 # $no_name - (integer) 0 or 1
 #
 # returns: value corresponding to openssl&#39;s ASN1_OBJECT structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/OBJ_nid2obj.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/OBJ_nid2obj.html</a></p>
</li>

<li>OBJ_obj2txt
<p>Converts the ASN1_OBJECT a into a textual representation.</p>

<pre class="sh_perl"> Net::SSLeay::OBJ_obj2txt($a, $no_name);
 # $a - value corresponding to openssl&#39;s ASN1_OBJECT structure
 # $no_name - (integer) 0 or 1
 #
 # returns: textual representation e.g. &#39;commonName&#39; ($no_name=0), &#39;2.5.4.3&#39; ($no_name=1)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/OBJ_nid2obj.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/OBJ_nid2obj.html</a></p>
</li>

<li>OBJ_txt2nid
<p>Returns NID corresponding to text string $s which can be a long name, a short name or the numerical respresentation of an object.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::OBJ_txt2nid($s);
 # $s - (string) e.g. &#39;commonName&#39; or &#39;CN&#39; or &#39;2.5.4.3&#39;
 #
 # returns: (integer) NID</pre>

<p>Example:</p>

<pre class="sh_perl"> my $nid = Net::SSLeay::OBJ_txt2nid(&#39;2.5.4.3&#39;);
 Net::SSLeay::OBJ_nid2sn($n);</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/OBJ_nid2obj.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/OBJ_nid2obj.html</a></p>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_ASN1_INTEGER_*_related_functions"
>Low level API: ASN1_INTEGER_* related functions</a></h3>

<ul>
<li>ASN1_INTEGER_new
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Creates a new ASN1_INTEGER structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::ASN1_INTEGER_new();
 #
 # returns: value corresponding to openssl&#39;s ASN1_INTEGER structure (0 on failure)</pre>
</li>

<li>ASN1_INTEGER_free
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Free an allocated ASN1_INTEGER structure.</p>

<pre class="sh_perl"> Net::SSLeay::ASN1_INTEGER_free($i);
 # $i - value corresponding to openssl&#39;s ASN1_INTEGER structure
 #
 # returns: no return value</pre>
</li>

<li>ASN1_INTEGER_get
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns integer value of given ASN1_INTEGER object.</p>

<p><b>BEWARE:</b> If the value stored in ASN1_INTEGER is greater than max. integer that can be stored in &#39;long&#39; type (usually 32bit but may vary according to platform) then this function will return -1. For getting large ASN1_INTEGER values consider using <a href="#P_ASN1_INTEGER_get_dec" class="podlinkpod"
>&#34;P_ASN1_INTEGER_get_dec&#34;</a> or <a href="#P_ASN1_INTEGER_get_hex" class="podlinkpod"
>&#34;P_ASN1_INTEGER_get_hex&#34;</a>.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::ASN1_INTEGER_get($a);
 # $a - value corresponding to openssl&#39;s ASN1_INTEGER structure
 #
 # returns: integer value of ASN1_INTEGER object in $a</pre>
</li>

<li>ASN1_INTEGER_set
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sets value of given ASN1_INTEGER object to value $val</p>

<p><b>BEWARE:</b> $val has max. limit (= max. integer that can be stored in &#39;long&#39; type). For setting large ASN1_INTEGER values consider using <a href="#P_ASN1_INTEGER_set_dec" class="podlinkpod"
>&#34;P_ASN1_INTEGER_set_dec&#34;</a> or <a href="#P_ASN1_INTEGER_set_hex" class="podlinkpod"
>&#34;P_ASN1_INTEGER_set_hex&#34;</a>.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::ASN1_INTEGER_set($i, $val);
 # $i - value corresponding to openssl&#39;s ASN1_INTEGER structure
 # $val - integer value
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>P_ASN1_INTEGER_get_dec
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns string with decimal representation of integer value of given ASN1_INTEGER object.</p>

<pre class="sh_perl"> Net::SSLeay::P_ASN1_INTEGER_get_dec($i);
 # $i - value corresponding to openssl&#39;s ASN1_INTEGER structure
 #
 # returns: string with decimal representation</pre>
</li>

<li>P_ASN1_INTEGER_get_hex
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns string with hexadecimal representation of integer value of given ASN1_INTEGER object.</p>

<pre class="sh_perl"> Net::SSLeay::P_ASN1_INTEGER_get_hex($i);
 # $i - value corresponding to openssl&#39;s ASN1_INTEGER structure
 #
 # returns: string with hexadecimal representation</pre>
</li>

<li>P_ASN1_INTEGER_set_dec
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sets value of given ASN1_INTEGER object to value $val (decimal string, suitable for large integers)</p>

<pre class="sh_perl"> Net::SSLeay::P_ASN1_INTEGER_set_dec($i, $str);
 # $i - value corresponding to openssl&#39;s ASN1_INTEGER structure
 # $str - string with decimal representation
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>P_ASN1_INTEGER_set_hex
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sets value of given ASN1_INTEGER object to value $val (hexadecimal string, suitable for large integers)</p>

<pre class="sh_perl"> Net::SSLeay::P_ASN1_INTEGER_set_hex($i, $str);
 # $i - value corresponding to openssl&#39;s ASN1_INTEGER structure
 # $str - string with hexadecimal representation
 #
 # returns: 1 on success, 0 on failure</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_ASN1_STRING_*_related_functions"
>Low level API: ASN1_STRING_* related functions</a></h3>

<ul>
<li>P_ASN1_STRING_get
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns string value of given ASN1_STRING object.</p>

<pre class="sh_perl"> Net::SSLeay::P_ASN1_STRING_get($s, $utf8_decode);
 # $s - value corresponding to openssl&#39;s ASN1_STRING structure
 # $utf8_decode - [optional] 0 or 1 whether the returned value should be utf8 decoded (default=0)
 #
 # returns: string

 $string = Net::SSLeay::P_ASN1_STRING_get($s);
 #is the same as:
 $string = Net::SSLeay::P_ASN1_STRING_get($s, 0);</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_ASN1_TIME_*_related_functions"
>Low level API: ASN1_TIME_* related functions</a></h3>

<ul>
<li>ASN1_TIME_new
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before</p>

<pre class="sh_perl"> my $time = ASN1_TIME_new();
 # returns: value corresponding to openssl&#39;s ASN1_TIME structure</pre>
</li>

<li>ASN1_TIME_free
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before</p>

<pre class="sh_perl"> ASN1_TIME_free($time);
 # $time - value corresponding to openssl&#39;s ASN1_TIME structure</pre>
</li>

<li>ASN1_TIME_set
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before</p>

<pre class="sh_perl"> ASN1_TIME_set($time, $t);
 # $time - value corresponding to openssl&#39;s ASN1_TIME structure
 # $t - time value in seconds since 1.1.1970</pre>

<p><b>BEWARE:</b> It is platform dependent how this function will handle dates after 2038. Although perl&#39;s integer is large enough the internal implementation of this function is dependent on the size of time_t structure (32bit time_t has problem with 2038).</p>

<p>If you want to safely set date and time after 2038 use function <a href="#P_ASN1_TIME_set_isotime" class="podlinkpod"
>&#34;P_ASN1_TIME_set_isotime&#34;</a>.</p>
</li>

<li>P_ASN1_TIME_get_isotime
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7e</p>

<p><b>NOTE:</b> Does not exactly correspond to any low level API function</p>

<p>Gives ISO-8601 string representation of ASN1_TIME structure.</p>

<pre class="sh_perl"> my $datetime_string = P_ASN1_TIME_get_isotime($time);
 # $time - value corresponding to openssl&#39;s ASN1_TIME structure
 #
 # returns: datetime string like &#39;2033-05-16T20:39:37Z&#39; or &#39;&#39; on failure</pre>

<p>The output format is compatible with module <a href="/perldoc?DateTime%3A%3AFormat%3A%3ARFC3339" class="podlinkpod"
>DateTime::Format::RFC3339</a></p>
</li>

<li>P_ASN1_TIME_set_isotime
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7e</p>

<p><b>NOTE:</b> Does not exactly correspond to any low level API function</p>

<p>Sets time and date value of ANS1_time structure.</p>

<pre class="sh_perl"> my $rv = P_ASN1_TIME_set_isotime($time, $string);
 # $time - value corresponding to openssl&#39;s ASN1_TIME structure
 # $string - ISO-8601 timedate string like &#39;2033-05-16T20:39:37Z&#39;
 #
 # returns: 1 on success, 0 on failure</pre>

<p>The <code>$string</code> parameter has to be in full form like <code>&#34;2012-03-22T23:55:33&#34;</code> or <code>&#34;2012-03-22T23:55:33Z&#34;</code> or <code>&#34;2012-03-22T23:55:33CET&#34;</code>. Short forms like <code>&#34;2012-03-22T23:55&#34;</code> or <code>&#34;2012-03-22&#34;</code> are not supported.</p>
</li>

<li>P_ASN1_TIME_put2string
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before, has bugs with openssl-0.9.8i</p>

<p><b>NOTE:</b> Does not exactly correspond to any low level API function</p>

<p>Gives string representation of ASN1_TIME structure.</p>

<pre class="sh_perl"> my $str = P_ASN1_TIME_put2string($time);
 # $time - value corresponding to openssl&#39;s ASN1_TIME structure
 #
 # returns: datetime string like &#39;May 16 20:39:37 2033 GMT&#39;</pre>
</li>

<li>P_ASN1_UTCTIME_put2string
<p><b>NOTE:</b> deprecated function, only for backward compatibility, just an alias for <a href="#P_ASN1_TIME_put2string" class="podlinkpod"
>&#34;P_ASN1_TIME_put2string&#34;</a></p>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_X509_*_related_functions"
>Low level API: X509_* related functions</a></h3>

<ul>
<li>X509_new
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Allocates and initializes a X509 structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_new();
 #
 # returns: value corresponding to openssl&#39;s X509 structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_new.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_new.html</a></p>
</li>

<li>X509_free
<p>Frees up the X509 structure.</p>

<pre class="sh_perl"> Net::SSLeay::X509_free($a);
 # $a - value corresponding to openssl&#39;s X509 structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_new.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_new.html</a></p>
</li>

<li>X509_certificate_type
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns bitmask with type of certificate $x.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_certificate_type($x);
 # $x - value corresponding to openssl&#39;s X509 structure
 #
 # returns: (integer) bitmask with certificate type

 #to decode bitmask returned by this function use these constants:
 &#38;Net::SSLeay::EVP_PKS_DSA
 &#38;Net::SSLeay::EVP_PKS_EC
 &#38;Net::SSLeay::EVP_PKS_RSA
 &#38;Net::SSLeay::EVP_PKT_ENC
 &#38;Net::SSLeay::EVP_PKT_EXCH
 &#38;Net::SSLeay::EVP_PKT_EXP
 &#38;Net::SSLeay::EVP_PKT_SIGN
 &#38;Net::SSLeay::EVP_PK_DH
 &#38;Net::SSLeay::EVP_PK_DSA
 &#38;Net::SSLeay::EVP_PK_EC
 &#38;Net::SSLeay::EVP_PK_RSA</pre>
</li>

<li>X509_digest
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Computes digest/fingerprint of X509 $data using $type hash function.</p>

<pre class="sh_perl"> my $digest_value = Net::SSLeay::X509_digest($data, $type);
 # $data - value corresponding to openssl&#39;s X509 structure
 # $type - value corresponding to openssl&#39;s EVP_MD structure - e.g. got via EVP_get_digestbyname()
 #
 # returns: hash value (binary)

 #to get printable (hex) value of digest use:
 print unpack(&#39;H*&#39;, $digest_value);</pre>
</li>

<li>X509_issuer_and_serial_hash
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sort of a checksum of issuer name and serial number of X509 certificate $x. The result is not a full hash (e.g. sha-1), it is kind-of-a-hash truncated to the size of &#39;unsigned long&#39; (32 bits). The resulting value might differ accross different openssl versions for the same X509 certificate.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_issuer_and_serial_hash($x);
 # $x - value corresponding to openssl&#39;s X509 structure
 #
 # returns: number representing checksum</pre>
</li>

<li>X509_issuer_name_hash
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sort of a checksum of issuer name of X509 certificate $x. The result is not a full hash (e.g. sha-1), it is kind-of-a-hash truncated to the size of &#39;unsigned long&#39; (32 bits). The resulting value might differ accross different openssl versions for the same X509 certificate.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_issuer_name_hash($x);
 # $x - value corresponding to openssl&#39;s X509 structure
 #
 # returns: number representing checksum</pre>
</li>

<li>X509_subject_name_hash
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sort of a checksum of subject name of X509 certificate $x. The result is not a full hash (e.g. sha-1), it is kind-of-a-hash truncated to the size of &#39;unsigned long&#39; (32 bits). The resulting value might differ accross different openssl versions for the same X509 certificate.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_subject_name_hash($x);
 # $x - value corresponding to openssl&#39;s X509 structure
 #
 # returns: number representing checksum</pre>
</li>

<li>X509_pubkey_digest
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7</p>

<p>Computes digest/fingerprint of public key from X509 certificate $data using $type hash function.</p>

<pre class="sh_perl"> my $digest_value = Net::SSLeay::X509_pubkey_digest($data, $type);
 # $data - value corresponding to openssl&#39;s X509 structure
 # $type - value corresponding to openssl&#39;s EVP_MD structure - e.g. got via EVP_get_digestbyname()
 #
 # returns: hash value (binary)

 #to get printable (hex) value of digest use:
 print unpack(&#39;H*&#39;, $digest_value);</pre>
</li>

<li>X509_set_issuer_name
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sets issuer of X509 certificate $x to $name.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_set_issuer_name($x, $name);
 # $x - value corresponding to openssl&#39;s X509 structure
 # $name - value corresponding to openssl&#39;s X509_NAME structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_set_pubkey
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sets public key of X509 certificate $x to $pkey.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_set_pubkey($x, $pkey);
 # $x - value corresponding to openssl&#39;s X509 structure
 # $pkey - value corresponding to openssl&#39;s EVP_PKEY structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_set_serialNumber
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sets serial number of X509 certificate $x to $serial.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_set_serialNumber($x, $serial);
 # $x - value corresponding to openssl&#39;s X509 structure
 # $serial - value corresponding to openssl&#39;s ASN1_INTEGER structure
 #
 # returns: 1 on success, 0 on failure

 #to create $serial value use one of these:
 $serial = Net::SSLeay::P_ASN1_INTEGER_set_hex(&#39;45ad6f&#39;);
 $serial = Net::SSLeay::P_ASN1_INTEGER_set_dec(&#39;7896541238529631478&#39;);
 $serial = Net::SSLeay::ASN1_INTEGER_set(45896);</pre>
</li>

<li>X509_set_subject_name
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sets subject of X509 certificate $x to $name.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_set_subject_name($x, $name);
 # $x - value corresponding to openssl&#39;s X509 structure
 # $name - value corresponding to openssl&#39;s X509_NAME structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_set_version
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Set &#39;version&#39; value for X509 certificate $ to $version.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_set_version($x, $version);
 # $x - value corresponding to openssl&#39;s X509 structure
 # $version - (integer) version number
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_sign
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sign X509 certificate $x with private key $pkey (using digest algorithm $md).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_sign($x, $pkey, $md);
 # $x - value corresponding to openssl&#39;s X509 structure
 # $pkey - value corresponding to openssl&#39;s EVP_PKEY structure
 # $md - value corresponding to openssl&#39;s EVP_MD structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_verify
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Verifies X509 object $a using public key $r (pubkey of issuing CA).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_verify($x, $r);
 # $x - value corresponding to openssl&#39;s X509 structure
 # $r - value corresponding to openssl&#39;s EVP_PKEY structure
 #
 # returns: 0 - verify failure, 1 - verify OK, &#60;0 - error</pre>
</li>

<li>X509_get_ext_count
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns the total number of extensions in X509 object $x.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_get_ext_count($x);
 # $x - value corresponding to openssl&#39;s X509 structure
 #
 # returns: count of extensions</pre>
</li>

<li>X509_get_pubkey
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns public key corresponding to given X509 object $x.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_get_pubkey($x);
 # $x - value corresponding to openssl&#39;s X509 structure
 #
 # returns: value corresponding to openssl&#39;s EVP_PKEY structure (0 on failure)</pre>
</li>

<li>X509_get_serialNumber
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns serial number of X509 certificate $x.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_get_serialNumber($x);
 # $x - value corresponding to openssl&#39;s X509 structure
 #
 # returns: value corresponding to openssl&#39;s ASN1_INTEGER structure (0 on failure)</pre>

<p>See <a href="#P_ASN1_INTEGER_get_dec" class="podlinkpod"
>&#34;P_ASN1_INTEGER_get_dec&#34;</a>, <a href="#P_ASN1_INTEGER_get_hex" class="podlinkpod"
>&#34;P_ASN1_INTEGER_get_hex&#34;</a> or <a href="#ASN1_INTEGER_get" class="podlinkpod"
>&#34;ASN1_INTEGER_get&#34;</a> to decode ASN1_INTEGER object.</p>
</li>

<li>X509_get_version
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns &#39;version&#39; value of given X509 certificate $x.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_get_version($x);
 # $x - value corresponding to openssl&#39;s X509 structure
 #
 # returns: (integer) version</pre>
</li>

<li>X509_get_ext
<p>Returns X509_EXTENSION from $x509 based on given position/index.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_get_ext($x509, $index);
 # $x509 - value corresponding to openssl&#39;s X509 structure
 # $index - (integer) position/index of extension within $x509
 #
 # returns: value corresponding to openssl&#39;s X509_EXTENSION structure (0 on failure)</pre>
</li>

<li>X509_get_ext_by_NID
<p>Returns X509_EXTENSION from $x509 based on given NID.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_get_ext_by_NID($x509, $nid, $loc);
 # $x509 - value corresponding to openssl&#39;s X509 structure
 # $nid - (integer) NID value
 # $loc - (integer) position to start lookup at
 #
 # returns: position/index of extension, negative value on error
 #          call Net::SSLeay::X509_get_ext($x509, $rv) to get the actual extension</pre>
</li>

<li>X509_get_fingerprint
<p>Returns fingerprint of certificate $cert.</p>

<p><b>NOTE:</b> Does not exactly correspond to any low level API function. The implementation is basen on openssl&#39;s <code>X509_digest()</code>.</p>

<pre class="sh_perl"> Net::SSLeay::X509_get_fingerprint($x509, $type);
 # $x509 - value corresponding to openssl&#39;s X509 structure
 # $type - (string) digest type, currently supported values:
 #         &#34;md5&#34;
 #         &#34;sha1&#34;
 #         &#34;sha256&#34;
 #         &#34;ripemd160&#34;
 #
 # returns: certificate digest - hexadecimal string (NOT binary data!)</pre>
</li>

<li>X509_get_issuer_name
<p>Return an X509_NAME object representing the issuer of the certificate $cert.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_get_issuer_name($cert);
 # $cert - value corresponding to openssl&#39;s X509 structure
 #
 # returns: value corresponding to openssl&#39;s X509_NAME structure (0 on failure)</pre>
</li>

<li>X509_get_notAfter
<p>Return an object giving the time after which the certificate $cert is not valid.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_get_notAfter($cert);
 # $cert - value corresponding to openssl&#39;s X509 structure
 #
 # returns: value corresponding to openssl&#39;s ASN1_TIME structure (0 on failure)</pre>

<p>To get human readable/printable form the return value you can use:</p>

<pre class="sh_perl"> my $time = Net::SSLeay::X509_get_notAfter($cert);
 print &#34;notAfter=&#34;, Net::SSLeay::P_ASN1_TIME_get_isotime($time), &#34;\n&#34;;</pre>
</li>

<li>X509_get_notBefore
<p>Return an object giving the time before which the certificate $cert is not valid</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_get_notBefore($cert);
 # $cert - value corresponding to openssl&#39;s X509 structure
 #
 # returns: value corresponding to openssl&#39;s ASN1_TIME structure (0 on failure)</pre>

<p>To get human readable/printable form the return value you can use:</p>

<pre class="sh_perl"> my $time = Net::SSLeay::X509_get_notBefore($cert);
 print &#34;notBefore=&#34;, Net::SSLeay::P_ASN1_TIME_get_isotime($time), &#34;\n&#34;;</pre>
</li>

<li>X509_get_subjectAltNames
<p><b>NOTE:</b> Does not exactly correspond to any low level API function.</p>

<p>Returns the list of alternative subject names from X509 certificate $cert.</p>

<pre class="sh_perl"> my @rv = Net::SSLeay::X509_get_subjectAltNames($cert);
 # $cert - value corresponding to openssl&#39;s X509 structure
 #
 # returns: list containing pairs - name_type (integer), name_value (string)
 #          where name_type can be:
 #          0 - GEN_OTHERNAME
 #          1 - GEN_EMAIL
 #          2 - GEN_DNS
 #          3 - GEN_X400
 #          4 - GEN_DIRNAME
 #          5 - GEN_EDIPARTY
 #          6 - GEN_URI
 #          7 - GEN_IPADD
 #          8 - GEN_RID</pre>
</li>

<li>X509_get_subject_name
<p>Returns the subject of the certificate $cert.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_get_subject_name($cert);
 # $cert - value corresponding to openssl&#39;s X509 structure
 #
 # returns: value corresponding to openssl&#39;s X509_NAME structure (0 on failure)</pre>
</li>

<li>X509_gmtime_adj
<p>Adjust th ASN1_TIME object to the timestamp (in GMT).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_gmtime_adj($s, $adj);
 # $s - value corresponding to openssl&#39;s ASN1_TIME structure
 # $adj - timestamp (seconds since 1.1.1970)
 #
 # returns: value corresponding to openssl&#39;s ASN1_TIME structure (0 on failure)</pre>

<p><b>BEWARE:</b> this function may fail for dates after 2038 as it is dependent on time_t size on your system (32bit time_t does not work after 2038). Consider using <a href="#P_ASN1_TIME_set_isotime" class="podlinkpod"
>&#34;P_ASN1_TIME_set_isotime&#34;</a> instead).</p>
</li>

<li>X509_load_cert_crl_file
<p>Takes PEM file and loads all X509 certificates and X509 CRLs from that file into X509_LOOKUP structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_load_cert_crl_file($ctx, $file, $type);
 # $ctx - value corresponding to openssl&#39;s X509_LOOKUP structure
 # $file - (string) file name
 # $type - (integer) type - use constants &#38;Net::SSLeay::FILETYPE_PEM or &#38;Net::SSLeay::FILETYPE_ASN1
 #                          if not FILETYPE_PEM then behaves as Net::SSLeay::X509_load_cert_file()
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_load_cert_file
<p>Loads/adds X509 certificate from $file to X509_LOOKUP structure</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_load_cert_file($ctx, $file, $type);
 # $ctx - value corresponding to openssl&#39;s X509_LOOKUP structure
 # $file - (string) file name
 # $type - (integer) type - use constants &#38;Net::SSLeay::FILETYPE_PEM or &#38;Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_load_crl_file
<p>Loads/adds X509 CRL from $file to X509_LOOKUP structure</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_load_crl_file($ctx, $file, $type);
 # $ctx - value corresponding to openssl&#39;s X509_LOOKUP structure
 # $file - (string) file name
 # $type - (integer) type - use constants &#38;Net::SSLeay::FILETYPE_PEM or &#38;Net::SSLeay::FILETYPE_ASN1
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_policy_level_get0_node
<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_policy_level_get0_node($level, $i);
 # $level - value corresponding to openssl&#39;s X509_POLICY_LEVEL structure
 # $i - (integer) index/position
 #
 # returns: value corresponding to openssl&#39;s X509_POLICY_NODE structure (0 on failure)</pre>
</li>

<li>X509_policy_level_node_count
<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_policy_level_node_count($level);
 # $level - value corresponding to openssl&#39;s X509_POLICY_LEVEL structure
 #
 # returns: (integer) node count</pre>
</li>

<li>X509_policy_node_get0_parent
<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_policy_node_get0_parent($node);
 # $node - value corresponding to openssl&#39;s X509_POLICY_NODE structure
 #
 # returns: value corresponding to openssl&#39;s X509_POLICY_NODE structure (0 on failure)</pre>
</li>

<li>X509_policy_node_get0_policy
<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_policy_node_get0_policy($node);
 # $node - value corresponding to openssl&#39;s X509_POLICY_NODE structure
 #
 # returns: value corresponding to openssl&#39;s ASN1_OBJECT structure (0 on failure)</pre>
</li>

<li>X509_policy_node_get0_qualifiers
<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_policy_node_get0_qualifiers($node);
 # $node - value corresponding to openssl&#39;s X509_POLICY_NODE structure
 #
 # returns: value corresponding to openssl&#39;s STACK_OF(POLICYQUALINFO) structure (0 on failure)</pre>
</li>

<li>X509_policy_tree_free
<p>??? (more info needed)</p>

<pre class="sh_perl"> Net::SSLeay::X509_policy_tree_free($tree);
 # $tree - value corresponding to openssl&#39;s X509_POLICY_TREE structure
 #
 # returns: no return value</pre>
</li>

<li>X509_policy_tree_get0_level
<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_policy_tree_get0_level($tree, $i);
 # $tree - value corresponding to openssl&#39;s X509_POLICY_TREE structure
 # $i - (integer) level index
 #
 # returns: value corresponding to openssl&#39;s X509_POLICY_LEVEL structure (0 on failure)</pre>
</li>

<li>X509_policy_tree_get0_policies
<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_policy_tree_get0_policies($tree);
 # $tree - value corresponding to openssl&#39;s X509_POLICY_TREE structure
 #
 # returns: value corresponding to openssl&#39;s X509_POLICY_NODE structure (0 on failure)</pre>
</li>

<li>X509_policy_tree_get0_user_policies
<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_policy_tree_get0_user_policies($tree);
 # $tree - value corresponding to openssl&#39;s X509_POLICY_TREE structure
 #
 # returns: value corresponding to openssl&#39;s X509_POLICY_NODE structure (0 on failure)</pre>
</li>

<li>X509_policy_tree_level_count
<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_policy_tree_level_count($tree);
 # $tree - value corresponding to openssl&#39;s X509_POLICY_TREE structure
 #
 # returns: (integer) count</pre>
</li>

<li>X509_verify_cert_error_string
<p>Returns a human readable error string for verification error $n.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_verify_cert_error_string($n);
 # $n - (long) numeric error code
 #
 # returns: error string</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html</a></p>
</li>

<li>P_X509_add_extensions
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Adds one or more X509 extensions to X509 object $x.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::P_X509_add_extensions($x, $ca_cert, $nid, $value);
 # $x - value corresponding to openssl&#39;s X509 structure
 # $ca_cert - value corresponding to openssl&#39;s X509 structure (issuer&#39;s cert - necessary for sertting NID_authority_key_identifier)
 # $nid - NID identifying extension to be set
 # $value - extension value
 #
 # returns: 1 on success, 0 on failure</pre>

<p>You can set more extensions at once:</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::P_X509_add_extensions($x509, $ca_cert,
                &#38;Net::SSLeay::NID_key_usage =&#62; &#39;digitalSignature,keyEncipherment&#39;,
                &#38;Net::SSLeay::NID_subject_key_identifier =&#62; &#39;hash&#39;,
                &#38;Net::SSLeay::NID_authority_key_identifier =&#62; &#39;keyid&#39;,
                &#38;Net::SSLeay::NID_authority_key_identifier =&#62; &#39;issuer&#39;,
                &#38;Net::SSLeay::NID_basic_constraints =&#62; &#39;CA:FALSE&#39;,
                &#38;Net::SSLeay::NID_ext_key_usage =&#62; &#39;serverAuth,clientAuth&#39;,
                &#38;Net::SSLeay::NID_netscape_cert_type =&#62; &#39;server&#39;,
                &#38;Net::SSLeay::NID_subject_alt_name =&#62; &#39;DNS:s1.dom.com,DNS:s2.dom.com,DNS:s3.dom.com&#39;,
          );</pre>
</li>

<li>P_X509_copy_extensions
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Copies X509 extensions from X509_REQ object to X509 object - handy when you need to turn X509_REQ into X509 certificate.</p>

<pre class="sh_perl"> Net::SSLeay::P_X509_copy_extensions($x509_req, $x509, $override);
 # $x509_req - value corresponding to openssl&#39;s X509_REQ structure
 # $x509 - value corresponding to openssl&#39;s X509 structure
 # $override - (integer) flag indication whether to override already existing items in $x509 (default 1)
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>P_X509_get_crl_distribution_points
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7</p>

<p>Get the list of CRL distribution points from X509 certificate.</p>

<pre class="sh_perl"> my @cdp = Net::SSLeay::P_X509_get_crl_distribution_points($x509);
 # $x509 - value corresponding to openssl&#39;s X509 structure
 #
 # returns: list of distribution points (usually URLs)</pre>
</li>

<li>P_X509_get_ext_key_usage
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7</p>

<p>Gets the list of extended key usage of given X509 certificate $cert.</p>

<pre class="sh_perl"> my @ext_usage = Net::SSLeay::P_X509_get_ext_key_usage($cert, $format);
 # $cert - value corresponding to openssl&#39;s X509 structure
 # $format - choose type of return values: 0=OIDs, 1=NIDs, 2=shortnames, 3=longnames
 #
 # returns: list of values</pre>

<p>Examples:</p>

<pre class="sh_perl"> my @extkeyusage_oid = Net::SSLeay::P_X509_get_ext_key_usage($x509,0);
 # returns for example: (&#34;1.3.6.1.5.5.7.3.1&#34;, &#34;1.3.6.1.5.5.7.3.2&#34;)

 my @extkeyusage_nid = Net::SSLeay::P_X509_get_ext_key_usage($x509,1);
 # returns for example: (129, 130)

 my @extkeyusage_sn  = Net::SSLeay::P_X509_get_ext_key_usage($x509,2);
 # returns for example: (&#34;serverAuth&#34;, &#34;clientAuth&#34;)

 my @extkeyusage_ln  = Net::SSLeay::P_X509_get_ext_key_usage($x509,3);
 # returns for example: (&#34;TLS Web Server Authentication&#34;,  &#34;TLS Web Client Authentication&#34;)</pre>
</li>

<li>P_X509_get_key_usage
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Gets the list of key usage of given X509 certificate $cert.</p>

<pre class="sh_perl"> my @keyusage = Net::SSLeay::P_X509_get_key_usage($cert);
 # $cert - value corresponding to openssl&#39;s X509 structure
 #
 # returns: list of key usage values which can be none, one or more from the following list:
 #          &#34;digitalSignature&#34;
 #          &#34;nonRepudiation&#34;
 #          &#34;keyEncipherment&#34;
 #          &#34;dataEncipherment&#34;
 #          &#34;keyAgreement&#34;
 #          &#34;keyCertSign&#34;
 #          &#34;cRLSign&#34;
 #          &#34;encipherOnly&#34;
 #          &#34;decipherOnly&#34;</pre>
</li>

<li>P_X509_get_netscape_cert_type
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Gets the list of Netscape cert types of given X509 certificate $cert.</p>

<pre class="sh_perl"> Net::SSLeay::P_X509_get_netscape_cert_type($cert);
 # $cert - value corresponding to openssl&#39;s X509 structure
 #
 # returns: list of Netscape type values which can be none, one or more from the following list:
 #          &#34;client&#34;
 #          &#34;server&#34;
 #          &#34;email&#34;
 #          &#34;objsign&#34;
 #          &#34;reserved&#34;
 #          &#34;sslCA&#34;
 #          &#34;emailCA&#34;
 #          &#34;objCA&#34;</pre>
</li>

<li>P_X509_get_pubkey_alg
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns ASN1_OBJECT corresponding to X509 certificate public key algorithm.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::P_X509_get_pubkey_alg($x);
 # $x - value corresponding to openssl&#39;s X509 structure
 #
 # returns: value corresponding to openssl&#39;s ASN1_OBJECT structure (0 on failure)</pre>

<p>To get textual representation use:</p>

<pre class="sh_perl"> my $alg = Net::SSLeay::OBJ_obj2txt(Net::SSLeay::P_X509_get_pubkey_alg($x509));
 # returns for example: &#34;rsaEncryption&#34;</pre>
</li>

<li>P_X509_get_signature_alg
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns ASN1_OBJECT corresponding to X509 signarite key algorithm.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::P_X509_get_signature_alg($x);
 # $x - value corresponding to openssl&#39;s X509 structure
 #
 # returns: value corresponding to openssl&#39;s ASN1_OBJECT structure (0 on failure)</pre>

<p>To get textual representation use:</p>

<pre class="sh_perl"> my $alg = Net::SSLeay::OBJ_obj2txt(Net::SSLeay::P_X509_get_signature_alg($x509))
 # returns for example: &#34;sha1WithRSAEncryption&#34;</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_X509_REQ_*_related_functions"
>Low level API: X509_REQ_* related functions</a></h3>

<ul>
<li>X509_REQ_new
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Creates a new X509_REQ structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_REQ_new();
 #
 # returns: value corresponding to openssl&#39;s X509_REQ structure (0 on failure)</pre>
</li>

<li>X509_REQ_free
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Free an allocated X509_REQ structure.</p>

<pre class="sh_perl"> Net::SSLeay::X509_REQ_free($x);
 # $x - value corresponding to openssl&#39;s X509_REQ structure
 #
 # returns: no return value</pre>
</li>

<li>X509_REQ_add1_attr_by_NID
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Adds an attribute whose name is defined by a NID $nid. The field value to be added is in $bytes.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_REQ_add1_attr_by_NID($req, $nid, $type, $bytes);
 # $req - value corresponding to openssl&#39;s X509_REQ structure
 # $nid - (integer) NID value
 # $type - (integer) type of data in $bytes (see below)
 # $bytes - data to be set
 #
 # returns: 1 on success, 0 on failure

 # values for $type - use constants:
 &#38;Net::SSLeay::MBSTRING_UTF8     - $bytes contains utf8 encoded data
 &#38;Net::SSLeay::MBSTRING_ASC      - $bytes contains ASCII data</pre>
</li>

<li>X509_REQ_digest
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Computes digest/fingerprint of X509_REQ $data using $type hash function.</p>

<pre class="sh_perl"> my $digest_value = Net::SSLeay::X509_REQ_digest($data, $type);
 # $data - value corresponding to openssl&#39;s X509_REQ structure
 # $type - value corresponding to openssl&#39;s EVP_MD structure - e.g. got via EVP_get_digestbyname()
 #
 # returns: hash value (binary)

 #to get printable (hex) value of digest use:
 print unpack(&#39;H*&#39;, $digest_value);</pre>
</li>

<li>X509_REQ_get_attr_by_NID
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Retrieve the next index matching $nid after $lastpos ($lastpos should initially be set to -1).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_REQ_get_attr_by_NID($req, $nid, $lastpos=-1);
 # $req - value corresponding to openssl&#39;s X509_REQ structure
 # $nid - (integer) NID value
 # $lastpos - [optional] (integer) index where to start search (default -1)
 #
 # returns: index (-1 if there are no more entries)</pre>

<p>Note: use <a href="#P_X509_REQ_get_attr" class="podlinkpod"
>&#34;P_X509_REQ_get_attr&#34;</a> to get the actual attribute value - e.g.</p>

<pre class="sh_perl"> my $index = Net::SSLeay::X509_REQ_get_attr_by_NID($req, $nid);
 my @attr_values = Net::SSLeay::P_X509_REQ_get_attr($req, $index);</pre>
</li>

<li>X509_REQ_get_attr_by_OBJ
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Retrieve the next index matching $obj after $lastpos ($lastpos should initially be set to -1).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_REQ_get_attr_by_OBJ($req, $obj, $lastpos=-1);
 # $req - value corresponding to openssl&#39;s X509_REQ structure
 # $obj - value corresponding to openssl&#39;s ASN1_OBJECT structure
 # $lastpos - [optional] (integer) index where to start search (default -1)
 #
 # returns: index (-1 if there are no more entries)</pre>

<p>Note: use <a href="#P_X509_REQ_get_attr" class="podlinkpod"
>&#34;P_X509_REQ_get_attr&#34;</a> to get the actual attribute value - e.g.</p>

<pre class="sh_perl"> my $index = Net::SSLeay::X509_REQ_get_attr_by_NID($req, $nid);
 my @attr_values = Net::SSLeay::P_X509_REQ_get_attr($req, $index);</pre>
</li>

<li>X509_REQ_get_attr_count
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns the total number of attributes in $req.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_REQ_get_attr_count($req);
 # $req - value corresponding to openssl&#39;s X509_REQ structure
 #
 # returns: (integer) items count</pre>
</li>

<li>X509_REQ_get_pubkey
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns public key corresponding to given X509_REQ object $x.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_REQ_get_pubkey($x);
 # $x - value corresponding to openssl&#39;s X509_REQ structure
 #
 # returns: value corresponding to openssl&#39;s EVP_PKEY structure (0 on failure)</pre>
</li>

<li>X509_REQ_get_subject_name
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns X509_NAME object corresponding to subject name of given X509_REQ object $x.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_REQ_get_subject_name($x);
 # $x - value corresponding to openssl&#39;s X509_REQ structure
 #
 # returns: value corresponding to openssl&#39;s X509_NAME structure (0 on failure)</pre>
</li>

<li>X509_REQ_get_version
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns &#39;version&#39; value for given X509_REQ object $x.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_REQ_get_version($x);
 # $x - value corresponding to openssl&#39;s X509_REQ structure
 #
 # returns: (integer) version e.g. 0 = &#34;version 1&#34;</pre>
</li>

<li>X509_REQ_set_pubkey
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sets public key of given X509_REQ object $x to $pkey.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_REQ_set_pubkey($x, $pkey);
 # $x - value corresponding to openssl&#39;s X509_REQ structure
 # $pkey - value corresponding to openssl&#39;s EVP_PKEY structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_REQ_set_subject_name
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sets subject name of given X509_REQ object $x to X509_NAME object $name.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_REQ_set_subject_name($x, $name);
 # $x - value corresponding to openssl&#39;s X509_REQ structure
 # $name - value corresponding to openssl&#39;s X509_NAME structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_REQ_set_version
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sets &#39;version&#39; of given X509_REQ object $x to $version.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_REQ_set_version($x, $version);
 # $x - value corresponding to openssl&#39;s X509_REQ structure
 # $version - (integer) e.g. 0 = &#34;version 1&#34;
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_REQ_sign
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sign X509_REQ object $x with private key $pk (using digest algorithm $md).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_REQ_sign($x, $pk, $md);
 # $x - value corresponding to openssl&#39;s X509_REQ structure
 # $pk - value corresponding to openssl&#39;s EVP_PKEY structure (requestor&#39;s private key)
 # $md - value corresponding to openssl&#39;s EVP_MD structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_REQ_verify
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Verifies X509_REQ object $x using public key $r (pubkey of requesting party).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_REQ_verify($x, $r);
 # $x - value corresponding to openssl&#39;s X509_REQ structure
 # $r - value corresponding to openssl&#39;s EVP_PKEY structure
 #
 # returns: 0 - verify failure, 1 - verify OK, &#60;0 - error</pre>
</li>

<li>P_X509_REQ_add_extensions
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Adds one or more X509 extensions to X509_REQ object $x.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::P_X509_REQ_add_extensions($x, $nid, $value);
 # $x - value corresponding to openssl&#39;s X509_REQ structure
 # $nid - NID identifying extension to be set
 # $value - extension value
 #
 # returns: 1 on success, 0 on failure</pre>

<p>You can set more extensions at once:</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::P_X509_REQ_add_extensions($x509_req,
            &#38;Net::SSLeay::NID_key_usage =&#62; &#39;digitalSignature,keyEncipherment&#39;,
            &#38;Net::SSLeay::NID_basic_constraints =&#62; &#39;CA:FALSE&#39;,
            &#38;Net::SSLeay::NID_ext_key_usage =&#62; &#39;serverAuth,clientAuth&#39;,
            &#38;Net::SSLeay::NID_netscape_cert_type =&#62; &#39;server&#39;,
            &#38;Net::SSLeay::NID_subject_alt_name =&#62; &#39;DNS:s1.com,DNS:s2.com&#39;,
            &#38;Net::SSLeay::NID_crl_distribution_points =&#62; &#39;URI:<a href="http://pki.com/crl1,URI:http://pki.com/crl2" class="podlinkurl"
>http://pki.com/crl1,URI:http://pki.com/crl2</a>&#39;,
          );</pre>
</li>

<li>P_X509_REQ_get_attr
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7</p>

<p>Returns attribute value for X509_REQ&#39;s attribute at index $n.</p>

<pre class="sh_perl"> Net::SSLeay::P_X509_REQ_get_attr($req, $n);
 # $req - value corresponding to openssl&#39;s X509_REQ structure
 # $n - (integer) attribute index
 #
 # returns: value corresponding to openssl&#39;s ASN1_STRING structure</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_X509_CRL_*_related_functions"
>Low level API: X509_CRL_* related functions</a></h3>

<ul>
<li>X509_CRL_new
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Creates a new X509_CRL structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_CRL_new();
 #
 # returns: value corresponding to openssl&#39;s X509_CRL structure (0 on failure)</pre>
</li>

<li>X509_CRL_free
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Free an allocated X509_CRL structure.</p>

<pre class="sh_perl"> Net::SSLeay::X509_CRL_free($x);
 # $x - value corresponding to openssl&#39;s X509_CRL structure
 #
 # returns: no return value</pre>
</li>

<li>X509_CRL_digest
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Computes digest/fingerprint of X509_CRL $data using $type hash function.</p>

<pre class="sh_perl"> my $digest_value = Net::SSLeay::X509_CRL_digest($data, $type);
 # $data - value corresponding to openssl&#39;s X509_CRL structure
 # $type - value corresponding to openssl&#39;s EVP_MD structure - e.g. got via EVP_get_digestbyname()
 #
 # returns: hash value (binary)</pre>

<p>Example:</p>

<pre class="sh_perl"> my $x509_crl
 my $md = Net::SSLeay::EVP_get_digestbyname(&#34;sha1&#34;);
 my $digest_value = Net::SSLeay::X509_CRL_digest($x509_crl, $md);
 #to get printable (hex) value of digest use:
 print &#34;digest=&#34;, unpack(&#39;H*&#39;, $digest_value), &#34;\n&#34;;</pre>
</li>

<li>X509_CRL_get_issuer
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns X509_NAME object corresponding to the issuer of X509_CRL $x.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_CRL_get_issuer($x);
 # $x - value corresponding to openssl&#39;s X509_CRL structure
 #
 # returns: value corresponding to openssl&#39;s X509_NAME structure (0 on failure)</pre>

<p>See other <code>X509_NAME_*</code> functions to get more info from X509_NAME structure.</p>
</li>

<li>X509_CRL_get_lastUpdate
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns &#39;lastUpdate&#39; date-time value of X509_CRL object $x.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_CRL_get_lastUpdate($x);
 # $x - value corresponding to openssl&#39;s X509_CRL structure
 #
 # returns: value corresponding to openssl&#39;s ASN1_TIME structure (0 on failure)</pre>
</li>

<li>X509_CRL_get_nextUpdate
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns &#39;nextUpdate&#39; date-time value of X509_CRL object $x.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_CRL_get_nextUpdate($x);
 # $x - value corresponding to openssl&#39;s X509_CRL structure
 #
 # returns: value corresponding to openssl&#39;s ASN1_TIME structure (0 on failure)</pre>
</li>

<li>X509_CRL_get_version
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns &#39;version&#39; value of given X509_CRL structure $x.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_CRL_get_version($x);
 # $x - value corresponding to openssl&#39;s X509_CRL structure
 #
 # returns: (integer) version</pre>
</li>

<li>X509_CRL_set_issuer_name
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7</p>

<p>Sets the issuer of X509_CRL object $x to X509_NAME object $name.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_CRL_set_issuer_name($x, $name);
 # $x - value corresponding to openssl&#39;s X509_CRL structure
 # $name - value corresponding to openssl&#39;s X509_NAME structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_CRL_set_lastUpdate
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7</p>

<p>Sets &#39;lastUpdate&#39; value of X509_CRL object $x to $tm.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_CRL_set_lastUpdate($x, $tm);
 # $x - value corresponding to openssl&#39;s X509_CRL structure
 # $tm - value corresponding to openssl&#39;s ASN1_TIME structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_CRL_set_nextUpdate
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7</p>

<p>Sets &#39;nextUpdate&#39; value of X509_CRL object $x to $tm.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_CRL_set_nextUpdate($x, $tm);
 # $x - value corresponding to openssl&#39;s X509_CRL structure
 # $tm - value corresponding to openssl&#39;s ASN1_TIME structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_CRL_set_version
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7</p>

<p>Sets &#39;version&#39; value of given X509_CRL structure $x to $version.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_CRL_set_version($x, $version);
 # $x - value corresponding to openssl&#39;s X509_CRL structure
 # $version - (integer) version number (1 = version 2 CRL)
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Note that if you want to use any X509_CRL extension you need to set &#34;version 2 CRL&#34; - <code>Net::SSLeay::X509_CRL_set_version($x, 1)</code>.</p>
</li>

<li>X509_CRL_sign
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Sign X509_CRL object $x with private key $pkey (using digest algorithm $md).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_CRL_sign($x, $pkey, $md);
 # $x - value corresponding to openssl&#39;s X509_CRL structure
 # $pkey - value corresponding to openssl&#39;s EVP_PKEY structure
 # $md - value corresponding to openssl&#39;s EVP_MD structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_CRL_sort
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7</p>

<p>Sorts the data of X509_CRL object so it will be written in serial number order.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_CRL_sort($x);
 # $x - value corresponding to openssl&#39;s X509_CRL structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_CRL_verify
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Verifies X509_CRL object $a using public key $r (pubkey of issuing CA).</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_CRL_verify($a, $r);
 # $a - value corresponding to openssl&#39;s X509_CRL structure
 # $r - value corresponding to openssl&#39;s EVP_PKEY structure
 #
 # returns: 0 - verify failure, 1 - verify OK, &#60;0 - error</pre>
</li>

<li>P_X509_CRL_add_revoked_serial_hex
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7</p>

<p>Adds given serian number $serial_hex to X509_CRL object $crl.</p>

<pre class="sh_perl"> Net::SSLeay::P_X509_CRL_add_revoked_serial_hex($crl, $serial_hex, $rev_time, $reason_code, $comp_time);
 # $crl - value corresponding to openssl&#39;s X509_CRL structure
 # $serial_hex - string (hexadecimal) representation of serial number
 # $rev_time - (revocation time) value corresponding to openssl&#39;s ASN1_TIME structure
 # $reason_code - [optional] (integer) reason code (see below) - default 0
 # $comp_time - [optional] (compromise time) value corresponding to openssl&#39;s ASN1_TIME structure
 #
 # returns: no return value

 reason codes:
 0 - unspecified
 1 - keyCompromise
 2 - CACompromise
 3 - affiliationChanged
 4 - superseded
 5 - cessationOfOperation
 6 - certificateHold
 7 - removeFromCRL</pre>
</li>

<li>P_X509_CRL_get_serial
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7</p>

<p>Returns serial number of X509_CRL object.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::P_X509_CRL_get_serial($crl);
 # $crl - value corresponding to openssl&#39;s X509_CRL structure
 #
 # returns: value corresponding to openssl&#39;s ASN1_INTEGER structure (0 on failure)</pre>
</li>

<li>P_X509_CRL_set_serial
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.7</p>

<p>Sets serial number of X509_CRL object to $crl_number.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::P_X509_CRL_set_serial($crl, $crl_number);
 # $crl - value corresponding to openssl&#39;s X509_CRL structure
 # $crl_number - value corresponding to openssl&#39;s ASN1_INTEGER structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_X509_EXTENSION_*_related_functions"
>Low level API: X509_EXTENSION_* related functions</a></h3>

<ul>
<li>X509_EXTENSION_get_critical
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns &#39;critical&#39; flag of given X509_EXTENSION object $ex.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_EXTENSION_get_critical($ex);
 # $ex - value corresponding to openssl&#39;s X509_EXTENSION structure
 #
 # returns: (integer) 1 - critical, 0 - noncritical</pre>
</li>

<li>X509_EXTENSION_get_data
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns value (raw data) of X509_EXTENSION object $ne.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_EXTENSION_get_data($ne);
 # $ne - value corresponding to openssl&#39;s X509_EXTENSION structure
 #
 # returns: value corresponding to openssl&#39;s ASN1_OCTET_STRING structure (0 on failure)</pre>

<p>Note: you can use <a href="#P_ASN1_STRING_get" class="podlinkpod"
>&#34;P_ASN1_STRING_get&#34;</a> to convert ASN1_OCTET_STRING into perl scalar variable.</p>
</li>

<li>X509_EXTENSION_get_object
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns OID (ASN1_OBJECT) of X509_EXTENSION object $ne.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_EXTENSION_get_object($ex);
 # $ex - value corresponding to openssl&#39;s X509_EXTENSION structure
 #
 # returns: value corresponding to openssl&#39;s ASN1_OBJECT structure (0 on failure)</pre>
</li>

<li>X509V3_EXT_print
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns string representation of given X509_EXTENSION object $ext.</p>

<pre class="sh_perl"> Net::SSLeay::X509V3_EXT_print($ext, $flags, $utf8_decode);
 # $ext - value corresponding to openssl&#39;s X509_EXTENSION structure
 # $flags - [optional] (integer) Currently the flag argument is unused and should be set to 0
 # $utf8_decode - [optional] 0 or 1 whether the returned value should be utf8 decoded (default=0)
 #
 # returns: no return value</pre>
</li>

<li>X509V3_EXT_d2i
<p>Parses an extension and returns its internal structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509V3_EXT_d2i($ext);
 # $ext - value corresponding to openssl&#39;s X509_EXTENSION structure
 #
 # returns: pointer ???</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_X509_NAME_*_related_functions"
>Low level API: X509_NAME_* related functions</a></h3>

<ul>
<li>X509_NAME_ENTRY_get_data
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Retrieves the field value of $ne in and ASN1_STRING structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_NAME_ENTRY_get_data($ne);
 # $ne - value corresponding to openssl&#39;s X509_NAME_ENTRY structure
 #
 # returns: value corresponding to openssl&#39;s ASN1_STRING structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html</a></p>
</li>

<li>X509_NAME_ENTRY_get_object
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Retrieves the field name of $ne in and ASN1_OBJECT structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_NAME_ENTRY_get_object($ne);
 # $ne - value corresponding to openssl&#39;s X509_NAME_ENTRY structure
 #
 # returns: value corresponding to openssl&#39;s ASN1_OBJECT structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html</a></p>
</li>

<li>X509_NAME_add_entry_by_txt
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.5</p>

<p>Adds a field whose name is defined by a string $field. The field value to be added is in $bytes.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_NAME_add_entry_by_txt($name, $field, $type, $bytes, $len, $loc, $set);
 # $name - value corresponding to openssl&#39;s X509_NAME structure
 # $field - (string) field definition (name) - e.g. &#34;organizationName&#34;
 # $type - (integer) type of data in $bytes (see below)
 # $bytes - data to be set
 # $loc - [optional] (integer) index where the new entry is inserted: if it is -1 (default) it is appended
 # $set - [optional] (integer) determines how the new type is added. If it is 0 (default) a new RDN is created
 #
 # returns: 1 on success, 0 on failure

 # values for $type - use constants:
 &#38;Net::SSLeay::MBSTRING_UTF8     - $bytes contains utf8 encoded data
 &#38;Net::SSLeay::MBSTRING_ASC      - $bytes contains ASCII data</pre>

<p>Unicode note: when passing non-ascii (unicode) string in $bytes do not forget to set <code>$flags = &#38;Net::SSLeay::MBSTRING_UTF8</code> and encode the perl $string via <code>$bytes = encode(&#39;utf-8&#39;, $string)</code>.</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html</a></p>
</li>

<li>X509_NAME_add_entry_by_NID
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.5</p>

<p>Adds a field whose name is defined by a NID $nid. The field value to be added is in $bytes.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_NAME_add_entry_by_NID($name, $nid, $type, $bytes, $len, $loc, $set);
 # $name - value corresponding to openssl&#39;s X509_NAME structure
 # $nid - (integer) field definition - NID value
 # $type - (integer) type of data in $bytes (see below)
 # $bytes - data to be set
 # $loc - [optional] (integer) index where the new entry is inserted: if it is -1 (default) it is appended
 # $set - [optional] (integer) determines how the new type is added. If it is 0 (default) a new RDN is created
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html</a></p>
</li>

<li>X509_NAME_add_entry_by_OBJ
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-0.9.5</p>

<p>Adds a field whose name is defined by a object (OID) $obj . The field value to be added is in $bytes.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_NAME_add_entry_by_OBJ($name, $obj, $type, $bytes, $len, $loc, $set);
 # $name - value corresponding to openssl&#39;s X509_NAME structure
 # $obj - field definition - value corresponding to openssl&#39;s ASN1_OBJECT structure
 # $type - (integer) type of data in $bytes (see below)
 # $bytes - data to be set
 # $loc - [optional] (integer) index where the new entry is inserted: if it is -1 (default) it is appended
 # $set - [optional] (integer) determines how the new type is added. If it is 0 (default) a new RDN is created
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html</a></p>
</li>

<li>X509_NAME_cmp
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Compares two X509_NAME obejcts.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_NAME_cmp($a, $b);
 # $a - value corresponding to openssl&#39;s X509_NAME structure
 # $b - value corresponding to openssl&#39;s X509_NAME structure
 #
 # returns: 0 if $a matches $b; non zero otherwise</pre>
</li>

<li>X509_NAME_digest
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Computes digest/fingerprint of X509_NAME $data using $type hash function.</p>

<pre class="sh_perl"> my $digest_value = Net::SSLeay::X509_NAME_digest($data, $type);
 # $data - value corresponding to openssl&#39;s X509_NAME structure
 # $type - value corresponding to openssl&#39;s EVP_MD structure - e.g. got via EVP_get_digestbyname()
 #
 # returns: hash value (binary)

 #to get printable (hex) value of digest use:
 print unpack(&#39;H*&#39;, $digest_value);</pre>
</li>

<li>X509_NAME_entry_count
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns the total number of entries in $name.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_NAME_entry_count($name);
 # $name - value corresponding to openssl&#39;s X509_NAME structure
 #
 # returns: (integer) entries count</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html</a></p>
</li>

<li>X509_NAME_get_entry
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Retrieves the X509_NAME_ENTRY from $name corresponding to index $loc. Acceptable values for $loc run from 0 to <code>Net::SSLeay::X509_NAME_entry_count($name)- 1</code>. The value returned is an internal pointer which must not be freed.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_NAME_get_entry($name, $loc);
 # $name - value corresponding to openssl&#39;s X509_NAME structure
 # $loc - (integer) index of wanted entry
 #
 # returns: value corresponding to openssl&#39;s X509_NAME_ENTRY structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html</a></p>
</li>

<li>X509_NAME_print_ex
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns a string with human readable version of $name.</p>

<pre class="sh_perl"> Net::SSLeay::X509_NAME_print_ex($name, $flags, $utf8_decode);
 # $name - value corresponding to openssl&#39;s X509_NAME structure
 # $flags - [optional] conversion flags (default XN_FLAG_RFC2253) - see below
 # $utf8_decode - [optional] 0 or 1 whether the returned value should be utf8 decoded (default=0)
 #
 # returns: string representation of $name

 #available conversion flags - use constants:
 &#38;Net::SSLeay::XN_FLAG_COMPAT
 &#38;Net::SSLeay::XN_FLAG_DN_REV
 &#38;Net::SSLeay::XN_FLAG_DUMP_UNKNOWN_FIELDS
 &#38;Net::SSLeay::XN_FLAG_FN_ALIGN
 &#38;Net::SSLeay::XN_FLAG_FN_LN
 &#38;Net::SSLeay::XN_FLAG_FN_MASK
 &#38;Net::SSLeay::XN_FLAG_FN_NONE
 &#38;Net::SSLeay::XN_FLAG_FN_OID
 &#38;Net::SSLeay::XN_FLAG_FN_SN
 &#38;Net::SSLeay::XN_FLAG_MULTILINE
 &#38;Net::SSLeay::XN_FLAG_ONELINE
 &#38;Net::SSLeay::XN_FLAG_RFC2253
 &#38;Net::SSLeay::XN_FLAG_SEP_COMMA_PLUS
 &#38;Net::SSLeay::XN_FLAG_SEP_CPLUS_SPC
 &#38;Net::SSLeay::XN_FLAG_SEP_MASK
 &#38;Net::SSLeay::XN_FLAG_SEP_MULTILINE
 &#38;Net::SSLeay::XN_FLAG_SEP_SPLUS_SPC
 &#38;Net::SSLeay::XN_FLAG_SPC_EQ</pre>

<p>Most likely you will be fine with default:</p>

<pre class="sh_perl"> Net::SSLeay::X509_NAME_print_ex($name, &#38;Net::SSLeay::XN_FLAG_RFC2253);</pre>

<p>Or you might want RFC2253-like output without utf8 chars escaping:</p>

<pre class="sh_perl"> use Net::SSLeay qw/XN_FLAG_RFC2253 ASN1_STRFLGS_ESC_MSB/;
 my $flag_rfc22536_utf8 = (XN_FLAG_RFC2253) &#38; (~ ASN1_STRFLGS_ESC_MSB);
 my $result = Net::SSLeay::X509_NAME_print_ex($name, $flag_rfc22536_utf8, 1);</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html</a></p>
</li>

<li>X509_NAME_get_text_by_NID
<p>Retrieves the text from the first entry in name which matches $nid, if no such entry exists -1 is returned.</p>

<p><b>openssl note:</b> this is a legacy function which has various limitations which makes it of minimal use in practice. It can only find the first matching entry and will copy the contents of the field verbatim: this can be highly confusing if the target is a muticharacter string type like a BMPString or a UTF8String.</p>

<pre class="sh_perl"> Net::SSLeay::X509_NAME_get_text_by_NID($name, $nid);
 # $name - value corresponding to openssl&#39;s X509_NAME structure
 # $nid - NID value (integer)
 #
 # returns: text value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html</a></p>
</li>

<li>X509_NAME_oneline
<p>Return an ASCII version of $name.</p>

<pre class="sh_perl"> Net::SSLeay::X509_NAME_oneline($name);
 # $name - value corresponding to openssl&#39;s X509_NAME structure
 #
 # returns: (string) ASCII version of $name</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html</a></p>
</li>

<li>sk_X509_NAME_free
<p>Free an allocated STACK_OF(X509_NAME) structure.</p>

<pre class="sh_perl"> Net::SSLeay::sk_X509_NAME_free($sk);
 # $sk - value corresponding to openssl&#39;s STACK_OF(X509_NAME) structure
 #
 # returns: no return value</pre>
</li>

<li>sk_X509_NAME_num
<p>Return number of items in STACK_OF(X509_NAME)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::sk_X509_NAME_num($sk);
 # $sk - value corresponding to openssl&#39;s STACK_OF(X509_NAME) structure
 #
 # returns: number of items</pre>
</li>

<li>sk_X509_NAME_value
<p>Returns X509_NAME from position $index in STACK_OF(X509_NAME)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::sk_X509_NAME_value($sk, $i);
 # $sk - value corresponding to openssl&#39;s STACK_OF(X509_NAME) structure
 # $i - (integer) index/position
 #
 # returns: value corresponding to openssl&#39;s X509_NAME structure (0 on failure)</pre>
</li>

<li>add_file_cert_subjects_to_stack
<p>Add a file of certs to a stack. All certs in $file that are not already in the $stackCAs will be added.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::add_file_cert_subjects_to_stack($stackCAs, $file);
 # $stackCAs - value corresponding to openssl&#39;s STACK_OF(X509_NAME) structure
 # $file - (string) filename
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>add_dir_cert_subjects_to_stack
<p>Add a directory of certs to a stack. All certs in $dir that are not already in the $stackCAs will be added.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::add_dir_cert_subjects_to_stack($stackCAs, $dir);
 # $stackCAs - value corresponding to openssl&#39;s STACK_OF(X509_NAME) structure
 # $dir - (string) the directory to append from. All files in this directory will be examined as potential certs. Any that are acceptable to SSL_add_dir_cert_subjects_to_stack() that are not already in the stack will be included.
 #
 # returns: 1 on success, 0 on failure</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_X509_STORE_*_related_functions"
>Low level API: X509_STORE_* related functions</a></h3>

<ul>
<li>X509_STORE_CTX_get_current_cert
<p>Returns the certificate in ctx which caused the error or 0 if no certificate is relevant.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_STORE_CTX_get_current_cert($x509_store_ctx);
 # $x509_store_ctx - value corresponding to openssl&#39;s X509_STORE_CTX structure
 #
 # returns: value corresponding to openssl&#39;s X509 structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html</a></p>
</li>

<li>X509_STORE_CTX_get_error
<p>Returns the error code of $ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_STORE_CTX_get_error($x509_store_ctx);
 # $x509_store_ctx - value corresponding to openssl&#39;s X509_STORE_CTX structure
 #
 # returns: (integer) error code</pre>

<p>For more info about erro code values check function <a href="#get_verify_result" class="podlinkpod"
>&#34;get_verify_result&#34;</a>.</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html</a></p>
</li>

<li>X509_STORE_CTX_get_error_depth
<p>Returns the depth of the error. This is a non-negative integer representing where in the certificate chain the error occurred. If it is zero it occured in the end entity certificate, one if it is the certificate which signed the end entity certificate and so on.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_STORE_CTX_get_error_depth($x509_store_ctx);
 # $x509_store_ctx - value corresponding to openssl&#39;s X509_STORE_CTX structure
 #
 # returns: (integer) depth</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html</a></p>
</li>

<li>X509_STORE_CTX_get_ex_data
<p>Is used to retrieve the information for $idx from $x509_store_ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_STORE_CTX_get_ex_data($x509_store_ctx, $idx);
 # $x509_store_ctx - value corresponding to openssl&#39;s X509_STORE_CTX structure
 # $idx - (integer) index for application specific data
 #
 # returns: pointer to ???</pre>
</li>

<li>X509_STORE_CTX_set_ex_data
<p>Is used to store application data at arg for idx into $x509_store_ctx.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_STORE_CTX_set_ex_data($x509_store_ctx, $idx, $data);
 # $x509_store_ctx - value corresponding to openssl&#39;s X509_STORE_CTX structure
 # $idx - (integer) ???
 # $data - (pointer) ???
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_STORE_CTX_set_cert
<p>Sets the certificate to be vertified in $x509_store_ctx to $x.</p>

<pre class="sh_perl"> Net::SSLeay::X509_STORE_CTX_set_cert($x509_store_ctx, $x);
 # $x509_store_ctx - value corresponding to openssl&#39;s X509_STORE_CTX structure
 # $x - value corresponding to openssl&#39;s X509 structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_STORE_CTX_new.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_STORE_CTX_new.html</a></p>
</li>

<li>X509_STORE_CTX_set_error
<p>Sets the error code of $ctx to $s. For example it might be used in a verification callback to set an error based on additional checks.</p>

<pre class="sh_perl"> Net::SSLeay::X509_STORE_CTX_set_error($x509_store_ctx, $s);
 # $x509_store_ctx - value corresponding to openssl&#39;s X509_STORE_CTX structure
 # $s - (integer) error id
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html</a></p>
</li>

<li>X509_STORE_add_cert
<p>Adds X509 certificate $x into the X509_STORE $store.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_STORE_add_cert($store, $x);
 # $store - value corresponding to openssl&#39;s X509_STORE structure
 # $x - value corresponding to openssl&#39;s X509 structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_STORE_add_crl
<p>Adds X509 CRL $x into the X509_STORE $store.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_STORE_add_crl($store, $x);
 # $store - value corresponding to openssl&#39;s X509_STORE structure
 # $x - value corresponding to openssl&#39;s X509_CRL structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_STORE_set1_param
<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_STORE_set1_param($store, $pm);
 # $store - value corresponding to openssl&#39;s X509_STORE structure
 # $pm - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_STORE_set_flags
<pre class="sh_perl"> Net::SSLeay::X509_STORE_set_flags($ctx, $flags);
 # $ctx - value corresponding to openssl&#39;s X509_STORE structure
 # $flags - (unsigned long) flags to be set (bitmask)
 #
 # returns: no return value

 #to create $flags value use:
 0x0001 - X509_V_FLAG_CB_ISSUER_CHECK - Send issuer+subject checks to verify_cb
 0x0002 - X509_V_FLAG_USE_CHECK_TIME - Use check time instead of current time
 0x0004 - X509_V_FLAG_CRL_CHECK - Lookup CRLs
 0x0008 - X509_V_FLAG_CRL_CHECK_ALL - Lookup CRLs for whole chain
 0x0010 - X509_V_FLAG_IGNORE_CRITICAL - Ignore unhandled critical extensions
 0x0020 - X509_V_FLAG_X509_STRICT - Disable workarounds for broken certificates
 0x0040 - X509_V_FLAG_ALLOW_PROXY_CERTS - Enable proxy certificate validation
 0x0080 - X509_V_FLAG_POLICY_CHECK - Enable policy checking
 0x0100 - X509_V_FLAG_EXPLICIT_POLICY - Policy variable require-explicit-policy
 0x0200 - X509_V_FLAG_INHIBIT_ANY - Policy variable inhibit-any-policy
 0x0400 - X509_V_FLAG_INHIBIT_MAP - Policy variable inhibit-policy-mapping
 0x0800 - X509_V_FLAG_NOTIFY_POLICY - Notify callback that policy is OK
 0x1000 - X509_V_FLAG_EXTENDED_CRL_SUPPORT - Extended CRL features such as indirect CRLs, alternate CRL signing keys
 0x2000 - X509_V_FLAG_USE_DELTAS - Delta CRL support
 0x4000 - X509_V_FLAG_CHECK_SS_SIGNATURE - Check selfsigned CA signature

 #or use corresponding constants like
 $flags = &#38;Net::SSLeay::X509_V_FLAG_CB_ISSUER_CHECK;
 ...
 $flags = &#38;Net::SSLeay::X509_V_FLAG_CHECK_SS_SIGNATURE;</pre>
</li>

<li>X509_STORE_set_purpose
<pre class="sh_perl"> Net::SSLeay::X509_STORE_set_purpose($ctx, $purpose);
 # $ctx - value corresponding to openssl&#39;s X509_STORE structure
 # $purpose - (integer) purpose identifier
 #
 # returns: no return value</pre>

<p>For more details about $purpose identifier check <a href="#CTX_set_purpose" class="podlinkpod"
>&#34;CTX_set_purpose&#34;</a>.</p>
</li>

<li>X509_STORE_set_trust
<pre class="sh_perl"> Net::SSLeay::X509_STORE_set_trust($ctx, $trust);
 # $ctx - value corresponding to openssl&#39;s X509_STORE structure
 # $trust - (integer) trust identifier
 #
 # returns: no return value</pre>

<p>For more details about $trust identifier check <a href="#CTX_set_trust" class="podlinkpod"
>&#34;CTX_set_trust&#34;</a>.</p>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_X509_VERIFY_PARAM_*_related_functions"
>Low level API: X509_VERIFY_PARAM_* related functions</a></h3>

<ul>
<li>X509_VERIFY_PARAM_add0_policy
<p>Enables policy checking (it is disabled by default) and adds $policy to the acceptable policy set.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_VERIFY_PARAM_add0_policy($param, $policy);
 # $param - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 # $policy - value corresponding to openssl&#39;s ASN1_OBJECT structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html</a></p>
</li>

<li>X509_VERIFY_PARAM_add0_table
<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_VERIFY_PARAM_add0_table($param);
 # $param - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_VERIFY_PARAM_clear_flags
<p>Clears the flags $flags in param.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_VERIFY_PARAM_clear_flags($param, $flags);
 # $param - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 # $flags - (unsigned long) flags to be set (bitmask)
 #
 # returns: 1 on success, 0 on failure</pre>

<p>For more details about $flags bitmask see <a href="#X509_STORE_set_flags" class="podlinkpod"
>&#34;X509_STORE_set_flags&#34;</a>.</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html</a></p>
</li>

<li>X509_VERIFY_PARAM_free
<p>Frees up the X509_VERIFY_PARAM structure.</p>

<pre class="sh_perl"> Net::SSLeay::X509_VERIFY_PARAM_free($param);
 # $param - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 #
 # returns: no return value</pre>
</li>

<li>X509_VERIFY_PARAM_get_depth
<p>Returns the current verification depth.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_VERIFY_PARAM_get_depth($param);
 # $param - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 #
 # returns: (ineger) depth</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html</a></p>
</li>

<li>X509_VERIFY_PARAM_get_flags
<p>Returns the current verification flags.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_VERIFY_PARAM_get_flags($param);
 # $param - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 #
 # returns: (unsigned long) flags to be set (bitmask)</pre>

<p>For more details about returned flags bitmask see <a href="#X509_STORE_set_flags" class="podlinkpod"
>&#34;X509_STORE_set_flags&#34;</a>.</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html</a></p>
</li>

<li>X509_VERIFY_PARAM_set_flags
<pre class="sh_perl"> my $rv = Net::SSLeay::X509_VERIFY_PARAM_set_flags($param, $flags);
 # $param - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 # $flags - (unsigned long) flags to be set (bitmask)
 #
 # returns: 1 on success, 0 on failure</pre>

<p>For more details about $flags bitmask see <a href="#X509_STORE_set_flags" class="podlinkpod"
>&#34;X509_STORE_set_flags&#34;</a>.</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html</a></p>
</li>

<li>X509_VERIFY_PARAM_inherit
<p>??? (more info needed)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_VERIFY_PARAM_inherit($to, $from);
 # $to - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 # $from - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_VERIFY_PARAM_lookup
<p>Finds X509_VERIFY_PARAM by name.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_VERIFY_PARAM_lookup($name);
 # $name - (string) name we want to find
 #
 # returns: value corresponding to openssl&#39;s X509_VERIFY_PARAM structure (0 on failure)</pre>
</li>

<li>X509_VERIFY_PARAM_new
<p>Creates a new X509_VERIFY_PARAM structure.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_VERIFY_PARAM_new();
 #
 # returns: value corresponding to openssl&#39;s X509_VERIFY_PARAM structure (0 on failure)</pre>
</li>

<li>X509_VERIFY_PARAM_set1
<p>Sets the name of X509_VERIFY_PARAM structure $to to the same value as the name of X509_VERIFY_PARAM structure $from.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1($to, $from);
 # $to - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 # $from - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_VERIFY_PARAM_set1_name
<p>Sets the name of X509_VERIFY_PARAM structure $param to $name.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1_name($param, $name);
 # $param - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 # $name - (string) name to be set
 #
 # returns: 1 on success, 0 on failure</pre>
</li>

<li>X509_VERIFY_PARAM_set1_policies
<p>Enables policy checking (it is disabled by default) and sets the acceptable policy set to policies. Any existing policy set is cleared. The policies parameter can be 0 to clear an existing policy set.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_VERIFY_PARAM_set1_policies($param, $policies);
 # $param - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 # $policies - value corresponding to openssl&#39;s STACK_OF(ASN1_OBJECT) structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html</a></p>
</li>

<li>X509_VERIFY_PARAM_set_depth
<p>Sets the maximum verification depth to depth. That is the maximum number of untrusted CA certificates that can appear in a chain.</p>

<pre class="sh_perl"> Net::SSLeay::X509_VERIFY_PARAM_set_depth($param, $depth);
 # $param - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 # $depth - (integer) depth to be set
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html</a></p>
</li>

<li>X509_VERIFY_PARAM_set_purpose
<p>Sets the verification purpose in $param to $purpose. This determines the acceptable purpose of the certificate chain, for example SSL client or SSL server.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_VERIFY_PARAM_set_purpose($param, $purpose);
 # $param - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 # $purpose - (integer) purpose identifier
 #
 # returns: 1 on success, 0 on failure</pre>

<p>For more details about $purpose identifier check <a href="#CTX_set_purpose" class="podlinkpod"
>&#34;CTX_set_purpose&#34;</a>.</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html</a></p>
</li>

<li>X509_VERIFY_PARAM_set_time
<p>Sets the verification time in $param to $t. Normally the current time is used.</p>

<pre class="sh_perl"> Net::SSLeay::X509_VERIFY_PARAM_set_time($param, $t);
 # $param - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 # $t - (time_t) time in seconds since 1.1.1970
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html</a></p>
</li>

<li>X509_VERIFY_PARAM_set_trust
<p>Sets the trust setting in $param to $trust.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::X509_VERIFY_PARAM_set_trust($param, $trust);
 # $param - value corresponding to openssl&#39;s X509_VERIFY_PARAM structure
 # $trust - (integer) trust identifier
 #
 # returns: 1 on success, 0 on failure</pre>

<p>For more details about $trust identifier check <a href="#CTX_set_trust" class="podlinkpod"
>&#34;CTX_set_trust&#34;</a>.</p>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html</a></p>
</li>

<li>X509_VERIFY_PARAM_table_cleanup
<p>??? (more info needed)</p>

<pre class="sh_perl"> Net::SSLeay::X509_VERIFY_PARAM_table_cleanup();
 #
 # returns: no return value</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_Cipher_(EVP_CIPHER_*)_related_functions"
>Low level API: Cipher (EVP_CIPHER_*) related functions</a></h3>

<ul>
<li>EVP_get_cipherbyname
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before</p>

<p>Returns an EVP_CIPHER structure when passed a cipher name.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_get_cipherbyname($name);
 # $name - (string) cipher name e.g. &#39;aes-128-cbc&#39;, &#39;camellia-256-ecb&#39;, &#39;des-ede&#39;, ...
 #
 # returns: value corresponding to openssl&#39;s EVP_CIPHER structure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/EVP_EncryptInit.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/EVP_EncryptInit.html</a></p>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_Digest_(EVP_MD_*)_related_functions"
>Low level API: Digest (EVP_MD_*) related functions</a></h3>

<ul>
<li>OpenSSL_add_all_digests
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before</p>

<pre class="sh_perl"> Net::SSLeay::OpenSSL_add_all_digests();
 # no args, no return value</pre>

<p><a href="http://www.openssl.org/docs/crypto/OpenSSL_add_all_algorithms.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/OpenSSL_add_all_algorithms.html</a></p>
</li>

<li>P_EVP_MD_list_all
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before; requires at least openssl-1.0.0</p>

<p><b>NOTE:</b> Does not exactly correspond to any low level API function</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::P_EVP_MD_list_all();
 #
 # returns: arrayref - list of available digest names</pre>

<p>The returned digest names correspond to values expected by <a href="#EVP_get_digestbyname" class="podlinkpod"
>&#34;EVP_get_digestbyname&#34;</a>.</p>

<p>Note that some of the digets are available by default and some only after calling <a href="#OpenSSL_add_all_digests" class="podlinkpod"
>&#34;OpenSSL_add_all_digests&#34;</a>.</p>
</li>

<li>EVP_get_digestbyname
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_get_digestbyname($name);
 # $name - string with digest name
 #
 # returns: value corresponding to openssl&#39;s EVP_MD structure</pre>

<p>The $name param can be:</p>

<pre class="sh_perl"> md2
 md4
 md5
 mdc2
 ripemd160
 sha
 sha1
 sha224
 sha256
 sha512
 whirlpool</pre>

<p>Or better check the supported digests by calling <a href="#P_EVP_MD_list_all" class="podlinkpod"
>&#34;P_EVP_MD_list_all&#34;</a>.</p>
</li>

<li>EVP_MD_type
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_MD_type($md);
 # $md - value corresponding to openssl&#39;s EVP_MD structure
 #
 # returns: the NID (integer) of the OBJECT IDENTIFIER representing the given message digest</pre>
</li>

<li>EVP_MD_size
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_MD_size($md);
 # $md - value corresponding to openssl&#39;s EVP_MD structure
 #
 # returns: the size of the message digest in bytes (e.g. 20 for SHA1)</pre>
</li>

<li>EVP_MD_CTX_md
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7</p>

<pre class="sh_perl"> Net::SSLeay::EVP_MD_CTX_md($ctx);
 # $ctx - value corresponding to openssl&#39;s EVP_MD_CTX structure
 #
 # returns: value corresponding to openssl&#39;s EVP_MD structure</pre>
</li>

<li>EVP_MD_CTX_create
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7</p>

<p>Allocates, initializes and returns a digest context.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_MD_CTX_create();
 #
 # returns: value corresponding to openssl&#39;s EVP_MD_CTX structure</pre>

<p>The complete idea behind EVP_MD_CTX looks like this example:</p>

<pre class="sh_perl">  Net::SSLeay::OpenSSL_add_all_digests();

  my $md = Net::SSLeay::EVP_get_digestbyname(&#34;sha1&#34;);
  my $ctx = Net::SSLeay::EVP_MD_CTX_create();
  Net::SSLeay::EVP_DigestInit($ctx, $md);

  while(my $chunk = get_piece_of_data()) {
    Net::SSLeay::EVP_DigestUpdate($ctx,$chunk);
  }

  my $result = Net::SSLeay::EVP_DigestFinal($ctx);
  Net::SSLeay::EVP_MD_CTX_destroy($ctx);

  print &#34;digest=&#34;, unpack(&#39;H*&#39;, $result), &#34;\n&#34;; #print hex value</pre>
</li>

<li>EVP_DigestInit_ex
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7</p>

<p>Sets up digest context $ctx to use a digest $type from ENGINE $impl, $ctx must be initialized before calling this function, type will typically be supplied by a function such as <a href="#EVP_get_digestbyname" class="podlinkpod"
>&#34;EVP_get_digestbyname&#34;</a>. If $impl is 0 then the default implementation of digest $type is used.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_DigestInit_ex($ctx, $type, $impl);
 # $ctx  - value corresponding to openssl&#39;s EVP_MD_CTX structure
 # $type - value corresponding to openssl&#39;s EVP_MD structure
 # $impl - value corresponding to openssl&#39;s ENGINE structure
 #
 # returns: 1 for success and 0 for failure</pre>
</li>

<li>EVP_DigestInit
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7</p>

<p>Behaves in the same way as <a href="#EVP_DigestInit_ex" class="podlinkpod"
>&#34;EVP_DigestInit_ex&#34;</a> except the passed context $ctx does not have to be initialized, and it always uses the default digest implementation.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_DigestInit($ctx, $type);
 # $ctx - value corresponding to openssl&#39;s EVP_MD_CTX structure
 # $type - value corresponding to openssl&#39;s EVP_MD structure
 #
 # returns: 1 for success and 0 for failure</pre>
</li>

<li>EVP_MD_CTX_destroy
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7</p>

<p>Cleans up digest context $ctx and frees up the space allocated to it, it should be called only on a context created using <a href="#EVP_MD_CTX_create" class="podlinkpod"
>&#34;EVP_MD_CTX_create&#34;</a>.</p>

<pre class="sh_perl"> Net::SSLeay::EVP_MD_CTX_destroy($ctx);
 # $ctx - value corresponding to openssl&#39;s EVP_MD_CTX structure
 #
 # returns: no return value</pre>
</li>

<li>EVP_DigestUpdate
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_DigestUpdate($ctx, $data);
 # $ctx  - value corresponding to openssl&#39;s EVP_MD_CTX structure
 # $data - data to be hashed
 #
 # returns: 1 for success and 0 for failure</pre>
</li>

<li>EVP_DigestFinal_ex
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7</p>

<p>Retrieves the digest value from $ctx. After calling <a href="#EVP_DigestFinal_ex" class="podlinkpod"
>&#34;EVP_DigestFinal_ex&#34;</a> no additional calls to <a href="#EVP_DigestUpdate" class="podlinkpod"
>&#34;EVP_DigestUpdate&#34;</a> can be made, but <a href="#EVP_DigestInit_ex" class="podlinkpod"
>&#34;EVP_DigestInit_ex&#34;</a> can be called to initialize a new digest operation.</p>

<pre class="sh_perl"> my $digest_value = Net::SSLeay::EVP_DigestFinal_ex($ctx);
 # $ctx - value corresponding to openssl&#39;s EVP_MD_CTX structure
 #
 # returns: hash value (binary)

 #to get printable (hex) value of digest use:
 print unpack(&#39;H*&#39;, $digest_value);</pre>
</li>

<li>EVP_DigestFinal
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7</p>

<p>Similar to <a href="#EVP_DigestFinal_ex" class="podlinkpod"
>&#34;EVP_DigestFinal_ex&#34;</a> except the digest context ctx is automatically cleaned up.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_DigestFinal($ctx);
 # $ctx - value corresponding to openssl&#39;s EVP_MD_CTX structure
 #
 # returns: hash value (binary)

 #to get printable (hex) value of digest use:
 print unpack(&#39;H*&#39;, $digest_value);</pre>
</li>

<li>MD2
<p><b>COMPATIBILITY:</b> no supported by default in openssl-1.0.0</p>

<p>Computes MD2 from given $data (all data needs to be loaded into memory)</p>

<pre class="sh_perl"> my $digest = Net::SSLeay::MD2($data);
 print &#34;digest(hexadecimal)=&#34;, unpack(&#39;H*&#39;, $digest);</pre>
</li>

<li>MD4
<p>Computes MD4 from given $data (all data needs to be loaded into memory)</p>

<pre class="sh_perl"> my $digest = Net::SSLeay::MD4($data);
 print &#34;digest(hexadecimal)=&#34;, unpack(&#39;H*&#39;, $digest);</pre>
</li>

<li>MD5
<p>Computes MD5 from given $data (all data needs to be loaded into memory)</p>

<pre class="sh_perl"> my $digest = Net::SSLeay::MD5($data);
 print &#34;digest(hexadecimal)=&#34;, unpack(&#39;H*&#39;, $digest);</pre>
</li>

<li>RIPEMD160
<p>Computes RIPEMD160 from given $data (all data needs to be loaded into memory)</p>

<pre class="sh_perl"> my $digest = Net::SSLeay::RIPEMD160($data);
 print &#34;digest(hexadecimal)=&#34;, unpack(&#39;H*&#39;, $digest);</pre>
</li>

<li>SHA1
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before</p>

<p>Computes SHA1 from given $data (all data needs to be loaded into memory)</p>

<pre class="sh_perl"> my $digest = Net::SSLeay::SHA1($data);
 print &#34;digest(hexadecimal)=&#34;, unpack(&#39;H*&#39;, $digest);</pre>
</li>

<li>SHA256
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.8</p>

<p>Computes SHA256 from given $data (all data needs to be loaded into memory)</p>

<pre class="sh_perl"> my $digest = Net::SSLeay::SHA256($data);
 print &#34;digest(hexadecimal)=&#34;, unpack(&#39;H*&#39;, $digest);</pre>
</li>

<li>SHA512
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.8</p>

<p>Computes SHA512 from given $data (all data needs to be loaded into memory)</p>

<pre class="sh_perl"> my $digest = Net::SSLeay::SHA512($data);
 print &#34;digest(hexadecimal)=&#34;, unpack(&#39;H*&#39;, $digest);</pre>
</li>

<li>EVP_Digest
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.7</p>

<p>Computes &#34;any&#34; digest from given $data (all data needs to be loaded into memory)</p>

<pre class="sh_perl"> my $md = Net::SSLeay::EVP_get_digestbyname(&#34;sha1&#34;); #or any other algorithm
 my $digest = Net::SSLeay::EVP_Digest($data, $md);
 print &#34;digest(hexadecimal)=&#34;, unpack(&#39;H*&#39;, $digest);</pre>
</li>

<li>EVP_sha1
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before</p>

<pre class="sh_perl"> my $md = Net::SSLeay::EVP_sha1();
 #
 # returns: value corresponding to openssl&#39;s EVP_MD structure</pre>
</li>

<li>EVP_sha256
<p><b>COMPATIBILITY:</b> requires at least openssl-0.9.8</p>

<pre class="sh_perl"> my $md = Net::SSLeay::EVP_sha256();
 #
 # returns: value corresponding to openssl&#39;s EVP_MD structure</pre>
</li>

<li>EVP_sha512
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before; requires at least openssl-0.9.8</p>

<pre class="sh_perl"> my $md = Net::SSLeay::EVP_sha512();
 #
 # returns: value corresponding to openssl&#39;s EVP_MD structure</pre>
</li>

<li>EVP_add_digest
<pre class="sh_perl"> my $rv = Net::SSLeay::EVP_add_digest($digest);
 # $digest - value corresponding to openssl&#39;s EVP_MD structure
 #
 # returns: 1 on success, 0 otherwise</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_CIPHER_*_related_functions"
>Low level API: CIPHER_* related functions</a></h3>

<ul>
<li>CIPHER_get_name
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.42 and before</p>

<p>Returns name of the cipher used.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CIPHER_description($cipher);
 # $cipher - value corresponding to openssl&#39;s SSL_CIPHER structure
 #
 # returns: (string) cipher name e.g. &#39;DHE-RSA-AES256-SHA&#39;</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html</a></p>

<p>Example:</p>

<pre class="sh_perl"> my $ssl_cipher = Net::SSLeay::get_current_cipher($ssl);
 my $cipher_name = Net::SSLeay::CIPHER_get_name($ssl_cipher);</pre>
</li>

<li>CIPHER_description
<p>Returns a textual description of the cipher used.</p>

<p>??? (does this function really work?)</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CIPHER_description($cipher, $buf, $size);
 # $cipher - value corresponding to openssl&#39;s SSL_CIPHER structure
 # $bufer - (string/buffer) ???
 # $size - (integer) ???
 #
 # returns: (string) cipher description e.g. &#39;DHE-RSA-AES256-SHA SSLv3 Kx=DH Au=RSA Enc=AES(256) Mac=SHA1&#39;</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html</a></p>
</li>

<li>CIPHER_get_bits
<p>Returns the number of secret bits used for cipher.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::CIPHER_get_bits($c);
 # $c - value corresponding to openssl&#39;s SSL_CIPHER structure
 #
 # returns: (integert) number of secret bits, 0 on error</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html</a></p>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_RSA_*_related_functions"
>Low level API: RSA_* related functions</a></h3>

<ul>
<li>RSA_generate_key
<p>Generates a key pair and returns it in a newly allocated RSA structure. The pseudo-random number generator must be seeded prior to calling RSA_generate_key.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::RSA_generate_key($bits, $e, $perl_cb, $perl_cb_arg);
 # $bits - (integer) modulus size in bits e.g. 512, 1024, 2048
 # $e - (integer) public exponent, an odd number, typically 3, 17 or 65537
 # $perl_cb - [optional] reference to perl callback function
 # $perl_cb_arg - [optional] data that will be passed to callback function when invoked
 #
 # returns: value corresponding to openssl&#39;s RSA structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/RSA_generate_key.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/RSA_generate_key.html</a></p>
</li>

<li>RSA_free
<p>Frees the RSA structure and its components. The key is erased before the memory is returned to the system.</p>

<pre class="sh_perl"> Net::SSLeay::RSA_free($r);
 # $r - value corresponding to openssl&#39;s RSA structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/RSA_new.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/RSA_new.html</a></p>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_BIO_*_related_functions"
>Low level API: BIO_* related functions</a></h3>

<ul>
<li>BIO_eof
<p>Returns 1 if the BIO has read EOF, the precise meaning of &#39;EOF&#39; varies according to the BIO type.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::BIO_eof($s);
 # $s - value corresponding to openssl&#39;s BIO structure
 #
 # returns: 1 if EOF has been reached 0 otherwise</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/BIO_ctrl.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/BIO_ctrl.html</a></p>
</li>

<li>BIO_f_ssl
<p>Returns the SSL BIO method. This is a filter BIO which is a wrapper round the OpenSSL SSL routines adding a BIO &#39;flavour&#39; to SSL I/O.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::BIO_f_ssl();
 #
 # returns: value corresponding to openssl&#39;s BIO_METHOD structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/BIO_f_ssl.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/BIO_f_ssl.html</a></p>
</li>

<li>BIO_free
<p>Frees up a single BIO.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::BIO_free($bio;);
 # $bio; - value corresponding to openssl&#39;s BIO structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/BIO_new.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/BIO_new.html</a></p>
</li>

<li>BIO_new
<p>Returns a new BIO using method $type</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::BIO_new($type);
 # $type - value corresponding to openssl&#39;s BIO_METHOD structure
 #
 # returns: value corresponding to openssl&#39;s BIO structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/BIO_new.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/BIO_new.html</a></p>
</li>

<li>BIO_new_buffer_ssl_connect
<p>Creates a new BIO chain consisting of a buffering BIO, an SSL BIO (using ctx) and a connect BIO.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::BIO_new_buffer_ssl_connect($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: value corresponding to openssl&#39;s BIO structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/BIO_f_ssl.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/BIO_f_ssl.html</a></p>
</li>

<li>BIO_new_file
<p>Creates a new file BIO with mode mode the meaning of mode is the same as the stdio function fopen(). The BIO_CLOSE flag is set on the returned BIO.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::BIO_new_file($filename, $mode);
 # $filename - (string) filename
 # $mode - (string) opening mode (as mode by stdio function fopen)
 #
 # returns: value corresponding to openssl&#39;s BIO structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/BIO_s_file.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/BIO_s_file.html</a></p>
</li>

<li>BIO_new_ssl
<p>Allocates an SSL BIO using SSL_CTX ctx and using client mode if client is non zero.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::BIO_new_ssl($ctx, $client);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $client - (integer) 0 or 1 - indicates ssl client mode
 #
 # returns: value corresponding to openssl&#39;s BIO structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/BIO_f_ssl.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/BIO_f_ssl.html</a></p>
</li>

<li>BIO_new_ssl_connect
<p>Creates a new BIO chain consisting of an SSL BIO (using ctx) followed by a connect BIO.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::BIO_new_ssl_connect($ctx);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 #
 # returns: value corresponding to openssl&#39;s BIO structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/BIO_f_ssl.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/BIO_f_ssl.html</a></p>
</li>

<li>BIO_pending
<p>Return the number of pending characters in the BIOs read buffers.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::BIO_pending($s);
 # $s - value corresponding to openssl&#39;s BIO structure
 #
 # returns: the amount of pending data</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/BIO_ctrl.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/BIO_ctrl.html</a></p>
</li>

<li>BIO_wpending
<p>Return the number of pending characters in the BIOs write buffers.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::BIO_wpending($s);
 # $s - value corresponding to openssl&#39;s BIO structure
 #
 # returns: the amount of pending data</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/BIO_ctrl.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/BIO_ctrl.html</a></p>
</li>

<li>BIO_read
<p>Read the underlying descriptor.</p>

<pre class="sh_perl"> Net::SSLeay::BIO_read($s, $max);
 # $s - value corresponding to openssl&#39;s BIO structure
 # $max - [optional] max. bytes to read (if not specified, the value 32768 is used)
 #
 # returns: data</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/BIO_read.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/BIO_read.html</a></p>
</li>

<li>BIO_write
<p>Attempts to write data from $buffer to BIO $b.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::BIO_write($b, $buffer);
 # $b - value corresponding to openssl&#39;s BIO structure
 # $buffer - data
 #
 # returns: amount of data successfully written
 #          or that no data was successfully read or written if the result is 0 or -1
 #          or -2 when the operation is not implemented in the specific BIO type</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/BIO_read.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/BIO_read.html</a></p>
</li>

<li>BIO_s_mem
<p>Return the memory BIO method function.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::BIO_s_mem();
 #
 # returns: value corresponding to openssl&#39;s BIO_METHOD structure (0 on failure)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/BIO_s_mem.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/BIO_s_mem.html</a></p>
</li>

<li>BIO_ssl_copy_session_id
<p>Copies an SSL session id between BIO chains from and to. It does this by locating the SSL BIOs in each chain and calling SSL_copy_session_id() on the internal SSL pointer.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::BIO_ssl_copy_session_id($to, $from);
 # $to - value corresponding to openssl&#39;s BIO structure
 # $from - value corresponding to openssl&#39;s BIO structure
 #
 # returns: 1 on success, 0 on failure</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/BIO_f_ssl.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/BIO_f_ssl.html</a></p>
</li>

<li>BIO_ssl_shutdown
<p>Closes down an SSL connection on BIO chain bio. It does this by locating the SSL BIO in the chain and calling SSL_shutdown() on its internal SSL pointer.</p>

<pre class="sh_perl"> Net::SSLeay::BIO_ssl_shutdown($ssl_bio);
 # $ssl_bio - value corresponding to openssl&#39;s BIO structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/BIO_f_ssl.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/BIO_f_ssl.html</a></p>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_NPN_(next_protocol_negotiation)_related_functions"
>Low level API: NPN (next protocol negotiation) related functions</a></h3>

<p>Simple approach for using NPN support looks like this:</p>

<pre class="sh_perl"> ### client side
 use Net::SSLeay;
 use IO::Socket::INET;
 
 Net::SSLeay::initialize();
 my $sock = IO::Socket::INET-&#62;new(PeerAddr=&#62;&#39;encrypted.google.com:443&#39;) or die;
 my $ctx = Net::SSLeay::CTX_tlsv1_new() or die;
 Net::SSLeay::CTX_set_options($ctx, &#38;Net::SSLeay::OP_ALL);
 Net::SSLeay::CTX_set_next_proto_select_cb($ctx, [&#39;http1.1&#39;,&#39;spdy/2&#39;]);
 my $ssl = Net::SSLeay::new($ctx) or die;
 Net::SSLeay::set_fd($ssl, fileno($sock)) or die;
 Net::SSLeay::connect($ssl);

 warn &#34;client:negotiated=&#34;,Net::SSLeay::P_next_proto_negotiated($ssl), &#34;\n&#34;;
 warn &#34;client:last_status=&#34;, Net::SSLeay::P_next_proto_last_status($ssl), &#34;\n&#34;;
 
 ### server side 
 use Net::SSLeay;
 use IO::Socket::INET;
 
 Net::SSLeay::initialize();
 my $ctx = Net::SSLeay::CTX_tlsv1_new() or die;
 Net::SSLeay::CTX_set_options($ctx, &#38;Net::SSLeay::OP_ALL);
 Net::SSLeay::set_cert_and_key($ctx, &#34;t/data/cert.pem&#34;, &#34;t/data/key.pem&#34;);
 Net::SSLeay::CTX_set_next_protos_advertised_cb($ctx, [&#39;spdy/2&#39;,&#39;http1.1&#39;]);
 my $sock = IO::Socket::INET-&#62;new(LocalAddr=&#62;&#39;localhost&#39;, LocalPort=&#62;5443, Proto=&#62;&#39;tcp&#39;, Listen=&#62;20) or die;
 
 while (1) {
   my $ssl = Net::SSLeay::new($ctx);
   warn(&#34;server:waiting for incoming connection...\n&#34;);
   my $fd = $sock-&#62;accept();
   Net::SSLeay::set_fd($ssl, $fd-&#62;fileno);
   Net::SSLeay::accept($ssl);  
   warn &#34;server:negotiated=&#34;,Net::SSLeay::P_next_proto_negotiated($ssl),&#34;\n&#34;;
   my $got = Net::SSLeay::read($ssl);
   Net::SSLeay::ssl_write_all($ssl, &#34;length=&#34;.length($got));
   Net::SSLeay::free($ssl);
   $fd-&#62;close();
 }
 # check with: openssl s_client -connect localhost:5443 -nextprotoneg http/1.1,spdy/2</pre>

<p>Please note that the selection (negotiation) is performed by client side, the server side simply advertise the list of supported protocols.</p>

<p>Advanced approach allows you to implement your own negotiation algorithm.</p>

<pre class="sh_perl"> #see below documentation for:
 Net::SSleay::CTX_set_next_proto_select_cb($ctx, $perl_callback_function, $callback_data);
 Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, $perl_callback_function, $callback_data);</pre>

<p>Detection of NPN support (works even in older Net::SSLeay versions):</p>

<pre class="sh_perl"> use Net::SSLeay;
 
 if (exists &#38;Net::SSLeay::P_next_proto_negotiated) {
   # do NPN stuff
 }</pre>

<ul>
<li>CTX_set_next_proto_select_cb
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-1.0.1</p>

<p><b>NOTE:</b> You need CTX_set_next_proto_select_cb on <b>client side</b> of SSL connection.</p>

<p>Simple usage - in this case a &#34;common&#34; negotiation algorithm (as implemented by openssl&#39;s function SSL_select_next_proto) is used.</p>

<pre class="sh_perl"> $rv = Net::SSleay::CTX_set_next_proto_select_cb($ctx, $arrayref);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $arrayref - list of accepted protocols - e.g. [&#39;http1.0&#39;, &#39;http1.1&#39;]
 #
 # returns: 0 on success, 1 on failure</pre>

<p>Advanced usage (you probably do not need this):</p>

<pre class="sh_perl"> $rv = Net::SSleay::CTX_set_next_proto_select_cb($ctx, $perl_callback_function, $callback_data);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $perl_callback_function - reference to perl function
 # $callback_data - [optional] data to passed to callback function when invoked
 #
 # returns: 0 on success, 1 on failure
 
 # where callback function looks like
 sub npn_advertised_cb_invoke {
   my ($ssl, $arrayref_proto_list_advertised_by_server, $callback_data) = @_;
   my $status;
   # ...
   $status = 1;   #status can be:
                  # 0 - OPENSSL_NPN_UNSUPPORTED
                  # 1 - OPENSSL_NPN_NEGOTIATED
                  # 2 - OPENSSL_NPN_NO_OVERLAP
   return $status, [&#39;http1.1&#39;,&#39;spdy/2&#39;]; # the callback has to return 2 values
 }</pre>

<p>To undefine/clear this callback use:</p>

<pre class="sh_perl"> Net::SSleay::CTX_set_next_proto_select_cb($ctx, undef);</pre>
</li>

<li>CTX_set_next_protos_advertised_cb
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-1.0.1</p>

<p><b>NOTE:</b> You need CTX_set_next_proto_select_cb on <b>server side</b> of SSL connection.</p>

<p>Simple usage:</p>

<pre class="sh_perl"> $rv = Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, $arrayref);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $arrayref - list of advertised protocols - e.g. [&#39;http1.0&#39;, &#39;http1.1&#39;]
 #
 # returns: 0 on success, 1 on failure</pre>

<p>Advanced usage (you probably do not need this):</p>

<pre class="sh_perl"> $rv = Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, $perl_callback_function, $callback_data);
 # $ctx - value corresponding to openssl&#39;s SSL_CTX structure
 # $perl_callback_function - reference to perl function
 # $callback_data - [optional] data to passed to callback function when invoked
 #
 # returns: 0 on success, 1 on failure
 
 # where callback function looks like
 sub npn_advertised_cb_invoke {
   my ($ssl, $callback_data) = @_;
   # ...
   return [&#39;http1.1&#39;,&#39;spdy/2&#39;]; # the callback has to return arrayref
 }</pre>

<p>To undefine/clear this callback use:</p>

<pre class="sh_perl"> Net::SSleay::CTX_set_next_protos_advertised_cb($ctx, undef);</pre>
</li>

<li>P_next_proto_negotiated
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-1.0.1</p>

<p>Returns the name of negotiated protocol for given SSL connection $ssl.</p>

<pre class="sh_perl"> $rv = Net::SSLeay::P_next_proto_negotiated($ssl)
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: (string) negotiated protocol name (or undef if no negotiation was done or failed with fatal error)</pre>
</li>

<li>P_next_proto_last_status
<p><b>COMPATIBILITY:</b> not available in Net-SSLeay-1.45 and before; requires at least openssl-1.0.1</p>

<p>Returns the result of the last negotiation for given SSL connection $ssl.</p>

<pre class="sh_perl"> $rv = Net::SSLeay::P_next_proto_last_status($ssl)
 # $ssl - value corresponding to openssl&#39;s SSL structure
 #
 # returns: (integer) negotiation status
 #          0 - OPENSSL_NPN_UNSUPPORTED
 #          1 - OPENSSL_NPN_NEGOTIATED
 #          2 - OPENSSL_NPN_NO_OVERLAP</pre>
</li>
</ul>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Low_level_API:_Other_functions"
>Low level API: Other functions</a></h3>

<ul>
<li>COMP_add_compression_method
<p>Adds the compression method cm with the identifier id to the list of available compression methods. This list is globally maintained for all SSL operations within this application. It cannot be set for specific SSL_CTX or SSL objects.</p>

<pre class="sh_perl"> my $rv = Net::SSLeay::COMP_add_compression_method($id, $cm);
 # $id - (integer) compression method id
 #       0 to 63:    methods defined by the IETF
 #       64 to 192:  external party methods assigned by IANA
 #       193 to 255: reserved for private use
 #
 # $cm - value corresponding to openssl&#39;s COMP_METHOD structure
 #
 # returns: 0 on success, 1 on failure (check the error queue to find out the reason)</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/ssl/SSL_COMP_add_compression_method.html" class="podlinkurl"
>http://www.openssl.org/docs/ssl/SSL_COMP_add_compression_method.html</a></p>
</li>

<li>DH_free
<p>Frees the DH structure and its components. The values are erased before the memory is returned to the system.</p>

<pre class="sh_perl"> Net::SSLeay::DH_free($dh);
 # $dh - value corresponding to openssl&#39;s DH structure
 #
 # returns: no return value</pre>

<p>Check openssl doc <a href="http://www.openssl.org/docs/crypto/DH_new.html" class="podlinkurl"
>http://www.openssl.org/docs/crypto/DH_new.html</a></p>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Constants"
>Constants</a></h2>

<p>There are many openssl constants available in <a href="/~mikem/Net-SSLeay-1.48/lib/Net/SSLeay.pod" class="podlinkpod"
>Net::SSLeay</a>. You can use them like this:</p>

<pre class="sh_perl"> use Net::SSLeay;
 print &#38;Net::SSLeay::NID_commonName;
 #or
 print Net::SSLeay::NID_commonName();</pre>

<p>Or you can import them and use:</p>

<pre class="sh_perl"> use Net::SSLeay qw/NID_commonName/;
 print &#38;NID_commonName;
 #or
 print NID_commonName();
 #or
 print NID_commonName;</pre>

<p>The constants names are derived from openssl constants, however constants starting with <code>SSL_</code> prefix have name with <code>SSL_</code> part stripped - e.g. openssl&#39;s constant <code>SSL_OP_ALL</code> is available as <code>Net::SSleay::OP_ALL</code></p>

<p>The list of all available constant names:</p>

<pre class="sh_perl"> ASN1_STRFLGS_ESC_CTRL           NID_hmacWithSHA1                       OP_CRYPTOPRO_TLSEXT_BUG
 ASN1_STRFLGS_ESC_MSB            NID_id_ad                              OP_DONT_INSERT_EMPTY_FRAGMENTS
 ASN1_STRFLGS_ESC_QUOTE          NID_id_ce                              OP_EPHEMERAL_RSA
 ASN1_STRFLGS_RFC2253            NID_id_kp                              OP_LEGACY_SERVER_CONNECT
 CB_ACCEPT_EXIT                  NID_id_pbkdf2                          OP_MICROSOFT_BIG_SSLV3_BUFFER
 CB_ACCEPT_LOOP                  NID_id_pe                              OP_MICROSOFT_SESS_ID_BUG
 CB_CONNECT_EXIT                 NID_id_pkix                            OP_MSIE_SSLV2_RSA_PADDING
 CB_CONNECT_LOOP                 NID_id_qt_cps                          OP_NETSCAPE_CA_DN_BUG
 ERROR_NONE                      NID_id_qt_unotice                      OP_NETSCAPE_CHALLENGE_BUG
 ERROR_SSL                       NID_idea_cbc                           OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 ERROR_SYSCALL                   NID_idea_cfb64                         OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 ERROR_WANT_ACCEPT               NID_idea_ecb                           OP_NON_EXPORT_FIRST
 ERROR_WANT_CONNECT              NID_idea_ofb64                         OP_NO_COMPRESSION
 ERROR_WANT_READ                 NID_info_access                        OP_NO_QUERY_MTU
 ERROR_WANT_WRITE                NID_initials                           OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 ERROR_WANT_X509_LOOKUP          NID_invalidity_date                    OP_NO_SSLv2
 ERROR_ZERO_RETURN               NID_issuer_alt_name                    OP_NO_SSLv3
 EVP_PKS_DSA                     NID_keyBag                             OP_NO_TICKET
 EVP_PKS_EC                      NID_key_usage                          OP_NO_TLSv1
 EVP_PKS_RSA                     NID_localKeyID                         OP_NO_TLSv1_1
 EVP_PKT_ENC                     NID_localityName                       OP_NO_TLSv1_2
 EVP_PKT_EXCH                    NID_md2                                OP_PKCS1_CHECK_1
 EVP_PKT_EXP                     NID_md2WithRSAEncryption               OP_PKCS1_CHECK_2
 EVP_PKT_SIGN                    NID_md5                                OP_SINGLE_DH_USE
 EVP_PK_DH                       NID_md5WithRSA                         OP_SINGLE_ECDH_USE
 EVP_PK_DSA                      NID_md5WithRSAEncryption               OP_SSLEAY_080_CLIENT_DH_BUG
 EVP_PK_EC                       NID_md5_sha1                           OP_SSLREF2_REUSE_CERT_TYPE_BUG
 EVP_PK_RSA                      NID_mdc2                               OP_TLS_BLOCK_PADDING_BUG
 FILETYPE_ASN1                   NID_mdc2WithRSA                        OP_TLS_D5_BUG
 FILETYPE_PEM                    NID_ms_code_com                        OP_TLS_ROLLBACK_BUG
 F_CLIENT_CERTIFICATE            NID_ms_code_ind                        READING
 F_CLIENT_HELLO                  NID_ms_ctl_sign                        RECEIVED_SHUTDOWN
 F_CLIENT_MASTER_KEY             NID_ms_efs                             RSA_3
 F_D2I_SSL_SESSION               NID_ms_ext_req                         RSA_F4
 F_GET_CLIENT_FINISHED           NID_ms_sgc                             R_BAD_AUTHENTICATION_TYPE
 F_GET_CLIENT_HELLO              NID_name                               R_BAD_CHECKSUM
 F_GET_CLIENT_MASTER_KEY         NID_netscape                           R_BAD_MAC_DECODE
 F_GET_SERVER_FINISHED           NID_netscape_base_url                  R_BAD_RESPONSE_ARGUMENT
 F_GET_SERVER_HELLO              NID_netscape_ca_policy_url             R_BAD_SSL_FILETYPE
 F_GET_SERVER_VERIFY             NID_netscape_ca_revocation_url         R_BAD_SSL_SESSION_ID_LENGTH
 F_I2D_SSL_SESSION               NID_netscape_cert_extension            R_BAD_STATE
 F_READ_N                        NID_netscape_cert_sequence             R_BAD_WRITE_RETRY
 F_REQUEST_CERTIFICATE           NID_netscape_cert_type                 R_CHALLENGE_IS_DIFFERENT
 F_SERVER_HELLO                  NID_netscape_comment                   R_CIPHER_TABLE_SRC_ERROR
 F_SSL_CERT_NEW                  NID_netscape_data_type                 R_INVALID_CHALLENGE_LENGTH
 F_SSL_GET_NEW_SESSION           NID_netscape_renewal_url               R_NO_CERTIFICATE_SET
 F_SSL_NEW                       NID_netscape_revocation_url            R_NO_CERTIFICATE_SPECIFIED
 F_SSL_READ                      NID_netscape_ssl_server_name           R_NO_CIPHER_LIST
 F_SSL_RSA_PRIVATE_DECRYPT       NID_ns_sgc                             R_NO_CIPHER_MATCH
 F_SSL_RSA_PUBLIC_ENCRYPT        NID_organizationName                   R_NO_PRIVATEKEY
 F_SSL_SESSION_NEW               NID_organizationalUnitName             R_NO_PUBLICKEY
 F_SSL_SESSION_PRINT_FP          NID_pbeWithMD2AndDES_CBC               R_NULL_SSL_CTX
 F_SSL_SET_FD                    NID_pbeWithMD2AndRC2_CBC               R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 F_SSL_SET_RFD                   NID_pbeWithMD5AndCast5_CBC             R_PEER_ERROR
 F_SSL_SET_WFD                   NID_pbeWithMD5AndDES_CBC               R_PEER_ERROR_CERTIFICATE
 F_SSL_USE_CERTIFICATE           NID_pbeWithMD5AndRC2_CBC               R_PEER_ERROR_NO_CIPHER
 F_SSL_USE_CERTIFICATE_ASN1      NID_pbeWithSHA1AndDES_CBC              R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
 F_SSL_USE_CERTIFICATE_FILE      NID_pbeWithSHA1AndRC2_CBC              R_PUBLIC_KEY_ENCRYPT_ERROR
 F_SSL_USE_PRIVATEKEY            NID_pbe_WithSHA1And128BitRC2_CBC       R_PUBLIC_KEY_IS_NOT_RSA
 F_SSL_USE_PRIVATEKEY_ASN1       NID_pbe_WithSHA1And128BitRC4           R_READ_WRONG_PACKET_TYPE
 F_SSL_USE_PRIVATEKEY_FILE       NID_pbe_WithSHA1And2_Key_TripleDES_CBC R_SHORT_READ
 F_SSL_USE_RSAPRIVATEKEY         NID_pbe_WithSHA1And3_Key_TripleDES_CBC R_SSL_SESSION_ID_IS_DIFFERENT
 F_SSL_USE_RSAPRIVATEKEY_ASN1    NID_pbe_WithSHA1And40BitRC2_CBC        R_UNABLE_TO_EXTRACT_PUBLIC_KEY
 F_SSL_USE_RSAPRIVATEKEY_FILE    NID_pbe_WithSHA1And40BitRC4            R_UNKNOWN_REMOTE_ERROR_TYPE
 F_WRITE_PENDING                 NID_pbes2                              R_UNKNOWN_STATE
 GEN_DIRNAME                     NID_pbmac1                             R_X509_LIB
 GEN_DNS                         NID_pkcs                               SENT_SHUTDOWN
 GEN_EDIPARTY                    NID_pkcs3                              SESSION_ASN1_VERSION
 GEN_EMAIL                       NID_pkcs7                              ST_ACCEPT
 GEN_IPADD                       NID_pkcs7_data                         ST_BEFORE
 GEN_OTHERNAME                   NID_pkcs7_digest                       ST_CONNECT
 GEN_RID                         NID_pkcs7_encrypted                    ST_INIT
 GEN_URI                         NID_pkcs7_enveloped                    ST_OK
 GEN_X400                        NID_pkcs7_signed                       ST_READ_BODY
 MBSTRING_ASC                    NID_pkcs7_signedAndEnveloped           ST_READ_HEADER
 MBSTRING_BMP                    NID_pkcs8ShroudedKeyBag                VERIFY_CLIENT_ONCE
 MBSTRING_FLAG                   NID_pkcs9                              VERIFY_FAIL_IF_NO_PEER_CERT
 MBSTRING_UNIV                   NID_pkcs9_challengePassword            VERIFY_NONE
 MBSTRING_UTF8                   NID_pkcs9_contentType                  VERIFY_PEER
 MIN_RSA_MODULUS_LENGTH_IN_BYTES NID_pkcs9_countersignature             WRITING
 NID_OCSP_sign                   NID_pkcs9_emailAddress                 X509_LOOKUP
 NID_SMIMECapabilities           NID_pkcs9_extCertAttributes            X509_PURPOSE_ANY
 NID_X500                        NID_pkcs9_messageDigest                X509_PURPOSE_CRL_SIGN
 NID_X509                        NID_pkcs9_signingTime                  X509_PURPOSE_NS_SSL_SERVER
 NID_ad_OCSP                     NID_pkcs9_unstructuredAddress          X509_PURPOSE_OCSP_HELPER
 NID_ad_ca_issuers               NID_pkcs9_unstructuredName             X509_PURPOSE_SMIME_ENCRYPT
 NID_algorithm                   NID_private_key_usage_period           X509_PURPOSE_SMIME_SIGN
 NID_authority_key_identifier    NID_rc2_40_cbc                         X509_PURPOSE_SSL_CLIENT
 NID_basic_constraints           NID_rc2_64_cbc                         X509_PURPOSE_SSL_SERVER
 NID_bf_cbc                      NID_rc2_cbc                            X509_PURPOSE_TIMESTAMP_SIGN
 NID_bf_cfb64                    NID_rc2_cfb64                          X509_TRUST_COMPAT
 NID_bf_ecb                      NID_rc2_ecb                            X509_TRUST_EMAIL
 NID_bf_ofb64                    NID_rc2_ofb64                          X509_TRUST_OBJECT_SIGN
 NID_cast5_cbc                   NID_rc4                                X509_TRUST_OCSP_REQUEST
 NID_cast5_cfb64                 NID_rc4_40                             X509_TRUST_OCSP_SIGN
 NID_cast5_ecb                   NID_rc5_cbc                            X509_TRUST_SSL_CLIENT
 NID_cast5_ofb64                 NID_rc5_cfb64                          X509_TRUST_SSL_SERVER
 NID_certBag                     NID_rc5_ecb                            X509_TRUST_TSA
 NID_certificate_policies        NID_rc5_ofb64                          X509_V_FLAG_ALLOW_PROXY_CERTS
 NID_client_auth                 NID_ripemd160                          X509_V_FLAG_CB_ISSUER_CHECK
 NID_code_sign                   NID_ripemd160WithRSA                   X509_V_FLAG_CHECK_SS_SIGNATURE
 NID_commonName                  NID_rle_compression                    X509_V_FLAG_CRL_CHECK
 NID_countryName                 NID_rsa                                X509_V_FLAG_CRL_CHECK_ALL
 NID_crlBag                      NID_rsaEncryption                      X509_V_FLAG_EXPLICIT_POLICY
 NID_crl_distribution_points     NID_rsadsi                             X509_V_FLAG_EXTENDED_CRL_SUPPORT
 NID_crl_number                  NID_safeContentsBag                    X509_V_FLAG_IGNORE_CRITICAL
 NID_crl_reason                  NID_sdsiCertificate                    X509_V_FLAG_INHIBIT_ANY
 NID_delta_crl                   NID_secretBag                          X509_V_FLAG_INHIBIT_MAP
 NID_des_cbc                     NID_serialNumber                       X509_V_FLAG_NOTIFY_POLICY
 NID_des_cfb64                   NID_server_auth                        X509_V_FLAG_POLICY_CHECK
 NID_des_ecb                     NID_sha                                X509_V_FLAG_POLICY_MASK
 NID_des_ede                     NID_sha1                               X509_V_FLAG_USE_CHECK_TIME
 NID_des_ede3                    NID_sha1WithRSA                        X509_V_FLAG_USE_DELTAS
 NID_des_ede3_cbc                NID_sha1WithRSAEncryption              X509_V_FLAG_X509_STRICT
 NID_des_ede3_cfb64              NID_shaWithRSAEncryption               X509_V_OK
 NID_des_ede3_ofb64              NID_stateOrProvinceName                XN_FLAG_COMPAT
 NID_des_ede_cbc                 NID_subject_alt_name                   XN_FLAG_DN_REV
 NID_des_ede_cfb64               NID_subject_key_identifier             XN_FLAG_DUMP_UNKNOWN_FIELDS
 NID_des_ede_ofb64               NID_surname                            XN_FLAG_FN_ALIGN
 NID_des_ofb64                   NID_sxnet                              XN_FLAG_FN_LN
 NID_description                 NID_time_stamp                         XN_FLAG_FN_MASK
 NID_desx_cbc                    NID_title                              XN_FLAG_FN_NONE
 NID_dhKeyAgreement              NID_undef                              XN_FLAG_FN_OID
 NID_dnQualifier                 NID_uniqueIdentifier                   XN_FLAG_FN_SN
 NID_dsa                         NID_x509Certificate                    XN_FLAG_MULTILINE
 NID_dsaWithSHA                  NID_x509Crl                            XN_FLAG_ONELINE
 NID_dsaWithSHA1                 NID_zlib_compression                   XN_FLAG_RFC2253
 NID_dsaWithSHA1_2               NOTHING                                XN_FLAG_SEP_COMMA_PLUS
 NID_dsa_2                       OPENSSL_VERSION_NUMBER                 XN_FLAG_SEP_CPLUS_SPC
 NID_email_protect               OP_ALL                                 XN_FLAG_SEP_MASK
 NID_ext_key_usage               OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION   XN_FLAG_SEP_MULTILINE
 NID_ext_req                     OP_CIPHER_SERVER_PREFERENCE            XN_FLAG_SEP_SPLUS_SPC
 NID_friendlyName                OP_CISCO_ANYCONNECT                    XN_FLAG_SPC_EQ
 NID_givenName                   OP_COOKIE_EXCHANGE</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="INTERNAL_ONLY_functions_(do_not_use_these)"
>INTERNAL ONLY functions (do not use these)</a></h2>

<p>The following functions are not intended for use from outside of <a href="/~mikem/Net-SSLeay-1.48/lib/Net/SSLeay.pod" class="podlinkpod"
>Net::SSLeay</a> module. They might be removed, renamed or changed without prior notice in future version.</p>

<p>Simply <b>DO NOT USE THEM</b>!</p>

<ul>
<li>hello</li>

<li>blength</li>

<li>constant</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXAMPLES"
>EXAMPLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>One very good example to look at is the implementation of <code>sslcat()</code> in the <code>SSLeay.pm</code> file.</p>

<p>The following is a simple SSLeay client (with too little error checking :-(</p>

<pre class="sh_perl">    #!/usr/bin/perl
    use Socket;
    use Net::SSLeay qw(die_now die_if_ssl_error) ;
    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();

    ($dest_serv, $port, $msg) = @ARGV;      # Read command line
    $port = getservbyname ($port, &#39;tcp&#39;) unless $port =~ /^\d+$/;
    $dest_ip = gethostbyname ($dest_serv);
    $dest_serv_params  = sockaddr_in($port, $dest_ip);

    socket  (S, &#38;AF_INET, &#38;SOCK_STREAM, 0)  or die &#34;socket: $!&#34;;
    connect (S, $dest_serv_params)          or die &#34;connect: $!&#34;;
    select  (S); $| = 1; select (STDOUT);   # Eliminate STDIO buffering

    # The network connection is now open, lets fire up SSL

    $ctx = Net::SSLeay::CTX_new() or die_now(&#34;Failed to create SSL_CTX $!&#34;);
    Net::SSLeay::CTX_set_options($ctx, &#38;Net::SSLeay::OP_ALL)
         or die_if_ssl_error(&#34;ssl ctx set options&#34;);
    $ssl = Net::SSLeay::new($ctx) or die_now(&#34;Failed to create SSL $!&#34;);
    Net::SSLeay::set_fd($ssl, fileno(S));   # Must use fileno
    $res = Net::SSLeay::connect($ssl) and die_if_ssl_error(&#34;ssl connect&#34;);
    print &#34;Cipher `&#34; . Net::SSLeay::get_cipher($ssl) . &#34;&#39;\n&#34;;

    # Exchange data

    $res = Net::SSLeay::write($ssl, $msg);  # Perl knows how long $msg is
    die_if_ssl_error(&#34;ssl write&#34;);
    CORE::shutdown S, 1;  # Half close --&#62; No more output, sends EOF to server
    $got = Net::SSLeay::read($ssl);         # Perl returns undef on failure
    die_if_ssl_error(&#34;ssl read&#34;);
    print $got;

    Net::SSLeay::free ($ssl);               # Tear down connection
    Net::SSLeay::CTX_free ($ctx);
    close S;</pre>

<p>The following is a simple SSLeay echo server (non forking):</p>

<pre class="sh_perl">    #!/usr/bin/perl -w
    use Socket;
    use Net::SSLeay qw(die_now die_if_ssl_error);
    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();

    $our_ip = &#34;\0\0\0\0&#34;; # Bind to all interfaces
    $port = 1235;
    $sockaddr_template = &#39;S n a4 x8&#39;;
    $our_serv_params = pack ($sockaddr_template, &#38;AF_INET, $port, $our_ip);

    socket (S, &#38;AF_INET, &#38;SOCK_STREAM, 0)  or die &#34;socket: $!&#34;;
    bind (S, $our_serv_params)             or die &#34;bind:   $!&#34;;
    listen (S, 5)                          or die &#34;listen: $!&#34;;
    $ctx = Net::SSLeay::CTX_new ()         or die_now(&#34;CTX_new ($ctx): $!&#34;);
    Net::SSLeay::CTX_set_options($ctx, &#38;Net::SSLeay::OP_ALL)
         or die_if_ssl_error(&#34;ssl ctx set options&#34;);

    # Following will ask password unless private key is not encrypted
    Net::SSLeay::CTX_use_RSAPrivateKey_file ($ctx, &#39;plain-rsa.pem&#39;,
                                             &#38;Net::SSLeay::FILETYPE_PEM);
    die_if_ssl_error(&#34;private key&#34;);
    Net::SSLeay::CTX_use_certificate_file ($ctx, &#39;plain-cert.pem&#39;,
                                           &#38;Net::SSLeay::FILETYPE_PEM);
    die_if_ssl_error(&#34;certificate&#34;);

    while (1) {
        print &#34;Accepting connections...\n&#34;;
        ($addr = accept (NS, S))           or die &#34;accept: $!&#34;;
        select (NS); $| = 1; select (STDOUT);  # Piping hot!

        ($af,$client_port,$client_ip) = unpack($sockaddr_template,$addr);
        @inetaddr = unpack(&#39;C4&#39;,$client_ip);
        print &#34;$af connection from &#34; .
        join (&#39;.&#39;, @inetaddr) . &#34;:$client_port\n&#34;;

        # We now have a network connection, lets fire up SSLeay...

        $ssl = Net::SSLeay::new($ctx)      or die_now(&#34;SSL_new ($ssl): $!&#34;);
        Net::SSLeay::set_fd($ssl, fileno(NS));

        $err = Net::SSLeay::accept($ssl) and die_if_ssl_error(&#39;ssl accept&#39;);
        print &#34;Cipher `&#34; . Net::SSLeay::get_cipher($ssl) . &#34;&#39;\n&#34;;

        # Connected. Exchange some data.

        $got = Net::SSLeay::read($ssl);     # Returns undef on fail
        die_if_ssl_error(&#34;ssl read&#34;);
        print &#34;Got `$got&#39; (&#34; . length ($got) . &#34; chars)\n&#34;;

        Net::SSLeay::write ($ssl, uc ($got)) or die &#34;write: $!&#34;;
        die_if_ssl_error(&#34;ssl write&#34;);

        Net::SSLeay::free ($ssl);           # Tear down connection
        close NS;
    }</pre>

<p>Yet another echo server. This one runs from <code>/etc/inetd.conf</code> so it avoids all the socket code overhead. Only caveat is opening an rsa key file - it had better be without any encryption or else it will not know where to ask for the password. Note how <code>STDIN</code> and <code>STDOUT</code> are wired to SSL.</p>

<pre class="sh_perl">    #!/usr/bin/perl
    # /etc/inetd.conf
    #    ssltst stream tcp nowait root /path/to/server.pl server.pl
    # /etc/services
    #    ssltst         1234/tcp

    use Net::SSLeay qw(die_now die_if_ssl_error);
    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();

    chdir &#39;/key/dir&#39; or die &#34;chdir: $!&#34;;
    $| = 1;  # Piping hot!
    open LOG, &#34;&#62;&#62;/dev/console&#34; or die &#34;Can&#39;t open log file $!&#34;;
    select LOG; print &#34;server.pl started\n&#34;;

    $ctx = Net::SSLeay::CTX_new()     or die_now &#34;CTX_new ($ctx) ($!)&#34;;
    $ssl = Net::SSLeay::new($ctx)     or die_now &#34;new ($ssl) ($!)&#34;;
    Net::SSLeay::set_options($ssl, &#38;Net::SSLeay::OP_ALL)
         and die_if_ssl_error(&#34;ssl set options&#34;);

    # We get already open network connection from inetd, now we just
    # need to attach SSLeay to STDIN and STDOUT
    Net::SSLeay::set_rfd($ssl, fileno(STDIN));
    Net::SSLeay::set_wfd($ssl, fileno(STDOUT));

    Net::SSLeay::use_RSAPrivateKey_file ($ssl, &#39;plain-rsa.pem&#39;,
                                         Net::SSLeay::FILETYPE_PEM);
    die_if_ssl_error(&#34;private key&#34;);
    Net::SSLeay::use_certificate_file ($ssl, &#39;plain-cert.pem&#39;,
                                       Net::SSLeay::FILETYPE_PEM);
    die_if_ssl_error(&#34;certificate&#34;);

    Net::SSLeay::accept($ssl) and die_if_ssl_err(&#34;ssl accept: $!&#34;);
    print &#34;Cipher `&#34; . Net::SSLeay::get_cipher($ssl) . &#34;&#39;\n&#34;;

    $got = Net::SSLeay::read($ssl);
    die_if_ssl_error(&#34;ssl read&#34;);
    print &#34;Got `$got&#39; (&#34; . length ($got) . &#34; chars)\n&#34;;

    Net::SSLeay::write ($ssl, uc($got)) or die &#34;write: $!&#34;;
    die_if_ssl_error(&#34;ssl write&#34;);

    Net::SSLeay::free ($ssl);         # Tear down the connection
    Net::SSLeay::CTX_free ($ctx);
    close LOG;</pre>

<p>There are also a number of example/test programs in the examples directory:</p>

<pre class="sh_perl">    sslecho.pl   -  A simple server, not unlike the one above
    minicli.pl   -  Implements a client using low level SSLeay routines
    sslcat.pl    -  Demonstrates using high level sslcat utility function
    get_page.pl  -  Is a utility for getting html pages from secure servers
    callback.pl  -  Demonstrates certificate verification and callback usage
    stdio_bulk.pl       - Does SSL over Unix pipes
    ssl-inetd-serv.pl   - SSL server that can be invoked from inetd.conf
    httpd-proxy-snif.pl - Utility that allows you to see how a browser
                          sends https request to given server and what reply
                          it gets back (very educative :-)
    makecert.pl  -  Creates a self signed cert (does not use this module)</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LIMITATIONS"
>LIMITATIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><code>Net::SSLeay::read()</code> uses an internal buffer of 32KB, thus no single read will return more. In practice one read returns much less, usually as much as fits in one network packet. To work around this, you should use a loop like this:</p>

<pre class="sh_perl">    $reply = &#39;&#39;;
    while ($got = Net::SSLeay::read($ssl)) {
        last if print_errs(&#39;SSL_read&#39;);
        $reply .= $got;
    }</pre>

<p>Although there is no built-in limit in <code>Net::SSLeay::write()</code>, the network packet size limitation applies here as well, thus use:</p>

<pre class="sh_perl">    $written = 0;

    while ($written &#60; length($message)) {
        $written += Net::SSLeay::write($ssl, substr($message, $written));
        last if print_errs(&#39;SSL_write&#39;);
    }</pre>

<p>Or alternatively you can just use the following convenience functions:</p>

<pre class="sh_perl">    Net::SSLeay::ssl_write_all($ssl, $message) or die &#34;ssl write failure&#34;;
    $got = Net::SSLeay::ssl_read_all($ssl) or die &#34;ssl read failure&#34;;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="KNOWN_BUGS_AND_CAVEATS"
>KNOWN BUGS AND CAVEATS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Autoloader emits a</p>

<pre class="sh_perl">    Argument &#34;xxx&#34; isn&#39;t numeric in entersub at blib/lib/Net/SSLeay.pm&#39;</pre>

<p>warning if die_if_ssl_error is made autoloadable. If you figure out why, drop me a line.</p>

<p>Callback set using <code>SSL_set_verify()</code> does not appear to work. This may well be an openssl problem (e.g. see <code>ssl/ssl_lib.c</code> line 1029). Try using <code>SSL_CTX_set_verify()</code> instead and do not be surprised if even this stops working in future versions.</p>

<p>Callback and certificate verification stuff is generally too little tested.</p>

<p>Random numbers are not initialized randomly enough, especially if you do not have <code>/dev/random</code> and/or <code>/dev/urandom</code> (such as in Solaris platforms - but it&#39;s been suggested that cryptorand daemon from the SUNski package solves this). In this case you should investigate third party software that can emulate these devices, e.g. by way of a named pipe to some program.</p>

<p>Another gotcha with random number initialization is randomness depletion. This phenomenon, which has been extensively discussed in OpenSSL, Apache-SSL, and Apache-mod_ssl forums, can cause your script to block if you use <code>/dev/random</code> or to operate insecurely if you use <code>/dev/urandom</code>. What happens is that when too much randomness is drawn from the operating system&#39;s randomness pool then randomness can temporarily be unavailable. <code>/dev/random</code> solves this problem by waiting until enough randomness can be gathered - and this can take a long time since blocking reduces activity in the machine and less activity provides less random events: a vicious circle. <code>/dev/urandom</code> solves this dilemma more pragmatically by simply returning predictable &#34;random&#34; numbers. Some<code> /dev/urandom</code> emulation software however actually seems to implement <code>/dev/random</code> semantics. Caveat emptor.</p>

<p>I&#39;ve been pointed to two such daemons by Mik Firestone &#60;mik@@speed.stdio._com&#62; who has used them on Solaris 8:</p>

<ol>
<li>Entropy Gathering Daemon (EGD) at <a href="http://www.lothar.com/tech/crypto/" class="podlinkurl"
>http://www.lothar.com/tech/crypto/</a></li>

<li>Pseudo-random number generating daemon (PRNGD) at <a href="http://www.aet.tu-cottbus.de/personen/jaenicke/postfix_tls/prngd.html" class="podlinkurl"
>http://www.aet.tu-cottbus.de/personen/jaenicke/postfix_tls/prngd.html</a></li>
</ol>

<p>If you are using the low level API functions to communicate with other SSL implementations, you would do well to call</p>

<pre class="sh_perl">    Net::SSLeay::CTX_set_options($ctx, &#38;Net::SSLeay::OP_ALL)
         or die_if_ssl_error(&#34;ssl ctx set options&#34;);</pre>

<p>to cope with some well know bugs in some other SSL implementations. The high level API functions always set all known compatibility options.</p>

<p>Sometimes <code>sslcat()</code> (and the high level HTTPS functions that build on it) is too fast in signaling the EOF to legacy HTTPS servers. This causes the server to return empty page. To work around this problem you can set the global variable</p>

<pre class="sh_perl">    $Net::SSLeay::slowly = 1;   # Add sleep so broken servers can keep up</pre>

<p>HTTP/1.1 is not supported. Specifically this module does not know to issue or serve multiple http requests per connection. This is a serious shortcoming, but using the SSL session cache on your server helps to alleviate the CPU load somewhat.</p>

<p>As of version 1.09 many newer OpenSSL auxiliary functions were added (from <code>REM_AUTOMATICALLY_GENERATED_1_09</code> onwards in <code>SSLeay.xs</code>). Unfortunately I have not had any opportunity to test these. Some of them are trivial enough that I believe they &#34;just work&#34;, but others have rather complex interfaces with function pointers and all. In these cases you should proceed wit great caution.</p>

<p>This module defaults to using OpenSSL automatic protocol negotiation code for automatically detecting the version of the SSL protocol that the other end talks. With most web servers this works just fine, but once in a while I get complaints from people that the module does not work with some web servers. Usually this can be solved by explicitly setting the protocol version, e.g.</p>

<pre class="sh_perl">   $Net::SSLeay::ssl_version = 2;  # Insist on SSLv2
   $Net::SSLeay::ssl_version = 3;  # Insist on SSLv3
   $Net::SSLeay::ssl_version = 10; # Insist on TLSv1</pre>

<p>Although the autonegotiation is nice to have, the SSL standards do not formally specify any such mechanism. Most of the world has accepted the SSLeay/OpenSSL way of doing it as the de facto standard. But for the few that think differently, you have to explicitly speak the correct version. This is not really a bug, but rather a deficiency in the standards. If a site refuses to respond or sends back some nonsensical error codes (at the SSL handshake level), try this option before mailing me.</p>

<p>On some systems, OpenSSL may be compiled without support for SSLv2. If this is the case, Net::SSLeay will warn if ssl_version has been set to 2.</p>

<p>The high level API returns the certificate of the peer, thus allowing one to check what certificate was supplied. However, you will only be able to check the certificate after the fact, i.e. you already sent your form data by the time you find out that you did not trust them, oops.</p>

<p>So, while being able to know the certificate after the fact is surely useful, the security minded would still choose to do the connection and certificate verification first and only then exchange data with the site. Currently none of the high level API functions do this, thus you would have to program it using the low level API. A good place to start is to see how the <code>Net::SSLeay::http_cat()</code> function is implemented.</p>

<p>The high level API functions use a global file handle <code>SSLCAT_S</code> internally. This really should not be a problem because there is no way to interleave the high level API functions, unless you use threads (but threads are not very well supported in perl anyway (as of version 5.6.1). However, you may run into problems if you call undocumented internal functions in an interleaved fashion. The best solution is to &#34;require Net::SSLeay&#34; in one thread after all the threads have been created.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DIAGNOSTICS"
>DIAGNOSTICS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='Random'></a><a name="Random_number_generator_not_seeded!!!"
>Random number generator not seeded!!!</a></dt>

<dd>
<p><b>(W)</b> This warning indicates that <code>randomize()</code> was not able to read <code>/dev/random</code> or <code>/dev/urandom</code>, possibly because your system does not have them or they are differently named. You can still use SSL, but the encryption will not be as strong.</p>

<dt><a name='open_tcp_connection'></a><a name="open_tcp_connection:_destination_host_not_found:`server&#39;_(port_123)_($!)"
>open_tcp_connection: destination host not found:`server&#39; (port 123) ($!)</a></dt>

<dd>
<p>Name lookup for host named <code>server</code> failed.</p>

<dt><a name='open_tcp_connection'></a><a name="open_tcp_connection:_failed_`server&#39;,_123_($!)"
>open_tcp_connection: failed `server&#39;, 123 ($!)</a></dt>

<dd>
<p>The name was resolved, but establishing the TCP connection failed.</p>

<dt><a name='msg'></a><a name="msg_123:_1_-_error:140770F8:SSL_routines:SSL23_GET_SERVER_HELLO:unknown_proto"
>msg 123: 1 - error:140770F8:SSL routines:SSL23_GET_SERVER_HELLO:unknown proto</a></dt>

<dd>
<p>SSLeay error string. The first number (123) is the PID, the second number (1) indicates the position of the error message in SSLeay error stack. You often see a pile of these messages as errors cascade.</p>

<dt><a name='msg'></a><a name="msg_123:_1_-_error:02001002::lib(2)_:func(1)_:reason(2)"
>msg 123: 1 - error:02001002::lib(2) :func(1) :reason(2)</a></dt>

<dd>
<p>The same as above, but you didn&#39;t call load_error_strings() so SSLeay couldn&#39;t verbosely explain the error. You can still find out what it means with this command:</p>

<pre class="sh_perl">    /usr/local/ssl/bin/ssleay errstr 02001002</pre>

<dt><a name='Password'></a><a name="Password_is_being_asked_for_private_key"
>Password is being asked for private key</a></dt>

<dd>
<p>This is normal behaviour if your private key is encrypted. Either you have to supply the password or you have to use an unencrypted private key. Scan OpenSSL.org for the FAQ that explains how to do this (or just study examples/makecert.pl which is used during <code>make test</code> to do just that).</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS_AND_SUPPORT"
>BUGS AND SUPPORT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Please report any bugs or feature requests to <code>bug-Net-SSLeay at rt.cpan.org</code>, or through the web interface at <a href="http://rt.cpan.org/Public/Dist/Display.html?Name=Net-SSLeay" class="podlinkurl"
>http://rt.cpan.org/Public/Dist/Display.html?Name=Net-SSLeay</a>. I will be notified, and then you&#39;ll automatically be notified of progress on your bug as I make changes.</p>

<p>Subversion access to the latest source code etc can be obtained at <a href="http://alioth.debian.org/projects/net-ssleay" class="podlinkurl"
>http://alioth.debian.org/projects/net-ssleay</a></p>

<p>The developer mailing list (for people interested in contributing to the source code) can be found at <a href="http://lists.alioth.debian.org/mailman/listinfo/net-ssleay-devel" class="podlinkurl"
>http://lists.alioth.debian.org/mailman/listinfo/net-ssleay-devel</a></p>

<p>You can find documentation for this module with the <code>perldoc</code> command.</p>

<pre class="sh_perl">    perldoc Net::SSLeay</pre>

<p>You can also look for information at:</p>

<ul>
<li>AnnoCPAN: Annotated CPAN documentation
<p><a href="http://annocpan.org/dist/Net-SSLeay" class="podlinkurl"
>http://annocpan.org/dist/Net-SSLeay</a></p>
</li>

<li>CPAN Ratings
<p><a href="http://cpanratings.perl.org/d/Net-SSLeay" class="podlinkurl"
>http://cpanratings.perl.org/d/Net-SSLeay</a></p>
</li>

<li>Search CPAN
<p><a href="http://search.cpan.org/dist/Net-SSLeay" class="podlinkurl"
>http://search.cpan.org/dist/Net-SSLeay</a></p>
</li>
</ul>

<p>Commercial support for Net::SSLeay may be obtained from</p>

<pre class="sh_perl">   Symlabs (netssleay@symlabs.com)
   Tel: +351-214.222.630
   Fax: +351-214.222.637</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Maintained by Mike McCauley and Florian Ragwitz since November 2005</p>

<p>Originally written by Sampo Kellom&#195;&#164;ki &#60;sampo@symlabs.com&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 1996-2003 Sampo Kellom&#195;&#164;ki &#60;sampo@symlabs.com&#62;</p>

<p>Copyright (C) 2005-2006 Florian Ragwitz &#60;rafl@debian.org&#62;</p>

<p>Copyright (C) 2005 Mike McCauley &#60;mikem@open.com.au&#62;</p>

<p>All Rights Reserved.</p>

<p>Distribution and use of this module is under the same terms as the OpenSSL package itself (i.e. free, but mandatory attribution; NO WARRANTY). Please consult LICENSE file in the root of the OpenSSL distribution.</p>

<p>While the source distribution of this perl module does not contain Eric&#39;s or OpenSSL&#39;s code, if you use this module you will use OpenSSL library. Please give Eric and OpenSSL team credit (as required by their licenses).</p>

<p>And remember, you, and nobody else but you, are responsible for auditing this module and OpenSSL library for security problems, backdoors, and general suitability for your application.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  <a href="/~mikem/Net-SSLeay-1.48/lib/Net/SSLeay/Handle.pm" class="podlinkpod"
>Net::SSLeay::Handle</a>                      - File handle interface
  ./examples                               - Example servers and a clients
  &#60;<a href="http://www.openssl.org/" class="podlinkurl"
>http://www.openssl.org/</a>&#62;                - OpenSSL source, documentation, etc
  openssl-users-request@openssl.org        - General OpenSSL mailing list
  &#60;<a href="http://www.ietf.org/rfc/rfc2246.txt" class="podlinkurl"
>http://www.ietf.org/rfc/rfc2246.txt</a>&#62;    - TLS 1.0 specification
  &#60;<a href="http://www.w3c.org" class="podlinkurl"
>http://www.w3c.org</a>&#62;                     - HTTP specifications
  &#60;<a href="http://www.ietf.org/rfc/rfc2617.txt" class="podlinkurl"
>http://www.ietf.org/rfc/rfc2617.txt</a>&#62;    - How to send password
  &#60;<a href="http://www.lothar.com/tech/crypto/" class="podlinkurl"
>http://www.lothar.com/tech/crypto/</a>&#62;     - Entropy Gathering Daemon (EGD)
  &#60;<a href="http://www.aet.tu-cottbus.de/personen/jaenicke/postfix_tls/prngd.html" class="podlinkurl"
>http://www.aet.tu-cottbus.de/personen/jaenicke/postfix_tls/prngd.html</a>&#62;
                           - pseudo-random number generating daemon (PRNGD)
  perl(1)
  perlref(1)
  perllol(1)
  perldoc ~openssl/doc/ssl/SSL_CTX_set_verify.pod</pre>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78276 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 03:27:34 2012 GMT (0.655935049057007) @cpansearch1 -->
 </body>
</html>
