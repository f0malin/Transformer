<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Crypt::Util - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Crypt-Util",3]);
    _gaq.push(["_setCustomVar",5,"Release","Crypt-Util-0.11",3]);
    _gaq.push(["_setCustomVar",3,"Module","Crypt::Util",3]);
    _gaq.push(["_setCustomVar",1,"Author","NUFFIN",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Crypt::Util">permalink</a></div>
  <a href="/~nuffin/">&#x5D9;&#x5D5;&#x5D1;&#x5DC; &#x5E7;&#x5D5;&#x5D2;'&#x5DE;&#x5DF; (Yuval Kogman)</a> &gt;
  <a href="/~nuffin/Crypt-Util-0.11/">Crypt-Util-0.11</a> &gt;
  Crypt::Util
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/965ab495ae19eeb538d054ae6caaf1bb?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/N/NU/NUFFIN/Crypt-Util-0.11.tar.gz">Crypt-Util-0.11.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Crypt%3A%3AUtil;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~NUFFIN/Crypt-Util-0.11/lib/Crypt/Util.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Crypt-Util">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.11 &nbsp;
<span class="noprint">
  <a href="/src/NUFFIN/Crypt-Util-0.11/lib/Crypt/Util.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Priorities'>Priorities</a>
    <li class='indexItem indexItem2'><a href='#Interoperability'>Interoperability</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#EXPORTED_API'>EXPORTED API</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <li class='indexItem indexItem1'><a href='#HANDLING_OF_DEFAULT_VALUES'>HANDLING OF DEFAULT VALUES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Defaults_with_no_fallbacks'>Defaults with no fallbacks</a>
    <li class='indexItem indexItem2'><a href='#Subclassing'>Subclassing</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#TODO'>TODO</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#VERSION_CONTROL'>VERSION CONTROL</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_&#38;_LICENSE'>COPYRIGHT &#38; LICENSE</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Crypt::Util - A lightweight Crypt/Digest convenience API</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">        use Crypt::Util; # also has a Sub::Exporter to return functions wrapping a default instance

        my $util = Crypt::Util-&#62;new;

        $util-&#62;default_key(&#34;my secret&#34;);

        # MAC or cipher+digest based tamper resistent encapsulation
        # (uses Storable on $data if necessary)
        my $tamper_resistent_string = $util-&#62;tamper_proof( $data );

        my $verified = $util-&#62;thaw_tamper_proof( $untrusted_string, key =&#62; &#34;another secret&#34; );

        # If the encoding is unspecified, base32 is used
        # (hex if base32 is unavailable)
        my $encoded = $util-&#62;encode_string( $bytes );

        my $hash = $util-&#62;digest( $bytes, digest =&#62; &#34;md5&#34; );

        die &#34;baaaad&#34; unless $util-&#62;verify_hash(
                hash   =&#62; $hash,
                data   =&#62; $bytes,
                digest =&#62; &#34;md5&#34;,
        );</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module provides an easy, intuitive and forgiving API for wielding crypto-fu.</p>

<p>The API is designed as a cascade, with rich features built using simpler ones. this means that the option processing is uniform throughout, and the behaviors are generally predictable.</p>

<p>Note that <a href="/~nuffin/Crypt-Util-0.11/lib/Crypt/Util.pmc" class="podlinkpod"
>Crypt::Util</a> doesn&#39;t do any crypto on its own, but delegates the actual work to the various other crypto modules on the CPAN. <a href="/~nuffin/Crypt-Util-0.11/lib/Crypt/Util.pmc" class="podlinkpod"
>Crypt::Util</a> merely wraps these modules, providing uniform parameters, and building on top of their polymorphism with higher level features.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Priorities"
>Priorities</a></h2>

<dl>
<dt><a name='Ease'></a><a name="Ease_of_use"
>Ease of use</a></dt>

<dd>
<p>This module is designed to have an easy API to allow easy but responsible use of the more low level Crypt:: and Digest:: modules on CPAN. Therefore, patches to improve ease-of-use are very welcome.</p>

<dt><a name="Pluggability"
>Pluggability</a></dt>

<dd>
<p>Dependency hell is avoided using a fallback mechanism that tries to choose an algorithm based on an overridable list.</p>

<p>For &#34;simple&#34; use install Crypt::Util and your favourite digest, cipher and cipher mode (CBC, CFB, etc).</p>

<p>To ensure predictable behavior the fallback behavior can be disabled as necessary.</p>
</dd>
</dl>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Interoperability"
>Interoperability</a></h2>

<p>To ensure that your hashes and strings are compatible with <a href="/~nuffin/Crypt-Util-0.11/lib/Crypt/Util.pmc" class="podlinkpod"
>Crypt::Util</a> deployments on other machines (where different Crypt/Digest modules are available, etc) you should use <code>disable_fallback</code>.</p>

<p>Then either set the default ciphers, or always explicitly state the cipher.</p>

<p>If you are only encrypting and decrypting with the same installation, and new cryptographic modules are not being installed, the hashes/ciphertexts should be compatible without disabling fallback.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORTED_API"
>EXPORTED API <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>NOTE</b>: nothing is exported by default.</p>

<p><a href="/~nuffin/Crypt-Util-0.11/lib/Crypt/Util.pmc" class="podlinkpod"
>Crypt::Util</a> also presents an optional exported api using <a href="/perldoc?Sub%3A%3AExporter" class="podlinkpod"
>Sub::Exporter</a>.</p>

<p>Unlike typical exported APIs, there is no class level default instance shared by all the importers, but instead every importer gets its own instance.</p>

<p>For example:</p>

<pre class="sh_perl">    package A;
    use Crypt::Util qw/:all/;

    default_key(&#34;moose&#34;);
    my $ciphertext = encrypt_string($plain);


    package B;
    use Crypt::Util qw/:all/;

    default_key(&#34;elk&#34;);
    my $ciphertext = encrypt_string($plain);</pre>

<p>In this example every importing package has its own implicit instance, and the <code>default_key</code> function will in fact not share the value.</p>

<p>You can get the instance using the <code>exported_instance</code> function, which is just the identity method.</p>

<p>The export tags supported are: <code>crypt</code> (encryption and tamper proofing related functions), <code>digest</code> (digest and MAC related functions), <code>encoding</code> (various encoding and decoding functions), and <code>params</code> which give you functions for handling default values.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='tamper_proof'></a><a name="tamper_proof(_[_$data_],_%params_)"
>tamper_proof( [ $data ], %params )</a></dt>

<dd>
<dt><a name='thaw_tamper_proof'></a><a name="thaw_tamper_proof(_[_$string_],_%params_)"
>thaw_tamper_proof( [ $string ], %params )</a></dt>

<dd>
<dt><a name='tamper_proof_string'></a><a name="tamper_proof_string(_$string,_%params_)"
>tamper_proof_string( $string, %params )</a></dt>

<dd>
<dt><a name='thaw_tamper_proof_string'></a><a name="thaw_tamper_proof_string(_$string,_%params_)"
>thaw_tamper_proof_string( $string, %params )</a></dt>

<dd>
<dt><a name='aead_tamper_proof_string'></a><a name="aead_tamper_proof_string(_[_$string_],_%params_)"
>aead_tamper_proof_string( [ $string ], %params )</a></dt>

<dd>
<dt><a name='mac_tamper_proof_string'></a><a name="mac_tamper_proof_string(_[_$string_],_%params_)"
>mac_tamper_proof_string( [ $string ], %params )</a></dt>

<dd>
<p>The <code>tamper_proof</code> method is in an intermittent state, in that the <code>data</code> parameter&#39;s API is not completely finalized.</p>

<p>It is safer to use <code>tamper_proof_string</code>; its API is expected to remain the same in future versions as well.</p>

<p>See <a href="#TODO" class="podlinkpod"
>&#34;TODO&#34;</a> for more information about the data types that will be supported in the future.</p>

<p>When thawing, the <code>authenticated_decrypt_string</code> or <code>verify_mac</code> methods will be used, with <code>fatal</code> defaulting to on unless explicitly disabled in the parameters.</p>

<blockquote>
<p>This method accepts the following parameters:</p>

<p>* encrypt</p>

<p>By default this parameter is true, unless <code>default_tamper_proof_unencrypted()</code>, has been enabled.</p>

<p>A true value implies that all the parameters which are available to <code>authenticated_encrypt_string()</code> are also available. If a negative value is specified, MAC mode is used, and the additional parameters of <code>mac_digest_string()</code> may also be specified to this method.</p>

<p>* data</p>

<p>The data to encrypt. If this is a reference <a href="/perldoc?Storable" class="podlinkpod"
>Storable</a> will be used to serialize the data.</p>

<p>See <code>pack_data</code> for details.</p>
</blockquote>

<p>If the string is encrypted then all the parameters of <code>encrypt_string</code> and <code>digest_string</code> are also available.</p>

<p>If the string is not encrypted, then all the parameters of <code>mac_digest_string</code> are also available.</p>

<dt><a name='encrypt_string'></a><a name="encrypt_string(_[_$string_],_%params_)"
>encrypt_string( [ $string ], %params )</a></dt>

<dd>
<dt><a name='decrypt_string'></a><a name="decrypt_string(_[_$string_],_%params_)"
>decrypt_string( [ $string ], %params )</a></dt>

<dd>
<dt><a name='authenticated_encrypt_string'></a><a name="authenticated_encrypt_string(_[_$string_],_%params_)"
>authenticated_encrypt_string( [ $string ], %params )</a></dt>

<dd>
<dt><a name='authenticated_decrypt_string'></a><a name="authenticated_decrypt_string(_[_$string_],_%params_)"
>authenticated_decrypt_string( [ $string ], %params )</a></dt>

<dd>
<p>All of the parameters which may be supplied to <code>process_key()</code>, <code>cipher_object</code> and <code>maybe_encode</code> are also available to these methods.</p>

<p>The <code>authenticated</code> variants ensure that an authenticated encryption mode (such as EAX) is used.</p>

<p>The following parameters may be used:</p>

<ul>
<li>string
<p>The string to be en/decrypted can either be supplied first, creating an odd number of arguments, or as a named parameter.</p>
</li>

<li>nonce
<p>The cryptographic nonce to use. Only necessary for encryption, will be packed in the string as part of the message if applicable.</p>
</li>

<li>header
<p>Not yet supported.</p>

<p>In the future this will include a header for AEAD (the &#34;associated data&#34; bit of AEAD).</p>
</li>
</ul>

<dt><a name='process_key'></a><a name="process_key(_[_$key_],_%params_)"
>process_key( [ $key ], %params )</a></dt>

<dd>
<p>The following arguments may be specified:</p>

<ul>
<li>literal_key
<p>This disables mungung. See also <code>default_use_literal_key</code>.</p>
</li>

<li>key_size
<p>Can be used to force a key size, even if the cipher specifies another size.</p>

<p>If not specified, the key size chosen will depend</p>
</li>

<li>cipher
<p>Used to determine the key size.</p>
</li>
</ul>

<dt><a name='process_nonce'></a><a name="process_nonce(_[_$nonce_],_%params_)"
>process_nonce( [ $nonce ], %params )</a></dt>

<dd>
<p>If a nonce is explicitly specified this method returns that, and otherwise uses <a href="/perldoc?Data%3A%3AGUID" class="podlinkpod"
>Data::GUID</a> to generate a unique binary string for use as a nonce/IV.</p>

<dt><a name='pack_data'></a><a name="pack_data(_[_$data_],_%params_)"
>pack_data( [ $data ], %params )</a></dt>

<dd>
<dt><a name='unpack_data'></a><a name="unpack_data(_[_$data_],_%params_)"
>unpack_data( [ $data ], %params )</a></dt>

<dd>
<p>Uses <a href="/perldoc?Storable" class="podlinkpod"
>Storable</a> and <code>pack</code> to create a string out of data.</p>

<p><a href="/perldoc?MooseX%3A%3AStorage" class="podlinkpod"
>MooseX::Storage</a> support will be added in the future.</p>

<p>The format itself is versioned in order to facilitate future proofing and backwards compatibility.</p>

<p>Note that it is not safe to call <code>unpack_data</code> on an untrusted string, use <code>thaw_tamper_proof</code> instead (it will authenticate the data and only then perform the potentially unsafe routines).</p>

<dt><a name='cipher_object'></a><a name="cipher_object(_%params_)"
>cipher_object( %params )</a></dt>

<dd>
<p>Available parameters are:</p>

<ul>
<li>cipher
<p>The cipher algorithm to use, e.g. <code>Rijndael</code>, <code>Twofish</code> etc.</p>
</li>

<li>mode
<p>The mode of operation. This can be real (<code>cbc</code>, <code>cfb</code>, <code>ctr</code>, <code>ofb</code>, <code>eax</code>) or symbolic (<code>authenticated</code>, <code>block</code>, <code>stream</code>).</p>

<p>See <a href="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation" class="podlinkurl"
>http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation</a> for an explanation of this.</p>
</li>
</ul>

<dt><a name='cipher_object_eax'></a><a name="cipher_object_eax(_%params_)"
>cipher_object_eax( %params )</a></dt>

<dd>
<p>Used by <code>cipher_object</code> but accepts additional parameters:</p>

<ul>
<li>nonce
<p>The nonce is a value that should be unique in order to protect against replay attacks. It also ensures that the same plain text with the same key will produce different ciphertexts.</p>

<p>The nonce is not included in the output ciphertext. See <code>authenticated_encrypt_string</code> for a convenience method that does include the nonce.</p>
</li>

<li>header
<p>This is additional data to authenticate but not encrypt.</p>

<p>See <a href="/perldoc?Crypt%3A%3AEAX" class="podlinkpod"
>Crypt::EAX</a> for more details.</p>

<p>The header will not be included in the output ciphertext.</p>
</li>
</ul>

<dt><a name='digest_string'></a><a name="digest_string(_[_$string_],_%params_)"
>digest_string( [ $string ], %params )</a></dt>

<dd>
<p>Delegates to <code>digest_object</code>. All parameters which can be used by <code>digest_object</code> may also be used here.</p>

<p>The following arguments are available:</p>

<ul>
<li>string
<p>The string to be digested can either be supplied first, creating an odd number of arguments, or as a named parameter.</p>
</li>
</ul>

<dt><a name='verify_digest'></a><a name="verify_digest(_%params_)"
>verify_digest( %params )</a></dt>

<dd>
<p>Delegates to <code>digest_object</code>. All parameters which can be used by <code>digest_object</code> may also be used here.</p>

<p>The following parameters are accepted:</p>

<ul>
<li>hash
<p>A string containing the hash to verify.</p>
</li>

<li>string
<p>The digested string.</p>
</li>

<li>fatal
<p>If true, errors will be fatal. The default is false, which means that failures will return undef.</p>
</li>
</ul>

<p>In addition, the parameters which can be supplied to <code>digest_string()</code> may also be supplied to this method.</p>

<dt><a name='digest_object'></a><a name="digest_object(_%params_)"
>digest_object( %params )</a></dt>

<dd>
<ul>
<li>digest
<p>The digest algorithm to use.</p>
</li>
</ul>

<p>Returns an object using <a href="/perldoc?Digest" class="podlinkpod"
>Digest</a>.</p>

<dt><a name='encode_string'></a><a name="encode_string(_[_$string_],_%params_)"
>encode_string( [ $string ], %params )</a></dt>

<dd>
<dt><a name='decode_string'></a><a name="decode_string(_[_$string_],_%params_)"
>decode_string( [ $string ], %params )</a></dt>

<dd>
<p>The following parameters are accepted:</p>

<ul>
<li>encoding
<p>The encoding may be a symbolic type (uri, printable) or a concrete type (none, hex, base64, base32).</p>
</li>
</ul>

<dt><a name='mac_digest_string'></a><a name="mac_digest_string(_[_$string_],_%param_)"
>mac_digest_string( [ $string ], %param )</a></dt>

<dd>
<p>Delegates to <code>mac_object</code>. All parameters which can be used by <code>mac_object</code> may also be used here.</p>

<ul>
<li>string</li>
</ul>

<dt><a name='verify_mac'></a><a name="verify_mac(_%params_)"
>verify_mac( %params )</a></dt>

<dd>
<p>Delegates to <code>mac_object</code>. All parameters which can be used by <code>mac_object</code> may also be used here.</p>

<p>The following additional arguments are allowed:</p>

<ul>
<li>hash
<p>The MAC string to verify.</p>
</li>

<li>string
<p>The digested string.</p>
</li>

<li>fatal
<p>If true, errors will be fatal. The default is false, which means that failures will return undef.</p>
</li>
</ul>

<dt><a name='mac_object'></a><a name="mac_object(_%params_)"
>mac_object( %params )</a></dt>

<dd>
<ul>
<li>mac
<p>The MAC algorithm to use. Currently <code>hmac</code> and <code>cmac</code> are supported.</p>
</li>
</ul>

<dt><a name="maybe_encode"
>maybe_encode</a></dt>

<dd>
<dt><a name="maybe_decode"
>maybe_decode</a></dt>

<dd>
<p>This method has no external API but is documented for the sake of its shared options.</p>

<p>It is delegated to by the various encryption and digest method.</p>

<ul>
<li>encode
<p>Expects a bool.</p>
</li>

<li>encoding
<p>Expects an algorithm name (symbolic (e.g. <code>uri</code>, <code>alphanumeric</code>), or concrete (e.g. <code>base64</code>, <code>hex</code>)).</p>
</li>
</ul>

<p>If <code>encode</code> is explicitly supplied it will always determine whether or not the string will be encoded. Otherwise, if <code>encoding</code> is explicitly supplied then the string will always be encoded using the specified algorithm. If neither is supplied <code>default_encode</code> will be checked to determine whether or not to encode, and <code>default_encoding</code> or <code>fallback_encoding</code> will be used to determine the algorithm to use (see <a href="#HANDLING_OF_DEFAULT_VALUES" class="podlinkpod"
>&#34;HANDLING OF DEFAULT VALUES&#34;</a>).</p>

<dt><a name='encode_string_alphanumerical'></a><a name="encode_string_alphanumerical(_$string_)"
>encode_string_alphanumerical( $string )</a></dt>

<dd>
<dt><a name='decode_string_alphanumerical'></a><a name="decode_string_alphanumerical(_$string_)"
>decode_string_alphanumerical( $string )</a></dt>

<dd>
<dt><a name='encode_string_uri'></a><a name="encode_string_uri(_$string_)"
>encode_string_uri( $string )</a></dt>

<dd>
<dt><a name='decode_string_uri'></a><a name="decode_string_uri(_$string_)"
>decode_string_uri( $string )</a></dt>

<dd>
<dt><a name='encode_string_printable'></a><a name="encode_string_printable(_$string_)"
>encode_string_printable( $string )</a></dt>

<dd>
<dt><a name='decode_string_printable'></a><a name="decode_string_printable(_$string_)"
>decode_string_printable( $string )</a></dt>

<dd>
<p>The above methods encode based on a fallback list (see <a href="#HANDLING_OF_DEFAULT_VALUES" class="podlinkpod"
>&#34;HANDLING OF DEFAULT VALUES&#34;</a>).</p>

<p>The variations denote types of formats: <code>alphanumerical</code> is letters and numbers only (case insensitive), <code>uri</code> is safe for inclusions in URIs (without further escaping), and <code>printable</code> contains no control characters or whitespace.</p>

<dt><a name='encode_string_hex'></a><a name="encode_string_hex(_$string_)"
>encode_string_hex( $string )</a></dt>

<dd>
<dt><a name='decode_string_hex'></a><a name="decode_string_hex(_$string_)"
>decode_string_hex( $string )</a></dt>

<dd>
<p>Big endian hexadecimal (<code>H*</code> pack format).</p>

<dt><a name='encode_string_uri_escape'></a><a name="encode_string_uri_escape(_$string_)"
>encode_string_uri_escape( $string )</a></dt>

<dd>
<dt><a name='decode_string_uri_escape'></a><a name="decode_string_uri_escape(_$string_)"
>decode_string_uri_escape( $string )</a></dt>

<dd>
<p><a href="/perldoc?URI%3A%3AEscape" class="podlinkpod"
>URI::Escape</a> based encoding.</p>

<dt><a name='encode_string_base64'></a><a name="encode_string_base64(_$string_)"
>encode_string_base64( $string )</a></dt>

<dd>
<dt><a name='decode_string_base64'></a><a name="decode_string_base64(_$string_)"
>decode_string_base64( $string )</a></dt>

<dd>
<dt><a name='encode_string_base64_wrapped'></a><a name="encode_string_base64_wrapped(_$string_)"
>encode_string_base64_wrapped( $string )</a></dt>

<dd>
<p>Requires <a href="/perldoc?MIME%3A%3ABase64" class="podlinkpod"
>MIME::Base64</a>.</p>

<p>The <code>wrapped</code> variant will introduce line breaks as per the <a href="/perldoc?MIME%3A%3ABase64" class="podlinkpod"
>MIME::Base64</a> default&#62;.</p>

<dt><a name="encode_string_uri_base64"
>encode_string_uri_base64</a></dt>

<dd>
<dt><a name="decode_string_uri_base64"
>decode_string_uri_base64</a></dt>

<dd>
<p>Requires <a href="/perldoc?MIME%3A%3ABase64" class="podlinkpod"
>MIME::Base64</a>.</p>

<p>Implements the Base64 for URIs. See <a href="http://en.wikipedia.org/wiki/Base64#URL_Applications" class="podlinkurl"
>http://en.wikipedia.org/wiki/Base64#URL_Applications</a>.</p>

<dt><a name='encode_string_base32'></a><a name="encode_string_base32(_$string_)"
>encode_string_base32( $string )</a></dt>

<dd>
<dt><a name='decode_string_base32'></a><a name="decode_string_base32(_$string_)"
>decode_string_base32( $string )</a></dt>

<dd>
<p>Requires <a href="/perldoc?MIME%3A%3ABase32" class="podlinkpod"
>MIME::Base32</a>.</p>

<p>(note- unlike <a href="/perldoc?MIME%3A%3ABase32" class="podlinkpod"
>MIME::Base32</a> this is case insensitive).</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="HANDLING_OF_DEFAULT_VALUES"
>HANDLING OF DEFAULT VALUES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='disable_fallback'></a><a name="disable_fallback()"
>disable_fallback()</a></dt>

<dd>
<p>When true only the first item from the fallback list will be tried, and if it can&#39;t be loaded there will be a fatal error.</p>

<p>Enable this to ensure portability.</p>
</dd>
</dl>

<p>For every parameter, there are several methods, where PARAMETER is replaced with the parameter name:</p>

<ul>
<li>default_PARAMETER()
<p>This accessor is available for the user to override the default value.</p>

<p>If set to undef, then <code>fallback_PARAMETER</code> will be consulted instead.</p>

<p><b>ALL</b> the default values are set to undef unless changed by the user.</p>
</li>

<li>fallback_PARAMETER()
<p>Iterates the <code>fallback_PARAMETER_list</code>, choosing the first value that is usable (it&#39;s provider is available).</p>

<p>If <code>disable_fallback</code> is set to a true value, then only the first value in the fallback list will be tried.</p>
</li>

<li>fallback_PARAMETER_list()
<p>An ordered list of values to try and use as fallbacks.</p>

<p><code>fallback_PARAMETER</code> iterates this list and chooses the first one that works.</p>
</li>
</ul>

<p>Available parameters are as follows:</p>

<ul>
<li>cipher
<p>The fallback list is <code>Rijndael</code>, <code>Serpent</code>, <code>Twofish</code>, <code>RC6</code>, <code>Blowfish</code> and <code>RC5</code>.</p>

<p><a href="/perldoc?Crypt%3A%3ARijndael" class="podlinkpod"
>Crypt::Rijndael</a> is the AES winner, the next three are AES finalists, and the last two are well known and widely used.</p>
</li>

<li>mode
<p>The mode in which to use the cipher.</p>

<p>The fallback list is <code>CFB</code>, <code>CBC</code>, <code>Ctr</code>, and <code>OFB</code>.</p>
</li>

<li>digest
<p>The fallback list is <code>SHA-1</code>, <code>SHA-256</code>, <code>RIPEMD160</code>, <code>Whirlpool</code>, <code>MD5</code>, and <code>Haval256</code>.</p>
</li>

<li>encoding
<p>The fallback list is <code>hex</code> (effectively no fallback).</p>
</li>

<li>alphanumerical_encoding
<p>The fallback list is <code>base32</code> and <code>hex</code>.</p>

<p><a href="/perldoc?MIME%3A%3ABase32" class="podlinkpod"
>MIME::Base32</a> is required for <code>base32</code> encoding.</p>
</li>

<li>uri_encoding
<p>The fallback list is <code>uri_base64</code>.</p>
</li>

<li>printable_encoding
<p>The fallback list is <code>base64</code></p>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Defaults_with_no_fallbacks"
>Defaults with no fallbacks</a></h2>

<p>The following parameters have a <code>default_</code> method, as described in the previous section, but the <code>fallback_</code> methods are not applicable.</p>

<ul>
<li>encode
<p>Whether or not to encode by default (applies to digests and encryptions).</p>
</li>

<li>key
<p>The key to use. Useful for when you are repeatedly encrypting.</p>
</li>

<li>nonce
<p>The nonce/IV to use for cipher modes that require it.</p>

<p>Defaults to the empty string, but note that some methods will generate a nonce for you (e.g. <code>authenticated_encrypt_string</code>) if none was provided.</p>
</li>

<li>use_literal_key
<p>Whether or not to not hash the key by default. See <code>process_key</code>.</p>
</li>

<li>tamper_proof_unencrypted
<p>Whether or not tamper resistent strings are by default unencrypted (just MAC).</p>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Subclassing"
>Subclassing</a></h2>

<p>You may safely subclass and override <code>default_PARAMETER</code> and <code>fallback_PARAMETER_list</code> to provide values from configurations.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="TODO"
>TODO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<ul>
<li>Crypt::SaltedHash support</li>

<li>EMAC (maybe, the modules are not OO and require refactoring) message authentication mode</li>

<li>Bruce Schneier Fact Database <a href="http://geekz.co.uk/lovesraymond/archive/bruce-schneier-facts" class="podlinkurl"
>http://geekz.co.uk/lovesraymond/archive/bruce-schneier-facts</a>.
<p><a href="/perldoc?WWW%3A%3ASchneierFacts" class="podlinkpod"
>WWW::SchneierFacts</a></p>
</li>

<li>Entropy fetching (get N weak/strong bytes, etc) from e.g. OpenSSL bindings, /dev/*random, and EGD.</li>

<li>Additional data formats (streams/iterators, filehandles, generalized storable data/string handling for all methods, not just tamper_proof).
<p>Streams should also be able to used via a simple push api.</p>
</li>

<li>IV/nonce/salt support for the various cipher modes, not just EAX (CBC, CCM, GCM, etc)</li>

<li><a href="/perldoc?Crypt%3A%3ARijndael" class="podlinkpod"
>Crypt::Rijndael</a> can do its own cipher modes</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/perldoc?Digest" class="podlinkpod"
>Digest</a>, <a href="/perldoc?Crypt%3A%3ACBC" class="podlinkpod"
>Crypt::CBC</a>, <a href="/perldoc?Crypt%3A%3ACFB" class="podlinkpod"
>Crypt::CFB</a>, <a href="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation" class="podlinkurl"
>http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERSION_CONTROL"
>VERSION CONTROL <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module is maintained using Darcs. You can get the latest version from <a href="http://nothingmuch.woobling.org/Crypt-Util/" class="podlinkurl"
>http://nothingmuch.woobling.org/Crypt-Util/</a>, and use <code>darcs send</code> to commit changes.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Yuval Kogman, &#60;nothingmuch@woobling.org&#62; Ann Barcomb</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_&#38;_LICENSE"
>COPYRIGHT &#38; LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2006-2008 by Yuval Kogman &#60;nothingmuch@woobling.org&#62;, Ann Barcomb</p>

<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>

<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>

<p>THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78069 Uploads, 24686 Distributions
105893 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sun Apr 22 04:41:04 2012 GMT (0.135028839111328) @cpansearch1 -->
 </body>
</html>
