<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Set::Object - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Set-Object",3]);
    _gaq.push(["_setCustomVar",5,"Release","Set-Object-1.28",3]);
    _gaq.push(["_setCustomVar",3,"Module","Set::Object",3]);
    _gaq.push(["_setCustomVar",1,"Author","SAMV",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Set::Object">permalink</a></div>
  <a href="/~samv/">Sam Vilain</a> &gt;
  <a href="/~samv/Set-Object-1.28/">Set-Object-1.28</a> &gt;
  Set::Object
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/53396ec02cd9ab308441bf6fdcae47bf?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/S/SA/SAMV/Set-Object-1.28.tar.gz">Set-Object-1.28.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Set%3A%3AObject;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~SAMV/Set-Object-1.28/lib/Set/Object.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?List%3A%3ACompare">List::Compare</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Set%3A%3AScalar">Set::Scalar</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?Devel%3A%3APeek">Devel::Peek</a><br>
<a href="/perldoc?Inline%3A%3AC">Inline::C</a><br>
<a href="/perldoc?Array%3A%3ACompare">Array::Compare</a><br>
<a href="/perldoc?List%3A%3AUtil">List::Util</a><br>
<a href="/perldoc?Text%3A%3AxSV">Text::xSV</a><br>
<a href="/perldoc?Object%3A%3AInsideOut">Object::InsideOut</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Set%3A%3AObject">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 5</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 1</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Set-Object">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  1.28 &nbsp;
<span class="noprint">
  <a href="/src/SAMV/Set-Object-1.28/lib/Set/Object.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#CONSTRUCTORS'>CONSTRUCTORS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#Set::Object-&#62;new(_[list]_)'>Set::Object-&#62;new( [list] )</a>
    <li class='indexItem indexItem2'><a href='#set(@members)'>set(@members)</a>
    <li class='indexItem indexItem2'><a href='#weak_set()'>weak_set()</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#INSTANCE_METHODS'>INSTANCE METHODS</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#insert(_[list]_)'>insert( [list] )</a>
    <li class='indexItem indexItem2'><a href='#includes(_[list]_)'>includes( [list] )</a>
    <li class='indexItem indexItem2'><a href='#has(_[list]_)'>has( [list] )</a>
    <li class='indexItem indexItem2'><a href='#contains(_[list]_)'>contains( [list] )</a>
    <li class='indexItem indexItem2'><a href='#member(_[item]_)'>member( [item] )</a>
    <li class='indexItem indexItem2'><a href='#element(_[item]_)'>element( [item] )</a>
    <li class='indexItem indexItem2'><a href='#members'>members</a>
    <li class='indexItem indexItem2'><a href='#elements'>elements</a>
    <li class='indexItem indexItem2'><a href='#size'>size</a>
    <li class='indexItem indexItem2'><a href='#remove(_[list]_)'>remove( [list] )</a>
    <li class='indexItem indexItem2'><a href='#delete(_[list]_)'>delete( [list] )</a>
    <li class='indexItem indexItem2'><a href='#weaken'>weaken</a>
    <li class='indexItem indexItem2'><a href='#is_weak'>is_weak</a>
    <li class='indexItem indexItem2'><a href='#strengthen'>strengthen</a>
    <li class='indexItem indexItem2'><a href='#invert(_[list]_)'>invert( [list] )</a>
    <li class='indexItem indexItem2'><a href='#clear'>clear</a>
    <li class='indexItem indexItem2'><a href='#as_string'>as_string</a>
    <li class='indexItem indexItem2'><a href='#equal(_set_)'>equal( set )</a>
    <li class='indexItem indexItem2'><a href='#not_equal(_set_)'>not_equal( set )</a>
    <li class='indexItem indexItem2'><a href='#intersection(_[list]_)'>intersection( [list] )</a>
    <li class='indexItem indexItem2'><a href='#union(_[list]_)'>union( [list] )</a>
    <li class='indexItem indexItem2'><a href='#difference_(_set_)'>difference ( set )</a>
    <li class='indexItem indexItem2'><a href='#unique_(_set_)'>unique ( set )</a>
    <li class='indexItem indexItem2'><a href='#symmetric_difference_(_set_)'>symmetric_difference ( set )</a>
    <li class='indexItem indexItem2'><a href='#subset(_set_)'>subset( set )</a>
    <li class='indexItem indexItem2'><a href='#proper_subset(_set_)'>proper_subset( set )</a>
    <li class='indexItem indexItem2'><a href='#superset(_set_)'>superset( set )</a>
    <li class='indexItem indexItem2'><a href='#proper_superset(_set_)'>proper_superset( set )</a>
    <li class='indexItem indexItem2'><a href='#is_null(_set_)'>is_null( set )</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#Set::Scalar_compatibility_methods'>Set::Scalar compatibility methods</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#compare(_set_)'>compare( set )</a>
    <li class='indexItem indexItem2'><a href='#is_disjoint(_set_)'>is_disjoint( set )</a>
    <li class='indexItem indexItem2'><a href='#as_string_callback(_set_)'>as_string_callback( set )</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#FUNCTIONS'>FUNCTIONS</a>
  <li class='indexItem indexItem1'><a href='#CLASS_METHODS'>CLASS METHODS</a>
  <li class='indexItem indexItem1'><a href='#SERIALIZATION'>SERIALIZATION</a>
  <li class='indexItem indexItem1'><a href='#PERFORMANCE'>PERFORMANCE</a>
  <li class='indexItem indexItem1'><a href='#THREAD_SAFETY'>THREAD SAFETY</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#LICENCE'>LICENCE</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Set::Object - set of objects and strings</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use Set::Object;

  my $set = set();            # or Set::Object-&#62;new()

  $set-&#62;insert(@thingies);
  $set-&#62;remove(@thingies);

  @items = @$set;             # or $set-&#62;members;

  $union = $set1 + $set2;
  $intersection = $set1 * $set2;
  $difference = $set1 - $set2;
  $symmetric_difference = $set1 % $set2;

  print &#34;set1 is a proper subset of set2&#34;
      if $set1 &#60; $set2;

  print &#34;set1 is a subset of set2&#34;
      if $set1 &#60;= $set2;

  # common idiom - iterate over any pure Perl structure
  use Set::Object qw(reftype);
  my @stack = $root;
  my $seen = Set::Object-&#62;new(@stack);
  while (my $object = pop @stack) {
      if (reftype $object eq &#34;HASH&#34;) {
          # do something with hash members

          # add the new nodes to the stack
          push @stack, grep { ref $_ &#38;&#38; $seen-&#62;insert($_) }
              values %$object;
      }
      elsif (reftype $object eq &#34;ARRAY&#34;) {
          # do something with array members

          # add the new nodes to the stack
          push @stack, grep { ref $_ &#38;&#38; $seen-&#62;insert($_) }
              @$object;

      }
      elsif (reftype $object =~ /SCALAR|REF/) {
          push @stack, $$object
              if ref $$object &#38;&#38; $seen-&#62;insert($$object);
      }
  }</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This modules implements a set of objects, that is, an unordered collection of objects without duplication.</p>

<p>The term <i>objects</i> is applied loosely - for the sake of <a href="/~samv/Set-Object-1.28/lib/Set/Object.pm" class="podlinkpod"
>Set::Object</a>, anything that is a reference is considered an object.</p>

<p><a href="/~samv/Set-Object-1.28/lib/Set/Object.pm" class="podlinkpod"
>Set::Object</a> 1.09 and later includes support for inserting scalars (including the empty string, but excluding <code>undef</code>) as well as objects. This can be thought of as (and is currently implemented as) a degenerate hash that only has keys and no values. Unlike objects placed into a Set::Object, scalars that are inserted will be flattened into strings, so will lose any magic (eg, tie) or other special bits that they went in with; only strings come out.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTORS"
>CONSTRUCTORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Set::Object-&#62;new(_[list]_)"
>Set::Object-&#62;new( [<i>list</i>] )</a></h2>

<p>Return a new <code>Set::Object</code> containing the elements passed in <i>list</i>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="set(@members)"
><code>set(@members)</code></a></h2>

<p>Return a new <code>Set::Object</code> filled with <code>@members</code>. You have to explicitly import this method.</p>

<p><b>New in Set::Object 1.22</b>: this function is now called as a method to return new sets the various methods that return a new set, such as <code>-&#62;intersection</code>, <code>-&#62;union</code>, etc and their overloaded counterparts. The default method always returns <code>Set::Object</code> objects, preserving previous behaviour and not second guessing the nature of your derived <a href="/~samv/Set-Object-1.28/lib/Set/Object.pm" class="podlinkpod"
>Set::Object</a> class.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="weak_set()"
><code>weak_set()</code></a></h2>

<p>Return a new <code>Set::Object::Weak</code>, filled with <code>@members</code>. You have to explicitly import this method.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INSTANCE_METHODS"
>INSTANCE METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="insert(_[list]_)"
>insert( [<i>list</i>] )</a></h2>

<p>Add items to the <code>Set::Object</code>.</p>

<p>Adding the same object several times is not an error, but any <code>Set::Object</code> will contain at most one occurence of the same object.</p>

<p>Returns the number of elements that were actually added. As of Set::Object 1.23, <code>undef</code> will not insert.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="includes(_[list]_)"
>includes( [<i>list</i>] )</a></h2>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="has(_[list]_)"
>has( [<i>list</i>] )</a></h2>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="contains(_[list]_)"
>contains( [<i>list</i>] )</a></h2>

<p>Return <code>true</code> if <b>all</b> the objects in <i>list</i> are members of the <code>Set::Object</code>. <i>list</i> may be empty, in which case <code>true</code> is always returned.</p>

<p>As of Set::Object 1.23, <code>undef</code> will never appear to be present in any set (even if the set contains the empty string). Prior to 1.23, there would have been a run-time warning.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="member(_[item]_)"
>member( [<i>item</i>] )</a></h2>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="element(_[item]_)"
>element( [<i>item</i>] )</a></h2>

<p>Like <code>includes</code>, but takes a single item to check and returns that item if the value is found, rather than just a true value.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="members"
>members</a></h2>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="elements"
>elements</a></h2>

<p>Return the objects contained in the <code>Set::Object</code> in random (hash) order.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="size"
>size</a></h2>

<p>Return the number of elements in the <code>Set::Object</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="remove(_[list]_)"
>remove( [<i>list</i>] )</a></h2>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="delete(_[list]_)"
>delete( [<i>list</i>] )</a></h2>

<p>Remove objects from a <code>Set::Object</code>.</p>

<p>Removing the same object more than once, or removing an object absent from the <code>Set::Object</code> is not an error.</p>

<p>Returns the number of elements that were actually removed.</p>

<p>As of Set::Object 1.23, removing <code>undef</code> is safe (but having an <code>undef</code> in the passed in list does not increase the return value, because it could never be in the set)</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="weaken"
>weaken</a></h2>

<p>Makes all the references in the set &#34;weak&#34; - that is, they do not increase the reference count of the object they point to, just like <a href="/perldoc?Scalar%3A%3AUtil" class="podlinkpod"
>Scalar::Util</a>&#39;s <code>weaken</code> function.</p>

<p>This was introduced with Set::Object 1.16, and uses a brand new type of magic. <b>Use with caution</b>. If you get segfaults when you use <code>weaken</code>, please reduce your problem to a test script before submission.</p>

<p><b>New:</b> as of Set::Object 1.19, you may use the <code>weak_set</code> function to make weak sets, or <code>Set::Object::Weak-&#62;new</code>, or import the <code>set</code> constructor from <code>Set::Object::Weak</code> instead. See <a href="/~samv/Set-Object-1.28/lib/Set/Object/Weak.pm" class="podlinkpod"
>Set::Object::Weak</a> for more.</p>

<p><b>Note to people sub-classing <code>Set::Object</code>:</b> this method re-blesses the invocant to <code>Set::Object::Weak</code>. Override the method <code>weak_pkg</code> in your sub-class to control this behaviour.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="is_weak"
>is_weak</a></h2>

<p>Returns a true value if this set is a weak set.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="strengthen"
>strengthen</a></h2>

<p>Turns a weak set back into a normal one.</p>

<p><b>Note to people sub-classing <code>Set::Object</code>:</b> this method re-blesses the invocant to <code>Set::Object</code>. Override the method <code>strong_pkg</code> in your sub-class to control this behaviour.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="invert(_[list]_)"
>invert( [<i>list</i>] )</a></h2>

<p>For each item in <i>list</i>, it either removes it or adds it to the set, so that a change is always made.</p>

<p>Also available as the overloaded operator <code>/</code>, in which case it expects another set (or a single scalar element), and returns a new set that is the original set with all the second set&#39;s items inverted.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="clear"
>clear</a></h2>

<p>Empty this <code>Set::Object</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="as_string"
>as_string</a></h2>

<p>Return a textual Smalltalk-ish representation of the <code>Set::Object</code>. Also available as overloaded operator &#34;&#34;.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="equal(_set_)"
>equal( <i>set</i> )</a></h2>

<p>Returns a true value if <i>set</i> contains exactly the same members as the invocant.</p>

<p>Also available as overloaded operator <code>==</code> (or <code>eq</code>).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="not_equal(_set_)"
>not_equal( <i>set</i> )</a></h2>

<p>Returns a false value if <i>set</i> contains exactly the same members as the invocant.</p>

<p>Also available as overloaded operator <code>!=</code> (or <code>ne</code>).</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="intersection(_[list]_)"
>intersection( [<i>list</i>] )</a></h2>

<p>Return a new <code>Set::Object</code> containing the intersection of the <code>Set::Object</code>s passed as arguments.</p>

<p>Also available as overloaded operator <code>*</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="union(_[list]_)"
>union( [<i>list</i>] )</a></h2>

<p>Return a new <code>Set::Object</code> containing the union of the <code>Set::Object</code>s passed as arguments.</p>

<p>Also available as overloaded operator <code>+</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="difference_(_set_)"
>difference ( <i>set</i> )</a></h2>

<p>Return a new <code>Set::Object</code> containing the members of the first (invocant) set with the passed <code>Set::Object</code>s&#39; elements removed.</p>

<p>Also available as overloaded operator <code>-</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="unique_(_set_)"
>unique ( <i>set</i> )</a></h2>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="symmetric_difference_(_set_)"
>symmetric_difference ( <i>set</i> )</a></h2>

<p>Return a new <code>Set::Object</code> containing the members of all passed sets (including the invocant), with common elements removed. This will be the opposite (complement) of the <i>intersection</i> of the two sets.</p>

<p>Also available as overloaded operator <code>%</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="subset(_set_)"
>subset( <i>set</i> )</a></h2>

<p>Return <code>true</code> if this <code>Set::Object</code> is a subset of <i>set</i>.</p>

<p>Also available as operator <code>&#60;=</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="proper_subset(_set_)"
>proper_subset( <i>set</i> )</a></h2>

<p>Return <code>true</code> if this <code>Set::Object</code> is a proper subset of <i>set</i> Also available as operator <code>&#60;</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="superset(_set_)"
>superset( <i>set</i> )</a></h2>

<p>Return <code>true</code> if this <code>Set::Object</code> is a superset of <i>set</i>. Also available as operator <code>&#62;=</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="proper_superset(_set_)"
>proper_superset( <i>set</i> )</a></h2>

<p>Return <code>true</code> if this <code>Set::Object</code> is a proper superset of <i>set</i> Also available as operator <code>&#62;</code>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="is_null(_set_)"
>is_null( <i>set</i> )</a></h2>

<p>Returns a true value if this set does not contain any members, that is, if its size is zero.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="Set::Scalar_compatibility_methods"
>Set::Scalar compatibility methods <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>By and large, <a href="/~samv/Set-Object-1.28/lib/Set/Object.pm" class="podlinkpod"
>Set::Object</a> is not and probably never will be feature-compatible with <a href="/perldoc?Set%3A%3AScalar" class="podlinkpod"
>Set::Scalar</a>; however the following functions are provided anyway.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="compare(_set_)"
>compare( <i>set</i> )</a></h2>

<p>returns one of:</p>

<pre class="sh_perl">  &#34;proper intersect&#34;
  &#34;proper subset&#34;
  &#34;proper superset&#34;
  &#34;equal&#34;
  &#34;disjoint&#34;</pre>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="is_disjoint(_set_)"
>is_disjoint( <i>set</i> )</a></h2>

<p>Returns a true value if the two sets have no common items.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="as_string_callback(_set_)"
>as_string_callback( <i>set</i> )</a></h2>

<p>Allows you to define a custom stringify function. This is only a class method. If you want anything fancier than this, you should sub-class Set::Object.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FUNCTIONS"
>FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following functions are defined by the Set::Object XS code for convenience; they are largely identical to the versions in the Scalar::Util module, but there are a couple that provide functions not catered to by that module.</p>

<p>Please use the versions in <a href="/perldoc?Scalar%3A%3AUtil" class="podlinkpod"
>Scalar::Util</a> in preference to these functions.</p>

<dl>
<dt><a name="blessed"
><b>blessed</b></a></dt>

<dd>
<p>Returns a true value if the passed reference (RV) is blessed. See also <a href="/perldoc?Acme%3A%3AHoly" class="podlinkpod"
>Acme::Holy</a>.</p>

<dt><a name="reftype"
><b>reftype</b></a></dt>

<dd>
<p>A bit like the perl built-in <code>ref</code> function, but returns the <i>type</i> of reference; ie, if the reference is blessed then it returns what <code>ref</code> would have if it were not blessed. Useful for &#34;seeing through&#34; blessed references.</p>

<dt><a name="refaddr"
><b>refaddr</b></a></dt>

<dd>
<p>Returns the memory address of a scalar. <b>Warning</b>: this is <i>not</i> guaranteed to be unique for scalars created in a program; memory might get re-used!</p>

<dt><a name='is_int'></a><a name="is_int,_is_string,_is_double"
><b>is_int</b>, <b>is_string</b>, <b>is_double</b></a></dt>

<dd>
<p>A quick way of checking the three bits on scalars - IOK (is_int), NOK (is_double) and POK (is_string). Note that the exact behaviour of when these bits get set is not defined by the perl API.</p>

<p>This function returns the &#34;p&#34; versions of the macro (SvIOKp, etc); use with caution.</p>

<dt><a name="is_overloaded"
><b>is_overloaded</b></a></dt>

<dd>
<p>A quick way to check if an object has overload magic on it.</p>

<dt><a name="ish_int"
><b>ish_int</b></a></dt>

<dd>
<p>This function returns true, if the value it is passed looks like it <i>already is</i> a representation of an <i>integer</i>. This is so that you can decide whether the value passed is a hash key or an array index.</p>

<dt><a name="is_key"
><b>is_key</b></a></dt>

<dd>
<p>This function returns true, if the value it is passed looks more like an <i>index</i> to a collection than a <i>value</i> of a collection.</p>

<p>But wait, you say - Set::Object has no indices, one of the fundamental properties of a Set is that it is an <i>unordered collection</i>. Which means <i>no indices</i>. Well, if this module were ever to be derived to be a more general multi-purpose collection, then this (and <code>ish_int</code>) might be a good function to use to distinguish different types of indexes from values.</p>

<dt><a name="get_magic"
><b>get_magic</b></a></dt>

<dd>
<p>Pass to a scalar, and get the magick wand (<code>mg_obj</code>) used by the weak set implementation. The return will be a list of integers which are pointers to the actual <code>ISET</code> structure. Whatever you do don&#39;t change the array :). This is used only by the test suite, and if you find it useful for something then you should probably conjure up a test suite and send it to me, otherwise it could get pulled.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CLASS_METHODS"
>CLASS METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>These class methods are probably only interesting to those sub-classing <code>Set::Object</code>.</p>

<dl>
<dt><a name="strong_pkg"
>strong_pkg</a></dt>

<dd>
<p>When a set that was already weak is strengthened using <code>-&#62;strengthen</code>, it gets re-blessed into this package.</p>

<dt><a name="weak_pkg"
>weak_pkg</a></dt>

<dd>
<p>When a set that was NOT already weak is weakened using <code>-&#62;weaken</code>, it gets re-blessed into this package.</p>

<dt><a name="tie_array_pkg"
>tie_array_pkg</a></dt>

<dd>
<p>When the object is accessed as an array, tie the array into this package.</p>

<dt><a name="tie_hash_pkg"
>tie_hash_pkg</a></dt>

<dd>
<p>When the object is accessed as a hash, tie the hash into this package.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SERIALIZATION"
>SERIALIZATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>It is possible to serialize <code>Set::Object</code> objects via <a href="/perldoc?Storable" class="podlinkpod"
>Storable</a> and duplicate via <code>dclone</code>; such support was added in release 1.04. As of <code>Set::Object</code> version 1.15, it is possible to freeze scalar items, too.</p>

<p>However, the support for freezing scalar items introduced a backwards incompatibility. Earlier versions than 1.15 will <code>thaw</code> sets frozen using Set::Object 1.15 and later as a set with one item - an array that contains the actual members.</p>

<p>Additionally, version 1.15 had a bug that meant that it would not detect <code>freeze</code> protocol upgrades, instead reverting to pre-1.15 behaviour.</p>

<p><code>Set::Object</code> 1.16 and above are capable of dealing correctly with all serialized forms, as well as correctly aborting if a &#34;newer&#34; <code>freeze</code> protocol is detected during <code>thaw</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="PERFORMANCE"
>PERFORMANCE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The following benchmark compares <code>Set::Object</code> with using a hash to emulate a set-like collection (this is an old benchmark, but still holds true):</p>

<pre class="sh_perl">   use Set::Object;

   package Obj;
   sub new { bless { } }

   @els = map { Obj-&#62;new() } 1..1000;

   require Benchmark;

   Benchmark::timethese(100, {
      &#39;Control&#39; =&#62; sub { },
      &#39;H insert&#39; =&#62; sub { my %h = (); @h{@els} = @els; },
      &#39;S insert&#39; =&#62; sub { my $s = Set::Object-&#62;new(); $s-&#62;insert(@els) },
      } );

   %gh = ();
   @gh{@els} = @els;

   $gs = Set::Object-&#62;new(@els);
   $el = $els[33];

   Benchmark::timethese(100_000, {
           &#39;H lookup&#39; =&#62; sub { exists $gh{33} },
           &#39;S lookup&#39; =&#62; sub { $gs-&#62;includes($el) }
      } );</pre>

<p>On my computer the results are:</p>

<pre class="sh_perl">   Benchmark: timing 100 iterations of Control, H insert, S insert...
      Control:  0 secs ( 0.01 usr  0.00 sys =  0.01 cpu)
               (warning: too few iterations for a reliable count)
     H insert: 68 secs (67.81 usr  0.00 sys = 67.81 cpu)
     S insert:  9 secs ( 8.81 usr  0.00 sys =  8.81 cpu)
   Benchmark: timing 100000 iterations of H lookup, S lookup...
     H lookup:  7 secs ( 7.14 usr  0.00 sys =  7.14 cpu)
     S lookup:  6 secs ( 5.94 usr  0.00 sys =  5.94 cpu)</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="THREAD_SAFETY"
>THREAD SAFETY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module has none.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Original Set::Object module by Jean-Louis Leroy, &#60;jll@skynet.be&#62;</p>

<p>Set::Scalar compatibility, XS debugging, weak references support and general maintainership courtesy of Sam Vilain, &#60;samv@cpan.org&#62;. Maximum respect to those who send me test scripts, enhancements, etc as patches against my git tree, browsable at <a href="http://utsl.gen.nz/gitweb/?p=Set-Object" class="podlinkurl"
>http://utsl.gen.nz/gitweb/?p=Set-Object</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LICENCE"
>LICENCE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 1998-1999, Jean-Louis Leroy. All Rights Reserved. This module is free software. It may be used, redistributed and/or modified under the terms of the Perl Artistic License</p>

<p>Portions Copyright (c) 2003 - 2005, Sam Vilain. Same license.</p>

<p>Portions Copyright (c) 2006, 2007, Catalyst IT (NZ) Limited. Same license.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>perl(1), perltie(1), <a href="/perldoc?Set%3A%3AScalar" class="podlinkpod"
>Set::Scalar</a>, overload.pm</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78276 Uploads, 24724 Distributions
106002 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 03:16:48 2012 GMT (0.179520130157471) @cpansearch1 -->
 </body>
</html>
