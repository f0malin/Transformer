<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Log::Localized - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","Log-Localized",3]);
    _gaq.push(["_setCustomVar",5,"Release","Log-Localized-0.05",3]);
    _gaq.push(["_setCustomVar",3,"Module","Log::Localized",3]);
    _gaq.push(["_setCustomVar",1,"Author","ERWAN",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Log::Localized">permalink</a></div>
  <a href="/~erwan/">Erwan Lemonnier</a> &gt;
  <a href="/~erwan/Log-Localized-0.05/">Log-Localized-0.05</a> &gt;
  Log::Localized
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/d1a5de69703482aec09488e1d2be9111?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/E/ER/ERWAN/Log-Localized-0.05.tar.gz">Log-Localized-0.05.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Log%3A%3ALocalized;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~ERWAN/Log-Localized-0.05/lib/Log/Localized.pm">Annotate this POD
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>Open&nbsp;</td><td style="text-align:right"> 0</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Log-Localized">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.05 &nbsp;
<span class="noprint">
  <a href="/src/ERWAN/Log-Localized-0.05/lib/Log/Localized.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS_-_ADVANCED'>SYNOPSIS - ADVANCED</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#DEFAULT_SETTINGS'>DEFAULT SETTINGS</a>
  <li class='indexItem indexItem1'><a href='#CONFIGURATION'>CONFIGURATION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#ENVIRONMENT_VARIABLE'>ENVIRONMENT VARIABLE</a>
    <li class='indexItem indexItem2'><a href='#VERBOSITY_RULES_VIA_IMPORT_PARAMETERS'>VERBOSITY RULES VIA IMPORT PARAMETERS</a>
    <li class='indexItem indexItem2'><a href='#VERBOSITY_RULES_IN_A_FILE'>VERBOSITY RULES IN A FILE</a>
    <li class='indexItem indexItem2'><a href='#LOCAL_VERBOSITY'>LOCAL VERBOSITY</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#VERBOSITY_RULES'>VERBOSITY RULES</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#CONFIG_BLOCKS'>CONFIG BLOCKS</a>
    <li class='indexItem indexItem2'><a href='#VERBOSITY_RULES'>VERBOSITY RULES</a>
    <li class='indexItem indexItem2'><a href='#LOG::LOCALIZED_OPTIONS'>LOG::LOCALIZED OPTIONS</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#LOGGING_ALGORITHM'>LOGGING ALGORITHM</a>
  <li class='indexItem indexItem1'><a href='#IMPORT_PARAMETERS'>IMPORT PARAMETERS</a>
  <li class='indexItem indexItem1'><a href='#EXPORTED_FUNCTIONS'>EXPORTED FUNCTIONS</a>
  <li class='indexItem indexItem1'><a href='#CLASS_VARIABLES'>CLASS VARIABLES</a>
  <li class='indexItem indexItem1'><a href='#WARNING'>WARNING</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#BUGS_AND_LIMITATIONS'>BUGS AND LIMITATIONS</a>
  <li class='indexItem indexItem1'><a href='#FOR_FUN'>FOR FUN</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT_AND_LICENSE'>COPYRIGHT AND LICENSE</a>
  <li class='indexItem indexItem1'><a href='#DISCLAIMER_OF_WARRANTY'>DISCLAIMER OF WARRANTY</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Log::Localized - Localize your logging</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>What you most probably want to do is something like:</p>

<pre class="sh_perl">    package Foo;
    use Log::Localized; 
    
    sub bar {
        # this message will be displayed if method bar&#39;s verbosity is &#62;= 1
        llog(1,&#34;running bar()&#34;);
    }

    # this message will be displayed if package Foo&#39;s verbosity is &#62;= 3
    llog(3,&#34;loaded package Foo&#34;);</pre>

<p>Then paste the following local verbosity rules in a file called &#39;verbosity.conf&#39;, in the same directory as your program:</p>

<pre class="sh_perl">    # log everything from wherever inside Foo and its subclasses, up to level 3
    Foo:: = 3
    # except for function Foo::foo who shall have verbosity 0
    Foo::bar = 0</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS_-_ADVANCED"
>SYNOPSIS - ADVANCED <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>In a program accepting command line arguments, you may want to do:</p>

<pre class="sh_perl">    use Getopt::Long;
    use Log::Localized log =&#62; 1;

    GetOptions(&#34;verbose|v+&#34; =&#62; sub { $Log::Localized::VERBOSITY++; } );

    llog(1,&#34;you used -v&#34;);
    llog(2,&#34;you used -v -v&#34;);</pre>

<p>You may alter local verbosity from within the running code:</p>

<pre class="sh_perl">    package Foo;
    use Log::Localized log =&#62; 1;

    # verbosity level is 0 by default

    {
        # set verbosity locally in this block
        local $Log::Debug::VERBOSITY = 5;  
        llog(5,&#34;this will be logged&#34;);
    }

    debug(5,&#34;but this won&#39;t&#34;);</pre>

<p>If you want to import &#39;llog&#39; under another name in the calling module:</p>

<pre class="sh_perl">    package Foo;
    use Log::Localized rename =&#62; &#34;my_log&#34;;
    
    # call Log::Localized::llog()
    my_log(1,&#34;renamed llog()&#34;);</pre>

<p>See the examples directory in the module distribution for more real life examples.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Log::Localized provides you with an interface for defining dynamically exactly which part of your code should log messages and with which verbosity.</p>

<p>Log::Localized addresses one issue of traditional logging: in very large systems, a slight increase in logging verbosity usually generates insane amounts of logs. Hence the need of being able to turn on verbosity selectively in some areas of code only, in a <i>localized</i> way.</p>

<p>Log::Localized is based on the concept of local verbosity. Each package and each function in a package has its own local verbosity, set to 0 by default. With Log::Localized you can change the local verbosity in just a function, just a package or just a class hierarchy via a so called verbosity rule. Verbosity rules are passed to Log::Localized either via a configuration file or via an import parameter. By changing verbosity rules according to the needs of the moment, you can alter your program&#39;s logging flow in a very fine-grained way, and get logs from only the code areas you are interested in.</p>

<p>Log::Localized comes with default settings that make it usable &#39;out of the box&#39;, but its configuration options will let you redefine pretty much everything in its behavior.</p>

<p>The actual logging in Log::Localized is handled by Log::Dispatch.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DEFAULT_SETTINGS"
>DEFAULT SETTINGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='DEFAULT'></a><a name="DEFAULT_VERBOSITY_The_local_verbosity_is_everywhere_0_by_default."
><b>DEFAULT VERBOSITY</b> The local verbosity is everywhere 0 by default.</a></dt>

<dd>
<dt><a 
><b>DEFAULT DISPATCHER</b> Log::Localized dispatches its log to STDOUT by default and with no Log::Dispatch preformatting of the log messages. You can change the default dispatcher with the option <i>Log::Localized::dispatchers</i>.</a></dt>

<dd>
<dt><a 
><b>DEFAULT SEARCH PATH</b> The default search path in which Log::Localized will search for verbosity rules files or dispatcher config files is (in this order) the local directory, the user&#39;s home directory and the root directory (to enable the use of absolute paths in options). The default search path can be overriden with the <i>Log::Localized::search_path</i> option.</a></dt>

<dd>
<dt><a 
><b>DEFAULT VERBOSITY RULES FILE NAME</b> By default, the verbosity rules file should be called &#39;verbosity.conf&#39;. This name can be changed with the option <i>Log::Localized::use_rules</i>.</a></dt>

<dd>
<dt><a 
><b>DEFAULT LOG FUNCTION NAME</b> Log::Localized&#39;s logging function is by default exported under the name <i>llog</i>, but this can be changed with the option <i>Log::Localized::rename</i> or via the import parameter <i>rename</i>.</a></dt>

<dd>
<dt><a 
><b>DEFAULT GLOBAL VERBOSITY ENVIRONMENT VARIABLE NAME</b> The environment variable setting the global verbosity level is by default &#39;LOG_LOCALIZED_VERBOSITY&#39;. This can be changed with the option <i>Log::Localized::global_verbosity</i>.</a></dt>

<dd>
<dt><a 
><b>DEFAULT FORMATTING</b> Log::Localized pre-formats log messages by default. The message &#39;whatever&#39; coming from function <i>test</i> in module <i>Foo::Bar</i> and logged at line 25 with level 2 will be logged as &#39;# [Foo::Bar::test() l.25] [LEVEL 2]: whatever&#39;. This default pre-formatting can be changed with the <i>Log:Localized::format</i> option.</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONFIGURATION"
>CONFIGURATION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Log::Localized provides 4 mechanisms to affect local verbosity. They are, in order of precedence:</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="ENVIRONMENT_VARIABLE"
>ENVIRONMENT VARIABLE</a></h2>

<p>If the environment variable LOG_LOCALIZED_VERBOSITY is set, logging is turned on and Log::Localized will log everywhere in the code to the level of verbosity set in LOG_LOCALIZED_VERBOSITY. LOG_LOCALIZED_VERBOSITY&#39;s value must be a positive integer. This overrides even the verbosity level eventually set vith verbosity rules. Note that the name of this environment variable can be changed vith the appropriate option.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="VERBOSITY_RULES_VIA_IMPORT_PARAMETERS"
>VERBOSITY RULES VIA IMPORT PARAMETERS</a></h2>

<p>Verbosity rules can be loaded at &#39;use&#39; time via the import parameter &#39;rules&#39;. If Log::Localized is passed rules in that way, those rules will be merged with the rules eventually loaded from a rules file at compile time, and logging is turned on.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="VERBOSITY_RULES_IN_A_FILE"
>VERBOSITY RULES IN A FILE</a></h2>

<p>If at compilation time there exists a file called &#39;verbosity.conf&#39; in the search path, the rules it contains are loaded and logging is turned on. Note that you can modify both the default search path and rules file name with the appropriate options.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="LOCAL_VERBOSITY"
>LOCAL VERBOSITY</a></h2>

<p>You can also set verbosity locally in the code, by locally setting the class variable $Log::Localized::VERBOSITY. See the examples in SYNOPSIS. Verbosity set in this way will be overriden by any verbosity defined via the environment variable or via rules.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="VERBOSITY_RULES"
>VERBOSITY RULES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Verbosity rules follow the Tiny::Config syntax. Read its pod before continuing.</p>

<p>Below is an example of verbosity rules:</p>

<pre class="sh_perl">    # default block
    main:: = 4
    Foo::* = 3

    # additional rules specific to program &#39;test.pl&#39;
    [test.pl]
    main:: = 0
    Foo::bar = 0</pre>

<p>Those rules read like this: set local verbosity to 4 everywhere in package &#39;main&#39; and all subpackages of package &#39;main&#39;. Set local verbosity everywhere in package &#39;Foo&#39; to 3. But if the running program is &#39;test.pl&#39;, use the same rules, except that local verbosity should be set to 0 everywhere in package &#39;main&#39; and all its subpackages, and verbosity should be set to 0 for function <i>bar</i> in package &#39;Foo&#39;.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="CONFIG_BLOCKS"
>CONFIG BLOCKS</a></h2>

<p>See Config::Tiny. The default heading block contains default verbosity rules that apply to all programs. Following configuration blocks are named with, in brackets, the name of a program to which the block&#39;s rules apply. Rules in a named block apply only to the program having the same name, and will override any default rules with similar <i>keys</i>.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="VERBOSITY_RULES"
>VERBOSITY RULES</a></h2>

<p>A verbosity rule is a key-value pair of the form &#39;key = value&#39;, where <i>value</i> must be an integer. Those pairs can have one of the following syntaxes:</p>

<dl>
<dt><a 
><b>namespace:: = value</b> where namespace is a Perl namespace, such as &#39;main&#39; or &#39;Foo::Bar&#39;. This rule reads &#39;set local verbosity to <i>value</i> everywhere in package <i>namespace</i> and all its sub-packages&#39;. Everywhere means in all functions, blocks, methods...</a></dt>

<dd>
<dt><a name='namespace'></a><a name="namespace::*_=_value_reads_&#39;set_local_verbosity_to_value_everywhere_in_package_namespace_(but_not_in_its_sub-packages)&#39;."
><b>namespace::* = value</b> reads &#39;set local verbosity to <i>value</i> everywhere in package <i>namespace</i> (but not in its sub-packages)&#39;.</a></dt>

<dd>
<dt><a name='namespace'></a><a name="namespace::function_=_value_reads_&#39;set_local_verbosity_to_value_in_function_function_from_package_namespace&#39;."
><b>namespace::function = value</b> reads &#39;set local verbosity to <i>value</i> in function <i>function</i> from package <i>namespace</i>&#39;.</a></dt>

<dd>
<dt><a name='function'></a><a name="function_=_value_is_the_same_as_&#39;main::function_=_value&#39;."
><b>function = value</b> is the same as &#39;main::function = value&#39;.</a></dt>
</dl>

<p>See &#39;LOGGING ALGORITHM&#39; for details about rule precedence.</p>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="LOG::LOCALIZED_OPTIONS"
>LOG::LOCALIZED OPTIONS</a></h2>

<p>When feeding verbosity rules to Log::Localized via a rules file or via the import parameter &#39;rules&#39;, you can alter the default settings of Log::Localized by declaring some of the following special rules:</p>

<dl>
<dt><a name='Log'></a><a name="Log::Localized::rename_=_$name_instructs_Log::Localized_to_export_llog_under_the_name_$name."
><b>Log::Localized::rename = $name</b> instructs Log::Localized to export <i>llog</i> under the name <i>$name</i>.</a></dt>

<dd>
<dt><a 
><b>Log::Localized::dispatchers = $file</b> instructs Log::Localized to use the dispatchers defined in the Log::Dispatch::Config file called <i>$file</i> located in the search path. Those dispatchers replace Log::Localized&#39;s default dispatcher (ie STDOUT).</a></dt>

<dd>
<dt><a 
><b>Log::Localized::format = $format</b> instructs Log::Localized to pre-format log messages according to the macro in <i>$format</i>. The default format macro is &#39;# [%PKG::%FNC() l.%LIN] [LEVEL %LVL]: %MSG&#39;. %MSG is replaced by the log message, %FNC by the name of the function calling <i>llog</i> and %PKG by the name of this function&#39;s package, %LIN by the line code number where <i>llog</i> is called and %LVL with the level of the message passed to <i>llog</i>. The <i>$format</i> string can be any string containing some of these 5 keywords.</a></dt>

<dd>
<dt><a 
><b>Log::Localized::global_verbosity = $name</b> instructs Log::Localized to use <i>$name</i> as the name of the global verbosity environment variable.</a></dt>

<dd>
<dt><a 
><b>Log::Localized::use_rules = $rules</b> indicates the name of a verbosity rules file from which all rules should be reloaded. The <i>use_rule</i> option makes that all rules loaded so far are droped and that new rules are searched in a file called <i>$rules</i> located in the search path. This option allows you to change the default name for rules files (&#39;verbosity.conf&#39;). You may want to combine it with the <i>search_path</i> option to specify the directory in which the new rules file is located.</a></dt>

<dd>
<dt><a 
><b>Log::Localized::search_path = $pathlist</b> specifies the search path in which to search for the <i>use_rules</i> and <i>dispatchers</i> files. <i>$pathlist</i> is a traditional UNIX style search path made of a colon separated list of paths (ex: &#34;~/config/:/opt/log/:$SYSTEM_ROOT/conf/&#34;). Log::Localized will substitute any occurence of &#39;~&#39; with the path of the current user&#39;s home directory (see File::HomeDir), and any name starting with a dollar sign by the content of the environment variable having the same name, if this variable exists. If the variable does not exist, the path is left unchanged.</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LOGGING_ALGORITHM"
>LOGGING ALGORITHM <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Upon calling &#39;llog($level,$message)&#39;, <i>llog</i> does the following to find out the local verbosity.</p>

<p>If the global verbosity environment variable is set, its value is used as the local verbosity.</p>

<p>Otherwise, <i>llog</i> identifies the calling function and its module and checks whether there exists a rule with the key &#39;module::function&#39;. If not it searches for a rule with the key &#39;module::*&#39;. If not, it searches for a rule with the key &#39;module::&#39;, then with keys corresponding to parent packages of &#39;module&#39;. For example, if module is &#39;Foo::Bar::Naph&#39;, the following keys will be successively searched for: &#39;Foo::Bar:Naph::&#39;, &#39;Foo::Bar::&#39; then &#39;Foo::&#39;. This explain the &#39;package and all subpackages&#39; mechanism named previously.</p>

<p>Finally, if no matching verbosity rule was found, <i>llog</i> uses the value of the class variable $Log::Localized::VERBOSITY, defaulting to 0.</p>

<p>If the message level is less or equal to the local verbosity, <i>llog</i> will log the message.</p>

<p>In that case, if the message was a closure, <i>llog</i> executes it and takes its result as the message. <i>llog</i> pre-formats the message, then dispatch it to its Log::Dispatch object.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="IMPORT_PARAMETERS"
>IMPORT PARAMETERS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='rename'></a><a name="&#34;rename_=&#62;_$name&#34;_exports_llog_into_the_calling_module_under_the_name_$name."
>&#34;<b>rename</b> =&#62; $name&#34; exports <i>llog</i> into the calling module under the name <i>$name</i>.</a></dt>

<dd>
<dt><a 
>&#34;<b>rules</b> =&#62; $rules&#34; lets you inject verbosity rules into Log::Localized. The syntax of <i>$rules</i> is the same as for the verbosity rules file. This is particularly usefull for passing configuration options to Log::Localized. Note though that option changes will apply globally to all modules using Log::Localized, and not only to the one calling Log::Localized with the import parameter &#39;rules&#39;. Example:</a></dt>

<dd>
<pre class="sh_perl">    use Log::Localized rules =&#62; &#34;Log::Localized::search_path = / \n&#34;.
                                &#34;Log::Localized::dispatchers = /opt/conf/dispatch.conf \n&#34;.
                                &#34;Log::Localized::use_rules = /opt/conf/rules.conf \n&#34;;</pre>

<dt><a 
>&#34;<b>log</b> =&#62; [0|1]&#34; turns logging on or off. <i>llog</i> is exported into the calling module only if logging is turned on. Logging is turned on if a rule verbosity file was found at compilation time or passed via the &#39;rules&#39; parameter, or if the global verbosity environment variable is defined upon importing. If neither exists, but you still want to log, you have to use the &#39;log&#39; parameter with the value 0 (off) or 1 (on):</a></dt>

<dd>
<pre class="sh_perl">    use Log::Localized log =&#62; 1;</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="EXPORTED_FUNCTIONS"
>EXPORTED FUNCTIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='llog'></a><a name="llog($level,$message)"
><b>llog</b>($level,$message)</a></dt>

<dd>
<p>Where <i>$level</i> is an integer, and <i>$message</i> is either a string or a reference to a function that returns a string.</p>

<p><i>llog</i> dispatches the message <i>$message</i> if <i>$level</i> is inferior or equal to the local verbosity in the code where <i>llog</i> is called. <i>llog</i> has no return value.</p>

<p>See &#39;LOGGING ALGORITHM&#39; for details on how <i>llog</i> works.</p>

<p>By convention, messages with a <i>$level</i> of 0 are always logged (if logging is on), since the default local verbosity is 0 too.</p>

<p>If <i>$message</i> is a function reference instead of a string, this function is executed and the string it returns is used as the log message. Note that the function is executed only if the message level is &#60;= to the local verbosity. Indeed, a call like:</p>

<pre class="sh_perl">    llog(4,&#34;content of this hugely complex object: &#34;.Dumper($obj));</pre>

<p>will slow things down in code where speed matters, since it executes <i>Dumper</i> even when the local verbosity is lower than 4. If you want <i>Dumper</i> to execute only when the message would actually be logged, wrap it in an anonymous function:</p>

<pre class="sh_perl">    llog(4, sub { &#34;content of this hugely complex object: &#34;.Dumper($obj); } );</pre>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CLASS_VARIABLES"
>CLASS VARIABLES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='Log'></a><a name="$Log::Localized::VERBOSITY"
><b>$Log::Localized::VERBOSITY</b></a></dt>

<dd>
<p>See &#39;LOGGING ALGORITHM&#39; for details and &#39;SYNOPSIS&#39; for examples.</p>

<dt><a name='Log'></a><a name="$Log::Localized::LEVEL"
><b>$Log::Localized::LEVEL</b></a></dt>

<dd>
<p>Contains the level of the message last received by <i>llog</i>. This class variable is made to be used by closures that are passed to <i>llog</i>. See the example in the &#39;examples&#39; directory.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="WARNING"
>WARNING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='Forking'></a><a name="Forking,_threading_Log::Localized_is_not_designed_to_be_used_simultaneously_by_multiple_threads_or_processes."
><b>Forking, threading</b> Log::Localized is not designed to be used simultaneously by multiple threads or processes.</a></dt>

<dd>
<dt><a 
><b>Monitoring rule changes</b> Log::Localized loads the verbosity rules only once, at &#39;use&#39; time, and will not notice later changes of the rules file during runtime. This may be implemented in the future.</a></dt>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>See <a href="/perldoc?Log%3A%3ADispatch" class="podlinkpod"
>Log::Dispatch</a>, <a href="/perldoc?Log%3A%3ALog4perl" class="podlinkpod"
>Log::Log4perl</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS_AND_LIMITATIONS"
>BUGS AND LIMITATIONS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Please report any bugs or feature requests to <code>bug-log-localized@rt.cpan.org</code>, or through the web interface at <a href="http://rt.cpan.org" class="podlinkurl"
>http://rt.cpan.org</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="FOR_FUN"
>FOR FUN <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>By the way, Log::Localized llogs itself :) To get a glimpse of Log::Localized&#39;s internals, &#39;use Log::Localized;&#39;, then dump the rule &#39;Log::Localized:: = 3&#39; in a local file called &#39;verbosity.conf&#39;...</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Written by Erwan Lemonnier <code>&#60;erwan@cpan.org&#62;</code> and co-designed by Claes Jacobsson <code>&#60;claesjac@cpan.org&#62;</code>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT_AND_LICENSE"
>COPYRIGHT AND LICENSE <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (C) 2005 by Erwan Lemonnier <code>&#60;erwan@cpan.org&#62;</code></p>

<p>This module is free software; you can redistribute it and/or modify it under the same terms as Perl itself. See <a href="/perldoc?perlartistic" class="podlinkpod"
>perlartistic</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DISCLAIMER_OF_WARRANTY"
>DISCLAIMER OF WARRANTY <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE SOFTWARE &#34;AS IS&#34; WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION.</p>

<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78283 Uploads, 24725 Distributions
106015 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 07:37:26 2012 GMT (0.361863851547241) @cpansearch1 -->
 </body>
</html>
