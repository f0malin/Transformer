<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>Net::LDAP - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","perl-ldap",3]);
    _gaq.push(["_setCustomVar",5,"Release","perl-ldap-0.44",3]);
    _gaq.push(["_setCustomVar",3,"Module","Net::LDAP",3]);
    _gaq.push(["_setCustomVar",1,"Author","MARSCHAP",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?Net::LDAP">permalink</a></div>
  <a href="/~marschap/">Peter Marschall</a> &gt;
  <a href="/~marschap/perl-ldap-0.44/">perl-ldap-0.44</a> &gt;
  Net::LDAP
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/deebbdf64d45f3ecc2079a79f7c650c5?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/M/MA/MARSCHAP/perl-ldap-0.44.tar.gz">perl-ldap-0.44.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=Net%3A%3ALDAP;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~MARSCHAP/perl-ldap-0.44/lib/Net/LDAP.pod">Annotate this POD
(1)
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?Win32%3A%3AOLE">Win32::OLE</a><br>
<a href="/perldoc?Data%3A%3ASync">Data::Sync</a><br>
<a href="/perldoc?Class%3A%3ADBI">Class::DBI</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?Win32%3A%3ANetAdmin">Win32::NetAdmin</a><br>
<a href="/perldoc?CGI%3A%3AApplication">CGI::Application</a><br>
<a href="/perldoc?Date%3A%3AManip">Date::Manip</a><br>
<a href="/perldoc?Module%3A%3ABuild">Module::Build</a><br>
<a href="/perldoc?DBD%3A%3AODBC">DBD::ODBC</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=Net%3A%3ALDAP">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 3</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 4</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 1</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=perl-ldap">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
  Module Version:  0.44 &nbsp;
<span class="noprint">
  <a href="/src/MARSCHAP/perl-ldap-0.44/lib/Net/LDAP.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#CONSTRUCTOR'>CONSTRUCTOR</a>
  <li class='indexItem indexItem1'><a href='#METHODS'>METHODS</a>
  <li class='indexItem indexItem1'><a href='#CONTROLS'>CONTROLS</a>
  <li class='indexItem indexItem1'><a href='#CALLBACKS'>CALLBACKS</a>
  <li class='indexItem indexItem1'><a href='#LDAP_ERROR_CODES'>LDAP ERROR CODES</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#ACKNOWLEDGEMENTS'>ACKNOWLEDGEMENTS</a>
  <li class='indexItem indexItem1'><a href='#MAILING_LIST'>MAILING LIST</a>
  <li class='indexItem indexItem1'><a href='#BUGS'>BUGS</a>
  <li class='indexItem indexItem1'><a href='#AUTHOR'>AUTHOR</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Net::LDAP - Lightweight Directory Access Protocol</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> use Net::LDAP;

 $ldap = Net::LDAP-&#62;new( &#39;ldap.bigfoot.com&#39; ) or die &#34;$@&#34;;

 $mesg = $ldap-&#62;bind ;    # an anonymous bind

 $mesg = $ldap-&#62;search( # perform a search
                        base   =&#62; &#34;c=US&#34;,
                        filter =&#62; &#34;(&#38;(sn=Barr) (o=Texas Instruments))&#34;
                      );

 $mesg-&#62;code &#38;&#38; die $mesg-&#62;error;

 foreach $entry ($mesg-&#62;entries) { $entry-&#62;dump; }

 $mesg = $ldap-&#62;unbind;   # take down session


 $ldap = Net::LDAP-&#62;new( &#39;ldap.umich.edu&#39; );

 # bind to a directory with dn and password
 $mesg = $ldap-&#62;bind( &#39;cn=root, o=University of Michigan, c=us&#39;,
                      password =&#62; &#39;secret&#39;
                    );

 $result = $ldap-&#62;add( &#39;cn=Barbara Jensen, o=University of Michigan, c=US&#39;,
                       attr =&#62; [
                         &#39;cn&#39;   =&#62; [&#39;Barbara Jensen&#39;, &#39;Barbs Jensen&#39;],
                         &#39;sn&#39;   =&#62; &#39;Jensen&#39;,
                         &#39;mail&#39; =&#62; &#39;b.jensen@umich.edu&#39;,
                         &#39;objectclass&#39; =&#62; [&#39;top&#39;, &#39;person&#39;,
                                           &#39;organizationalPerson&#39;,
                                           &#39;inetOrgPerson&#39; ],
                       ]
                     );

 $result-&#62;code &#38;&#38; warn &#34;failed to add entry: &#34;, $result-&#62;error ;
 $mesg = $ldap-&#62;unbind;  # take down session</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>Net::LDAP</b> is a collection of modules that implements a LDAP services API for Perl programs. The module may be used to search directories or perform maintenance functions such as adding, deleting or modifying entries.</p>

<p>This document assumes that the reader has some knowledge of the LDAP protocol.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONSTRUCTOR"
>CONSTRUCTOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<dl>
<dt><a name='new'></a><a name="new_(_HOST,_OPTIONS_)"
>new ( HOST, OPTIONS )</a></dt>

<dd>
<p>Creates a new <b>Net::LDAP</b> object and opens a connection to the named host.</p>

<p><code>HOST</code> may be a host name or an IP number. TCP port may be specified after the host name followed by a colon (such as localhost:10389). The default TCP port for LDAP is 389.</p>

<p>You can also specify a URI, such as &#39;<a href="ldaps://127.0.0.1:666" class="podlinkurl"
>ldaps://127.0.0.1:666</a>&#39; or &#39;<a href="ldapi://%2fvar%2flib%2fldap_sock" class="podlinkurl"
>ldapi://%2fvar%2flib%2fldap_sock</a>&#39;. Note that &#39;%2f&#39;s in the LDAPI socket path will be translated into &#39;/&#39;. This is to support LDAP query options like base, search etc. although the query part of the URI will be ignored in this context. If port was not specified in the URI, the default is either 389 or 636 for &#39;LDAP&#39; and &#39;LDAPS&#39; schemes respectively.</p>

<p><code>HOST</code> may also be a reference to an array of hosts, host-port pairs or URIs to try. Each will be tried in order until a connection is made. Only when all have failed will the result of <code>undef</code> be returned.</p>

<dl>
<dt><a name='port'></a><a name="port_=&#62;_N"
>port =&#62; N</a></dt>

<dd>
<p>Port to connect to on the remote server. May be overridden by <code>HOST</code>.</p>

<dt><a name='scheme'></a><a name="scheme_=&#62;_&#39;ldap&#39;_|_&#39;ldaps&#39;_|_&#39;ldapi&#39;"
>scheme =&#62; &#39;ldap&#39; | &#39;ldaps&#39; | &#39;ldapi&#39;</a></dt>

<dd>
<p>Connection scheme to use when not using an URI as <code>HOST</code>. (Default: ldap)</p>

<dt><a name='timeout'></a><a name="timeout_=&#62;_N"
>timeout =&#62; N</a></dt>

<dd>
<p>Timeout passed to <a href="/perldoc?IO%3A%3ASocket" class="podlinkpod"
>IO::Socket</a> when connecting the remote server. (Default: 120)</p>

<dt><a name='multihomed'></a><a name="multihomed_=&#62;_N"
>multihomed =&#62; N</a></dt>

<dd>
<p>Will be passed to <a href="/perldoc?IO%3A%3ASocket" class="podlinkpod"
>IO::Socket</a> as the <code>MultiHomed</code> parameter when connecting to the remote server</p>

<dt><a name='localaddr'></a><a name="localaddr_=&#62;_HOST"
>localaddr =&#62; HOST</a></dt>

<dd>
<p>Will be passed to <a href="/perldoc?IO%3A%3ASocket" class="podlinkpod"
>IO::Socket</a> as the <code>LocalAddr</code> parameter, which sets the client&#39;s IP address (as opposed to the server&#39;s IP address.)</p>

<dt><a name='debug'></a><a name="debug_=&#62;_N"
>debug =&#62; N</a></dt>

<dd>
<p>Set the debug level. See the <a href="#debug" class="podlinkpod"
>debug</a> method for details.</p>

<dt><a name='async'></a><a name="async_=&#62;_1"
>async =&#62; 1</a></dt>

<dd>
<p>Perform all operations asynchronously.</p>

<dt><a name='onerror'></a><a name="onerror_=&#62;_&#39;die&#39;_|_&#39;warn&#39;_|_undef_|_sub_{_..._}"
>onerror =&#62; &#39;die&#39; | &#39;warn&#39; | undef | sub { ... }</a></dt>

<dd>
<p>In synchronous mode, change what happens when an error is detected.</p>

<dl>
<dt><a name='die'></a><a name="&#39;die&#39;"
>&#39;die&#39;</a></dt>

<dd>
<p>Net::LDAP will croak whenever an error is detected.</p>

<dt><a name='warn'></a><a name="&#39;warn&#39;"
>&#39;warn&#39;</a></dt>

<dd>
<p>Net::LDAP will warn whenever an error is detected.</p>

<dt><a name="undef"
>undef</a></dt>

<dd>
<p>Net::LDAP will warn whenever an error is detected and <code>-w</code> is in effect. The method that was called will return <code>undef</code>.</p>

<dt><a name='sub'></a><a name="sub_{_..._}"
>sub { ... }</a></dt>

<dd>
<p>The given sub will be called in a scalar context with a single argument, the result message. The value returned will be the return value for the method that was called.</p>
</dd>
</dl>

<dt><a name='version'></a><a name="version_=&#62;_N"
>version =&#62; N</a></dt>

<dd>
<p>Set the protocol version being used (default is LDAPv3). This is useful if you want to talk to an old server and therefore have to use LDAPv2.</p>

<dt><a name='raw'></a><a name="raw_=&#62;_REGEX"
>raw =&#62; REGEX</a></dt>

<dd>
<p>Use REGEX to denote the names of attributes that are to be considered binary in search results.</p>

<p>When running on Perl 5.8 and this option is given Net::LDAP converts all values of attributes not matching this REGEX into Perl UTF-8 strings so that the regular Perl operators (pattern matching, ...) can operate as one expects even on strings with international characters.</p>

<p>If this option is not given or the version of Perl Net::LDAP is running on is too old strings are encoded the same as in earlier versions of perl-ldap.</p>

<p>Example: raw =&#62; qr/(?i:^jpegPhoto|;binary)/</p>

<dt><a name='inet6'></a><a name="inet6_=&#62;_N"
>inet6 =&#62; N</a></dt>

<dd>
<p>Try to connect to the server using IPv6 if <code>HOST</code> resolves to an IPv6 target address. If it resolves to an IPv4 address, the connection is tried using IPv4, the same way as if this option was not given.</p>

<p>Please note that IPv6 support is considered experimental in IO::Socket::SSL, which is used of SSL/TLS support, and there are a few issues to take care of. See <a href="/perldoc?IO%3A%3ASocket%3A%3ASSL#IPv6" class="podlinkpod"
>&#34;IPv6&#34; in IO::Socket::SSL</a> for details.</p>
</dd>
</dl>

<p><b>Example</b></p>

<pre class="sh_perl">  $ldap = Net::LDAP-&#62;new( &#39;remote.host&#39;, async =&#62; 1 );</pre>

<p>LDAPS connections have some extra valid options, see the <a href="#start_tls" class="podlinkpod"
>start_tls</a> method for details. Note the default value for &#39;sslversion&#39; for LDAPS is &#39;sslv2/3&#39;, and the default port for LDAPS is 636.</p>

<p>For LDAPI connections, HOST is actually the location of a UNIX domain socket to connect to. The default location is &#39;/var/run/ldapi&#39;.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="METHODS"
>METHODS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Each of the following methods take as arguments some number of fixed parameters followed by options, these options are passed in a named fashion, for example</p>

<pre class="sh_perl">  $mesg = $ldap-&#62;bind( &#34;cn=me,o=example&#34;, password =&#62; &#34;mypasswd&#34;);</pre>

<p>The return value from these methods is an object derived from the <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Message.pod" class="podlinkpod"
>Net::LDAP::Message</a> class. The methods of this class allow you to examine the status of the request.</p>

<dl>
<dt><a name='abandon'></a><a name="abandon_(_ID,_OPTIONS_)"
>abandon ( ID, OPTIONS )</a></dt>

<dd>
<p>Abandon a previously issued request. <code>ID</code> may be a number or an object which is a sub-class of <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Message.pod" class="podlinkpod"
>Net::LDAP::Message</a>, returned from a previous method call.</p>

<dl>
<dt><a name='control'></a><a name="control_=&#62;_CONTROL"
>control =&#62; CONTROL</a></dt>

<dd>
<dt><a name='control'></a><a name="control_=&#62;_[_CONTROL,_..._]"
>control =&#62; [ CONTROL, ... ]</a></dt>

<dd>
<p>See <a href="#CONTROLS" class="podlinkpod"
>&#34;CONTROLS&#34;</a> below</p>

<dt><a name='callback'></a><a name="callback_=&#62;_CALLBACK"
>callback =&#62; CALLBACK</a></dt>

<dd>
<p>See <a href="#CALLBACKS" class="podlinkpod"
>&#34;CALLBACKS&#34;</a> below</p>
</dd>
</dl>

<p><b>Example</b></p>

<pre class="sh_perl">  $res = $ldap-&#62;search( @search_args );

  $mesg = $ldap-&#62;abandon( $res ); # This could be written as $res-&#62;abandon</pre>

<dt><a name='add'></a><a name="add_(_DN,_OPTIONS_)"
>add ( DN, OPTIONS )</a></dt>

<dd>
<p>Add a new entry to the directory. <code>DN</code> can be either a <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Entry.pod" class="podlinkpod"
>Net::LDAP::Entry</a> object or a string.</p>

<dl>
<dt><a name='attrs'></a><a name="attrs_=&#62;_[_ATTR_=&#62;_VALUE,_..._]"
>attrs =&#62; [ ATTR =&#62; VALUE, ... ]</a></dt>

<dd>
<p><code>VALUE</code> should be a string if only a single value is wanted, or a reference to an array of strings if multiple values are wanted.</p>

<p>This argument is not used if <code>DN</code> is a <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Entry.pod" class="podlinkpod"
>Net::LDAP::Entry</a> object.</p>

<dt><a name='control'></a><a name="control_=&#62;_CONTROL"
>control =&#62; CONTROL</a></dt>

<dd>
<dt><a name='control'></a><a name="control_=&#62;_[_CONTROL,_..._]"
>control =&#62; [ CONTROL, ... ]</a></dt>

<dd>
<p>See <a href="#CONTROLS" class="podlinkpod"
>&#34;CONTROLS&#34;</a> below</p>

<dt><a name='callback'></a><a name="callback_=&#62;_CALLBACK"
>callback =&#62; CALLBACK</a></dt>

<dd>
<p>See <a href="#CALLBACKS" class="podlinkpod"
>&#34;CALLBACKS&#34;</a> below</p>
</dd>
</dl>

<p><b>Example</b></p>

<pre class="sh_perl">  # $entry is an object of class Net::LDAP::Entry
  $mesg = $ldap-&#62;add( $entry );

  $mesg = $ldap-&#62;add( $dn,
                      attrs =&#62; [
                        name  =&#62; &#39;Graham Barr&#39;,
                        attr  =&#62; &#39;value1&#39;,
                        attr  =&#62; &#39;value2&#39;,
                        multi =&#62; [qw(value1 value2)]
                      ]
                    );</pre>

<dt><a name='bind'></a><a name="bind_(_DN,_OPTIONS_)"
>bind ( DN, OPTIONS )</a></dt>

<dd>
<p>Bind (log in) to the server. <code>DN</code> is the DN to bind with. An anonymous bind may be done by calling bind without any arguments.</p>

<dl>
<dt><a name='control'></a><a name="control_=&#62;_CONTROL"
>control =&#62; CONTROL</a></dt>

<dd>
<dt><a name='control'></a><a name="control_=&#62;_[_CONTROL,_..._]"
>control =&#62; [ CONTROL, ... ]</a></dt>

<dd>
<p>See <a href="#CONTROLS" class="podlinkpod"
>&#34;CONTROLS&#34;</a> below</p>

<dt><a name='callback'></a><a name="callback_=&#62;_CALLBACK"
>callback =&#62; CALLBACK</a></dt>

<dd>
<p>See <a href="#CALLBACKS" class="podlinkpod"
>&#34;CALLBACKS&#34;</a> below</p>

<dt><a name='noauth'></a><a name="noauth_|_anonymous_=&#62;_1"
>noauth | anonymous =&#62; 1</a></dt>

<dd>
<p>Bind without any password. The value passed with this option is ignored.</p>

<dt><a name='password'></a><a name="password_=&#62;_PASSWORD"
>password =&#62; PASSWORD</a></dt>

<dd>
<p>Bind with the given password.</p>

<dt><a name='sasl'></a><a name="sasl_=&#62;_SASLOBJ"
>sasl =&#62; SASLOBJ</a></dt>

<dd>
<p>Bind using a SASL mechanism. The argument given should be a sub-class of <a href="/perldoc?Authen%3A%3ASASL" class="podlinkpod"
>Authen::SASL</a> or an <a href="/perldoc?Authen%3A%3ASASL" class="podlinkpod"
>Authen::SASL</a> client connection by calling <code>client_new</code> on an <a href="/perldoc?Authen%3A%3ASASL" class="podlinkpod"
>Authen::SASL</a> object.</p>

<p>If passed an <a href="/perldoc?Authen%3A%3ASASL" class="podlinkpod"
>Authen::SASL</a> object then <code>client_new</code> will be called to create a client connection object. The hostname passed by <code>Net::LDAP</code> to <code>client_new</code> is the result of calling <code>peerhost</code> on the socket. If this is not correct for your environment, consider calling <code>client_new</code> and passing the client connection object.</p>
</dd>
</dl>

<p><b>Example</b></p>

<pre class="sh_perl">  $mesg = $ldap-&#62;bind; # Anonymous bind

  $mesg = $ldap-&#62;bind( $dn, password =&#62; $password );

  # $sasl is an object of class Authen::SASL
  $mesg = $ldap-&#62;bind( $dn, sasl =&#62; $sasl, version =&#62; 3 );</pre>

<dt><a name='compare'></a><a name="compare_(_DN,_OPTIONS_)"
>compare ( DN, OPTIONS )</a></dt>

<dd>
<p>Compare values in an attribute in the entry given by <code>DN</code> on the server. <code>DN</code> may be a string or a <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Entry.pod" class="podlinkpod"
>Net::LDAP::Entry</a> object.</p>

<dl>
<dt><a name='attr'></a><a name="attr_=&#62;_ATTR"
>attr =&#62; ATTR</a></dt>

<dd>
<p>The name of the attribute to compare.</p>

<dt><a name='value'></a><a name="value_=&#62;_VALUE"
>value =&#62; VALUE</a></dt>

<dd>
<p>The value to compare with.</p>

<dt><a name='control'></a><a name="control_=&#62;_CONTROL"
>control =&#62; CONTROL</a></dt>

<dd>
<dt><a name='control'></a><a name="control_=&#62;_[_CONTROL,_..._]"
>control =&#62; [ CONTROL, ... ]</a></dt>

<dd>
<p>See <a href="#CONTROLS" class="podlinkpod"
>&#34;CONTROLS&#34;</a> below.</p>

<dt><a name='callback'></a><a name="callback_=&#62;_CALLBACK"
>callback =&#62; CALLBACK</a></dt>

<dd>
<p>See <a href="#CALLBACKS" class="podlinkpod"
>&#34;CALLBACKS&#34;</a> below.</p>
</dd>
</dl>

<p><b>Example</b></p>

<pre class="sh_perl">  $mesg = $ldap-&#62;compare( $dn,
                          attr  =&#62; &#39;cn&#39;,
                          value =&#62; &#39;Graham Barr&#39;
                        );</pre>

<dt><a name='delete'></a><a name="delete_(_DN,_OPTIONS_)"
>delete ( DN, OPTIONS )</a></dt>

<dd>
<p>Delete the entry given by <code>DN</code> from the server. <code>DN</code> may be a string or a <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Entry.pod" class="podlinkpod"
>Net::LDAP::Entry</a> object.</p>

<dl>
<dt><a name='control'></a><a name="control_=&#62;_CONTROL"
>control =&#62; CONTROL</a></dt>

<dd>
<dt><a name='control'></a><a name="control_=&#62;_[_CONTROL,_..._]"
>control =&#62; [ CONTROL, ... ]</a></dt>

<dd>
<p>See <a href="#CONTROLS" class="podlinkpod"
>&#34;CONTROLS&#34;</a> below.</p>

<dt><a name='callback'></a><a name="callback_=&#62;_CALLBACK"
>callback =&#62; CALLBACK</a></dt>

<dd>
<p>See <a href="#CALLBACKS" class="podlinkpod"
>&#34;CALLBACKS&#34;</a> below.</p>
</dd>
</dl>

<p><b>Example</b></p>

<pre class="sh_perl"> $mesg = $ldap-&#62;delete( $dn );</pre>

<dt><a name='moddn'></a><a name="moddn_(_DN,_OPTIONS_)"
>moddn ( DN, OPTIONS )</a></dt>

<dd>
<p>Rename the entry given by <code>DN</code> on the server. <code>DN</code> may be a string or a <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Entry.pod" class="podlinkpod"
>Net::LDAP::Entry</a> object.</p>

<dl>
<dt><a name='newrdn'></a><a name="newrdn_=&#62;_RDN"
>newrdn =&#62; RDN</a></dt>

<dd>
<p>This value should be a new RDN to assign to <code>DN</code>.</p>

<dt><a name='deleteoldrdn'></a><a name="deleteoldrdn_=&#62;_1"
>deleteoldrdn =&#62; 1</a></dt>

<dd>
<p>This option should be passed if the existing RDN is to be deleted.</p>

<dt><a name='newsuperior'></a><a name="newsuperior_=&#62;_NEWDN"
>newsuperior =&#62; NEWDN</a></dt>

<dd>
<p>If given this value should be the DN of the new superior for <code>DN</code>.</p>

<dt><a name='control'></a><a name="control_=&#62;_CONTROL"
>control =&#62; CONTROL</a></dt>

<dd>
<dt><a name='control'></a><a name="control_=&#62;_[_CONTROL,_..._]"
>control =&#62; [ CONTROL, ... ]</a></dt>

<dd>
<p>See <a href="#CONTROLS" class="podlinkpod"
>&#34;CONTROLS&#34;</a> below.</p>

<dt><a name='callback'></a><a name="callback_=&#62;_CALLBACK"
>callback =&#62; CALLBACK</a></dt>

<dd>
<p>See <a href="#CALLBACKS" class="podlinkpod"
>&#34;CALLBACKS&#34;</a> below.</p>
</dd>
</dl>

<p><b>Example</b></p>

<pre class="sh_perl"> $mesg = $ldap-&#62;moddn( $dn, newrdn =&#62; &#39;cn=Graham Barr&#39; );</pre>

<dt><a name='modify'></a><a name="modify_(_DN,_OPTIONS_)"
>modify ( DN, OPTIONS )</a></dt>

<dd>
<p>Modify the contents of the entry given by <code>DN</code> on the server. <code>DN</code> may be a string or a <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Entry.pod" class="podlinkpod"
>Net::LDAP::Entry</a> object.</p>

<dl>
<dt><a name='add'></a><a name="add_=&#62;_{_ATTR_=&#62;_VALUE,_..._}"
>add =&#62; { ATTR =&#62; VALUE, ... }</a></dt>

<dd>
<p>Add more attributes or values to the entry. <code>VALUE</code> should be a string if only a single value is wanted in the attribute, or a reference to an array of strings if multiple values are wanted.</p>

<pre class="sh_perl">  $mesg = $ldap-&#62;modify( $dn,
    add =&#62; {
      description =&#62; &#39;List of members&#39;,    # Add description attribute
      member      =&#62; [
        &#39;cn=member1,ou=people,dc=example,dc=com&#39;,    # Add to attribute
        &#39;cn=member2,ou=people,dc=example,dc=com&#39;,
      ]
    }
  );</pre>

<dt><a name='delete'></a><a name="delete_=&#62;_[_ATTR,_..._]"
>delete =&#62; [ ATTR, ... ]</a></dt>

<dd>
<p>Delete complete attributes from the entry.</p>

<pre class="sh_perl">  $mesg = $ldap-&#62;modify( $dn,
    delete =&#62; [&#39;member&#39;,&#39;description&#39;] # Delete attributes
  );</pre>

<dt><a name='delete'></a><a name="delete_=&#62;_{_ATTR_=&#62;_VALUE,_..._}"
>delete =&#62; { ATTR =&#62; VALUE, ... }</a></dt>

<dd>
<p>Delete individual values from an attribute. <code>VALUE</code> should be a string if only a single value is being deleted from the attribute, or a reference to an array of strings if multiple values are being deleted.</p>

<p>If <code>VALUE</code> is a reference to an empty array or all existing values of the attribute are being deleted, then the attribute will be deleted from the entry.</p>

<pre class="sh_perl">  $mesg = $ldap-&#62;modify( $dn,
    delete =&#62; {
      description =&#62; &#39;List of members&#39;,
      member      =&#62; [
        &#39;cn=member1,ou=people,dc=example,dc=com&#39;,    # Remove members
        &#39;cn=member2,ou=people,dc=example,dc=com&#39;,
      ],
      seeAlso =&#62; [],   # Remove attribute
    }
  );</pre>

<dt><a name='replace'></a><a name="replace_=&#62;_{_ATTR_=&#62;_VALUE,_..._}"
>replace =&#62; { ATTR =&#62; VALUE, ... }</a></dt>

<dd>
<p>Replace any existing values in each given attribute with <code>VALUE</code>. <code>VALUE</code> should be a string if only a single value is wanted in the attribute, or a reference to an array of strings if multiple values are wanted. A reference to an empty array will remove the entire attribute. If the attribute does not already exist in the entry, it will be created.</p>

<pre class="sh_perl">  $mesg = $ldap-&#62;modify( $dn,
    replace =&#62; {
      description =&#62; &#39;New List of members&#39;, # Change the description
      member      =&#62; [ # Replace whole list with these
        &#39;cn=member1,ou=people,dc=example,dc=com&#39;,   
        &#39;cn=member2,ou=people,dc=example,dc=com&#39;,
      ],
      seeAlso =&#62; [],   # Remove attribute
    }
  );</pre>

<dt><a name='increment'></a><a name="increment_=&#62;_{_ATTR_=&#62;_VALUE,_..._}"
>increment =&#62; { ATTR =&#62; VALUE, ... }</a></dt>

<dd>
<p>Atomically increment the existing value in each given attribute by the provided <code>VALUE</code>. The attributes need to have integer syntax, or be otherwise &#34;incrementable&#34;. Note this will only work if the server advertizes support for LDAP_FEATURE_MODIFY_INCREMENT. Use <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/RootDSE.pm#supported_feature" class="podlinkpod"
>&#34;supported_feature&#34; in Net::LDAP::RootDSE</a> to check this.</p>

<pre class="sh_perl">  $mesg = $ldap-&#62;modify( $dn,
    increment =&#62; {
      uidNumber =&#62; 1 # increment uidNumber by 1
    }
  );</pre>

<dt><a name='changes'></a><a name="changes_=&#62;_[_OP_=&#62;_[_ATTR_=&#62;_VALUE_],_..._]"
>changes =&#62; [ OP =&#62; [ ATTR =&#62; VALUE ], ... ]</a></dt>

<dd>
<p>This is an alternative to <b>add</b>, <b>delete</b>, <b>replace</b> and <b>increment</b> where the whole operation can be given in a single argument. <code>OP</code> should be <b>add</b>, <b>delete</b>, <b>replace</b> or <b>increment</b>. <code>VALUE</code> should be either a string or a reference to an array of strings, as before.</p>

<p>Use this form if you want to control the order in which the operations will be performed.</p>

<pre class="sh_perl">  $mesg = $ldap-&#62;modify( $dn,
    changes =&#62; [
      add =&#62; [
        description =&#62; &#39;A description&#39;,
        member      =&#62; $newMember,
      ],
      delete =&#62; [
        seeAlso =&#62; [],
      ],
      add =&#62; [
        anotherAttribute =&#62; $value,
      ],
    ]
  );</pre>

<dt><a name='control'></a><a name="control_=&#62;_CONTROL"
>control =&#62; CONTROL</a></dt>

<dd>
<dt><a name='control'></a><a name="control_=&#62;_[_CONTROL,_..._]"
>control =&#62; [ CONTROL, ... ]</a></dt>

<dd>
<p>See <a href="#CONTROLS" class="podlinkpod"
>&#34;CONTROLS&#34;</a> below.</p>

<dt><a name='callback'></a><a name="callback_=&#62;_CALLBACK"
>callback =&#62; CALLBACK</a></dt>

<dd>
<p>See <a href="#CALLBACKS" class="podlinkpod"
>&#34;CALLBACKS&#34;</a> below.</p>
</dd>
</dl>

<p><b>Example</b></p>

<pre class="sh_perl"> $mesg = $ldap-&#62;modify( $dn, add =&#62; { sn =&#62; &#39;Barr&#39; } );

 $mesg = $ldap-&#62;modify( $dn, delete =&#62; [qw(faxNumber)] );

 $mesg = $ldap-&#62;modify( $dn, delete =&#62; { &#39;telephoneNumber&#39; =&#62; &#39;911&#39; } );

 $mesg = $ldap-&#62;modify( $dn, replace =&#62; { &#39;mail&#39; =&#62; &#39;gbarr@pobox.com&#39; } );

 $mesg = $ldap-&#62;modify( $dn,
                        changes =&#62; [
                            # add sn=Barr
                          add     =&#62; [ sn =&#62; &#39;Barr&#39; ],
                            # delete all fax numbers
                          delete  =&#62; [ faxNumber =&#62; []],
                            # delete phone number 911
                          delete  =&#62; [ telephoneNumber =&#62; [&#39;911&#39;]],
                            # change email address
                          replace =&#62; [ mail =&#62; &#39;gbarr@pobox.com&#39;]
                        ]
                      );</pre>

<dt><a name='search'></a><a name="search_(_OPTIONS_)"
>search ( OPTIONS )</a></dt>

<dd>
<p>Search the directory using a given filter. This can be used to read attributes from a single entry, from entries immediately below a particular entry, or a whole subtree of entries.</p>

<p>The result is an object of class <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Search.pod" class="podlinkpod"
>Net::LDAP::Search</a>.</p>

<dl>
<dt><a name='base'></a><a name="base_=&#62;_DN"
>base =&#62; DN</a></dt>

<dd>
<p>The DN that is the base object entry relative to which the search is to be performed.</p>

<dt><a name='scope'></a><a name="scope_=&#62;_&#39;base&#39;_|_&#39;one&#39;_|_&#39;sub&#39;"
>scope =&#62; &#39;base&#39; | &#39;one&#39; | &#39;sub&#39;</a></dt>

<dd>
<p>By default the search is performed on the whole tree below the specified base object. This maybe changed by specifying a <code>scope</code> parameter with one of the following values:</p>

<dl>
<dt><a name="base"
>base</a></dt>

<dd>
<p>Search only the base object.</p>

<dt><a name="one"
>one</a></dt>

<dd>
<p>Search the entries immediately below the base object.</p>

<dt><a name="sub"
>sub</a></dt>

<dd>
<p>Search the whole tree below (and including) the base object. This is the default.</p>
</dd>
</dl>

<dt><a name='deref'></a><a name="deref_=&#62;_&#39;never&#39;_|_&#39;search&#39;_|_&#39;find&#39;_|_&#39;always&#39;"
>deref =&#62; &#39;never&#39; | &#39;search&#39; | &#39;find&#39; | &#39;always&#39;</a></dt>

<dd>
<p>By default aliases are dereferenced to locate the base object for the search, but not when searching subordinates of the base object. This may be changed by specifying a <code>deref</code> parameter with one of the following values:</p>

<dl>
<dt><a name="never"
>never</a></dt>

<dd>
<p>Do not dereference aliases in searching or in locating the base object of the search.</p>

<dt><a name="search"
>search</a></dt>

<dd>
<p>Dereference aliases in subordinates of the base object in searching, but not in locating the base object of the search.</p>

<dt><a name="find"
>find</a></dt>

<dd>
<p>Dereference aliases in locating the base object of the search, but not when searching subordinates of the base object. This is the default.</p>

<dt><a name="always"
>always</a></dt>

<dd>
<p>Dereference aliases both in searching and in locating the base object of the search.</p>
</dd>
</dl>

<dt><a name='sizelimit'></a><a name="sizelimit_=&#62;_N"
>sizelimit =&#62; N</a></dt>

<dd>
<p>A sizelimit that restricts the maximum number of entries to be returned as a result of the search. A value of 0, and the default, means that no restriction is requested. Servers may enforce a maximum number of entries to return.</p>

<dt><a name='timelimit'></a><a name="timelimit_=&#62;_N"
>timelimit =&#62; N</a></dt>

<dd>
<p>A timelimit that restricts the maximum time (in seconds) allowed for a search. A value of 0 (the default), means that no timelimit will be requested.</p>

<dt><a name='typesonly'></a><a name="typesonly_=&#62;_1"
>typesonly =&#62; 1</a></dt>

<dd>
<p>Only attribute types (no values) should be returned. Normally attribute types and values are returned.</p>

<dt><a name='filter'></a><a name="filter_=&#62;_FILTER"
>filter =&#62; FILTER</a></dt>

<dd>
<p>A filter that defines the conditions an entry in the directory must meet in order for it to be returned by the search. This may be a string or a <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Filter.pod" class="podlinkpod"
>Net::LDAP::Filter</a> object. Values inside filters may need to be escaped to avoid security problems; see <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Filter.pod" class="podlinkpod"
>Net::LDAP::Filter</a> for a definition of the filter format, including the escaping rules.</p>

<dt><a name='attrs'></a><a name="attrs_=&#62;_[_ATTR,_..._]"
>attrs =&#62; [ ATTR, ... ]</a></dt>

<dd>
<p>A list of attributes to be returned for each entry that matches the search filter.</p>

<p>If not specified, then the server will return the attributes that are specified as accessible by default given your bind credentials.</p>

<p>Certain additional attributes such as &#34;createTimestamp&#34; and other operational attributes may also be available for the asking:</p>

<pre class="sh_perl">  $mesg = $ldap-&#62;search( ... ,
                         attrs =&#62; [&#39;createTimestamp&#39;]
                       );</pre>

<p>To retrieve the default attributes and additional ones, use &#39;*&#39;.</p>

<pre class="sh_perl">  $mesg = $ldap-&#62;search( ... ,
                         attrs =&#62; [&#39;*&#39;, &#39;createTimestamp&#39;]
                       );</pre>

<p>To retrieve no attributes (the server only returns the DNs of matching entries), use &#39;1.1&#39;:</p>

<pre class="sh_perl">  $mesg = $ldap-&#62;search( ... ,
                         attrs =&#62; [&#39;1.1&#39;]
                       );</pre>

<dt><a name='control'></a><a name="control_=&#62;_CONTROL"
>control =&#62; CONTROL</a></dt>

<dd>
<dt><a name='control'></a><a name="control_=&#62;_[_CONTROL,_..._]"
>control =&#62; [ CONTROL, ... ]</a></dt>

<dd>
<p>See <a href="#CONTROLS" class="podlinkpod"
>&#34;CONTROLS&#34;</a> below.</p>

<dt><a name='callback'></a><a name="callback_=&#62;_CALLBACK"
>callback =&#62; CALLBACK</a></dt>

<dd>
<p>See <a href="#CALLBACKS" class="podlinkpod"
>&#34;CALLBACKS&#34;</a> below.</p>

<dt><a name='raw'></a><a name="raw_=&#62;_REGEX"
>raw =&#62; REGEX</a></dt>

<dd>
<p>Use REGEX to denote the names of attributes that are to be considered binary in search results.</p>

<p>When running on Perl 5.8 and this option is given Net::LDAP converts all values of attributes not matching this REGEX into Perl UTF-8 strings so that the regular Perl operators (pattern matching, ...) can operate as one expects even on strings with international characters.</p>

<p>If this option is not given or the version of Perl Net::LDAP is running on is too old strings are encodeed the same as in earlier versions of perl-ldap.</p>

<p>The value provided here overwrites the value inherited from the constructor.</p>

<p>Example: raw =&#62; qr/(?i:^jpegPhoto|;binary)/</p>
</dd>
</dl>

<p><b>Example</b></p>

<pre class="sh_perl"> $mesg = $ldap-&#62;search(
                        base   =&#62; $base_dn,
                        scope  =&#62; &#39;sub&#39;,
                        filter =&#62; &#39;(|(objectclass=rfc822mailgroup)(sn=jones))&#39;
                      );

 Net::LDAP::LDIF-&#62;new( \*STDOUT,&#34;w&#34; )-&#62;write( $mesg-&#62;entries );</pre>

<dt><a name='start_tls'></a><a name="start_tls_(_OPTIONS_)"
>start_tls ( OPTIONS )</a></dt>

<dd>
<p>Calling this method will convert the existing connection to using Transport Layer Security (TLS), which provides an encrypted connection. This is <i>only</i> possible if the connection uses LDAPv3, and requires that the server advertizes support for LDAP_EXTENSION_START_TLS. Use <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/RootDSE.pm#supported_extension" class="podlinkpod"
>&#34;supported_extension&#34; in Net::LDAP::RootDSE</a> to check this.</p>

<dl>
<dt><a name='verify'></a><a name="verify_=&#62;_&#39;none&#39;_|_&#39;optional&#39;_|_&#39;require&#39;"
>verify =&#62; &#39;none&#39; | &#39;optional&#39; | &#39;require&#39;</a></dt>

<dd>
<p>How to verify the server&#39;s certificate:</p>

<dl>
<dt><a name="none"
>none</a></dt>

<dd>
<p>The server may provide a certificate but it will not be checked - this may mean you are be connected to the wrong server</p>

<dt><a name="optional"
>optional</a></dt>

<dd>
<p>Verify only when the server offers a certificate</p>

<dt><a name="require"
>require</a></dt>

<dd>
<p>The server must provide a certificate, and it must be valid.</p>
</dd>
</dl>

<p>If you set verify to optional or require, you must also set either cafile or capath. The most secure option is <b>require</b>.</p>

<dt><a name='sslversion'></a><a name="sslversion_=&#62;_&#39;sslv2&#39;_|_&#39;sslv3&#39;_|_&#39;sslv2/3&#39;_|_&#39;tlsv1&#39;"
>sslversion =&#62; &#39;sslv2&#39; | &#39;sslv3&#39; | &#39;sslv2/3&#39; | &#39;tlsv1&#39;</a></dt>

<dd>
<p>This defines the version of the SSL/TLS protocol to use. Defaults to <b>&#39;tlsv1&#39;</b>.</p>

<dt><a name='ciphers'></a><a name="ciphers_=&#62;_CIPHERS"
>ciphers =&#62; CIPHERS</a></dt>

<dd>
<p>Specify which subset of cipher suites are permissible for this connection, using the standard OpenSSL string format. The default value is <b>&#39;ALL&#39;</b>, which permits all ciphers, even those that don&#39;t encrypt.</p>

<dt><a name='clientcert'></a><a name="clientcert_=&#62;_&#39;/path/to/cert.pem&#39;"
>clientcert =&#62; &#39;/path/to/cert.pem&#39;</a></dt>

<dd>
<dt><a name='clientkey'></a><a name="clientkey_=&#62;_&#39;/path/to/key.pem&#39;"
>clientkey =&#62; &#39;/path/to/key.pem&#39;</a></dt>

<dd>
<dt><a name='keydecrypt'></a><a name="keydecrypt_=&#62;_sub_{_..._}"
>keydecrypt =&#62; sub { ... }</a></dt>

<dd>
<p>If you want to use the client to offer a certificate to the server for SSL authentication (which is not the same as for the LDAP Bind operation) then set clientcert to the user&#39;s certificate file, and clientkey to the user&#39;s private key file. These files must be in PEM format.</p>

<p>If the private key is encrypted (highly recommended) then keydecrypt should be a subroutine that returns the decrypting key. For example:</p>

<pre class="sh_perl"> $ldap = Net::LDAP-&#62;new( &#39;myhost.example.com&#39;, version =&#62; 3 );
 $mesg = $ldap-&#62;start_tls(
                           verify =&#62; &#39;require&#39;,
                           clientcert =&#62; &#39;mycert.pem&#39;,
                           clientkey =&#62; &#39;mykey.pem&#39;,
                           keydecrypt =&#62; sub { &#39;secret&#39;; },
                           capath =&#62; &#39;/usr/local/cacerts/&#39;
                         );</pre>

<dt><a name='capath'></a><a name="capath_=&#62;_&#39;/path/to/servercerts/&#39;"
>capath =&#62; &#39;/path/to/servercerts/&#39;</a></dt>

<dd>
<dt><a name='cafile'></a><a name="cafile_=&#62;_&#39;/path/to/servercert.pem&#39;"
>cafile =&#62; &#39;/path/to/servercert.pem&#39;</a></dt>

<dd>
<p>When verifying the server&#39;s certificate, either set capath to the pathname of the directory containing CA certificates, or set cafile to the filename containing the certificate of the CA who signed the server&#39;s certificate. These certificates must all be in PEM format.</p>

<p>The directory in &#39;capath&#39; must contain certificates named using the hash value of the certificates&#39; subject names. To generate these names, use OpenSSL like this in Unix:</p>

<pre class="sh_perl">    ln -s cacert.pem `openssl x509 -hash -noout &#60; cacert.pem`.0</pre>

<p>(assuming that the certificate of the CA is in cacert.pem.)</p>

<dt><a name='checkcrl'></a><a name="checkcrl_=&#62;_1"
>checkcrl =&#62; 1</a></dt>

<dd>
<p>If capath has been configured, then it will also be searched for certificate revocation lists (CRLs) when verifying the server&#39;s certificate. The CRLs&#39; names must follow the form <b>hash</b>.r<b>num</b> where <b>hash</b> is the hash over the issuer&#39;s DN and <b>num</b> is a number starting with 0.</p>

<p>See <a href="/perldoc?IO%3A%3ASocket%3A%3ASSL#SSL_check_crl" class="podlinkpod"
>&#34;SSL_check_crl&#34; in IO::Socket::SSL</a> for further information.</p>
</dd>
</dl>

<dt><a name='unbind'></a><a name="unbind_(_)"
>unbind ( )</a></dt>

<dd>
<p>The unbind method does not take any parameters and will unbind you from the server. Some servers may allow you to re-bind or perform other operations after unbinding. If you wish to switch to another set of credentials while continuing to use the same connection, re-binding with another DN and password, without unbind-ing, will generally work.</p>

<p><b>Example</b></p>

<pre class="sh_perl"> $mesg = $ldap-&#62;unbind;</pre>
</dd>
</dl>

<p>The following methods are for convenience, and do not return <code>Net::LDAP::Message</code> objects.</p>

<dl>
<dt><a name='async'></a><a name="async_(_VALUE_)"
>async ( VALUE )</a></dt>

<dd>
<p>If <code>VALUE</code> is given the async mode will be set. The previous value will be returned. The value is <i>true</i> if LDAP operations are being performed asynchronously.</p>

<dt><a name='certificate'></a><a name="certificate_(_)"
>certificate ( )</a></dt>

<dd>
<p>Returns an X509_Certificate object containing the server&#39;s certificate. See the IO::Socket::SSL documentation for information about this class.</p>

<p>For example, to get the subject name (in a peculiar OpenSSL-specific format, different from RFC 1779 and RFC 2253) from the server&#39;s certificate, do this:</p>

<pre class="sh_perl">    print &#34;Subject DN: &#34; . $ldaps-&#62;certificate-&#62;subject_name . &#34;\n&#34;;</pre>

<dt><a name='cipher'></a><a name="cipher_(_)"
>cipher ( )</a></dt>

<dd>
<p>Returns the cipher mode being used by the connection, in the string format used by OpenSSL.</p>

<dt><a name='debug'></a><a name="debug_(_VALUE_)"
>debug ( VALUE )</a></dt>

<dd>
<p>If <code>VALUE</code> is given the debug bit-value will be set. The previous value will be returned. Debug output will be sent to <code>STDERR</code>. The bits of this value are:</p>

<pre class="sh_perl"> 1   Show outgoing packets (using asn_hexdump).
 2   Show incoming packets (using asn_hexdump).
 4   Show outgoing packets (using asn_dump).
 8   Show incoming packets (using asn_dump).</pre>

<p>The default value is 0.</p>

<dt><a name='disconnect'></a><a name="disconnect_(_)"
>disconnect ( )</a></dt>

<dd>
<p>Disconnect from the server</p>

<dt><a name='root_dse'></a><a name="root_dse_(_OPTIONS_)"
>root_dse ( OPTIONS )</a></dt>

<dd>
<p>The root_dse method retrieves cached information from the server&#39;s rootDSE.</p>

<dl>
<dt><a name='attrs'></a><a name="attrs_=&#62;_[_ATTR,_..._]"
>attrs =&#62; [ ATTR, ... ]</a></dt>

<dd>
<p>A reference to a list of attributes to be returned. If not specified, then the following attributes will be requested</p>

<pre class="sh_perl">  subschemaSubentry
  namingContexts
  altServer
  supportedExtension
  supportedFeatures
  supportedControl
  supportedSASLMechanisms
  supportedLDAPVersion</pre>
</dd>
</dl>

<p>The result is an object of class <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/RootDSE.pm" class="podlinkpod"
>Net::LDAP::RootDSE</a>.</p>

<p><b>Example</b></p>

<pre class="sh_perl"> my $root = $ldap-&#62;root_dse;
 # get naming Context
 $root-&#62;get_value( &#39;namingContext&#39;, asref =&#62; 1 );
 # get supported LDAP versions
 $root-&#62;supported_version;</pre>

<p>As the root DSE may change in certain circumstances - for instance when you change the connection using start_tls - you should always use the root_dse method to return the most up-to-date copy of the root DSE.</p>

<dt><a name='schema'></a><a name="schema_(_OPTIONS_)"
>schema ( OPTIONS )</a></dt>

<dd>
<p>Read schema information from the server.</p>

<p>The result is an object of class <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Schema.pod" class="podlinkpod"
>Net::LDAP::Schema</a>. Read this documentation for further information about methods that can be performed with this object.</p>

<dl>
<dt><a name='dn'></a><a name="dn_=&#62;_DN"
>dn =&#62; DN</a></dt>

<dd>
<p>If a DN is supplied, it will become the base object entry from which the search for schema information will be conducted. If no DN is supplied the base object entry will be determined from the rootDSE entry.</p>
</dd>
</dl>

<p><b>Example</b></p>

<pre class="sh_perl"> my $schema = $ldap-&#62;schema;
 # get objectClasses
 @ocs = $schema-&#62;all_objectclasses;
 # Get the attributes
 @atts = $schema-&#62;all_attributes;</pre>

<dt><a name='socket'></a><a name="socket_(_)"
>socket ( )</a></dt>

<dd>
<p>Returns the underlying <code>IO::Socket</code> object being used.</p>

<dt><a name='host'></a><a name="host_(_)"
>host ( )</a></dt>

<dd>
<p>Returns the host to which the connection was established. For LDAPI connections the socket path is returned.</p>

<dt><a name='port'></a><a name="port_(_)"
>port ( )</a></dt>

<dd>
<p>Returns the the port connected to or <code>undef</code> in case of LDAPI connections.</p>

<dt><a name='uri'></a><a name="uri_(_)"
>uri ( )</a></dt>

<dd>
<p>Returns the URI connected to.</p>

<p>As the value returned is that element of the constructor&#39;s HOST argument with which the connection was established this may or may not be a legal URI.</p>

<dt><a name='scheme'></a><a name="scheme_(_)"
>scheme ( )</a></dt>

<dd>
<p>Returns the scheme of the connection. One of <i>ldap</i>, <i>ldaps</i> or <i>ldapi</i>.</p>

<dt><a name='sync'></a><a name="sync_(_MESG_)"
>sync ( MESG )</a></dt>

<dd>
<p>Wait for a given <code>MESG</code> request to be completed by the server. If no <code>MESG</code> is given, then wait for all outstanding requests to be completed.</p>

<p>Returns an error code defined in <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Constant.pm" class="podlinkpod"
>Net::LDAP::Constant</a>.</p>

<dt><a name='process'></a><a name="process_(_MESG_)"
>process ( MESG )</a></dt>

<dd>
<p>Process any messages that the server has sent, but do not block. If <code>MESG</code> is specified then return as soon as <code>MESG</code> has been processed.</p>

<p>Returns an error code defined in <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Constant.pm" class="podlinkpod"
>Net::LDAP::Constant</a>.</p>

<dt><a name='version'></a><a name="version_(_)"
>version ( )</a></dt>

<dd>
<p>Returns the version of the LDAP protocol that is being used.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CONTROLS"
>CONTROLS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Many of the methods described above accept a control option. This allows the user to pass controls to the server as described in LDAPv3.</p>

<p>A control is a reference to a HASH and should contain the three elements below. If any of the controls are blessed then the method <code>to_asn</code> will be called which should return a reference to a HASH containing the three elements described below.</p>

<p>For most purposes <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Control.pm" class="podlinkpod"
>Net::LDAP::Control</a> objects are the easiest way to generate controls.</p>

<dl>
<dt><a name='type'></a><a name="type_=&#62;_OID"
>type =&#62; OID</a></dt>

<dd>
<p>This element must be present and is the name of the type of control being requested.</p>

<dt><a name='critical'></a><a name="critical_=&#62;_FLAG"
>critical =&#62; FLAG</a></dt>

<dd>
<p>critical is optional and should be a boolean value, if it is not specified then it is assumed to be <i>false</i>.</p>

<dt><a name='value'></a><a name="value_=&#62;_VALUE"
>value =&#62; VALUE</a></dt>

<dd>
<p>If the control being requested requires a value then this element should hold the value for the server.</p>
</dd>
</dl>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CALLBACKS"
>CALLBACKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Most of the above commands accept a callback option. This option should be a reference to a subroutine. This subroutine will be called for each packet received from the server as a response to the request sent.</p>

<p>When the subroutine is called the first argument will be the <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Message.pod" class="podlinkpod"
>Net::LDAP::Message</a> object which was returned from the method.</p>

<p>If the request is a search then multiple packets can be received from the server. Each entry is received as a separate packet. For each of these the subroutine will be called with a <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Entry.pod" class="podlinkpod"
>Net::LDAP::Entry</a> object as the second argument.</p>

<p>During a search the server may also send a list of references. When such a list is received then the subroutine will be called with a <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Reference.pod" class="podlinkpod"
>Net::LDAP::Reference</a> object as the second argument.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LDAP_ERROR_CODES"
>LDAP ERROR CODES <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><b>Net::LDAP</b> also exports constants for the error codes that can be received from the server, see <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Constant.pm" class="podlinkpod"
>Net::LDAP::Constant</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Constant.pm" class="podlinkpod"
>Net::LDAP::Constant</a>, <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Control.pm" class="podlinkpod"
>Net::LDAP::Control</a>, <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Entry.pod" class="podlinkpod"
>Net::LDAP::Entry</a>, <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Filter.pod" class="podlinkpod"
>Net::LDAP::Filter</a>, <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Message.pod" class="podlinkpod"
>Net::LDAP::Message</a>, <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Reference.pod" class="podlinkpod"
>Net::LDAP::Reference</a>, <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/Search.pod" class="podlinkpod"
>Net::LDAP::Search</a>, <a href="/~marschap/perl-ldap-0.44/lib/Net/LDAP/RFC.pod" class="podlinkpod"
>Net::LDAP::RFC</a></p>

<p>The homepage for the perl-ldap modules can be found at <a href="http://ldap.perl.org/" class="podlinkurl"
>http://ldap.perl.org/</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="ACKNOWLEDGEMENTS"
>ACKNOWLEDGEMENTS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This document is based on a document originally written by Russell Fulton &#60;r.fulton@auckland.ac.nz&#62;.</p>

<p>Chris Ridd &#60;chris.ridd@isode.com&#62; for the many hours spent testing and contribution of the ldap* command line utilities.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="MAILING_LIST"
>MAILING LIST <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A discussion mailing list is hosted by the Perl Foundation at &#60;perl-ldap@perl.org&#62; No subscription is necessary!</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BUGS"
>BUGS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>We hope you do not find any, but if you do please report them to the mailing list.</p>

<p>If you have a patch, please send it as an attachment to the mailing list.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHOR"
>AUTHOR <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Graham Barr &#60;gbarr@pobox.com&#62;</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 1997-2004 Graham Barr. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78262 Uploads, 24722 Distributions
105996 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Fri Apr 27 15:38:54 2012 GMT (0.146336793899536) @cpansearch1 -->
 </body>
</html>
