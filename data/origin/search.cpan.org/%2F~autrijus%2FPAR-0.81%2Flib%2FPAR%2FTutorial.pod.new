<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>PAR::Tutorial - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","PAR",3]);
    _gaq.push(["_setCustomVar",5,"Release","PAR-0.81",3]);
    _gaq.push(["_setCustomVar",4,"Document","PAR::Tutorial",3]);
    _gaq.push(["_setCustomVar",1,"Author","AUTRIJUS",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?PAR::Tutorial">permalink</a></div>
  <a href="/~autrijus/">&#x263A;&#x5510;&#x9CF3;&#x263B;</a> &gt;
  <a href="/~autrijus/PAR-0.81/">PAR-0.81</a> &gt;
  PAR::Tutorial
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/4896108281e9b60ca50bb0c0c1b88151?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/A/AU/AUTRIJUS/PAR-0.81.tar.gz">PAR-0.81.tar.gz</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~AUTRIJUS/PAR-0.81/lib/PAR/Tutorial.pod">Annotate this POD
(4)
</a></p>

<div style="float:right">
<div class=box style='width:150px'>
<h1 class=t5>CPAN RT</h1>
<div style="margin:2px">
<table style="margin-left:auto;margin-right:auto">
<tr><td>New&nbsp;</td><td style="text-align:right"> 6</td></tr>
<tr><td>Open&nbsp;</td><td style="text-align:right"> 16</td></tr>
<tr><td>Stalled&nbsp;</td><td style="text-align:right"> 3</td></tr>
</table>
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=PAR">View/Report Bugs</a><br/>
</div>
</div>

</div>
</div>
<span class="noprint">
  <a href="/src/AUTRIJUS/PAR-0.81/lib/PAR/Tutorial.pod">Source</a> &nbsp;
  Latest&nbsp;Release:&nbsp;<a href="/~rschupp/PAR/lib/PAR/Tutorial.pod">PAR-1.005</a>
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <ul   class='indexList indexList2'>
    <li class='indexItem indexItem2'><a href='#On_Deploying_Perl_Applications'>On Deploying Perl Applications</a>
    <li class='indexItem indexItem2'><a href='#PAR,_the_Perl_Archive_Toolkit'>PAR, the Perl Archive Toolkit</a>
    <li class='indexItem indexItem2'><a href='#Simple_Packaging'>Simple Packaging</a>
    <li class='indexItem indexItem2'><a href='#PAR_Loaders'>PAR Loaders</a>
    <li class='indexItem indexItem2'><a href='#Dependency_Scanning'>Dependency Scanning</a>
    <li class='indexItem indexItem2'><a href='#Perl_Packager:_pp'>Perl Packager: pp</a>
    <li class='indexItem indexItem2'><a href='#How_it_works'>How it works</a>
    <li class='indexItem indexItem2'><a href='#Aggregating_multiple_programs'>Aggregating multiple programs</a>
    <li class='indexItem indexItem2'><a href='#Cross-platform_Packages'>Cross-platform Packages</a>
    <li class='indexItem indexItem2'><a href='#The_Anatomy_of_a_PAR_file'>The Anatomy of a PAR file</a>
    <li class='indexItem indexItem2'><a href='#Special_files'>Special files</a>
    <li class='indexItem indexItem2'><a href='#Advantages_over_perlcc,_PerlApp_and_Perl2exe'>Advantages over perlcc, PerlApp and Perl2exe</a>
    <li class='indexItem indexItem2'><a href='#MANIFEST:_Best_viewed_with_Mozilla'>MANIFEST: Best viewed with Mozilla</a>
    <li class='indexItem indexItem2'><a href='#META.yml:_Metadata_galore'>META.yml: Metadata galore</a>
    <li class='indexItem indexItem2'><a href='#SIGNATURE:_Signing_and_verifying_packages'>SIGNATURE: Signing and verifying packages</a>
    <li class='indexItem indexItem2'><a href='#Perl_Servlets_with_Apache::PAR'>Perl Servlets with Apache::PAR</a>
    <li class='indexItem indexItem2'><a href='#Hon_Dah,_A-par-che!'>Hon Dah, A-par-che!</a>
    <li class='indexItem indexItem2'><a href='#On-demand_library_fetching'>On-demand library fetching</a>
    <li class='indexItem indexItem2'><a href='#Code_Obfuscation'>Code Obfuscation</a>
    <li class='indexItem indexItem2'><a href='#Accessing_packed_files'>Accessing packed files</a>
    <li class='indexItem indexItem2'><a href='#Packing_GUI_applications'>Packing GUI applications</a>
    <li class='indexItem indexItem2'><a href='#Precompiled_CPAN_distributions'>Precompiled CPAN distributions</a>
    <li class='indexItem indexItem2'><a href='#Platform-specific_Tips'>Platform-specific Tips</a>
    <li class='indexItem indexItem2'><a href='#Thank_you!'>Thank you!</a>
    <li class='indexItem indexItem2'><a href='#Bonus_Slides:_PAR_Internals'>Bonus Slides: PAR Internals</a>
    <li class='indexItem indexItem2'><a href='#Overview_of_PAR.pm&#39;s_Implementation'>Overview of PAR.pm&#39;s Implementation</a>
    <li class='indexItem indexItem2'><a href='#Code_References_in_@INC'>Code References in @INC</a>
    <li class='indexItem indexItem2'><a href='#Source_Filtering_without_Filter::*_Modules'>Source Filtering without Filter::* Modules</a>
    <li class='indexItem indexItem2'><a href='#Source_Filtering_without_Filter::*_Modules_(cont.)'>Source Filtering without Filter::* Modules (cont.)</a>
    <li class='indexItem indexItem2'><a href='#Overriding_DynaLoader::bootstrap'>Overriding DynaLoader::bootstrap</a>
    <li class='indexItem indexItem2'><a href='#Anatomy_of_a_Self-Contained_PAR_executable'>Anatomy of a Self-Contained PAR executable</a>
    <li class='indexItem indexItem2'><a href='#Self-Bootstrapping_Tricks'>Self-Bootstrapping Tricks</a>
    <li class='indexItem indexItem2'><a href='#Thank_you_(again)!'>Thank you (again)!</a>
  </ul>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#COPYRIGHT'>COPYRIGHT</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>PAR::Tutorial - Cross-Platform Packaging and Deployment with PAR</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This is a tutorial on PAR,
first appeared at the 7th Perl Conference.
The HTML version of this tutorial is available online as <a href="http://aut.dyndns.org/par-tutorial/" class="podlinkurl"
>http://aut.dyndns.org/par-tutorial/</a>.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="On_Deploying_Perl_Applications"
>On Deploying Perl Applications</a></h2>

<pre class="sh_perl"> % sshnuke.pl 10.2.2.2 -rootpw=&#34;Z1ON0101&#34;
 Perl v5.6.1 required--this is only v5.6.0, stopped at sshnuke.pl line 1.
 BEGIN failed--compilation aborted at sshnuke.pl line 1.</pre>

<ul>
<li>Q: &#34;Help! I can&#39;t run your program!&#34;</li>

<li>A1: Install Perl &#38; <code>perl -MCPAN -e&#39;install(...)&#39;</code>
<ul>
<li>How do we know which modules are needed?</li>

<li>New versions of CPAN modules may break <code>sshnuke.pl</code></li>
</ul>
</li>

<li>A2: Install Perl &#38; <code>tar zxf my_perllib.tgz</code>
<ul>
<li>Possibly overwriting existing modules; not cross-platform at all</li>
</ul>
</li>

<li>A3: Use the executable generated by <code>perlcc sshnuke.pl</code>
<ul>
<li>Impossible to debug; <code>perlcc</code> usually does not work anyway</li>
</ul>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="PAR,_the_Perl_Archive_Toolkit"
>PAR, the Perl Archive Toolkit</a></h2>

<ul>
<li>Do what JAR (Java Archive) does for Perl
<ul>
<li>Aggregates modules, scripts and other files into a Zip file</li>

<li>Easy to generate, update and extract</li>

<li>Version consistency: solves forward-compatibility problems</li>

<li>Developed by community: <code>par@perl.org</code></li>
</ul>
</li>

<li>PAR files can be packed into self-contained scripts
<ul>
<li>Automatically scans perl script for dependencies</li>

<li>Bundles all necessary 3rd-party modules with it</li>

<li>Requires only core Perl to run on the target machine</li>

<li>PAR also comes with <code>pp</code>, the Perl Packager:
<pre class="sh_perl"> % pp -o sshnuke.exe sshnuke.pl # stand-alone executable!</pre>
</li>
</ul>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Simple_Packaging"
>Simple Packaging</a></h2>

<ul>
<li>PAR files are just Zip files with modules in it</li>

<li>Any Zip tools can generate them:
<pre class="sh_perl"> % zip foo.par Hello.pm World.pm        # pack two modules
 % zip -r bar.par lib/          # grab all modules in lib/</pre>
</li>

<li>To load modules from PAR files:
<pre class="sh_perl"> use PAR;
 use lib &#34;foo.par&#34;;             # the .par part is optional
 use Hello;</pre>
</li>

<li>This also works:
<pre class="sh_perl"> use PAR &#34;/home/mylibs/*.par&#34;;  # put all of them into @INC
 use Hello;</pre>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="PAR_Loaders"
>PAR Loaders</a></h2>

<ul>
<li>Use <code>par.pl</code> to run files inside a PAR archive:
<pre class="sh_perl"> % par.pl foo.par               # looks for &#39;main.pl&#39; by default
 % par.pl foo.par test.pl       # runs script/test.pl in foo.par</pre>
</li>

<li>Same thing, with the stand-alone <code>parl</code> or <code>parl.exe</code>:
<pre class="sh_perl"> % parl foo.par                 # no perl or PAR.pm needed!
 % parl foo.par test.pl         # ditto</pre>
</li>

<li>The PAR loader can prepend itself to a PAR file:
<ul>
<li><code>-b</code> bundles non-core modules needed by <code>PAR.pm</code>:
<pre class="sh_perl"> % par.pl -b -O./foo.pl foo.par # self-contained script</pre>
</li>

<li><code>-B</code> bundles core modules in addition to <code>-b</code>:
<pre class="sh_perl"> % parl -B -O./foo.exe foo.par  # self-contained binary</pre>
</li>
</ul>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Dependency_Scanning"
>Dependency Scanning</a></h2>

<ul>
<li>Recursively scan dependencies with <code>scandeps.pl</code>:
<pre class="sh_perl"> % scandeps.pl sshnuke.pl
 # Legend: [C]ore [X]ternal [S]ubmodule [?]NotOnCPAN
 &#39;Crypt::SSLeay&#39;       =&#62; &#39;0&#39;, #  X   #
 &#39;Net::HTTP&#39;           =&#62; &#39;0&#39;, #      #
 &#39;Crypt::SSLeay::X509&#39; =&#62; &#39;0&#39;, # S    # Crypt::SSLeay
 &#39;Net::HTTP::Methods&#39;  =&#62; &#39;0&#39;, # S    # Net::HTTP
 &#39;Compress::Zlib&#39;      =&#62; &#39;0&#39;, #  X   # Net::HTTP::Methods</pre>
</li>

<li>Scan an one-liner, list all involved files:
<pre class="sh_perl"> % scandeps.pl -V -e &#34;use Dynaloader;&#34;
 ...
 # auto/DynaLoader/dl_findfile.al [autoload]
 # auto/DynaLoader/extralibs.ld [autoload]
 # auto/File/Glob/Glob.bs [data]
 # auto/File/Glob/Glob.so [shared]
 ...</pre>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Perl_Packager:_pp"
>Perl Packager: <code>pp</code></a></h2>

<ul>
<li>Combines scanning, zipping and loader-embedding:
<pre class="sh_perl"> % pp -o out.exe src.pl         # self-contained .exe
 % out.exe                      # runs anywhere on the same OS</pre>
</li>

<li>Bundle additional modules:
<pre class="sh_perl"> % pp -o out.exe -M CGI src.pl  # pack CGI + its dependencies, too</pre>
</li>

<li>Pack one-liners:
<pre class="sh_perl"> % pp -o out.exe -e &#39;print &#34;Hi!&#34;&#39;   # turns one-liner into executable</pre>
</li>

<li>Generate PAR files instead of executables:
<pre class="sh_perl"> % pp -p src.pl                 # makes &#39;source.par&#39;
 % pp -B -p src.pl              # include core modules</pre>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="How_it_works"
>How it works</a></h2>

<ul>
<li>Command-line options are almost identical to <code>perlcc</code>&#39;s
<ul>
<li>Also supports <code>gcc</code>-style long options:
<pre class="sh_perl"> % pp --gui --verbose --output=out.exe src.pl</pre>
</li>
</ul>
</li>

<li>Small initial overhead; no runtime overhead</li>

<li>Dependencies are POD-stripped before packing</li>

<li>Loads modules directly into memory on demand</li>

<li>Shared libraries (DLLs) are extracted with File::Temp</li>

<li>Works on Perl 5.6.0 or above</li>

<li>Tested on Win32 (VC++ and MinGW), FreeBSD, NetBSD, Linux, MacOSX, Cygwin, AIX, Solaris, HP-UX, Tru64...</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Aggregating_multiple_programs"
>Aggregating multiple programs</a></h2>

<ul>
<li>A common question:
<pre class="sh_perl"> &#62; I have used pp to make several standalone applications which work
 &#62; great, the only problem is that for each executable that I make, I am
 &#62; assuming the parl.exe is somehow bundled into the resulting exe.</pre>
</li>

<li>The obvious workaround:
<pre class="sh_perl"> You can ship parl.exe by itself, along with .par files built
 by &#34;pp -p&#34;, and run those PAR files by associating them to parl.exe.</pre>
</li>

<li>On platforms that have <code>ln</code>, there is a better solution:
<pre class="sh_perl"> % pp --output=a.out a.pl b.pl  # two scripts in one!
 % ln a.out b.out               # symlink also works
 % ./a.out                      # runs a.pl
 % ./b.out                      # runs b.pl</pre>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Cross-platform_Packages"
>Cross-platform Packages</a></h2>

<ul>
<li>Of course, there is no cross-platform binary format</li>

<li>Pure-perl PAR packages are cross-platform by default
<ul>
<li>However, XS modules are specific to Perl version and platform</li>

<li>Multiple versions of a XS module can co-exist in a PAR file</li>
</ul>
</li>

<li>Suppose we need <code>out.par</code> on both Win32 and Finix:
<pre class="sh_perl"> C:\&#62; pp --multiarch --output=out.par src.pl
 ...copy src.pl and out.par to a Finix machine...
 % pp --multiarch --output=out.par src.pl</pre>
</li>

<li>Now it works on both platforms:
<pre class="sh_perl"> % parl out.par                 # runs src.pl
 % perl -MPAR=out.par -e &#39;...&#39;  # uses modules inside out.par</pre>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="The_Anatomy_of_a_PAR_file"
>The Anatomy of a PAR file</a></h2>

<ul>
<li>Modules can reside in several directories:
<pre class="sh_perl"> /                      # casual packaging only
 /lib/                  # standard location
 /arch/                 # for creating from blib/ 
 /i386-freebsd/         # i.e. $Config{archname}
 /5.8.0/                # i.e. Perl version number
 /5.8.0/i386-freebsd/   # combination of the two above</pre>
</li>

<li>Scripts are stored in one of the two locations:
<pre class="sh_perl"> /                      # casual packaging only
 /script/               # standard location</pre>
</li>

<li>Shared libraries may be architecture- or perl-version-specific:
<pre class="sh_perl"> /shlib/(5.8.0/)?(i386-freebsd/)?</pre>
</li>

<li>PAR files may recursively contain other PAR files:
<pre class="sh_perl"> /par/(5.8.0/)?(i386-freebsd/)?</pre>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Special_files"
>Special files</a></h2>

<ul>
<li>MANIFEST
<ul>
<li>Index of all files inside PAR</li>

<li>Can be parsed with <code>ExtUtils::Manifest</code></li>
</ul>
</li>

<li>META.yml
<ul>
<li>Dependency, license, runtime options</li>

<li>Can be parsed with <code>YAML</code></li>
</ul>
</li>

<li>SIGNATURE
<ul>
<li>OpenPGP-signed digital signature</li>

<li>Can be parsed and verified with <code>Module::Signature</code></li>
</ul>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Advantages_over_perlcc,_PerlApp_and_Perl2exe"
>Advantages over perlcc, PerlApp and Perl2exe</a></h2>

<ul>
<li>This is not meant to be a flame
<ul>
<li>All three maintainers have contributed to PAR directly; I&#39;m grateful</li>
</ul>
</li>

<li>perlcc
<ul>
<li>&#34;The code generated in this way is not guaranteed to work... Use for production purposes is strongly discouraged.&#34; (from perldoc perlcc)</li>

<li><i>Guaranteed to not work</i> is more like it</li>
</ul>
</li>

<li>PerlApp / Perl2exe
<ul>
<li>Expensive: Need to pay for each upgrade</li>

<li>Non-portable: Only available for limited platforms</li>

<li>Proprietary: Cannot extend its features or fix bugs</li>

<li>Obfuscated: Vendor and black-hats can see your code, but you can&#39;t</li>

<li>Inflexible: Does not work with existing Perl installations</li>
</ul>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="MANIFEST:_Best_viewed_with_Mozilla"
>MANIFEST: Best viewed with Mozilla</a></h2>

<ul>
<li>The URL of <code>MANIFEST</code> inside <code>/home/autrijus/foo.par</code>:
<pre class="sh_perl"> jar:<a href="file:///home/autrijus/foo.par!/MANIFEST" class="podlinkurl"
>file:///home/autrijus/foo.par!/MANIFEST</a></pre>
</li>

<li>Open it in a Gecko browser (e.g. Netscape 6+) with Javascript enabled:</li>

<li>No needed to unzip anything; just click on files to view them</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="META.yml:_Metadata_galore"
>META.yml: Metadata galore</a></h2>

<ul>
<li>Static, machine-readable distribution metadata
<ul>
<li>Supported by <code>Module::Build</code>, <code>ExtUtils::MakeMaker</code>, <code>Module::Install</code></li>
</ul>
</li>

<li>A typical <code>pp</code>-generated <code>META.yml</code> looks like this:
<pre class="sh_perl"> build_requires: {}
 conflicts: {}
 dist_name: out.par
 distribution_type: par
 dynamic_config: 0
 generated_by: &#39;Perl Packager version 0.03&#39;
 license: unknown
 par:
   clean: 0
   signature: &#39;&#39;
   verbatim: 0
   version: 0.68</pre>
</li>

<li>The <code>par:</code> settings controls its runtime behavior</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="SIGNATURE:_Signing_and_verifying_packages"
>SIGNATURE: Signing and verifying packages</a></h2>

<ul>
<li>OpenPGP clear-signed manifest with SHA1 digests
<ul>
<li>Supported by <code>Module::Signature</code>, <code>CPANPLUS</code> and <code>Module::Build</code></li>
</ul>
</li>

<li>A typical <code>SIGNATURE</code> looks like this:
<pre class="sh_perl"> -----BEGIN PGP SIGNED MESSAGE-----
 Hash: SHA1

 SHA1 8a014cd6d0f6775552a01d1e6354a69eb6826046 AUTHORS
 ...
 -----BEGIN PGP SIGNATURE-----
 ...
 -----END PGP SIGNATURE-----</pre>
</li>

<li>Use <code>pp</code> and <code>cpansign</code> to work with signatures:
<pre class="sh_perl"> % pp -s -o foo.par bar.pl      # make and sign foo.par from bar.pl
 % cpansign -s foo.par  # sign this PAR file
 % cpansign -v foo.par  # verify this PAR file</pre>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Perl_Servlets_with_Apache::PAR"
>Perl Servlets with Apache::PAR</a></h2>

<ul>
<li>Framework for self-contained Web applications
<ul>
<li>Similar to Java&#39;s &#34;Web Application Archive&#34; (WAR) files</li>

<li>Works with mod_perl 1.x or 2.x</li>
</ul>
</li>

<li>A complete web application inside a <code>.par</code> file
<ul>
<li>Apache configuration, static files, Perl modules...</li>

<li>Supports Static, Registry and PerlRun handlers</li>

<li>Can also load all PARs under a directory</li>
</ul>
</li>

<li>One additional special file: <code>web.conf</code>
<pre class="sh_perl"> Alias /myapp/cgi-perl/ ##PARFILE##/
 &#60;Location /myapp/cgi-perl&#62;
     Options +ExecCGI
     SetHandler perl-script
     PerlHandler Apache::PAR::Registry
 &#60;/Location&#62;</pre>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Hon_Dah,_A-par-che!"
>Hon Dah, A-par-che!</a></h2>

<ul>
<li>First, make a <code>hondah.par</code> from an one-liner:
<pre class="sh_perl"> # use the &#34;web.conf&#34; from the previous slide
 % pp -p -o hondah.par -e &#39;print &#34;Hon Dah!\n&#34;&#39; \
      --add web.conf
 % chmod a+x hondah.par</pre>
</li>

<li>Add this to <code>httpd.conf</code>, then restart apache:
<pre class="sh_perl"> &#60;IfDefine MODPERL2&#62;
 PerlModule Apache2
 &#60;/IfDefine&#62;
 PerlAddVar PARInclude /home/autrijus/hondah.par
 PerlModule Apache::PAR</pre>
</li>

<li>Test it out:
<pre class="sh_perl"> % GET <a href="http://localhost/myapp/cgi-perl/main.pl" class="podlinkurl"
>http://localhost/myapp/cgi-perl/main.pl</a>
 Hon Dah!</pre>
</li>

<li>Instant one-liner web application that works!</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="On-demand_library_fetching"
>On-demand library fetching</a></h2>

<ul>
<li>With LWP installed, your can use remote PAR files:
<pre class="sh_perl"> use PAR;
 use lib &#39;<a href="http://aut.dyndns.org/par/DBI-latest.par" class="podlinkurl"
>http://aut.dyndns.org/par/DBI-latest.par</a>&#39;;
 use DBI;    # always up to date!</pre>
</li>

<li>Modules are cached under <code>$ENV{PAR_TEMP}</code></li>

<li>Auto-updates with <code>LWP::Simple::mirror</code>
<ul>
<li>Download only if modified</li>

<li>Safe for offline use after the first time</li>

<li>May use <code>SIGNATURE</code> to prevent DNS-spoofing</li>
</ul>
</li>

<li>Makes large-scale deployment a breeze
<ul>
<li>Upgrades from a central location</li>

<li>No installers needed</li>
</ul>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Code_Obfuscation"
>Code Obfuscation</a></h2>

<ul>
<li>Also known as <i>source-hiding</i> techniques
<ul>
<li>It is <i>not</i> encryption</li>

<li>Offered by PerlApp, Perl2Exe, Stunnix...</li>
</ul>
</li>

<li>Usually easy to defeat
<ul>
<li>Take optree dump from memory, feed to <code>B::Deparse</code></li>

<li>If you just want to stop a casual <code>grep</code>, &#34;deflate&#34; already works</li>
</ul>
</li>

<li>PAR now supports pluggable <i>input filters</i> with <code>pp -f</code>
<ul>
<li>Bundled examples: Bleach, PodStrip and PatchContent</li>

<li>True encryption using <code>Crypt::*</code></li>

<li>Or even _product activation_ over the internet</li>
</ul>
</li>

<li>Alternatively, just keep core logic in your server and use RPC</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Accessing_packed_files"
>Accessing packed files</a></h2>

<ul>
<li>To get the host archive from a packed program:
<pre class="sh_perl"> my $zip = PAR::par_handle($0); # an Archive::Zip object
 my $content = $zip-&#62;contents(&#39;MANIFEST&#39;);</pre>
</li>

<li>Same thing, but with <code>read_file()</code>:
<pre class="sh_perl"> my $content = PAR::read_file(&#39;MANIFEST&#39;);</pre>
</li>

<li>Loaded PAR files are stored in <code>%PAR::LibCache</code>:
<pre class="sh_perl"> use PAR &#39;/home/mylibs/*.par&#39;;
 while (my ($filename, $zip) = each %PAR::LibCache) {
     print &#34;[$filename - MANIFEST]\n&#34;;
     print $zip-&#62;contents(&#39;MANIFEST&#39;);
 }</pre>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Packing_GUI_applications"
>Packing GUI applications</a></h2>

<ul>
<li>GUI toolkits often need to link with shared libraries:
<pre class="sh_perl"> # search for libncurses under library paths and pack it
 % pp -l ncurses curses_app.pl  # same for Tk, Wx, Gtk, Qt...</pre>
</li>

<li>Use <code>pp --gui</code> on Win32 to eliminate the console window:
<pre class="sh_perl"> # pack &#39;src.pl&#39; into a console-less &#39;out.exe&#39; (Win32 only)
 % pp --gui -o out.exe src.pl</pre>
</li>

<li>&#34;Can&#39;t locate Foo/Widget/Bar.pm in @INC&#34;?
<ul>
<li>Some toolkits (notably Tk) autoloads modules without <code>use</code> or <code>require</code></li>

<li>Hence <code>pp</code> and <code>Module::ScanDeps</code> may fail to detect them</li>

<li>Tk problems mostly fixed by now, but other toolkits may still break</li>

<li>You can work around it with <code>pp -M</code> or an explicit <code>require</code></li>

<li>Or better, send a short test-case to <code>par@perl.org</code> so we can fix it</li>
</ul>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Precompiled_CPAN_distributions"
>Precompiled CPAN distributions</a></h2>

<ul>
<li>Installing XS extensions from CPAN was difficult
<ul>
<li>Some platforms do not come with a compiler (Win32, MacOSX...)</li>

<li>Some headers or libraries may be missing</li>

<li>PAR.pm itself used to suffer from both problems</li>
</ul>
</li>

<li>...but not anymore -- <code>Module::Install</code> to the rescue!
<pre class="sh_perl"> # same old Makefile.PL, with a few changes
 use inc::Module::Install;      # was &#34;use ExtUtils::MakeMaker;&#34;
 WriteMakefile( ... );          # same as the original
 check_nmake();                 # make sure the user have nmake
 par_base(&#39;AUTRIJUS&#39;);          # your CPAN ID or a URL
 fetch_par() unless can_cc();   # use precompiled PAR only if necessary</pre>
</li>

<li>Users will not notice anything, except now it works
<ul>
<li>Of course, you still need to type <code>make par</code> and upload the precompiled package</li>

<li>PAR users can also install it directly with <code>parl -i</code></li>
</ul>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Platform-specific_Tips"
>Platform-specific Tips</a></h2>

<ul>
<li>Win32 and other icon-savvy platforms
<ul>
<li>Needs 3rd-party tools to add icons to <code>pp</code>-generated executables</li>

<li>PE Header manipulation in Perl -- volunteers wanted!</li>
</ul>
</li>

<li>Linux and other libc-based platforms
<ul>
<li>Try to avoid running <code>pp</code> on a bleeding-edge version of the OS</li>

<li>Older versions with an earlier libc won&#39;t work with new ones</li>
</ul>
</li>

<li>Solaris and other zlib-lacking platforms (but not Win32)
<ul>
<li>You need a static-linked <code>Compress::Zlib</code> before installing PAR</li>

<li>In the future, PAR may depend on <code>Compress::Zlib::Static</code> instead</li>
</ul>
</li>

<li>Any platform with limited bandwidth or disk space
<ul>
<li>Use UPX to minimize the executable size</li>
</ul>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Thank_you!"
>Thank you!</a></h2>

<ul>
<li>Additional resources
<ul>
<li>Mailing list: <code>par@perl.org</code></li>

<li>Subscribe: Send a blank email to <code>par-subscribe@perl.org</code></li>

<li>List archive: <a href="http://nntp.x.perl.org/group/perl.par" class="podlinkurl"
>http://nntp.x.perl.org/group/perl.par</a></li>

<li>PAR::Intro: <a href="http://search.cpan.org/dist/PAR/lib/PAR/Intro.pod" class="podlinkurl"
>http://search.cpan.org/dist/PAR/lib/PAR/Intro.pod</a></li>

<li>Apache::PAR: <a href="http://search.cpan.org/dist/Apache-PAR/" class="podlinkurl"
>http://search.cpan.org/dist/Apache-PAR/</a></li>

<li>Module::Install: <a href="http://search.cpan.org/dist/Module-Install/" class="podlinkurl"
>http://search.cpan.org/dist/Module-Install/</a></li>
</ul>
</li>

<li>Any questions?</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Bonus_Slides:_PAR_Internals"
>Bonus Slides: PAR Internals</a></h2>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Overview_of_PAR.pm&#39;s_Implementation"
>Overview of PAR.pm&#39;s Implementation</a></h2>

<ul>
<li>Here begins the scary part
<ul>
<li>Grues, Dragons and Jabberwocks abound...</li>

<li>You are going to learn weird things about Perl internals</li>
</ul>
</li>

<li>PAR invokes four areas of Perl arcana:
<ul>
<li>@INC code references</li>

<li>On-the-fly source filtering</li>

<li>Overriding <code>DynaLoader::bootstrap()</code> to handle XS modules</li>

<li>Making self-bootstrapping binary executables</li>
</ul>
</li>

<li>The first two only works on 5.6 or later
<ul>
<li>DynaLoader and <code>%INC</code> are there since Perl 5 was born</li>

<li>PAR currently needs 5.6, but a 5.005 port is possible</li>
</ul>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Code_References_in_@INC"
>Code References in @INC</a></h2>

<ul>
<li>On 1999-07-19, Ken Fox submitted a patch to P5P
<ul>
<li>To _enable using remote modules_ by putting hooks in @INC</li>

<li>It&#39;s accepted to come in Perl 5.6, but undocumented until 5.8</li>

<li>Type <code>perldoc -f require</code> to read the nitty-gritty details</li>
</ul>
</li>

<li>Coderefs in @INC may return a fh, or undef to &#39;pass&#39;:
<pre class="sh_perl"> push @INC, sub {
     my ($coderef, $filename) = @_;  # $coderef is \&#38;my_sub
     open my $fh, &#34;wget <a href="ftp://example.com/$filename" class="podlinkurl"
>ftp://example.com/$filename</a> |&#34;;
     return $fh;        # using remote modules, indeed!
 };</pre>
</li>

<li>Perl 5.8 let you open a file handle to a string, so we just use that:
<pre class="sh_perl">        open my $fh, &#39;&#60;&#39;, \($zip-&#62;memberNamed($filename)-&#62;contents);
        return $fh;</pre>
</li>

<li>But Perl 5.6 does not have that, and I don&#39;t want to use temp files...</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Source_Filtering_without_Filter::*_Modules"
>Source Filtering without Filter::* Modules</a></h2>

<ul>
<li>... Undocumented features to the rescue!
<ul>
<li>It turns out that @INC hooks can return <b>two</b> values</li>

<li>The first is still the file handle</li>

<li>The second is a code reference for line-by-line source filtering!</li>
</ul>
</li>

<li>This is how <code>Acme::use::strict::with::pride</code> works:
<pre class="sh_perl"> # Force all modules used to use strict and warnings
 open my $fh, &#34;&#60;&#34;, $filename or return;
 my @lines = (&#34;use strict; use warnings;\n&#34;, &#34;#line 1 \&#34;$full\&#34;\n&#34;);
 return ($fh, sub {
     return 0 unless @lines;    
     push @lines, $_; $_ = shift @lines; return length $_;
 });</pre>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Source_Filtering_without_Filter::*_Modules_(cont.)"
>Source Filtering without Filter::* Modules (cont.)</a></h2>

<ul>
<li>But we don&#39;t really have a filehandle for anything</li>

<li>Another undocumented feature saves the day!</li>

<li>We can actually omit the first return value altogether:
<pre class="sh_perl"> # Return all contents line-by-line from the file inside PAR
 my @lines = split(
     /(?&#60;=\n)/,
     $zip-&#62;memberNamed($filename)-&#62;contents
 );
 return (sub {
     $_ = shift(@lines);
     return length $_;
 });</pre>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Overriding_DynaLoader::bootstrap"
>Overriding DynaLoader::bootstrap</a></h2>

<ul>
<li>XS modules have dynamically loaded libraries
<ul>
<li>They cannot be loaded as part of a zip file, so we extract them out</li>

<li>Must intercept DynaLoader&#39;s library-finding process</li>
</ul>
</li>

<li>Module names are passed to <code>bootstrap</code> for XS loading
<ul>
<li>During the process, it calls <code>dl_findfile</code> to locate the file</li>

<li>So we install pre-hooks around both functions</li>
</ul>
</li>

<li>Our <code>_bootstrap</code> just checks if the library is in PARs
<ul>
<li>If yes, extract it to a <code>File::Temp</code> temp file
<ul>
<li>The file will be automatically cleaned up when the program ends</li>
</ul>
</li>

<li>It then pass the arguments to the original <code>bootstrap</code></li>

<li>Finally, our <code>dl_findfile</code> intercepts known filenames and return it</li>
</ul>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Anatomy_of_a_Self-Contained_PAR_executable"
>Anatomy of a Self-Contained PAR executable</a></h2>

<ul>
<li>The par script ($0) itself
<ul>
<li>May be in plain-text or native executable format</li>
</ul>
</li>

<li>Any number of embedded files
<ul>
<li>Typically used to bootstrap PAR&#39;s various dependencies</li>

<li>Each section begins with the magic string &#34;FILE&#34;</li>

<li>Length of filename in pack(&#39;N&#39;) format and the filename (auto/.../)</li>

<li>File length in pack(&#39;N&#39;) and the file&#39;s content (not compressed)</li>
</ul>
</li>

<li>One PAR file
<ul>
<li>Just a regular zip file with the magic string <code>&#34;PK\003\004&#34;</code></li>
</ul>
</li>

<li>Ending section
<ul>
<li>A pack(&#39;N&#39;) number of the total length of FILE and PAR sections</li>

<li>Finally, there must be a 8-bytes magic string: <code>&#34;\012PAR.pm\012&#34;</code></li>
</ul>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Self-Bootstrapping_Tricks"
>Self-Bootstrapping Tricks</a></h2>

<ul>
<li>All we can expect is a working perl interpreter
<ul>
<li>The self-contained script *must not* use any modules at all</li>

<li>But to process PAR files, we need XS modules like Compress::Zlib</li>
</ul>
</li>

<li>Answer: bundle all modules + libraries used by PAR.pm
<ul>
<li>That&#39;s what the <code>FILE</code> section in the previous slide is for</li>

<li>Load modules to memory, and write object files to disk</li>

<li>Then use a local <code>@INC</code> hook to load them on demand</li>
</ul>
</li>

<li>Minimizing the amount of temporary files
<ul>
<li>First, try to load PerlIO::scalar and File::Temp</li>

<li>Set up an END hook to unlink all temp files up to this point</li>

<li>Load other bundled files, and look in the compressed PAR section</li>

<li>This can be much easier with a pure-perl <code>inflate()</code>; patches welcome!</li>
</ul>
</li>
</ul>

<h2><a class='u' href='#___top' title='click to go to top of document'
name="Thank_you_(again)!"
>Thank you (again)!</a></h2>

<ul>
<li>Any questions, <i>please</i>?</li>
</ul>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p><a href="http://www.autrijus.org/par-tutorial/" class="podlinkurl"
>http://www.autrijus.org/par-tutorial/</a></p>

<p><a href="http://www.autrijus.org/par-intro/" class="podlinkurl"
>http://www.autrijus.org/par-intro/</a> (English version)</p>

<p><a href="http://www.autrijus.org/par-intro.zh/" class="podlinkurl"
>http://www.autrijus.org/par-intro.zh/</a> (Chinese version)</p>

<p><a href="/~autrijus/PAR-0.81/lib/PAR.pm" class="podlinkpod"
>PAR</a>, <a href="/~autrijus/PAR-0.81/lib/App/Packer/Backend/PAR.pm" class="podlinkpod"
>pp</a>, <a href="/~autrijus/PAR-0.81/script/par.pl" class="podlinkpod"
>par.pl</a>, <a href="/~autrijus/PAR-0.81/script/parl.pod" class="podlinkpod"
>parl</a></p>

<p><a href="/perldoc?ex%3A%3Alib%3A%3Azip" class="podlinkpod"
>ex::lib::zip</a>, <a href="/perldoc?Acme%3A%3Ause%3A%3Astrict%3A%3Awith%3A%3Apride" class="podlinkpod"
>Acme::use::strict::with::pride</a></p>

<p><a href="/~autrijus/PAR-0.81/lib/App/Packer/Temp.pm" class="podlinkpod"
>App::Packer</a>, <a href="/perldoc?Apache%3A%3APAR" class="podlinkpod"
>Apache::PAR</a>, <a href="/perldoc?CPANPLUS" class="podlinkpod"
>CPANPLUS</a>, <a href="/perldoc?Module%3A%3AInstall" class="podlinkpod"
>Module::Install</a></p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Autrijus Tang &#60;autrijus@autrijus.org&#62;</p>

<p><a href="http://par.perl.org/" class="podlinkurl"
>http://par.perl.org/</a> is the official PAR website. You can write to the mailing list at &#60;par@perl.org&#62;, or send an empty mail to &#60;par-subscribe@perl.org&#62; to participate in the discussion.</p>

<p>Please submit bug reports to &#60;bug-par@rt.cpan.org&#62;.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="COPYRIGHT"
>COPYRIGHT <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright 2003, 2004 by Autrijus Tang &#60;autrijus@autrijus.org&#62;.</p>

<p>This document is free documentation; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<p>See <a href="http://www.perl.com/perl/misc/Artistic.html" class="podlinkurl"
>http://www.perl.com/perl/misc/Artistic.html</a></p>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78064 Uploads, 24686 Distributions
105893 Modules, 9637 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Document']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Document']);
    });
  });
</script>
<!-- Sun Apr 22 01:52:00 2012 GMT (0.485485076904297) @cpansearch1 -->
 </body>
</html>
