<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
 <head>
  <link rel="stylesheet" href="http://st.pimg.net/tucs/style.css" type="text/css" />
<style>
.styleswitch {
  text-align: right;
}
</style>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.cookie.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_main.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/sh_perl.min.js"></script>
<script type="text/javascript" src="http://st.pimg.net/tucs/js/jquery.styleswitch.js"></script>

<link rel="stylesheet" href="http://st.pimg.net/tucs/print.css" type="text/css" media="print" />
  <link rel="alternate" type="application/rss+xml" title="RSS 1.0" href="http://search.cpan.org/uploads.rdf" />
  <link rel="search" href="http://st.pimg.net/tucs/opensearch.xml" type="application/opensearchdescription+xml" title="SearchCPAN" />
  <title>MLDBM::Sync - search.cpan.org</title>
 <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3528438-1']);
    _gaq.push(["_setCustomVar",2,"Distribution","MLDBM-Sync",3]);
    _gaq.push(["_setCustomVar",5,"Release","MLDBM-Sync-0.30",3]);
    _gaq.push(["_setCustomVar",3,"Module","MLDBM::Sync",3]);
    _gaq.push(["_setCustomVar",1,"Author","CHAMAS",3]);
    _gaq.push(['_trackPageview']);
  </script>
 </head>
 <body id="cpansearch">
<center><div class="logo"><a href="/"><img src="http://st.pimg.net/tucs/img/cpan_banner.png" alt="CPAN"></a></div></center>
<div class="menubar">
 <a href="/">Home</a>
&middot; <a href="/author/">Authors</a>
&middot; <a href="/recent">Recent</a>
&middot; <a href="http://log.perl.org/cpansearch/">News</a>
&middot; <a href="/mirror">Mirrors</a>
&middot; <a href="/faq.html">FAQ</a>
&middot; <a href="/feedback">Feedback</a>
</div>
<form method="get" action="/search" name="f" class="searchbox">
<input type="text" name="query" value="" size="35">
<br>in <select name="mode">
 <option value="all">All</option>
 <option value="module" >Modules</option>
 <option value="dist" >Distributions</option>
 <option value="author" >Authors</option>
</select>&nbsp;<input type="submit" value="CPAN Search">
</form>


 <a name="_top"></a>
  <div class=path>
<div id=permalink class="noprint"><a href="/perldoc?MLDBM::Sync">permalink</a></div>
  <a href="/~chamas/">J Chamas</a> &gt;
  <a href="/~chamas/MLDBM-Sync-0.30/">MLDBM-Sync-0.30</a> &gt;
  MLDBM::Sync
 </div>

<div class="noprint" style="float:right;align:left;width:19ex">
<a href="http://hexten.net/cpan-faces/"><img src="http://www.gravatar.com/avatar/9684d764c770d187758630aeb37e70c0?r=g&s=80&d=http%3A%2F%2Fst.pimg.net%2Ftucs%2Fimg%2Fwho.png" width=80 height=80 
style="float:right"
/></a>
<br style="clear:both"/>
<p style="text-align:right">Download:<br/> <a href="/CPAN/authors/id/C/CH/CHAMAS/MLDBM-Sync-0.30.tar.gz">MLDBM-Sync-0.30.tar.gz</a></p>
<p style="text-align:right"><a href="http://deps.cpantesters.org/?module=MLDBM%3A%3ASync;perl=latest">Dependencies</a></p>
<p style="text-align:right"><a href="http://www.annocpan.org/~CHAMAS/MLDBM-Sync-0.30/Sync.pm">Annotate this POD
</a></p>
<div class=box style='width:150px; float: right'>
<h1 class=t5>Related Modules</h1>
<div style="margin:2px">
<a href="/perldoc?Cache%3A%3ACache">Cache::Cache</a><br>
<a href="/perldoc?IPC%3A%3AShareable">IPC::Shareable</a><br>
<a href="/perldoc?Apache%3A%3ASession">Apache::Session</a><br>
<a href="/perldoc?Data%3A%3ADumper">Data::Dumper</a><br>
<a href="/perldoc?HTML%3A%3ATemplate">HTML::Template</a><br>
<a href="/perldoc?IO%3A%3ASocket">IO::Socket</a><br>
<a href="/perldoc?Cache%3A%3AMmap">Cache::Mmap</a><br>
<a href="/perldoc?Inline%3A%3AC">Inline::C</a><br>
<a href="/perldoc?LWP%3A%3AParallel">LWP::Parallel</a><br>
<a href="/perldoc?HTTP%3A%3AGHTTP">HTTP::GHTTP</a><br>
<small>
<a href="http://perlmonks.org/?node=cpan+module+search&pivot=1&module=MLDBM%3A%3ASync">more...</a><br>
By <a href="http://perlmonks.org/">perlmonks.org</a></small>
</div>
</div>

<div style="float:right">
<a href="https://rt.cpan.org/Public/Dist/Display.html?Name=MLDBM-Sync">View/Report Bugs</a><br/>

</div>
</div>
  Module Version:  0.30 &nbsp;
<span class="noprint">
  <a href="/src/CHAMAS/MLDBM-Sync-0.30/Sync.pm">Source</a> &nbsp;
</span>
<a name="___top"></a>
<div class=pod>
<div class=toc>
<div class='indexgroup'>
<ul   class='indexList indexList1'>
  <li class='indexItem indexItem1'><a href='#NAME'>NAME</a>
  <li class='indexItem indexItem1'><a href='#SYNOPSIS'>SYNOPSIS</a>
  <li class='indexItem indexItem1'><a href='#DESCRIPTION'>DESCRIPTION</a>
  <li class='indexItem indexItem1'><a href='#INSTALL'>INSTALL</a>
  <li class='indexItem indexItem1'><a href='#LOCKING'>LOCKING</a>
  <li class='indexItem indexItem1'><a href='#CACHING'>CACHING</a>
  <li class='indexItem indexItem1'><a href='#KEYS_CHECKSUM'>KEYS CHECKSUM</a>
  <li class='indexItem indexItem1'><a href='#New_MLDBM::Sync::SDBM_File'>New MLDBM::Sync::SDBM_File</a>
  <li class='indexItem indexItem1'><a href='#BENCHMARKS'>BENCHMARKS</a>
  <li class='indexItem indexItem1'><a href='#AUTHORS'>AUTHORS</a>
  <li class='indexItem indexItem1'><a href='#SEE_ALSO'>SEE ALSO</a>
</ul>
</div>
</div>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  MLDBM::Sync - safe concurrent access to MLDBM databases</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl">  use MLDBM::Sync;                       # this gets the default, SDBM_File
  use MLDBM qw(DB_File Storable);        # use Storable for serializing
  use MLDBM qw(MLDBM::Sync::SDBM_File);  # use extended SDBM_File, handles values &#62; 1024 bytes
  use Fcntl qw(:DEFAULT);                # import symbols O_CREAT &#38; O_RDWR for use with DBMs

  # NORMAL PROTECTED read/write with implicit locks per i/o request
  my $sync_dbm_obj = tie %cache, &#39;MLDBM::Sync&#39; [..other DBM args..] or die $!;
  $cache{&#34;AAAA&#34;} = &#34;BBBB&#34;;
  my $value = $cache{&#34;AAAA&#34;};

  # SERIALIZED PROTECTED read/write with explicit lock for both i/o requests
  my $sync_dbm_obj = tie %cache, &#39;MLDBM::Sync&#39;, &#39;/tmp/syncdbm&#39;, O_CREAT|O_RDWR, 0640;
  $sync_dbm_obj-&#62;Lock;
  $cache{&#34;AAAA&#34;} = &#34;BBBB&#34;;
  my $value = $cache{&#34;AAAA&#34;};
  $sync_dbm_obj-&#62;UnLock;

  # SERIALIZED PROTECTED READ access with explicit read lock for both reads
  $sync_dbm_obj-&#62;ReadLock;
  my @keys = keys %cache;
  my $value = $cache{&#39;AAAA&#39;};
  $sync_dbm_obj-&#62;UnLock;

  # MEMORY CACHE LAYER with Tie::Cache
  $sync_dbm_obj-&#62;SyncCacheSize(&#39;100K&#39;);

  # KEY CHECKSUMS, for lookups on MD5 checksums on large keys
  my $sync_dbm_obj = tie %cache, &#39;MLDBM::Sync&#39;, &#39;/tmp/syncdbm&#39;, O_CREAT|O_RDWR, 0640;
  $sync_dbm_obj-&#62;SyncKeysChecksum(1);
  my $large_key = &#34;KEY&#34; x 10000;
  $sync{$large_key} = &#34;LARGE&#34;;
  my $value = $sync{$large_key};</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>This module wraps around the MLDBM interface, by handling concurrent access to MLDBM databases with file locking, and flushes i/o explicity per lock/unlock. The new [Read]Lock()/UnLock() API can be used to serialize requests logically and improve performance for bundled reads &#38; writes.</p>

<pre class="sh_perl">  my $sync_dbm_obj = tie %cache, &#39;MLDBM::Sync&#39;, &#39;/tmp/syncdbm&#39;, O_CREAT|O_RDWR, 0640;

  # Write locked critical section
  $sync_dbm_obj-&#62;Lock;
    ... all accesses to DBM LOCK_EX protected, and go to same tied file handles
    $cache{&#39;KEY&#39;} = &#39;VALUE&#39;;
  $sync_dbm_obj-&#62;UnLock;

  # Read locked critical section
  $sync_dbm_obj-&#62;ReadLock;
    ... all read accesses to DBM LOCK_SH protected, and go to same tied files
    ... WARNING, cannot write to DBM in ReadLock() section, will die()
    ... WARNING, my $v = $cache{&#39;KEY&#39;}{&#39;SUBKEY&#39;} will trigger a write so not safe
    ...   to use in ReadLock() section
    my $value = $cache{&#39;KEY&#39;};
  $sync_dbm_obj-&#62;UnLock;

  # Normal access OK too, without explicity locking
  $cache{&#39;KEY&#39;} = &#39;VALUE&#39;;
  my $value = $cache{&#39;KEY&#39;};</pre>

<p>MLDBM continues to serve as the underlying OO layer that serializes complex data structures to be stored in the databases. See the MLDBM <a href="/perldoc?BUGS" class="podlinkpod"
>BUGS</a> section for important limitations.</p>

<p>MLDBM::Sync also provides built in RAM caching with Tie::Cache md5 key checksum functionality.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="INSTALL"
>INSTALL <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Like any other CPAN module, either use CPAN.pm, or perl -MCPAN <code>-e</code> shell, or get the file MLDBM-Sync-x.xx.tar.gz, unzip, untar and:</p>

<pre class="sh_perl">  perl Makefile.PL
  make
  make test
  make install</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="LOCKING"
>LOCKING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>The MLDBM::Sync wrapper protects MLDBM databases by locking and unlocking around read and write requests to the databases. Also necessary is for each new lock to tie() to the database internally, untie()ing when unlocking. This flushes any i/o for the dbm to the operating system, and allows for concurrent read/write access to the databases.</p>

<p>Without any extra effort from the developer, an existing MLDBM database will benefit from MLDBM::sync.</p>

<pre class="sh_perl">  my $dbm_obj = tie %dbm, ...;
  $dbm{&#34;key&#34;} = &#34;value&#34;;</pre>

<p>As a write or STORE operation, the above will automatically cause the following:</p>

<pre class="sh_perl">  $dbm_obj-&#62;Lock; # also ties
  $dbm{&#34;key&#34;} = &#34;value&#34;;
  $dbm_obj-&#62;UnLock; # also unties</pre>

<p>Just so, a read or FETCH operation like:</p>

<pre class="sh_perl">  my $value = $dbm{&#34;key&#34;};</pre>

<p>will really trigger:</p>

<pre class="sh_perl">  $dbm_obj-&#62;ReadLock; # also ties
  my $value = $dbm{&#34;key&#34;};
  $dbm_obj-&#62;Lock; # also unties</pre>

<p>However, these lock operations are expensive because of the underlying tie()/untie() that occurs for i/o flushing, so when bundling reads &#38; writes, a developer may explicitly use this API for greater performance:</p>

<pre class="sh_perl">  # tie once to database, write 100 times
  $dbm_obj-&#62;Lock;
  for (1..100) {
    $dbm{$_} = $_ * 100;
    ...
  }
  $dbm_obj-&#62;UnLock;

  # only tie once to database, and read 100 times
  $dbm_obj-&#62;ReadLock;
  for(1..100) {
    my $value = $dbm{$_};  
    ...
  }
  $dbm_obj-&#62;UnLock;</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="CACHING"
>CACHING <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>I built MLDBM::Sync to serve as a fast and robust caching layer for use in multi-process environments like mod_perl. In order to provide an additional speed boost when caching static data, I have added an RAM caching layer with Tie::Cache, which regulates the size of the memory used with its MaxBytes setting.</p>

<p>To activate this caching, just:</p>

<pre class="sh_perl">  my $dbm = tie %cache, &#39;MLDBM::Sync&#39;, &#39;/tmp/syncdbm&#39;, O_CREAT|O_RDWR, 0640;
  $dbm-&#62;SyncCacheSize(100000);  # 100000 bytes max memory used
  $dbm-&#62;SyncCacheSize(&#39;100K&#39;);  # 100 Kbytes max memory used
  $dbm-&#62;SyncCacheSize(&#39;1M&#39;);    # 1 Megabyte max memory used</pre>

<p>The ./bench/bench_sync.pl, run like &#34;bench_sync.pl <code>-c</code>&#34; will run the tests with caching turned on creating a benchmark with 50% cache hits.</p>

<p>One run without caching was:</p>

<pre class="sh_perl"> === INSERT OF 50 BYTE RECORDS ===
  Time for 100 writes + 100 reads for  SDBM_File                  0.16 seconds     12288 bytes
  Time for 100 writes + 100 reads for  MLDBM::Sync::SDBM_File     0.17 seconds     12288 bytes
  Time for 100 writes + 100 reads for  GDBM_File                  3.37 seconds     17980 bytes
  Time for 100 writes + 100 reads for  DB_File                    4.45 seconds     20480 bytes</pre>

<p>And with caching, with 50% cache hits:</p>

<pre class="sh_perl"> === INSERT OF 50 BYTE RECORDS ===
  Time for 100 writes + 100 reads for  SDBM_File                  0.11 seconds     12288 bytes
  Time for 100 writes + 100 reads for  MLDBM::Sync::SDBM_File     0.11 seconds     12288 bytes
  Time for 100 writes + 100 reads for  GDBM_File                  2.49 seconds     17980 bytes
  Time for 100 writes + 100 reads for  DB_File                    2.55 seconds     20480 bytes</pre>

<p>Even for SDBM_File, this speedup is near 33%.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="KEYS_CHECKSUM"
>KEYS CHECKSUM <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>A common operation on database lookups is checksumming the key, prior to the lookup, because the key could be very large, and all one really wants is the data it maps too. To enable this functionality automatically with MLDBM::Sync, just:</p>

<pre class="sh_perl">  my $sync_dbm_obj = tie %cache, &#39;MLDBM::Sync&#39;, &#39;/tmp/syncdbm&#39;, O_CREAT|O_RDWR, 0640;
  $sync_dbm_obj-&#62;SyncKeysChecksum(1);

 !! WARNING: keys() &#38; each() do not work on these databases
 !! as of v.03, so the developer will not be fooled into thinking
 !! the stored key values are meaningful to the calling application 
 !! and will die() if called.
 !!
 !! This behavior could be relaxed in the future.</pre>

<p>An example of this might be to cache a XSLT conversion, which are typically very expensive. You have the XML data and the XSLT data, so all you do is:</p>

<pre class="sh_perl">  # $xml_data, $xsl_data are strings
  my $xslt_output;
  unless ($xslt_output = $cache{$xml_data.&#39;&#38;&#38;&#38;&#38;&#39;.$xsl_data}) {
    ... do XSLT conversion here for $xslt_output ...
    $cache{$xml_data.&#39;&#38;&#38;&#38;&#38;&#39;.xsl_data} = $xslt_output;
  }</pre>

<p>What you save by doing this is having to create HUGE keys to lookup on, which no DBM is likely to do efficiently. This is the same method that File::Cache uses internally to hash its file lookups in its directories.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="New_MLDBM::Sync::SDBM_File"
>New MLDBM::Sync::SDBM_File <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>SDBM_File, the default used for MLDBM and therefore MLDBM::Sync has a limit of 1024 bytes for the size of a record.</p>

<p>SDBM_File is also an order of magnitude faster for small records to use with MLDBM::Sync, than DB_File or GDBM_File, because the tie()/untie() to the dbm is much faster. Therefore, bundled with MLDBM::Sync release is a MLDBM::Sync::SDBM_File layer which works around this 1024 byte limit. To use, just:</p>

<pre class="sh_perl">  use MLDBM qw(MLDBM::Sync::SDBM_File);</pre>

<p>It works by breaking up up the STORE() values into small 128 byte segments, and spreading those segments across many records, creating a virtual record layer. It also uses Compress::Zlib to compress STORED data, reducing the number of these 128 byte records. In benchmarks, 128 byte record segments seemed to be a sweet spot for space/time efficiency, as SDBM_File created very bloated *.pag files for 128+ byte records.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="BENCHMARKS"
>BENCHMARKS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>In the distribution ./bench directory is a bench_sync.pl script that can benchmark using the various DBMs with MLDBM::Sync.</p>

<p>The MLDBM::Sync::SDBM_File DBM is special because is uses SDBM_File for fast small inserts, but slows down linearly with the size of the data being inserted and read.</p>

<p>The results for a dual PIII-450 linux 2.4.7, with a ext3 file system blocksize 4096 mounted async on a RAID-1 2xIDE 7200 RPM disk were as follows:</p>

<pre class="sh_perl"> === INSERT OF 50 BYTE RECORDS ===
  Time for 100 writes + 100 reads for  SDBM_File                  0.16 seconds     12288 bytes
  Time for 100 writes + 100 reads for  MLDBM::Sync::SDBM_File     0.19 seconds     12288 bytes
  Time for 100 writes + 100 reads for  GDBM_File                  1.09 seconds     18066 bytes
  Time for 100 writes + 100 reads for  DB_File                    0.67 seconds     12288 bytes
  Time for 100 writes + 100 reads for  Tie::TextDir .04           0.31 seconds     13192 bytes

 === INSERT OF 500 BYTE RECORDS ===
 (skipping test for SDBM_File 100 byte limit)
  Time for 100 writes + 100 reads for  MLDBM::Sync::SDBM_File     0.52 seconds    110592 bytes
  Time for 100 writes + 100 reads for  GDBM_File                  1.20 seconds     63472 bytes
  Time for 100 writes + 100 reads for  DB_File                    0.66 seconds     86016 bytes
  Time for 100 writes + 100 reads for  Tie::TextDir .04           0.32 seconds     58192 bytes

 === INSERT OF 5000 BYTE RECORDS ===
 (skipping test for SDBM_File 100 byte limit)
  Time for 100 writes + 100 reads for  MLDBM::Sync::SDBM_File     1.41 seconds   1163264 bytes
  Time for 100 writes + 100 reads for  GDBM_File                  1.38 seconds    832400 bytes
  Time for 100 writes + 100 reads for  DB_File                    1.21 seconds    831488 bytes
  Time for 100 writes + 100 reads for  Tie::TextDir .04           0.58 seconds    508192 bytes

 === INSERT OF 20000 BYTE RECORDS ===
 (skipping test for SDBM_File 100 byte limit)
 (skipping test for MLDBM::Sync db size &#62; 1M)
  Time for 100 writes + 100 reads for  GDBM_File                  2.23 seconds   2063912 bytes
  Time for 100 writes + 100 reads for  DB_File                    1.89 seconds   2060288 bytes
  Time for 100 writes + 100 reads for  Tie::TextDir .04           1.26 seconds   2008192 bytes

 === INSERT OF 50000 BYTE RECORDS ===
 (skipping test for SDBM_File 100 byte limit)
 (skipping test for MLDBM::Sync db size &#62; 1M)
  Time for 100 writes + 100 reads for  GDBM_File                  3.66 seconds   5337944 bytes
  Time for 100 writes + 100 reads for  DB_File                    3.64 seconds   5337088 bytes
  Time for 100 writes + 100 reads for  Tie::TextDir .04           2.80 seconds   5008192 bytes</pre>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="AUTHORS"
>AUTHORS <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<p>Copyright (c) 2001-2002 Joshua Chamas, Chamas Enterprises Inc. All rights reserved. Sponsored by development on NodeWorks <a href="http://www.nodeworks.com" class="podlinkurl"
>http://www.nodeworks.com</a> and Apache::ASP <a href="http://www.apache-asp.org" class="podlinkurl"
>http://www.apache-asp.org</a></p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</p>

<h1><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO <img alt='^' src='http://st.pimg.net/tucs/img/up.gif'></a></h1>

<pre class="sh_perl"> MLDBM(3), SDBM_File(3), DB_File(3), GDBM_File(3)</pre>

</div>
<!-- This should probably be put in the <div class="footer"></div> -->
<script type="text/javascript">
    $(document).ready(function(){
        var startingStyle = $.cookie('css') ? $.cookie('css') : 'http://st.pimg.net/tucs/css/sh_none.min.css';
        $.fn.styleSwitch(startingStyle);
        $("#styleswitch").val(startingStyle);
        sh_highlightDocument();
        $("#styleswitch").bind(($.browser.msie ? "click" : "change"), function() {
            $.fn.styleSwitch($(this).val());
        });
    });
</script>
<div class="styleswitch">
    syntax highlighting:
    <select id="styleswitch">
        <option value="http://st.pimg.net/tucs/css/sh_none.min.css">no syntax highlighting</option>
        <option value="http://st.pimg.net/tucs/css/sh_acid.min.css">acid</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-dark.min.css">berries-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_berries-light.min.css">berries-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_bipolar.min.css">bipolar</option>
        <option value="http://st.pimg.net/tucs/css/sh_blacknblue.min.css">blacknblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_bright.min.css">bright</option>
        <option value="http://st.pimg.net/tucs/css/sh_contrast.min.css">contrast</option>
        <option value="http://st.pimg.net/tucs/css/sh_cpan.min.css">cpan</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkblue.min.css">darkblue</option>
        <option value="http://st.pimg.net/tucs/css/sh_darkness.min.css">darkness</option>
        <option value="http://st.pimg.net/tucs/css/sh_desert.min.css">desert</option>
        <option value="http://st.pimg.net/tucs/css/sh_dull.min.css">dull</option>
        <option value="http://st.pimg.net/tucs/css/sh_easter.min.css">easter</option>
        <option value="http://st.pimg.net/tucs/css/sh_emacs.min.css">emacs</option>
        <option value="http://st.pimg.net/tucs/css/sh_golden.min.css">golden</option>
        <option value="http://st.pimg.net/tucs/css/sh_greenlcd.min.css">greenlcd</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-anjuta.min.css">ide-anjuta</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-codewarrior.min.css">ide-codewarrior</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-devcpp.min.css">ide-devcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-eclipse.min.css">ide-eclipse</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-kdev.min.css">ide-kdev</option>
        <option value="http://st.pimg.net/tucs/css/sh_ide-msvcpp.min.css">ide-msvcpp</option>
        <option value="http://st.pimg.net/tucs/css/sh_kwrite.min.css">kwrite</option>
        <option value="http://st.pimg.net/tucs/css/sh_matlab.min.css">matlab</option>
        <option value="http://st.pimg.net/tucs/css/sh_navy.min.css">navy</option>
        <option value="http://st.pimg.net/tucs/css/sh_nedit.min.css">nedit</option>
        <option value="http://st.pimg.net/tucs/css/sh_neon.min.css">neon</option>
        <option value="http://st.pimg.net/tucs/css/sh_night.min.css">night</option>
        <option value="http://st.pimg.net/tucs/css/sh_pablo.min.css">pablo</option>
        <option value="http://st.pimg.net/tucs/css/sh_peachpuff.min.css">peachpuff</option>
        <option value="http://st.pimg.net/tucs/css/sh_print.min.css">print</option>
        <option value="http://st.pimg.net/tucs/css/sh_rand01.min.css">rand01</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-dark.min.css">solarized-dark</option>
	<option value="http://st.pimg.net/tucs/css/sh_solarized-light.min.css">solarized-light</option>
        <option value="http://st.pimg.net/tucs/css/sh_style.min.css">style</option>
        <option value="http://st.pimg.net/tucs/css/sh_the.min.css">the</option>
        <option value="http://st.pimg.net/tucs/css/sh_typical.min.css">typical</option>
        <option value="http://st.pimg.net/tucs/css/sh_vampire.min.css">vampire</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim-dark.min.css">vim-dark</option>
        <option value="http://st.pimg.net/tucs/css/sh_vim.min.css">vim</option>
        <option value="http://st.pimg.net/tucs/css/sh_whatis.min.css">whatis</option>
        <option value="http://st.pimg.net/tucs/css/sh_whitengrey.min.css">whitengrey</option>
        <option value="http://st.pimg.net/tucs/css/sh_zellner.min.css">zellner</option>
    </select>
</div>



<div class="footer"><div class="cpanstats">78280 Uploads, 24725 Distributions
106010 Modules, 9649 Uploaders
</div>
hosted by <a href="http://www.yellowbot.com">YellowBot</a><br/>
<a href="http://www.yellowbot.com"><img alt="do. tag. write. share." src="http://st.pimg.net/tucs/img/yellowbot_logo.gif"></a>
</div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript" src="http://ipv4.v6test.develooper.com/js/v1/v6test.js"></script>

<script type="text/javascript">
   // v6.target = '';
   if (!v6.target) { v6.only_once = true }
   v6.site = '7A0D89A6-2B82-11DF-B9DA-F61CBD13F020';
   v6.api_server = 'http://ipv4.v6test.develooper.com';
   try {
     v6.test();
   } catch(err) {}
</script>
<script type="text/javascript">
  $(document).ready(function(){
    $("a[href^=http:]").click(function(){
      var href = $(this).attr('href');
      var m = href.match('\/\/([^\/:]+)');
      _gaq.push(['_trackEvent','External',m[1],'Module']);
    });
    $("a[href^=/CPAN/]").click(function(){
      var href = $(this).attr('href');
      _gaq.push(['_trackEvent','Download',href,'Module']);
    });
  });
</script>
<!-- Sat Apr 28 04:31:05 2012 GMT (0.275717973709106) @cpansearch1 -->
 </body>
</html>
